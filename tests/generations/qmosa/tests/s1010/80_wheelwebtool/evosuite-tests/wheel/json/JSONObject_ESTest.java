/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 20:19:18 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.NoSuchElementException;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.064053272997979
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[3] = "] is not a Boolean.";
      JSONObject.quote("y-t-C7z,kYbrq5");
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("O?xzYJ9R;,!)8y#", "] is not a Boolean.");
      HashMap<JSONArray, Float> hashMap1 = new HashMap<JSONArray, Float>();
      hashMap0.putAll(hashMap1);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap0.put(jSONArray0, (Float) null);
      Boolean boolean0 = new Boolean("isrotateLeft");
      Boolean boolean1 = new Boolean("\"y-t-C7z,kYbrq5\"");
      JSONObject jSONObject1 = jSONObject0.accumulate("y-t-C7z,kYbrq5", "isrotateLeft");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.quote("] is not a Boolean.");
      JSONObject jSONObject3 = jSONObject0.put("*vk+79a", false);
      jSONObject3.putOpt("] `s notEaBooean.", jSONObject1);
      // Undeclared exception!
      jSONObject1.toString(2215);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{u'Xoa8*p%");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {u'Xoa8*p%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      Integer integer0 = new Integer((-1));
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "to";
      Double double0 = new Double((-1));
      Double double1 = new Double(0.0);
      Double double2 = new Double(374.77096);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.poll();
      linkedList0.add((Double) null);
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      LinkedList<Short> linkedList4 = new LinkedList<Short>(linkedList3);
      Short short0 = new Short((short)21);
      Short short1 = new Short((short)21);
      linkedList4.add(short1);
      JSONObject jSONObject0 = new JSONObject("to", stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2647700745160178
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      hashMap0.values();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>(hashMap0);
      Integer integer0 = new Integer(1636);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("isreplaceFirst", object0);
      jSONObject1.optBoolean("isreplaceFirst", true);
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(false, false);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      Integer integer1 = new Integer(1636);
      hashMap2.put(integer1, "isreplaceFirst");
      JSONObject jSONObject2 = jSONObject1.put("tlt$z7MGf", (Map) hashMap2);
      jSONObject0.toString((-5257), 1636);
      jSONObject2.has("tlt$z7MGf");
      Integer integer2 = new Integer(1636);
      try { 
        jSONObject1.append("isreplaceFirst", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isreplaceFirst] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5157079520857129
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject.valueToString(hashMap0);
      BiFunction<Object, Object, Byte> biFunction0 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap0.compute("Y*4HQ]yC$I! Zc~D>EU", biFunction0);
      Byte byte0 = new Byte((byte)47);
      hashMap0.put((String) null, byte0);
      Boolean.valueOf(true);
      Boolean.logicalOr(true, false);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 12, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.4201164366884957
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      String string0 = JSONObject.quote(",\n");
      assertEquals("\",\\n\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong(".vP_jUZ</{?2aFIm?Cf", 1079L);
      jSONObject0.toString(113);
      Integer.min(794, (-164));
      Integer.getInteger("getpush", 8192);
      Short.toUnsignedInt((short)139);
      Short.toUnsignedLong((short) (-326));
      Short.toUnsignedInt((short)46);
      Byte byte0 = new Byte((byte)16);
      Byte.toUnsignedLong((byte)32);
      Byte.toUnsignedInt((byte)22);
      Byte.toUnsignedLong((byte)48);
      String[] stringArray0 = JSONObject.getNames((Object) ",\n");
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7709530141372336
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Long long0 = new Long(5748L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Short short0 = new Short((short)76);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedInt((short)97);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("sum", (Object) long0);
      jSONObject1.optInt("] not found.");
      jSONObject1.optBoolean("] not found.", true);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject.quote("wheel.json.JSONException");
      JSONObject.quote((String) null);
      double double0 = jSONObject1.getDouble("sum");
      assertEquals(5748.0, double0, 0.01);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9649629230074277
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0, 123, 123);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.043370786319911
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      StringWriter stringWriter0 = new StringWriter(864);
      jSONObject1.write(stringWriter0);
      try { 
        jSONObject1.getJSONObject(":U_:/B{$}9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":U_:/B{$}9\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.537987101117365
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Float float0 = new Float(36.53771799683523);
      Float.max((-409.0617F), (-1.0F));
      Float.max((-409.0617F), 0.0F);
      Float.isFinite((-1.0F));
      Float.isFinite(74.57475F);
      Double double0 = new Double((-3045.2));
      Double.max((-2241.19986226), 74.57475F);
      Float.isFinite(0.0F);
      Float.min(74.57475F, 74.57475F);
      Double.isFinite(36.53771799683523);
      JSONObject.numberToString(float0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames((Object) jSONObject0);
      String string0 = jSONObject0.optString("java.lang.Float@0000000001", (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8572007905858017
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject.doubleToString(1901.07979281);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-1837));
      Integer.min((-1266), 115);
      Integer.getInteger("1901.07979281", (-1266));
      Double double0 = new Double((-1266));
      Byte byte0 = new Byte((byte) (-79));
      JSONObject jSONObject1 = jSONObject0.putOpt("1901.07979281", byte0);
      jSONObject1.getDouble("1901.07979281");
      Long long0 = new Long((-1L));
      Double double1 = new Double(133.42977);
      JSONObject jSONObject2 = jSONObject0.append("true", double1);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4708084763221114
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean.logicalOr(true, true);
      UnaryOperator.identity();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "{}";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.201040680056905
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "su";
      jSONObject0.optLong("su");
      JSONObject.getNames(jSONObject0);
      int int0 = 60;
      Integer integer0 = new Integer(60);
      String string1 = "false";
      Boolean.valueOf("false");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.put("8SC%!KjT", (Object) jSONObject1);
      String string2 = "in";
      jSONObject1.optBoolean("su", true);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.write(stringWriter0);
      Object object0 = new Object();
      String string3 = "getcopyValueOf";
      String string4 = "hM-lh";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("8SC%!KjT", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1960516973750743
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = JSONObject.doubleToString((-3873.968));
      assertEquals("-3873.968", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject1 = jSONObject0.accumulate("B<}!u)91n}X", boolean0);
      jSONObject0.put("B<}!u)91n}X", (-1637L));
      int int0 = jSONObject1.getInt("B<}!u)91n}X");
      assertEquals((-1637), int0);
      
      boolean boolean1 = jSONObject0.isNull("-3873.968");
      assertTrue(boolean1);
      
      String string1 = JSONObject.valueToString((Object) null);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.putOpt("int", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Float float0 = new Float(Double.NaN);
      Float.max((-1.0F), (-409.0617F));
      Float.sum((-1.0F), (-1.0F));
      Float.isFinite((-1.0F));
      Double double0 = new Double(1262.214118);
      Double.max((-3045.2), (-1028.1832357));
      Float.isFinite(0.0F);
      Float.min((-1.0F), (-1.0F));
      Float.min((-2492.954F), (-2092.8271F));
      Double.isFinite((-2241.19986226));
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5787213321366167
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      
      Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject();
      Boolean.logicalOr(true, false);
      String string1 = JSONObject.valueToString(hashMap0, (-898), 12);
      assertTrue(string1.equals((Object)string0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.195510093068952
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = (-50462705);
      Integer integer0 = new Integer((-50462705));
      Boolean.valueOf("] is not a number.");
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "f\\alse";
      jSONObject0.put("false", (Object) "wd[(e@i0w\u0001-");
      try { 
        jSONObject0.getJSONArray("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5805323987726636
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[3] = "] is not a Boolean.";
      JSONObject.quote("y-t-C7z,kYbrq5");
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("O?xzYJ9R;,!)8y#", "] is not a Boolean.");
      HashMap<JSONArray, Float> hashMap1 = new HashMap<JSONArray, Float>();
      hashMap0.putAll(hashMap1);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap0.put(jSONArray0, (Float) null);
      Boolean boolean0 = new Boolean("isrotateLeft");
      Boolean boolean1 = new Boolean("\"y-t-C7z,kYbrq5\"");
      jSONArray0.put(9, (Collection) null);
      JSONObject jSONObject2 = jSONObject0.accumulate("y-t-C7z,kYbrq5", "isrotateLeft");
      Float.min(9, 0.0F);
      JSONObject jSONObject3 = new JSONObject(hashMap0, stringArray0);
      jSONObject1.opt("O?xzYJ9R;,!)8y#");
      JSONObject jSONObject4 = jSONObject0.put("*vk+79a", false);
      assertSame(jSONObject4, jSONObject2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.528465710061025
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject0 = new JSONObject("{}");
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      BiFunction<Integer, Object, JSONObject> biFunction0 = (BiFunction<Integer, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Integer, Object, JSONObject> biFunction1 = (BiFunction<Integer, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction1);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.names();
      Double.isFinite(Double.NaN);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.47536377689374
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "wheel.json.JSONArray");
      StringWriter stringWriter0 = new StringWriter(8);
      JSONObject.getNames((Object) "wheel.json.JSONArray");
      String string0 = "RguW=g'J{j't{\\G#";
      stringWriter0.write("RguW=g'J{j't{G#");
      stringWriter0.write(8);
      StringWriter stringWriter1 = stringWriter0.append(':');
      stringWriter1.flush();
      jSONObject0.write(stringWriter1);
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONArray", (-1924L));
      jSONObject1.toString(92);
      jSONObject0.names();
      try { 
        jSONObject0.getInt("RguW=g'J{j't{G#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RguW=g'J{j't{G#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9525127468791601
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "] is not a number.";
      stringArray0[1] = "O8+l$v^H?A<OKN\"";
      Object object1 = new Object();
      Object object2 = new Object();
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("getvalueOf", (Object) null);
      try { 
        jSONObject1.getDouble("O8+l$v^H?A<OKN\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"O8+l$v^H?A<OKN\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.660100091052429
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Long long0 = new Long((-1914L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("!pGO2A", linkedList0);
      jSONObject1.optJSONObject("y-t-C7z,kYbrq5");
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.553076339678638
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = ",";
      JSONObject jSONObject1 = jSONObject0.put(",", (-70125688));
      Double double0 = new Double(1168.62592500211);
      Double.min((-70125688), 1168.62592500211);
      Long.getLong("\f");
      JSONObject jSONObject2 = jSONObject1.append("\f", (Object) null);
      jSONObject1.append("\f", double0);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      jSONObject2.put("\f", (Collection) linkedList0);
      jSONObject1.optBoolean("\f");
      JSONObject.testValidity(jSONObject0);
      jSONObject1.toString();
      jSONObject0.optLong("{\"java.lang.String@0000000005\":wheel.json.JSONArray@0000000006,\"java.lang.String@0000000002\":java.lang.Integer@0000000003}", 0L);
      jSONObject2.put("CUIY&@hd\"N\u0001Zk", (long) (-70125688));
      jSONObject0.isNull("\f");
      jSONObject0.getLong(",");
      jSONObject0.has((String) null);
      jSONObject2.toString();
      Integer integer0 = new Integer((-70125688));
      try { 
        Integer.parseUnsignedInt("}8|o*C", (-70125688));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -70125688 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1717472071804185
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long(5748L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      Float float0 = new Float((double) 5748L);
      hashMap0.put(jSONArray0, float0);
      String string0 = "iscomputeIfPresent";
      Boolean boolean0 = new Boolean(")_");
      JSONArray jSONArray1 = jSONArray0.put(9, (Collection) linkedList0);
      Long long1 = new Long(5748L);
      JSONObject jSONObject0 = new JSONObject(long1);
      linkedList0.poll();
      jSONObject0.accumulate("Hp_QG[4FGFDpD=d", jSONArray1);
      Float.min((-1.0F), 5748L);
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      Float float1 = new Float(3054.379F);
      JSONObject.valueToString(float1, 9, 9);
      JSONObject jSONObject1 = jSONObject0.put("Zq<U?]K(~#", (Map) hashMap1);
      hashMap0.putIfAbsent(jSONArray0, float0);
      HashMap<JSONArray, Float> hashMap2 = new HashMap<JSONArray, Float>();
      Float float2 = new Float((-1.0F));
      hashMap2.put(jSONArray0, float2);
      JSONObject.getNames((Object) long1);
      try { 
        jSONObject1.getBoolean(")_");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\")_\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(356.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}N*GKYw10XLkt;ua");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }N*GKYw10XLkt;ua
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Long long0 = new Long(5748L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optJSONObject((String) null);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      assertEquals(0, linkedList1.size());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.9722025380715902
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      JSONObject jSONObject1 = jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      JSONObject.quote(",{[7]B@q");
      JSONObject jSONObject2 = jSONObject0.put(":Y<D{14QIo=<.", 0L);
      Object object1 = new Object();
      Boolean boolean0 = new Boolean("A");
      jSONObject1.optBoolean((String) null, false);
      JSONObject.quote(",{[7]B@q");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.getInt(":Y<D{14QIo=<.");
      try { 
        jSONObject2.getLong("\f");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\f\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("^P");
      Boolean.logicalOr(false, false);
      HashMap<Long, Integer> hashMap0 = new HashMap<Long, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("^P", (long) 1392);
      jSONObject1.getInt("^P");
      JSONObject jSONObject2 = jSONObject1.put("'r:mB#6*peS cj$W", (Object) "^P");
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bt;}FFc-dK:ka";
      stringArray0[1] = "ha";
      Boolean.compare(true, true);
      stringArray0[3] = "U>9Dt7W+7";
      stringArray0[5] = "O8+l$v^H?A<OKN\"";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.putOpt((String) null, "Bt;}FFc-dK:ka");
      Boolean.logicalOr(false, false);
      JSONObject jSONObject1 = jSONObject0.accumulate("U>9Dt7W+7", "toH");
      assertSame(jSONObject0, jSONObject1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7269369375735455
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "] is not a Boolean.";
      stringArray0[3] = "] is not a Boolean.";
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("O?xzYJ9R;,!)8y#", "] is not a Boolean.");
      HashMap<JSONArray, Float> hashMap1 = new HashMap<JSONArray, Float>();
      hashMap0.putAll(hashMap1);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap0.put(jSONArray0, (Float) null);
      Boolean boolean0 = new Boolean("irotaeLet");
      Boolean boolean1 = new Boolean("] is not a Boolean.");
      Float.sum((-1.0F), 0.0F);
      jSONArray0.put(9, (Collection) null);
      jSONObject0.accumulate("y-t-C7z,kYbrq5", "irotaeLet");
      String string1 = "' and instead saw '";
      Float.min(9, 0.0F);
      JSONObject jSONObject2 = jSONObject1.put("' and instead saw '", (Map) hashMap1);
      hashMap0.putIfAbsent(jSONArray0, (Float) null);
      jSONObject2.optJSONArray("irotaeLet");
      jSONObject2.get("O?xzYJ9R;,!)8y#");
      hashMap0.put(jSONArray0, (Float) null);
      try { 
        jSONObject1.getBoolean("y-t-C7z,kYbrq5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y-t-C7z,kYbrq5\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.910465511497843
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "su";
      jSONObject0.optLong("su");
      JSONObject.getNames(jSONObject0);
      Byte byte0 = new Byte((byte)2);
      byte byte1 = (byte)25;
      Byte.toUnsignedLong((byte)25);
      JSONObject jSONObject1 = jSONObject0.put(" at character ", 1L);
      jSONObject1.getLong(" at character ");
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String string1 = "|LO|s-tgOm>";
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      String string0 = "!pGO2A";
      stringArray0[3] = "!pGO2A";
      String string1 = "H[r>my}!d4c2#C=HW&";
      JSONObject jSONObject1 = jSONObject0.put("H[r>my}!d4c2#C=HW&", (-1825L));
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      jSONObject1.getLong("H[r>my}!d4c2#C=HW&");
      String string2 = "ismin";
      Byte byte0 = new Byte((byte)26);
      Byte.toUnsignedLong((byte)25);
      try { 
        jSONObject1.getInt("!pGO2A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!pGO2A\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5311386121723252
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      String string0 = "get";
      Boolean boolean0 = Boolean.valueOf("get");
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("get", (Object) boolean0);
      jSONObject0.optBoolean("get", true);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.getInt("] is not a number.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a number.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.862339325920504
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      jSONObject0.optString("getisNaN", ",{[7]B@q");
      String string0 = "\\u";
      jSONObject0.put(string0, 0L);
      jSONObject0.optDouble(string0, (double) 0L);
      try { 
        jSONObject0.getLong("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6761389064361045
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      String string0 = "!pGO2A";
      stringArray0[3] = "!pGO2A";
      JSONObject jSONObject1 = jSONObject0.put("H[r>my}!d4c2#C=HW&", (-1830L));
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Byte byte0 = new Byte((byte)26);
      Byte.toUnsignedLong((byte)25);
      hashMap0.put("ismin", byte0);
      jSONObject1.optDouble("H[r>my}!d4c2#C=HW&");
      jSONObject1.optString("oSv?[}Ki-H/", "H[r>my}!d4c2#C=HW&");
      try { 
        jSONObject0.getJSONObject("va");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"va\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.1648729119013703
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bt;}FFc-dK:ka";
      stringArray0[1] = "ha";
      stringArray0[2] = "imax";
      stringArray0[3] = "U>9Dt7W+7";
      Integer integer0 = new Integer(1494);
      Double double0 = new Double(0.0);
      Short short0 = new Short((short)377);
      Short.compare((short)72, (short)86);
      JSONObject jSONObject0 = new JSONObject(short0);
      jSONObject0.has("s(LqBb%yd+");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.780082259616286
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String string0 = "toH";
      String[] stringArray0 = new String[9];
      stringArray0[0] = "toH";
      stringArray0[1] = "toH";
      stringArray0[2] = "toH";
      stringArray0[3] = "(p\"qIs";
      stringArray0[4] = "toH";
      stringArray0[5] = "toH";
      stringArray0[6] = "toH";
      stringArray0[7] = "toH";
      stringArray0[8] = "toH";
      JSONObject jSONObject0 = new JSONObject("toH", stringArray0);
      JSONObject.valueToString("(p\"qIs");
      String string1 = ",>iVJNA@G$O7%]";
      jSONObject0.append(",>iVJNA@G$O7%]", "toH");
      jSONObject0.optString(",>iVJNA@G$O7%]", (String) null);
      long long0 = 0L;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("getgetInteger");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getgetInteger
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2677946372884996
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>();
      String string0 = "{bsJ@whx`\\";
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = new Double((-924.6112));
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONTokener jSONTokener0 = new JSONTokener("{bsJ@whx`");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of {bsJ@whx`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{2s'XoV8;p}");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 9 of {2s'XoV8;p}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.024745423284182
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = (-1958L);
      Long long1 = new Long((-1958L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("!pGO2A", linkedList0);
      jSONObject1.optBoolean("!pGO2A");
      jSONObject0.optString("!pGO2A");
      try { 
        jSONObject1.getJSONObject("!pGO2A");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!pGO2A\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2343.327);
      Double double3 = new Double(286.18748568);
      Double double4 = new Double(0.0);
      Double.max(0.0, 609.46013);
      JSONObject.doubleToString(Double.NaN);
      Double double5 = new Double(5748L);
      boolean boolean0 = Double.isFinite(609.46013);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer(69);
      Integer.min(69, 47);
      Integer integer1 = new Integer(47);
      JSONObject.doubleToString(58);
      Double double0 = new Double(58);
      Float float1 = new Float((float) 58);
      Float.sum(0.0F, 1.0F);
      Float.sum(4032.0532F, 1.0F);
      boolean boolean0 = Double.isFinite((-853.2675958556));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6283413145315921
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>(hashMap0);
      int int0 = 1652;
      Integer integer0 = new Integer(1652);
      String string0 = "isreplaceFirst";
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("isreplaceFirst", object0);
      jSONObject1.optBoolean("isreplaceFirst", true);
      try { 
        jSONObject1.getBoolean("isreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceFirst\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.472019400550961
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "y-t-C7z,kYbrq5";
      stringArray0[2] = "wheel.json.JSONObject$Null";
      stringArray0[3] = "!pGO2A";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optDouble("eRJ-%( 3z8");
      jSONObject1.optBoolean("!pGO2A");
      JSONObject jSONObject2 = jSONObject1.put("C,L6+", false);
      JSONObject jSONObject3 = jSONObject0.putOpt("!pGO2A", "wheel.json.JSONObject$Null");
      jSONObject2.toString();
      jSONObject3.accumulate("C,L6+", "!pGO2A");
      try { 
        jSONObject1.put((String) null, 128);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4452500657877791
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      BiFunction<Integer, Object, JSONObject> biFunction0 = (BiFunction<Integer, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      BiFunction<Integer, Object, JSONObject> biFunction1 = (BiFunction<Integer, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction1);
      JSONArray jSONArray0 = new JSONArray();
      double double0 = 0.0;
      Float float0 = new Float(0.0);
      String string0 = "\\n";
      jSONObject0.accumulate("\n", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "\n");
      String string1 = "isdescendingIterator";
      String string2 = "Unclosed comment";
      try { 
        jSONObject0.getLong("isdescendingIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdescendingIterator\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9210648813071531
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      Long long0 = new Long((-1914L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.accumulate("g=5+0bNoyOaVG4$LX", "!pGO2A");
      Float float0 = new Float((double) (-1914L));
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      jSONObject2.optJSONObject("va");
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject3 = jSONObject1.put("!pGO2A", (Collection) linkedList1);
      jSONObject3.getString("g=5+0bNoyOaVG4$LX");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.837100044109741
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Long long0 = new Long(5748L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optJSONObject((String) null);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append(']');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) null);
      jSONObject0.write(stringWriter2);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bt;}FFc-dK:ka";
      stringArray0[1] = "ha";
      stringArray0[2] = "ismax";
      stringArray0[4] = "toH";
      stringArray0[5] = "O8+l$v^H?A<OKN\"";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Object object0 = jSONObject0.opt(stringArray0[3]);
      assertNull(object0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2343.327);
      Double double3 = new Double(286.18748568);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      Double double4 = new Double((-791.4067008418));
      linkedList1.add(double4);
      linkedList1.add(double1);
      Double double5 = new Double(0.0);
      Float.sum(0.0F, 0.0F);
      Float.sum((-1591.8853F), 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("m<6d,8rKGse^");
      boolean boolean0 = Double.isFinite(0.0F);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2368389764651782
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      BiFunction<Integer, Object, JSONObject> biFunction0 = (BiFunction<Integer, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-101));
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      HashMap<Integer, Double> hashMap2 = new HashMap<Integer, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      jSONObject0.optBoolean("hNT");
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6827494392771074
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Long long0 = new Long((-1914L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("!pGO2A", linkedList0);
      jSONObject1.optJSONObject("y-t-C7z,kYbrq5");
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      jSONObject0.optDouble("8r", (-1320.32312492));
      linkedList1.replaceAll(unaryOperator0);
      jSONObject0.put(">&B%}^g", (Collection) linkedList1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.500315532981063
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "JSONArray[";
      jSONObject0.optLong("JSONArray[", (-1L));
      try { 
        jSONObject0.put("JSONArray[", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2368389764651782
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("ro", 0L);
      jSONObject0.optBoolean((String) null, true);
      Byte byte0 = new Byte((byte)39);
      Long long0 = new Long((-1L));
      Object object0 = JSONObject.NULL;
      assertNotNull(object0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5171063970610277
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Long long0 = new Long(5748L);
      Short short0 = new Short((short)76);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedInt((short)97);
      Short.toUnsignedLong((short) (-1589));
      Short.toUnsignedInt((short) (-733));
      Byte byte0 = new Byte((byte)38);
      Byte.toUnsignedInt((byte)59);
      Byte.compare((byte)59, (byte)118);
      Byte.compare((byte)71, (byte)101);
      Byte.compare((byte)9, (byte)43);
      Byte.toUnsignedLong((byte) (-101));
      Byte.compare((byte)71, (byte)71);
      Byte.compare((byte)9, (byte)75);
      Byte.compare((byte)9, (byte)71);
      Byte.toUnsignedLong((byte)38);
      Byte.toUnsignedInt((byte)38);
      Byte.toUnsignedInt((byte)71);
      Byte.toUnsignedLong((byte)38);
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.19069326F);
      Boolean boolean0 = Boolean.FALSE;
      Double double0 = new Double(961.790499451);
      Integer integer0 = new Integer(125);
      Boolean.valueOf("[W4$i:*");
      JSONObject jSONObject1 = new JSONObject();
      boolean boolean1 = jSONObject0.optBoolean("toS", false);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.8681407161313688
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(object0);
      Float float0 = new Float(0.19069326F);
      Boolean.valueOf("0WKPW");
      jSONObject0.put("null", (Object) "null");
      boolean boolean0 = true;
      jSONObject0.optBoolean("null", true);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject0.accumulate("3", float0);
      Double double0 = new Double((-0.8510629336433196));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      Double.min(0.0, 0.0);
      linkedList0.add(double1);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        linkedList1.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Byte.toUnsignedInt((byte) (-3));
      Byte.toUnsignedLong((byte)15);
      Byte.compare((byte)42, (byte)42);
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      String string0 = jSONObject0.optString("%wHjv:qR`", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.957393535361821
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      jSONObject0.append("wheel.json.JSONObject@0000000001", "wheel.json.JSONObject@0000000001");
      jSONObject0.optString("R#0KCMBvQ\"", ",{[7]B@q");
      JSONObject jSONObject1 = jSONObject0.put(":Y<D{14QIo=<.", 0L);
      Object object1 = new Object();
      Boolean boolean0 = new Boolean("A");
      Object object2 = JSONObject.NULL;
      jSONObject0.accumulate(":Y<D{14QIo=<.", object2);
      try { 
        jSONObject1.getLong("7tisd$");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"7tisd$\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5571130980576455
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-44));
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Byte byte1 = new Byte((byte) (-44));
      Double double0 = new Double((-1.0));
      Float float0 = new Float(4473.0557F);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "isshortValue";
      stringArray0[1] = "iscompareTo";
      stringArray0[2] = "isintValue";
      stringArray0[3] = "zO-1x_1$Y`(I&>8";
      stringArray0[4] = "7 6}><5#ghz)";
      stringArray0[5] = ",X=wuBk;jym}";
      Float.isFinite((byte) (-44));
      stringArray0[6] = "a9<4-Q22,IRGRz";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.putOpt("wheel.json.JSONArray", "a9<4-Q22,IRGRz");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.036716635413885
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "] is not a Boolean.";
      stringArray0[3] = "] is not a Boolean.";
      JSONObject.quote("y-t-C7z,kYbrq5");
      HashMap<JSONArray, Float> hashMap0 = new HashMap<JSONArray, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.accumulate("O?xzYJ9R;,!)8y#", "] is not a Boolean.");
      HashMap<JSONArray, Float> hashMap1 = new HashMap<JSONArray, Float>();
      hashMap0.putAll(hashMap1);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap0.put(jSONArray0, (Float) null);
      Boolean boolean0 = new Boolean("isrotateLeft");
      Boolean boolean1 = new Boolean("\"y-t-C7z,kYbrq5\"");
      jSONArray0.put(9, (Collection) null);
      JSONObject jSONObject2 = jSONObject0.accumulate("y-t-C7z,kYbrq5", "isrotateLeft");
      String string1 = "' and instead saw '";
      Float.min(9, 0.0F);
      jSONObject1.put("' and instead saw '", (Map) hashMap1);
      hashMap0.putIfAbsent(jSONArray0, (Float) null);
      jSONObject2.toString(9, 102);
      hashMap0.put(jSONArray0, (Float) null);
      try { 
        jSONObject1.getBoolean("y-t-C7z,kYbrq5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"y-t-C7z,kYbrq5\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.19069326F);
      String string0 = "vP3i";
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7041112757296575
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      Float.isFinite(1374.5974F);
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.append("su", hashMap0);
      jSONObject0.optJSONArray("su");
      try { 
        jSONObject0.getLong("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("QnXGK*X%V-r", 0L);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.4901762161527465
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONObject.quote("CWKZAugf");
      int int0 = 573;
      JSONObject.quote("CWKZAugf");
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.names();
      jSONObject0.names();
      jSONObject0.optDouble("CWKZAugf", (double) 573);
      String string0 = "\\u";
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optInt("\"CWKZAugf\"", 573);
      try { 
        jSONObject0.getBoolean(string0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\\u\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7480673485460896
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Long long0 = new Long(5748L);
      Double double0 = new Double(1.0);
      Double double1 = new Double((-142.6674817));
      Double double2 = new Double((-142.6674817));
      Double double3 = new Double((-142.6674817));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.poll();
      linkedList2.add(double0);
      LinkedList<Short> linkedList3 = new LinkedList<Short>();
      LinkedList<Short> linkedList4 = new LinkedList<Short>(linkedList3);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "true";
      stringArray0[1] = "iscompare";
      stringArray0[2] = "true";
      stringArray0[3] = "true";
      stringArray0[4] = "iscompare";
      stringArray0[5] = "true";
      stringArray0[6] = "true";
      JSONObject jSONObject0 = new JSONObject(linkedList3, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject1, stringArray0);
      boolean boolean0 = Double.isFinite(0.0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.250864202682361
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      String string0 = "Z_kQ^>>\\uY6H1IVIsL";
      Short short0 = new Short((short)727);
      JSONObject jSONObject1 = jSONObject0.accumulate(string0, short0);
      jSONObject0.putOpt("g(", hashMap0);
      Double double0 = new Double((short)727);
      jSONObject1.append("getaddLast", double0);
      jSONObject0.toString();
      try { 
        jSONObject0.getDouble("z--");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"z--\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(".=[>oDa:(82J", 0.0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Long long0 = new Long(5748L);
      Double double0 = new Double(1.0);
      Double double1 = new Double((-142.6674817));
      Double double2 = new Double((-142.6674817));
      Double double3 = new Double(Double.NaN);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double4 = Double.valueOf(397.7712452);
      linkedList0.add(double4);
      Double.valueOf((-1003.669));
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.pop();
      Double double5 = new Double(3905.9436752);
      Double double6 = new Double(1.0);
      Double.sum(3905.9436752, 397.7712452);
      linkedList0.offerLast(double6);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = "^xWSkT>1~jvIQJ";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^xWSkT>1~jvIQJ";
      stringArray0[1] = "^xWSkT>1~jvIQJ";
      stringArray0[2] = "^xWSkT>1~jvIQJ";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.329661348854758
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("1901.079792810", 2052L);
      assertEquals(2052L, long0);
      
      Byte byte0 = new Byte((byte)35);
      boolean boolean0 = jSONObject0.isNull("1901.079792810");
      assertTrue(boolean0);
      
      hashMap0.put("KKRo#2)KW$*zW3P", byte0);
      long long1 = jSONObject0.optLong("su");
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      int int0 = 4;
      Integer integer0 = new Integer(4);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      Integer integer1 = new Integer(4);
      try { 
        jSONObject0.put((String) null, (Object) integer1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      Float.isFinite(1374.5974F);
      Double double0 = new Double(Double.NaN);
      Double.max(0.0, Double.NaN);
      Double.isFinite(0.0);
      try { 
        JSONObject.numberToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.422530243249022
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("!pGO2A", linkedList0);
      jSONObject1.optBoolean("!pGO2A");
      jSONObject0.optString("!pGO2A");
      jSONObject0.put("java.util.LinkedList@0000000010", 110);
      String string0 = "(4{u8`y4h9o[M";
      jSONObject0.optBoolean("(4{u8`y4h9o[M");
      jSONObject0.isNull(".");
      jSONObject1.optDouble(".");
      Float float0 = new Float(0.0);
      jSONObject0.optInt((String) null, 110);
      String string1 = null;
      jSONObject0.accumulate(".", jSONObject0);
      Double double0 = new Double((-1067.95225));
      linkedList0.add(double0);
      linkedList0.removeLast();
      try { 
        jSONObject1.getLong("isdescendingIterator");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdescendingIterator\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2343.327);
      Double double3 = new Double(286.18748568);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.pollFirst();
      Double double4 = new Double((-791.4067008418));
      Double.min(0.0, 1.0);
      linkedList1.add((Double) null);
      linkedList1.add(double4);
      linkedList1.add(double1);
      Double.isFinite(0.0);
      Double.max((-5289.0), (-463.81));
      Double double5 = new Double(0.0);
      Float float0 = new Float((float) 5748L);
      Float.sum(0.0F, 0.0F);
      Float.sum((-1591.8853F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(double2);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      hashMap0.clear();
      jSONObject0.optString("java.lang.Long@0000000006.");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5278369592870242
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Long long0 = new Long((-1958L));
      Integer integer0 = new Integer((-4079));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("isreplaceFirst", (Object) integer0);
      jSONObject0.optBoolean("ZQ~:gd{f\"3", false);
      StringWriter stringWriter0 = new StringWriter();
      Integer integer1 = new Integer(114);
      JSONObject jSONObject2 = jSONObject0.append("ZQ~:gd{f\"3", "tlt$z7MGf");
      Float float0 = new Float(1238.7);
      jSONObject1.accumulate("isreplaceFirst", jSONObject2);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.append((CharSequence) "ZQ~:gd{f\"3");
      Integer integer2 = new Integer((-700));
      Short short0 = new Short((short)46);
      jSONObject1.append("ZO~TaL<D_*&GEk{x`", "getsum");
      assertEquals(3, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.6417347121875212
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min((-1223.2773F), (-1223.2773F));
      Float.isFinite(2074.0F);
      Double double0 = new Double((-1223.2773F));
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.append("nJ)x6[Lx)=&{a5O", (Object) null);
      Float float1 = new Float(0.0);
      jSONObject0.accumulate("nJ)x6[Lx)=&{a5O", "nJ)x6[Lx)=&{a5O");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append('E');
      stringWriter2.append((CharSequence) "va");
      Integer integer0 = new Integer(19);
      Short short0 = new Short((short)46);
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      hashMap1.clear();
      assertTrue(hashMap1.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(Double.NaN);
      byte byte0 = (byte)32;
      Byte byte1 = new Byte((byte)32);
      Double double0 = new Double((byte)32);
      jSONObject0.accumulate("is", double0);
      StringWriter stringWriter1 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "is", (int) (byte)32, (-3000));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.4794090592280063
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("is", false);
      jSONObject0.optInt("ss#y*Gu#BX([H;Tb7`G", (-3009));
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      Short short0 = new Short((short) (-1271));
      Short.toUnsignedLong((short) (-53));
      Long long0 = new Long(0L);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bt;}FFc-dK:ka";
      stringArray0[1] = "ha";
      stringArray0[2] = "isdescendingIterator";
      stringArray0[3] = "U>9Dt7W+7";
      stringArray0[5] = "ha";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optDouble("4", 199.0);
      try { 
        jSONObject0.getLong("xnD6j?B`K4a}Cv^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"xnD6j?B`K4a}Cv^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.592818137772599
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      long long0 = (-1958L);
      Long long1 = new Long((-1958L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("!pGO2A", linkedList0);
      jSONObject1.optBoolean("!pGO2A");
      jSONObject0.optString("!pGO2A");
      JSONObject jSONObject2 = new JSONObject((Object) "!pGO2A");
      jSONObject2.put("java.util.LinkedList@0000000011", 110);
      jSONObject1.toString(110);
      String string0 = "(4{u8`y4h9o[M";
      jSONObject2.optBoolean("(4{u8`y4h9o[M");
      jSONObject0.isNull(".");
      jSONObject2.optDouble(".");
      Float float0 = new Float(0.0);
      jSONObject0.optInt((String) null, 110);
      String string1 = null;
      jSONObject0.accumulate(".", jSONObject2);
      String string2 = "Substring bounds error";
      // Undeclared exception!
      try { 
        linkedList0.removeLast();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8487241531864322
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-44));
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      Byte byte1 = new Byte((byte) (-44));
      JSONObject jSONObject0 = new JSONObject((Object) hashMap1);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".";
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      stringArray0[3] = ".";
      stringArray0[4] = "] is not a Boolean.";
      stringArray0[5] = ".";
      stringArray0[6] = "] is not a Boolean.";
      stringArray0[7] = ".";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double.isFinite(Double.NaN);
      jSONObject0.append(".", ".");
      try { 
        jSONObject0.getInt(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.6283356526043842
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[5];
      String string0 = "y-t-C7z,kYbrq5";
      String string1 = "] is not a Boolean.";
      stringArray0[3] = "] is not a Boolean.";
      int int0 = (-1548);
      Integer integer0 = new Integer((-1548));
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      jSONObject0.put("isreplaceFirst", object0);
      jSONObject0.optBoolean("] is not a Boolean.", false);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.getInt("isreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceFirst\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      int int0 = 126;
      JSONTokener jSONTokener0 = new JSONTokener("null");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = new Object();
      try { 
        jSONObject0.append((String) null, object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.276299861031427
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      hashMap0.values();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>(hashMap0);
      Integer integer0 = new Integer(1636);
      String string0 = "isreplaceFirst";
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("isreplaceFirst", object0);
      jSONObject1.optBoolean("isreplaceFirst", true);
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(false, false);
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      jSONObject1.put("isreplaceFirst", (Map) hashMap2);
      jSONObject0.toString((-5257), 1636);
      Integer integer1 = new Integer(1636);
      try { 
        jSONObject1.append("isreplaceFirst", boolean0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isreplaceFirst] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.0757358344407506
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      Integer integer0 = new Integer((-1));
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "to";
      stringArray0[1] = "S$|y5#Xc_)MJ <j=";
      stringArray0[2] = "Unclosed comment";
      stringArray0[3] = "getsubstring";
      stringArray0[4] = "V.;Lh d5}";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      hashMap0.put(integer0, jSONObject0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>(hashMap0);
      Integer integer1 = new Integer(1636);
      Boolean boolean1 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.put("isreplaceFirst", object0);
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalAnd(false, false);
      String string0 = "tlt$z7MGf";
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      jSONObject2.put("tlt$z7MGf", (Map) hashMap2);
      jSONObject1.toString((-5257), 1636);
      Integer integer2 = new Integer(1636);
      try { 
        jSONObject2.append("isreplaceFirst", boolean1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isreplaceFirst] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.4921530032950385
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Long long0 = new Long((-1958L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>(123);
      BiFunction<Object, Object, JSONObject> biFunction0 = (BiFunction<Object, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      BiFunction<Object, Object, JSONObject> biFunction1 = (BiFunction<Object, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction1);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.names();
      boolean boolean0 = Double.isFinite((-1958L));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[4];
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) stringArray0[3]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.2715885900774673
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Byte.toUnsignedInt((byte) (-30));
      Byte.toUnsignedLong((byte) (-30));
      Byte.compare((byte)64, (byte)42);
      JSONObject.valueToString(jSONArray0, 0, (byte) (-30));
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "[]";
      stringArray0[1] = "K";
      stringArray0[2] = "[]";
      stringArray0[3] = "[]";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      try { 
        jSONObject0.getJSONArray("S)vmSAmb6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S)vmSAmb6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.5891031478040796
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      Integer integer0 = new Integer((-2305));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "] is not a JSONObject.";
      stringArray0[1] = "!a";
      stringArray0[2] = "getdecode";
      stringArray0[3] = ".";
      stringArray0[4] = "";
      stringArray0[5] = "] not found.";
      JSONObject jSONObject0 = new JSONObject(hashMap0, stringArray0);
      hashMap0.put(integer0, jSONObject0);
      HashMap<Integer, JSONObject> hashMap1 = new HashMap<Integer, JSONObject>(hashMap0);
      Integer integer1 = new Integer(1636);
      JSONObject.valueToString(hashMap1);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("sum");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of sum
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Boolean boolean0 = new Boolean(true);
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-44));
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Byte byte1 = new Byte((byte) (-1));
      Byte byte2 = new Byte((byte) (-1));
      hashMap0.replace("pa", byte1, byte2);
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      hashMap0.putAll(hashMap1);
      Byte byte3 = new Byte((byte) (-44));
      hashMap0.replace("] is not a Boolean.", byte3);
      JSONObject.getNames((Object) hashMap0);
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      hashMap2.putAll(hashMap0);
      hashMap2.clear();
      assertNotSame(hashMap2, hashMap0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min((-409.0617F), (-1223.2773F));
      Short.toUnsignedInt((short)71);
      Short.toUnsignedInt((short)34);
      Short.toUnsignedLong((short)12);
      Short.toUnsignedInt((short) (-533));
      Byte byte0 = new Byte((byte)44);
      Byte.toUnsignedLong((byte)13);
      Byte.toUnsignedInt((byte)13);
      Byte.toUnsignedLong((byte)43);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = new Long(5748L);
      Double double0 = new Double(1.0);
      Double double1 = new Double((-142.6674817));
      Double double2 = new Double((-142.6674817));
      Double double3 = new Double(Double.NaN);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double4 = Double.valueOf(397.7712452);
      Double.max(1398.45737874, 1.0);
      linkedList0.add(double4);
      Double.valueOf((-1003.669));
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      linkedList0.pop();
      Double double5 = new Double(3905.9436752);
      Double double6 = new Double(1.0);
      linkedList0.offerLast(double6);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      int int0 = 1636;
      Integer integer0 = new Integer(1636);
      String string0 = "isreplaceFirst";
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.put("isreplaceFirst", object0);
      JSONObject jSONObject2 = jSONObject1.put("\"\"", (double) 1636);
      jSONObject2.remove("\"\"");
      StringWriter stringWriter0 = new StringWriter();
      Integer integer1 = new Integer(1157);
      try { 
        jSONObject0.append("isreplaceFirst", stringWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[isreplaceFirst] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("JSONArray initial value should be a string or collection or array.", (Object) null);
      StringWriter stringWriter0 = new StringWriter();
      Short short0 = new Short((short) (-1399));
      Short.toUnsignedInt((short)0);
      Short.toUnsignedInt((short)76);
      Short.toUnsignedLong((short)76);
      int int0 = Short.toUnsignedInt((short)0);
      Byte byte0 = new Byte((byte)51);
      Short.toUnsignedInt((short)2230);
      Short.toUnsignedLong((short)99);
      int int1 = Short.toUnsignedInt((short) (-3225));
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-1837));
      Integer.min((-1266), 115);
      Double double0 = new Double((-1266));
      Byte byte0 = new Byte((byte) (-79));
      Long long0 = new Long((-1L));
      Double double1 = new Double(133.42977);
      jSONObject0.append("true", double1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.710493230055004
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double((-5485.00123));
      Double double2 = new Double((-74.88));
      Double double3 = new Double(2343.327);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.poll();
      linkedList1.add(double3);
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      LinkedList<Short> linkedList3 = new LinkedList<Short>(linkedList2);
      Short short0 = new Short((short)42);
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "iscompare";
      stringArray0[2] = "iscompare";
      stringArray0[3] = "iscompare";
      stringArray0[4] = "iscompare";
      JSONObject jSONObject0 = new JSONObject(linkedList2, stringArray0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      boolean boolean0 = Double.isFinite((short)0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.5805323987726638
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Object object1 = new Object();
      Object object2 = new Object();
      jSONObject0.putOpt("<0]c@-m+r<LVh(H(", object2);
      try { 
        jSONObject0.getDouble("<0]c@-m+r<LVh(H(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<0]c@-m+r<LVh(H(\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      Short short0 = new Short((short) (-1271));
      jSONObject0.put("] is not a number.", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      BiFunction<Integer, Object, JSONObject> biFunction0 = (BiFunction<Integer, Object, JSONObject>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Boolean.valueOf(true);
      Boolean.logicalOr(true, true);
      String string0 = JSONObject.valueToString(jSONObject0, 12, 12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "!pGO2A";
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.get("dt48EyI=C+qF \u0001[*g");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dt48EyI=C+qF \\u0001[*g\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.1754515731845636
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min((-1223.2773F), (-1223.2773F));
      Float.isFinite(2074.0F);
      Double double0 = new Double((-1223.2773F));
      Double.max(0.0F, (-1123.67736));
      JSONObject.valueToString(double0);
      Object object0 = new Object();
      Object object1 = JSONObject.NULL;
      Boolean boolean0 = Boolean.valueOf(true);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.putOpt("java.lang.Double@0000000001", "java.lang.Double@0000000001");
      JSONObject.valueToString((Object) null, 25, 40);
      jSONObject0.optInt("java.lang.Double@0000000001", 39);
      Integer integer0 = new Integer(48);
      try { 
        jSONObject0.append("java.lang.Double@0000000001", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[java.lang.Double@0000000001] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.8636799873410004
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = (-50462705);
      Integer integer0 = new Integer((-50462705));
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "f\\alse";
      JSONObject jSONObject1 = jSONObject0.put("false", (Object) "wd[(e@i0w\u0001-");
      JSONObject.valueToString(object0, (-50462705), (-50462705));
      Object object1 = new Object();
      try { 
        jSONObject1.append("false", object1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[false] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      long long0 = 5748L;
      Long long1 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      double double1 = 0.0;
      Double double2 = new Double(0.0);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.5751765904639274
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Long long0 = new Long(5748L);
      Double double0 = new Double(1.0);
      Double double1 = new Double((-142.6674817));
      Double double2 = new Double((-142.6674817));
      Double double3 = new Double(Double.NaN);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Double double4 = Double.valueOf(397.7712452);
      linkedList0.add(double4);
      Double.valueOf((-1003.669));
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      Double double5 = new Double(3905.9436752);
      Double double6 = new Double(1.0);
      linkedList0.offerLast(double6);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList1.sort(comparator0);
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long1 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long1);
      jSONObject0.opt("'t=o><y@(N#.");
      try { 
        jSONObject0.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6434177197931796
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("\u0004C45K", (Collection) linkedList0);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double((-632.3068465092));
      BiFunction<Object, Object, Long> biFunction0 = (BiFunction<Object, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Long long0 = new Long((-2088L));
      Long.max(564L, 0L);
      Long.getLong((String) null, long0);
      Long.compare(0L, 564L);
      Long long1 = new Long(564L);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "ha";
      stringArray0[2] = "ha";
      stringArray0[3] = "U>9Dt7W+7";
      stringArray0[5] = "O8+l$v^H?A<OKN\"";
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.accumulate((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.531138612172325
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bt;}FFc-dK:ka";
      stringArray0[1] = "ha";
      stringArray0[2] = "imax";
      stringArray0[3] = "U>9Dt7W+7";
      stringArray0[5] = "O8+l$v^H?A<OKN\"";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      jSONObject0.put("v", (Collection) linkedList0);
      try { 
        jSONObject0.getJSONArray("Oz`I5Ewxmtla");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Oz`I5Ewxmtla\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1752045970807579
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(Double.NaN);
      Float.isFinite(1374.5974F);
      Double double0 = new Double(Double.NaN);
      Double.min(1374.5974F, 1.0);
      Double.max(0.0, Double.NaN);
      Double.isFinite(0.0);
      Boolean boolean1 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean1);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject.testValidity((Object) null);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2343.327);
      Double double3 = new Double(286.18748568);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      Double double4 = new Double((-791.4067008418));
      linkedList1.add((Double) null);
      linkedList1.add(double4);
      linkedList1.add(double1);
      Double.max((-5289.0), (-463.81));
      Double double5 = new Double(0.0);
      Float float0 = new Float((float) 5748L);
      Float.sum(0.0F, 0.0F);
      Float.sum((-1591.8853F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(double2);
      jSONObject0.keys();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.8445310563546058
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Long long0 = new Long((-1914L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONObject jSONObject1 = jSONObject0.accumulate("!pGO2A", linkedList0);
      jSONObject1.optJSONObject("y-t-C7z,kYbrq5");
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean(false);
      JSONObject.valueToString(boolean0, (-215), 91);
      try { 
        jSONObject0.getJSONArray("Jz^Pdc>OA]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Jz^Pdc>OA]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.71578819724698
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Long long0 = new Long(5748L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(long0);
      Boolean.logicalOr(false, false);
      JSONObject.valueToString(jSONObject0, 300, 92);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5869133610136417
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Short short0 = new Short((short)453);
      Short.toUnsignedLong((short)87);
      Short short1 = new Short((short)87);
      LinkedList<Short> linkedList1 = new LinkedList<Short>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>(linkedList1);
      linkedList2.add(short1);
      String[] stringArray0 = new String[2];
      Double double0 = new Double(87L);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Double.isFinite((short)87);
      jSONObject0.optJSONArray("JSONArray[");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double double0 = new Double(356.0);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("}N*GKYw10XLkt;ua");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}N*GKYw10XLkt;ua\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0900596587107838
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min((-409.0617F), (-1223.2773F));
      Float.max(0.0F, (-1223.2773F));
      Float.isFinite(0.0F);
      Double double0 = new Double(0.0);
      Double.max(74.57475F, 0.0);
      Float.isFinite((-1223.2773F));
      Double.sum((-1.0F), 0.0);
      Double.isFinite((-1090.712046582683));
      double double1 = new Float((-1.0F));
      Double.max((-2109.991154), 3494.263);
      String string0 = JSONObject.valueToString(double0, 595, 595);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.4795008699302592
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long(5748L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Long.toUnsignedString((-1115L));
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject(long0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      try { 
        jSONObject0.getJSONArray("java.lang.Short@00000000040");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Short@00000000040\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(0.0);
      Double double0 = new Double(0.0);
      Double double1 = new Double((-2162.75624596));
      Double double2 = new Double((-2340.619088118));
      Double double3 = new Double((-1009.739));
      Double double4 = new Double(0.0);
      Double double5 = new Double((-1.0));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add((Double) null);
      Double double6 = new Double((-2340.619088118));
      Double.isFinite(0.0);
      Double double7 = new Double((-1009.739));
      linkedList0.add(double7);
      Double.valueOf((-142.6674817));
      String string0 = JSONObject.quote("yGrf/Di+#");
      assertEquals("\"yGrf/Di+#\"", string0);
      
      String string1 = JSONObject.quote("/;=");
      assertEquals("\"/;=\"", string1);
      
      String string2 = JSONObject.quote("EinK93d<grV4up+YW");
      assertEquals("\"EinK93d<grV4up+YW\"", string2);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      String string0 = JSONObject.quote("2/;`xL4G26-,s8>1");
      assertEquals("\"2/;`xL4G26-,s8>1\"", string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(1080);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6423651354584372
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Long long0 = new Long((-1914L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject((Object) "!pGO2A");
      JSONObject jSONObject1 = jSONObject0.accumulate("zo\"{jR&cgC'!0<P7'", "zo\"{jR&cgC'!0<P7'");
      jSONObject1.optJSONObject("!pGO2A");
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      Double double0 = new Double((-1914L));
      unaryOperator0.apply(double0);
      linkedList0.replaceAll(unaryOperator0);
      LinkedList<Float> linkedList3 = new LinkedList<Float>();
      jSONObject0.put("!pGO2A", (Collection) linkedList3);
      int int0 = jSONObject1.length();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write(44);
      StringWriter stringWriter1 = new StringWriter(1080);
      jSONObject0.write(stringWriter1);
      assertEquals("{}", stringWriter1.toString());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.9869667702348364
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append(",:]}/\"[{;=#", object0);
      String string0 = "su";
      jSONObject0.optLong("su");
      JSONObject.getNames(jSONObject0);
      try { 
        jSONObject0.getString("4Ya^Z$n?'9)v> B8tA?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4Ya^Z$n?'9)v> B8tA?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.991509361356614
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "isrotateLeft";
      HashMap<JSONArray, Float> hashMap1 = new HashMap<JSONArray, Float>();
      HashMap<JSONArray, Float> hashMap2 = new HashMap<JSONArray, Float>();
      hashMap1.putAll(hashMap2);
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap1.put(jSONArray0, (Float) null);
      Boolean boolean0 = new Boolean("Null pointer");
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)61);
      jSONObject0.accumulate("Null pointer", byte0);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.873918446766993
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Long long0 = new Long((-1958L));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      boolean boolean0 = jSONObject0.isNull(".");
      assertTrue(boolean0);
      
      Float float0 = new Float(0.0);
      int int0 = jSONObject0.optInt((String) null, 110);
      assertEquals(110, int0);
      
      Double double0 = new Double((-1067.95225));
      linkedList0.add(double0);
      linkedList0.removeLast();
      long long1 = jSONObject0.optLong("Substring bounds error", (-1958L));
      assertEquals((-1958L), long1);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "!pGO2A";
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string1 = jSONObject0.toString(1152, 1152);
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.8898032420472077
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[6];
      linkedList0.pollLast();
      stringArray0[0] = "true";
      stringArray0[1] = " of ";
      stringArray0[2] = ")VN<-*0xQ].~u_,";
      stringArray0[3] = "";
      stringArray0[4] = "7,mZc-XKJp}To";
      stringArray0[5] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      jSONObject0.put("wheel.json.JSONObject", (Map) hashMap0);
      jSONObject0.optInt(" of ", 0);
      double double0 = jSONObject0.optDouble("7,mZc-XKJp}To");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(286.18748568);
      Double double3 = new Double(286.18748568);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double1);
      Double.valueOf(22.1619547526424);
      Consumer<Double> consumer0 = (Consumer<Double>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList1.forEach(consumer0);
      Double double4 = new Double(1.0);
      linkedList1.offerLast(double4);
      JSONObject.quote("hig");
      JSONObject.quote("Xa;-GT");
      String string0 = JSONObject.quote("\"Xa;-GT\"");
      assertEquals("\"\\\"Xa;-GT\\\"\"", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short) (-733));
      Short.toUnsignedInt((short)12);
      Short.toUnsignedInt((short)101);
      Short.toUnsignedLong((short)12);
      Short.toUnsignedInt((short)97);
      String string0 = JSONObject.quote("\b");
      assertEquals("\"\\b\"", string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-6));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "9JCrX`(?b~<(Q{.";
      stringArray0[1] = "G~b<S\"WYo64fO1+HYr<";
      stringArray0[2] = "Expected '";
      stringArray0[3] = "";
      stringArray0[4] = ".8";
      stringArray0[5] = "su";
      stringArray0[6] = "Uc-C&!0cK zQ]KY";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      boolean boolean0 = jSONObject0.optBoolean("su");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.9701814400260844
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HashMap<Integer, JSONObject> hashMap0 = new HashMap<Integer, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      Object object0 = JSONObject.NULL;
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(0.0);
      JSONObject jSONObject1 = jSONObject0.accumulate("tlt$z7MGf", "faM'ls");
      jSONObject1.remove("faM'ls");
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.append((CharSequence) "va");
      Integer integer0 = new Integer(92);
      Short short0 = new Short((short)46);
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      hashMap1.putIfAbsent((String) null, (Byte) null);
      hashMap1.clear();
      jSONObject0.names();
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min((-1223.2773F), 0.0F);
      Float.min(0.0F, (-2773.8F));
      Float.isFinite(2074.0F);
      Double double0 = new Double(0.0);
      Double double1 = new Double(0.0);
      Float.isFinite((-7.29972F));
      Double double2 = new Double(1.0);
      Float.isFinite((-2773.8F));
      Double.max(Double.NaN, 7.492210875213913);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "ha";
      stringArray0[2] = "imax";
      stringArray0[3] = "imax";
      stringArray0[5] = "O8+l$v^H?A<OKN\"";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      jSONObject0.optLong("imax", (-1340L));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertFalse(linkedList0.contains("imax"));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2343.327);
      Double double3 = new Double(286.18748568);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.pollFirst();
      Double double4 = new Double((-791.4067008418));
      Double.min(0.0, 1.0);
      linkedList1.add((Double) null);
      linkedList1.add(double4);
      linkedList1.add(double1);
      Double.isFinite(0.0);
      Double.max((-5289.0), (-463.81));
      Double double5 = new Double(0.0);
      Float float0 = new Float((float) 5748L);
      Float.sum(0.0F, 0.0F);
      Float.sum((-1591.8853F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(double2);
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      long long1 = jSONObject0.optLong(",\n");
      assertEquals(3, jSONObject0.length());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Byte byte0 = new Byte((byte) (-44));
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      HashMap<String, Byte> hashMap1 = new HashMap<String, Byte>();
      hashMap0.putAll(hashMap1);
      Byte byte1 = new Byte((byte) (-44));
      hashMap0.replace("] is not a Boolean.", byte1);
      Float.min((byte) (-44), (-1181.3256F));
      Float.sum(473.1172F, 0.0F);
      Double.isFinite(1117.866431403351);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<String, Byte> hashMap0 = new HashMap<String, Byte>();
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Bt;}FFc-dK:ka";
      stringArray0[1] = "ha";
      stringArray0[2] = "imax";
      stringArray0[3] = "U>9Dt7W+7";
      stringArray0[5] = "O8+f$v^H?A<OKN\"";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Boolean.logicalOr(false, false);
      String string0 = jSONObject0.toString(12);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2343.327);
      Double double3 = new Double(286.187486);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.poll();
      linkedList1.add(double0);
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      LinkedList<Short> linkedList3 = new LinkedList<Short>(linkedList2);
      Short short0 = new Short((short)0);
      linkedList2.add(short0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "true";
      stringArray0[1] = "iscompare";
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList2);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.0888999753452238
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[3] = "!pGO2A";
      Integer integer0 = new Integer(18);
      String string0 = JSONObject.valueToString(integer0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min((-409.0617F), (-1223.2773F));
      Float.max(0.0F, (-1223.2773F));
      Float.isFinite(0.0F);
      Double double0 = new Double(0.0);
      Double.max(74.57475F, 0.0);
      Float.isFinite((-1223.2773F));
      Double.sum((-1.0F), 0.0);
      Double.isFinite((-1090.712046582683));
      Double.max((-2109.991154), 3494.263);
      Float.min((-1.0F), (-1223.2773F));
      Double.isFinite((-1.0));
      Double.isFinite((-1.0));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Long long0 = new Long(5748L);
      Short short0 = new Short((short)76);
      Short.toUnsignedInt((short)0);
      Short.toUnsignedInt((short)97);
      Short.toUnsignedLong((short) (-1589));
      Short.toUnsignedInt((short) (-733));
      Byte byte0 = new Byte((byte)38);
      Short.toUnsignedInt((short)76);
      Short.toUnsignedLong((short)0);
      Short.toUnsignedInt((short) (-1589));
      String string0 = JSONObject.quote("yWhi1vEMi ~55");
      assertEquals("\"yWhi1vEMi ~55\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.4941751382893085
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("is", false);
      Object object0 = new Object();
      Boolean boolean0 = Boolean.TRUE;
      Short short0 = new Short((short) (-1271));
      Short.toUnsignedLong((short) (-53));
      Long long0 = new Long(0L);
      Object object1 = new Object();
      jSONObject1.put("ss#y*Gu#BX([H;Tb7`G", 1476);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optDouble("]y.qu'p/`c Mvb4P", 0.0);
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalOr(false, true);
      UnaryOperator<Double> unaryOperator0 = UnaryOperator.identity();
      assertNotNull(unaryOperator0);
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Long long0 = new Long(5748L);
      Comparator<Double> comparator0 = (Comparator<Double>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Double double0 = new Double(1.0);
      Double double1 = new Double(0.0);
      Double double2 = new Double(2343.327);
      Double double3 = new Double(286.18748568);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.pollFirst();
      Double double4 = new Double((-791.4067008418));
      Double.min(0.0, 1.0);
      linkedList1.add((Double) null);
      linkedList1.add(double4);
      linkedList1.add(double1);
      Double.isFinite(0.0);
      Double.max((-5289.0), (-463.81));
      Double double5 = new Double(0.0);
      Float float0 = new Float((float) 5748L);
      Float.sum(0.0F, 0.0F);
      Float.sum((-1591.8853F), 0.0F);
      JSONObject jSONObject0 = new JSONObject(double2);
      try { 
        jSONObject0.getLong("k&#,n+$A[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k&#,n+$A[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=1.271899083808096
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      HashMap<String, Byte> hashMap2 = new HashMap<String, Byte>();
      Short short0 = new Short((short)39);
      HashMap<String, Byte> hashMap3 = new HashMap<String, Byte>();
      Double.isFinite((short)39);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "isfloatToRawIntBits";
      stringArray0[2] = "[";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(hashMap3, stringArray0);
      int int0 = jSONObject0.optInt("[");
      assertEquals(0, int0);
  }
}
