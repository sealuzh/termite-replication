/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:44:45 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Short.compare((short)32, (short) (-823));
      Integer integer0 = new Integer((short)32);
      Integer.compareUnsigned((short) (-3471), 3918);
      Integer.compare((short) (-823), (short)32);
      Integer.min(58, (-12473307));
      Integer.toUnsignedLong((-30733247));
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.remainderUnsigned((-1459), (-12473307));
      Integer.compareUnsigned(855, 1862);
      Integer.remainderUnsigned((-12473307), 106);
      Integer.toUnsignedString(1472);
      Integer.divideUnsigned(57, (-1));
      Integer.remainderUnsigned((-2305), 1460);
      String string0 = JSONObject.doubleToString((-12473307));
      assertEquals("-1.2473307E7", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.7775099581093343
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Double double0 = new Double(1.0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-81));
      Byte byte1 = new Byte((byte)120);
      Short short0 = new Short((short)34);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "KiNs<fUs?%G7s/sy>nw";
      stringArray0[1] = "Y`wCD2A`4x@^=";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      jSONObject0.putOpt("has", "QQ/9q'_4");
      JSONObject jSONObject1 = jSONObject0.accumulate("has", short0);
      jSONObject0.put("wheel.json.JSONObject", (long) (byte)120);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject2 = jSONObject0.put("JSONArray[", (Object) float0);
      Long long0 = new Long((byte) (-81));
      JSONObject jSONObject3 = new JSONObject();
      Float float1 = new Float((double) (byte)120);
      JSONObject jSONObject4 = jSONObject1.append("KiNs<fUs?%G7s/sy>nw", short0);
      jSONObject2.isNull("has");
      Object object0 = jSONObject4.remove("JSONArray[");
      assertEquals(0.0F, object0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2726846434404573
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("itoHexStrin", (-657.2883104485206));
      assertEquals((-657.2883104485206), double0, 0.01);
      
      Long long0 = new Long((-1L));
      jSONObject0.put("Vz[uA4i#=#7", (-2034L));
      double double1 = jSONObject0.optDouble("Vz[uA4i#=#7");
      assertEquals((-2034.0), double1, 0.01);
      
      String string0 = JSONObject.doubleToString((-657.2883104485206));
      assertEquals("-657.2883104485206", string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.3888343611305354
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Float.sum((-1.0F), (-1.0F));
      Float.isFinite((-2.0F));
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.min((-143.27F), (-303.83F));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.values();
      Float.min(1162.7377F, (-2.0F));
      hashMap0.put("|(.<je`^#+*JUccUQ", "getvalueOf");
      Float.sum(0.0F, (-1.0F));
      hashMap0.put("jgM\"'vChR!N$", "ispar6Sho");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      Float.min(1677.0F, 0.0F);
      jSONObject0.optLong("HWhc");
      boolean boolean0 = new Boolean(true);
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.clone();
      Float.max((-2.0F), 0.0F);
      Float float1 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.9016928039887797
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(Double.NaN, 1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optJSONArray("/J@K}0ozUv");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("/J@K}0ozUv");
      Writer writer0 = jSONObject0.write(stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(35);
      stringWriter0.write(8192);
      Byte byte0 = new Byte((byte)21);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("issubstring", (Object) writer0);
      Long long0 = new Long(1L);
      jSONObject1.accumulate("JSONObject[", jSONObject2);
      jSONObject1.isNull("Dnm OCm7@Z");
      Object object0 = new Object();
      jSONObject2.append("Dnm OCm7@Z", object0);
      String string0 = " at character ";
      // Undeclared exception!
      jSONObject0.toString(12);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.5204928154748063
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      HashMap<Float, Long> hashMap2 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.names();
      Float float0 = new Float((-1.0F));
      JSONObject jSONObject1 = jSONObject0.append(" of ", float0);
      Byte.toUnsignedLong((byte)13);
      jSONObject1.getJSONArray(" of ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      JSONObject jSONObject2 = jSONObject1.put("islongBitsToDouble", (Collection) linkedList0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.927469039026252
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!`]JH6tzi3T$oc\"V", false);
      JSONObject jSONObject1 = jSONObject0.put("] not found.", true);
      jSONObject1.optDouble((String) null, 0.0);
      jSONObject1.optBoolean("] not found.");
      JSONObject.valueToString(jSONObject0, (-3497), (-3497));
      Float float0 = new Float((double) (-3497));
      jSONObject0.accumulate("getgetChars", "{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject.doubleToString(2542.0353811545533);
      try { 
        jSONObject1.getJSONObject("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6284440812500591
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float.sum((-1.0F), (-1.0F));
      Float.isFinite((-2.0F));
      Float.min((-143.27F), (-303.83F));
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.values();
      float float0 = 1162.7377F;
      hashMap0.put("] is not a JSONObject.", " at character ");
      Float.min(1162.7377F, (-2.0F));
      hashMap0.put("|(.<je`^#+*JUccUQ", "getvalueOf");
      Float.sum(0.0F, (-1.0F));
      hashMap0.put("jgM\"'vChR!N$", "ispar6Sho");
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float.min(1677.0F, 0.0F);
      jSONObject0.optBoolean("jgM\"'vChR!N$", true);
      try { 
        jSONObject0.get("|H1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"|H1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject.valueToString(hashMap0, 123, (-1371));
      Object object0 = new Object();
      Integer integer0 = new Integer(2401);
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      assertTrue(hashMap1.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("|+J=9|TEX1zs,ip+}F");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |+J=9|TEX1zs,ip+}F
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.870414298313398
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(Double.NaN, 1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "\\/J\\@K}0ozUv";
      jSONObject0.optJSONArray("/J@K}0ozUv");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("/J@K}0ozUv");
      Writer writer0 = jSONObject0.write(stringWriter0);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(35);
      stringWriter0.write(8192);
      Byte byte0 = new Byte((byte)21);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      JSONObject jSONObject2 = jSONObject1.put("issubstring", (Object) writer0);
      Long long0 = new Long(1L);
      JSONObject jSONObject3 = jSONObject1.accumulate("JSONObject[", jSONObject2);
      jSONObject3.optLong("JSONObject[");
      Double double1 = new Double((byte)21);
      Double double2 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double2, (byte)21, 87);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5197387829465234
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      Integer.getInteger("ji>@'#fmP`~_?q");
      Integer integer0 = new Integer((-1717));
      Integer integer1 = new Integer(1512);
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001.", (Object) null);
      try { 
        jSONObject1.getDouble("#B4z7t2a</5?SMVt");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#B4z7t2a<\\/5?SMVt\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.4203044280116917
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Boolean, Object> hashMap0 = new HashMap<Boolean, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = (-719);
      JSONObject.getNames(jSONObject0);
      jSONObject0.toString((-719));
      JSONObject jSONObject1 = jSONObject0.append("{}", "{}");
      jSONObject1.put("{}", false);
      jSONObject0.has("{}");
      String string0 = "Unclosed comment";
      try { 
        jSONObject0.getLong("Unclosed comment");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Unclosed comment\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      Collection<String> collection0 = hashMap0.values();
      Double.sum((-1.0), (-1.0));
      String string0 = JSONObject.valueToString(collection0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.4655639872698147
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("b$rGpzL.8%Q>j|?2q", (-656.7));
      Long long0 = new Long((-1721L));
      JSONObject jSONObject1 = jSONObject0.append("Vz[uA4i#=#7", "Vz[uA4i#=#7");
      jSONObject1.optDouble("Substring bounds error");
      jSONObject1.put("istoString", (-275));
      jSONObject1.getInt("istoString");
      jSONObject0.optJSONObject("] is not a number.");
      try { 
        jSONObject1.getDouble("b$rGpzL.8%Q>j|?2q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b$rGpzL.8%Q>j|?2q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.5185338042808048
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.append("toO", "toO");
      jSONObject1.optLong("toO", 0L);
      JSONObject jSONObject2 = jSONObject1.put("toO", 3620.0);
      jSONObject1.optInt("toO", (-1158));
      jSONObject1.optString("<wk#7k,", "<wk#7k,");
      int int0 = jSONObject2.getInt("toO");
      assertEquals(2, jSONObject0.length());
      assertEquals(3620, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4990902888709017
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("b$rGpzL.8%Q>j|?2q", (-656.7));
      Long long0 = new Long((-1721L));
      JSONObject jSONObject1 = jSONObject0.append("Vz[uA4i#=#7", "Vz[uA4i#=#7");
      jSONObject1.optDouble("Substring bounds error");
      jSONObject1.put("istoString", (-275));
      jSONObject0.isNull("istoString");
      jSONObject0.optJSONArray("Vz[uA4i#=#7");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      String string0 = "issubstring";
      byte byte0 = (byte)21;
      Byte byte1 = new Byte((byte)21);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "q*!XWTI)l";
      stringArray0[1] = "";
      stringArray0[2] = "issubstring";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      Byte byte2 = new Byte((byte)83);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte2);
      Float float0 = new Float((double) (byte)83);
      try { 
        jSONObject1.put((String) null, (Object) float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.2705924608242767
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("itoHexStrin", (-657.2883104485206));
      JSONObject jSONObject1 = jSONObject0.put("{", false);
      JSONObject.valueToString("itoHexStrin", (-3497), 1596);
      Float float0 = new Float(1.0);
      jSONObject1.accumulate("", "getgetChars");
      JSONTokener jSONTokener0 = new JSONTokener("] not found.");
      jSONTokener0.skipPast("] not found.");
      JSONTokener jSONTokener1 = new JSONTokener("{");
      jSONTokener0.skipPast("Expected a ':' after a key");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(Double.NaN);
      Float.isFinite(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.min(0.0F, 0.0F);
      Float.sum(0.0F, 0.0F);
      Float.sum(967.12646F, (-1170.0F));
      Float.sum(0.0F, 967.12646F);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.631539578568037
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float.sum(2241.9F, (-2181.2183F));
      JSONObject jSONObject0 = new JSONObject(stringWriter0);
      jSONObject0.toJSONArray((JSONArray) null);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.4649925183734087
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONArray("q].AIu ");
      int int0 = (-3497);
      int int1 = 61;
      JSONObject.valueToString(boolean0, 13, 61);
      Float float0 = new Float(1.0);
      String string0 = "getgetChars";
      jSONObject0.accumulate("java.lang.Boolean@0000000002", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("/cSMo3M{#;");
      JSONTokener jSONTokener1 = new JSONTokener("Kk'-Z/gjk'd3");
      String string1 = "] not found.";
      jSONTokener1.skipPast("] not found.");
      JSONTokener jSONTokener2 = new JSONTokener("/cSMo3M{#;");
      JSONTokener jSONTokener3 = new JSONTokener("java.lang.Boolean@0000000002");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Boolean@0000000002
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      Float float0 = new Float(282.4616F);
      linkedList0.add(float0);
      Float float1 = new Float(0.0F);
      linkedList0.add(float1);
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4194714731958813
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.optDouble("getequals", 0.0);
      jSONObject0.optDouble("java.lang.Long@00000000040", (-515.5552));
      Long long0 = new Long(0L);
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.append("java.lang.Long@00000000040", long0);
      String string0 = "";
      jSONObject1.optDouble("0xu?N:}=");
      String string1 = "pa";
      try { 
        jSONObject1.put((String) null, 2439);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Float float0 = new Float(1.0);
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      BiConsumer<Short, Object> biConsumer0 = (BiConsumer<Short, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      Double double0 = new Double(Double.NaN);
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1423367315875295
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.has("gettoUpperCase");
      Object object0 = new Object();
      JSONObject jSONObject1 = jSONObject0.put("gettoUpperCase", object0);
      jSONObject1.opt("gettoUpperCase");
      JSONObject.valueToString("gettoUpperCase");
      jSONObject0.isNull("gettoUpperCase");
      try { 
        jSONObject0.get("\"java.lang.String@0000000002\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.String@0000000002\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9183101504445133
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      Short.compare((short) (-3471), (short)3380);
      Integer integer0 = new Integer((short)4);
      Integer.compareUnsigned((short)3380, 2903);
      Integer.compare((short)3380, 125);
      Integer.min((short) (-3471), 125);
      Integer.toUnsignedLong((short)4);
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.toUnsignedString(97);
      Integer.compareUnsigned(92, 97);
      Integer.toUnsignedString((int) (short)4);
      Integer.divideUnsigned((-6851), (short) (-3471));
      Integer.min(1604, 2424);
      Integer.remainderUnsigned((short) (-3471), 97);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      Float float0 = new Float(707.0F);
      Integer.getInteger("Q]FkP", (int) (short)4);
      Integer integer1 = new Integer((short) (-3471));
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("97");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of 97
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1137111279039225
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap1.values();
      hashMap0.putAll(hashMap1);
      Collection<String> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject(collection0);
      Integer integer0 = new Integer(801);
      Integer integer1 = new Integer(4374);
      Integer integer2 = new Integer(9);
      Integer integer3 = new Integer(92);
      Integer integer4 = new Integer(4374);
      Integer integer5 = new Integer((-1407));
      Integer integer6 = new Integer(9);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, integer6);
      try { 
        jSONObject1.getInt((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Float.min(458.27032F, 5037.3994F);
      Float float0 = new Float((double) 458.27032F);
      Float.max(458.27032F, 458.27032F);
      Float.max(458.27032F, 5037.3994F);
      Float.sum((-4558.51F), 1.1901337F);
      Float.isFinite(5037.3994F);
      Float.max(0.0F, 0.0F);
      Float.sum(458.27032F, 0.0F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.poll();
      linkedList0.removeFirstOccurrence(float0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2391.373645));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0885952167789754
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.put((long) 2439);
      JSONArray jSONArray1 = jSONArray0.put(2439, (Collection) linkedList0);
      jSONObject0.put("] is not a number.", true);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      BiFunction<Object, String, String> biFunction0 = (BiFunction<Object, String, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Boolean.valueOf(true);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray1, 1, 2401);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.9033358245787375
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!`]JH6tzi3T$oc\"V", false);
      jSONObject0.optJSONArray("");
      jSONObject0.keys();
      JSONObject.valueToString(jSONObject0, (-3497), (-3497));
      Float float0 = new Float((double) (-3497));
      JSONObject jSONObject2 = jSONObject0.accumulate("getgetChars", "{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      JSONObject jSONObject3 = jSONObject1.put("", false);
      JSONObject jSONObject4 = jSONObject3.put("!`]JH6tzi3T$oc\"V", 6.979048507288);
      jSONObject4.optDouble("!`]JH6tzi3T$oc\"V");
      JSONTokener jSONTokener0 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      jSONTokener0.skipPast("oSbzbr2Ae");
      JSONTokener jSONTokener1 = new JSONTokener("{\"java.lang.String@0000000002\": java.lang.Boolean@0000000003}");
      JSONObject jSONObject5 = new JSONObject(jSONTokener1);
      jSONObject2.optLong("", (long) (-3497));
      try { 
        jSONObject2.get("issubstring");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"issubstring\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.715135834003573
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("itoHexStrin", (-656.7));
      Long long0 = new Long(7L);
      String string0 = "gete#gals";
      jSONObject0.append("gete#gals", (Object) null);
      jSONObject0.optDouble("Vz[uA4i#=#7");
      JSONObject jSONObject1 = jSONObject0.put("&T0mfV>rbNavNN[mC7K", (-275));
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Vz[uA4i#=#7");
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject1.write(writer0);
      try { 
        jSONObject1.getBoolean("gete#gals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gete#gals\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.395720921039421
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!`]JH6tzi3T$oc\"V", false);
      jSONObject0.put("] not found.", true);
      int int0 = (-3497);
      JSONObject.valueToString(jSONObject0, (-3497), (-3497));
      Float float0 = new Float((double) (-3497));
      jSONObject0.accumulate("getgetChars", "{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      // Undeclared exception!
      jSONObject1.toString(2531, 2531);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.686948166440684
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(1909.9);
      String[] stringArray0 = new String[7];
      stringArray0[1] = "!`]JH6tzi3T$ocg\"V";
      stringArray0[2] = "!`]JH6tzi3T$ocg\"V";
      stringArray0[4] = "!`]JH6tzi3T$ocg\"V";
      stringArray0[5] = "!`]JH6tzi3T$ocg\"V";
      stringArray0[6] = "!`]JH6tzi3T$ocg\"V";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      jSONObject0.optBoolean("!`]JH6tzi3T$ocg\"V");
      jSONObject0.optBoolean("!`]JH6tzi3T$ocg\"V");
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.accumulate("gettoHexString", object0);
      Byte byte0 = new Byte((byte)32);
      Integer.getInteger("lM{", (int) (byte)32);
      jSONObject0.putOpt("qs!<q]3", jSONObject1);
      jSONObject1.getJSONObject("qs!<q]3");
      assertEquals(2, jSONObject1.length());
      
      Short short0 = new Short((short)235);
      JSONObject jSONObject2 = new JSONObject((Object) "!`]JH6tzi3T$ocg\"V");
      JSONObject jSONObject3 = jSONObject2.append("!`]JH6tzi3T$ocg\"V", "!`]JH6tzi3T$ocg\"V");
      boolean boolean0 = jSONObject3.isNull("!`]JH6tzi3T$ocg\"V");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Float, Long> hashMap1 = new HashMap<Float, Long>();
      Byte byte0 = new Byte((byte)71);
      HashMap<Short, JSONArray> hashMap2 = new HashMap<Short, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      double double0 = jSONObject0.optDouble("o", 1584.19315684797);
      assertEquals(1584.19315684797, double0, 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.914967197620304
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optBoolean(1733, true);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      JSONObject.quote("]Cw+>d@3");
      jSONObject0.optLong("]Cw+>d@3");
      Float.max(0L, 2798.366F);
      jSONObject0.optBoolean("]Cw+>d@3");
      Float.sum(2798.366F, (-1948.0F));
      Float.sum(2798.212F, 2798.366F);
      JSONObject jSONObject1 = jSONObject0.put("", false);
      Short short0 = new Short((short)11);
      Short short1 = new Short((short)11);
      JSONObject jSONObject2 = jSONObject1.append("(JWJ!_Wy*0GzM?", short1);
      int int0 = 43;
      jSONObject2.toString(43, (-3952));
      jSONObject2.optBoolean("\"]Cw+>d@3\"");
      JSONObject jSONObject3 = new JSONObject();
      String string0 = "jm${HhaA1lW}v";
      jSONObject3.optJSONObject("jm${HhaA1lW}v");
      String string1 = "le";
      try { 
        jSONObject2.getBoolean("le");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"le\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject.quote("b/7//NP.P?usl~%mP");
      try { 
        Integer.decode("\"b/7//NP.P?usl~%mP\"");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"b/7//NP.P?usl~%mP\"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.50692502428893
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("!`]JH6tzi3T$oc\"V", false);
      jSONObject0.put("] not found.", true);
      JSONObject.valueToString(jSONObject0, (-3497), (-3497));
      Float float0 = new Float((double) (-3497));
      jSONObject0.accumulate("getgetChars", "{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      jSONTokener0.skipPast("oSbzbr2Ae");
      JSONTokener jSONTokener1 = new JSONTokener("{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener1);
      try { 
        jSONTokener1.next('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '6' and instead saw '\u0000' at character 124 of {
         // \"java.lang.String@0000000004\": java.lang.Boolean@0000000005,
         // \"java.lang.String@0000000002\": java.lang.Boolean@0000000003
         // }
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.854316974950448
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Long long0 = new Long((-2045));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put("e#)ZMKFT", (double) (-2045));
      jSONObject0.optInt(",\n", 1734);
      jSONObject1.has("fV@I!xnRpRK");
      jSONObject1.getDouble("e#)ZMKFT");
      jSONObject0.has("fV@I!xnRpRK");
      JSONObject jSONObject2 = new JSONObject((Object) "e#)ZMKFT");
      jSONObject2.opt("e#)ZMKFT");
      JSONObject.valueToString("Z(LvT.$20!Bu[q[)");
      jSONObject0.optJSONObject("\"java.lang.String@0000000031\"");
      jSONObject2.isNull("\"java.lang.String@0000000031\"");
      jSONObject2.toString();
      try { 
        jSONObject1.getJSONArray("Fg:jdKbz2#rjnbHg");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Fg:jdKbz2#rjnbHg\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(Double.NaN, 1.0);
      Float float0 = new Float(372.18F);
      Float.sum((-1.0F), 3581.1F);
      Float.sum(3580.1F, (-404.45438F));
      Float.min(0.0F, 3204.0F);
      Float.max(1853.0F, 3580.1F);
      Float.max(372.18F, 1825.15F);
      Float.min(0.0F, (-4347.2F));
      Float.max(0.0F, (-4347.2F));
      Float.min(3204.0F, 0.0F);
      Float.min((-1.0F), 3175.6458F);
      Float.max(0.0F, (-815.0F));
      Float float1 = new Float((-3988.86F));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      double double0 = 0.0;
      Double double1 = new Double(0.0);
      Double.sum((-1.0), 0.0);
      Double.min(0.0, 1313.3323388097463);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      hashMap0.values();
      String[] stringArray0 = new String[15];
      stringArray0[0] = "ub1{~YE>I&";
      stringArray0[1] = "gettoString";
      stringArray0[2] = "su";
      stringArray0[3] = "iZE]kf,4U(Zx_";
      stringArray0[4] = "get";
      JSONObject jSONObject0 = new JSONObject(hashMap1, stringArray0);
      jSONObject0.optJSONObject("get");
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt("2J|n[IU{");
      Integer integer0 = new Integer(2297);
      Byte byte0 = new Byte((byte)74);
      Integer integer1 = Integer.getInteger("2J|n[IU{", 2297);
      assertEquals(2297, (int)integer1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0917740946457086
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.optDouble(58, (double) 3695);
      Byte byte0 = new Byte((byte)81);
      JSONArray jSONArray1 = jSONArray0.put((Object) linkedList0);
      JSONObject jSONObject1 = jSONArray0.toJSONObject(jSONArray1);
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "S.N^]1~=3NR0";
      jSONObject0.optBoolean("S.N^]1~=3NR0", false);
      jSONObject1.optString("S.N^]1~=3NR0", (String) null);
      try { 
        jSONObject1.put((String) null, (-2383L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double double0 = new Double(3037.732327825175);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "W|F]';wi?Zc@jw}";
      stringArray0[1] = "};7q:PdxZ-4x[I-";
      stringArray0[2] = "JGO:L3+.:";
      stringArray0[3] = "v}DdVjqD";
      stringArray0[4] = "Gq3yepUwI";
      stringArray0[5] = "A1b>IEy_54h]lcfF";
      boolean boolean0 = Double.isFinite(229.77374124025);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean1 = jSONObject0.has("v}DdVjqD");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.1887930043514183
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte byte0 = new Byte((byte)107);
      Byte byte1 = new Byte((byte)120);
      String string0 = "Y`wCD2A`4x@^=";
      JSONObject jSONObject1 = jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", "Y`wCD2A`4x@^=");
      jSONObject1.accumulate("KiNs<fUs?%G7s/sy>nw", linkedList0);
      jSONObject0.put("KiNs<fUs?%G7s/sy>nw", (Object) "Y`wCD2A`4x@^=");
      Long long0 = new Long((long) byte0);
      JSONObject jSONObject2 = new JSONObject();
      Float float0 = new Float((double) (byte)120);
      JSONObject jSONObject3 = jSONObject0.append("Y`wCD2A`4x@^=", float0);
      try { 
        jSONObject3.getJSONObject("Y`wCD2A`4x@^=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y`wCD2A`4x@^=\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1694267446959503
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.sum((byte)107, (byte)107);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float.sum((byte)107, (byte)107);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">\"7x?=yS:skp?9e*)a";
      stringArray0[1] = "9a& ";
      stringArray0[0] = "false";
      stringArray0[3] = "false";
      stringArray0[4] = ">\"7x?=yS:skp?9e*)a";
      stringArray0[5] = "9a& ";
      Integer integer0 = new Integer((byte)107);
      Integer integer1 = new Integer(8192);
      JSONObject jSONObject1 = jSONObject0.put(">\"7x?=yS:skp?9e*)a", (long) 8192);
      jSONObject1.accumulate("ha", jSONArray0);
      assertEquals(2, jSONObject1.length());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.636151958922184
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte byte0 = new Byte((byte) (-125));
      Byte byte1 = new Byte((byte)120);
      JSONObject jSONObject1 = jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", "Y`w7CD2A`4xe^=");
      jSONObject1.accumulate("KiNs<fUs?%G7s/sy>nw", linkedList0);
      JSONObject jSONObject2 = jSONObject0.put("KiNs<fUs?%G7s/sy>nw", (Object) "Y`w7CD2A`4xe^=");
      Long long0 = new Long((long) byte0);
      JSONObject jSONObject3 = new JSONObject(jSONObject1);
      Float float0 = new Float((double) (byte)120);
      jSONObject0.append("Y`w7CD2A`4xe^=", float0);
      jSONObject0.isNull("Y`w7CD2A`4xe^=");
      String string0 = jSONObject2.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.353711254456056
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("itoHexStrin", (-657.2883104485206));
      Long long0 = new Long((-1L));
      JSONObject jSONObject1 = jSONObject0.append("gete#gals", (Object) null);
      jSONObject0.optDouble("Vz[uA4i#=#7");
      Float float0 = new Float((-657.2883104485206));
      Double double0 = new Double(0.0);
      jSONObject1.accumulate("gete#gals", double0);
      JSONTokener jSONTokener0 = new JSONTokener("G9CYv`n\"!");
      jSONTokener0.skipPast("H8j");
      JSONTokener jSONTokener1 = new JSONTokener("s(");
      JSONTokener jSONTokener2 = new JSONTokener("H8j");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of H8j
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      Short.compare((short) (-3471), (short)3380);
      Integer integer0 = new Integer((short)4);
      Integer.compareUnsigned((short)3380, 2903);
      Integer.compare((short)3380, 125);
      Integer.min((short) (-3471), 125);
      Integer.toUnsignedLong((short)4);
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.remainderUnsigned(1862, 57);
      Integer.compareUnsigned(92, 97);
      Integer.remainderUnsigned(409, (-3471));
      Integer.toUnsignedString((int) (short)4);
      Integer.divideUnsigned((-6851), (short) (-3471));
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.448437455613918
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      StringWriter stringWriter0 = new StringWriter();
      byte byte0 = (byte)91;
      byte byte1 = (byte)7;
      Byte byte2 = new Byte((byte)7);
      HashMap<Byte, Byte> hashMap0 = new HashMap<Byte, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.append("", stringWriter0);
      String string1 = "(9Mt_=}";
      jSONObject1.optString("(9Mt_=}", "");
      JSONTokener jSONTokener0 = new JSONTokener("(9Mt_=}");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of (9Mt_=}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.215419552773604
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "b$rGpzL.8%Q>j|?2q";
      JSONObject jSONObject1 = jSONObject0.put("b$rGpzL.8%Q>j|?2q", false);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.getString("b$rGpzL.8%Q>j|?2q");
      try { 
        jSONObject1.getInt("b$rGpzL.8%Q>j|?2q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"b$rGpzL.8%Q>j|?2q\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.825274207390942
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 2439;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONArray0.put((long) 2439);
      jSONArray0.put(2439, (Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      String string0 = "dyAjN/V8V/*$9I";
      try { 
        jSONObject0.getLong("isreereByte");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreereByte\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.460873132222426
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte byte0 = new Byte((byte)107);
      Byte byte1 = new Byte((byte)120);
      Byte byte2 = new Byte((byte)11);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      JSONObject jSONObject2 = jSONObject1.putOpt("Y`wCD2A`4x@^=", (Object) null);
      jSONObject2.put("KiNs<fUs?%G7s/sy>nw", (Object) null);
      Long long0 = new Long((byte)120);
      jSONObject0.accumulate("KiNs<fUs?%G7s/sy>nw", jSONArray0);
      String string0 = "par";
      jSONObject1.isNull("par");
      Object object0 = new Object();
      Double double0 = new Double((-2762.0));
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Double.sum(0.0F, 0.0);
      Double.max(0.0, 0.0F);
      Float float0 = new Float((-1.0F));
      Float float1 = new Float(0.0F);
      Integer integer0 = new Integer((-17));
      Integer integer1 = new Integer(2919);
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (Object) integer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+d_ Z<^y,P|E;H", 2865.937399557187);
      JSONTokener jSONTokener0 = new JSONTokener("Unterminated string");
      JSONTokener jSONTokener1 = new JSONTokener("}tEj)");
      assertTrue(jSONTokener1.more());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONTokener jSONTokener0 = new JSONTokener("!QP1{QQh|");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "!QP1{QQh|";
      stringArray0[1] = "!QP1{QQh|";
      stringArray0[2] = "!QP1{QQh|";
      JSONObject jSONObject0 = new JSONObject("!QP1{QQh|", stringArray0);
      jSONObject0.put("R#SC g;jo8Y", 101);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.293165402887713
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.append("toO", boolean0);
      jSONObject1.optLong("toO", (-203L));
      StringWriter stringWriter0 = new StringWriter(77);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter(77);
      Integer integer0 = new Integer(77);
      jSONObject1.append("0.00", integer0);
      jSONObject0.optString("0.00", (String) null);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.599359358321529
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      int int0 = new Byte((byte)107);
      Byte.toUnsignedLong((byte)0);
      Byte byte0 = new Byte((byte)120);
      jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", "Y`w7CD2A`4xe^=");
      JSONObject jSONObject1 = jSONObject0.put("KiNs<fUs?%G7s/sy>nw", (Object) "Y`w7CD2A`4xe^=");
      jSONObject1.get("KiNs<fUs?%G7s/sy>nw");
      Long long0 = new Long(828L);
      JSONObject jSONObject2 = new JSONObject();
      Float float0 = new Float((double) (byte)120);
      Float.min(828L, (-891.0F));
      jSONObject0.append("Y`w7CD2A`4xe^=", float0);
      jSONObject0.isNull("Y`w7CD2A`4xe^=");
      jSONObject0.optString("Y`w7CD2A`4xe^=");
      jSONObject1.optLong((String) null);
      try { 
        jSONObject1.getLong("is");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"is\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Byte byte0 = new Byte((byte)15);
      byte byte1 = (byte) (-3);
      Byte.toUnsignedInt((byte) (-3));
      Byte.toUnsignedLong((byte)15);
      Integer integer0 = new Integer(253);
      String string0 = "{}";
      JSONObject jSONObject0 = new JSONObject("{}");
      try { 
        jSONObject0.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5267385326945515
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-2181.2183F));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("] not found.", true);
      JSONObject.valueToString((Object) null, 46, (-3497));
      Float float1 = new Float((double) 46);
      jSONObject0.accumulate("getgetChars", "] not found.");
      JSONTokener jSONTokener0 = new JSONTokener("] not found.");
      jSONTokener0.skipPast("A58#~SY\\g,xJ~2");
      JSONTokener jSONTokener1 = new JSONTokener("null");
      JSONTokener jSONTokener2 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener2);
      Integer integer0 = new Integer((-2005));
      try { 
        jSONTokener0.next('6');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '6' and instead saw '\u0000' at character 12 of ] not found.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.803528634303315
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("!`]JH6tzi3T$oc\"V", false);
      jSONObject0.optJSONArray("Uwjs51B^ZN([<V");
      jSONObject0.put("] not found.", true);
      JSONObject.valueToString(jSONObject0, (-3497), (-3497));
      Float float0 = new Float((double) (-3497));
      JSONObject jSONObject2 = jSONObject0.accumulate("getgetChars", "{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      JSONTokener jSONTokener0 = new JSONTokener("{\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
      jSONTokener0.skipPast("oSbzbr2Ae");
      jSONObject0.getBoolean("!`]JH6tzi3T$oc\"V");
      jSONObject2.accumulate("islongBitsToDouble", jSONTokener0);
      jSONObject1.isNull("] not found.");
      try { 
        jSONObject1.getDouble("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.3444485369271693
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "itoHexStrin";
      jSONObject0.optDouble("itoHexStrin", (-657.2883104485206));
      String string1 = "Vz[uA4i#=#7";
      Long long0 = new Long((-1L));
      String string2 = "gete#gals";
      jSONObject0.append("gete#gals", (Object) null);
      jSONObject0.optDouble("Vz[uA4i#=#7");
      jSONObject0.put("XDd,P!uYGA", true);
      JSONObject jSONObject1 = jSONObject0.put("&T0mfV>rbNavNN[mC7K", (-275));
      jSONObject1.optDouble("getlongBitsToDouble");
      try { 
        jSONObject1.getBoolean("gete#gals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gete#gals\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1282930461586527
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.append("toO", "toO");
      jSONObject0.append("toO", jSONObject1);
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      jSONObject0.put("toO", (Map) hashMap0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0502878130394486
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)107);
      byte byte1 = (byte)120;
      Byte byte2 = new Byte((byte)120);
      String string0 = "KiNs<fUs?%G7s/sy>nw";
      jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", "KiNs<fUs?%G7s/sy>nw");
      jSONObject0.put("KiNs<fUs?%G7s/sy>nw", (Object) "KiNs<fUs?%G7s/sy>nw");
      Long long0 = new Long((long) byte0);
      JSONObject jSONObject1 = new JSONObject();
      Float float0 = new Float((double) (byte)120);
      try { 
        jSONObject0.append("KiNs<fUs?%G7s/sy>nw", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[KiNs<fUs?%G7s/sy>nw] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.4920039812253365
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(Double.NaN, 1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optJSONArray("/J@K}0ozUv");
      Byte byte0 = new Byte((byte)70);
      Byte byte1 = new Byte((byte)45);
      Double double1 = new Double(2059.96889575003);
      JSONObject jSONObject1 = jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", double1);
      jSONObject1.accumulate("Y`wCD2A`4x@^=", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put("isreverseBytes", (Object) byte0);
      Long long0 = new Long(0L);
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float(1.0);
      jSONObject1.append("UT;t?w't(", (Object) null);
      boolean boolean0 = jSONObject2.isNull("UT;t?w't(");
      assertEquals(6, jSONObject2.length());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.161612831524203
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(object0);
      String string0 = jSONObject1.toString();
      assertNotNull(string0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0050279102236233
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Double double0 = new Double(1909.9);
      String[] stringArray0 = new String[7];
      String string0 = "C)mA/!)Grgk*%LN";
      stringArray0[1] = "C)mA/!)Grgk*%LN";
      stringArray0[2] = "!`]JH6tzi3T$ocg\"V";
      stringArray0[4] = "!`]JH6tzi3T$ocg\"V";
      stringArray0[5] = "!`]JH6tzi3T$ocg\"V";
      stringArray0[6] = "!`]JH6tzi3T$ocg\"V";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      boolean boolean0 = new Boolean("!`]JH6tzi3T$ocg\"V");
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.optLong("!`]JH6tzi3T$ocg\"V", 1L);
      JSONObject jSONObject2 = new JSONObject();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-4640));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6610784921691342
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      Boolean boolean0 = Boolean.FALSE;
      hashMap1.put(boolean0, " of ");
      Boolean boolean1 = Boolean.valueOf(true);
      Boolean.compare(false, true);
      hashMap0.put(boolean1, ",\n");
      hashMap0.putAll(hashMap1);
      hashMap0.values();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.570210723249174
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.optDouble(",\n", 0.0);
      Long long0 = new Long((-2081L));
      jSONObject0.optBoolean((String) null, false);
      jSONObject0.optInt("gete#gals", 46);
      Double double0 = new Double(0.0);
      JSONObject jSONObject1 = new JSONObject(long0);
      jSONObject0.optDouble("gete#gals");
      String string0 = "getsum";
      jSONObject1.put("getsum", true);
      JSONObject jSONObject2 = jSONObject1.put("\">w9b`_M0Z8AH@,./RE", (-275));
      jSONObject0.optDouble("va");
      String string1 = "Missing value";
      jSONObject2.accumulate("&T0mfV>rbNavNN[mC7K", "getsum");
      String string2 = "ULy5|wZU[)47v)\\u";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\">w9b`_M0Z8AH@,./RE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \">w9b`_M0Z8AH@,./RE
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.6090513885097417
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = "";
      jSONObject0.putOpt("com", "");
      jSONObject0.put("d0-p", (-1625L));
      jSONObject0.optLong("d0-p");
      jSONObject0.optLong("");
      JSONObject.getNames(jSONObject0);
      jSONObject0.optDouble("");
      try { 
        jSONObject0.getJSONObject("6qiO/o9dm`;VEvI");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"6qiO/o9dm`;VEvI\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.5825321594340225
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Object object1 = new Object();
      jSONObject0.append("toO", object1);
      jSONObject0.optLong((String) null, 0L);
      jSONObject0.optInt((String) null, 4345);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "toO";
      stringArray0[1] = "_";
      stringArray0[2] = "toO";
      String string0 = "has";
      stringArray0[3] = "has";
      stringArray0[4] = "toO";
      stringArray0[5] = "<wk#7k,";
      stringArray0[6] = null;
      stringArray0[7] = "toO";
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.432854928627155
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.append("toO", "toO");
      jSONObject1.optLong("toO", 0L);
      jSONObject1.optInt("toO", (-1158));
      jSONObject1.optString("<wk#7k,", "<wk#7k,");
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.58962258945194
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      hashMap0.values();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "ub1{~YE>I&";
      String string0 = "gettoString";
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("gettoString", "ub1{~YE>I&");
      float float0 = 0.0F;
      Float.sum(0.0F, (-36.683643F));
      hashMap2.put("ub1{~YE>I&", (String) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      Float.min(0.0F, 0.0F);
      jSONObject0.optBoolean((String) null, true);
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap3.clone();
      Float.max(1073.0966F, 1.0F);
      try { 
        jSONObject0.getDouble("gettoString");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gettoString\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.flush();
      stringWriter0.close();
      String[] stringArray0 = JSONObject.getNames((Object) stringWriter0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9720388315275945
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) ",\n");
      jSONObject0.optDouble(",\n", 0.0);
      Long long0 = new Long((-2081L));
      String string0 = "gete#gals";
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.append((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-2181.2183F));
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.1919905573081215
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.accumulate("getgetChars", hashMap0);
      JSONTokener jSONTokener0 = new JSONTokener("vDObhOSr^OI(s!");
      jSONTokener0.skipPast("getcompare");
      JSONTokener jSONTokener1 = new JSONTokener("{q~IBTGx2p,C#T");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 11 of {q~IBTGx2p,C#T
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "RD]bgd0J_=Z<;Mh'P";
      stringArray0[1] = "L3=TZ0I%d.'P(@";
      stringArray0[2] = "&V@+Ey.?GtZ";
      stringArray0[3] = "getvalueOf";
      stringArray0[4] = "joi";
      stringArray0[5] = "x38o{EU)uXH|D-8G";
      stringArray0[6] = "pj!*";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.sum((byte)107, (byte)107);
      Float.isFinite(900.6693F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      Float.sum((byte)107, (byte)107);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">\"7x?=yS:skp?9e*)a";
      stringArray0[1] = "9a& ";
      stringArray0[2] = "false";
      stringArray0[3] = "false";
      stringArray0[4] = ">\"7x?=yS:skp?9e*)a";
      stringArray0[5] = "] not found.";
      stringArray0[7] = "false";
      Boolean boolean0 = new Boolean("' and instead saw '");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "istoHexString";
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.5276470203848533
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("itoHexStrin", (-657.2883104485206));
      String string0 = "Vz[uA4i#=#7";
      Long long0 = new Long((-1L));
      JSONObject jSONObject1 = new JSONObject((Object) "Vz[uA4i#=#7");
      JSONObject.valueToString(jSONObject1, (-3497), (-3497));
      Float float0 = new Float((-42.516));
      String[] stringArray0 = new String[1];
      stringArray0[0] = "gete#gals";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.7033209399700397
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte byte0 = new Byte((byte)107);
      Byte byte1 = new Byte((byte)120);
      JSONObject jSONObject1 = jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", "Y`wCD2A`4x@^=");
      JSONObject jSONObject2 = jSONObject1.accumulate("KiNs<fUs?%G7s/sy>nw", linkedList0);
      jSONObject0.put("KiNs<fUs?%G7s/sy>nw", (Object) "Y`wCD2A`4x@^=");
      Long long0 = new Long((long) byte0);
      JSONObject jSONObject3 = new JSONObject();
      Float float0 = new Float((double) (byte)120);
      jSONObject0.append("Y`wCD2A`4x@^=", float0);
      jSONObject0.isNull("Y`wCD2A`4x@^=");
      jSONObject2.toString(2421, (int) (byte)120);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8701172757423308
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Byte byte0 = new Byte((byte)91);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-2181.2183F));
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      HashMap<Boolean, String> hashMap2 = new HashMap<Boolean, String>();
      hashMap2.values();
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.562606497631062
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Float float0 = new Float(947.0F);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte byte0 = new Byte((byte)102);
      Byte byte1 = new Byte((byte)12);
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", object0);
      JSONObject jSONObject2 = jSONObject1.accumulate("KiNs<fUs?%G7s/sy>nw", byte0);
      jSONObject2.put("Y`wCD2A`4x@^=", (Object) "Y`wCD2A`4x@^=");
      Long long0 = new Long(0L);
      JSONObject jSONObject3 = new JSONObject();
      Float float1 = new Float(353.3685553893);
      Object object1 = new Object();
      jSONObject1.append("Unclosed comment", object1);
      jSONObject1.isNull((String) null);
      assertEquals(3, jSONObject1.length());
      
      String string0 = JSONObject.valueToString(linkedList0, (byte)12, (byte)12);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.7767701612564368
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      Double.sum(0.0, 227.7953985041);
      int int0 = 2889;
      JSONObject.valueToString(jSONArray0, 2889, (-2861));
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((float) 5474);
      BiFunction<Integer, Object, Integer> biFunction0 = null;
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      try { 
        Integer.decode("[]");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"[]\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.opt((String) null);
      Integer integer0 = new Integer(2297);
      Byte byte0 = new Byte((byte)74);
      Integer integer1 = Integer.getInteger("2. KF{U+abQxv;,%", 2297);
      assertEquals(2297, (int)integer1);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6952764766845416
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject(jSONArray0);
      String string0 = jSONObject0.optString("<wk#7k,", "|zMK>l#J,3*c32w/O");
      assertEquals("|zMK>l#J,3*c32w/O", string0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.222520215511171
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Long long0 = new Long((-2045));
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject jSONObject1 = jSONObject0.put("tri", (double) 1734);
      jSONObject1.optInt(",\n", (-2045));
      Boolean.logicalXor(true, true);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.4298145734338212
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Unterminated string";
      stringArray0[1] = "ji>@'#fmP`~_?q";
      stringArray0[2] = "8r/5";
      stringArray0[3] = "#B4z7t2a</5?SMVt";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long(2245L);
      JSONObject jSONObject2 = jSONObject1.putOpt("#B4z7t2a</5?SMVt", long0);
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      HashMap<Float, Object> hashMap1 = new HashMap<Float, Object>();
      hashMap1.values();
      Long.compareUnsigned(1L, 0L);
      JSONObject jSONObject3 = jSONObject2.put("(fv^&b~x%zgsu1}P", (Map) hashMap1);
      jSONObject3.put("ji>@'#fmP`~_?q", (Object) jSONObject0);
      Long long1 = new Long(2245L);
      Float float0 = new Float((double) 1);
      JSONObject jSONObject4 = jSONObject2.append("8r/5", (Object) null);
      JSONObject jSONObject5 = jSONObject4.put("", (double) 2245L);
      try { 
        jSONObject5.getInt("8r/5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"8r/5\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.16467004250403
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double((-656.7));
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getString("Y/UOX=PB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Y/UOX=PB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HashMap<Short, JSONArray> hashMap0 = new HashMap<Short, JSONArray>();
      JSONObject.quote((String) null);
      Byte byte0 = new Byte((byte)0);
      JSONTokener jSONTokener0 = new JSONTokener("do");
      JSONTokener jSONTokener1 = new JSONTokener("!?)_");
      jSONTokener1.next();
      jSONTokener1.nextTo("O&#vqR8~F.#!Q{-");
      JSONTokener jSONTokener2 = new JSONTokener("?)_");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of ?)_
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.0426701691380433
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      Double double0 = new Double(1.0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      jSONObject0.optBoolean("gethashCode");
      jSONObject0.optBoolean("gethashCode");
      String[] stringArray1 = new String[8];
      stringArray1[0] = "gethashCode";
      stringArray1[1] = "C)mA/!)Grgk*%LN";
      stringArray1[2] = "C)mA/!)Grgk*%LN";
      stringArray1[3] = "d";
      stringArray1[4] = "gethashCode";
      stringArray1[5] = "gethashCode";
      stringArray1[6] = "C)mA/!)Grgk*%LN";
      stringArray1[7] = "C)mA/!)Grgk*%LN";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      JSONObject jSONObject2 = new JSONObject();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer(70);
      Integer integer1 = new Integer(32);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(integer1, biFunction0);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      HashMap<Short, JSONArray> hashMap2 = new HashMap<Short, JSONArray>();
      assertTrue(hashMap2.isEmpty());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-2181.2183F));
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      BiConsumer<Boolean, String> biConsumer0 = (BiConsumer<Boolean, String>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      hashMap0.values();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      hashMap1.clear();
      Set<Short> set0 = hashMap1.keySet();
      JSONArray jSONArray0 = new JSONArray((Collection) set0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3500125349343404
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = new Double((-656.7));
      Long long0 = new Long((-1L));
      jSONObject0.append("gete#gals", (Object) null);
      jSONObject0.optDouble("Vz[uA4i#=#7");
      JSONObject jSONObject1 = jSONObject0.put("&T0mfV>rbNavNN[mC7K", (-275));
      boolean boolean0 = new Boolean("gete#gals");
      String string0 = "ULy5|wZU[)47v)\\u";
      jSONObject1.isNull(string0);
      try { 
        jSONObject1.getDouble("gete#gals");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"gete#gals\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.777477642995922
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "!`]JH6tzi3T$oc\"V";
      JSONObject jSONObject1 = jSONObject0.put("!`]JH6tzi3T$oc\"V", false);
      BiFunction<Boolean, Object, String> biFunction0 = (BiFunction<Boolean, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Boolean.valueOf(true);
      byte byte0 = (byte)13;
      Byte.toUnsignedLong((byte)13);
      try { 
        jSONObject1.getJSONArray("!`]JH6tzi3T$oc\"V");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!`]JH6tzi3T$oc\\\"V\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4572637190629707
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject.valueToString(jSONObject0, 35, 1139);
      Object object0 = JSONObject.NULL;
      Float float0 = new Float((float) 2401);
      BiFunction<Integer, Object, Integer> biFunction1 = null;
      HashMap<Integer, Integer> hashMap1 = new HashMap<Integer, Integer>();
      try { 
        Integer.decode("java.lang.Short@0000000011.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Short@0000000011.\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(5037.3994F);
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, (-1158), (-1158));
      Float float1 = new Float((-0.051155806F));
      try { 
        Integer.decode("null");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"null\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      Short.compare((short) (-3471), (short)3380);
      Integer integer0 = new Integer((short)4);
      Integer.compareUnsigned((short)3380, 2903);
      Integer.compare((short)3380, 125);
      Integer.min((short) (-3471), 125);
      Integer.toUnsignedLong((short)4);
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.remainderUnsigned(1862, 57);
      Integer.getInteger("`:vX\"7];g?o(AAH8", 1);
      Integer.remainderUnsigned(2705, 20);
      Integer.compareUnsigned(92, 97);
      Integer.remainderUnsigned(409, (-3471));
      Integer.toUnsignedString((int) (short)4);
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.200077310293173
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("istoHexString", (-656.7));
      Double.min((-1L), (-1L));
      Long long0 = new Long((-1L));
      JSONObject jSONObject1 = new JSONObject(long0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Double.min(2634.914835, 1.0);
      JSONTokener jSONTokener0 = new JSONTokener("ismax");
      jSONObject1.isNull("getisFinite");
      try { 
        jSONObject1.getInt("isdivideUnsigned");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isdivideUnsigned\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Long long0 = new Long(0L);
      JSONObject.quote(",\n");
      Integer integer0 = new Integer(1765);
      Integer.getInteger("N>UUw0X$DO9nf)h/");
      Integer.getInteger(",\n");
      try { 
        Integer.decode(",\n");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \",
         // \"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.1100843864598464
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.put("\u0004C45K", (Collection) linkedList0);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double((-632.3068465092));
      BiFunction<Object, Object, Long> biFunction0 = (BiFunction<Object, Object, Long>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Long long0 = new Long((-2088L));
      Long.max(564L, 0L);
      Long long1 = Long.getLong((String) null, long0);
      Long.compare(0L, 564L);
      hashMap0.put(double0, long1);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8985564143607379
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      try { 
        jSONObject0.accumulate((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      HashMap<Float, Long> hashMap1 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.put(";QCe:v~(", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.flush();
      Integer integer0 = new Integer(39);
      Integer integer1 = new Integer(4);
      Integer integer2 = new Integer(4);
      Integer integer3 = new Integer(4);
      Integer.compare(4, 59);
      Integer integer4 = new Integer(39);
      JSONObject.testValidity(integer3);
      assertTrue(integer3.equals((Object)integer1));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5610752965144479
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap1.values();
      JSONObject jSONObject0 = new JSONObject((Object) hashMap0);
      Integer integer0 = new Integer((-3236));
      Integer integer1 = new Integer(1596);
      Integer integer2 = new Integer((-951));
      Integer integer3 = new Integer(9);
      Integer integer4 = new Integer(4374);
      Integer integer5 = new Integer(9);
      jSONObject0.keys();
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.272074335252757
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Double double0 = new Double(1909.9);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.max(1909.9, 0.0);
      JSONObject.valueToString(jSONObject0, (-1138), (-1138));
      int int0 = (-3131);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3131));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<Byte, Object> hashMap0 = new HashMap<Byte, Object>();
      HashMap<Byte, Object> hashMap1 = new HashMap<Byte, Object>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getDouble("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      hashMap1.clear();
      Byte.toUnsignedLong((byte)65);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getJSONArray("JSONObject[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONObject[\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      int int0 = Short.compare((short) (-3471), (short)3380);
      Integer integer0 = new Integer((short)4);
      Integer.compareUnsigned((short)3380, 2903);
      Integer.compare((short)3380, 125);
      Integer.min((short) (-3471), 125);
      Integer.toUnsignedLong((short)4);
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.remainderUnsigned(1862, 57);
      Integer.compareUnsigned(92, 97);
      Integer.remainderUnsigned(409, (-3471));
      Integer.toUnsignedString((int) (short)4);
      Integer.divideUnsigned((short)3380, 12);
      Integer.remainderUnsigned(409, (-317));
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject.getNames((Object) jSONObject0);
      Float float0 = new Float((float) (-6851));
      Integer integer1 = new Integer(2903);
      Integer integer2 = new Integer(1);
      assertFalse(integer2.equals((Object)int0));
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.4731393732169413
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "}q~HBvTin])Z#{";
      stringArray0[2] = "\r";
      stringArray0[3] = "?h9q~xBb>_99Qx7!fc";
      stringArray0[4] = "{";
      stringArray0[5] = "] is not a Boolean.";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      try { 
        jSONObject0.getJSONObject("}q~HBvTin])Z#{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"}q~HBvTin])Z#{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.9210441817238935
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = "toO";
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject1 = jSONObject0.append("toO", boolean0);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.661955599158207
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Byte.toUnsignedInt((byte)107);
      Byte.toUnsignedLong((byte)0);
      Byte byte0 = new Byte((byte)120);
      jSONObject0.putOpt("KiNs<fUs?%G7s/sy>nw", "Y`w7CD2A`4xe^=");
      JSONObject jSONObject1 = jSONObject0.put("KiNs<fUs?%G7s/sy>nw", (Object) "Y`w7CD2A`4xe^=");
      jSONObject1.get("KiNs<fUs?%G7s/sy>nw");
      Long long0 = new Long(828L);
      JSONObject jSONObject2 = new JSONObject();
      Float float0 = new Float((double) (byte)120);
      Float.min(188.4403F, 107);
      JSONObject jSONObject3 = jSONObject0.append("Y`w7CD2A`4xe^=", float0);
      jSONObject0.isNull("Y`w7CD2A`4xe^=");
      jSONObject0.optString("Y`w7CD2A`4xe^=");
      jSONObject1.optLong((String) null);
      jSONObject3.length();
      try { 
        jSONObject0.getLong("TK&L-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"TK&L-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.6986333914786376
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.append("", jSONArray0);
      int int0 = 59;
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      jSONObject2.names();
      String string0 = "J*(@_&k_t,x\\!0kfW=";
      JSONObject jSONObject3 = jSONObject1.put("J*(@_&k_t,x!0kfW=", false);
      String string1 = "istoLowerCase";
      JSONObject jSONObject4 = jSONObject3.put("getget", true);
      String string2 = "SZV";
      JSONObject.getNames(jSONObject4);
      jSONObject0.optInt("istoLowerCase", (-823));
      Boolean.logicalXor(false, true);
      String string3 = "isoptJSONObject";
      try { 
        jSONObject3.getJSONObject(".TJORRW<q");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".TJORRW<q\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.046212966853168
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(5037.3994F);
      int int0 = jSONObject0.optInt("isintern", 390);
      Boolean.logicalXor(true, false);
      Integer integer0 = new Integer(8);
      assertFalse(integer0.equals((Object)int0));
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      HashMap<Float, Long> hashMap2 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      jSONObject0.toString((-118), (-118));
      JSONTokener jSONTokener0 = new JSONTokener("l%_}dID]d[{o/");
      jSONTokener0.skipTo('z');
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of l%_}dID]d[{o/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.372561862736863
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[6];
      linkedList0.pollLast();
      stringArray0[0] = "true";
      stringArray0[1] = " of ";
      stringArray0[2] = ")VN<-*0xQ].~u_,";
      stringArray0[3] = "";
      stringArray0[4] = "7,mZc-XKJp}To";
      stringArray0[5] = "wheel.json.JSONArray";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      jSONObject0.put("wheel.json.JSONObject", (Map) hashMap0);
      jSONObject0.optInt(" of ", 0);
      double double0 = jSONObject0.optDouble("7,mZc-XKJp}To");
      assertEquals(1, jSONObject0.length());
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-1578.418F));
      String string0 = JSONObject.quote("GbKQG!6e/o");
      assertEquals("\"GbKQG!6e/o\"", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      JSONObject.valueToString(double0, 5, 2401);
      Object object0 = new Object();
      Float float0 = new Float(2860.2336F);
      HashMap<Short, JSONArray> hashMap1 = new HashMap<Short, JSONArray>();
      assertTrue(hashMap1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      String string0 = JSONObject.quote("L>AwF%R3+i6\"$e6&(W9");
      assertEquals("\"L>AwF%R3+i6\\\"$e6&(W9\"", string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.476941678592489
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Long long0 = new Long((-1L));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      BiFunction<Integer, Object, Integer> biFunction0 = (BiFunction<Integer, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt("\b");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      hashMap1.clear();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashMap0.forEach(biConsumer0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      hashMap0.replace("g;[9H<", (Short) null, (Short) null);
      Object object0 = jSONObject0.remove((String) null);
      assertNull(object0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      Short.compare((short) (-3471), (short)3380);
      Integer integer0 = new Integer((short) (-1));
      Integer.compareUnsigned((short)3380, 2903);
      Integer.compare((short)3380, 125);
      Integer.min((short) (-3471), 125);
      Integer.toUnsignedLong((short) (-1));
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.remainderUnsigned(1862, 57);
      Integer.getInteger("`:vX\"7];g?o(AAH8", 1);
      Integer.remainderUnsigned(2705, 20);
      Integer.compareUnsigned(95, 97);
      Integer.remainderUnsigned(409, (-3471));
      Integer.toUnsignedString((int) (short) (-1));
      Integer.divideUnsigned((-6851), (short) (-3471));
      Integer.remainderUnsigned((short) (-3471), 97);
      String[] stringArray0 = JSONObject.getNames((Object) integer0);
      Float float0 = new Float(707.0F);
      Integer integer1 = new Integer(1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.close();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3141455801481003
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-2181.2183F));
      Float.sum(2728.9F, 2728.9F);
      Float.sum(1.0F, 0.0F);
      Float.min(5457.8F, 1.0F);
      Float.min(1853.0F, (-2181.2183F));
      Float.max((-2181.2183F), (-2181.2183F));
      Float.max((-4347.2F), (-2181.2183F));
      Float.isFinite(1.0F);
      Float.min((-2181.2183F), (-3271.0F));
      Float.sum((-1.0F), 1853.0F);
      Float.max(1.0F, 1.0F);
      Float.min((-2181.2183F), 1.0F);
      Float.min((-1.0F), (-3271.0F));
      Float.min(1563.251F, 1563.251F);
      Float.isFinite(1.0F);
      Float.max((-282.53F), (-0.8673172F));
      JSONObject.doubleToString((-1.0F));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("H/7*c% Tn/0HeB0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of H/7*c% Tn/0HeB0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "l[2:&rmDD<+S";
      stringArray0[1] = "LPJ&srFLjzI[SS$";
      stringArray0[2] = "] is not a number.";
      stringArray0[3] = "\r";
      stringArray0[4] = "Tf%\",U>M>QfBq";
      stringArray0[5] = "mi";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.toString();
      assertEquals("{}", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.00935030513968
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optLong("(]Yl&kli\"]p$", (-622L));
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter1 = new StringWriter(34);
      Integer integer0 = new Integer(92);
      assertEquals(92, (int)integer0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      Short.compare((short) (-3471), (short)3380);
      Integer integer0 = new Integer((short) (-1));
      Integer.compareUnsigned((short)3380, 2903);
      Integer.compare((short)3380, 125);
      Integer.min((short) (-3471), 125);
      Integer.toUnsignedLong((short) (-1));
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.remainderUnsigned(1862, 57);
      Integer.getInteger("`:vX\"7];g?o(AAH8", 1);
      Integer.remainderUnsigned(2705, 20);
      Integer.compareUnsigned(95, 97);
      Integer.remainderUnsigned(409, (-3471));
      Integer.toUnsignedString((int) (short) (-1));
      Integer.divideUnsigned((-6851), (short) (-3471));
      Double.min(409, 5);
      Integer.toUnsignedString(1);
      Float.max(20, 5);
      Float float0 = new Float((float) 38);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      HashMap<Boolean, String> hashMap2 = new HashMap<Boolean, String>();
      hashMap1.putAll(hashMap0);
      hashMap0.values();
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.277070628397111
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(object0);
      String string0 = jSONObject0.toString((-956));
      String string1 = jSONObject0.toString((-1101), 1651);
      assertTrue(string1.equals((Object)string0));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.toString((-956));
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      Float float0 = new Float((-3165.0F));
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      int int0 = 233;
      Integer integer0 = new Integer(233);
      Integer.getInteger("$qR+e");
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      int int1 = (-1070);
      Integer integer1 = new Integer(233);
      try { 
        Integer.valueOf("$qR+e");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"$qR+e\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.9556913461207355
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      Collection<String> collection0 = hashMap0.values();
      JSONObject jSONObject0 = new JSONObject(collection0);
      Integer integer0 = new Integer(4374);
      Integer integer1 = new Integer(9);
      Integer integer2 = new Integer(92);
      Integer integer3 = new Integer(4374);
      Integer integer4 = new Integer((-1407));
      try { 
        jSONObject0.getLong("dou");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"dou\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-2181.2183F));
      Long long0 = new Long((-978L));
      Float float1 = new Float(0.0);
      Float.isFinite((-789.66F));
      Float.isFinite(1484.2947F);
      Float.max(1.0F, 4272.7F);
      Float float2 = new Float((-789.66F));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Float.sum((byte)107, (byte)107);
      Float.isFinite(900.6693F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("getcompare");
      linkedList1.retainAll(linkedList0);
      linkedList1.offerLast("Substring bounds error");
      linkedList1.addFirst("F'_bx");
      Float.sum((byte)107, (byte)107);
      String[] stringArray0 = new String[8];
      stringArray0[0] = ">\"7x?=yS:skp?9e*)a";
      stringArray0[1] = "9a& ";
      stringArray0[2] = "false";
      Double double0 = new Double((-1637.089617));
      Double.sum(214.0F, (-2409.098346761449));
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      Float float0 = new Float((-2181.2183F));
      Float.sum(2728.9F, 2728.9F);
      Float.sum((-1.0F), 0.0F);
      Float.max((-2181.2183F), (-1.0F));
      Float.max((-4347.2F), (-2181.2183F));
      Float.min((-2181.2183F), (-3271.0F));
      Float.sum((-1.0F), 1853.0F);
      Float.max(1.0F, 1.0F);
      Float.min((-2181.2183F), 1.0F);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.6750924883025666
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      String string0 = JSONObject.quote("Unterminated string");
      assertEquals("\"Unterminated string\"", string0);
      
      Integer integer0 = new Integer((-1374));
      Integer integer1 = new Integer(8);
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer2 = new Integer(993);
      Integer integer3 = new Integer(4);
      Integer integer4 = new Integer(97);
      Integer integer5 = new Integer(47);
      Integer.getInteger("\"Unterminated string\"");
      Integer integer6 = new Integer(97);
      Integer.getInteger("\"Unterminated string\"");
      hashMap0.putIfAbsent(integer1, integer5);
      Integer integer7 = new Integer(20);
      BiFunction<Integer, Integer, Integer> biFunction0 = (BiFunction<Integer, Integer, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(integer7, biFunction0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Double double0 = new Double(1279.0775632257291);
      Short.compare((short) (-3471), (short)3380);
      Integer integer0 = new Integer((short) (-1));
      Integer.compareUnsigned((short)3380, 2903);
      Integer.compare((short)3380, 1);
      Integer.min((short) (-3471), 1);
      Integer.toUnsignedLong((short) (-1));
      Integer.getInteger("`:vX\"7];g?o(AAH8");
      Integer.remainderUnsigned(1862, 57);
      Integer.getInteger("`:vX\"7];g?o(AAH8", 1);
      Integer.remainderUnsigned(1, 20);
      Integer.compareUnsigned(95, 97);
      Integer.remainderUnsigned((short) (-3471), (-3471));
      Integer.toUnsignedString((int) (short) (-1));
      Integer integer1 = new Integer(2105);
      Integer integer2 = new Integer(34);
      Integer.compare(0, (-1));
      Float float0 = new Float((-1015.22F));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = jSONObject0.optString("`:vX\"7];g?o(AAH8");
      assertEquals("", string0);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.7424873191022137
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "jp6!CyNwg&";
      stringArray0[1] = "pa";
      stringArray0[2] = "UI2UL";
      stringArray0[3] = "4,AqJ#X-H_t;M.Q";
      stringArray0[4] = "Cc_VlE#oF";
      stringArray0[5] = "getdoubleToLongBits";
      stringArray0[6] = ",:]}/\"[{;=#";
      stringArray0[7] = "BV3JuSq-Cb[";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      long long0 = jSONObject0.optLong("BV3JuSq-Cb[");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Boolean, String> hashMap1 = new HashMap<Boolean, String>();
      hashMap0.putAll(hashMap1);
      HashMap<Boolean, String> hashMap2 = new HashMap<Boolean, String>();
      Integer integer0 = new Integer((-1217));
      Integer integer1 = new Integer((-1217));
      Integer integer2 = new Integer((-1217));
      Integer integer3 = new Integer((-1217));
      Integer integer4 = new Integer((-3156));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject(integer1, stringArray0);
      try { 
        jSONObject0.get("*f+rLMrB{ti");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*f+rLMrB{ti\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=2.1932518507446592
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "ji>@'#fmP`~_?q";
      stringArray0[2] = "8r/5";
      stringArray0[3] = "#B4z7t2a</5?SMVt";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Long long0 = new Long(2245L);
      jSONObject1.putOpt("#B4z7t2a</5?SMVt", long0);
      Integer.getInteger("ji>@'#fmP`~_?q");
      try { 
        Integer.decode("X!~o*VFhQK9J;");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"X!~o*VFhQK9J;\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      HashMap<Float, Long> hashMap2 = new HashMap<Float, Long>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.names();
      Byte byte0 = new Byte((byte) (-122));
      HashMap<Short, JSONArray> hashMap3 = new HashMap<Short, JSONArray>();
      assertTrue(hashMap3.isEmpty());
  }
}
