/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:43:13 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.PipedReader;
import java.io.PrintStream;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.time.chrono.Chronology;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Vector;
import org.apache.derby.catalog.UUID;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.types.UserType;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.FromList;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.GroupByList;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.compile.PredicateList;
import org.apache.derby.impl.sql.compile.ProjectRestrictNode;
import org.apache.derby.impl.sql.compile.ResultColumnList;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.compile.SubqueryList;
import org.apache.derby.impl.sql.compile.TernaryOperatorNode;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.rts.RealDistinctScanStatistics;
import org.apache.derby.impl.sql.execute.rts.RealTableScanStatistics;
import org.apache.derby.impl.store.raw.data.BaseDataFileFactoryJ4;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBLocalTransaction;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.AbstractConnection;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yqB$qk?dmsN-n7}p";
      stringArray0[1] = "drop &index";
      stringArray0[2] = "w &[YmNy@=<&.WV0/T";
      stringArray0[7] = "geG6cdvxI|>?#jx}Y";
      stringArray0[4] = "H@'Pc7%* 2w<[X.";
      stringArray0[6] = "pidi";
      stringArray0[7] = "H@'Pc7%* 2w<[X.";
      SQLUtil.removeComments("drop &index");
      SQLUtil.mutatesDataOrStructure("alter session");
      String string0 = SQLUtil.removeComments("drop &index");
      assertEquals("drop &index", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3197367252258787
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yd;B$qk?dmsNL-n7}p";
      DBDataType.getInstance(57, "execute");
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(2060, "alter tablenosettings");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{yd;B$qk?dmsNL-n7}p", (DBTable) null, dBDataType0, integer0);
      defaultDBColumn0.setDefaultValue("Re/4][T}sW1|V50TY");
      DBDataType.getInstance((-1367), "alter tablenosettings");
      Integer.getInteger("org.apache.derby.impl.sql.execute.DropStatisticsConstantAction");
      defaultDBColumn0.setDoc("{yd;B$qk?dmsNL-n7}p");
      Integer.getInteger("{yd;B$qk?dmsNL-n7}p", (-835));
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      defaultDBColumn0.toString();
      dBDataType0.isAlpha();
      Integer integer1 = new Integer((-835));
      Integer.remainderUnsigned(3, (-1801212775));
      defaultDBColumn0.setFractionDigits(integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("{yd;B$qk?dmsNL-n7}p, {yd;B$qk?dmsNL-n7}p, {yd;B$qk?dmsNL-n7}p, {yd;B$qk?dmsNL-n7}p, {yd;B$qk?dmsNL-n7}p", string0);
      
      Boolean boolean0 = new Boolean(false);
      String string1 = SQLUtil.renderColumn(dBColumnArray0[1]);
      assertEquals("{yd;B$qk?dmsNL-n7}p ALTER TABLENOSETTINGS(1,-835) DEFAULT Re/4][T}sW1|V50TY NULL", string1);
      
      TernaryOperatorNode ternaryOperatorNode0 = new TernaryOperatorNode();
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      Boolean boolean1 = SQLUtil.mutatesStructure("aO");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.778098004139904
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      SQLUtil.isQuery("SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8";
      stringArray0[1] = "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8";
      stringArray0[2] = "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8";
      stringArray0[3] = "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8";
      stringArray0[4] = "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8";
      stringArray0[5] = " or ";
      stringArray0[6] = "executereferences";
      String string0 = SQLUtil.innerJoin("SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8", stringArray0, "executereferences", "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8", stringArray0);
      // Undeclared exception!
      SQLUtil.mutatesStructure(string0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "=YJ$6p:jWyoGO";
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      Random.setNextRandom(391);
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "yj7-d+:.Jt+ ";
      stringArray1[1] = "ge6(dvxi|";
      stringArray1[2] = "call";
      stringArray1[3] = "(=YJ$6p:jWyoGO, , , )";
      stringArray1[4] = "=YJ$6p:jWyoGO";
      stringArray1[5] = "yj7-d+:.Jt+ ";
      // Undeclared exception!
      try { 
        SQLUtil.join("=YJ$6p:jWyoGO", "yj7-d+:.Jt+ ", stringArray1, "yj7-d+:.Jt+ ", "VX", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0132653527151794
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesStructure("c");
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.740253490256931
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      SQLUtil.typeAndName(dBCatalog0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "nosetti", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance(0, "Ze+F");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("iSwY28");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "executecreate unique ind5x");
      Integer integer0 = new Integer((-108));
      Integer.getInteger("Ze+F", (Integer) 0);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      dBDataType0.isNumber();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("EaIs<;# wgNP&Js", defaultDBTable0, dBDataType0, integer1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      StringBuilder stringBuilder0 = new StringBuilder("EaIs<;# wgNP&Js");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("iSwY28", dBTable0, dBDataType0, integer2);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "EaIs<;# wgNP&Js");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1, stringBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("iSwY28");
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, mockPrintWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "order";
      SelectNode selectNode0 = new SelectNode();
      selectNode0.clearDistinct();
      selectNode0.makeDistinct();
      SelectNode selectNode1 = new SelectNode();
      TernaryOperatorNode ternaryOperatorNode0 = new TernaryOperatorNode();
      TernaryOperatorNode ternaryOperatorNode1 = new TernaryOperatorNode();
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("order");
      assertNull(boolean0);
      
      String string0 = SQLUtil.substituteMarkers("order", "order", ternaryOperatorNode0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.883605246992323
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yd;B$qk?dmsNL-&7}p";
      DBDataType.getInstance(65, "execute");
      Integer integer0 = RawTransaction.ABORT;
      DBDataType dBDataType0 = DBDataType.getInstance(2060, "j=-\n4");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{yd;B$qk?dmsNL-&7}p", (DBTable) null, dBDataType0, integer0);
      DBDataType.getInstance((-1367), "j=-\n4");
      Integer.getInteger("org.apache.derby.impl.sql.execute.DropStatisticsConstantAction");
      defaultDBColumn0.setDoc("into");
      Integer.getInteger("{yd;B$qk?dmsNL-&7}p", (-835));
      DBColumn[] dBColumnArray0 = new DBColumn[5];
      defaultDBColumn0.toString();
      Integer.compare(65, 0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("{yd;B$qk?dmsNL-&7}p, {yd;B$qk?dmsNL-&7}p, {yd;B$qk?dmsNL-&7}p, {yd;B$qk?dmsNL-&7}p, {yd;B$qk?dmsNL-&7}p", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("renamereferences");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      defaultDBColumn0.toString();
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.iapi.store.replication.slave.SlaveFactory");
      String string1 = SQLUtil.renderColumn(dBColumnArray0[0]);
      assertEquals("{yd;B$qk?dmsNL-&7}p J=-\n4(1) NULL", string1);
      
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("j=-\n4");
      assertNull(boolean1);
      
      String string2 = SQLUtil.renderColumnListWithTableName("!2 )~pM&h:", stringArray0);
      assertEquals("!2 )~pM&h:.{yd;B$qk?dmsNL-&7}p, !2 )~pM&h:.null, !2 )~pM&h:.null, !2 )~pM&h:.null, !2 )~pM&h:.null, !2 )~pM&h:.null, !2 )~pM&h:.null, !2 )~pM&h:.null, !2 )~pM&h:.null", string2);
      
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("{yd;B$qk?dmsNL-&7}p J=-N4(1) NULL");
      assertEquals(2, objectArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter table", defaultDBTable0, (-126), "create tablecreate unique ind5x");
      stringBuilder0.append((Object) defaultDBColumn0);
      StringBuilder stringBuilder1 = stringBuilder0.reverse();
      stringBuilder0.reverse();
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      TernaryOperatorNode ternaryOperatorNode0 = new TernaryOperatorNode();
      TernaryOperatorNode ternaryOperatorNode1 = new TernaryOperatorNode();
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "`o>FV8Lumc]8IQSGw";
      stringArray0[1] = "drop materialized viewcreate unique ind5x";
      stringArray0[2] = "I'_/LS";
      stringArray0[3] = "I'_/LS";
      stringArray0[4] = "create tablecreate unique ind5x";
      stringArray0[5] = "`o>FV8Lumc]8IQSGw";
      stringArray0[6] = "`o>FV8Lumc]8IQSGw";
      SQLUtil.join("alter table", "`o>FV8Lumc]8IQSGw", stringArray0, "`o>FV8Lumc]8IQSGw", "alter table", stringArray0);
      SQLUtil.addOptionalCondition("&`]y7u*tuSKKXUy", stringBuilder1);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      // Undeclared exception!
      try { 
        constantActionActivation0.getTransactionController();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.643533146880968
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[12];
      stringArray0[0] = "{yqB$qk?dmsN-n7}p";
      stringArray0[1] = "{yqB$qk?dmsN-n7}p";
      stringArray0[2] = "w &[YmNy@=<&.WV0/T";
      stringArray0[7] = "geG6(dvxI|>?#jx}Y";
      stringArray0[4] = "H@'8c7%* 2=<[X.";
      stringArray0[8] = "pidi";
      stringArray0[2] = "(k8z";
      stringArray0[8] = "Y9xV5D0,LK-}ZO";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "{yqB$qk?dmsN-n7}p", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("{yqB$qk?dmsN-n7}p = '{yqB$qk?dmsN-n7}p' AND {yqB$qk?dmsN-n7}p = '{yqB$qk?dmsN-n7}p' AND (k8z = '(k8z' AND null = null AND H@'8c7%* 2=<[X. = 'H@'8c7%* 2=<[X.' AND null = null AND null = null AND geG6(dvxI|>?#jx}Y = 'geG6(dvxI|>?#jx}Y' AND Y9xV5D0,LK-}ZO = 'Y9xV5D0,LK-}ZO' AND null = null AND null = null AND null = null", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1831), "d=d!Arb");
      Integer integer0 = new Integer((-1880527331));
      Integer integer1 = Integer.getInteger("Cannot change transaction isolation level in the middle of a transaction.", integer0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter indexnhw:zs>\"zy[", dBTable0, dBDataType0, integer1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      StringBuilder stringBuilder0 = new StringBuilder("Y9xV5D0,LK-}ZO");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("CGxmK{03qf^|rZ'");
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      SQLUtil.addOptionalCondition("Y9xV5D0,LK-}ZO", stringBuilder0);
      assertEquals("Y9xV5D0,LK-}ZOD=D!ARB(-1880527331) or Y9xV5D0,LK-}ZO", stringBuilder0.toString());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9175072182304431
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      BasicUUID basicUUID0 = new BasicUUID();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer.toUnsignedString((-1016));
      defaultDBTable0.getIndex("selecte+&ca0?xws{m");
      DBDataType dBDataType0 = DBDataType.getInstance(1041, "UPDATE");
      String string0 = "g(H~>_;~JM[";
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g(H~>_;~JM[", defaultDBTable0, dBDataType0, integer0, integer0);
      Integer.min(1041, (-121));
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      BasicUUID basicUUID1 = new BasicUUID();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      Integer.getInteger((String) null, (Integer) 0);
      SQLUtil.renderColumnNames(list0);
      SQLUtil.renderColumn(defaultDBColumn0);
      int int0 = 1;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(1);
      MockPrintStream mockPrintStream0 = new MockPrintStream(dynamicByteArrayOutputStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, (String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N-7[:DtP9BDRey");
      MockFile mockFile0 = new MockFile((File) null, "N-7[:DtP9BDRey");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.checkError();
      Locale locale0 = Locale.TAIWAN;
      mockPrintStream0.println(639L);
      Integer.getInteger("N-7[:DtP9BDRey");
      DBDataType dBDataType0 = DBDataType.getInstance((-336), "+m;ksU<");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("N-7[:DtP9BDRey", defaultDBTable0, dBDataType0, integer0, integer0);
      String string0 = defaultDBColumn0.toString();
      assertEquals("N-7[:DtP9BDRey : +M;KSU<(1,1)", string0);
      
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("N-7[:DtP9BDRey, N-7[:DtP9BDRey", string1);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6580690976622665
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("08");
      Integer.divideUnsigned((-376), 350);
      String string0 = "&(*\"MLZteZ!\\u&";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "08";
      stringArray0[1] = string0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.equals("08");
      dBPrimaryKeyConstraint1.setDoc((String) null);
      dBPrimaryKeyConstraint1.toString();
      dBPrimaryKeyConstraint1.toString();
      SQLUtil.normalize(stringArray0[1], false);
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) stringReader0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = null;
      DBSchema dBSchema0 = new DBSchema("Connection not closed");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Connection not closed", false, defaultDBTable0, stringArray0, defaultDBTable0, (String[]) null);
      SQLUtil.constraintName(dBForeignKeyConstraint0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BaseDataFileFactoryJ4 baseDataFileFactoryJ4_0 = new BaseDataFileFactoryJ4();
      baseDataFileFactoryJ4_0.getIdentifier();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getForeignKeys((UUID) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBSchema dBSchema0 = new DBSchema("Connection not closed");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "referen");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      dBSchema0.isIdentical(defaultDBTable0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      String string0 = SQLUtil.constraintName(dBForeignKeyConstraint0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString((-6));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4294967290");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "d5]Eu9}\"I/8@y";
      stringArray0[2] = "4294967290";
      stringArray0[3] = ";=[hkX{dILz-Bt5~\"k";
      stringArray0[4] = ";=[hkX{dILz-Bt5~\"k";
      stringArray0[5] = "d5]Eu9}\"I/8@y";
      String string0 = "&(*\"MLZteZ!\\u&";
      Integer.toUnsignedString((-6));
      stringArray0[6] = string0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ";=[hkX{dILz-Bt5~\"k", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";=[hkX{dILz-Bt5~\"k", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBPrimaryKeyConstraint0.toString();
      Integer.max((-6), (-6));
      DBDataType dBDataType0 = DBDataType.getInstance((-6), "4294967290");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d5]Eu9}\"I/8@y", dBTable0, dBDataType0, integer0, integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString((-6));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[2] = "4294967290";
      stringArray0[5] = "d5]Eu9}\"I/8@y";
      String string0 = "&(*\"MLZteZ!\\u&";
      Integer.toUnsignedString((-6));
      stringArray0[6] = string0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "d5]Eu9}\"I/8@y", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("4294967290", true, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.toString();
      DBDataType dBDataType0 = DBDataType.getInstance((-6), "4294967290");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d5]Eu9}\"I/8@y", defaultDBTable0, dBDataType0, integer0, integer0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      BasicUUID basicUUID0 = new BasicUUID();
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      // Undeclared exception!
      try { 
        Chronology.ofLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // locale
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp();
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp2.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp3.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp5 = new DatabaseParameterBufferImp();
      System.setCurrentTimeMillis(604800L);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "updateillegal column type format:";
      SQLUtil.isDML("updateillegal column type format:");
      ArrayList<DBColumn> arrayList0 = new ArrayList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) arrayList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8753031915790075
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N-7[:DtP9BDRey");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/13_jdbacl");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-15);
      byteArray0[2] = (byte) (-111);
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte)95;
      byteArray0[5] = (byte) (-13);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile((File) null, "N-7[:DtP9BDRey");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      mockPrintStream0.printf(locale0, "N-7[:DtP9BDRey", objectArray0);
      locale0.getUnicodeLocaleKeys();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = SQLUtil.normalize("--", false);
      SQLUtil.mutatesStructure("--");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "--";
      stringArray0[1] = "--";
      stringArray0[2] = "rename";
      stringArray0[3] = "?<RyEbh";
      stringArray0[4] = "--";
      stringArray0[5] = "select null as TABLE_CAT,null as TABLE_SCHEM,RF.RDB$RELATION_NAME as TABLE_NAME, RF.RDB$FIELD_NAME as COLUMN_NAME, UP.RDB$GRANTOR as GRANTOR, UP.RDB$USER as GRANTEE, UP.RDB$PRIVILEGE as PRIVILEGE, UP.RDB$GRANT_OPTION as IS_GRANTABLE from RDB$RELATION_FIELDS RF, RDB$FIELDS F, RDB$USER_PRIVILEGES UP where RF.RDB$RELATION_NAME = UP.RB$RELATION_NAME and RF.RDB$FIELD_SOURCE = F.RDB$FIELD_NAME  and (UP.RDB$FIELD_NAME is null or UP.RDB$FIELD_NAME = RF.RDB$FIELD_NAME) and UP.RDB$RELATION_NAME = ? and ((";
      stringArray0[6] = "N-7[:DtP9BDRey";
      stringArray0[7] = "--";
      String string1 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance((-1978), "");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("_|k", (DBTable) null, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      internalTransactionCoordinator0.getSynchronizationObject();
      InternalTransactionCoordinator internalTransactionCoordinator1 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yd;B$qk?dmsNL-n7}p";
      SQLUtil.normalize("{yd;B$qk?dmsNL-n7}p", true);
      System.setCurrentTimeMillis((-351L));
      System.setCurrentTimeMillis(2000L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8872385926133708
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("N-7[:DtP9BDRey");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile((File) null, "N-7[:DtP9BDRey");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "N-7[:DtP9BDRey", objectArray0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = null;
      stringArray0[1] = "N-7[:DtP9BDRey";
      stringArray0[2] = "N-7[:DtP9BDRey";
      stringArray0[3] = "N-7[:DtP9BDRey";
      stringArray0[4] = null;
      stringArray0[5] = "N-7[:DtP9BDRey";
      stringArray0[6] = null;
      stringArray0[7] = "N-7[:DtP9BDRey";
      mockPrintStream0.print('/');
      stringArray0[8] = "N-7[:DtP9BDRey";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec1, mockPrintWriter0);
      assertNotSame(nameSpec1, nameSpec0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Integer integer0 = new Integer(298);
      genericDescriptorList0.add((Object) integer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) genericDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLUtil.parseColumnTypeAndSize("org.databene.jdbacl.sql.parser.SQ0Parser$exclusive_or_expression_return");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "sz";
      stringArray0[1] = "sz";
      stringArray0[2] = "org.databene.jdbacl.sql.parser.SQ0Parser$exclusive_or_expression_return";
      stringArray0[3] = " AND ";
      stringArray0[4] = "org.databene.jdbacl.sql.parser.SQ0Parser$exclusive_or_expression_return";
      stringArray0[5] = "create nique";
      stringArray0[6] = "sz";
      stringArray0[7] = " AND ";
      stringArray0[8] = " AND ";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder("alter materialized view");
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0);
      assertEquals("alter materialized view", stringBuilder0.toString());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(" REFERENCES ");
      tableContainer0.getTable(" REFERENCES ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance((-2402), ":");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", (DBTable) null, dBDataType0, integer0, integer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      Boolean boolean0 = Boolean.FALSE;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(3030, 3030);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.544943664690598
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("pIdidz/3s0");
      SQLUtil.isQuery("pIdidz/3s0");
      SQLUtil.isProcedureCall("!uYfvY");
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      xSQLVAR4.deepCopy();
      xSQLVAR2.deepCopy();
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      XSQLVAR xSQLVAR6 = new XSQLVAR();
      xSQLVAR4.deepCopy();
      Random.setNextRandom((-2425));
      Random.setNextRandom((-1151856670));
      TableContainer tableContainer0 = new TableContainer((String) null);
      tableContainer0.setName((String) null);
      tableContainer0.getTable((String) null);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, (DBTable) null, 8, "drop materialized viewdete");
      tableContainer0.getTables();
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("executeillegal column type format:");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      SQLUtil.mutatesStructure("callnosettings");
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      Properties properties0 = new Properties();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("create unique ind5x");
      assertFalse(boolean0);
      
      GDSType.getType("callcreate unique ind5x");
      boolean boolean1 = SQLUtil.isQuery("select into");
      assertFalse(boolean1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("updatereferences");
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      System.setCurrentTimeMillis((-726L));
      System.setCurrentTimeMillis(40);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*ipqN=ITzQ9 U5@/5K");
      String[] stringArray0 = new String[8];
      stringArray0[2] = "create ";
      stringArray0[1] = "*ipqN=ITzQ9 U5@/5K";
      stringArray0[2] = "create ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      dBForeignKeyConstraint0.isIdentical(defaultDBTable0);
      String[] stringArray1 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint(" as truly the best for table ", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      FKChangeRule fKChangeRule1 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint1.setUpdateRule(fKChangeRule1);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.addOptionalCondition("I'Z/nS", stringBuilder0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      SQLUtil.join("alter materialized view", "*ipqN=ITzQ9 U5@/5K", stringArray1, "qCok", " join ", stringArray0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("}_o~(0w<E", defaultDBTable0, (DBDataType) null);
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint1, stringBuilder0);
      assertEquals("I'Z/nSCONSTRAINT \" as truly the best for table \" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FormatableProperties formatableProperties0 = new FormatableProperties();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("I'_/nS");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "I'_/nS";
      stringArray0[1] = "I'_/nS";
      stringArray0[2] = "I'_/nS";
      stringArray0[3] = "execre1ferences";
      stringArray0[4] = "I'_/nS";
      stringArray0[5] = "execre1ferences";
      stringArray0[6] = "I'_/nS";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "execre1ferences", true, stringArray0);
      String string0 = SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      assertEquals("I'_/nS.execre1ferences", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Syntax error at the beginning ", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex((String) null, false, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      // Undeclared exception!
      try { 
        SQLUtil.join("QG^c'=TwARAW:", "create unique index", (String[]) null, "truncatevq<[*4imbe]kk_4@", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      String string0 = SQLUtil.join(stringArray0[2], "*6q", stringArray0, "alter indexcreate type", "syntax erro", stringArray0);
      assertEquals("alter indexcreate type as syntax erro on *6q.null = syntax erro.null and *6q.null = syntax erro.null and *6q.null = syntax erro.null and *6q.null = syntax erro.null and *6q.null = syntax erro.null and *6q.null = syntax erro.null and *6q.null = syntax erro.null", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      SQLUtil.ownerDotComponent(defaultDBTable0);
      defaultDBTable0.getPrimaryKeyConstraint();
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR2 = xSQLVAR1.deepCopy();
      xSQLVAR2.decodeTime((byte[]) null);
      xSQLVAR2.deepCopy();
      xSQLVAR2.deepCopy();
      XSQLVAR xSQLVAR3 = new XSQLVAR();
      XSQLVAR xSQLVAR4 = new XSQLVAR();
      XSQLVAR xSQLVAR5 = new XSQLVAR();
      xSQLVAR5.sqltype = (-317818090);
      xSQLVAR4.sqlname = "SEARCHABLE";
      // Undeclared exception!
      try { 
        xSQLVAR5.decodeString((byte[]) null, "5/pep55B", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yqB$qk?dmsN-n7}p";
      stringArray0[1] = "drop &index";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "hQ2jW";
      stringArray1[1] = "{yqB$qk?dmsN-n7}p";
      stringArray1[2] = "hQ2jW";
      stringArray1[3] = "drop &index";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("truncate", stringArray0, "truncate", "hQ2jW", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0843488460674409
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("08");
      Integer.divideUnsigned((-376), 350);
      String string0 = "&(*\"MLZteZ!\\u&";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "08";
      stringArray0[1] = string0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.equals("08");
      dBPrimaryKeyConstraint1.setDoc((String) null);
      String string1 = dBPrimaryKeyConstraint1.toString();
      dBPrimaryKeyConstraint1.toString();
      SQLUtil.normalize(stringArray0[1], false);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = stringBuilder1.append('C');
      // Undeclared exception!
      try { 
        stringBuilder2.replace(12271334, 350, string1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      BasicUUID basicUUID0 = new BasicUUID();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer.toUnsignedString((-1016));
      String string0 = "selecte+&ca0?xws{m";
      defaultDBTable0.getIndex("selecte+&ca0?xws{m");
      DBDataType dBDataType0 = DBDataType.getInstance(1041, "UPDATE");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("g(H~>_;~JM[", defaultDBTable0, dBDataType0, integer0, integer0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      BasicUUID basicUUID1 = new BasicUUID();
      List<DBColumn> list0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("(");
      tableContainer0.getTables(true);
      tableContainer0.getTable("(");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(", (DBTable) null, (-2451), "(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[0] = "{yqB$qkARpsN-n7}p";
      stringArray0[1] = "{yqB$qkARpsN-n7}p";
      stringArray0[2] = "w &[YmNy@=<&.WV0/T";
      stringArray0[7] = "geG6(dvxI|>?#jx}Y";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".<bo^&_KWi=ZdJGF");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("geG6(dvxI|>?#jx}Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: geG6(dvxI|>?#jx}Y
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("setQLXM(String, SQLXML)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.setName("7Vo@kPg");
      SQLUtil.typeAndName(dBCatalog0);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = new XSQLVAR();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator((InternalTransactionCoordinator.AbstractTransactionCoordinator) null);
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("", dBCatalog0);
      DBTrigger dBTrigger0 = new DBTrigger("7SRJ-#<<J9o+^)", dBSchema0);
      dBCatalog0.setDoc((String) null);
      dBSchema0.addTrigger(dBTrigger0);
      dBCatalog0.removeSchema(dBSchema0);
      PipedReader pipedReader0 = new PipedReader(25);
      Character character0 = Character.valueOf('W');
      Character.isSurrogate('W');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'W'", string0);
      
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.lowerCaseMode(true);
      SQLUtil.renderNumber(streamTokenizer0);
      String string1 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 0", string1);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = ">:N.u|,";
      String string1 = "8ntr0o:v]/a8(";
      String[] stringArray0 = null;
      String string2 = " as ";
      String string3 = "create materialized viewpididz/3s0";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("Modifying access paths using optimizer ", (String[]) null, "8ntr0o:v]/a8(", "create materialized viewpididz/3s0", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter session", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "8ntr0o:v]/a8(", false, (String[]) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(">:N.u|,", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("%U", dBTable0, (-70107288), " as ");
      defaultDBColumn0.setNullable(false);
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("%U  AS  NOT NULL", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.reverse();
      StringReader stringReader0 = new StringReader("create materialized view");
      String string0 = SQLUtil.removeComments("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = null;
      String[] stringArray0 = new String[5];
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("alter tablecreate nique index", stringBuilder0);
      SQLUtil.addRequiredCondition((String) null, stringBuilder1);
      stringBuilder0.append(0L);
      int int0 = 3259;
      stringBuilder0.codePoints();
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) stringBuilder1, 3259, 3259);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start 3259, end 3259, s.length() 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      xSQLVAR1.deepCopy();
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[5];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      Object object0 = new Object();
      Integer integer0 = RawTransaction.ABORT;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "GRANTEETYPE", xSQLVAR0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      String string0 = SQLUtil.normalize("setSQLXM(String, SQLXML)", true);
      assertEquals("setSQLXM (String, SQLXML)", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("08");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(39, (-1617597815));
      streamTokenizer0.commentChar((-2701));
      streamTokenizer0.quoteChar((-3));
      stringReader0.reset();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("drop tablenil;sg`mqaaa*[7mp*f");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.0175123730499482
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDML("(gk8z");
      boolean boolean1 = SQLUtil.isProcedureCall("(gk8z");
      assertFalse(boolean1);
      
      DBSchema dBSchema0 = new DBSchema("(gk8z", (DBCatalog) null);
      dBSchema0.isIdentical((DBObject) null);
      DBTrigger dBTrigger0 = new DBTrigger("NqUc#lt0`6e/", dBSchema0);
      dBTrigger0.setDescription("s?b<:wECu{V9");
      dBTrigger0.setActionType("X4/L=FmvD'<a=");
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      dBSchema0.getTables(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(gk8z";
      stringArray0[1] = "(gk8z";
      stringArray0[2] = "exec";
      dBSchema0.getTables();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PERCENT", false, stringArray0);
      dBSchema0.getTables(false);
      NameSpec nameSpec0 = NameSpec.NEVER;
      dBPrimaryKeyConstraint0.isIdentical(dBSchema0);
      dBPrimaryKeyConstraint0.setName("moveToCurrentRow");
      dBSchema0.addTable(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      Boolean.logicalXor(false, false);
      dBSchema0.setCatalog((DBCatalog) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      boolean boolean2 = SQLUtil.isDDL("exec");
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.9401690517473154
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      String string0 = "(gk8z";
      SQLUtil.isDML("(gk8z");
      SQLUtil.isProcedureCall("(gk8z");
      DBSchema dBSchema0 = new DBSchema("(gk8z", (DBCatalog) null);
      dBSchema0.isIdentical((DBObject) null);
      DBTrigger dBTrigger0 = new DBTrigger("NqUc#lt0`6e/", dBSchema0);
      dBTrigger0.setDescription("s?b<:wECu{V9");
      dBTrigger0.setActionType("X4/L=FmvD'<a=");
      dBSchema0.addTrigger(dBTrigger0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("exec", dBSchema0);
      dBSchema0.getTables(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(gk8z";
      stringArray0[1] = "(gk8z";
      stringArray0[2] = "exec";
      dBSchema0.getTables();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "PERCENT", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string1 = "moveToCurrentRow";
      dBPrimaryKeyConstraint0.isIdentical(dBSchema0);
      dBPrimaryKeyConstraint0.setName("moveToCurrentRow");
      dBSchema0.addTable(defaultDBTable0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec0);
      Boolean.logicalXor(false, false);
      dBSchema0.setCatalog((DBCatalog) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL(stringArray0[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Vector<String> vector0 = new Vector<String>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      BasicUUID basicUUID0 = new BasicUUID();
      System.setCurrentTimeMillis(12L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "A,.mUW{<riv{?";
      stringArray0[1] = "A,.mUW{<riv{?";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "A,.mUW{<riv{?", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.databene.jdbacl.QuerQIterator", true, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "deletenosettings", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT deletenosettings PRIMARY KEY (A,.mUW{<riv{?, A,.mUW{<riv{?)", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3237654397953853
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "bCbM#d!2OkK!]rdz5";
      stringArray0[1] = "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8", false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      dBPrimaryKeyConstraint0.toString();
      Integer.max((-1459966765), 2170);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      String string0 = SQLUtil.normalize("SELECT  NULL as TABLE_CAT , NULL as TABLE_SCHEM , ind.RDB$RELATION_NAME AS TABLE_NAME , ind.RDB$UNIQUE_FLAG AS NON_UNIQUE , NULL as INDEX_QUALIFIER , ind.RDB$INDEX_NAME as INDEX_NAME , NULL as ITYPE , ise.rdb$field_position+1 as ORDINAL_POSITION , ise.rdb$field_name as COLUMN_NAME , ind.RDB$INDEX_TYPE as ASC_OR_DESC , 0 as CARDINALITY , 0 as IPAGES , nucl as FILTER_CONDITION FROM   rdb$indices ind,   rdb$index_segments ise WHERE   ind.rdb$index_name = ise.rdb$index_name AND   UPPER(ind.rdb$relation_name) = ? ORDER BY 4, 6, 8", false);
      assertEquals("SELECT NULL as TABLE_CAT, NULL as TABLE_SCHEM, ind.RDB $ RELATION_NAME AS TABLE_NAME, ind.RDB $ UNIQUE_FLAG AS NON_UNIQUE, NULL as INDEX_QUALIFIER, ind.RDB $ INDEX_NAME as INDEX_NAME, NULL as ITYPE, ise.rdb $ field_position + 1 as ORDINAL_POSITION, ise.rdb $ field_name as COLUMN_NAME, ind.RDB $ INDEX_TYPE as ASC_OR_DESC, 0 as CARDINALITY, 0 as IPAGES, nucl as FILTER_CONDITION FROM rdb $ indices ind, rdb $ index_segments ise WHERE ind.rdb $ index_name = ise.rdb $ index_name AND UPPER (ind.rdb $ relation_name) = ? ORDER BY 4, 6, 8", string0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.285149829679032
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.toUnsignedString((-6));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4294967290");
      String[] stringArray0 = new String[7];
      stringArray0[1] = "d5]Eu9}\"I/8@y";
      stringArray0[2] = "4294967290";
      stringArray0[3] = ";=[hkX{dILz-Bt5~\"k";
      stringArray0[4] = ";=[hkX{dILz-Bt5~\"k";
      stringArray0[5] = "d5]Eu9}\"I/8@y";
      String string0 = "&(*\"MLZteZ!\\u&";
      Integer.toUnsignedString((-6));
      stringArray0[6] = string0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ";=[hkX{dILz-Bt5~\"k", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(";=[hkX{dILz-Bt5~\"k", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      dBPrimaryKeyConstraint0.toString();
      Integer.max((-6), (-6));
      DBDataType dBDataType0 = DBDataType.getInstance((-6), "4294967290");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("d5]Eu9}\"I/8@y", dBTable0, dBDataType0, integer0, integer0);
      SQLUtil.renderColumn(defaultDBColumn0);
      AbstractConnection abstractConnection0 = null;
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      FBLocalTransaction fBLocalTransaction0 = new FBLocalTransaction(fBManagedConnection0, (AbstractConnection) null);
      FBManagedConnection fBManagedConnection1 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection1).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.2973191338980623
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yqB$qk?dmsN-n7}p";
      stringArray0[1] = "drop &index";
      stringArray0[2] = "w &[YmNy@=<&.WV0/T";
      stringArray0[7] = "geG6(dvxI|>?#jx}Y";
      stringArray0[4] = "H@'8c7%* 2=<[X.";
      stringArray0[6] = "pidi";
      stringArray0[7] = "(k8z";
      stringArray0[8] = "Y9xV5D0,LK-}ZO";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      System.setCurrentTimeMillis(664L);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop &index", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("{yqB$qk?dmsN-n7}p = '{yqB$qk?dmsN-n7}p' AND drop &index = 'drop &index' AND w &[YmNy@=<&.WV0/T = 'w &[YmNy@=<&.WV0/T' AND null = null AND H@'8c7%* 2=<[X. = 'H@'8c7%* 2=<[X.' AND null = null AND pidi = 'pidi' AND (k8z = '(k8z' AND Y9xV5D0,LK-}ZO = 'Y9xV5D0,LK-}ZO'", true, dBUniqueConstraint0);
      dBUniqueIndex0.getTable();
      Integer integer0 = new Integer((-1880527331));
      Integer.getInteger("Cannot change transaction isolation level in the middle of a transaction.", integer0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      Integer.decode("0");
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder0, nameSpec0);
      assertEquals("CONSTRAINT \"drop &index\" CONSTRAINT \"drop &index\" ", stringBuilder0.toString());
      
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop &index\" UNIQUE ({yqB$qk?dmsN-n7}p, drop &index, w &[YmNy@=<&.WV0/T, , H@'8c7%* 2=<[X., , pidi, (k8z, Y9xV5D0,LK-}ZO)", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.3291016900199226
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("DN@#^\"6J[sJWf");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "DN@#^\"6J[sJWf";
      stringArray0[1] = "DN@#^\"6J[sJWf";
      stringArray0[2] = "DN@#^\"6J[sJWf";
      stringArray0[3] = "DN@#^\"6J[sJWf";
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM DN@#^\"6J[sJWf WHERE DN@#^\"6J[sJWf = 'DN@#^\"6J[sJWf' AND DN@#^\"6J[sJWf = 'DN@#^\"6J[sJWf' AND DN@#^\"6J[sJWf = 'DN@#^\"6J[sJWf' AND DN@#^\"6J[sJWf = 'DN@#^\"6J[sJWf'", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("QG^c'=TwARAW:", (String[]) null, "Syntax error at the beginning ", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yd;B$qk?dmsNL-n7}p";
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      PredicateList predicateList0 = projectRestrictNode0.restrictionList;
      SelectNode selectNode0 = new SelectNode();
      selectNode0.clearDistinct();
      SelectNode selectNode1 = new SelectNode();
      selectNode1.makeDistinct();
      selectNode0.getWhereSubquerys();
      TernaryOperatorNode ternaryOperatorNode0 = new TernaryOperatorNode();
      TernaryOperatorNode ternaryOperatorNode1 = new TernaryOperatorNode();
      ProjectRestrictNode projectRestrictNode1 = new ProjectRestrictNode();
      DBSchema dBSchema0 = new DBSchema("?U^WCaE-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{yd;B$qk?dmsNL-n7}p", dBSchema0);
      DBDataType dBDataType0 = DBDataType.getInstance(311, "updateBinaryStream");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("{yd;B$qk?dmsNL-n7}p", defaultDBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      BasicUUID basicUUID0 = new BasicUUID();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7a Zso+0x}&P0g";
      stringArray0[1] = "7a Zso+0x}&P0g";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("7a Zso+0x}&P0g", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"7a Zso+0x}&P0g\" FOREIGN KEY (7a Zso+0x}&P0g, 7a Zso+0x}&P0g) REFERENCES null(7a Zso+0x}&P0g, 7a Zso+0x}&P0g)", string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create unique idex";
      stringArray0[1] = "drop materialized vieworg.postgresql.jdbc4.abstractjdbc4blob";
      stringArray0[2] = "drop materialized vieworg.postgresql.jdbc4.abstractjdbc4blob";
      stringArray0[3] = "create unique idex";
      stringArray0[4] = "create unique idex";
      stringArray0[5] = "drop materialized vieworg.postgresql.jdbc4.abstractjdbc4blob";
      stringArray0[5] = "create unique idex";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop materialized vieworg.postgresql.jdbc4.abstractjdbc4blob", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp();
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("w &[YmNy@=<&.WV0/T");
      stringReader0.skip(2545L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("-=,t> xiI4]C(");
      defaultDBTable0.getIndex("Illegal column type format: ");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "create tablenosettings";
      stringArray0[1] = "create tablenosettings";
      stringArray0[2] = "-=,t> xiI4]C(";
      stringArray0[3] = "-=,t> xiI4]C(";
      stringArray0[4] = "w &[YmNy@=<&.WV0/T";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create tablenosettings", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp();
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.8067548537792828
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yqB$qk?dmsN-n7}p";
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile((File) null, "{yqB$qk?dmsN-n7}p");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      mockPrintStream0.checkError();
      Locale locale0 = Locale.TAIWAN;
      mockPrintStream0.println(639L);
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "{yqB$qk?dmsN-n7}p", (Object[]) stringArray0);
      locale0.getUnicodeLocaleKeys();
      mockPrintStream0.append((CharSequence) "{yqB$qk?dmsN-n7}p");
      mockPrintStream0.println(2819.4907F);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      mockPrintWriter0.print(true);
      mockPrintWriter0.print(309.7);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{yqB$qk?dmsN-n7}p");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "{yqB$qk?dmsN-n7}p", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("^;wR-6j`2!4", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(dBTable0.getDoc());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      System.setCurrentTimeMillis((-553L));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UNIQUE ";
      stringArray0[1] = "!noKU(<;I@m3\"-N";
      stringArray0[2] = "!noKU(<;I@m3\"-N";
      stringArray0[3] = "!noKU(<;I@m3\"-N";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "!noKU(<;I@m3\"-N", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("UNIQUE (UNIQUE , !noKU(<;I@m3\"-N, !noKU(<;I@m3\"-N, !noKU(<;I@m3\"-N)", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = "NOSETTINGS";
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "calldelete";
      SQLUtil.renderColumnNames(stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "calldelete";
      stringArray1[1] = "calldelete";
      stringArray1[2] = "calldelete";
      stringArray1[3] = "calldelete";
      stringArray1[4] = "^YYCS&g%>{r*;D!Cm";
      stringArray1[5] = "(calldelete)";
      stringArray1[6] = "calldelete";
      stringArray1[7] = "calldelete";
      String[] stringArray2 = new String[1];
      stringArray2[0] = "calldelete";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("calldelete", stringArray1, "^YYCS&g%>{r*;D!Cm", "G8yD*i;odM", stringArray2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.3321387202435484
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "order";
      String string0 = SQLUtil.join("order", "order", stringArray0, stringArray0[3], "#V#.Am@0 W!", stringArray0);
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      System.setCurrentTimeMillis(0L);
      Random.setNextRandom(95);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "#V#.Am@0 W!";
      stringArray1[1] = "#V#.Am@0 W!";
      stringArray1[2] = "order join null as #V#.Am@0 W! on order.order = #V#.Am@0 W!.order and order.null = #V#.Am@0 W!.null and order.null = #V#.Am@0 W!.null and order.null = #V#.Am@0 W!.null";
      stringArray1[3] = "#V#.Am@0 W!";
      stringArray1[4] = "#V#.Am@0 W!";
      stringArray1[5] = "order";
      stringArray1[6] = "#V#.Am@0 W!";
      stringArray1[7] = "order";
      stringArray1[8] = "#V#.Am@0 W!";
      SQLUtil.innerJoin("order", stringArray0, "UNIQUE ", "order join null as #V#.Am@0 W! on order.order = #V#.Am@0 W!.order and order.null = #V#.Am@0 W!.null and order.null = #V#.Am@0 W!.null and order.null = #V#.Am@0 W!.null", stringArray1);
      String string1 = SQLUtil.renderColumnListWithTableName(")QcKLcs'yLt>CsN`f5h", stringArray1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "XJdi";
      stringArray0[4] = "w &[YmNy@=<&.WV0/T";
      stringArray0[5] = "w &[YmNy@=<&.WV0/T";
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("H@'8c7%* 2=<[X.", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer.divideUnsigned((-376), 350);
      String string0 = "&(*\"MLZteZ!\\u&";
      String[] stringArray0 = new String[2];
      stringArray0[0] = "08";
      stringArray0[1] = string0;
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DBDataType.getInstance(350, string0);
      Integer integer0 = new Integer((-70107288));
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.3623809562893805
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("08");
      Integer.divideUnsigned((-376), 350);
      String string0 = "&(*\"MLZteZ!\\u&";
      String[] stringArray0 = new String[2];
      stringArray0[1] = "08";
      stringArray0[1] = string0;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "(", true, stringArray0);
      dBPrimaryKeyConstraint0.setTable(defaultDBTable0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.isIdentical(dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint1.equals("08");
      dBPrimaryKeyConstraint1.setName("08");
      dBPrimaryKeyConstraint1.setDoc("08");
      dBPrimaryKeyConstraint1.toString();
      String string1 = dBPrimaryKeyConstraint1.toString();
      assertEquals("CONSTRAINT 08 PRIMARY KEY (, &(*\"MLZteZ!\\u&)", string1);
      
      String string2 = SQLUtil.normalize(stringArray0[1], true);
      assertEquals("& (* \"MLZteZ!u&\"", string2);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "c");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(" REFERENCES ");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition(" REFERENCES ", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder1, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.8688245196701632
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{yqB$qk?dmsN-n7}p";
      stringArray0[1] = "drop &index";
      stringArray0[2] = "w &[YmNy@=<&.WV0/T";
      stringArray0[7] = "geG6(dvxI|>?#jx}Y";
      stringArray0[4] = "H@'Pc7%* 2w<[X.";
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("s?~o!", true, "NEXT", "pidi");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT s?~o! CHECK pidi", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      SQLUtil.typeAndName((DBObject) null);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-75);
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte) (-114);
      byteArray0[3] = (byte) (-78);
      byteArray0[4] = (byte) (-8);
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)47;
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp3.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp4 = new DatabaseParameterBufferImp();
      System.setCurrentTimeMillis(2423L);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "(";
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVAR1.deepCopy();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = "execute";
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      MockFile mockFile0 = new MockFile((File) null, "N-7[:DtP9BDRey");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Locale locale0 = Locale.TAIWAN;
      Object[] objectArray0 = new Object[0];
      PrintStream printStream0 = mockPrintStream0.printf(locale0, "N-7[:DtP9BDRey", objectArray0);
      locale0.getUnicodeLocaleKeys();
      printStream0.append((CharSequence) "N-7[:DtP9BDRey");
      mockPrintStream0.println(2819.4907F);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(printStream0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "create materialized view");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("`auF", stringArray0);
      Random.setNextRandom(97);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp1 = new DatabaseParameterBufferImp();
      DatabaseParameterBufferImp databaseParameterBufferImp2 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp1.removeExtensionParams();
      DatabaseParameterBufferImp databaseParameterBufferImp3 = new DatabaseParameterBufferImp();
      System.setCurrentTimeMillis(493L);
      System.setCurrentTimeMillis(912L);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "XJdi";
      stringArray0[1] = "&S8N}Lw=Jl";
      stringArray0[2] = "drop &index";
      stringArray0[4] = "w &[YmNy@=<&.WV0/T";
      stringArray0[5] = "XJdi";
      stringArray0[6] = "H@'8c7%* 2=<[X.";
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) "w &[YmNy@=<&.WV0/T";
      objectArray0[1] = (Object) "drop &index";
      objectArray0[2] = (Object) "Y9xV5D0,LK-}ZO";
      objectArray0[3] = (Object) "H@'8c7%* 2=<[X.";
      objectArray0[4] = (Object) "Y9xV5D0,LK-}ZO";
      objectArray0[5] = (Object) "ge6(dvxI|>?#jx}Y";
      objectArray0[6] = (Object) stringArray0[3];
      String string0 = SQLUtil.renderValue("XJdi");
      assertEquals("'XJdi'", string0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Integer integer0 = RawTransaction.ABORT;
      Integer.remainderUnsigned((-727), 798);
      String string0 = SQLUtil.renderValue(integer0);
      assertEquals("1", string0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("(");
      tableContainer0.getTables(true);
      tableContainer0.getTable("(");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("TXn8#=z;c{Fc>47%", (DBTable) null, (-2451), "TXn8#=z;c{Fc>47%");
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      GDSType.getType("(");
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      SQLUtil.isDDL("create table ");
      Random.setNextRandom(580);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      SQLUtil.isDDL("{exec");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("{exec");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "{exec";
      stringArray0[1] = "{exec";
      stringArray0[2] = "{exec";
      stringArray0[0] = "exec";
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection((FBManagedConnection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "Iv)7(NB;;,\"c";
      stringArray0[2] = "Iv)7(NB;;,\"c";
      SQLUtil.normalize("Iv)7(NB;;,\"c", false);
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      UserType userType0 = new UserType();
      Locale locale0 = Locale.PRC;
      Calendar calendar0 = MockCalendar.getInstance(locale0);
      try { 
        userType0.getTime(calendar0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // An attempt was made to get a data value of type 'java.sql.Time' from a data value of type 'JAVA_OBJECT'.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[10];
      stringArray0[0] = "(";
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVAR1.deepCopy();
      BasicUUID basicUUID0 = new BasicUUID();
      String string0 = SQLUtil.normalize("<u1\u0001kxy2?*LF~=8&", false);
      assertEquals("< u1 \u0001 kxy2 ? * LF ~ = 8 &", string0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog("alter materialized view", (Database) null);
      String string0 = SQLUtil.ownerDotComponent(dBCatalog0);
      assertEquals("alter materialized view", string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      Boolean boolean0 = Boolean.FALSE;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(3030, 3030);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.sval = "9iN";
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(23037);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.commentChar((-2574));
      streamTokenizer1.quoteChar((-4));
      stringReader0.reset();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.whitespaceChars((-4), 1385);
      streamTokenizer1.sval = "9iN";
      streamTokenizer1.whitespaceChars(23037, 260);
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.174003403734852
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = Integer.toUnsignedString(65);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" AND ");
      Integer.divideUnsigned(65, 2);
      String string1 = "&(*\"MLZteZ!\\u&";
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "*Kfh.NS", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(string1, true, dBPrimaryKeyConstraint0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      dBPrimaryKeyConstraint1.setDoc(string1);
      dBPrimaryKeyConstraint1.toString();
      dBPrimaryKeyConstraint0.toString();
      String string2 = SQLUtil.normalize("", true);
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "XJdi";
      stringArray0[1] = "&S8N}Lw=Jl";
      stringArray0[2] = "drop &index";
      stringArray0[4] = "w &[YmNy@=<&.WV0/T";
      stringArray0[5] = "w &[YmNy@=<&.WV0/T";
      stringArray0[6] = "H@'8c7%* 2=<[X.";
      Object[] objectArray0 = new Object[18];
      objectArray0[0] = (Object) "w &[YmNy@=<&.WV0/T";
      objectArray0[1] = (Object) "drop &index";
      objectArray0[2] = (Object) "Y9xV5D0,LK-}ZO";
      objectArray0[3] = (Object) "H@'8c7%* 2=<[X.";
      objectArray0[4] = (Object) "Y9xV5D0,LK-}ZO";
      objectArray0[5] = (Object) "ge6(dvxI|>?#jx}Y";
      objectArray0[6] = (Object) stringArray0[3];
      String string0 = SQLUtil.normalize("w &[YmNy@=<&.WV0/T", true);
      assertEquals("w & [ YmNy @ = < &.WV0 / T", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLUtil.normalize("/+')+<HB=zu$0-%.{G", false);
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      InsertNode insertNode0 = new InsertNode();
      ResultColumnList resultColumnList0 = insertNode0.targetColumnList;
      ProjectRestrictNode projectRestrictNode0 = new ProjectRestrictNode();
      PredicateList predicateList0 = projectRestrictNode0.restrictionList;
      SelectNode selectNode0 = new SelectNode();
      selectNode0.getSelectSubquerys();
      GroupByList groupByList0 = new GroupByList();
      TernaryOperatorNode ternaryOperatorNode0 = new TernaryOperatorNode();
      fromVTI1.flatten((ResultColumnList) null, (PredicateList) null, (SubqueryList) null, groupByList0, ternaryOperatorNode0);
      // Undeclared exception!
      try { 
        fromVTI0.bindVTITables((FromList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      MockPrintStream mockPrintStream0 = new MockPrintStream("(");
      mockPrintStream0.println(32767.0F);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintStream0);
      Locale locale0 = Locale.UK;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) locale0;
      objectArray0[1] = (Object) locale0;
      locale0.getUnicodeLocaleKeys();
      objectArray0[2] = objectArray0[1];
      mockPrintWriter1.printf(locale0, "(", objectArray0);
      mockPrintWriter1.print(3755.3588);
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.substituteMarkers("(", "1j=-\n4t", "(");
      GDSType gDSType0 = GDSType.getType("<**_\"6 %.6[QO");
      assertNull(gDSType0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      StringReader stringReader0 = new StringReader("yxt@tr/67VlZOykMem");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) " NULL");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition(" NULL", stringBuilder1);
      StringBuilder stringBuilder3 = stringBuilder2.append(1711);
      StringBuilder stringBuilder4 = stringBuilder3.append((CharSequence) stringBuilder2);
      char[] charArray0 = new char[1];
      charArray0[0] = 'F';
      // Undeclared exception!
      try { 
        stringBuilder4.append(charArray0, 1711, (-826));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.1495747713671385
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "#jQl1a)PJgSn";
      stringArray0[1] = "RDB$VIEW_RELATIONS";
      stringArray0[2] = "/d}Ed}XV{";
      stringArray0[3] = "4)'r6__";
      stringArray0[4] = "constraint";
      stringArray0[5] = "drop materialized viewupdate";
      stringArray0[6] = "&fp1_)1<.b8`~Mv=:";
      stringArray0[7] = "\u0001\u01C2";
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "4)'r6__";
      objectArray0[1] = (Object) "#jQl1a)PJgSn";
      objectArray0[2] = (Object) "RDB$VIEW_RELATIONS";
      objectArray0[3] = (Object) "#jQl1a)PJgSn";
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) "&fp1_)1<.b8`~Mv=:";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "XJdi";
      stringArray0[1] = "Y9xV5D0,LK-}ZO";
      System.setCurrentTimeMillis(0L);
      boolean boolean0 = SQLUtil.isProcedureCall("Y9xV5D0,LK-}ZO");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      String[] stringArray0 = new String[7];
      String string0 = "alter tablecreate nique index";
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      Boolean boolean0 = Boolean.FALSE;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(3030, 3030);
      streamTokenizer0.ttype = (-2991);
      stringReader0.read();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(23037);
      streamTokenizer1.quoteChar((-2991));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.commentChar((-2574));
      streamTokenizer0.wordChars((-2574), 52);
      streamTokenizer1.quoteChar((-2991));
      stringReader0.reset();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.sval = null;
      streamTokenizer1.whitespaceChars(23037, 260);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = " join ";
      stringArray0[1] = "YiFN+,Iu)|0<N";
      stringArray0[2] = "YiFN+,Iu)|0<N";
      stringArray0[3] = "YiFN+,Iu)|0<N";
      stringArray0[4] = "alter tablenosettin";
      stringArray0[5] = "YiFN+,Iu)|0<N";
      stringArray0[6] = "YiFN+,Iu)|0<N";
      stringArray0[7] = "YiFN+,Iu)|0<N";
      String string0 = SQLUtil.leftJoin("YiFN+,Iu)|0<N", stringArray0, "8x[%ioy9[nac", "Rqj;0z9_", stringArray0);
      assertEquals("left join 8x[%ioy9[nac as Rqj;0z9_ on YiFN+,Iu)|0<N. join  = Rqj;0z9_. join  and YiFN+,Iu)|0<N.YiFN+,Iu)|0<N = Rqj;0z9_.YiFN+,Iu)|0<N and YiFN+,Iu)|0<N.YiFN+,Iu)|0<N = Rqj;0z9_.YiFN+,Iu)|0<N and YiFN+,Iu)|0<N.YiFN+,Iu)|0<N = Rqj;0z9_.YiFN+,Iu)|0<N and YiFN+,Iu)|0<N.alter tablenosettin = Rqj;0z9_.alter tablenosettin and YiFN+,Iu)|0<N.YiFN+,Iu)|0<N = Rqj;0z9_.YiFN+,Iu)|0<N and YiFN+,Iu)|0<N.YiFN+,Iu)|0<N = Rqj;0z9_.YiFN+,Iu)|0<N and YiFN+,Iu)|0<N.YiFN+,Iu)|0<N = Rqj;0z9_.YiFN+,Iu)|0<N", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SQLUtil.mutatesStructure(" REFERENCES ");
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      int[] intArray0 = new int[5];
      intArray0[0] = 40;
      intArray0[1] = 40;
      intArray0[2] = 40;
      intArray0[3] = 40;
      intArray0[4] = (-3743);
      Properties properties0 = new Properties();
      RealTableScanStatistics realTableScanStatistics0 = new RealTableScanStatistics((-1618), (-89213069), 42, (-3743), (-1618), 36L, (-1618), 413, "select into", "inner", "inner", false, "{k6k&#,n+$A[", properties0, "0)h$m'", "isNullable", "@;|Qic89jTq\"B}pi7F=", " REFERENCES ", 40, true, (-1.0), 36L);
      FormatableProperties formatableProperties0 = realTableScanStatistics0.scanProperties;
      RealDistinctScanStatistics realDistinctScanStatistics0 = new RealDistinctScanStatistics((-1618), (-1618), 40, 36L, 40, 4L, 0L, (-1618), " REFERENCES ", " REFERENCES ", false, (-1618), intArray0, ">nvh5K", "{k6k&#,n+$A[", formatableProperties0, "inner", "delete(gk8z", "lAJ\"l!&A@(|X&^a*s", "#6Zx0|1T", 829.100212008219, 3.98);
      FormatableProperties formatableProperties1 = realDistinctScanStatistics0.scanProperties;
      // Undeclared exception!
      try { 
        concurrentXactFactory0.boot(false, formatableProperties1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.store.raw.xact.XactFactory", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("NOSETTINGS");
      Boolean boolean0 = new Boolean("NOSETTINGS");
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertEquals(0, isc_stmt_handle_impl0.size());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      Boolean boolean0 = Boolean.FALSE;
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(3030, 3030);
      streamTokenizer0.ttype = (-2991);
      stringReader0.read();
      streamTokenizer0.ttype = 23001;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(23001);
      streamTokenizer1.quoteChar(23001);
      streamTokenizer1.commentChar((-2574));
      streamTokenizer0.wordChars((-2574), 52);
      streamTokenizer1.quoteChar(23001);
      stringReader0.reset();
      streamTokenizer1.resetSyntax();
      streamTokenizer1.sval = null;
      streamTokenizer1.whitespaceChars(23001, 234);
      char[] charArray0 = new char[3];
      charArray0[0] = '6';
      streamTokenizer1.slashSlashComments(false);
      charArray0[1] = '\\';
      charArray0[2] = 'h';
      int int0 = new Character('\\');
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }
}
