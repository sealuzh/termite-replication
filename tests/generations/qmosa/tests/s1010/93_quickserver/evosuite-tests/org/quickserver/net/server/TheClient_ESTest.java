/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:04:29 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.net.InetAddress;
import java.net.Proxy;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.DBObjectPoolConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServerConfig quickServerConfig0 = new QuickServerConfig();
      quickServer0.initService(quickServerConfig0);
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      theClient0.setClientEvent((ClientEvent) null);
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      quickServer0.setRawCommunicationMaxLength((-17));
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getAuthenticator();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      QuickServer quickServer1 = new QuickServer();
      quickServer1.getSecure();
      quickServer0.configQuickServer();
      QuickServerConfig quickServerConfig0 = quickServer1.getConfig();
      quickServer0.configQuickServer(quickServerConfig0);
      quickServer0.setRawCommunicationMaxLength(0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      theClient0.getServer();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      dBObjectPoolConfig0.toXML("fso&tIC");
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      quickServer0.setRawCommunicationMaxLength((-17));
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.48462116244288
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("{#<Tf");
      quickServer0.setClientBinaryHandler("{#<Tf");
      quickServer0.setMaxAuthTry(0);
      quickServer0.run();
      quickServer0.setSecurityManagerClass("{#<Tf");
      theClient0.setServer(quickServer0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.678706058817701
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientBinaryHandler();
      Proxy.Type proxy_Type0 = Proxy.Type.HTTP;
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 1);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress0.getHostName();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.bind(mockInetSocketAddress0);
      mockSocket0.getPort();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      theClient0.setSocket(mockSocket0);
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      System.setCurrentTimeMillis((-1741L));
      theClient0.getSocket();
      mockInetSocketAddress0.getHostName();
      theClient0.getSocket();
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress0.getHostName();
      mockInetSocketAddress0.getHostName();
      theClient0.getAuthenticator();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientObjectHandler();
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket("192.168.1.42", 1);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@339ba795
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      quickServer0.setRawCommunicationMaxLength(0);
      theClient0.setServer(quickServer0);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[7];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "x$J.)i");
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)97;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)97;
      byteArray0[4] = (byte)125;
      byteArray0[5] = (byte) (-124);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.getSendBufferSize();
      mockSocket0.getSendBufferSize();
      mockSocket0.close();
      theClient0.setSocket(mockSocket0);
      theClient0.getClientExtendedEventHandler();
      theClient0.getSocketChannel();
      theClient0.getServer();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientObjectHandler();
      MockSocket mockSocket1 = new MockSocket();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("Setting Type:", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)32;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)31;
      byteArray0[6] = (byte)120;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      CommandHandler commandHandler0 = new CommandHandler();
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry((-2480));
      int int0 = theClient0.getMaxAuthTry();
      assertEquals((-2480), int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.getClientData();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.toString();
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      theClient0.getClientObjectHandler();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClientEvent clientEvent0 = ClientEvent.MAX_CON;
      CommandHandler commandHandler0 = new CommandHandler();
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler1 = new CommandHandler();
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      commandHandler1.closingConnection(blockingClientHandler0);
      assertEquals("<ClientHandler-Pool#-1-ID:1>", blockingClientHandler0.getName());
      
      theClient0.setClientCommandHandler(commandHandler1);
      theClient0.getClientObjectHandler();
      theClient0.getClientCommandHandler();
      TheClient theClient1 = new TheClient();
      theClient1.getAuthenticator();
      TheClient theClient2 = new TheClient();
      ClientEvent clientEvent1 = ClientEvent.LOST_CON;
      TheClient theClient3 = new TheClient();
      theClient3.setClientObjectHandler((ClientObjectHandler) null);
      theClient3.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient3.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient1.getClientBinaryHandler();
      theClient2.getClientBinaryHandler();
      assertFalse(theClient2.getTrusted());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.192898685950695
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)53;
      byteArray0[4] = (byte)69;
      byteArray0[5] = (byte)111;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientEvent((ClientEvent) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      theClient0.getClientEvent();
      theClient0.getClientEventHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientEventHandler();
      theClient0.getClientData();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      theClient0.getClientExtendedEventHandler();
      MockSocket mockSocket0 = new MockSocket();
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.setTimeout((-3566));
      theClient1.getTimeout();
      theClient0.getClientWriteHandler();
      theClient1.getClientBinaryHandler();
      assertEquals((-3566), theClient1.getTimeout());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.setMaxAuthTry(3182);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(3182, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3812808488052557
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setMaxAuthTryMsg("");
      theClient0.setMaxAuthTry(0);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientBinaryHandler();
      theClient1.getAuthenticator();
      theClient1.setAuthenticator((Authenticator) null);
      theClient1.getClientWriteHandler();
      theClient1.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientEventHandler();
      theClient1.getClientWriteHandler();
      theClient1.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setTimeoutMsg("a9$b~`EbK");
      theClient0.getClientBinaryHandler();
      theClient0.setMaxAuthTry(1007);
      theClient1.getAuthenticator();
      theClient0.setTimeoutMsg("`[ZTaPl2@lr:uD^[gW");
      theClient0.getMaxAuthTryMsg();
      theClient1.getClientWriteHandler();
      theClient1.getClientObjectHandler();
      theClient1.getSocket();
      theClient0.getClientExtendedEventHandler();
      assertEquals(1007, theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertFalse(theClient0.getTrusted());
      
      theClient0.setTrusted(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)124;
      byteArray0[1] = (byte)124;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      byteArray0[2] = (byte)31;
      byteArray0[3] = (byte)31;
      boolean boolean0 = theClient0.getTrusted();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientEventHandler(commandHandler0);
      ClientEventHandler clientEventHandler0 = theClient0.getClientEventHandler();
      theClient0.setClientEventHandler(clientEventHandler0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)32;
      byteArray0[1] = (byte)124;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)32;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)124;
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte) (-17);
      byteArray0[8] = (byte)22;
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("w6+BqK &o2&Ie17TD");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.196939089991099
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(2048);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)125;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)125;
      byteArray0[4] = (byte)1;
      TheClient theClient1 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient1.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTimeout();
      theClient1.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.getClientEvent();
      theClient1.getClientEvent();
      theClient1.getClientEventHandler();
      theClient1.getClientBinaryHandler();
      theClient0.getClientCommandHandler();
      theClient1.getClientWriteHandler();
      theClient0.toString();
      theClient0.getClientEventHandler();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      theClient1.getClientData();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      theClient1.getClientExtendedEventHandler();
      theClient0.getClientBinaryHandler();
      assertEquals(2048, theClient0.getTimeout());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientCommandHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientBinaryHandler();
      boolean boolean0 = theClient0.getTrusted();
      assertFalse(boolean0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      theClient0.setMaxConnectionMsg("");
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getMaxConnectionMsg();
      theClient0.getClientObjectHandler();
      theClient0.getClientWriteHandler();
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      TheClient theClient0 = new TheClient();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.setMaxConnectionMsg("^'hwDu;R'T[LiKX%Tk");
      theClient0.getMaxConnectionMsg();
      theClient1.getClientWriteHandler();
      theClient1.getClientBinaryHandler();
      theClient1.getClientExtendedEventHandler();
      assertFalse(theClient1.getTrusted());
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTry();
      theClient0.setMaxAuthTryMsg("59hYQs(8Gl7AGs");
      theClient0.getMaxConnectionMsg();
      theClient0.getMaxAuthTryMsg();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      Data data0 = new Data();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      theClient0.setMaxAuthTry((byte)0);
      byteArray0[3] = (byte)0;
      data0.setUsername("59hYQs(8Gl7AGs");
      data0.setPassword(byteArray0);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)122;
      theClient0.setTimeoutMsg("59hYQs(8Gl7AGs");
      byteArray0[7] = (byte) (-15);
      data0.setPassword(byteArray0);
      theClient0.setClientData(data0);
      assertFalse(theClient0.getTrusted());
      assertEquals(0, theClient0.getMaxAuthTry());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3244414142316545
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      ClientEvent clientEvent0 = ClientEvent.LOST_CON;
      theClient0.setClientEvent(clientEvent0);
      theClient0.setMaxConnectionMsg("");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.toString();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientAuthenticationHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTimeout();
      theClient0.setMaxConnectionMsg("");
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      assertTrue(theClient0.getCommunicationLogging());
      
      theClient0.setCommunicationLogging(false);
      theClient0.setTimeoutMsg((String) null);
      theClient0.getClientWriteHandler();
      theClient0.getCommunicationLogging();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.getClientWriteHandler();
      theClient0.setTimeoutMsg("");
      theClient0.getClientEventHandler();
      theClient0.setMaxConnectionMsg((String) null);
      theClient0.toString();
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      theClient0.getTimeoutMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setSocketChannel((SocketChannel) null);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      ClientEvent clientEvent0 = ClientEvent.MAX_CON_BLOCKING;
      ClientEvent clientEvent1 = ClientEvent.ACCEPT;
      assertEquals("(ClientEvent-Accept)", clientEvent1.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      CommandHandler commandHandler0 = new CommandHandler();
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.setClientAuthenticationHandler(authenticator0);
      ClientAuthenticationHandler clientAuthenticationHandler0 = theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler(clientAuthenticationHandler0);
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TheClient theClient0 = new TheClient();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)0;
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      MockSocket mockSocket0 = new MockSocket();
      InetAddress inetAddress0 = mockSocket0.getLocalAddress();
      mockSocket0.setSoTimeout(1);
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(125);
      mockSocket0.bind(mockInetSocketAddress0);
      Integer integer0 = new Integer(1922);
      MockSocket mockSocket1 = null;
      try {
        mockSocket1 = new MockSocket(inetAddress0, 0, true);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Remote address/port is not opened: org.evosuite.runtime.vnet.EndPointInfo@339ba776
         //
         verifyException("org.evosuite.runtime.vnet.VirtualNetwork", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer();
      DBObjectPoolConfig dBObjectPoolConfig0 = new DBObjectPoolConfig();
      quickServer0.setDBObjectPoolConfig(dBObjectPoolConfig0);
      theClient0.setServer(quickServer0);
      QuickServer quickServer1 = new QuickServer();
      theClient0.getServer();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }
}
