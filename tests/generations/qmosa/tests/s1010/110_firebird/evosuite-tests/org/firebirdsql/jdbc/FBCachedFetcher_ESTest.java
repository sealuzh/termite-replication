/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 10:03:02 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.chrono.Chronology;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.concurrent.Callable;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingQueue;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Consumer;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.IscTrHandle;
import org.firebirdsql.gds.XSQLDA;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.NativeGDSImpl;
import org.firebirdsql.gds.impl.jni.isc_blob_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_db_handle_impl;
import org.firebirdsql.gds.impl.jni.isc_tr_handle_impl;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.AbstractStatement;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.ensureCapacity(298);
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_stmt_handle_impl0.ensureCapacity(6);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.getDbHandle();
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_stmt_handle_impl1.unregisterTransaction();
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl1);
      isc_stmt_handle_impl0.ensureCapacity(4);
      isc_tr_handle_impl0.forgetResultSets();
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      Subject subject0 = new Subject();
      Class<byte[][]> class0 = byte[][].class;
      Set<byte[][]> set0 = subject0.getPublicCredentials(class0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>(set0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize((-3180));
      fBCachedFetcher0.relative(335544418);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals((-3180), int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.196383935410301
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      linkedList0.add((byte[][]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      javaGDSImpl0.createIscDbHandle();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.deepCopy();
      databaseParameterBufferImp0.deepCopy();
      org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp databaseParameterBufferImp1 = new org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp();
      databaseParameterBufferImp1.deepCopy();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingQueue<Delayed> linkedBlockingQueue0 = new LinkedBlockingQueue<Delayed>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Error onerting to short. ");
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread[] threadArray0 = new Thread[8];
      threadArray0[5] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[3] = (Thread) mockThread0;
      byte[][] byteArray0 = new byte[8][6];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-105);
      byteArray2[1] = (byte)1;
      byteArray2[2] = (byte) (-15);
      byteArray2[3] = (byte)107;
      byteArray2[4] = (byte) (-83);
      byteArray2[5] = (byte)119;
      byteArray2[6] = (byte)85;
      byteArray2[7] = (byte) (-23);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-23);
      byteArray3[1] = (byte)13;
      byteArray3[2] = (byte) (-23);
      byteArray3[3] = (byte) (-105);
      byteArray3[4] = (byte) (-23);
      byteArray3[5] = (byte) (-83);
      byteArray3[6] = (byte) (-105);
      byteArray3[7] = (byte)119;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[3];
      byteArray4[0] = (byte)1;
      byteArray4[1] = (byte)85;
      byteArray4[2] = (byte) (-15);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte) (-83);
      byteArray5[1] = (byte)1;
      byteArray5[2] = (byte)1;
      byteArray5[3] = (byte)119;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte)107;
      byteArray6[1] = (byte)85;
      byteArray6[2] = (byte) (-105);
      byteArray6[3] = (byte) (-15);
      byteArray6[4] = (byte) (-83);
      byteArray6[5] = (byte)13;
      byteArray6[6] = (byte)119;
      byteArray6[7] = (byte)119;
      byteArray6[8] = (byte)85;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      byteArray7[0] = (byte) (-83);
      byteArray7[1] = (byte) (-15);
      byteArray7[2] = (byte)107;
      byteArray7[3] = (byte)85;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[7];
      byteArray8[0] = (byte)85;
      byteArray8[1] = (byte)119;
      byteArray8[2] = (byte)13;
      byteArray8[3] = (byte) (-83);
      byteArray8[4] = (byte) (-39);
      byteArray8[5] = (byte)85;
      byteArray8[6] = (byte)119;
      byteArray0[7] = byteArray8;
      linkedList0.addLast(byteArray0);
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      mockThread0.run();
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      MockThread.enumerate(threadArray0);
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      MockThread.interrupted();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(8);
      scheduledThreadPoolExecutor0.isShutdown();
      MockThread mockThread2 = new MockThread(mockThread0, "_^+)_Esw;");
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      threadPoolExecutor_DiscardOldestPolicy0.rejectedExecution(threadArray0[3], scheduledThreadPoolExecutor0);
      MockThread.getAllStackTraces();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(1, threadFactory1);
      ThreadFactory threadFactory2 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor2 = new ScheduledThreadPoolExecutor(8, threadFactory2, threadPoolExecutor_DiscardOldestPolicy0);
      MockThread mockThread3 = new MockThread();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.214173924777526
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.isAfterLast();
      org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl0 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      XSQLDA xSQLDA0 = null;
      org.firebirdsql.gds.impl.wire.isc_tr_handle_impl isc_tr_handle_impl1 = new org.firebirdsql.gds.impl.wire.isc_tr_handle_impl();
      String string0 = "o#51kE]7Roq-jS5nD";
      String string1 = "boO%7@1rEr\\CFKV`+Z";
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[0][5];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      linkedList0.add((byte[][]) null);
      int int0 = 454;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.835161968971906
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate.isEqual((Object) linkedList0);
      predicate2.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.and(predicate4);
      predicate6.or(predicate5);
      predicate5.test(predicate6);
      predicate6.or(predicate4);
      linkedList0.removeIf(predicate3);
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet1);
      fBCachedFetcher1.absolute(100);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.relative(100);
      fBCachedFetcher1.isFirst();
      fBCachedFetcher0.updateRow((byte[][]) null);
      FBCachedFetcher fBCachedFetcher2 = new FBCachedFetcher(linkedList0, fBResultSet1);
      fBCachedFetcher2.next();
      fBCachedFetcher1.first();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5897742013802487
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.last();
      fBCachedFetcher0.isEmpty();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.relative(620);
      fBCachedFetcher0.relative(620);
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet1);
      fBCachedFetcher1.last();
      fBCachedFetcher1.previous();
      fBCachedFetcher1.absolute((-1881));
      fBCachedFetcher0.relative(533);
      fBCachedFetcher0.setFetchSize(1004);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertEquals(1004, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][3];
      linkedList0.add(byteArray0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any(byte[][].class) , any(byte[][].class));
      linkedList0.add(byteArray0);
      linkedList0.sort(comparator0);
      linkedList0.add(byteArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator1).compare(any() , any());
      linkedList0.sort(comparator1);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add(byteArray0);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator2).compare(any() , any());
      linkedList0.sort(comparator2);
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.790494521214041
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate2.and(predicate5);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate3.or(predicate1);
      predicate3.test(jMXPrincipal0);
      predicate0.or(predicate6);
      linkedList0.removeIf(predicate7);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.absolute(100);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.isFirst();
      byte[][] byteArray0 = new byte[0][3];
      fBCachedFetcher0.updateRow(byteArray0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.first();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7127748099275872
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate2.and(predicate5);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate3.or(predicate1);
      predicate3.test(jMXPrincipal0);
      predicate0.or(predicate6);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.absolute(100);
      fBCachedFetcher0.insertRow((byte[][]) null);
      byte[][] byteArray0 = new byte[0][3];
      fBCachedFetcher0.updateRow(byteArray0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.previous();
      System.setCurrentTimeMillis(112L);
      boolean boolean0 = fBCachedFetcher0.next();
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.2218396677739918
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedBlockingQueue<Delayed> linkedBlockingQueue0 = new LinkedBlockingQueue<Delayed>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3064194280957784
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.last();
      fBCachedFetcher0.absolute(1856);
      fBCachedFetcher0.relative(620);
      fBCachedFetcher0.relative((-875));
      FBResultSet fBResultSet1 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBResultSet fBResultSet2 = new FBResultSet(fBResultSet1.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet2);
      fBCachedFetcher0.last();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.absolute(1856);
      fBCachedFetcher1.relative((-3096));
      fBCachedFetcher0.setFetchSize((-1335));
      assertEquals((-1335), fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = fBCachedFetcher1.isBeforeFirst();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7754337976947767
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate0.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate.isEqual((Object) predicate2);
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("]|avk>'KR");
      Predicate.isEqual((Object) jMXPrincipal1);
      predicate5.and(predicate4);
      Predicate.isEqual((Object) "");
      predicate6.and(predicate5);
      Predicate<Object> predicate8 = predicate4.or(predicate1);
      predicate3.negate();
      predicate4.test(jMXPrincipal0);
      predicate0.or(predicate7);
      linkedList0.removeIf(predicate8);
      byte[][] byteArray0 = new byte[1][1];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7561587071244875
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.last();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.last();
      fBCachedFetcher0.absolute(100);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.relative(3020);
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.next();
      boolean boolean0 = fBCachedFetcher0.first();
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean0);
      
      boolean boolean1 = fBCachedFetcher0.absolute(100);
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3207734649811007
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.last();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.last();
      FBResultSet fBResultSet1 = new FBResultSet(fBResultSet0.xsqlvars, linkedList0);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher1.last();
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher1.relative(0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      fBCachedFetcher1.insertRow((byte[][]) null);
      assertTrue(fBCachedFetcher1.isFirst());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.346802200441681
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.updateRow((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      linkedList0.add((byte[][]) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<String> predicate2 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      predicate0.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate.isEqual((Object) predicate2);
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("]|avk>'KR");
      Predicate.isEqual((Object) jMXPrincipal1);
      predicate5.and(predicate4);
      Predicate.isEqual((Object) "");
      predicate6.and(predicate5);
      Predicate<Object> predicate8 = predicate4.or(predicate1);
      predicate3.negate();
      byte[][] byteArray0 = new byte[9][7];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-112);
      byteArray1[1] = (byte)20;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-112);
      byteArray2[1] = (byte)20;
      byteArray2[2] = (byte) (-112);
      byteArray2[3] = (byte)20;
      byteArray2[4] = (byte) (-112);
      byteArray2[5] = (byte) (-112);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-112);
      byteArray3[1] = (byte)20;
      byteArray3[2] = (byte)20;
      byteArray3[3] = (byte)20;
      byteArray3[4] = (byte) (-112);
      byteArray3[5] = (byte)20;
      byteArray3[6] = (byte) (-112);
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[5];
      byteArray4[0] = (byte) (-112);
      byteArray4[1] = (byte)20;
      byteArray4[2] = (byte) (-112);
      byteArray4[3] = (byte)20;
      byteArray4[4] = (byte)94;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte)94;
      byteArray5[1] = (byte)94;
      byteArray5[2] = (byte)83;
      byteArray5[3] = (byte)94;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte) (-112);
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[4];
      byteArray7[0] = (byte)94;
      byteArray7[1] = (byte)20;
      byteArray7[2] = (byte) (-112);
      byteArray7[3] = (byte) (-112);
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[1];
      byteArray8[0] = (byte)94;
      byteArray0[7] = byteArray8;
      byte[] byteArray9 = new byte[3];
      byteArray9[0] = (byte)83;
      byteArray9[1] = (byte)83;
      byteArray9[2] = (byte)83;
      byteArray0[8] = byteArray9;
      linkedList0.add(byteArray0);
      predicate4.test(jMXPrincipal0);
      predicate0.or(predicate7);
      linkedList0.removeIf(predicate8);
      byte[][] byteArray10 = new byte[1][1];
      byte[] byteArray11 = new byte[0];
      byteArray10[0] = byteArray11;
      linkedList0.add(byteArray10);
      linkedList0.sort((Comparator<? super byte[][]>) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("hX#jswxK7X`");
      jMXPrincipal0.getName();
      jMXPrincipal0.equals(linkedList0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("]|avk>'KR");
      Locale locale0 = Locale.JAPANESE;
      Chronology.ofLocale(locale0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      byte[][] byteArray0 = new byte[6][7];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)86;
      byteArray1[4] = (byte) (-46);
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-112);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-112);
      byteArray2[1] = (byte) (-46);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[5] = (byte) (-112);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)100;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte)34;
      byteArray4[2] = (byte)95;
      byteArray4[3] = (byte)100;
      byteArray4[4] = (byte)2;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)100;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)95;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte) (-1);
      byteArray6[1] = (byte) (-1);
      byteArray6[2] = (byte)115;
      byteArray6[3] = (byte)103;
      byteArray0[5] = byteArray6;
      linkedList0.add(byteArray0);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      internalTransactionCoordinator0.getConnection();
      InternalTransactionCoordinator internalTransactionCoordinator1 = new InternalTransactionCoordinator((InternalTransactionCoordinator.AbstractTransactionCoordinator) null);
      internalTransactionCoordinator_MetaDataTransactionCoordinator0.executionStarted((AbstractStatement) null);
      internalTransactionCoordinator0.getConnection();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread mockThread0 = new MockThread("^[*vyD(f1z\"q8t");
      ThreadGroup threadGroup0 = (ThreadGroup)mockThread0.getUncaughtExceptionHandler();
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0);
      MockThread.interrupted();
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(335544468, threadFactory0, threadPoolExecutor_CallerRunsPolicy0);
      MockThread.interrupted();
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.getQueue();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(335544468);
      threadPoolExecutor_CallerRunsPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor1);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor2 = new ScheduledThreadPoolExecutor(335544468, threadFactory1, threadPoolExecutor_CallerRunsPolicy0);
      MockThread.dumpStack();
      scheduledThreadPoolExecutor2.isShutdown();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor2);
      MockThread mockThread2 = new MockThread(threadGroup0, "*LU:Z5V{7y");
      MockThread mockThread3 = new MockThread(mockThread2, "KyE44");
      ThreadFactory threadFactory2 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor3 = new ScheduledThreadPoolExecutor(335544468, threadFactory2);
      ThreadFactory threadFactory3 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor4 = new ScheduledThreadPoolExecutor(335544468, threadFactory3);
      scheduledThreadPoolExecutor3.getCompletedTaskCount();
      MockThread mockThread4 = new MockThread();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread4, scheduledThreadPoolExecutor4);
      ThreadFactory threadFactory4 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor5 = new ScheduledThreadPoolExecutor(123, threadFactory4, threadPoolExecutor_DiscardPolicy0);
      MockThread mockThread5 = new MockThread((ThreadGroup) null, "*LU:Z5Jlk");
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.isLast();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate.isEqual((Object) "");
      predicate5.and(predicate4);
      Predicate<Object> predicate7 = predicate3.or(predicate1);
      predicate3.test(jMXPrincipal0);
      predicate0.or(predicate6);
      linkedList0.removeIf(predicate7);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][1];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      linkedList1.sort((Comparator<? super byte[][]>) null);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.87581752666317
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedBlockingQueue<Delayed> linkedBlockingQueue0 = new LinkedBlockingQueue<Delayed>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.peek();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Thread[] threadArray0 = new Thread[9];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread1;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[3] = (Thread) mockThread1;
      threadArray0[4] = (Thread) mockThread0;
      threadArray0[5] = (Thread) mockThread1;
      threadArray0[6] = (Thread) mockThread0;
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      threadArray0[7] = (Thread) mockThread0;
      threadArray0[8] = (Thread) mockThread1;
      MockThread.enumerate(threadArray0);
      MockThread mockThread2 = new MockThread(mockThread0, "_^+)_Esw;");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "_^+)_Esw;");
      Predicate<Object> predicate1 = predicate0.negate();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<byte[][]> predicate3 = Predicate.isEqual((Object) predicate2);
      Predicate<byte[][]> predicate4 = predicate3.and(predicate2);
      predicate4.negate();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      linkedList0.sort((Comparator<? super byte[][]>) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-762));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.954483383068116
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("hX#jswxK7X`");
      jMXPrincipal0.getName();
      jMXPrincipal0.equals(linkedList0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "");
      JMXPrincipal jMXPrincipal1 = new JMXPrincipal("]|avk>'KR");
      Locale locale0 = Locale.JAPANESE;
      Chronology.ofLocale(locale0);
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      byte[][] byteArray0 = new byte[6][7];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte)100;
      byteArray1[1] = (byte)34;
      byteArray1[2] = (byte)115;
      byteArray1[3] = (byte)86;
      byteArray1[4] = (byte) (-46);
      byteArray1[5] = (byte)95;
      byteArray1[6] = (byte) (-1);
      byteArray1[7] = (byte)0;
      byteArray1[8] = (byte) (-112);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[6];
      byteArray2[0] = (byte) (-112);
      byteArray2[1] = (byte) (-46);
      byteArray2[2] = (byte)0;
      byteArray2[3] = (byte)0;
      byteArray2[4] = (byte)115;
      byteArray2[5] = (byte) (-112);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray3[0] = (byte)100;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[6];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte)34;
      byteArray4[2] = (byte)95;
      byteArray4[3] = (byte)100;
      byteArray4[4] = (byte)2;
      byteArray4[5] = (byte)100;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte)100;
      byteArray5[1] = (byte)0;
      byteArray5[2] = (byte)95;
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[4];
      byteArray6[0] = (byte) (-1);
      byteArray6[1] = (byte) (-1);
      byteArray6[2] = (byte)115;
      byteArray6[3] = (byte)103;
      byteArray0[5] = byteArray6;
      linkedList0.add(byteArray0);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      internalTransactionCoordinator0.getConnection();
      InternalTransactionCoordinator internalTransactionCoordinator1 = new InternalTransactionCoordinator((InternalTransactionCoordinator.AbstractTransactionCoordinator) null);
      internalTransactionCoordinator_MetaDataTransactionCoordinator0.executionStarted((AbstractStatement) null);
      internalTransactionCoordinator0.getConnection();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6004793682383966
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-66);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      GDSType.getType("");
      fBCachedFetcher0.next();
      fBCachedFetcher0.insertRow((byte[][]) null);
      int int0 = fBCachedFetcher0.getRowNum();
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][3];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.add(byteArray0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator1);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.removeRows();
      isc_stmt_handle_impl0.ensureCapacity(298);
      isc_tr_handle_impl isc_tr_handle_impl0 = new isc_tr_handle_impl();
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_stmt_handle_impl0.ensureCapacity(6);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_stmt_handle_impl0.setUpdateCount(5);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.getDbHandle();
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl1 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      isc_stmt_handle_impl1.setRsr_rdb(isc_db_handle_impl0);
      isc_stmt_handle_impl1.unregisterTransaction();
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl1);
      isc_stmt_handle_impl0.ensureCapacity(4);
      isc_tr_handle_impl0.forgetResultSets();
      isc_tr_handle_impl0.registerStatementWithTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      isc_tr_handle_impl0.unregisterStatementFromTransaction(isc_stmt_handle_impl0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((GDSHelper) null, 6, 0, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4679683083845885
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      linkedList0.removeIf(predicate2);
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.last();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.relative(0);
      fBCachedFetcher0.absolute(520);
      fBCachedFetcher0.relative(520);
      fBCachedFetcher0.setFetchSize(520);
      fBCachedFetcher0.getFetchSize();
      boolean boolean0 = fBCachedFetcher0.first();
      assertEquals(520, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9323469378605727
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      LinkedBlockingQueue<Delayed> linkedBlockingQueue0 = new LinkedBlockingQueue<Delayed>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread mockThread0 = new MockThread("You cannot position to the row 0 with absolute() method.");
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = mockThread0.getUncaughtExceptionHandler();
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      MockThread.interrupted();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1972, threadFactory1, threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.isShutdown();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ThreadFactory threadFactory2 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(400, threadFactory2);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor1);
      MockThread mockThread2 = new MockThread();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow((byte[][]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.353711254456056
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      predicate0.and(predicate4);
      predicate0.or(predicate4);
      linkedList0.removeIf(predicate5);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.last();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.absolute(520);
      fBCachedFetcher0.relative((-3096));
      fBCachedFetcher0.setFetchSize(21);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertEquals(21, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.0485627107748057
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      Thread.UncaughtExceptionHandler thread_UncaughtExceptionHandler0 = MockThread.getDefaultUncaughtExceptionHandler();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "Error onerting to short. ");
      mockThread0.setUncaughtExceptionHandler(thread_UncaughtExceptionHandler0);
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread[] threadArray0 = new Thread[8];
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[3] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      threadArray0[1] = (Thread) mockThread0;
      mockThread0.run();
      threadArray0[0] = (Thread) mockThread0;
      threadArray0[2] = (Thread) mockThread0;
      int int0 = MockThread.enumerate(threadArray0);
      assertEquals(1, int0);
      
      MockThread mockThread1 = new MockThread((ThreadGroup) null, mockThread0);
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(8);
      scheduledThreadPoolExecutor0.isShutdown();
      MockThread mockThread2 = new MockThread(mockThread0, "_^+)_Esw;");
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      threadPoolExecutor_DiscardOldestPolicy0.rejectedExecution(threadArray0[3], scheduledThreadPoolExecutor0);
      MockThread.getAllStackTraces();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(1, threadFactory1);
      ThreadFactory threadFactory2 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor2 = new ScheduledThreadPoolExecutor(8, threadFactory2, threadPoolExecutor_DiscardOldestPolicy0);
      MockThread mockThread3 = new MockThread((ThreadGroup) null, "_^+)_Esw;");
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.afterLast();
      fBCachedFetcher0.relative(1);
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][3];
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.add(byteArray0);
      linkedList0.sort(comparator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      boolean boolean1 = fBCachedFetcher0.isLast();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9557135998277697
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.firebirdsql.jdbc.FBCachedFetcher$1", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList1);
      Integer integer0 = new Integer((-4146));
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, fBResultSet0);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      MockThread.getDefaultUncaughtExceptionHandler();
      MockThread.dumpStack();
      MockThread.interrupted();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1972, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.isShutdown();
      scheduledThreadPoolExecutor0.getContinueExistingPeriodicTasksAfterShutdownPolicy();
      MockThread.interrupted();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy1 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy1 = new ThreadPoolExecutor.DiscardPolicy();
      Thread thread0 = MockThread.currentThread();
      threadPoolExecutor_DiscardPolicy1.rejectedExecution(thread0, scheduledThreadPoolExecutor0);
      threadPoolExecutor_DiscardPolicy1.rejectedExecution(thread0, (ThreadPoolExecutor) null);
      threadPoolExecutor_DiscardPolicy1.rejectedExecution(thread0, scheduledThreadPoolExecutor0);
      threadPoolExecutor_DiscardPolicy1.rejectedExecution(thread0, (ThreadPoolExecutor) null);
      ThreadFactory threadFactory1 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.CallerRunsPolicy threadPoolExecutor_CallerRunsPolicy0 = new ThreadPoolExecutor.CallerRunsPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(1972, threadFactory1, threadPoolExecutor_CallerRunsPolicy0);
      scheduledThreadPoolExecutor1.isShutdown();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy2 = new ThreadPoolExecutor.DiscardPolicy();
      MockThread.getAllStackTraces();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor2 = new ScheduledThreadPoolExecutor(335544485);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][2];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-103);
      byteArray1[1] = (byte)123;
      byteArray1[2] = (byte)45;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte) (-103);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[2];
      byteArray3[0] = (byte) (-103);
      byteArray3[1] = (byte)45;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte)45;
      byteArray4[1] = (byte) (-103);
      byteArray4[2] = (byte) (-117);
      byteArray4[3] = (byte)123;
      byteArray4[4] = (byte)45;
      byteArray4[5] = (byte)123;
      byteArray4[6] = (byte)123;
      byteArray4[7] = (byte) (-103);
      byteArray4[8] = (byte)45;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[3];
      byteArray5[0] = (byte) (-117);
      byteArray5[1] = (byte)45;
      byteArray5[2] = (byte) (-117);
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[1];
      byteArray6[0] = (byte)123;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[6];
      byteArray7[0] = (byte) (-117);
      byteArray7[1] = (byte)123;
      byteArray7[2] = (byte) (-103);
      byteArray7[3] = (byte) (-103);
      byteArray7[4] = (byte)45;
      byteArray7[5] = (byte)123;
      byteArray0[6] = byteArray7;
      byte[] byteArray8 = new byte[9];
      byteArray8[0] = (byte) (-103);
      byteArray8[1] = (byte)45;
      byteArray8[2] = (byte)123;
      byteArray8[3] = (byte)45;
      byteArray8[4] = (byte) (-103);
      byteArray8[5] = (byte)45;
      byteArray8[6] = (byte)45;
      byteArray8[7] = (byte)123;
      byteArray8[8] = (byte) (-103);
      byteArray0[7] = byteArray8;
      linkedList1.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jMXPrincipal0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.and(predicate0);
      Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate.isEqual((Object) "");
      Predicate<Object> predicate6 = predicate3.or(predicate1);
      predicate3.test(jMXPrincipal0);
      Predicate<Object> predicate7 = predicate0.or(predicate5);
      linkedList0.removeIf(predicate6);
      predicate2.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      predicate2.or(predicate8);
      predicate2.or(predicate5);
      LinkedBlockingQueue<Delayed> linkedBlockingQueue0 = new LinkedBlockingQueue<Delayed>();
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>(linkedBlockingQueue0);
      Consumer<Delayed> consumer0 = (Consumer<Delayed>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      delayQueue0.forEach(consumer0);
      delayQueue0.peek();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(400, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      MockThread mockThread0 = new MockThread();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.removeIf(predicate4);
      System.setCurrentTimeMillis(649L);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[6][3];
      linkedList0.add(byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      linkedList0.addFirst(byteArray0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ":Vo_t{");
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any(byte[][].class) , any(byte[][].class));
      linkedList0.add(byteArray0);
      linkedList0.sort(comparator0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "RDB$VIEW_RELATIONS");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      MockThread.getDefaultUncaughtExceptionHandler();
      ThreadPoolExecutor.DiscardOldestPolicy threadPoolExecutor_DiscardOldestPolicy0 = new ThreadPoolExecutor.DiscardOldestPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1985, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      scheduledThreadPoolExecutor0.isShutdown();
      scheduledThreadPoolExecutor0.getContinueExistingPeriodicTasksAfterShutdownPolicy();
      scheduledThreadPoolExecutor0.getPoolSize();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      scheduledThreadPoolExecutor0.setKeepAliveTime(0, timeUnit0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution((Runnable) null, scheduledThreadPoolExecutor0);
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "RDB$VIEW_RELATIONS");
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5249311748495913
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      int int0 = (-1253);
      fBCachedFetcher0.relative((-1253));
      fBCachedFetcher0.setFetchSize((-3096));
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.next();
      org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp databaseParameterBufferImp0 = new org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp();
      databaseParameterBufferImp0.removeExtensionParams();
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      isc_blob_handle_impl isc_blob_handle_impl0 = new isc_blob_handle_impl();
      isc_blob_handle_impl0.getDb();
      isc_blob_handle_impl0.getTr();
      // Undeclared exception!
      try { 
        javaGDSImpl0.iscDsqlExecImmed2((IscDbHandle) null, (IscTrHandle) null, "YE3{", "YE3{", (-2755), (XSQLDA) null, (XSQLDA) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, fBResultSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8561930551707455
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      Predicate.isEqual((Object) linkedList0);
      LinkedList<Object> linkedList1 = new LinkedList<Object>();
      linkedList0.retainAll(linkedList1);
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      Predicate.isEqual((Object) "");
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.absolute(100);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.relative((-769));
      fBCachedFetcher0.isFirst();
      byte[][] byteArray0 = new byte[0][3];
      fBCachedFetcher0.updateRow(byteArray0);
      fBCachedFetcher0.next();
      fBCachedFetcher0.first();
      fBCachedFetcher0.relative(2244);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.deleteRow();
      System.setCurrentTimeMillis(1434L);
      System.setCurrentTimeMillis(2244);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.502420099185768
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)37;
      byteArray0[2] = (byte)74;
      byteArray0[3] = (byte)123;
      byteArray0[4] = (byte)3;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte) (-66);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      linkedList0.add((byte[][]) null);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.close();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      fBCachedFetcher0.isLast();
      GDSType.getType("");
      NativeGDSImpl nativeGDSImpl0 = null;
      try {
        nativeGDSImpl0 = new NativeGDSImpl((GDSType) null);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }
}
