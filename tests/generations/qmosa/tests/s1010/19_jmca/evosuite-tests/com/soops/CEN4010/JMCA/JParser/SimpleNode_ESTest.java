/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 07:59:08 GMT 2019
 */

package com.soops.CEN4010.JMCA.JParser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.soops.CEN4010.JMCA.JParser.JavaCharStream;
import com.soops.CEN4010.JMCA.JParser.JavaParser;
import com.soops.CEN4010.JMCA.JParser.JavaParserTokenManager;
import com.soops.CEN4010.JMCA.JParser.Node;
import com.soops.CEN4010.JMCA.JParser.SimpleNode;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.Writer;
import java.nio.CharBuffer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SimpleNode_ESTest extends SimpleNode_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(63);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("n/");
      StringWriter stringWriter0 = new StringWriter(63);
      int int0 = 2097;
      stringWriter0.write(472);
      simpleNode0.identifiers.add("?");
      simpleNode0.dump("?", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, 2097);
      PipedInputStream pipedInputStream1 = null;
      try {
        pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.145722802994512
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode1;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode1.jjtAddChild(simpleNode1, 29);
      simpleNode0.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode1.jjtGetChild(29);
      simpleNode0.jjtAddChild(simpleNode1, 3);
      simpleNode1.jjtGetChild(29);
      simpleNode0.toString();
      simpleNode1.toString("VariableDeclaratorId");
      assertEquals(30, simpleNode1.jjtGetNumChildren());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.6134788277392043
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("\"]\"");
      simpleNode0.identifiers = arrayList0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      arrayList0.retainAll(simpleNode0.identifiers);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{r#psjog~~-G");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{r#psjog~~-G");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add("<<");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<<");
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump(">", stringWriter0);
      simpleNode0.dump(">", stringWriter0);
      int int0 = (-2535);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-2535));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6200155105291458
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(48);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter(48);
      arrayList0.add(">:=");
      simpleNode0.dump("3^6c PWr", stringWriter0);
      arrayList0.add("{");
      simpleNode0.dump("@:E:\"JK|g-,Y", stringWriter0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      List<Locale> list1 = new LinkedList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      List<Locale> list2 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList3, (Collection<Locale>) linkedList0, locale_FilteringMode1);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList2, (Collection<Locale>) list2, locale_FilteringMode2);
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      int int0 = 48;
      SimpleNode simpleNode0 = new SimpleNode(48);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter(48);
      arrayList0.add(">=");
      simpleNode0.dump("3^6c PWr", stringWriter0);
      arrayList0.add(":");
      arrayList0.add(":");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) linkedList0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) linkedList0);
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) list1);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode1);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode2);
      String string0 = "*lt";
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("*lt");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=*lt
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.identifiers.add("Z&");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "Z&");
      simpleNode0.dump((String) null, stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(18);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      int int1 = (-1548);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream0, 18);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      arrayList0.add("|");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add(")");
      Locale locale0 = Locale.KOREA;
      locale0.stripExtensions();
      arrayList0.add("<=");
      Locale locale1 = Locale.KOREA;
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) ")");
      Locale locale2 = locale0.stripExtensions();
      Locale locale3 = Locale.ENGLISH;
      locale0.getDisplayScript(locale2);
      StringBuffer stringBuffer0 = new StringBuffer("<=");
      stringBuffer0.trimToSize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuffer stringBuffer1 = new StringBuffer();
      StringBuffer stringBuffer2 = new StringBuffer(")");
      StringBuffer stringBuffer3 = new StringBuffer();
      CharBuffer.wrap((CharSequence) "9\"\"");
      simpleNode0.dump("%l1X]h]", stringWriter1);
      assertEquals(")<EnumBody>\n  <identifier>|</identifier>\n  <identifier>)</identifier>\n  <identifier>*le</identifier>\n</EnumBody>\n", stringWriter1.toString());
      assertEquals(")<EnumBody>\n  <identifier>|</identifier>\n  <identifier>)</identifier>\n  <identifier>*le</identifier>\n</EnumBody>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("<");
      StringWriter stringWriter0 = new StringWriter(18);
      simpleNode0.dump("<", stringWriter0);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((-208));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(15);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("{");
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add(">");
      JavaParser javaParser0 = new JavaParser("{");
      simpleNode0.dump("@:\"J*|g-,Y", stringWriter0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(3);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      arrayList0.add("qcc^(j1I;6&a");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "-HrmW");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("U");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList1 = simpleNode0.identifiers;
      arrayList1.add(";");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ArrayList<String> arrayList2 = simpleNode0.identifiers;
      arrayList1.add("");
      arrayList0.add("k[xl.j2rS");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(3);
      stringWriter0.close();
      arrayList2.add((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "k[xl.j2rS");
      // Undeclared exception!
      try { 
        simpleNode0.dump("*le", stringWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6200155105291458
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      arrayList0.add("n/");
      StringWriter stringWriter0 = new StringWriter(47);
      stringWriter0.write(2097);
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      simpleNode0.identifiers.trimToSize();
      StringWriter stringWriter1 = new StringWriter();
      simpleNode0.dump("?", stringWriter0);
      arrayList0.add("CompilationUnit");
      arrayList0.add(">>");
      simpleNode0.identifiers.iterator();
      Integer integer0 = new Integer(47);
      Integer integer1 = new Integer(472);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer2 = new Integer((-6262915));
      Integer integer3 = new Integer(87);
      Integer integer4 = new Integer(472);
      Integer integer5 = new Integer((-6262915));
      Integer integer6 = new Integer(1);
      simpleNode0.dump("?", stringWriter1);
      assertEquals("<InstanceOfExpression>\n  <identifier>n/</identifier>\n  <identifier>CompilationUnit</identifier>\n  <identifier>*rshft</identifier>\n</InstanceOfExpression>\n", stringWriter1.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)102;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      simpleNode0.identifiers = arrayList0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{r#psjog~~-G");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{r#psjog~~-G");
      ArrayList<String> arrayList1 = new ArrayList<String>();
      arrayList0.add("&");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "&");
      ArrayList<String> arrayList2 = new ArrayList<String>();
      byte[] byteArray1 = new byte[15];
      byteArray1[2] = (byte) (-98);
      byteArray1[4] = (byte)10;
      byteArray1[1] = (byte) (-98);
      byteArray1[7] = (byte) (-98);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "{r#psjog~~-G");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringWriter stringWriter0 = new StringWriter();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "&");
      simpleNode0.dump("*le", stringWriter0);
      assertEquals("<VariableDeclaratorId>\n  <identifier>*amp</identifier>\n</VariableDeclaratorId>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5914440819577174
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      simpleNode0.identifiers.add("&&");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "&&");
      simpleNode0.dump((String) null, stringWriter0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedInputStream pipedInputStream1 = new PipedInputStream(18);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream(pipedInputStream1);
      int int1 = (-1548);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream0, 18);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7604388102155148
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(59);
      SimpleNode simpleNode1 = new SimpleNode(59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      Node node0 = simpleNode0.jjtGetChild(59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      StringWriter stringWriter1 = new StringWriter(2455);
      stringWriter0.append('y');
      node0.jjtAddChild(simpleNode0, 59);
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode2 = new SimpleNode(javaParser0, 59);
      simpleNode2.jjtGetParent();
      simpleNode2.jjtGetNumChildren();
      // Undeclared exception!
      simpleNode0.dump((String) null, stringWriter1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(18);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      StringWriter stringWriter0 = new StringWriter();
      arrayList0.add("}");
      simpleNode0.dump("%M", stringWriter0);
      arrayList0.add("?");
      arrayList0.iterator();
      int int0 = (-262);
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-262));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7046360973492382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(47);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      StringWriter stringWriter0 = new StringWriter(47);
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("");
      stringWriter0.flush();
      simpleNode0.dump("k3", stringWriter0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) arrayList1);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("k3");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=k3
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ")");
      arrayList0.add(")");
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine((String) null);
      String string0 = simpleNode0.toString();
      assertEquals("EnumBody : )", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      String string0 = "|";
      arrayList0.add("|");
      simpleNode0.toString("|");
      ArrayList<Integer> arrayList1 = new ArrayList<Integer>();
      arrayList0.add(":");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      int int0 = 2048;
      Locale.LanguageRange locale_LanguageRange0 = null;
      try {
        locale_LanguageRange0 = new Locale.LanguageRange("T[-~}v8a n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // range=t[-~}v8a n
         //
         verifyException("java.util.Locale$LanguageRange", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.683711063822706
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(10);
      simpleNode0.jjtAddChild(simpleNode1, 2666);
      simpleNode0.toString("*lt");
      simpleNode0.toString(" ");
      simpleNode1.parent = (Node) simpleNode0;
      simpleNode1.toString();
      simpleNode0.jjtGetNumChildren();
      simpleNode1.setIdentifier("({&3RaTKU{SGRr8-8=");
      simpleNode1.id = 2666;
      simpleNode1.jjtAddChild(simpleNode0, 0);
      simpleNode0.jjtSetParent(simpleNode1);
      simpleNode1.jjtSetParent(simpleNode0);
      simpleNode0.setIdentifier((String) null);
      simpleNode1.jjtGetNumChildren();
      simpleNode1.jjtGetParent();
      SimpleNode simpleNode2 = new SimpleNode(10);
      // Undeclared exception!
      try { 
        simpleNode2.jjtGetChild((-1933654546));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4597907757135697
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(59);
      SimpleNode simpleNode1 = new SimpleNode(59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      SimpleNode simpleNode2 = (SimpleNode)simpleNode0.jjtGetChild(59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      StringReader stringReader0 = new StringReader("");
      StringWriter stringWriter1 = new StringWriter();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("5VaC.xy9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, " RJ^");
      stringWriter1.append('-');
      stringWriter0.append((CharSequence) " RJ^");
      simpleNode2.dump("XsRrR M", stringWriter0);
      assertEquals("<PrimaryExpression></PrimaryExpression>\n RJ^", stringWriter0.toString());
      
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4009940012833
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(59);
      SimpleNode simpleNode1 = new SimpleNode(59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      StringWriter stringWriter0 = new StringWriter();
      simpleNode0.dump("", stringWriter0);
      SimpleNode simpleNode2 = (SimpleNode)simpleNode0.jjtGetChild(59);
      simpleNode0.jjtAddChild(simpleNode1, 59);
      StringReader stringReader0 = new StringReader("");
      StringWriter stringWriter1 = new StringWriter();
      Node[] nodeArray0 = new Node[0];
      simpleNode2.children = nodeArray0;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("5VaC.xy9");
      FileSystemHandling.createFolder(evoSuiteFile0);
      stringWriter1.append('-');
      stringWriter0.append((CharSequence) " RJ^");
      simpleNode2.dump("XsRrR M", stringWriter0);
      int int0 = simpleNode1.jjtGetNumChildren();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7476224947602566
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter(0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode2;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode2.jjtAddChild(simpleNode1, 29);
      simpleNode1.jjtGetNumChildren();
      simpleNode0.jjtGetNumChildren();
      simpleNode2.jjtGetChild(29);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-2217));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2217
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(9);
      Node node0 = simpleNode0.parent;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ";");
      simpleNode0.jjtAddChild((Node) null, 9);
      simpleNode0.jjtAddChild((Node) null, 79);
      simpleNode0.jjtGetChild(79);
      simpleNode0.jjtGetParent();
      simpleNode0.jjtGetNumChildren();
      simpleNode0.jjtAddChild((Node) null, 79);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild((Node) null, (-1329));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1329
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      int int0 = 9;
      SimpleNode simpleNode0 = new SimpleNode(9);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      String string0 = "";
      arrayList0.add("");
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer1);
      // Undeclared exception!
      try { 
        simpleNode0.dump("", (Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5985152433458726
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("U");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList0.add("U");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EqualityExpression");
      StringBuffer stringBuffer0 = new StringBuffer(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringWriter stringWriter0 = new StringWriter(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringWriter0.write((-3791));
      StringBuffer stringBuffer1 = new StringBuffer("EqualityExpression");
      StringBuffer stringBuffer2 = new StringBuffer();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "EqualityExpression");
      simpleNode0.dump("EqualityExpression", stringWriter0);
      assertEquals("\uF131<PackageDeclaration>\n  <identifier>U</identifier>\n  <identifier>U</identifier>\n</PackageDeclaration>\n", stringWriter0.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JavaParser javaParser0 = new JavaParser((String) null);
      SimpleNode simpleNode0 = null;
      try {
        simpleNode0 = new SimpleNode((JavaParser) null, (-1079924597));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5280883009539776
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(1);
      simpleNode0.dump("5g-sjC#E", (Writer) null);
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.jjtSetParent(simpleNode0);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      linkedList0.clone();
      arrayList0.removeAll(linkedList0);
      simpleNode0.dump("5g-sjC#E", (Writer) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)80;
      byteArray0[1] = (byte)52;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-14), (byte)52);
      byteArrayInputStream0.skip((byte)52);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      Node node0 = simpleNode0.jjtGetParent();
      assertSame(simpleNode0, node0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      File file0 = MockFile.createTempFile("#a@|~*?x+s(", "#57)v1Y7zB", (File) null);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(file0);
      JavaParser javaParser0 = new JavaParser(mockFileInputStream0);
      mockFileInputStream0.mark((-112630261));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-104);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)79;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)85;
      byteArray0[8] = (byte)31;
      mockFileInputStream0.read(byteArray0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 120);
      simpleNode0.jjtOpen();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(29);
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) simpleNode0;
      nodeArray0[1] = (Node) simpleNode0;
      nodeArray0[2] = (Node) simpleNode0;
      nodeArray0[3] = (Node) simpleNode0;
      nodeArray0[4] = (Node) simpleNode0;
      nodeArray0[5] = (Node) simpleNode0;
      nodeArray0[6] = (Node) simpleNode0;
      nodeArray0[7] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild(2692);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2692
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, (-2842), 3143);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1));
      // Undeclared exception!
      try { 
        simpleNode0.jjtGetChild((-1953282989));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4850884752336677
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      StringWriter stringWriter0 = new StringWriter(0);
      SimpleNode simpleNode2 = new SimpleNode(0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) simpleNode1;
      nodeArray0[1] = (Node) simpleNode2;
      nodeArray0[2] = (Node) simpleNode0;
      simpleNode0.children = nodeArray0;
      simpleNode2.jjtAddChild(simpleNode1, 29);
      simpleNode1.jjtGetNumChildren();
      simpleNode0.jjtGetNumChildren();
      SimpleNode simpleNode3 = new SimpleNode(29);
      simpleNode0.jjtAddChild(simpleNode1, 3);
      int int0 = simpleNode0.jjtGetNumChildren();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      JavaCharStream javaCharStream0 = new JavaCharStream(stringReader0, 0, 0);
      JavaParserTokenManager javaParserTokenManager0 = new JavaParserTokenManager(javaCharStream0);
      JavaParser javaParser0 = new JavaParser(javaParserTokenManager0);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, 0);
      simpleNode0.jjtClose();
      assertEquals(0, simpleNode0.jjtGetNumChildren());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleNode simpleNode0 = new SimpleNode((-2045222519));
      // Undeclared exception!
      try { 
        simpleNode0.toString();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2045222519
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ej0#\">lgv!xf+_G?");
      JavaParser javaParser0 = new JavaParser("{r#psjog~~-G");
      char[] charArray0 = new char[17];
      charArray0[1] = 'v';
      charArray0[10] = '\u001D';
      charArray0[2] = 'v';
      charArray0[3] = '5';
      charArray0[4] = 'N';
      charArray0[5] = 't';
      charArray0[6] = '=';
      stringReader0.read(charArray0);
      JavaParser javaParser1 = new JavaParser("Z:D:jRRPx;^hqV");
      javaParser1.ReInit((Reader) stringReader0);
      StringReader stringReader1 = new StringReader("Z:D:jRRPx;^hqV");
      javaParser1.ReInit((Reader) stringReader1);
      SimpleNode simpleNode0 = new SimpleNode(javaParser0, (-1059));
      // Undeclared exception!
      try { 
        simpleNode0.toString("&&");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1059
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      int int0 = (-11);
      SimpleNode simpleNode0 = new SimpleNode((-11));
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.add("zPE-)^|c8VEt`");
      StringWriter stringWriter0 = new StringWriter();
      // Undeclared exception!
      try { 
        simpleNode0.dump("zPE-)^|c8VEt`", stringWriter0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      int int0 = 18;
      SimpleNode simpleNode0 = new SimpleNode(18);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "qtj.|!y%3+m");
      ArrayList<String> arrayList0 = simpleNode0.identifiers;
      simpleNode0.identifiers = arrayList0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SimpleNode simpleNode1 = new SimpleNode(18);
      // Undeclared exception!
      try { 
        simpleNode0.jjtAddChild(simpleNode1, (-1420));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.soops.CEN4010.JMCA.JParser.SimpleNode", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6697400802886095
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      int int0 = 0;
      SimpleNode simpleNode0 = new SimpleNode(0);
      SimpleNode simpleNode1 = new SimpleNode(0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      simpleNode0.jjtAddChild(simpleNode1, 0);
      StringWriter stringWriter0 = new StringWriter(0);
      SimpleNode simpleNode2 = new SimpleNode(921);
      SimpleNode simpleNode3 = new SimpleNode(921);
      simpleNode2.jjtAddChild(simpleNode0, 0);
      simpleNode2.jjtGetNumChildren();
      simpleNode2.jjtAddChild(simpleNode0, 921);
      // Undeclared exception!
      try { 
        simpleNode2.dump("", (Writer) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SystemInUtil.addInputLine("TypeParameters");
      StringBuffer stringBuffer0 = new StringBuffer();
      StringReader stringReader0 = new StringReader("TypeParameters");
      JavaParser javaParser0 = new JavaParser(">>>=");
      javaParser0.VariableDeclarator();
      javaParser0.ReInit((Reader) stringReader0);
      assertFalse(javaParser0.lookingAhead);
  }
}
