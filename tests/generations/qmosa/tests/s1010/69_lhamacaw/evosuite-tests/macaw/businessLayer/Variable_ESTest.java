/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 10 20:58:43 GMT 2020
 */

package macaw.businessLayer;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.ConcurrentModificationException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import macaw.businessLayer.DerivedVariable;
import macaw.businessLayer.OntologyTerm;
import macaw.businessLayer.RawVariable;
import macaw.businessLayer.SupportingDocument;
import macaw.businessLayer.User;
import macaw.businessLayer.ValueLabel;
import macaw.businessLayer.Variable;
import macaw.businessLayer.VariableSummary;
import macaw.system.ChangeEventType;
import macaw.system.MacawChangeEvent;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Variable_ESTest extends Variable_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5163766614266625
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.columnStart = "UNABLE_TO_DELETE_ONTOLOGY_TERM";
      derivedVariable0.isCleaned();
      derivedVariable0.getAlias();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNewRecord(true);
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      arrayList0.add(ontologyTerm0);
      arrayList0.add(ontologyTerm0);
      ontologyTerm0.getDisplayName();
      derivedVariable0.addOntologyTerms(arrayList0);
      derivedVariable0.getOntologyTerms();
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      derivedVariable0.isNewRecord();
      User user0 = new User("UNABLE_TO_DELETE_ONTOLOGY_TERM", "bN9LVuk=<#B~G");
      arrayList1.clear();
      user0.setCounty("bN9LVuk=<#B~G");
      RawVariable rawVariable0 = new RawVariable();
      arrayList1.add((Variable) derivedVariable0);
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      ArrayList<ValueLabel> arrayList2 = new ArrayList<ValueLabel>();
      rawVariable0.setValueLabels(arrayList2);
      // Undeclared exception!
      try { 
        derivedVariable0.removeSourceVariables(arrayList1);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6661022550876021
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.getDisplayName();
      derivedVariable0.setAvailability("c3UZts4z!|a");
      User user0 = new User("c3UZts4z!|a", "");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      ValueLabel valueLabel0 = new ValueLabel();
      ArrayList<MacawChangeEvent> arrayList1 = ValueLabel.detectFieldChanges(user0, derivedVariable0, valueLabel0, valueLabel0);
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      MacawChangeEvent macawChangeEvent1 = new MacawChangeEvent();
      arrayList1.add(macawChangeEvent1);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.getAlternativeVariable();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "c3UZts4z!|a");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.test((Object) null);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate2.and(predicate4);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate5.and(predicate0);
      arrayList1.stream();
      System.setCurrentTimeMillis(136);
      Predicate.isEqual((Object) "");
      // Undeclared exception!
      try { 
        predicate3.or((Predicate<? super Object>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3475755978611477
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.codeBookNumber = "variable.cleaningDescription.label";
      valueLabel0.setValue("variable.cleaningDescription.label");
      arrayList0.add(valueLabel0);
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.getValueLabels();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.getIdentifier();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      arrayList1.add((Variable) rawVariable0);
      derivedVariable0.setSourceVariables(arrayList1);
      derivedVariable0.removeSourceVariable(rawVariable0);
      rawVariable0.getLabel();
      rawVariable0.isCoded();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.getDisplayName();
      User user0 = new User();
      OntologyTerm.detectFieldChanges(user0, ontologyTerm0, ontologyTerm0);
      rawVariable0.containsOntologyTerm(ontologyTerm0);
      user0.setAffiliation("-LHA");
      rawVariable0.clone();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setYear("variable.cleaningDescription.label");
      Variable.detectFieldChanges(user0, derivedVariable0, rawVariable1);
      rawVariable1.containsOntologyTerm(ontologyTerm0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDocumentCode(" type=");
      rawVariable0.containsSupportingDocument(supportingDocument0);
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      // Undeclared exception!
      try { 
        rawVariable0.addSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.codeBookNumber = "UNABLE_TO_GET_AVAILABILITY_STATE_NAME";
      User user0 = new User("UNABLE_TO_GET_AVAILABILITY_STATE_NAME", "!BYiTV");
      DerivedVariable derivedVariable0 = new DerivedVariable();
      // Undeclared exception!
      try { 
        derivedVariable0.addOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1272886853327275
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      user0.setUserID("r>|>NFby#eT#J)'f");
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      // Undeclared exception!
      try { 
        rawVariable0.removeOntologyTerms((ArrayList<OntologyTerm>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.110016553375461
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setIdentifier(60);
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.setName("n;zo2X%sQ8P7L`");
      derivedVariable0.setColumnEnd("n;zo2X%sQ8P7L`");
      derivedVariable0.getIdentifier();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm1.setNewRecord(true);
      ontologyTerm1.setDescription("UNABLE_TO_GET_ALIAS_FILE_PATH_NAME");
      derivedVariable0.containsOntologyTerm(ontologyTerm1);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      User user0 = new User("eG4>3Saf'+.t9h=ES", "UNABLE_TO_GET_ALIAS_FILE_PATH_NAME");
      user0.setFirstName("HKtC1");
      Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      rawVariable0.setColumnEnd("user.city.saveChanges");
      derivedVariable0.containsSourceVariable(rawVariable0);
      int int0 = rawVariable0.getIdentifier();
      assertEquals("user.city.saveChanges", rawVariable0.getColumnEnd());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.246211539077691
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm1);
      derivedVariable0.setColumnStart("$g(zl>KzQ");
      ontologyTerm1.clone();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm2);
      derivedVariable0.cloneAttributes(rawVariable0);
      derivedVariable0.removeOntologyTerm(ontologyTerm1);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      User user0 = new User();
      SupportingDocument.detectFieldChanges(user0, supportingDocument1, supportingDocument1);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument2.setTitle("#K");
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      ValueLabel valueLabel0 = new ValueLabel();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) valueLabel0);
      predicate0.test(ontologyTerm0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      arrayList0.add(supportingDocument2);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      derivedVariable0.createVariableSummary();
      assertEquals("$g(zl>KzQ", derivedVariable0.getColumnStart());
      
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = (DerivedVariable)derivedVariable1.clone();
      assertEquals("Unknown", derivedVariable2.getAvailability());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.302504398455105
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = (OntologyTerm)ontologyTerm0.clone();
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      User user0 = new User();
      OntologyTerm.detectFieldChanges(user0, ontologyTerm1, ontologyTerm1);
      derivedVariable0.addOntologyTerm(ontologyTerm2);
      derivedVariable0.setColumnStart("$g(zl>KzQ");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      RawVariable rawVariable3 = new RawVariable();
      rawVariable0.cloneAttributes(derivedVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm2);
      RawVariable rawVariable4 = new RawVariable();
      RawVariable rawVariable5 = new RawVariable();
      rawVariable5.setColumnEnd("=gK+#");
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm2);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      Predicate.isEqual((Object) null);
      RawVariable rawVariable6 = new RawVariable();
      User user1 = new User();
      System.setCurrentTimeMillis(1248L);
      RawVariable.detectFieldChanges(user1, rawVariable4, rawVariable0);
      assertEquals("$g(zl>KzQ", rawVariable0.getColumnStart());
      
      derivedVariable2.createVariableSummary();
      rawVariable6.clone();
      assertEquals("Unknown", rawVariable6.getCategory());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.193505870419895
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      User user0 = new User("user.city.saveChanges", "\u0005cxih*ZNW]{'-");
      ValueLabel.differencesExist(user0, rawVariable0, valueLabel0, valueLabel0);
      ValueLabel.validateFields(valueLabel0);
      ValueLabel valueLabel1 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel1);
      User user1 = new User();
      Variable.detectChangesInAlternativeVariable(user1, rawVariable0, rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable1.cloneAttributes(rawVariable2);
      rawVariable1.getCodeBookNumber();
      User user2 = new User();
      User.detectFieldChanges(user2, user0, user2);
      rawVariable2.setCleaned(true);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user2, derivedVariable1, rawVariable2);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.clone();
      DerivedVariable derivedVariable3 = new DerivedVariable();
      derivedVariable3.getName();
      ArrayList<MacawChangeEvent> arrayList1 = DerivedVariable.detectFieldChanges(user1, derivedVariable0, derivedVariable1);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      VariableSummary variableSummary0 = derivedVariable2.createVariableSummary();
      assertEquals("0", variableSummary0.getDisplayItemIdentifier());
      
      derivedVariable0.getLabel();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user1, derivedVariable3, rawVariable2);
      assertFalse(rawVariable2.isNewRecord());
      assertEquals("Unknown", derivedVariable3.getAvailability());
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      assertEquals("Unknown", derivedVariable3.getCleaningStatus());
      assertEquals("Unknown", rawVariable2.getCategory());
      assertEquals("0", rawVariable2.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3217263998276683
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      derivedVariable0.getCategory();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      derivedVariable0.removeSourceVariables(arrayList1);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.hasSameDisplayName(rawVariable0);
      rawVariable0.codeBookNumber = "Unknown";
      rawVariable0.getCodeBookNumber();
      derivedVariable0.setCoded(false);
      rawVariable0.setCategory("macaw.businessLayer.Variable");
      arrayList1.containsAll(arrayList0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setAlternativeVariable(derivedVariable1);
      derivedVariable0.removeSourceVariables(arrayList1);
      rawVariable0.clone();
      derivedVariable0.removeSourceVariables(arrayList1);
      derivedVariable0.getAlias();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("a]+%vW~(PR`g1+5G");
      rawVariable0.containsSupportingDocument(supportingDocument0);
      derivedVariable0.isNewRecord();
      rawVariable0.getLabel();
      System.setCurrentTimeMillis(1699L);
      User user0 = new User();
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.193505870419895
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      User user0 = new User("user.city.saveChanges", "user.city.saveChanges");
      ValueLabel.differencesExist(user0, derivedVariable0, valueLabel1, valueLabel0);
      ValueLabel.validateFields(valueLabel1);
      derivedVariable0.removeValueLabel(valueLabel0);
      User user1 = new User();
      Variable.detectChangesInAlternativeVariable(user1, derivedVariable0, derivedVariable0);
      RawVariable rawVariable0 = new RawVariable();
      User user2 = new User();
      RawVariable.detectFieldChanges(user1, rawVariable0, rawVariable0);
      assertFalse(rawVariable0.isCleaned());
      
      rawVariable0.setCleaned(true);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      Predicate.isEqual((Object) "user.city.saveChanges");
      RawVariable rawVariable1 = new RawVariable();
      User user3 = new User();
      System.setCurrentTimeMillis(1248L);
      RawVariable.detectFieldChanges(user1, rawVariable1, rawVariable0);
      derivedVariable0.createVariableSummary();
      RawVariable rawVariable2 = (RawVariable)rawVariable0.clone();
      assertEquals("Unknown", rawVariable2.getCleaningStatus());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.193505870419895
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      User user0 = new User("user.city.saveChanges", "user.city.saveChanges");
      ValueLabel.differencesExist(user0, derivedVariable1, valueLabel1, valueLabel0);
      ValueLabel.validateFields(valueLabel1);
      derivedVariable1.removeValueLabel(valueLabel0);
      User user1 = new User();
      Variable.detectChangesInAlternativeVariable(user1, derivedVariable1, derivedVariable1);
      user1.setCounty("Wp6fOv)`T4");
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.cloneAttributes(derivedVariable1);
      rawVariable0.getCodeBookNumber();
      User user2 = new User();
      User.detectFieldChanges(user1, user2, user1);
      rawVariable1.setCleaned(true);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      User user3 = new User("", "user.city.saveChanges");
      Variable.detectFieldChanges(user3, rawVariable1, derivedVariable0);
      assertTrue(rawVariable1.isCleaned());
      
      derivedVariable0.clone();
      derivedVariable2.getName();
      DerivedVariable.detectFieldChanges(user2, derivedVariable1, derivedVariable2);
      derivedVariable2.createVariableSummary();
      assertFalse(derivedVariable2.isCleaned());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.285945660219201
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = (OntologyTerm)ontologyTerm0.clone();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable1.cloneAttributes(rawVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      rawVariable4.columnEnd = "-LHA";
      rawVariable3.notes = "-LHA";
      rawVariable4.setColumnEnd("variable.notes.label");
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      Predicate.isEqual((Object) ontologyTerm3);
      RawVariable rawVariable5 = new RawVariable();
      User user0 = new User();
      RawVariable.detectFieldChanges(user0, rawVariable3, rawVariable4);
      assertEquals("-LHA", rawVariable3.getNotes());
      
      derivedVariable1.createVariableSummary();
      assertEquals("Unknown", derivedVariable1.getCategory());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6478133586864625
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCodeBookNumber("variable.cleaningDescription.label");
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      arrayList0.add(ontologyTerm0);
      arrayList0.add(ontologyTerm0);
      rawVariable0.setOntologyTerms(arrayList0);
      rawVariable0.setLabel("X%");
      RawVariable rawVariable1 = new RawVariable();
      User user0 = new User();
      rawVariable0.setCoded(false);
      user0.setLastName("4Pxri/qN!h");
      rawVariable1.notes = "variable.cleaningDescription.label";
      rawVariable1.setCleaningStatus("4Pxri/qN!h");
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable1);
      rawVariable0.hasSameDisplayName(rawVariable1);
      rawVariable1.isCleaned();
      rawVariable1.getDisplayItemIdentifier();
      rawVariable0.setNotes("MacawProperties");
      rawVariable1.getAlias();
      System.setCurrentTimeMillis(0L);
      rawVariable0.getCleaningDescription();
      user0.clone();
      rawVariable1.getQuestionNumber();
      rawVariable0.createVariableSummary();
      try { 
        RawVariable.validateFields(rawVariable1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.2463841835536598
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      derivedVariable0.form = "_0";
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      assertEquals("_0", derivedVariable1.getForm());
      
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.questionNumber = null;
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable0.cloneAttributes(rawVariable2);
      rawVariable1.getCodeBookNumber();
      rawVariable1.setForm("");
      ChangeEventType changeEventType0 = ChangeEventType.USER;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent(changeEventType0, "UNABLE_TO_GET_ALIAS_FILE_PATH_NAME", "");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) macawChangeEvent0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate2);
      predicate3.and(predicate1);
      predicate3.and(predicate2);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate4);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      derivedVariable2.removeSupportingDocuments(arrayList0);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      derivedVariable2.containsSupportingDocument(supportingDocument3);
      derivedVariable0.createVariableSummary();
      assertEquals("", derivedVariable0.getCodeBookNumber());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.167358387982922
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      derivedVariable0.containsOntologyTerm(ontologyTerm1);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.columnEnd = "-LHA";
      rawVariable1.setColumnEnd("variable.notes.label");
      assertEquals("variable.notes.label", rawVariable1.getColumnEnd());
      
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      Predicate.isEqual((Object) ontologyTerm3);
      User user0 = new User();
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      derivedVariable1.updateOntologyTerm(ontologyTerm4);
      assertEquals("Unknown", derivedVariable1.getAvailability());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.210644412275862
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      assertFalse(derivedVariable1.isNewRecord());
      assertFalse(derivedVariable1.isCleaned());
      assertEquals("Unknown", derivedVariable1.getCleaningStatus());
      assertEquals(0, derivedVariable1.getIdentifier());
      assertEquals("Unknown", derivedVariable1.getAvailability());
      assertEquals("Unknown", derivedVariable1.getCategory());
      
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      RawVariable rawVariable1 = new RawVariable();
      Integer integer0 = new Integer(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate3);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate3.negate();
      predicate5.or(predicate9);
      Predicate<Object> predicate10 = predicate4.and(predicate0);
      predicate0.and(predicate9);
      predicate4.or(predicate8);
      predicate0.or(predicate9);
      predicate3.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate10);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate.isEqual((Object) ontologyTerm2);
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      derivedVariable2.updateOntologyTerm(ontologyTerm1);
      assertFalse(derivedVariable2.isCoded());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2078760068558854
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      boolean boolean0 = false;
      supportingDocument0.setIsNewRecord(false);
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      ArrayList<OntologyTerm> arrayList0 = derivedVariable1.getOntologyTerms();
      // Undeclared exception!
      try { 
        derivedVariable1.removeOntologyTerms(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3632670703667644
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaned(false);
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.EDIT;
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      rawVariable0.removeValueLabel(valueLabel0);
      rawVariable0.setAlias("JIc#3*2n7");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      User user0 = new User();
      user0.setPhone("4=lf|lG>-i");
      OntologyTerm.detectFieldChanges(user0, ontologyTerm0, ontologyTerm0);
      ontologyTerm0.setDescription("JIc#3*2n7");
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      rawVariable0.setCleaned(false);
      rawVariable0.setColumnStart("");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.cloneAttributes(rawVariable1);
      rawVariable0.getCodeBookNumber();
      rawVariable0.setForm("");
      rawVariable1.setCleaned(false);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      System.setCurrentTimeMillis(0L);
      rawVariable1.hasSameDisplayName(rawVariable0);
      rawVariable0.clone();
      rawVariable1.getDisplayName();
      rawVariable1.getAlias();
      assertEquals("JIc#3*2n7", rawVariable1.getAlias());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.687453282242525
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      valueLabel1.setLabel("general.fieldValue.unknown");
      ValueLabel.validateFields(valueLabel1);
      valueLabel0.setMissingValue(false);
      derivedVariable1.removeValueLabel(valueLabel0);
      derivedVariable0.setAlternativeVariable(derivedVariable1);
      derivedVariable0.getDisplayName();
      derivedVariable1.setQuestionNumber("");
      derivedVariable1.setAvailability(" type=");
      derivedVariable0.getCleaningDescription();
      User user0 = new User("", "");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable1);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      arrayList0.add(supportingDocument0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Integer integer0 = new Integer((-3688));
      predicate3.test(integer0);
      arrayList0.removeIf(predicate3);
      arrayList0.add(supportingDocument0);
      derivedVariable1.removeSupportingDocuments(arrayList0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable2.setAlias("");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      derivedVariable2.setName(" type=");
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      Variable.detectFieldChanges(user0, derivedVariable0, derivedVariable1);
      derivedVariable2.getDisplayName();
      assertEquals(" type=", derivedVariable2.getDisplayName());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.526149103639533
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.setCleaned(false);
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.EDIT;
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      RawVariable rawVariable1 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.removeValueLabel(valueLabel0);
      User user0 = new User("~9S#5y@g9f_ogL>.U", "~9S#5y@g9f_ogL>.U");
      Integer integer0 = new Integer((-2040109463));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate1.or(predicate3);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList1.removeIf(predicate0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      arrayList1.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList2 = new ArrayList<SupportingDocument>();
      derivedVariable0.removeSupportingDocuments(arrayList2);
      derivedVariable0.setAlias("9lG");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      User user1 = new User((String) null, (String) null);
      ArrayList<MacawChangeEvent> arrayList3 = Variable.detectFieldChanges(user1, derivedVariable0, rawVariable0);
      assertEquals("9lG", derivedVariable0.getAlias());
      assertEquals(1, arrayList3.size());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.321566566676815
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.codeBookNumber = "variable.cleaningDescription.label";
      valueLabel0.setValue("variable.cleaningDescription.label");
      arrayList0.add(valueLabel0);
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.getValueLabels();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.addSourceVariable(rawVariable0);
      derivedVariable0.containsSourceVariable(rawVariable0);
      derivedVariable0.getIdentifier();
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      arrayList1.add((Variable) rawVariable0);
      derivedVariable0.setSourceVariables(arrayList1);
      derivedVariable0.removeSourceVariable(rawVariable0);
      rawVariable0.getLabel();
      rawVariable0.isCoded();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.getDisplayName();
      User user0 = new User();
      OntologyTerm.detectFieldChanges(user0, ontologyTerm0, ontologyTerm0);
      rawVariable0.containsOntologyTerm(ontologyTerm0);
      user0.setAffiliation("-LHA");
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.setYear("variable.cleaningDescription.label");
      Variable.detectFieldChanges(user0, derivedVariable0, rawVariable2);
      rawVariable2.containsOntologyTerm(ontologyTerm0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDocumentCode(" type=");
      rawVariable0.containsSupportingDocument(supportingDocument0);
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      rawVariable0.containsSupportingDocument(supportingDocument0);
      derivedVariable0.getSourceVariables();
      rawVariable2.getAlias();
      assertEquals("variable.cleaningDescription.label", rawVariable2.getYear());
      
      rawVariable1.getName();
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.252653332309798
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.setCleaned(false);
      ValueLabel valueLabel1 = new ValueLabel();
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.EDIT;
      valueLabel1.setEditingOperationType(valueLabel_EditingOperationType0);
      rawVariable0.removeValueLabel(valueLabel1);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.columnEnd = "macaw.businessLayer.Variable";
      derivedVariable0.setLabel("4Pxri/qN!h");
      derivedVariable0.getSourceVariables();
      User user0 = new User();
      user0.setFirstName("variable.year.label");
      User user1 = new User("UNABLE_O_UPDATE_ALIA_FILE_PATH", "4Pxri/qN!h");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.cloneAttributes(rawVariable1);
      rawVariable0.getCodeBookNumber();
      rawVariable1.setForm("4Pxri/qN!h");
      rawVariable1.setCleaned(false);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      rawVariable0.setCoded(false);
      derivedVariable1.cloneAttributes(rawVariable1);
      derivedVariable0.removeSourceVariable(rawVariable0);
      assertEquals("4Pxri/qN!h", derivedVariable0.getLabel());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.3111304404005155
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("yZ)xGPq6]b/!BzbQh");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setLabel("_0");
      User user0 = new User();
      user0.setFirstName("4Pxri/qN!h");
      ArrayList<MacawChangeEvent> arrayList0 = DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      predicate0.negate();
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.test(ontologyTerm1);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) supportingDocument1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.and(predicate0);
      predicate4.negate();
      predicate6.test("yZ)xGPq6]b/!BzbQh");
      predicate7.negate();
      predicate4.negate();
      predicate4.and(predicate3);
      predicate3.negate();
      Predicate<Object> predicate8 = predicate2.and(predicate1);
      arrayList0.stream();
      System.setCurrentTimeMillis(0L);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate8);
      predicate9.or(predicate8);
      derivedVariable0.createVariableSummary();
      assertEquals("_0", derivedVariable0.getLabel());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5462334310292634
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.setCleaned(false);
      User user0 = new User();
      RawVariable rawVariable1 = new RawVariable();
      Variable.detectChangesInAlternativeVariable(user0, rawVariable1, rawVariable0);
      User user1 = new User();
      user0.setFirstName("variable.cleaningDescription.label");
      User user2 = new User("&_Hv2/3PKfKsP$8z,", "4Pxri/qN!h");
      user0.setPassword("variable.cleaningDescription.label");
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.setColumnEnd("variable.cleaningDescription.label");
      rawVariable2.createVariableSummary();
      RawVariable.detectFieldChanges(user1, rawVariable1, rawVariable2);
      assertEquals("variable.cleaningDescription.label", rawVariable2.getColumnEnd());
      assertEquals("Unknown", rawVariable1.getAvailability());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3284718813307355
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.setCleaned(false);
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.EDIT;
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      rawVariable0.setAlias("JIc#3*2n7");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      User user0 = new User();
      OntologyTerm.detectFieldChanges(user0, ontologyTerm0, ontologyTerm0);
      ontologyTerm0.setDescription("JIc#3*2n7");
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      rawVariable0.setCleaned(false);
      rawVariable0.setColumnStart("");
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.cloneAttributes(rawVariable1);
      rawVariable0.getCodeBookNumber();
      assertEquals("JIc#3*2n7", rawVariable0.getAlias());
      
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setFilePath((String) null);
      derivedVariable0.getFilePath();
      derivedVariable0.getYear();
      assertFalse(derivedVariable0.isCleaned());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.trimToSize();
      arrayList0.listIterator();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable0.getOntologyTerms();
      derivedVariable0.setOntologyTerms(arrayList1);
      derivedVariable0.addSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.getOntologyTerms();
      derivedVariable1.containsSourceVariable(derivedVariable0);
      derivedVariable1.getSupportingDocuments();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      // Undeclared exception!
      try { 
        derivedVariable0.containsOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.218188622753168
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      ValueLabel.validateFields(valueLabel1);
      derivedVariable1.removeValueLabel(valueLabel0);
      User user0 = new User();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, derivedVariable1, derivedVariable1);
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertNotNull(macawChangeEvent0);
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      
      user0.setCounty("Wp6fOv)`T4");
      derivedVariable0.setLabel("variable.codeBookNumber.label");
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      derivedVariable0.removeSourceVariables(arrayList0);
      User user1 = new User();
      user0.setAddressLine1("variable.cleaningDescription.label");
      user1.setFirstName(" C");
      User user2 = new User("SUPPORTING_DOCUMENT", "");
      ArrayList<MacawChangeEvent> arrayList1 = DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable1);
      assertFalse(arrayList1.isEmpty());
      
      derivedVariable0.cloneAttributes(derivedVariable1);
      derivedVariable0.removeSourceVariable(derivedVariable1);
      assertEquals("Unknown", derivedVariable1.getCategory());
      assertEquals(0, derivedVariable1.getIdentifier());
      assertEquals("Unknown", derivedVariable1.getAvailability());
      assertEquals("Unknown", derivedVariable1.getCleaningStatus());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      VariableSummary variableSummary0 = derivedVariable0.createVariableSummary();
      assertEquals("0", variableSummary0.getDisplayItemIdentifier());
      
      derivedVariable0.getAlternativeVariable();
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCleaned());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.38888971472958
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setIsNewRecord(false);
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.removeValueLabel(valueLabel0);
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.getDisplayName();
      derivedVariable0.setAvailability("");
      derivedVariable0.getCleaningDescription();
      User user0 = new User("user.city.saveChanges", "");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, (Variable) null);
      assertNotNull(macawChangeEvent0);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"blank\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertEquals(0, macawChangeEvent0.getChangedObjectIdentifier());
      
      derivedVariable0.setCoded(false);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) rawVariable0);
      User user1 = new User();
      ArrayList<MacawChangeEvent> arrayList1 = SupportingDocument.detectFieldChanges(user1, supportingDocument1, supportingDocument0);
      predicate0.test(arrayList1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      predicate3.or(predicate2);
      arrayList0.removeIf(predicate3);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      arrayList0.add(supportingDocument2);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      assertFalse(derivedVariable0.isCoded());
      
      DerivedVariable derivedVariable1 = new DerivedVariable();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      boolean boolean0 = derivedVariable1.containsSupportingDocument(supportingDocument1);
      assertFalse(boolean0);
      
      VariableSummary variableSummary0 = derivedVariable1.createVariableSummary();
      assertFalse(derivedVariable1.isNewRecord());
      assertEquals("0", variableSummary0.getDisplayItemIdentifier());
      assertFalse(derivedVariable1.isCleaned());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.1451812937734784
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User();
      derivedVariable0.columnEnd = "SUPPORCING_DOCUMENT";
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      derivedVariable0.setLabel("variable.cleaningDescription.label");
      derivedVariable0.getNotes();
      ValueLabel valueLabel0 = new ValueLabel();
      valueLabel0.getDisplayName();
      valueLabel0.setMissingValue(true);
      derivedVariable0.addValueLabel(valueLabel0);
      RawVariable rawVariable0 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable0, derivedVariable0);
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      derivedVariable0.addSourceVariables(arrayList0);
      assertEquals("SUPPORCING_DOCUMENT", derivedVariable0.getColumnEnd());
      
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      User user1 = new User((String) null, "variable.notes.label");
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user1, derivedVariable3, derivedVariable3);
      derivedVariable3.getLabel();
      assertEquals("Unknown", derivedVariable3.getCleaningStatus());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4545004761177
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      rawVariable0.setValueLabels(arrayList0);
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.removeValueLabel(valueLabel0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setLabel("4Pxri/qN!h");
      User user0 = new User();
      user0.setFirstName("variable.year.label");
      User user1 = new User("UNABLE_TO_UPDATE_ALIAS_FILE_PATH", "4Pxri/qN!h");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user1, derivedVariable0, derivedVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      RawVariable rawVariable3 = new RawVariable();
      try { 
        RawVariable.validateFields(rawVariable3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.390986455913723
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("yZ)xGPq6]b/!BzbQh");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setLabel("_0");
      User user0 = new User();
      user0.setFirstName("4Pxri/qN!h");
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate0.test(ontologyTerm1);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) supportingDocument1);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate4.and(predicate0);
      Predicate<Object> predicate7 = predicate4.negate();
      predicate1.or(predicate7);
      Predicate<Object> predicate8 = predicate2.and(predicate5);
      predicate6.and(predicate8);
      Predicate<Object> predicate9 = predicate6.or(predicate8);
      predicate9.or(predicate7);
      predicate9.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate4);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList1.add(supportingDocument2);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.3217263998276683
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaningStatus("UNABLE_TO_DELETE_AVAILABILITY_STATE");
      rawVariable0.codeBookNumber = "UNABLE_TO_DELETE_AVAILABILITY_STATE";
      rawVariable0.setIsNewRecord(true);
      rawVariable0.setNotes("UNABLE_TO_DELETE_AVAILABILITY_STATE");
      rawVariable0.getCleaningDescription();
      rawVariable0.getAvailability();
      rawVariable0.getAvailability();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      rawVariable0.addSupportingDocuments(arrayList0);
      ontologyTerm0.clone();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getSourceVariables();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.containsSupportingDocument(supportingDocument0);
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      rawVariable0.getNotes();
      derivedVariable0.getSourceVariables();
      rawVariable0.setForm("Unknown");
      rawVariable0.getCategory();
      rawVariable0.cloneAttributes(derivedVariable0);
      rawVariable0.getIdentifier();
      derivedVariable0.getAvailability();
      rawVariable0.hasSameDisplayName(derivedVariable0);
      rawVariable0.getCodeBookNumber();
      derivedVariable0.clone();
      User user0 = new User();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      Variable.validateFields(derivedVariable1);
      Variable.detectFieldChanges(user0, derivedVariable1, derivedVariable1);
      Variable.validateFields(derivedVariable0);
      assertEquals("Unknown", derivedVariable0.getForm());
      assertEquals("UNABLE_TO_DELETE_AVAILABILITY_STATE", derivedVariable0.getCodeBookNumber());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.450805020083924
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      User user0 = new User("user.city.saveChanges", "user.city.saveChanges");
      ValueLabel.differencesExist(user0, derivedVariable1, valueLabel1, valueLabel0);
      ValueLabel.validateFields(valueLabel1);
      derivedVariable1.removeValueLabel(valueLabel0);
      User user1 = new User();
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user1, derivedVariable1, derivedVariable1);
      assertNotNull(macawChangeEvent0);
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertEquals(0, macawChangeEvent0.getChangedObjectIdentifier());
      
      user1.setCounty("Wp6fOv)`T4");
      User.detectFieldChanges(user0, user1, user0);
      user1.setFirstName("JB%di_YJ");
      DerivedVariable derivedVariable2 = new DerivedVariable();
      System.setCurrentTimeMillis(0L);
      MacawChangeEvent macawChangeEvent1 = Variable.detectChangesInAlternativeVariable(user0, derivedVariable1, (Variable) null);
      assertNull(macawChangeEvent1);
      assertFalse(derivedVariable1.isCleaned());
      assertFalse(derivedVariable1.isCoded());
      assertFalse(derivedVariable1.isNewRecord());
      assertEquals(0, derivedVariable1.getIdentifier());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.811747493712821
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.trimToSize();
      arrayList0.listIterator();
      derivedVariable0.addSupportingDocuments(arrayList0);
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.DELETE;
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      ValueLabel.validateFields(valueLabel0);
      valueLabel0.setMissingValue(true);
      derivedVariable0.removeValueLabel(valueLabel0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setAlternativeVariable(derivedVariable1);
      derivedVariable1.getDisplayName();
      derivedVariable0.setAvailability("UNABLE_TO_GET_ALIAS_FILE_PATH_NAME");
      derivedVariable0.getCleaningDescription();
      derivedVariable0.setIdentifier((-2883));
      User user0 = new User("general.fieldValue.blank", "");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.setCoded(true);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable1.removeOntologyTerm(ontologyTerm0);
      derivedVariable1.setFilePath("UNABLE_TO_GET_ALIAS_FILE_PATH_NAME");
      derivedVariable0.getFilePath();
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      assertTrue(derivedVariable0.isCoded());
      assertEquals("UNABLE_TO_GET_ALIAS_FILE_PATH_NAME", derivedVariable1.getFilePath());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.209467851135524
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.getDisplayName();
      derivedVariable0.setAvailability("c3UZts4z!|a");
      User user0 = new User("c3UZts4z!|a", "");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      User user1 = new User();
      ArrayList<MacawChangeEvent> arrayList1 = SupportingDocument.detectFieldChanges(user0, supportingDocument1, supportingDocument0);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument0.setTitle("c3UZts4z!|a");
      arrayList1.add(macawChangeEvent0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) ontologyTerm0);
      predicate0.or(predicate1);
      predicate0.test(supportingDocument0);
      predicate1.negate();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      User user2 = new User("", ")");
      Variable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      assertEquals("c3UZts4z!|a", derivedVariable0.getAvailability());
      
      derivedVariable1.clone();
      derivedVariable1.getName();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user1, derivedVariable1, derivedVariable2);
      derivedVariable2.createVariableSummary();
      assertFalse(derivedVariable2.isCoded());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.trimToSize();
      arrayList0.listIterator();
      derivedVariable0.addSupportingDocuments(arrayList0);
      derivedVariable0.columnStart = "";
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.clone();
      SupportingDocument supportingDocument1 = (SupportingDocument)supportingDocument0.clone();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.columnEnd = "SxBP~[p_4{I";
      derivedVariable0.containsSourceVariable(rawVariable0);
      rawVariable0.setCodeBookNumber("");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.removeSourceVariable(derivedVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable1.getOntologyTerms();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      arrayList1.add(ontologyTerm1);
      DerivedVariable derivedVariable3 = new DerivedVariable();
      derivedVariable3.setCodeBookNumber("[K 14:`>hP1wdEa(S`E");
      assertEquals("[K 14:`>hP1wdEa(S`E", derivedVariable3.getCodeBookNumber());
      
      ArrayList<OntologyTerm> arrayList2 = new ArrayList<OntologyTerm>();
      derivedVariable0.setOntologyTerms(arrayList2);
      ArrayList<SupportingDocument> arrayList3 = new ArrayList<SupportingDocument>();
      derivedVariable2.getSupportingDocuments();
      derivedVariable2.removeSupportingDocuments(arrayList3);
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.setOntologyTerms(arrayList1);
      rawVariable2.getOntologyTerms();
      assertEquals(0, rawVariable2.getIdentifier());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1978392433058276
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      rawVariable0.setValueLabels(arrayList0);
      rawVariable0.setCleaned(false);
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.EDIT;
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      rawVariable0.removeValueLabel(valueLabel0);
      rawVariable0.setAlias("JIc#3*2n7");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      User user0 = new User();
      OntologyTerm.detectFieldChanges(user0, ontologyTerm0, ontologyTerm0);
      ontologyTerm0.setDescription("JIc#3*2n7");
      user0.setLastName("JIc#3*2n7");
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      rawVariable0.clone();
      rawVariable0.getNotes();
      assertEquals("JIc#3*2n7", rawVariable0.getAlias());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setDescription("Y;]26 j7F");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate1.or(predicate0);
      predicate2.or(predicate1);
      predicate1.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate1);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument4.setIsNewRecord(true);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList0.add(supportingDocument4);
      ArrayList<SupportingDocument> arrayList2 = new ArrayList<SupportingDocument>();
      derivedVariable0.removeSupportingDocuments(arrayList2);
      derivedVariable0.getForm();
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5052437221976294
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("yZ)xGPq6]b/!BzbQh");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setLabel("_0");
      User user0 = new User();
      user0.setFirstName("4Pxri/qN!h");
      User user1 = new User();
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      predicate0.negate();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate0);
      predicate2.negate();
      predicate3.or(predicate5);
      Predicate<Object> predicate6 = predicate1.and(predicate3);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      predicate7.and(predicate4);
      predicate7.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate2);
      arrayList0.add(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      arrayList0.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = derivedVariable1.getSupportingDocuments();
      derivedVariable1.removeSupportingDocuments(arrayList1);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.getDisplayItemIdentifier();
      derivedVariable0.getAvailability();
      Variable.validateFields(derivedVariable0);
      assertEquals("_0", derivedVariable0.getLabel());
      assertEquals("Unknown", derivedVariable0.getAvailability());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.0969794109651376
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.questionNumber = null;
      User user0 = new User("eG4>3Saf'+.t9h=ES", "/mGI#;i`");
      // Undeclared exception!
      try { 
        Variable.detectFieldChanges(user0, derivedVariable2, derivedVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.util.ValidationUtility", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.2913361527953433
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      valueLabel1.clone();
      ValueLabel.validateFields(valueLabel1);
      valueLabel0.setMissingValue(false);
      derivedVariable1.removeValueLabel(valueLabel0);
      derivedVariable1.setOntologyTerms((ArrayList<OntologyTerm>) null);
      derivedVariable0.setAlternativeVariable(derivedVariable1);
      derivedVariable0.getDisplayName();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setIdentifier(730);
      supportingDocument1.getDisplayName();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      arrayList0.add(supportingDocument1);
      ArrayList<SupportingDocument> arrayList1 = derivedVariable0.getSupportingDocuments();
      derivedVariable1.addSupportingDocuments(arrayList1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.setAlternativeVariable(derivedVariable2);
      // Undeclared exception!
      try { 
        derivedVariable1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1272886853327275
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      User.detectFieldChanges(user0, user0, user0);
      user0.setFirstName("#kbZo<{Hr");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) rawVariable0);
      ArrayList<MacawChangeEvent> arrayList1 = User.detectFieldChanges(user0, user0, user0);
      assertTrue(arrayList1.equals((Object)arrayList0));
      
      user0.setFirstName("#kbZo<{Hr");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      VariableSummary variableSummary0 = derivedVariable0.createVariableSummary();
      assertEquals(0, variableSummary0.getIdentifier());
      
      String string0 = rawVariable0.getCategory();
      assertEquals("Unknown", string0);
      assertEquals("Unknown", rawVariable0.getAvailability());
      assertFalse(rawVariable0.isCleaned());
      assertFalse(rawVariable0.isCoded());
      assertEquals("Unknown", rawVariable0.getCleaningStatus());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1272886853327275
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      user0.setUserID("general.error.blankField");
      user0.setUserID("Z/2'+(g{'8v20*e+");
      User.detectFieldChanges(user0, user0, user0);
      user0.setPassword("r>|>WNFby#eT#J)'If");
      user0.setFirstName("variable.label.label");
      Predicate.isEqual((Object) "variable.label.label");
      User user1 = new User();
      User user2 = new User("~&m{", (String) null);
      User user3 = new User();
      User.detectFieldChanges(user3, user0, user3);
      // Undeclared exception!
      try { 
        rawVariable0.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.295204976148718
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setForm("n;zo2X%sQ8P7L`");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.updateOntologyTerm(ontologyTerm0);
      ontologyTerm0.setNameSpace("n;zo2X%sQ8P7L`");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFilePath("y4p}V~.1M");
      supportingDocument0.getDisplayName();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable1.getSupportingDocuments();
      arrayList0.add(supportingDocument0);
      supportingDocument0.setIdentifier(2937);
      User user0 = new User("Bb+Cy\"Ik $v?8I*O2", "n;zo2X%sQ8P7L`");
      Variable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setIdentifier((-1109));
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      arrayList1.add(supportingDocument2);
      derivedVariable0.addSupportingDocuments(arrayList0);
      assertEquals("n;zo2X%sQ8P7L`", derivedVariable0.getForm());
      
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable1.setAlternativeVariable(derivedVariable2);
      derivedVariable1.clone();
      derivedVariable2.getFilePath();
      derivedVariable2.setCodeBookNumber("");
      derivedVariable1.getName();
      assertEquals("Unknown", derivedVariable1.getAvailability());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4444193823881033
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      derivedVariable0.form = "_0";
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable1.setLabel("UNABLE_TO_CHECK_VARIABLE_DUPLICATES");
      User user0 = new User();
      user0.setFirstName("variable.year.label");
      User user1 = new User("_0", "_0");
      DerivedVariable derivedVariable2 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user1, derivedVariable0, derivedVariable2);
      assertEquals("_0", derivedVariable0.getForm());
      
      DerivedVariable derivedVariable3 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      Predicate<SupportingDocument> predicate0 = Predicate.isEqual((Object) macawChangeEvent0);
      arrayList0.removeIf(predicate0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument1);
      derivedVariable2.removeSupportingDocuments(arrayList0);
      DerivedVariable derivedVariable4 = new DerivedVariable();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      derivedVariable2.containsSupportingDocument(supportingDocument0);
      derivedVariable4.createVariableSummary();
      assertEquals("Unknown", derivedVariable4.getAvailability());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.191013317336941
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setTitle("UNABLE_TO_CHECK_AVAILABILITY_STATE_EXISTS");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) supportingDocument1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      predicate1.test(predicate3);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      predicate4.and(predicate1);
      predicate0.or(predicate3);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      arrayList0.removeIf(predicate6);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      ArrayList<SupportingDocument> arrayList1 = rawVariable0.getSupportingDocuments();
      arrayList1.add(supportingDocument0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      // Undeclared exception!
      try { 
        derivedVariable0.removeSupportingDocuments((ArrayList<SupportingDocument>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setDescription("=gK+#");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument2);
      supportingDocument2.setDocumentCode("DUPLICATE_CATEGORY");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      SupportingDocument supportingDocument5 = new SupportingDocument();
      supportingDocument2.setFileName("user.city.saveChanges");
      SupportingDocument supportingDocument6 = new SupportingDocument();
      supportingDocument6.setFileName("_Q");
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument6);
      assertTrue(boolean0);
      
      derivedVariable0.getLabel();
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCleaned());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertFalse(derivedVariable0.isCoded());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument0);
      supportingDocument1.setDocumentCode("|-=a");
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      RawVariable rawVariable1 = new RawVariable();
      Predicate<SupportingDocument> predicate0 = Predicate.isEqual((Object) rawVariable1);
      Predicate<SupportingDocument> predicate1 = predicate0.negate();
      Predicate<SupportingDocument> predicate2 = predicate1.and(predicate0);
      Predicate<SupportingDocument> predicate3 = predicate2.or(predicate0);
      arrayList0.removeIf(predicate3);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList0.add(supportingDocument0);
      derivedVariable0.removeSupportingDocuments(arrayList1);
      System.setCurrentTimeMillis(1L);
      boolean boolean0 = rawVariable1.isNewRecord();
      assertFalse(boolean0);
      
      derivedVariable0.getQuestionNumber();
      assertFalse(derivedVariable0.isCleaned());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertFalse(derivedVariable0.isCoded());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.475225923746323
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList0 = derivedVariable0.getOntologyTerms();
      derivedVariable0.addOntologyTerms(arrayList0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("yZ)xGPq6]b/!BzbQh");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setLabel("_0");
      User user0 = new User();
      user0.setFirstName("4Pxri/qN!h");
      User user1 = new User();
      DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate3.and(predicate0);
      predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate3.negate();
      predicate1.or(predicate6);
      Predicate<Object> predicate7 = predicate2.and(predicate4);
      Predicate<Object> predicate8 = predicate5.or(predicate7);
      predicate8.negate();
      ArrayList<SupportingDocument> arrayList1 = derivedVariable0.getSupportingDocuments();
      arrayList1.removeIf(predicate3);
      arrayList1.add(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList1.add(supportingDocument0);
      arrayList1.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList2 = derivedVariable1.getSupportingDocuments();
      derivedVariable1.removeSupportingDocuments(arrayList2);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.notes = "variable.codeBookNumber.label";
      rawVariable0.setCleaned(false);
      rawVariable0.setQuestionNumber("variable.codeBookNumber.label");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      rawVariable0.setYear("");
      ontologyTerm0.setTerm("");
      rawVariable0.addOntologyTerm(ontologyTerm0);
      rawVariable0.setName("{_Pt");
      rawVariable0.getName();
      rawVariable0.getCleaningDescription();
      assertEquals("variable.codeBookNumber.label", rawVariable0.getQuestionNumber());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.367836267528917
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("yZ)xGPq6]b/!BzbQh");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setLabel("_0");
      User user0 = new User();
      derivedVariable0.questionNumber = "4Pxri/qN!h";
      user0.setFirstName("4Pxri/qN!h");
      User user1 = new User();
      ArrayList<MacawChangeEvent> arrayList0 = DerivedVariable.detectFieldChanges(user0, derivedVariable1, derivedVariable0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate2.test(arrayList0);
      predicate1.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate0);
      Predicate<Object> predicate6 = predicate1.negate();
      predicate5.or(predicate6);
      predicate4.and(predicate2);
      predicate5.or(predicate2);
      predicate0.negate();
      ArrayList<SupportingDocument> arrayList1 = derivedVariable0.getSupportingDocuments();
      arrayList1.removeIf(predicate0);
      // Undeclared exception!
      try { 
        RawVariable.validateFields((RawVariable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.3355968637819426
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("yZ)xGPq6]b/!BzbQh");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.setLabel("_0");
      User user0 = new User();
      DerivedVariable.detectFieldChanges(user0, derivedVariable0, derivedVariable0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate0.test(ontologyTerm1);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) supportingDocument1);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate4.and(predicate0);
      Predicate<Object> predicate7 = predicate4.negate();
      predicate1.or(predicate7);
      Predicate<Object> predicate8 = predicate2.and(predicate5);
      predicate6.and(predicate8);
      Predicate<Object> predicate9 = predicate6.or(predicate8);
      predicate9.or(predicate7);
      predicate9.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate4);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList1.add(supportingDocument2);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.159929968795359
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.setColumnStart("$g(zl>KzQ");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.cloneAttributes(rawVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      ChangeEventType changeEventType0 = ChangeEventType.ALIAS_FILE_PATH;
      macawChangeEvent0.setChangeType(changeEventType0);
      User user0 = new User("$g(zl>KzQ", "$g(zl>KzQ");
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      supportingDocument0.setTitle("Td0");
      arrayList0.add(macawChangeEvent0);
      assertEquals(1, arrayList0.size());
      
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      RawVariable rawVariable2 = new RawVariable();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) rawVariable2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.test("Td0");
      predicate2.negate();
      predicate1.and(predicate0);
      predicate2.and(predicate3);
      System.setCurrentTimeMillis(60);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) derivedVariable2);
      predicate4.or(predicate1);
      VariableSummary variableSummary0 = derivedVariable1.createVariableSummary();
      assertEquals(0, variableSummary0.getIdentifier());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.0982737395252498
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<ValueLabel> arrayList0 = derivedVariable0.getValueLabels();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      arrayList0.ensureCapacity(0);
      derivedVariable0.setValueLabels(arrayList0);
      derivedVariable0.setIdentifier(0);
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setName(" 3<c)");
      Variable.validateFields(rawVariable0);
      assertEquals(" 3<c)", rawVariable0.getDisplayName());
      assertEquals("Unknown", rawVariable0.getAvailability());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1272886853327275
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setYear("iG");
      rawVariable0.form = "general.fieldValue.blank";
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      user0.setUserID("r>|>WNFby#eT#J)'If");
      User.detectFieldChanges(user0, user0, user0);
      user0.setFirstName("==");
      Predicate.isEqual((Object) null);
      String string0 = "l9lG";
      User user1 = new User();
      // Undeclared exception!
      try { 
        User.detectFieldChanges((User) null, (User) null, (User) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.User", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.2489051151076214
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = (OntologyTerm)ontologyTerm0.clone();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      ontologyTerm0.setNameSpace("-LHA");
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.cloneAttributes(rawVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      RawVariable rawVariable2 = new RawVariable();
      RawVariable rawVariable3 = new RawVariable();
      rawVariable3.columnEnd = "-LHA";
      rawVariable2.notes = "-LHA";
      ontologyTerm1.setDescription("IMb}+e6i!'q");
      rawVariable3.setColumnEnd("variable.notes.label");
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      rawVariable2.getNotes();
      rawVariable1.getName();
      rawVariable2.cloneAttributes(rawVariable3);
      assertEquals("", rawVariable3.getColumnEnd());
      assertEquals("", rawVariable3.getForm());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.170939530196901
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      String string0 = "$g\\(zl>KzQ";
      derivedVariable0.setColumnStart("$g(zl>KzQ");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.cloneAttributes(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      rawVariable0.cloneAttributes(rawVariable1);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      RawVariable rawVariable2 = new RawVariable();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      // Undeclared exception!
      try { 
        rawVariable2.updateOntologyTerm((OntologyTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.26843487100681
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.codeBookNumber = null;
      derivedVariable0.setColumnEnd("user.city.saveChanges");
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      String string0 = "mGD;";
      supportingDocument0.setDescription("mGD;");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument1);
      arrayList0.add(supportingDocument0);
      derivedVariable0.setSupportingDocuments(arrayList0);
      derivedVariable0.setCoded(true);
      derivedVariable0.getIdentifier();
      ArrayList<Variable> arrayList1 = derivedVariable0.getSourceVariables();
      derivedVariable0.removeSourceVariables(arrayList1);
      derivedVariable0.clone();
      derivedVariable0.setCategory("user.city.saveChanges");
      derivedVariable0.getDisplayItemIdentifier();
      derivedVariable0.getSourceVariables();
      derivedVariable0.getYear();
      try { 
        DerivedVariable.validateFields(derivedVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.DerivedVariable", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3719715799284455
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setYear("3Y>NR%VEV/e");
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      rawVariable0.addSupportingDocuments(arrayList1);
      rawVariable0.addOntologyTerms(arrayList0);
      ArrayList<SupportingDocument> arrayList2 = new ArrayList<SupportingDocument>();
      rawVariable0.removeSupportingDocuments(arrayList2);
      rawVariable0.clone();
      rawVariable0.isNewRecord();
      rawVariable0.isCleaned();
      Variable.validateFields(rawVariable0);
      rawVariable0.getQuestionNumber();
      // Undeclared exception!
      try { 
        rawVariable0.cloneAttributes((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.1978392433058276
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      ArrayList<ValueLabel> arrayList0 = rawVariable0.getValueLabels();
      rawVariable0.setValueLabels(arrayList0);
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.removeValueLabel(valueLabel0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setLabel("4Pxri/qN!h");
      User user0 = new User();
      user0.setFirstName("variable.year.label");
      User user1 = new User();
      user1.setFirstName("INVALID_CATEGORY");
      User user2 = new User("2Od|Wf", "HNz/:y/I D1a2");
      User user3 = new User();
      DerivedVariable.detectFieldChanges(user3, derivedVariable0, derivedVariable0);
      derivedVariable0.cloneAttributes(rawVariable0);
      assertEquals("4Pxri/qN!h", derivedVariable0.getLabel());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.357306009900858
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.trimToSize();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      arrayList0.listIterator();
      derivedVariable0.addSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.clone();
      derivedVariable0.addSupportingDocument(supportingDocument1);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setDescription("A/+1v");
      RawVariable rawVariable0 = new RawVariable();
      supportingDocument1.setDocumentCode("A/+1v");
      rawVariable0.removeOntologyTerm(ontologyTerm0);
      rawVariable0.setCleaned(true);
      derivedVariable1.codeBookNumber = "A/+1v";
      rawVariable0.setColumnStart("A/+1v");
      RawVariable rawVariable1 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      rawVariable1.cloneAttributes(derivedVariable2);
      rawVariable0.getCodeBookNumber();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      rawVariable1.setCoded(false);
      derivedVariable1.cloneAttributes(rawVariable0);
      derivedVariable1.removeSourceVariable(derivedVariable0);
      assertEquals("A/+1v", derivedVariable1.getCodeBookNumber());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setColumnStart("^!t.l=Adj>i");
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) supportingDocument0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate3.test((Object) null);
      arrayList0.removeIf(predicate3);
      arrayList0.add((Variable) derivedVariable0);
      derivedVariable0.addSourceVariables(arrayList0);
      derivedVariable0.getColumnEnd();
      assertEquals("^!t.l=Adj>i", derivedVariable0.getColumnStart());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.columnEnd = ",\"0(\"uJmfAQ1";
      ValueLabel.EditingOperationType valueLabel_EditingOperationType0 = ValueLabel.EditingOperationType.DELETE;
      valueLabel0.getDisplayName();
      valueLabel0.setLabel(" type=");
      valueLabel0.setEditingOperationType(valueLabel_EditingOperationType0);
      derivedVariable0.addValueLabel(valueLabel0);
      derivedVariable0.setAlias("");
      derivedVariable0.setFilePath("");
      String string0 = derivedVariable0.getYear();
      assertEquals("", derivedVariable0.getFilePath());
      assertEquals(0, derivedVariable0.getIdentifier());
      assertEquals("", derivedVariable0.getAlias());
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isNewRecord());
      assertEquals("", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SupportingDocument supportingDocument0 = new SupportingDocument();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument1);
      supportingDocument0.setDocumentCode("|-=a");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument2.setFileName("8+");
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument0);
      assertTrue(boolean0);
      
      DerivedVariable derivedVariable0 = new DerivedVariable();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<Variable> arrayList0 = derivedVariable1.getSourceVariables();
      derivedVariable0.addSourceVariables(arrayList0);
      String string0 = derivedVariable0.getDisplayItemIdentifier();
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("0", string0);
      assertFalse(derivedVariable0.isNewRecord());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.221751508627231
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setIsNewRecord(false);
      ValueLabel valueLabel0 = new ValueLabel();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.getDisplayName();
      derivedVariable0.setAvailability("");
      derivedVariable0.getCleaningDescription();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      rawVariable0.addSupportingDocuments(arrayList0);
      User user0 = new User("user.city.saveChanges", "");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      assertNotNull(macawChangeEvent0);
      assertEquals("Changed variable \"Alternative Variable\", field \"\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertEquals(0, macawChangeEvent0.getChangedObjectIdentifier());
      
      derivedVariable0.setCoded(false);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) rawVariable0);
      User user1 = new User();
      ArrayList<MacawChangeEvent> arrayList2 = SupportingDocument.detectFieldChanges(user1, supportingDocument1, supportingDocument0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) supportingDocument0);
      predicate0.or(predicate1);
      predicate0.test(arrayList2);
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.negate();
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      predicate4.or(predicate3);
      arrayList1.removeIf(predicate4);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.cloneAttributes(derivedVariable1);
      assertFalse(derivedVariable1.isNewRecord());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("Unknown", derivedVariable1.getCleaningStatus());
      assertEquals("Unknown", derivedVariable1.getCategory());
      assertEquals(0, derivedVariable1.getIdentifier());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.945910149055313
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setCleaned(true);
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.addValueLabel(valueLabel0);
      ValueLabel valueLabel1 = new ValueLabel();
      rawVariable0.setCodeBookNumber("variable.isCleaned.saveChanges.changedToNotClean");
      rawVariable0.addValueLabel(valueLabel1);
      rawVariable0.setQuestionNumber((String) null);
      rawVariable0.getDisplayItemIdentifier();
      rawVariable0.getYear();
      assertEquals("variable.isCleaned.saveChanges.changedToNotClean", rawVariable0.getCodeBookNumber());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      String string0 = rawVariable0.getCleaningStatus();
      assertEquals("Unknown", string0);
      assertNotNull(string0);
      
      boolean boolean0 = rawVariable0.isCleaned();
      assertFalse(boolean0);
      
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      rawVariable0.removeOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setDescription((String) null);
      ontologyTerm0.clone();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isNewRecord());
      assertEquals("0", rawVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.2878052770017314
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      User user0 = new User("user.city.saveChanges", "user.city.saveChanges");
      ValueLabel.differencesExist(user0, derivedVariable0, valueLabel1, valueLabel0);
      ValueLabel.validateFields(valueLabel1);
      derivedVariable0.removeValueLabel(valueLabel0);
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      RawVariable rawVariable0 = new RawVariable();
      User user1 = new User();
      User.detectFieldChanges(user0, user1, user0);
      rawVariable0.cloneAttributes(derivedVariable0);
      rawVariable0.setCleaned(true);
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      rawVariable0.setForm("");
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<ValueLabel> arrayList0 = derivedVariable0.getValueLabels();
      ValueLabel valueLabel0 = new ValueLabel();
      arrayList0.add(valueLabel0);
      arrayList0.ensureCapacity(0);
      derivedVariable0.setValueLabels(arrayList0);
      derivedVariable0.setIdentifier(0);
      ArrayList<Variable> arrayList1 = new ArrayList<Variable>();
      derivedVariable0.addSourceVariables(arrayList1);
      derivedVariable0.getLabel();
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertFalse(derivedVariable0.isNewRecord());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.219835703909827
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.getDisplayName();
      String string0 = "INVALID_ADMINISTRATOR";
      User user0 = new User("", "INVALID_ADMINISTRATOR");
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel.differencesExist(user0, rawVariable0, valueLabel0, valueLabel0);
      ValueLabel.validateFields(valueLabel0);
      derivedVariable0.removeValueLabel(valueLabel0);
      User user1 = new User();
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, rawVariable0);
      user1.setCounty("");
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      User user2 = new User();
      User.detectFieldChanges(user0, user1, user1);
      rawVariable2.setCleaned(true);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      System.setCurrentTimeMillis((-80L));
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      try { 
        RawVariable.validateFields(rawVariable2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.382411335815679
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      User user0 = new User();
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ArrayList<MacawChangeEvent> arrayList0 = User.detectFieldChanges(user0, user0, user0);
      user0.setFirstName("DUPLICATE_VALUE_LABELS_WITHIN_LIST");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.test(arrayList0);
      predicate2.and(predicate0);
      predicate0.and(predicate1);
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, derivedVariable0);
      Predicate.isEqual((Object) macawChangeEvent0);
      predicate1.or(predicate0);
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.1272886853327275
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      rawVariable0.setAlternativeVariable(derivedVariable0);
      Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      user0.setUserID("r>|>WNFby#eT#J)'If");
      User.detectFieldChanges(user0, user0, user0);
      user0.setFirstName("9lG");
      Predicate.isEqual((Object) "G~#$;rBvb;P\"");
      User user1 = new User("yZ)xGPq6]b/!BzbQh", (String) null);
      // Undeclared exception!
      try { 
        User.detectFieldChanges(user1, user1, user1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.User", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getAlternativeVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      User user0 = null;
      // Undeclared exception!
      try { 
        Variable.validateFields((Variable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaningStatus((String) null);
      ArrayList<ValueLabel> arrayList0 = new ArrayList<ValueLabel>();
      arrayList0.spliterator();
      ValueLabel valueLabel0 = new ValueLabel();
      valueLabel0.setMissingValue(true);
      valueLabel0.setMissingValue(false);
      arrayList0.add(valueLabel0);
      derivedVariable0.setValueLabels(arrayList0);
      derivedVariable0.getCleaningStatus();
      derivedVariable0.setAlias("-b15b2bG5zxr<th7A");
      derivedVariable0.setAvailability((String) null);
      derivedVariable0.setCleaningDescription("-b15b2bG5zxr<th7A");
      // Undeclared exception!
      try { 
        Variable.validateFields(derivedVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.util.ValidationUtility", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.259564415698713
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      rawVariable0.addSupportingDocument(supportingDocument0);
      supportingDocument0.setFileName("8+");
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument0);
      assertTrue(boolean0);
      
      User user0 = new User("user.password.saveChanges", "8+");
      MacawChangeEvent macawChangeEvent0 = Variable.detectChangesInAlternativeVariable(user0, rawVariable0, rawVariable0);
      assertNotNull(macawChangeEvent0);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) macawChangeEvent0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate.isEqual((Object) "user.password.saveChanges");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) ontologyTerm0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      RawVariable rawVariable1 = (RawVariable)rawVariable0.clone();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) rawVariable1);
      Predicate<Object> predicate6 = predicate5.or(predicate1);
      predicate1.or(predicate5);
      predicate4.test(predicate0);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate2.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate4);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate3.or(predicate10);
      predicate11.or(predicate3);
      predicate11.and(predicate7);
      predicate8.or(predicate9);
      assertEquals("Unknown", rawVariable1.getCategory());
      assertEquals(0, rawVariable1.getIdentifier());
      assertFalse(rawVariable1.isNewRecord());
      assertEquals("Unknown", rawVariable1.getAvailability());
      assertEquals("Unknown", rawVariable1.getCleaningStatus());
      assertFalse(rawVariable1.isCoded());
      assertEquals("Changed variable \"Alternative Variable\", field \"blank\", from \"\" to \"{3}\".", macawChangeEvent0.getChangeMessage());
      assertEquals(0, (int)macawChangeEvent0.getVariableOwnerID());
      
      predicate2.negate();
      ArrayList<SupportingDocument> arrayList0 = rawVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate8);
      arrayList0.add(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument1);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.removeSupportingDocuments(arrayList0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      assertFalse(derivedVariable1.isCleaned());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.232305687062659
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setIdentifier((-2021161078));
      supportingDocument0.setIsNewRecord(false);
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      derivedVariable0.cloneAttributes(derivedVariable0);
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      User user0 = new User();
      SupportingDocument.detectFieldChanges(user0, supportingDocument1, supportingDocument1);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument2.setTitle((String) null);
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) macawChangeEvent0);
      predicate0.test(user0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      arrayList0.add(supportingDocument1);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument2);
      VariableSummary variableSummary0 = derivedVariable0.createVariableSummary();
      assertEquals(0, variableSummary0.getIdentifier());
      
      DerivedVariable derivedVariable1 = (DerivedVariable)derivedVariable0.clone();
      assertEquals("Unknown", derivedVariable1.getCategory());
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable1.isCleaned());
      assertEquals("Unknown", derivedVariable1.getCleaningStatus());
      assertEquals("Unknown", derivedVariable1.getAvailability());
      assertFalse(derivedVariable0.isCoded());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.1329577295898043
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      ontologyTerm0.setNameSpace("SUPPORCING_DOCUMENT");
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      RawVariable rawVariable0 = new RawVariable();
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) macawChangeEvent0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.and(predicate0);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate5.and(predicate3);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate3.or(predicate8);
      predicate6.and(predicate9);
      Predicate<Object> predicate10 = predicate8.and(predicate5);
      Predicate<Object> predicate11 = predicate8.or(predicate0);
      predicate2.or(predicate11);
      Predicate<Object> predicate12 = predicate7.negate();
      Predicate<Object> predicate13 = predicate10.or(predicate12);
      predicate13.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable1.getSupportingDocuments();
      arrayList0.removeIf(predicate7);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList0.add(supportingDocument0);
      derivedVariable0.removeSupportingDocuments(arrayList1);
      System.setCurrentTimeMillis((-1090L));
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setCleaned(false);
      derivedVariable0.setCoded(false);
      derivedVariable0.getCleaningDescription();
      boolean boolean0 = derivedVariable0.isCleaned();
      assertFalse(derivedVariable0.isCoded());
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2994270309115614
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      User user0 = new User();
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.questionNumber = "FC_-E$Ze5ev`Lw";
      user0.setLastName("macaw.system.MacawErrorType");
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      Object object0 = derivedVariable0.clone();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate3.or(predicate2);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList1.removeIf(predicate2);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      arrayList1.add(supportingDocument0);
      derivedVariable0.removeSupportingDocuments(arrayList1);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      derivedVariable0.createVariableSummary();
      RawVariable rawVariable0 = new RawVariable();
      try { 
        RawVariable.validateFields(rawVariable0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.RawVariable", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.215871484586937
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm1);
      derivedVariable0.setColumnStart("$g(zl>KzQ");
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(rawVariable0);
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      RawVariable rawVariable3 = new RawVariable();
      rawVariable0.cloneAttributes(derivedVariable0);
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm1);
      RawVariable rawVariable4 = new RawVariable();
      RawVariable rawVariable5 = new RawVariable();
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      derivedVariable1.setOntologyTerms(arrayList0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm1);
      assertEquals("$g(zl>KzQ", rawVariable0.getColumnStart());
      
      OntologyTerm ontologyTerm3 = new OntologyTerm();
      Predicate.isEqual((Object) null);
      RawVariable rawVariable6 = new RawVariable();
      User user0 = new User();
      System.setCurrentTimeMillis(1248L);
      OntologyTerm ontologyTerm4 = new OntologyTerm();
      derivedVariable1.updateOntologyTerm(ontologyTerm4);
      rawVariable3.getName();
      rawVariable1.getIdentifier();
      assertFalse(rawVariable1.isCoded());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.1681918463601217
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      User user0 = new User();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.codeBookNumber = "4'#|=F<7jt!3vA=+lD";
      ArrayList<MacawChangeEvent> arrayList0 = Variable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      user0.setUserID("r>|>WNFby#eT#J)'If");
      user0.setUserID("r>|>WNFby#eT#J)'If");
      RawVariable rawVariable1 = new RawVariable();
      RawVariable rawVariable2 = new RawVariable();
      rawVariable2.cloneAttributes(rawVariable0);
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      RawVariable rawVariable3 = new RawVariable();
      RawVariable rawVariable4 = new RawVariable();
      rawVariable4.setColumnEnd("macaw.util.ValidationUtility");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      rawVariable0.updateOntologyTerm(ontologyTerm0);
      OntologyTerm ontologyTerm2 = new OntologyTerm();
      Predicate.isEqual((Object) null);
      RawVariable rawVariable5 = new RawVariable();
      User user1 = new User();
      ArrayList<MacawChangeEvent> arrayList1 = RawVariable.detectFieldChanges(user1, rawVariable3, rawVariable4);
      assertEquals("macaw.util.ValidationUtility", rawVariable4.getColumnEnd());
      assertFalse(arrayList1.equals((Object)arrayList0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1689724747006105
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      derivedVariable0.form = "_0";
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      User user0 = new User();
      SupportingDocument.detectFieldChanges(user0, supportingDocument1, supportingDocument0);
      predicate0.test(supportingDocument1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate0.and(predicate1);
      predicate1.or(predicate2);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      arrayList0.removeIf(predicate1);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      arrayList0.add(supportingDocument3);
      derivedVariable1.removeSupportingDocuments(arrayList0);
      assertEquals("_0", derivedVariable1.getForm());
      
      DerivedVariable derivedVariable3 = new DerivedVariable();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument2);
      derivedVariable3.createVariableSummary();
      assertFalse(derivedVariable3.isNewRecord());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.191013317336941
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      User user0 = new User("FKmePY#FF", "FKmePY#FF");
      user0.setAffiliation("9lG");
      user0.setPassword("");
      user0.setAddressLine1("9lG");
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.columnEnd = "9lG";
      rawVariable0.setCleaningDescription("rTRpvF`w");
      rawVariable0.setNotes("E!)EoDkmGb6_yP8.");
      RawVariable.detectFieldChanges(user0, rawVariable0, rawVariable0);
      rawVariable0.getColumnStart();
      rawVariable0.getForm();
      assertEquals("9lG", rawVariable0.getColumnEnd());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.218188622753168
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("SUPPORTING_DOCUMENT", "SUPPORTING_DOCUMENT");
      derivedVariable0.columnEnd = "SUPPORTING_DOCUMENT";
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.setLabel("variable.cleaningDescription.label");
      ArrayList<Variable> arrayList0 = derivedVariable0.getSourceVariables();
      derivedVariable0.removeSourceVariables(arrayList0);
      User user1 = new User();
      user0.setFirstName("&_Hv2/3PKfKsP$8z,");
      User user2 = new User("&_Hv2/3PKfKsP$8z,", "UNABLE_TO_UPDATE_ALIAS_FILE_PATH");
      user2.setPassword("'");
      DerivedVariable.detectFieldChanges(user2, derivedVariable0, derivedVariable0);
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setColumnEnd("SUPPORTING_DOCUMENT");
      derivedVariable0.cloneAttributes(rawVariable0);
      rawVariable0.createVariableSummary();
      derivedVariable0.setSourceVariables(arrayList0);
      assertEquals("SUPPORTING_DOCUMENT", derivedVariable0.getColumnEnd());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<)]y6 j79F");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) derivedVariable0);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Integer integer0 = new Integer((-791));
      predicate5.test(integer0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      predicate5.test(supportingDocument0);
      predicate5.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate6);
      predicate7.or(predicate4);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) supportingDocument0);
      predicate8.and(predicate2);
      predicate3.or(predicate4);
      Predicate<Object> predicate9 = predicate3.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      Predicate<SupportingDocument> predicate10 = Predicate.isEqual((Object) predicate9);
      Predicate<SupportingDocument> predicate11 = predicate10.negate();
      arrayList0.removeIf(predicate11);
      arrayList0.add(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList1.add(supportingDocument1);
      ArrayList<SupportingDocument> arrayList2 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.removeSupportingDocuments(arrayList2);
      System.setCurrentTimeMillis((-2256L));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<)]y6 j79F");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) derivedVariable0);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      Integer integer0 = new Integer((-791));
      predicate5.test(integer0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      predicate5.test(supportingDocument0);
      predicate5.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate0.and(predicate6);
      predicate7.or(predicate4);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) supportingDocument0);
      predicate8.and(predicate2);
      predicate3.or(predicate4);
      Predicate<Object> predicate9 = predicate3.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      Predicate<SupportingDocument> predicate10 = Predicate.isEqual((Object) predicate9);
      Predicate<SupportingDocument> predicate11 = predicate10.negate();
      arrayList0.removeIf(predicate11);
      arrayList0.add(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument1);
      arrayList0.add(supportingDocument1);
      // Undeclared exception!
      try { 
        derivedVariable0.removeSupportingDocuments(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.setNameSpace("yZ)xGPq6]b/!BzbQh");
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.setLabel("_0");
      User user0 = new User();
      user0.setFirstName("4Pxri/qN!h");
      User user1 = new User();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) user0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate1.or(predicate5);
      Predicate<Object> predicate6 = predicate2.and(predicate3);
      Predicate<Object> predicate7 = predicate4.or(predicate6);
      predicate7.negate();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.removeIf(predicate3);
      arrayList0.add(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      ArrayList<SupportingDocument> arrayList1 = new ArrayList<SupportingDocument>();
      arrayList1.add(supportingDocument1);
      // Undeclared exception!
      try { 
        derivedVariable0.removeSupportingDocuments(arrayList0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList$Itr", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.trimToSize();
      arrayList0.listIterator();
      derivedVariable0.addSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      derivedVariable0.containsSupportingDocument(supportingDocument0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      derivedVariable0.getOntologyTerms();
      derivedVariable1.containsSourceVariable(derivedVariable0);
      derivedVariable1.setIsNewRecord(true);
      derivedVariable0.containsSourceVariable(derivedVariable1);
      ArrayList<SupportingDocument> arrayList1 = derivedVariable1.getSupportingDocuments();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      SupportingDocument supportingDocument2 = new SupportingDocument();
      // Undeclared exception!
      try { 
        arrayList1.set((-2004318069), supportingDocument2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2004318069
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setDescription("Y;]26 j7F");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      RawVariable rawVariable1 = new RawVariable();
      rawVariable1.setFilePath((String) null);
      rawVariable1.addSupportingDocument(supportingDocument0);
      supportingDocument0.setDocumentCode("Y;]26 j7F");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument2.setFileName("Y;]26 j7F");
      // Undeclared exception!
      try { 
        rawVariable1.containsSupportingDocument((SupportingDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.168635492241926
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.setFileName("=E:[ go$g![b:R:");
      supportingDocument0.setIsNewRecord(false);
      derivedVariable0.addSupportingDocument(supportingDocument0);
      derivedVariable0.cloneAttributes(derivedVariable0);
      derivedVariable0.setAlias("bz4lGZG+R-7H&%}%~$");
      SupportingDocument supportingDocument1 = new SupportingDocument();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "=E:[ go$g![b:R:");
      User user0 = new User();
      SupportingDocument.detectFieldChanges(user0, supportingDocument1, supportingDocument1);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      supportingDocument2.setTitle((String) null);
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) macawChangeEvent0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate0.test("=E:[ go$g![b:R:");
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      predicate4.negate();
      predicate0.and(predicate1);
      predicate2.and(predicate1);
      predicate2.or(predicate3);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      arrayList0.removeIf(predicate2);
      SupportingDocument supportingDocument3 = new SupportingDocument();
      arrayList0.add(supportingDocument3);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      derivedVariable0.createVariableSummary();
      assertEquals("bz4lGZG+R-7H&%}%~$", derivedVariable0.getAlias());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.129681271475779
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      OntologyTerm ontologyTerm1 = new OntologyTerm();
      derivedVariable0.addOntologyTerm(ontologyTerm0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ontologyTerm0.getDisplayName();
      derivedVariable0.cloneAttributes(derivedVariable1);
      RawVariable rawVariable0 = new RawVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      derivedVariable0.containsOntologyTerm(ontologyTerm0);
      RawVariable rawVariable1 = new RawVariable();
      Integer integer0 = new Integer(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate3);
      predicate7.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      predicate5.or(predicate8);
      predicate4.and(predicate0);
      // Undeclared exception!
      try { 
        Variable.detectChangesInAlternativeVariable((User) null, (Variable) null, rawVariable0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = derivedVariable0.getSupportingDocuments();
      arrayList0.trimToSize();
      arrayList0.listIterator();
      derivedVariable0.addSupportingDocuments(arrayList0);
      derivedVariable0.columnStart = "";
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.clone();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      derivedVariable0.containsSupportingDocument(supportingDocument1);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      ArrayList<OntologyTerm> arrayList1 = derivedVariable1.getOntologyTerms();
      derivedVariable0.setCodeBookNumber((String) null);
      derivedVariable0.setOntologyTerms(arrayList1);
      ArrayList<SupportingDocument> arrayList2 = new ArrayList<SupportingDocument>();
      derivedVariable1.setFilePath("SxBP~[p_4{I");
      derivedVariable1.getFilePath();
      assertEquals("SxBP~[p_4{I", derivedVariable1.getFilePath());
      
      derivedVariable0.getYear();
      assertEquals("0", derivedVariable0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.33695318964312
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      User user0 = new User("SUPPORTING_DOCUMENT", "SUPPORTING_DOCUMENT");
      derivedVariable0.columnEnd = "SUPPORTING_DOCUMENT";
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      derivedVariable0.setLabel("variable.cleaningDescription.label");
      ValueLabel valueLabel0 = new ValueLabel();
      derivedVariable0.addValueLabel(valueLabel0);
      RawVariable rawVariable0 = new RawVariable();
      User user1 = new User((String) null, "SUPPORTING_DOCUMENT");
      Variable.detectFieldChanges(user0, derivedVariable0, rawVariable0);
      ArrayList<Variable> arrayList0 = new ArrayList<Variable>();
      derivedVariable0.addSourceVariables(arrayList0);
      DerivedVariable derivedVariable1 = new DerivedVariable();
      DerivedVariable derivedVariable2 = new DerivedVariable();
      User user2 = new User("blank", "4Pxri/qN!h");
      DerivedVariable derivedVariable3 = new DerivedVariable();
      DerivedVariable derivedVariable4 = new DerivedVariable();
      DerivedVariable.detectFieldChanges(user0, derivedVariable4, derivedVariable0);
      assertEquals("SUPPORTING_DOCUMENT", derivedVariable0.getColumnEnd());
      
      DerivedVariable derivedVariable5 = new DerivedVariable();
      derivedVariable5.getLabel();
      assertFalse(derivedVariable5.isCoded());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.getFilePath();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      arrayList0.trimToSize();
      arrayList0.listIterator();
      derivedVariable0.addSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.clone();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      String string0 = "SxBP~[p_4{I";
      SupportingDocument supportingDocument1 = new SupportingDocument();
      // Undeclared exception!
      try { 
        derivedVariable0.containsSupportingDocument((SupportingDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      derivedVariable0.addSupportingDocuments(arrayList0);
      ArrayList<SupportingDocument> arrayList1 = derivedVariable0.getSupportingDocuments();
      derivedVariable0.addSupportingDocuments(arrayList1);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setDescription("Y;]26 j7F");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument1);
      supportingDocument2.setDocumentCode("Y;]26 j7F");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument4.setFileName("=A");
      boolean boolean0 = rawVariable0.containsSupportingDocument(supportingDocument0);
      assertTrue(boolean0);
      
      derivedVariable0.getColumnEnd();
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCoded());
      assertFalse(derivedVariable0.isCleaned());
      assertEquals(0, derivedVariable0.getIdentifier());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7999587982097305
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.setNotes("^Gg_^5<K[");
      derivedVariable0.setAlternativeVariable(rawVariable0);
      derivedVariable0.getDisplayName();
      String string0 = "c3UZts4z!|a";
      derivedVariable0.setAvailability("c3UZts4z!|a");
      User user0 = new User("c3UZts4z!|a", "");
      Variable.detectChangesInAlternativeVariable(user0, derivedVariable0, derivedVariable0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      ValueLabel valueLabel0 = new ValueLabel();
      ArrayList<MacawChangeEvent> arrayList1 = ValueLabel.detectFieldChanges(user0, derivedVariable0, valueLabel0, valueLabel0);
      int int0 = 136;
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      // Undeclared exception!
      try { 
        arrayList1.set(136, macawChangeEvent0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 136, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.0794415416798357
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.notes = "user.status.saveChanges";
      rawVariable0.form = "";
      ValueLabel valueLabel0 = new ValueLabel();
      rawVariable0.removeValueLabel(valueLabel0);
      rawVariable0.columnStart = "";
      User user0 = new User("CANCEL", "user.status.saveChanges");
      ValueLabel.differencesExist(user0, rawVariable0, valueLabel0, valueLabel0);
      rawVariable0.setCleaningStatus((String) null);
      rawVariable0.addValueLabel(valueLabel0);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      rawVariable0.setSupportingDocuments(arrayList0);
      rawVariable0.getValueLabels();
      assertFalse(rawVariable0.isNewRecord());
      assertFalse(rawVariable0.isCoded());
      assertFalse(rawVariable0.isCleaned());
      assertEquals("", rawVariable0.getDisplayName());
      assertEquals(0, rawVariable0.getIdentifier());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      derivedVariable0.setColumnEnd("XNyE=\"d-NA'F)C");
      SupportingDocument supportingDocument0 = new SupportingDocument();
      derivedVariable0.addSupportingDocument(supportingDocument0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument0.setDescription("UNABLE_TO_CREATE_CHANGE_EVENT");
      SupportingDocument supportingDocument2 = new SupportingDocument();
      RawVariable rawVariable0 = new RawVariable();
      rawVariable0.addSupportingDocument(supportingDocument2);
      supportingDocument0.setDocumentCode("UNABLE_TO_CREATE_USER");
      SupportingDocument supportingDocument3 = new SupportingDocument();
      SupportingDocument supportingDocument4 = new SupportingDocument();
      supportingDocument4.setFileName("UNABLE_TO_CREATE_USER");
      // Undeclared exception!
      try { 
        rawVariable0.containsSupportingDocument((SupportingDocument) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      ValueLabel.validateFields(valueLabel1);
      valueLabel0.setMissingValue(false);
      derivedVariable0.removeValueLabel(valueLabel0);
      derivedVariable0.setOntologyTerms((ArrayList<OntologyTerm>) null);
      derivedVariable0.setAvailability(" type=");
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      // Undeclared exception!
      try { 
        derivedVariable0.removeOntologyTerm(ontologyTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("macaw.businessLayer.Variable", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.0431918705451206
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      ValueLabel valueLabel0 = new ValueLabel();
      ValueLabel valueLabel1 = new ValueLabel();
      User user0 = new User("eG4>3Saf'+.t9h=ES", "eG4>3Saf'+.t9h=ES");
      ValueLabel.differencesExist(user0, derivedVariable0, valueLabel1, valueLabel0);
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      derivedVariable0.removeOntologyTerm(ontologyTerm0);
      SupportingDocument supportingDocument0 = new SupportingDocument();
      Integer integer0 = new Integer((-2086126969));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      User user1 = new User();
      SupportingDocument.detectFieldChanges(user1, supportingDocument0, supportingDocument0);
      SupportingDocument supportingDocument1 = new SupportingDocument();
      supportingDocument1.setTitle((String) null);
      MacawChangeEvent macawChangeEvent0 = new MacawChangeEvent();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) supportingDocument1);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) ontologyTerm0);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      SupportingDocument supportingDocument2 = new SupportingDocument();
      predicate0.test(supportingDocument2);
      predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Object object0 = new Object();
      predicate1.test(object0);
      predicate0.and(predicate4);
      predicate5.and(predicate4);
      ArrayList<SupportingDocument> arrayList0 = new ArrayList<SupportingDocument>();
      SupportingDocument supportingDocument3 = new SupportingDocument();
      arrayList0.add(supportingDocument0);
      derivedVariable0.removeSupportingDocuments(arrayList0);
      SupportingDocument supportingDocument4 = new SupportingDocument();
      boolean boolean0 = derivedVariable0.containsSupportingDocument(supportingDocument0);
      assertFalse(boolean0);
      
      VariableSummary variableSummary0 = derivedVariable0.createVariableSummary();
      assertFalse(derivedVariable0.isNewRecord());
      assertFalse(derivedVariable0.isCleaned());
      assertFalse(derivedVariable0.isCoded());
      assertEquals("0", variableSummary0.getDisplayItemIdentifier());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      DerivedVariable derivedVariable0 = new DerivedVariable();
      SupportingDocument supportingDocument0 = new SupportingDocument();
      supportingDocument0.clone();
      supportingDocument0.setDescription("fWZ)ew-");
      derivedVariable0.removeSupportingDocument(supportingDocument0);
      derivedVariable0.setCategory((String) null);
      ArrayList<OntologyTerm> arrayList0 = new ArrayList<OntologyTerm>();
      OntologyTerm ontologyTerm0 = new OntologyTerm();
      ontologyTerm0.clone();
      arrayList0.add(ontologyTerm0);
      derivedVariable0.removeOntologyTerms(arrayList0);
      String string0 = "";
      // Undeclared exception!
      try { 
        arrayList0.listIterator((-1034));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1034
         //
         verifyException("java.util.ArrayList", e);
      }
  }
}
