/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:29:17 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import java.util.function.ToIntFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8963321222771126
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      long long0 = (-93L);
      Range range0 = Range.of((-93L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      long long1 = 0L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals((Object) null);
      range1.endsBefore(range0);
      range0.complement(range1);
      long long2 = 9223372036854775807L;
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(383L, (-2478L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.9878603772329204
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 2147483637L;
      Range range0 = Range.of(2147483637L, 2147483637L);
      Long long1 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(2147483637L);
      range1.isSubRangeOf(range2);
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(2283L, 2147483637L);
      linkedList0.add((Range) null);
      range1.intersects(range3);
      range3.complementFrom(list0);
      long long2 = 32767L;
      Range range4 = Range.of(32767L, (long) long1);
      range4.intersects(range2);
      // Undeclared exception!
      try { 
        range3.complementFrom(linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // The first parameter in the comparison is null.
         //
         verifyException("org.jcvi.jillion.core.Range$Comparators$1", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.982237308502632
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(224L);
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-128L), (-128L));
      range2.equals((Object) null);
      Range.of(4205L);
      Range range3 = Range.ofLength(224L);
      Range range4 = Range.ofLength(4294967295L);
      assertFalse(range4.isEmpty());
      
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range2.equals(range1);
      assertSame(range2, range0);
      
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(255L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, (-128L), 255L);
      boolean boolean1 = range5.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      
      Range range6 = range1.intersection(range5);
      assertFalse(range6.isEmpty());
      assertSame(range6, range3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=4.130986710668161
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Long long0 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(2147483637L);
      range2.isSubRangeOf(range2);
      range1.isSubRangeOf(range2);
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(2283L, 2147483637L);
      linkedList0.add(range0);
      range1.intersects(range3);
      range3.complementFrom(list0);
      Range range4 = Range.of(32767L, (long) long0);
      range4.intersects(range2);
      range0.complement(range2);
      range3.complementFrom(linkedList0);
      Object object0 = new Object();
      range4.equals(range3);
      Range.of(32767L);
      Range.ofLength(32767L);
      range3.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&Mq3N#YwHH=}'&L ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&Mq3N#YwHH=}'&L 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.028040280220478
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Long long0 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(2147483637L);
      range2.isSubRangeOf(range2);
      range1.isSubRangeOf(range2);
      range1.complementFrom(linkedList0);
      linkedList0.add(range0);
      range1.intersects(range1);
      range2.complementFrom(list0);
      range0.intersects(range2);
      range0.complement(range2);
      range2.complementFrom(linkedList0);
      range2.equals(range1);
      Range.of(32767L);
      range2.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&Mq3N#YwHH=}'&L ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&Mq3N#YwHH=}'&L 
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.8784960016720724
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range range0 = Range.of(32761L, 32761L);
      Range range1 = Range.ofLength(9223372036854775802L);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range1.forEach(consumer0);
      range0.spliterator();
      Range range2 = Range.of(20L, 32761L);
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range2.isSubRangeOf(range0);
      boolean boolean2 = range0.isSubRangeOf(range2);
      assertTrue(boolean2 == boolean0);
      
      Range.CoordinateSystem.values();
      Range range3 = Range.of(20L, 9223372036854775802L);
      range3.spliterator();
      boolean boolean3 = range3.endsBefore(range1);
      assertTrue(boolean3 == boolean1);
      
      Object object0 = new Object();
      Object object1 = new Object();
      boolean boolean4 = range1.equals(range3);
      assertFalse(boolean4);
      
      Range range4 = Range.of(20L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range1.equals((Object) null);
      Range range5 = range1.intersection(range3);
      assertFalse(range3.equals((Object)range4));
      assertTrue(range5.equals((Object)range3));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.1182854276546
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Long long0 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(2147483637L);
      range2.startsBefore(range0);
      range1.isSubRangeOf(range2);
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(2283L, 2147483637L);
      range1.intersects(range3);
      range3.complementFrom(list0);
      Range range4 = Range.of(32767L, (long) long0);
      range4.intersects(range2);
      range0.complement(range2);
      Object object0 = new Object();
      Range range5 = Range.of(32767L, 2147483637L);
      range4.equals(range5);
      range1.intersection(range4);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=4.00850090021253
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-93L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-93L), (-5L));
      boolean boolean0 = range1.equals(range0);
      assertFalse(range1.isEmpty());
      
      Range range2 = Range.of(1418L);
      Range range3 = Range.of(3279L, 5424L);
      Object object0 = new Object();
      range3.equals(object0);
      Range.of((-2537L), 3279L);
      Range range4 = Range.ofLength(9223372036854775807L);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean1 = range3.equals(range2);
      assertTrue(boolean1 == boolean0);
      
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of((-1078L));
      Object object5 = new Object();
      Object object6 = new Object();
      range4.equals(range3);
      Range range5 = range0.intersection(range4);
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=4.056535783172031
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of((-65520L), (-65520L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      range1.complement(range0);
      boolean boolean0 = range0.intersects(range1);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      Range.of(2910L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range2 = Range.of(317L, 318L);
      Range range3 = Range.of(2910L);
      Range range4 = Range.of(2910L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range2.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      range4.equals(range2);
      Object object6 = new Object();
      Object object7 = new Object();
      Range.of((-9223372036854775808L));
      Object object8 = new Object();
      range3.equals(object7);
      Range range5 = range1.intersection(range2);
      assertSame(range2, range5);
      assertFalse(range5.isEmpty());
      
      range4.complement(range0);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.9770659525968397
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of(1L, 32761L);
      Range.of(2147483647L, 9223372036854775786L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3688L), 228L);
      Range range2 = Range.of(1L, 127L);
      Range range3 = range2.intersection(range1);
      List<Range> list0 = range1.complement(range2);
      assertSame(range2, range3);
      assertEquals(2, list0.size());
      
      Object object0 = new Object();
      Range range4 = Range.ofLength(228L);
      range4.isSubRangeOf(range0);
      Range.of(1L);
      Range.ofLength(1L);
      Object object1 = new Object();
      Range range5 = Range.of((-1L), 127L);
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range5.getEnd(range_CoordinateSystem1);
      assertEquals(128L, long0);
      
      Object object3 = new Object();
      Range range6 = range5.intersection(range0);
      assertFalse(range6.isEmpty());
      
      Range range7 = Range.ofLength(629L);
      assertNotSame(range7, range4);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.598479163577578
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range range1 = Range.of(2147483637L);
      range0.endsBefore(range1);
      long long0 = 4294967295L;
      Range.of(2147483637L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range.ofLength(9223372036854775806L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775806L, (-2501L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2501 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.6769166104574946
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range range1 = Range.of(2147483637L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.equals("*0^]W$wE*B~$U");
      Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Range.ofLength(3467L);
      Object object7 = new Object();
      Object object8 = new Object();
      Range.of((-1L));
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      range1.equals((Object) null);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.107922766280941
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      long long0 = 9223372036854775786L;
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.ofLength(9223372036854774488L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("$JtQ}sq2v]W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.$JtQ}sq2v]W
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.74628183619582
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.of((-9223372036854775808L));
      long long0 = 9223372036854775785L;
      Range range0 = Range.of(9223372036854775785L);
      Object object0 = new Object();
      range0.equals((Object) null);
      Range.ofLength(255L);
      Range.ofLength(9223372036854775806L);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.of(255L, (-65520L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=4.163561012048844
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 9223372036854775786L);
      Range range2 = Range.of(32761L, 9223372036854775786L);
      range1.endsBefore(range2);
      Range range3 = Range.of(32761L);
      List<Range> list0 = range2.complement(range0);
      Range range4 = Range.ofLength(9223372036854775786L);
      range3.endsBefore(range2);
      Range range5 = Range.of((-818L));
      Range range6 = range4.intersection(range2);
      List<Range> list1 = range5.complement(range4);
      range3.spliterator();
      range1.intersects(range2);
      Range range7 = Range.of(32761L);
      range7.complement(range0);
      range3.complementFrom(list1);
      range2.complementFrom(list1);
      range6.equals((Object) null);
      Range.of(32761L);
      range6.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.8956452628351514
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(255L);
      Range range1 = Range.of((-808L), 255L);
      range0.iterator();
      range1.isEmpty();
      boolean boolean0 = range0.startsBefore(range1);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range range2 = Range.of((-808L));
      Range.ofLength(255L);
      range2.equals(range1);
      Long long0 = new Long(32791L);
      boolean boolean1 = range1.equals(range2);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Range range3 = Range.of(32791L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long1 = new Long((-2415L));
      range3.equals(long1);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      
      Object object2 = new Object();
      Object object3 = new Object();
      range2.equals(long1);
      Range.of(1979L);
      Range range4 = Range.of((-808L), 255L);
      //  // Unstable assertion: assertFalse(range4.equals((Object)range2));
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.0548068787630065
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range range1 = Range.ofLength(4294967295L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range range2 = range0.intersection(range0);
      List<Range> list0 = range1.complement(range2);
      Range range3 = Range.of(range_CoordinateSystem0, 9223372036854774805L, 9223372036854774805L);
      range1.complement(range1);
      range2.complementFrom(list0);
      range2.complement(range0);
      Range.of(1641L, 2147483646L);
      // Undeclared exception!
      try { 
        range2.intersection(range3);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2479 would make range [9223372036854774805 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.4123737377631094
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = 9223372036854775786L;
      Range range0 = Range.ofLength(9223372036854775786L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775786L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -45 would make range [9223372036854775786 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.4794267203850113
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 4294967311L;
      Range range0 = Range.of(4294967311L);
      Object object0 = new Object();
      Range range1 = Range.of(4294967311L, 4294967311L);
      Range.CoordinateSystem.values();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.776995572100244
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.ofLength(32791L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32791L, 32791L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(2770L);
      Range.of(9223372036854775806L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object0);
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals((Object) null);
      Object object8 = new Object();
      Object object9 = new Object();
      Range.of((-128L));
      Object object10 = new Object();
      range1.equals("V^S~D`");
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.876085793665929
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.ofLength(32791L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32791L, 32791L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.ofLength(2770L);
      Range.of(9223372036854775806L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean0 = range0.equals(object0);
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean1 = range1.equals((Object) null);
      assertTrue(boolean1 == boolean0);
      assertTrue(range1.isEmpty());
      
      Object object8 = new Object();
      Object object9 = new Object();
      Range range3 = Range.of((-128L));
      Object object10 = new Object();
      range3.equals(range2);
      assertFalse(range3.isEmpty());
      
      Range range4 = range2.intersection(range0);
      assertSame(range2, range4);
      assertFalse(range4.isEmpty());
      assertNotSame(range2, range0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.840014883332117
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      long long1 = (-32768L);
      long long2 = 266L;
      Range.of(266L, 932L);
      range0.complement(range1);
      Object object0 = new Object();
      range0.equals((Object) null);
      Long long3 = new Long((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 266L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.983096294033077
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(32761L);
      Range range1 = Range.ofLength(9223372036854775802L);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.spliterator();
      Range range2 = Range.of(20L, 32761L);
      range2.isSubRangeOf(range0);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(20L, 9223372036854775802L);
      range3.endsBefore(range1);
      Range.ofLength(32767L);
      Range range4 = Range.of(269L);
      Range.ofLength(20L);
      Range range5 = Range.of(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.equals(range5);
      Range range6 = range0.intersection(range5);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range6.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.122034175047105
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.of((-808L), 255L);
      Range range1 = Range.of((-808L));
      range1.equals(range0);
      Range range2 = Range.ofLength(255L);
      List<Range> list0 = range1.complement(range2);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      List<Range> list1 = range1.complementFrom(list0);
      range1.complementFrom(list1);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.20059724369165
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(32761L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.startsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.spliterator();
      Range range2 = Range.of(1L, 32761L);
      boolean boolean0 = range0.isSubRangeOf(range2);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range range3 = Range.ofLength(9223372036854775807L);
      Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      Range.CoordinateSystem.values();
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      assertEquals(1, list0.size());
      assertEquals(0, list1.size());
      
      Object object0 = new Object();
      range3.equals(range1);
      assertSame(range3, range1);
      
      Range.of((-2011L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1L));
      Range.ofLength(3041L);
      Range range4 = range_Builder1.build();
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.5343669147085635
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      long long0 = 32761L;
      Range.ofLength(32761L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32761L, 32761L);
      long long1 = 1418L;
      Range.ofLength(32761L);
      String string0 = "V^S~D`";
      range0.equals("V^S~D`");
      // Undeclared exception!
      try { 
        Range.of(1418L, 1142L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.7718390217025175
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      long long0 = 255L;
      Range range0 = Range.of(255L);
      long long1 = (-808L);
      Range range1 = Range.of((-808L), 255L);
      range0.iterator();
      range0.isEmpty();
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        range1.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.955691670927547
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of((-93L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-93L), (-5L));
      range1.equals(range0);
      Range.of(2836L);
      Range range2 = Range.ofLength(255L);
      Range range3 = Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(range1);
      assertFalse(range1.isEmpty());
      assertFalse(boolean0);
      
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of(4294967295L);
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range2.equals(object7);
      Range range4 = range3.intersection(range0);
      assertFalse(range3.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3610161705964603
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      long long0 = 1L;
      Range.of((-947L), 32767L);
      long long1 = (-9223372036854775808L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(2147483647L, 1953L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=4.176343874531894
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 32761L);
      Range.CoordinateSystem.values();
      Range range2 = Range.ofLength(32761L);
      range2.equals(range1);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range4 = Range.of((-3882L), 1L);
      List<Range> list0 = range4.complement(range2);
      List<Range> list1 = range1.complementFrom(list0);
      Range.of((-1435L));
      range3.endsBefore(range0);
      List<Range> list2 = range0.complementFrom(list0);
      range1.complementFrom(list2);
      Range range5 = Range.of((-1192L));
      range4.complementFrom(list1);
      List<Range> list3 = range5.complementFrom(list2);
      range0.complementFrom(list3);
      range1.intersection(range2);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("htM[ (zf]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.htM[ (zf]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=4.338978494122161
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      range0.getEnd();
      Long long0 = new Long(32767L);
      long long1 = range0.getEnd();
      assertEquals(32767L, long1);
      
      range0.spliterator();
      Range range1 = Range.ofLength(65535L);
      Object object0 = new Object();
      boolean boolean0 = range0.endsBefore(range1);
      Range range2 = Range.of(32767L, 65535L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range range3 = Range.of((-1571L), 62622L);
      boolean boolean1 = range2.intersects(range0);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list0 = range3.split(2283L);
      List<Range> list1 = range3.complementFrom(list0);
      Range range4 = Range.of((-1571L), 2147483647L);
      List<Range> list2 = range4.complement(range3);
      range1.complementFrom(list1);
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals(object2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 563L, 32767L);
      List<Range> list3 = range1.complementFrom(list1);
      assertEquals(29, list0.size());
      assertEquals(0, list1.size());
      assertFalse(list1.equals((Object)list2));
      assertTrue(list3.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3501763700495304
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of((-65520L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range0.equals(object2);
      long long0 = 1L;
      // Undeclared exception!
      try { 
        Range.ofLength((-65520L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=4.059927759954046
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 32761L);
      Range range2 = Range.of(32761L, 9223372036854775786L);
      range2.equals(range1);
      Range.of(32761L);
      List<Range> list0 = range2.complement(range0);
      Range.of(488L, 32761L);
      range1.complement(range2);
      range0.complementFrom(list0);
      Range.of(32761L);
      Range.of((-1738L), 65534L);
      long long0 = 2147483647L;
      // Undeclared exception!
      try { 
        Range.of(2147483647L, 580L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.8360009040100165
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 32761L;
      Range range0 = Range.ofLength(32761L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.intersection(range0);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.spliterator();
      long long1 = 20L;
      Range range2 = Range.of(20L, 32761L);
      range2.isSubRangeOf(range0);
      Range range3 = Range.ofLength(9223372036854775807L);
      long long2 = 2283L;
      Range range4 = Range.of(2283L, 32761L);
      range4.startsBefore(range2);
      // Undeclared exception!
      try { 
        range3.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.621253660144262
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range range1 = Range.of(2147483637L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.ofLength(9223372036854775806L);
      Range range3 = Range.of(9223372036854775582L);
      Range.of(661L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range3.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      range2.equals((Object) null);
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Range.of(9223372036854775582L);
      Object object13 = new Object();
      range1.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6977339137196297
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range range0 = Range.of(1L, 32761L);
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(32761L);
      boolean boolean0 = range1.equals(range0);
      Range range2 = Range.of(32761L);
      Range range3 = Range.ofLength(1L);
      Range range4 = Range.ofLength(9223372036854775786L);
      assertFalse(range4.isEmpty());
      
      Range range5 = Range.of(65535L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals("");
      Object object3 = new Object();
      Object object4 = new Object();
      range1.equals(range3);
      Object object5 = new Object();
      Object object6 = new Object();
      Range range6 = Range.of(32761L);
      Object object7 = new Object();
      Object object8 = new Object();
      boolean boolean1 = range3.equals(range1);
      assertTrue(boolean1 == boolean0);
      
      Range range7 = range6.intersection(range0);
      assertNotSame(range7, range5);
      assertFalse(range7.isEmpty());
      assertSame(range7, range6);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.778307150960459
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.ofLength(32791L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 32791L, 32791L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(2770L);
      long long0 = (-128L);
      Range.of(9223372036854775806L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      long long1 = (-2016L);
      Range range0 = Range.ofLength(9223372036854775806L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(32791L, (-3351L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.9218111265085493
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.ofLength(32791L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32791L, 32791L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.ofLength(2770L);
      Range.of(9223372036854775806L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object0);
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals((Object) null);
      Object object8 = new Object();
      Range range2 = Range.of((-3260L));
      Object object9 = new Object();
      range2.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.parseRange("yJHd%7fW");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse yJHd%7fW into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.059113739578872
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Long long0 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(2147483637L);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      ToIntFunction<Object> toIntFunction0 = (ToIntFunction<Object>) mock(ToIntFunction.class, new ViolatedAssumptionAnswer());
      Comparator<Range> comparator0 = range_Comparators0.thenComparingInt(toIntFunction0);
      Comparator<Range> comparator1 = Comparator.nullsLast((Comparator<? super Range>) comparator0);
      linkedList0.sort(comparator1);
      range1.isEmpty();
      range1.isSubRangeOf(range2);
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(2283L, 2147483637L);
      range1.intersects(range3);
      List<Range> list1 = range3.complementFrom(list0);
      assertEquals(1, list1.size());
      
      Range range4 = range2.intersection(range1);
      range1.complement(range4);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      range1.spliterator();
      Range range5 = Range.ofLength(2126L);
      range0.intersects(range2);
      List<Range> list2 = range5.complementFrom(list0);
      List<Range> list3 = range0.complementFrom(list2);
      assertEquals(1, list2.size());
      assertTrue(list3.isEmpty());
      
      Range.CoordinateSystem.values();
      range5.getLength();
      long long1 = range2.getLength();
      assertEquals(2147483637L, long1);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.382578875111032
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-312L));
      range_Builder0.shift(3L);
      range_Builder0.expandEnd(1L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin(2664L);
      range_Builder1.build();
      range_Builder0.expandBegin(1173L);
      Range range0 = range_Builder1.build();
      range_Builder0.expandEnd(626L);
      range_Builder2.shift(2485L);
      range_Builder0.expandEnd(265L);
      Range range1 = Range.of(9223372034707292416L);
      List<Range> list0 = range0.split(29L);
      List<Range> list1 = range0.complementFrom(list0);
      assertEquals(0, list1.size());
      
      Range range2 = Range.ofLength(333L);
      range2.endsBefore(range0);
      List<Range> list2 = range2.complementFrom(list0);
      assertFalse(list2.contains(range0));
      assertEquals(1, list2.size());
      assertFalse(list0.contains(range0));
      
      Range range3 = range1.intersection(range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.9084871362142746
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-2493L));
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      range0.endsBefore(range1);
      range0.split(2147483646L);
      range_Builder1.shift(0L);
      range_Builder1.expandEnd((-2493L));
      Range.of(2116L);
      // Undeclared exception!
      range0.split(324L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.8470756762717855
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      long long1 = 224L;
      Range range1 = Range.ofLength(224L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.of(124L, 317L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(9223372036854775807L);
      List<Range> list0 = range2.split(1751L);
      // Undeclared exception!
      try { 
        range0.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.7012384014852167
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
      Range.of((-32768L));
      Long long0 = new Long((-32768L));
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder2.contractEnd(795L);
      range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(254L);
      Range.Builder range_Builder4 = new Range.Builder(127L);
      Range.Builder range_Builder5 = new Range.Builder(2147483647L, 9223372034707292161L);
      range_Builder2.contractEnd((-32759L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-32768L), 127L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("CoordinateSystem can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.CoordinateSystem can not be null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=4.058719614104257
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775808L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.ofLength(255L);
      range0.equals("");
      Range range2 = Range.of(255L);
      range1.complement(range0);
      long long0 = 487L;
      Range range3 = Range.ofLength(487L);
      Range.ofLength(952L);
      range3.endsBefore(range0);
      Range range4 = Range.of((-9223372036854775808L));
      Range range5 = range4.intersection(range0);
      range5.complement(range0);
      range0.spliterator();
      range3.intersects(range2);
      long long1 = (-436L);
      // Undeclared exception!
      try { 
        Range.ofLength((-436L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.281088216017112
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of((-65520L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      Object object1 = new Object();
      List<Range> list0 = range1.complement(range0);
      range0.intersects(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of(2910L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range3 = Range.of(317L, 318L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      List<Range> list1 = range1.complement(range3);
      range2.complementFrom(list0);
      Range range4 = Range.of((-730L));
      range4.getEnd();
      Range range5 = Range.of(715L, 2911L);
      range5.endsBefore(range0);
      range1.complementFrom(list1);
      range2.complementFrom(list1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4294967295L, (-65520L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.151798682372979
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      long long0 = 2147483637L;
      Range range0 = Range.ofLength(2147483637L);
      Long long1 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.0695861146117585
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(770L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.toString();
      range0.equals("[ 770 .. 770 ]/0B");
      range0.spliterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem2);
      Range range1 = Range.ofLength(770L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(770L);
      range_Builder2.expandEnd(771L);
      Range.of((-1L));
      long long0 = 324L;
      List<Range> list0 = range1.split(1L);
      Range range2 = Range.of(range_CoordinateSystem1, 324L, 771L);
      // Undeclared exception!
      range2.complementFrom(list0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=4.126701016692311
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-65520L), (-65520L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      List<Range> list0 = range1.complement(range0);
      boolean boolean0 = range0.intersects(range1);
      range0.equals(list0);
      assertTrue(list0.contains(range1));
      
      Range range2 = Range.of((-1261L));
      Range range3 = Range.ofLength(65535L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range2.spliterator();
      Range range4 = Range.of((-65520L));
      range2.equals(range4);
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(9223372036854775584L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      boolean boolean1 = range3.equals(range1);
      assertFalse(range3.isEmpty());
      assertFalse(boolean1 == boolean0);
      
      range4.intersection(range2);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.86711708089518
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(1L, 9223372036854775786L);
      Range.of(9223372036854775786L);
      Range.of((-1827L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range1.equals("");
      assertFalse(boolean0);
      assertFalse(range1.isEmpty());
      
      Object object4 = new Object();
      Object object5 = new Object();
      Range range2 = Range.ofLength(3467L);
      Object object6 = new Object();
      Object object7 = new Object();
      Range.of(839L);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      boolean boolean1 = range2.equals((Object) null);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.6957498887753597
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range range1 = Range.of(2147483637L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range range2 = Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      assertFalse(range0.isEmpty());
      
      Object object5 = new Object();
      Object object6 = new Object();
      Range range3 = Range.ofLength(3460L);
      range2.equals(range3);
      Object object7 = new Object();
      Object object8 = new Object();
      Range range4 = Range.of(3008L);
      Object object9 = new Object();
      Long.getLong("*0^]W$wE*B~$U");
      boolean boolean0 = range4.equals((Object) null);
      assertFalse(boolean0);
      
      Range range5 = Range.of(5424L);
      Range range6 = range2.intersection(range5);
      assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.033785257356663
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Long long0 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      Range range2 = range1.intersection(range0);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      Range range3 = Range.ofLength(2147483637L);
      Range range4 = Range.ofLength(2283L);
      range3.startsBefore(range0);
      range1.isSubRangeOf(range3);
      range1.complementFrom(linkedList0);
      Range range5 = Range.of(2283L, 2147483637L);
      range1.intersects(range5);
      range5.complementFrom(list0);
      Range range6 = Range.of(32767L, (long) long0);
      range6.intersects(range3);
      List<Range> list1 = range0.complement(range3);
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertFalse(list1.contains(range0));
      
      List<Range> list2 = range5.complementFrom(linkedList0);
      //  // Unstable assertion: assertEquals(2, list2.size());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range5.equals(range4);
      range2.intersection(range3);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.052472807975265
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Long long0 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      range1.intersection(range0);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.ofLength(2147483637L);
      Range.ofLength(2283L);
      range2.startsBefore(range0);
      range1.isSubRangeOf(range2);
      range1.complementFrom(linkedList0);
      Range range3 = Range.of(2283L, 2147483637L);
      range1.intersects(range3);
      range3.complementFrom(list0);
      Range range4 = Range.of(32767L, (long) long0);
      range4.intersects(range2);
      range0.complement(range2);
      range3.complementFrom(linkedList0);
      Object object0 = new Object();
      range4.equals(range3);
      Range.of(range_CoordinateSystem0, 2147483637L, (long) long0);
      Range.ofLength(32767L);
      range3.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(".#<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators..#<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.5144995904145366
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.equals(object0);
      Range range1 = Range.ofLength(4294967295L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(2147483647L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range1.equals(object7);
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.9590554447475697
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of(32761L, 32761L);
      long long0 = 9223372036854775802L;
      Range range1 = Range.ofLength(9223372036854775802L);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      Range range2 = Range.of(9223372036854775802L);
      range0.complement(range2);
      long long1 = 2126L;
      Range range3 = Range.ofLength(2126L);
      range2.endsBefore(range3);
      long long2 = (-818L);
      Range.of(4090L);
      range1.intersection(range3);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775802L, (-818L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -818 would make range [9223372036854775802 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.4435896416877303
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(936L);
      range_Builder0.expandEnd((-9223372036854775808L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775152L, (-2147483648L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2147483649 would make range [9223372036854775152 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.6509655440659703
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.ofLength(1L);
      Range.ofLength(2147483647L);
      Range.of(1L, 1L);
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=4.011884428814372
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.ofLength(32761L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range1.intersection(range0);
      range1.startsBefore(range0);
      range0.startsBefore(range2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.spliterator();
      Range range3 = Range.of(1L, 32761L);
      range0.isSubRangeOf(range3);
      Range.CoordinateSystem.values();
      Range range4 = Range.ofLength(9223372036854775807L);
      Range range5 = Range.ofLength(32767L);
      List<Range> list0 = range0.complement(range4);
      List<Range> list1 = range1.complementFrom(list0);
      range5.complementFrom(list1);
      Range.ofLength(1L);
      // Undeclared exception!
      try { 
        range4.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=4.011020504295976
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of((-1L), (-1L));
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483648L), (-1L));
      range1.complementFrom(linkedList0);
      range0.complement(range1);
      Range.Builder range_Builder1 = new Range.Builder(2126L);
      Range range2 = Range.of((-2147483648L));
      range2.spliterator();
      range1.intersects(range2);
      Range.of((-1L));
      // Undeclared exception!
      try { 
        Range.of(3308L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.9515720505809138
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of(4294967311L);
      Object object0 = new Object();
      Range range1 = Range.of(4294967311L, 4294967311L);
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(4294967311L);
      Range range2 = Range.ofLength(4294967311L);
      boolean boolean0 = range2.equals(object0);
      Range range3 = Range.of((-2147483648L), (-231L));
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      
      Range.ofLength(9223372036854775807L);
      Object object1 = new Object();
      Object object2 = new Object();
      range2.equals((Object) null);
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of((-922L));
      Object object5 = new Object();
      Object object6 = new Object();
      boolean boolean1 = range1.equals(object1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Range range4 = range1.intersection(range2);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      //  // Unstable assertion: assertSame(range1, range0);
      //  // Unstable assertion: assertNotSame(range1, range4);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6389600962173163
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      long long0 = (-2479L);
      Range range0 = Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
      Range.of((-32768L));
      Object object0 = new Object();
      Long long1 = new Long((-32768L));
      range_Builder1.copy();
      Range range1 = null;
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.contractEnd((-312L));
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-312L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=4.059903698641357
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(4294967311L);
      Range range1 = Range.of((-263L), 4294967311L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-263L), 932L);
      range0.complement(range2);
      Object object1 = new Object();
      Range.ofLength(932L);
      Range.of((-32761L));
      Range.ofLength(932L);
      Object object2 = new Object();
      Range range3 = Range.of((-65520L), (-4773L));
      Object object3 = new Object();
      Object object4 = new Object();
      range1.intersection(range3);
      Range range4 = Range.ofLength(3249L);
      assertFalse(range4.equals((Object)range1));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6939978248023912
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Long long0 = new Long(2147483637L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder();
      Range range1 = Range.ofLength(0L);
      range1.equals(range_CoordinateSystem0);
      range1.intersection(range0);
      assertFalse(range0.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.ofLength(0L);
      Range range3 = Range.of(0L);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(661L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range4.equals(range_CoordinateSystem0);
      Object object6 = new Object();
      Object object7 = new Object();
      Range range5 = Range.of(303L);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      range2.equals(object10);
      Range range6 = Range.of(661L);
      Range range7 = range6.intersection(range4);
      assertNotSame(range4, range5);
      assertFalse(range7.isEmpty());
      assertSame(range4, range7);
      
      Range range8 = range_Builder0.build();
      assertTrue(range8.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.499502676691665
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Range.ofLength(9223372036854775806L);
      Range.ofLength(2492L);
      Object object1 = new Object();
      Range.of(4294967295L, 4294967295L);
      Range.of(1L, 1L);
      Object object2 = new Object();
      Object object3 = new Object();
      long long0 = (-1061L);
      // Undeclared exception!
      try { 
        Range.of(65535L, 2911L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.384117519426967
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-947L);
      Range.of(range_CoordinateSystem0, (-947L), 1L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, (-9223372036854775808L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.933955823812978
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 9223372036854775786L);
      Range range2 = Range.of(32761L, 9223372036854775786L);
      boolean boolean0 = range1.endsBefore(range2);
      Range range3 = Range.of(32761L);
      List<Range> list0 = range2.complement(range0);
      Range range4 = Range.ofLength(488L);
      Range.ofLength(9223372036854775786L);
      range4.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      boolean boolean1 = range3.isEmpty();
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      List<Range> list2 = range3.complementFrom(list1);
      Range.of(9223372036854775786L, 9223372036854775786L);
      range0.complementFrom(list0);
      Range range5 = range1.intersection(range4);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      
      range0.complementFrom(list2);
      //  // Unstable assertion: assertEquals(0, list0.size());
      //  // Unstable assertion: assertTrue(list0.equals((Object)list2));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=4.183752782774369
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(224L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range2 = Range.of(124L, 317L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem1);
      List<Range> list0 = range2.complement(range1);
      range1.complementFrom(list0);
      Range range3 = Range.of((-32751L));
      Range range4 = Range.of(range_CoordinateSystem0, (-94L), 224L);
      range0.endsBefore(range4);
      range0.intersection(range2);
      range4.complement(range1);
      range4.spliterator();
      range3.intersects(range4);
      range1.complement(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7221400701085567
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Long long0 = new Long(1L);
      boolean boolean0 = range0.endsBefore(range0);
      assertFalse(boolean0);
      
      Range range1 = Range.of(32767L);
      assertFalse(range1.isEmpty());
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.ofLength(32761L);
      Range range2 = Range.of(65535L);
      Range range3 = Range.of((-282L));
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range3.equals("org.jcvi.jillion.core.Ranges");
      Object object7 = new Object();
      Object object8 = new Object();
      Range.of((-911L));
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      range3.equals(range2);
      assertNotSame(range2, range1);
      
      Range range4 = Range.ofLength(1218L);
      Range range5 = range4.intersection(range0);
      assertSame(range5, range4);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=4.255103961840793
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(224L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(224L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem2);
      Range.of(range_CoordinateSystem1, (-230L), 224L);
      Range range3 = Range.of(range_CoordinateSystem0, (-230L), (-230L));
      Range range4 = range1.intersection(range0);
      range2.startsBefore(range4);
      List<Range> list0 = range1.complement(range4);
      range1.complementFrom(list0);
      range3.spliterator();
      range2.endsBefore(range1);
      Range.parseRange("[ 225 .. 225 ]/RB", range_CoordinateSystem1);
      range3.complement(range0);
      Range range5 = Range.of(1L, 2197L);
      range5.spliterator();
      Range.of((-1805L), (-1805L));
      range2.intersection(range3);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.ZERO_BASED;
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem3, 583L, 224L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.194257164275912
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder((-3731L), 2271L);
      range_Builder0.shift((-3623L));
      Range range1 = Range.of((-1321L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-1321L), 32767L);
      Range range3 = range2.intersection(range1);
      List<Range> list0 = range2.complement(range0);
      range0.complementFrom(list0);
      range3.spliterator();
      range1.endsBefore(range3);
      range1.complement(range2);
      Range.Builder range_Builder1 = new Range.Builder(255L);
      range3.spliterator();
      // Undeclared exception!
      try { 
        Range.ofLength((-1321L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.854741556694802
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Long long0 = new Long(2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range0);
      Range.Builder range_Builder0 = new Range.Builder(1022L, 2147483647L);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(0L);
      Range range1 = range_Builder0.build();
      range_Builder0.shift((-1L));
      range_Builder1.expandEnd(0L);
      range_Builder1.expandEnd((-1L));
      Range range2 = Range.of(1022L);
      range2.split(324L);
      range_Builder1.expandEnd(133L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-2184L), 2692L);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=4.194142886617313
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      long long0 = 9223372036854775786L;
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 9223372036854775786L);
      Range range2 = Range.of(32761L, 9223372036854775786L);
      range1.endsBefore(range2);
      Range range3 = Range.of(32761L);
      range2.complement(range0);
      Range range4 = Range.ofLength(9223372036854775786L);
      range3.endsBefore(range2);
      Range range5 = Range.of((-818L));
      range4.intersection(range2);
      Range.of((-818L), 65535L);
      List<Range> list0 = range5.complement(range4);
      range3.spliterator();
      range1.intersects(range2);
      Range range6 = Range.of(32761L);
      range6.complement(range0);
      range3.complementFrom(list0);
      long long1 = (-2016L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2016L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.9876735222946715
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 9223372036854775786L);
      Range range2 = Range.of(32761L, 9223372036854775786L);
      range1.endsBefore(range2);
      Range range3 = Range.of(32761L);
      range2.complement(range0);
      Range.ofLength(9223372036854775786L);
      range3.endsBefore(range2);
      Range.of((-818L));
      // Undeclared exception!
      try { 
        Range.ofLength((-818L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.446680526631587
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 2836L, 2836L);
      Object object1 = new Object();
      Range.ofLength(2836L);
      // Undeclared exception!
      try { 
        Range.ofLength((-981L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.932537884159103
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-91L), (-91L));
      Range range1 = Range.ofLength(3717L);
      Object object0 = new Object();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.intersects(range0);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      Range.CoordinateSystem.values();
      Range range2 = Range.of(9223372036854775807L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range3 = Range.of(9223372036854775807L);
      Range.of((-91L));
      Range.of(1099L);
      range0.intersection(range3);
      assertSame(range3, range2);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=4.1030966398848445
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-65520L), (-65520L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      List<Range> list0 = range1.complement(range0);
      range0.intersects(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of(2910L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range3 = Range.of(317L, 318L);
      Long long0 = new Long(317L);
      range1.complement(range3);
      range2.complementFrom(list0);
      Range.of((-730L));
      range0.isSubRangeOf(range2);
      range1.endsBefore(range0);
      Range range4 = range1.intersection(range0);
      range4.endsBefore(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range4.isSubRangeOf(range1);
      range3.intersects(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.7068380093867797
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-365L), 2147483647L);
      Range range1 = Range.ofLength(233L);
      Range range2 = range1.intersection(range0);
      assertSame(range2, range1);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.526025408456253
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      long long0 = 4294967295L;
      Range.of(4294967295L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder((-1560L), 4294967295L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long1 = 4294967295L;
      range_Builder1.contractEnd(4294967295L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((-2984L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.5935291517516763
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      long long0 = (-1L);
      Range.of((-1L));
      long long1 = 9223372036854772971L;
      Range.of(9223372036854772971L, 9223372036854772971L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-3481L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.7024501617425383
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range range1 = Range.of(2147483637L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range range2 = Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      assertFalse(range0.isEmpty());
      
      Object object5 = new Object();
      Object object6 = new Object();
      Range range3 = Range.ofLength(3467L);
      Object object7 = new Object();
      Object object8 = new Object();
      Range range4 = Range.of(2147483637L);
      range4.startsBefore(range3);
      assertFalse(range3.isEmpty());
      
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Range range5 = range2.intersection(range1);
      assertSame(range1, range4);
      assertTrue(range5.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.489820195335474
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1107L, 1107L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1107L);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(1107L);
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(1107L);
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-128L));
      boolean boolean0 = range0.equals(long0);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.990910246377241
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of((-1L), 2535L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2535L);
      Range.Builder range_Builder1 = new Range.Builder(2535L);
      Range range1 = Range.of(2535L);
      Range range2 = range0.intersection(range1);
      range0.complement(range2);
      range2.spliterator();
      range0.intersects(range2);
      Range.ofLength(2535L);
      List<Range> list0 = range1.complement(range2);
      range1.complementFrom(list0);
      long long0 = (-751L);
      // Undeclared exception!
      try { 
        Range.ofLength((-751L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=4.0969410158976345
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of((-65520L), (-65520L));
      Object object0 = new Object();
      List<Range> list0 = range0.complement(range0);
      range0.intersects(range0);
      range0.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      long long0 = 2910L;
      Range range1 = Range.of(2910L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range2 = Range.of(317L, 318L);
      Long long1 = new Long(317L);
      range0.complement(range2);
      range1.complementFrom(list0);
      long long2 = (-981L);
      long long3 = 9223372036854773273L;
      Range.ofLength(9223372036854773273L);
      Object object1 = new Object();
      // Undeclared exception!
      try { 
        Range.of(1992L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.21891840782811
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(0L);
      range0.getEnd();
      Long long0 = new Long(0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("CoordinateSystem can not be null", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse CoordinateSystem can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.6630385267088315
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 9223372036854775786L);
      Range range2 = Range.of(32761L, 9223372036854775786L);
      boolean boolean0 = range1.endsBefore(range2);
      assertFalse(range2.isEmpty());
      assertFalse(boolean0);
      
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Range range3 = Range.ofLength(9223372036854775786L);
      Object object7 = new Object();
      Object object8 = new Object();
      Range.of(4294967295L);
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      range1.equals(object4);
      Range range4 = range3.intersection(range0);
      assertSame(range3, range4);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.2975883560528287
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.of((-128L));
      long long0 = 0L;
      long long1 = 1022L;
      long long2 = 0L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(0L, (-166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.8072083948154725
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.ofLength(32791L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32791L, 32791L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range2 = Range.ofLength(2770L);
      Range range3 = Range.of(9223372036854775806L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      range0.equals(object0);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      boolean boolean0 = range3.equals(object8);
      assertFalse(boolean0);
      
      Range.of(2770L);
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      range0.equals("4HZbJR]kW/@");
      Range range4 = range2.intersection(range1);
      assertNotSame(range2, range0);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.098582421656003
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      range_Builder0.contractBegin(0L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range range3 = range2.intersection(range0);
      List<Range> list0 = range1.complement(range3);
      assertTrue(list0.contains(range1));
      
      boolean boolean1 = range2.endsBefore(range0);
      assertFalse(boolean1);
      
      Range.of((-2147483648L), 1114L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1299L), 4294967295L);
      long long0 = range3.getLength();
      assertFalse(range0.isEmpty());
      assertTrue(range3.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.760906406184309
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(4294967295L);
      Range.CoordinateSystem.values();
      Range.ofLength(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.of(0L, 0L);
      Range range0 = Range.ofLength(4294967295L);
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.690169967190516
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.ofLength(3741L);
      Range.of(3741L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(9223372036854775806L);
      Range range2 = Range.of(9223372036854775582L);
      Range range3 = Range.of(661L);
      boolean boolean0 = range3.startsBefore(range2);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      boolean boolean1 = range2.equals(object7);
      assertFalse(boolean1);
      
      Object object8 = new Object();
      Object object9 = new Object();
      Range range4 = Range.of(4294967295L);
      assertFalse(range4.isEmpty());
      
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      boolean boolean2 = range1.equals(object13);
      assertFalse(boolean2 == boolean0);
      
      Range range5 = range0.intersection(range1);
      assertFalse(range5.isEmpty());
      assertSame(range5, range0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.8414963568530434
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.contractEnd((-312L));
      range_Builder0.shift(0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(1L);
      Range range0 = Range.of(0L);
      List<Range> list0 = range0.split(1L);
      List<Range> list1 = range0.complementFrom(list0);
      range0.equals(range_Builder1);
      range0.complementFrom(list1);
      Object object0 = new Object();
      range0.equals(object0);
      range0.complementFrom(list1);
      range0.getLength();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.7554404213182058
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range.ofLength(4294967311L);
      Range.ofLength(2147483647L);
      Object object1 = new Object();
      Range.of((-1956L), 9223372032559807976L);
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.of(1L, (-180L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.6120359064412075
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.ofLength(3741L);
      Range.of(3741L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.ofLength(9223372036854775806L);
      Range range1 = Range.of(9223372036854775582L);
      Range.of(661L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range1.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      Range range2 = Range.of(4294967295L);
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      range2.equals(object5);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.324437986546846
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-1217L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd((-1217L));
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.69733007227563
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem.values();
      Range range0 = Range.ofLength(4294967311L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 4294967311L, 4294967311L);
      range0.intersection(range1);
      range0.split(4294967311L);
      long long0 = 921L;
      Range.of(921L, 4294967311L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2836L;
      long long2 = 127L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2836L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.5714170088477752
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-1L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-1L));
      range_Builder0.contractBegin((-1L));
      range_Builder0.expandBegin(2147483647L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=4.200792416613533
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.ofLength(9223372036854775540L);
      Object object0 = new Object();
      Range range2 = Range.ofLength(3717L);
      List<Range> list0 = range0.complement(range2);
      range2.intersects(range0);
      boolean boolean0 = range2.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(9223372036854775540L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range4 = Range.of((-2463L), 3717L);
      boolean boolean1 = range4.isSubRangeOf(range3);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      List<Range> list1 = range2.complement(range1);
      range3.complementFrom(list1);
      Range range5 = Range.of((-2463L));
      range5.endsBefore(range3);
      List<Range> list2 = range5.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list3 = range5.complementFrom(linkedList0);
      linkedList0.add(range3);
      Range range6 = Range.of(32761L);
      //  // Unstable assertion: assertFalse(range6.isEmpty());
      
      range2.complementFrom(list3);
      List<Range> list4 = range2.complementFrom(list3);
      //  // Unstable assertion: assertTrue(list4.equals((Object)list1));
      //  // Unstable assertion: assertFalse(list4.equals((Object)list2));
      
      Range range7 = Range.ofLength(2404L);
      Range range8 = range5.intersection(range7);
      String string0 = range1.toString();
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      //  // Unstable assertion: assertEquals("[ 0 .. 9223372036854775539 ]/0B", string0);
      
      range8.asRange();
      //  // Unstable assertion: assertNotSame(range7, range2);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.5677688776612744
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.ofLength(3741L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(3741L);
      Object object0 = new Object();
      Range range2 = Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range3 = Range.ofLength(9223372036854775806L);
      Range range4 = Range.of(9223372036854775582L);
      Range.of(661L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range4.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      Range range5 = Range.of(4294967295L);
      assertFalse(range5.isEmpty());
      
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      boolean boolean0 = range3.equals(object13);
      assertFalse(boolean0);
      
      Range range6 = range1.asRange();
      assertNotSame(range6, range2);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.951281860989981
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.of(1L, 9223372036854775786L);
      Range range2 = Range.of(32761L, 9223372036854775786L);
      boolean boolean0 = range1.endsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range range3 = Range.of(32761L);
      List<Range> list0 = range2.complement(range0);
      Range range4 = Range.ofLength(488L);
      Range.ofLength(9223372036854775786L);
      range4.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      range2.intersects(range2);
      List<Range> list2 = range3.complementFrom(list1);
      Range.of(9223372036854775786L, 9223372036854775786L);
      range0.complementFrom(list0);
      range1.intersection(range4);
      range0.complementFrom(list2);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertTrue(list1.contains(range3));
      //  // Unstable assertion: assertFalse(range2.equals((Object)range0));
  }

  /**
  //Test case number: 99
  /*Coverage entropy=4.024863129677079
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of((-65520L), (-65520L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      range1.complement(range0);
      range0.intersects(range1);
      range1.isSubRangeOf(range0);
      Range.of(2910L);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.of(1842L, 318L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.789951169744728
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 255L, 255L);
      Range range1 = Range.of((-808L), 255L);
      range0.iterator();
      range1.isSubRangeOf(range0);
      range1.spliterator();
      range0.startsBefore(range1);
      Range range2 = Range.of(918L, 9223372036854775807L);
      Range.of(255L, 918L);
      range2.endsBefore(range0);
      Range range3 = Range.of((-853L), (-808L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.9859085952751228
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.ofLength(32761L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.intersection(range0);
      range1.startsBefore(range0);
      range0.endsBefore(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.spliterator();
      Range range2 = Range.of(32761L, 32761L);
      range2.isSubRangeOf(range0);
      range0.isSubRangeOf(range2);
      Range.CoordinateSystem.values();
      Range range3 = Range.ofLength(9223372036854775807L);
      range3.endsBefore(range1);
      Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder(1L);
      range_Builder0.expandEnd((-1001L));
      Range.of(269L);
      Range.ofLength(32761L);
      Range range4 = Range.of(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object object0 = new Object();
      Range range5 = range0.intersection(range4);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range5.forEach(consumer1);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=4.1521650042015095
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range range0 = Range.of((-65520L), (-65520L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      List<Range> list0 = range1.complement(range0);
      range0.intersects(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of(2910L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range3 = Range.of(317L, 318L);
      Long long0 = new Long(317L);
      range1.complement(range3);
      range2.complementFrom(list0);
      Range.of((-730L));
      range0.isSubRangeOf(range2);
      range1.endsBefore(range0);
      Range range4 = range1.intersection(range0);
      range4.endsBefore(range1);
      List<Range> list1 = new LinkedList<Range>();
      range1.spliterator();
      range4.isSubRangeOf(range1);
      range1.intersects(range0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.8360384851026272
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range.of((-65520L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.ofLength(1L);
      Range range1 = Range.ofLength(1L);
      Range range2 = Range.ofLength(2074L);
      Range.ofLength(1L);
      Object object2 = new Object();
      Range range3 = Range.of((-2152L), 2666L);
      Object object3 = new Object();
      Object object4 = new Object();
      Range range4 = range0.intersection(range3);
      assertFalse(range4.isEmpty());
      assertNotSame(range4, range2);
      assertSame(range4, range1);
      
      long long0 = range3.getLength();
      assertEquals(4819L, long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.9878907702253956
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-32768L));
      Range range1 = Range.of((-32768L));
      Long long0 = new Long((-32768L));
      range_Builder1.contractEnd(795L);
      range_Builder1.copy();
      long long1 = 254L;
      Range.Builder range_Builder2 = new Range.Builder(254L);
      Range range2 = Range.of((-32768L));
      List<Range> list0 = range2.complement(range0);
      range1.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1448L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.755616443624483
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(255L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of((-908L));
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      assertFalse(range1.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=4.004469442772506
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.ofLength(9223372036854775807L);
      Range range0 = Range.of(1L, 32761L);
      Range.CoordinateSystem.values();
      Range.ofLength(9223372036854775807L);
      Range range1 = Range.ofLength(32767L);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, (-1750L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4307197681189594
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-39L), (-39L));
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(724L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.contractEnd((-39L));
      long long0 = (-3319L);
      Range.Builder range_Builder3 = new Range.Builder(2727L);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(255L, 255L);
      // Undeclared exception!
      try { 
        range0.split((-2002L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.8598133437971955
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.ofLength(3741L);
      Range.of(3741L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(9223372036854775806L);
      Range range2 = Range.of(9223372036854775582L);
      Range.of(661L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range2.equals(object7);
      assertFalse(range2.equals((Object)range1));
      
      Object object8 = new Object();
      Object object9 = new Object();
      List<Range> list0 = range0.split(1135L);
      assertFalse(list0.contains(range0));
      assertEquals(4, list0.size());
      
      Range range3 = Range.of(4294967295L);
      assertFalse(range3.isEmpty());
      
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      range1.equals(object13);
      Range range4 = range0.intersection(range1);
      assertSame(range4, range0);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.551813508987189
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range range0 = Range.of((-93L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.of(2L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.ofLength(3008L);
      Range range1 = Range.of((-93L));
      Range range2 = Range.of((-128L));
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      range2.equals(object8);
      Object object9 = new Object();
      Object object10 = new Object();
      range0.equals(object6);
      Object object11 = new Object();
      Object object12 = new Object();
      Range.of(9223372036854775807L);
      Object object13 = new Object();
      range1.equals(object6);
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.5418576757157867
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(656L, 656L);
      long long0 = range0.getEnd();
      assertEquals(656L, long0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2742L), 0L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.7639130997196917
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range.of(2147483637L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range range1 = Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range0.equals("(d+)s*,s*(d+)");
      Object object8 = new Object();
      Object object9 = new Object();
      boolean boolean0 = range0.equals(object9);
      assertFalse(boolean0);
      
      Object object10 = new Object();
      Object object11 = new Object();
      Range range2 = Range.of((-128L));
      Object object12 = new Object();
      Object object13 = new Object();
      range1.equals(object3);
      Range range3 = range0.intersection(range2);
      assertFalse(range0.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.342103715501825
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      long long0 = 2147483646L;
      Object object0 = new Object();
      Range.ofLength(4294967295L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Range.of(2147483646L);
      Object object6 = new Object();
      long long1 = (-1381L);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-1381L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=4.199890542170045
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-65520L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(65535L);
      Object object1 = new Object();
      List<Range> list0 = range1.complement(range0);
      range0.intersects(range1);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      Range range2 = Range.of(2910L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range3 = Range.of(317L, 318L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.getBegin(range_CoordinateSystem0);
      Range range4 = Range.ofLength(1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      List<Range> list1 = range2.complementFrom(list0);
      range4.endsBefore(range1);
      List<Range> list2 = range2.complementFrom(list1);
      range3.complementFrom(list2);
      // Undeclared exception!
      try { 
        Range.of(2032L, 1331L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.797322468512566
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(2449L);
      Range.of(9223372036854775785L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.ofLength(9223372036854775806L);
      Range.ofLength(2910L);
      Object object1 = new Object();
      Range range1 = Range.of((-2152L), 925L);
      range1.getBegin();
      Object object2 = new Object();
      Object object3 = new Object();
      // Undeclared exception!
      try { 
        Range.of(3154L, 2449L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4673668715138737
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1031L, 1031L);
      Range range0 = Range.ofLength(1991L);
      range0.spliterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036772661706L, 1418L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.6548090740886634
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range.of(2147483637L);
      Object object0 = new Object();
      range0.getBegin();
      range0.equals("*0^]W$wE*B~$U");
      long long0 = 9223372036854775806L;
      Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(9223372036854775806L);
      Range range2 = Range.of(9223372036854775582L);
      Range.of(661L);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range2.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      range1.equals((Object) null);
      Object object10 = new Object();
      Object object11 = new Object();
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.2219025172133575
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.of(9223372034707292416L);
      Range range0 = Range.ofLength(333L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      long long0 = range0.getLength();
      assertEquals(333L, long0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=4.202246774176158
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(224L);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-230L);
      Range range2 = Range.of(range_CoordinateSystem1, (-230L), (-128L));
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range2.toString(range_CoordinateSystem2);
      Range.of(range_CoordinateSystem1, (-230L), 224L);
      Range range3 = Range.of(range_CoordinateSystem0, (-230L), (-230L));
      Range range4 = range1.intersection(range0);
      range2.startsBefore(range4);
      List<Range> list0 = range1.complement(range4);
      range1.complementFrom(list0);
      range3.spliterator();
      range2.endsBefore(range1);
      long long1 = 291L;
      Range.of(291L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 4494L, (-230L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.2587977010160984
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      range0.equals(object0);
      range0.equals(object0);
      Range range1 = Range.of(2147483647L);
      range1.getBegin();
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.ofLength((-663L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.9690913207802203
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      long long0 = 224L;
      Range range0 = Range.ofLength(32761L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range range1 = Range.of(124L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      List<Range> list0 = range1.complement(range0);
      range0.complementFrom(list0);
      long long1 = (-32751L);
      Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, 124L, 2147483647L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, 944L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.829248971675918
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range range0 = Range.ofLength(2147483637L);
      Range range1 = Range.of(2147483637L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range range2 = Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Range.ofLength(3467L);
      Object object7 = new Object();
      Object object8 = new Object();
      Range range3 = Range.of((-1L));
      assertFalse(range3.isEmpty());
      
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      range1.equals(object8);
      Range range4 = range2.intersection(range1);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      range_CoordinateSystem0.toString();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd(0L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.6495722724322777
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.ofLength(3741L);
      Range.of(3741L);
      Object object0 = new Object();
      boolean boolean0 = range0.equals("*0^]W$wE*B~$U");
      assertFalse(boolean0);
      
      Range range1 = Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range2 = Range.ofLength(9223372036854775806L);
      Range range3 = Range.of(9223372036854775582L);
      Range range4 = Range.of(661L);
      assertNotSame(range4, range1);
      
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range3.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      Range range5 = Range.of(4294967295L);
      assertFalse(range5.isEmpty());
      
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      range2.equals(object13);
      Range range6 = range0.intersection(range2);
      assertFalse(range2.equals((Object)range3));
      assertSame(range6, range0);
      assertFalse(range6.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.844099937442759
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.ofLength(224L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of((-1157L));
      Object object1 = new Object();
      Range range2 = Range.of(1L, 1L);
      assertFalse(range2.isEmpty());
      
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range3 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.681425531333284
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(3741L);
      Range.of(3741L);
      Object object0 = new Object();
      range0.equals("*0^]W$wE*B~$U");
      Range.of(3008L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(9223372036854775806L);
      Range range2 = Range.of(9223372036854775582L);
      Range range3 = Range.of(661L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range3.getBegin(range_CoordinateSystem0);
      assertEquals(661L, long0);
      
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      range2.equals(object7);
      Object object8 = new Object();
      Object object9 = new Object();
      Range range4 = Range.of(4294967295L);
      assertFalse(range4.isEmpty());
      
      Object object10 = new Object();
      Object object11 = new Object();
      Object object12 = new Object();
      Object object13 = new Object();
      range1.equals(object13);
      Range range5 = range0.intersection(range1);
      assertSame(range5, range0);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.6233075881144456
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of(4294967311L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.contractBegin(1669L);
      range_Builder3.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long0 = (-834L);
      Range.Builder range_Builder4 = range_Builder0.expandEnd((-834L));
      Range.Builder range_Builder5 = range_Builder4.copy();
      // Undeclared exception!
      try { 
        range_Builder5.contractEnd(9223372036854775582L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=4.184892480722738
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range range0 = Range.ofLength(9223372036854775786L);
      Range range1 = Range.ofLength(9223372036854775540L);
      Object object0 = new Object();
      Range range2 = Range.ofLength(3717L);
      List<Range> list0 = range0.complement(range2);
      range2.intersects(range0);
      range2.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range range3 = Range.of(9223372036854775540L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem.values();
      Range.of((-2463L), 3717L);
      List<Range> list1 = range2.complement(range1);
      List<Range> list2 = range3.complementFrom(list1);
      //  // Unstable assertion: assertTrue(list2.isEmpty());
      //  // Unstable assertion: assertTrue(range1.equals((Object)range0));
      
      Range range4 = Range.of(2618L);
      boolean boolean0 = range4.endsBefore(range3);
      //  // Unstable assertion: assertTrue(boolean0);
      
      range4.complementFrom(list0);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list3 = range4.complementFrom(linkedList0);
      Range.of(32761L);
      range2.complementFrom(list3);
      range2.complementFrom(list3);
      Range range5 = Range.ofLength(2404L);
      Range range6 = range4.intersection(range5);
      //  // Unstable assertion: assertTrue(range6.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.830354073390792
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(32761L, 32761L);
      range0.startsBefore(range0);
      range0.endsBefore(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.spliterator();
      range0.forEach(consumer0);
      Range range1 = Range.of(20L, 32761L);
      range1.isSubRangeOf(range0);
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range.of(20L, 9223372036854775802L);
      Range.Builder range_Builder0 = new Range.Builder(952L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandBegin((-1773L));
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.4620648551306483
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-128L), (-128L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      long long0 = (-2147483648L);
      Range.Builder range_Builder3 = range_Builder2.expandEnd((-2147483648L));
      // Undeclared exception!
      try { 
        range_Builder3.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.4673668715138737
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 1022L, 1022L);
      Range range0 = Range.ofLength(1991L);
      range0.spliterator();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandEnd(1816L);
      range_Builder0.build();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.5231918705451206
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder((-1043L), (-918L));
      range_Builder0.contractBegin((-918L));
      range_Builder0.contractEnd((-918L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 255L, (-1043L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.4241710186205303
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(3338L, 3338L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd(63L);
      assertFalse(range_Builder2.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.5376640988929897
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.of((-1L), 2535L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2535L);
      Range.Builder range_Builder1 = new Range.Builder(2535L);
      range_Builder1.shift(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder0.expandBegin(2147483647L);
      assertSame(range_Builder3, range_Builder0);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.6864103053514277
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of((-1L));
      range0.spliterator();
      Range.of((-1L), 2535L);
      Range.Builder range_Builder0 = new Range.Builder((-1L), 2535L);
      range_Builder0.contractBegin((-1L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(2825L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.7011848444377238
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.of((-637L));
      Object object0 = new Object();
      Range.of(636L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-32768L), (-1841L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=4.114535181565995
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of((-2479L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      range_Builder0.contractBegin(0L);
      Range range1 = Range.ofLength(4294967295L);
      Range range2 = Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.CoordinateSystem.values();
      Range range3 = range2.intersection(range0);
      List<Range> list0 = range1.complement(range3);
      Range range4 = Range.of((-2147483648L), 1114L);
      Range range5 = Range.of((-2147483648L));
      boolean boolean1 = range5.endsBefore(range2);
      assertFalse(boolean1 == boolean0);
      
      List<Range> list1 = range2.complementFrom(list0);
      range0.intersection(range2);
      Range range6 = Range.of((-2479L));
      List<Range> list2 = range6.complementFrom(list1);
      assertSame(range0, range6);
      assertTrue(list2.contains(range1));
      assertTrue(range3.isEmpty());
      
      Range range7 = range4.intersection(range1);
      assertFalse(range7.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.3755268803270857
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      long long0 = (-947L);
      long long1 = 0L;
      long long2 = 532L;
      Range.of(140L, 532L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.376388864525711
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 532L;
      Range range0 = Range.of(140L, 532L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(0L, (-947L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.73473166867273
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1L);
      Range.Builder range_Builder2 = range_Builder0.shift(3L);
      Range.Builder range_Builder3 = range_Builder0.expandEnd(1L);
      range_Builder0.expandBegin(2664L);
      range_Builder0.expandBegin(1173L);
      range_Builder1.build();
      Range.of(2664L);
      range_Builder0.expandEnd(626L);
      Range.Builder range_Builder4 = range_Builder2.contractBegin(2485L);
      range_Builder0.contractEnd((-1188L));
      Range.Builder range_Builder5 = range_Builder4.expandBegin(2825L);
      assertSame(range_Builder5, range_Builder3);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.3745372712226818
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }
}
