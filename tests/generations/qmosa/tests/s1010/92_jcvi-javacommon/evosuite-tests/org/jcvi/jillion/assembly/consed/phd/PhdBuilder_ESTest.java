/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:05:14 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.time.ZoneId;
import java.time.temporal.TemporalAdjuster;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.internal.trace.chromat.DefaultChannel;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PositionSequence positionSequence0 = null;
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Function<String, String> function0 = Function.identity();
      function0.apply("/t%D2Bs3Zj$04");
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function1).apply(any());
      function0.apply("can not start before reference: ");
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      function3.apply("can not start before reference: ");
      function3.apply("can not start before reference: ");
      hashMap0.computeIfAbsent("6", function3);
      hashMap0.computeIfAbsent("can not start before reference: ", function3);
      DefaultPhd defaultPhd0 = new DefaultPhd("/t%D2Bs3Zj$04", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, hashMap0);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      phdBuilder0.fakePeaks(137, 1090);
      // Undeclared exception!
      try { 
        phdBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.ArtificialPhd", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      Map<String, String> map0 = defaultPhd0.getComments();
      List<PhdWholeReadItem> list0 = defaultPhd0.getWholeReadItems();
      DefaultPhd defaultPhd1 = new DefaultPhd("id can not be null", nucleotideSequence0, qualitySequence0, (PositionSequence) null, map0, list0, (List<PhdReadTag>) null);
      defaultPhd1.toString();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "g1t";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("g1t", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      PositionSequence positionSequence0 = null;
      phdBuilder0.build();
      short[] shortArray0 = new short[2];
      short short0 = (short) (-1190);
      shortArray0[0] = (short) (-1190);
      short short1 = (short) (-676);
      shortArray0[1] = (short) (-676);
      DefaultChannel defaultChannel0 = null;
      try {
        defaultChannel0 = new DefaultChannel((byte[]) null, shortArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableByteArray", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Function<String, String> function0 = Function.identity();
      function0.apply("/t%D2Bs3Zj$04");
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      function3.apply("can not start before reference: ");
      function3.apply("can not start before reference: ");
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      Phd phd0 = phdBuilder0.build();
      assertEquals("", phd0.getId());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = (-908L);
      System.setCurrentTimeMillis((-908L));
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("", nucleotideSequence0, qualitySequence0);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("HF]wRIq\"Vui~SLA[", nucleotideSequence0, qualitySequence0);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate(0L);
      MockDate.UTC(720, 16, 720, 0, 16, (-328));
      mockDate0.setTime(0);
      MockDate mockDate2 = new MockDate(720, 0, 720, 720, 0, 0);
      MockDate mockDate3 = new MockDate(16);
      MockDate mockDate4 = new MockDate(720, 720, 720, 0, 720, (-328));
      mockDate4.setTime((-328));
      mockDate4.before(mockDate2);
      MockDate mockDate5 = new MockDate(720, (-328), 16, 720, 720, 720);
      mockDate1.getTime();
      mockDate2.after(mockDate0);
      MockDate mockDate6 = new MockDate(0L);
      mockDate6.setTime(0L);
      mockDate0.after(mockDate6);
      mockDate1.before(mockDate4);
      mockDate4.setTime(16);
      MockDate.UTC(16, 0, 19, 16, (-3668), 16);
      MockDate mockDate7 = new MockDate(0, (-1147), (-389), (-328), 1413, (-3668));
      MockDate mockDate8 = new MockDate(19, (-3668), 1715, (-3668), 1715, (-3668));
      mockDate1.after(mockDate8);
      mockDate4.after(mockDate7);
      mockDate4.after(mockDate1);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-3668), 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("HF]wRIq\"Vui~SLA[", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = ZoneId.SHORT_IDS;
      phdBuilder0.comments(map0);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate(0L);
      MockDate.UTC(720, 16, 720, 0, 16, (-328));
      mockDate0.setTime(0);
      MockDate mockDate2 = new MockDate(720, 0, 720, 720, 0, 0);
      MockDate mockDate3 = new MockDate(16);
      MockDate mockDate4 = new MockDate();
      mockDate4.setTime((-328));
      mockDate4.before(mockDate2);
      MockDate mockDate5 = new MockDate(720, (-328), 16, 720, 720, 720);
      mockDate1.getTime();
      MockDate mockDate6 = new MockDate(0L);
      mockDate6.setTime(0L);
      mockDate0.after(mockDate6);
      boolean boolean0 = mockDate1.before(mockDate4);
      mockDate4.setTime(16);
      MockDate.UTC(16, 0, 19, 16, (-3668), 16);
      MockDate mockDate7 = new MockDate(0, (-1147), (-389), (-328), 1413, (-3668));
      mockDate1.after(mockDate4);
      boolean boolean1 = mockDate4.after(mockDate7);
      boolean boolean2 = mockDate4.after(mockDate1);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollLast();
      Locale locale0 = Locale.forLanguageTag("range can not start beyond current length (%d) : %d");
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[4];
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem0;
      linkedList1.add("DcSHJI/(DS");
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem1;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem2;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem3;
      linkedList0.toArray(defaultPhdWholeReadItemArray0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(list0);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("G~dPZx4IcXB`ZREOUj", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      PhdBuilder phdBuilder2 = phdBuilder1.peaks((PositionSequence) null);
      assertSame(phdBuilder2, phdBuilder0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = "Null Range used in range comparison operation.";
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("t6iSsO[U3xTl", nucleotideSequence0, qualitySequence0);
      Map<String, String> map0 = null;
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollLast();
      Locale locale0 = Locale.forLanguageTag("range can not start beyond current length (%d) : %d");
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[4];
      LinkedList<String> linkedList1 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem0;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem1;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem2;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(linkedList1);
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem3;
      linkedList0.toArray(defaultPhdWholeReadItemArray0);
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(list0);
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("G~dPZx4IcXB`ZREOUj", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      PhdBuilder phdBuilder2 = phdBuilder1.peaks((PositionSequence) null);
      assertSame(phdBuilder0, phdBuilder2);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("g1t", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(1, (-1638));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("HUDq\"V#Ql~)Ag", nucleotideSequence0, qualitySequence0);
      MockDate mockDate0 = new MockDate((-8L));
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate((-8L));
      Instant instant0 = mockDate0.toInstant();
      Instant instant1 = MockInstant.plusNanos(instant0, (-8L));
      MockInstant.with(instant1, (TemporalAdjuster) instant0);
      MockDate mockDate2 = new MockDate();
      MockDate.UTC(690, 690, 690, (-41), 690, 690);
      mockDate0.setTime((-41));
      MockDate mockDate3 = new MockDate(690, (-41), 690, 690, (-41), (-41));
      MockDate mockDate4 = new MockDate();
      MockDate mockDate5 = new MockDate();
      mockDate5.setTime((-41));
      mockDate5.before(mockDate3);
      MockDate mockDate6 = new MockDate(690);
      mockDate1.getTime();
      mockDate3.after(mockDate0);
      MockDate mockDate7 = new MockDate(690, (-41), (-41), (-41), 690, 690);
      mockDate7.setTime(0L);
      mockDate0.after(mockDate7);
      mockDate1.before(mockDate5);
      mockDate5.setTime(690);
      MockDate.UTC(690, (-41), (-41), 690, (-41), 690);
      MockDate mockDate8 = new MockDate((-376), (-41), 379, (-41), 690, 690);
      MockDate mockDate9 = new MockDate((-41), 690, 1715, 690, 1715, 690);
      MockInstant.ofEpochSecond((long) 1715);
      MockDate mockDate10 = new MockDate(379, 690, 1715);
      mockDate1.after(mockDate9);
      mockDate5.after(mockDate8);
      mockDate5.after(mockDate1);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(379, (-41));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("g1t", nucleotideSequence0, qualitySequence0);
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function<String, String> function2 = function1.compose((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function4 = function3.andThen((Function<? super String, ? extends String>) function2);
      function4.apply("g1t");
      function4.apply("g1t");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.computeIfAbsent("g1t", function3);
      PhdBuilder phdBuilder1 = phdBuilder0.copy();
      assertNotSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      PositionSequence positionSequence0 = null;
      short[] shortArray0 = null;
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      DefaultPhd defaultPhd0 = new DefaultPhd("(d+)s*,s*(d+)", nucleotideSequence0, qualitySequence0, (PositionSequence) null);
      Map<String, String> map0 = defaultPhd0.getComments();
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("$VALUES", nucleotideSequence0, qualitySequence0, map0);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, 15);
      Map<String, String> map0 = artificialPhd0.getComments();
      List<PhdReadTag> list0 = artificialPhd0.getReadTags();
      ArtificialPhd artificialPhd1 = new ArtificialPhd((String) null, nucleotideSequence0, qualitySequence0, map0, (List<PhdWholeReadItem>) null, list0, 15, 15);
      Map<String, String> map1 = artificialPhd1.getComments();
      ArtificialPhd artificialPhd2 = ArtificialPhd.createNewbler454Phd("", nucleotideSequence0, qualitySequence0, map1);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("HUDq\"V#Ql~)Ag", nucleotideSequence0, qualitySequence0);
      MockDate mockDate0 = new MockDate((-8L));
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate((-8L));
      Instant instant0 = mockDate0.toInstant();
      Instant instant1 = MockInstant.plusNanos(instant0, (-8L));
      MockInstant.with(instant1, (TemporalAdjuster) instant0);
      MockDate mockDate2 = new MockDate();
      MockDate.UTC(690, 690, 690, 690, 690, 690);
      mockDate0.setTime(690);
      MockDate mockDate3 = new MockDate(690, 690, 690, 690, 690, 690);
      MockDate mockDate4 = new MockDate();
      MockDate mockDate5 = new MockDate();
      mockDate5.setTime(690);
      mockDate5.before(mockDate3);
      MockDate mockDate6 = new MockDate(690);
      mockDate1.getTime();
      mockDate3.after(mockDate0);
      MockDate mockDate7 = new MockDate(690, 690, 690, 690, 690, 690);
      mockDate7.setTime(0L);
      mockDate0.after(mockDate7);
      mockDate1.before(mockDate5);
      mockDate5.setTime(690);
      MockDate.UTC(690, 690, 690, 690, 690, 690);
      MockDate mockDate8 = new MockDate((-376), 690, 379, 690, 690, 690);
      MockDate mockDate9 = new MockDate(690, 690, 1715, 690, 1715, 690);
      MockInstant.ofEpochSecond((long) 1715);
      MockDate mockDate10 = new MockDate(379, 690, 1715);
      mockDate1.after(mockDate9);
      mockDate5.after(mockDate8);
      mockDate5.after(mockDate1);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(379, 379);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("HF]wRIq\"Vui~SLA[", nucleotideSequence0, qualitySequence0);
      MockDate mockDate0 = new MockDate(0L);
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate(0L);
      MockDate.UTC(720, 16, 720, 0, 16, (-328));
      mockDate0.setTime(0);
      MockDate mockDate2 = new MockDate(720, 0, 720, 720, 0, 0);
      MockDate mockDate3 = new MockDate(16);
      mockDate3.setTime((-328));
      mockDate1.before(mockDate2);
      MockDate mockDate4 = new MockDate(720, (-328), 16, 720, 720, 720);
      mockDate1.getTime();
      mockDate2.after(mockDate0);
      MockDate mockDate5 = new MockDate(0L);
      mockDate5.setTime(0L);
      mockDate0.after(mockDate5);
      mockDate1.before(mockDate0);
      mockDate2.setTime(16);
      MockDate.UTC(16, 0, 19, 16, (-3668), 16);
      MockDate mockDate6 = new MockDate(0, (-1147), (-389), (-328), 1413, (-3668));
      MockDate mockDate7 = new MockDate(19, (-3668), 1715, (-3668), 1715, (-3668));
      mockDate1.after(mockDate7);
      mockDate0.after(mockDate6);
      mockDate1.after(mockDate1);
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(1413, 720);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("H]wRq\"Vu~|LAg", nucleotideSequence0, qualitySequence0);
      MockDate mockDate0 = new MockDate((-12L));
      mockDate0.getTime();
      MockDate mockDate1 = new MockDate((-12L));
      MockDate.UTC(720, 720, 720, 0, 720, 720);
      mockDate0.setTime(0);
      MockDate mockDate2 = new MockDate(720, 0, 720, 720, 0, 0);
      MockDate mockDate3 = new MockDate();
      MockDate mockDate4 = new MockDate();
      mockDate4.setTime(0);
      mockDate4.before(mockDate2);
      MockDate mockDate5 = new MockDate(720);
      mockDate1.getTime();
      mockDate2.after(mockDate0);
      MockDate mockDate6 = new MockDate((-12L));
      mockDate6.setTime(0L);
      mockDate0.after(mockDate6);
      mockDate1.before(mockDate4);
      mockDate4.setTime(720);
      MockDate.UTC(720, 0, (-28), 720, (-28), 720);
      MockDate mockDate7 = new MockDate((-389), 0, 1413, 1413, 379);
      MockDate mockDate8 = new MockDate((-28), 720, 1715, 720, 1715, 720);
      Instant instant0 = MockInstant.ofEpochSecond((long) 1715);
      Date.from(instant0);
      mockDate1.after(mockDate8);
      mockDate4.after(mockDate7);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Function<String, String> function0 = Function.identity();
      function0.apply("/t%D2Bs3Zj$04");
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      function3.apply("can not start before reference: ");
      function3.apply("can not start before reference: ");
      hashMap0.computeIfAbsent("can not start before reference: ", function3);
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.pollLast();
      Locale locale0 = Locale.forLanguageTag("unable to mkdir for ");
      locale0.getDisplayCountry();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      linkedList0.add((Locale.LanguageRange) null);
      locale0.getDisplayLanguage();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      PositionSequence positionSequence0 = null;
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("phd to copy can not be null", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("'y", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      MockDate mockDate0 = new MockDate(353L);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.parallelStream();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.offerLast(defaultPhdWholeReadItem0);
      linkedList1.parallelStream();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(linkedList1);
      linkedList0.offerLast(defaultPhdWholeReadItem1);
      linkedList1.listIterator();
      Range range0 = Range.ofLength(353L);
      DefaultPhdReadTag defaultPhdReadTag0 = new DefaultPhdReadTag((String) null, "", range0, mockDate0, (String) null, "");
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList3, locale_FilteringMode0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list0);
      DefaultPhdReadTag defaultPhdReadTag1 = new DefaultPhdReadTag("qualities can not be null", "Index: ", range0, mockDate0, (String) null, "lines can not be null");
      defaultPhdReadTag1.equals(defaultPhdWholeReadItem2);
      linkedList2.removeFirstOccurrence(defaultPhdReadTag1);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(list0);
      LinkedList<String> linkedList4 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(linkedList4);
      defaultPhdWholeReadItem5.getLines();
      System.setCurrentTimeMillis(353L);
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence1, qualitySequence1, (-640));
      List<PhdReadTag> list1 = artificialPhd0.getReadTags();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(list1);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Function<String, String> function0 = Function.identity();
      function0.apply("/t%D2Bs3Zj$04>");
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<String, String> function2 = function0.compose((Function<? super String, ? extends String>) function1);
      function2.compose((Function<? super String, ? extends String>) function0);
      Function<String, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      Function.identity();
      hashMap0.computeIfAbsent("/t%D2Bs3Zj$04>", function3);
      DefaultPhd defaultPhd0 = new DefaultPhd("/t%D2Bs3Zj$04>", (NucleotideSequence) null, qualitySequence0, (PositionSequence) null, hashMap0);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      LinkedList<PhdWholeReadItem> linkedList1 = new LinkedList<PhdWholeReadItem>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList3);
      linkedList1.add((PhdWholeReadItem) defaultPhdWholeReadItem0);
      linkedList3.parallelStream();
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList3);
      linkedList0.offerLast(defaultPhdWholeReadItem1);
      linkedList2.removeFirstOccurrence(linkedList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList3, locale_FilteringMode0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list0);
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list1);
      linkedList1.add((PhdWholeReadItem) defaultPhdWholeReadItem1);
      linkedList0.removeLast();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      defaultPhdWholeReadItem1.getLines();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
