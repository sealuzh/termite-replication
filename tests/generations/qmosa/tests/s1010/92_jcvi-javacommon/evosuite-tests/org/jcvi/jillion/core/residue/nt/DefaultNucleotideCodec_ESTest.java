/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 08:05:57 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferOverflowException;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.283547886698136
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)2);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 0);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.isGap(byteArray1, 2855);
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray2, 1358L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1358 corresponds to encodedIndex 683  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3313004117949707
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1282);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.toString(byteArray0);
      defaultNucleotideCodec2.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, 86);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.isGap(byteArray0, 0);
      defaultNucleotideCodec4.toString(byteArray0);
      defaultNucleotideCodec4.isGap(byteArray1, 2855);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.getGappedOffsetFor(byteArray0, (-1833));
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 12);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec5.iterator(byteArray0);
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate4.negate();
      predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate7.or(predicate1);
      predicate2.negate();
      Predicate<Object> predicate10 = predicate5.or(predicate9);
      Object object0 = new Object();
      Predicate<Object> predicate11 = predicate1.and(predicate6);
      predicate1.and(predicate11);
      Predicate<Object> predicate12 = predicate8.negate();
      predicate6.test(predicate3);
      Predicate<Object> predicate13 = predicate6.or(predicate12);
      linkedList0.removeIf(predicate10);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate14 = predicate13.negate();
      Predicate<Object> predicate15 = predicate12.and(predicate8);
      Predicate<Object> predicate16 = predicate9.or(predicate4);
      predicate16.and(predicate1);
      Byte byte0 = new Byte((byte)65);
      predicate11.negate();
      predicate14.negate();
      Predicate<Object> predicate17 = predicate15.negate();
      predicate17.or(predicate6);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.253234784589951
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1309);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec0.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 86);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGaps(byteArray0);
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("\"DvB@`wUm6qC7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.\"DvB@`wUm6qC7
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.777019456558661
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1346);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9L;
      Range.of(range_CoordinateSystem0, (long) 0, 0L);
      Range.of(range_CoordinateSystem0, (-1L), (long) (byte)2);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (long) 0, (long) 1346);
      // Undeclared exception!
      try { 
        Range.parseRange("m&2t/X");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse m&2t/X into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate7.or(predicate7);
      predicate10.and(predicate9);
      predicate10.negate();
      predicate2.negate();
      predicate5.or(predicate10);
      Object object0 = new Object();
      predicate1.and(predicate7);
      predicate7.test(object0);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      predicate6.test(predicate3);
      predicate0.or(predicate6);
      Integer integer1 = Integer.getInteger("", integer0);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) integer1);
      predicate12.or(predicate13);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      predicate8.negate();
      predicate11.or(predicate12);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(3865, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.241462535298864
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 2);
      Range range0 = Range.of((long) 0);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate1.and(predicate4);
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate5);
      Predicate<Object> predicate10 = predicate7.or(predicate7);
      predicate10.and(predicate9);
      Predicate<Object> predicate11 = predicate10.negate();
      predicate2.negate();
      predicate5.or(predicate10);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate12 = predicate2.or(predicate8);
      predicate12.test(predicate1);
      Predicate.isEqual((Object) null);
      predicate4.negate();
      predicate6.or(predicate11);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (-1179010631));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate7.or(predicate7);
      predicate10.and(predicate9);
      predicate5.or(predicate3);
      predicate10.negate();
      predicate2.negate();
      predicate5.or(predicate10);
      Object object0 = new Object();
      predicate1.and(predicate7);
      predicate7.test(object0);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      predicate6.test(predicate3);
      predicate0.or(predicate6);
      Integer integer1 = Integer.getInteger("", integer0);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) integer1);
      predicate12.or(predicate13);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      predicate8.negate();
      predicate11.or(predicate12);
      Nucleotide nucleotide0 = Nucleotide.NotThymine;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3418574523206894
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide0);
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.toString(byteArray0);
      Integer integer0 = new Integer(67);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      predicate1.or(predicate4);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide1 = Nucleotide.Guanine;
      linkedList1.add(nucleotide1);
      linkedList1.add(nucleotide1);
      linkedList0.removeIf(predicate0);
      linkedList1.removeLastOccurrence("Y");
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte) (-114);
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte)0;
      byteArray1[3] = (byte) (-97);
      byteArray1[4] = (byte) (-8);
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, (byte)0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getGapOffsets(byteArray1);
      byte[] byteArray3 = defaultNucleotideCodec2.encode((int) (byte) (-1), (Iterator<Nucleotide>) null);
      assertFalse(byteArray3.equals((Object)byteArray2));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.4461379413717963
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)2);
      int int1 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 1282);
      assertTrue(int1 == int0);
      
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec2.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, 86);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      String string0 = defaultNucleotideCodec4.toString(byteArray0);
      assertEquals("--", string0);
      
      boolean boolean0 = defaultNucleotideCodec4.isGap(byteArray1, 2855);
      assertFalse(boolean0);
      
      defaultNucleotideCodec3.getNumberOfGapsUntil(byteArray0, 11);
      byte[] byteArray2 = defaultNucleotideCodec0.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)64}, byteArray2);
      
      defaultNucleotideCodec2.getGapOffsets(byteArray1);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate1.and(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      Predicate<Object> predicate6 = predicate1.and(predicate2);
      Predicate<Object> predicate7 = predicate4.or(predicate1);
      Predicate<Object> predicate8 = predicate6.or(predicate1);
      Byte byte0 = new Byte((byte)10);
      Integer integer1 = new Integer(0);
      predicate2.test(integer1);
      Predicate<Object> predicate9 = predicate0.negate();
      Predicate<Object> predicate10 = predicate3.negate();
      Byte byte1 = new Byte((byte)10);
      predicate10.test(byte1);
      Predicate<Object> predicate11 = predicate5.or(predicate8);
      Predicate<Object> predicate12 = predicate9.negate();
      linkedList0.removeIf(predicate12);
      predicate3.test(predicate7);
      predicate11.and(predicate0);
      predicate1.or(predicate11);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.656465032363519
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      defaultNucleotideCodec0.isGap(byteArray0, (-1116));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      Range range0 = Range.ofLength(0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0, range0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getUngappedOffsetFor(byteArray0, (byte)85);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 0);
      Nucleotide nucleotide0 = Nucleotide.Thymine;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedLength(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.getNumberOfGapsUntil(byteArray1, 2);
      defaultNucleotideCodec1.encode(nucleotide0);
      Range.of(3364L);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.isGap(byteArray1, 87);
      defaultNucleotideCodec6.decode(byteArray1, 7L);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.getUngappedOffsetFor(byteArray0, (-3252));
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("Range coordinates %d, %d are not valid %s coordinates");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.Range coordinates %d, %d are not valid %s coordinates
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-1179010631);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-26);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2146370384));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.045129695785239
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate10.test(predicate3);
      Predicate<Object> predicate12 = predicate11.and(predicate10);
      Predicate<Object> predicate13 = predicate11.negate();
      Predicate<Object> predicate14 = predicate12.negate();
      predicate6.negate();
      predicate5.or(predicate11);
      Predicate<Object> predicate15 = predicate11.and(predicate2);
      Predicate<Object> predicate16 = predicate1.and(predicate7);
      predicate8.negate();
      predicate15.or(predicate3);
      Predicate<Object> predicate17 = Predicate.isEqual((Object) predicate15);
      predicate12.and(predicate17);
      predicate13.negate();
      Predicate<Integer> predicate18 = Predicate.isEqual((Object) predicate16);
      predicate5.or(predicate13);
      Object object0 = new Object();
      predicate14.test(predicate18);
      Predicate<Object> predicate19 = predicate16.negate();
      predicate8.or(predicate19);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-3925));
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray0);
      assertEquals(3, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.40254232901456
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)24;
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)54;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte) (-33);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte)107;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1420L;
      Range range0 = Range.of(range_CoordinateSystem0, 1420L, 1420L);
      Range range1 = Range.ofLength(0);
      range1.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersects(range1);
      int int0 = 255;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(22, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.091609619407487
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      linkedList0.offerLast(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Keto;
      linkedList0.add(nucleotide1);
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      linkedList0.remove();
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 0);
      int int0 = defaultNucleotideCodec1.getGappedOffsetFor(byteArray0, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)2, (byte) (-11)}, byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte)12;
      byte byte1 = (byte)85;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor((byte[]) null, (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Integer integer0 = new Integer((-1179010635));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate5);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate7.or(predicate7);
      predicate11.and(predicate9);
      predicate11.negate();
      Predicate<Object> predicate12 = predicate2.negate();
      predicate5.or(predicate11);
      Object object0 = new Object();
      predicate10.negate();
      predicate7.test(object0);
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate2.negate();
      predicate12.test(predicate3);
      predicate0.or(predicate6);
      Integer integer1 = Integer.getInteger("", integer0);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) integer1);
      predicate14.or(predicate15);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      predicate8.negate();
      predicate13.or(predicate14);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate7.or(predicate7);
      predicate10.and(predicate9);
      predicate10.negate();
      predicate2.negate();
      predicate5.or(predicate10);
      Object object0 = new Object();
      predicate1.and(predicate7);
      predicate7.test(object0);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      predicate6.test(predicate3);
      predicate0.or(predicate6);
      Integer integer1 = Integer.getInteger("", integer0);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) integer1);
      predicate12.or(predicate13);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      predicate8.negate();
      predicate11.or(predicate12);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-127);
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-2147483263));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.05514543589291
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-116);
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)1;
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byte byte1 = (byte)4;
      byteArray0[4] = (byte)4;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((int) (byte)0, iterator0);
      byteArray0[5] = (byte) (-71);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte)35;
      byteArray0[8] = (byte)68;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-712));
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, 1430);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("OG<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.OG<
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Comparator<Nucleotide> comparator0 = (Comparator<Nucleotide>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      linkedList0.add(nucleotide0);
      Nucleotide nucleotide1 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide1);
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-1);
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-415);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.45126227595883
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1420L, 1420L);
      Range range1 = Range.ofLength(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((long) (byte)85);
      range0.toString(range_CoordinateSystem0);
      range1.forEach(consumer0);
      range0.intersects(range1);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1420L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6862668983950018
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)2, (long) (byte)2);
      Range range1 = Range.ofLength(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.toString(range_CoordinateSystem0);
      range1.forEach(consumer0);
      range0.intersects(range1);
      defaultNucleotideCodec0.iterator(byteArray0, range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (long) (byte)2, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.and(predicate6);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate0);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate6.or(predicate6);
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      predicate11.negate();
      predicate4.and(predicate9);
      predicate2.or(predicate10);
      predicate1.and(predicate6);
      Predicate<Object> predicate12 = predicate7.negate();
      Predicate<Object> predicate13 = predicate5.negate();
      predicate5.test(predicate3);
      predicate0.or(predicate5);
      Integer integer1 = new Integer((-1179010631));
      Predicate<Object> predicate14 = Predicate.isEqual((Object) integer1);
      predicate13.or(predicate14);
      Object object0 = new Object();
      Object object1 = new Object();
      predicate6.test(predicate6);
      predicate8.negate();
      predicate12.or(predicate13);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)27;
      byteArray0[2] = (byte)12;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 243);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)3;
      byteArray0[6] = (byte)9;
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Purine;
      int int1 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "<Z?Fi:;8u}J&>tFF$:");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("<Z?Fi:;8u}J&>tFF$:");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate<Object> predicate11 = predicate2.negate();
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      Object object0 = new Object();
      Predicate<Object> predicate15 = predicate7.negate();
      predicate7.test(object0);
      Predicate<Object> predicate16 = predicate14.negate();
      Predicate<Object> predicate17 = predicate15.negate();
      predicate6.test(predicate3);
      predicate16.negate();
      Predicate<Object> predicate18 = predicate11.negate();
      predicate17.or(predicate18);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      Predicate.isEqual((Object) predicate4);
      predicate9.negate();
      predicate12.negate();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      Range range0 = Range.of((long) (byte) (-30));
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3775674045270705
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[3] = (byte)2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, 3002);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray0, 3002);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1600));
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec2.isGap(byteArray0, 2855);
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec3.decode(byteArray1, 0L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 0 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7547579433186486
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-2146370394));
      byte byte0 = (byte)13;
      byteArray0[0] = (byte)13;
      byte byte1 = (byte)4;
      byteArray0[1] = (byte)4;
      byte byte2 = (byte)6;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      byte[] byteArray0 = null;
      byte byte0 = (byte)85;
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, (byte)13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8287814661565043
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      predicate1.test("");
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = predicate6.and(predicate6);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate4);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate8.negate();
      predicate9.test(predicate0);
      Predicate<Object> predicate11 = predicate10.and(predicate9);
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = predicate11.negate();
      predicate5.negate();
      Predicate<Object> predicate14 = predicate4.or(predicate10);
      Predicate<Object> predicate15 = predicate10.and(predicate2);
      Predicate<Object> predicate16 = predicate1.and(predicate6);
      predicate7.negate();
      Predicate<Object> predicate17 = predicate12.negate();
      Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate15);
      predicate11.and(predicate18);
      predicate5.test(predicate1);
      predicate0.or(predicate5);
      Predicate<Object> predicate19 = predicate14.negate();
      Predicate<Integer> predicate20 = Predicate.isEqual((Object) predicate16);
      predicate17.or(predicate19);
      Object object0 = new Object();
      predicate13.test(predicate20);
      Predicate<Object> predicate21 = predicate16.negate();
      predicate7.or(predicate21);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals(6, byteArray0.length);
      assertEquals("CGT", string0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte) (-46), (byte) (-32)}, byteArray0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 64);
      assertFalse(boolean0);
      
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate1.and(predicate5);
      predicate0.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate2.negate();
      Predicate<Object> predicate9 = predicate3.or(predicate0);
      Predicate<Object> predicate10 = predicate5.negate();
      predicate10.and(predicate5);
      predicate9.test(integer0);
      Integer integer1 = new Integer(2122219134);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) null);
      predicate10.or(predicate2);
      linkedList0.removeIf(predicate8);
      Object object0 = new Object();
      predicate2.test(object0);
      predicate11.negate();
      predicate7.negate();
      predicate10.or(predicate2);
      Predicate<Object> predicate12 = predicate4.negate();
      Predicate<Object> predicate13 = predicate4.and(predicate12);
      predicate5.or(predicate13);
      defaultNucleotideCodec0.toString(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6861134662251085
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      int int0 = new Byte((byte)85);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 2);
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)85;
      byteArray1[1] = (byte)85;
      byteArray1[2] = (byte)85;
      byteArray1[3] = (byte)85;
      defaultNucleotideCodec1.isGap(byteArray0, 79);
      byteArray1[4] = (byte)85;
      byteArray1[5] = (byte)85;
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.5391714703615573
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byte byte0 = (byte) (-112);
      byteArray0[7] = (byte) (-112);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)3;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)104);
      byteArray0[6] = (byte)24;
      byte byte1 = (byte)85;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor((byte[]) null, 255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[13];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)47;
      Nucleotide nucleotide0 = defaultNucleotideCodec0.decode(byteArray0, (byte)10);
      assertEquals(Nucleotide.Gap, nucleotide0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9599102745989194
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide0);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      int int0 = 979;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(979, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-74);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.decode(byteArray0, (byte)0);
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertEquals(5603584, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4294967295L);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2147483645
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2015566946087035
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)104;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)3;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)104);
      byteArray0[6] = (byte)9;
      byteArray0[7] = (byte)85;
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-112));
      defaultNucleotideCodec0.decode(byteArray0, 0L);
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)9);
      defaultNucleotideCodec0.isGap(byteArray0, 0);
      // Undeclared exception!
      try { 
        Range.of((long) (byte)16, (long) (byte)3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.5255375134127473
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec.values();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)7;
      byteArray0[1] = (byte)56;
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte) (-71);
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)32;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[1] = (byte)85;
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-3709L), (-3709L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 1420L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.404588558646996
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)15;
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)15;
      byteArray0[4] = (byte) (-34);
      byte byte0 = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-34);
      byteArray0[7] = (byte)15;
      byteArray0[8] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test(":");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate<Object> predicate11 = predicate2.negate();
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      Object object0 = new Object();
      Predicate<Object> predicate15 = predicate7.negate();
      predicate7.test(object0);
      Predicate<Object> predicate16 = predicate14.negate();
      Predicate<Object> predicate17 = predicate15.negate();
      predicate6.test(predicate3);
      predicate16.negate();
      Predicate<Object> predicate18 = predicate11.negate();
      predicate17.or(predicate18);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      Predicate.isEqual((Object) predicate4);
      predicate9.negate();
      predicate12.negate();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-30);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.6488041417305412
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 1420L;
      Range range0 = Range.of(range_CoordinateSystem0, 1420L, 1420L);
      Range.of((long) (byte)2);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((long) (byte)85);
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate10);
      Predicate<Object> predicate14 = predicate1.negate();
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate6.negate();
      Predicate<Object> predicate17 = predicate5.or(predicate12);
      Predicate<Object> predicate18 = predicate12.and(predicate2);
      Predicate<Object> predicate19 = predicate16.negate();
      predicate8.negate();
      Predicate<Object> predicate20 = predicate14.negate();
      predicate11.negate();
      Predicate<Object> predicate21 = Predicate.isEqual((Object) predicate18);
      predicate13.and(predicate21);
      Predicate<Object> predicate22 = predicate17.negate();
      predicate22.and(predicate2);
      predicate15.or(predicate8);
      Predicate<Integer> predicate23 = Predicate.isEqual((Object) predicate19);
      predicate20.or(predicate22);
      Object object0 = new Object();
      predicate15.test(predicate23);
      Predicate<Object> predicate24 = predicate19.negate();
      predicate8.or(predicate24);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte) (-34);
      byteArray0[2] = (byte)7;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      Predicate<Object> predicate9 = predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate10 = predicate7.or(predicate7);
      predicate10.and(predicate9);
      predicate10.negate();
      predicate2.negate();
      predicate5.or(predicate10);
      Object object0 = new Object();
      predicate1.and(predicate7);
      predicate7.test(object0);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      predicate6.test(predicate3);
      predicate0.or(predicate6);
      Integer integer1 = Integer.getInteger("", integer0);
      Predicate<Object> predicate13 = Predicate.isEqual((Object) integer1);
      predicate12.or(predicate13);
      Object object1 = new Object();
      predicate7.test(predicate7);
      predicate8.negate();
      predicate11.or(predicate12);
      Nucleotide nucleotide0 = Nucleotide.Weak;
      nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6651045795808095
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[3] = (byte)2;
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 11);
      Integer integer0 = new Integer(2302);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 9L;
      Range.of((long) 9, 1497L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2393L, (long) (byte)2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.5700075794156847
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-17);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte) (-101);
      byteArray0[3] = (byte)81;
      byteArray0[4] = (byte) (-96);
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      byteArray0[5] = (byte)93;
      byteArray0[6] = (byte) (-67);
      byteArray0[7] = (byte)32;
      byteArray0[8] = (byte)127;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)93);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate7.and(predicate7);
      Predicate<Object> predicate8 = predicate1.negate();
      predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate7.or(predicate7);
      predicate2.negate();
      predicate9.negate();
      predicate2.negate();
      predicate5.or(predicate9);
      Object object0 = new Object();
      predicate1.and(predicate7);
      predicate7.test(object0);
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate6.negate();
      predicate6.test(predicate3);
      predicate0.or(predicate6);
      Integer integer1 = Integer.getInteger("", integer0);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) integer1);
      predicate11.or(predicate12);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      predicate8.negate();
      predicate10.or(predicate11);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)55;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte)9);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1240));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.67301734058239
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1420L;
      Range range0 = Range.of(range_CoordinateSystem0, 1420L, 1420L);
      Range range1 = Range.ofLength(0);
      range1.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.67301734058239
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1420L;
      Range range0 = Range.of(range_CoordinateSystem0, 1420L, 1420L);
      Range range1 = Range.ofLength(0);
      range1.getEnd(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 255);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 470747223;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-116);
      byte byte0 = (byte)17;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate10.test(predicate3);
      Predicate<Object> predicate12 = predicate11.and(predicate10);
      Predicate<Object> predicate13 = predicate11.negate();
      Predicate<Object> predicate14 = predicate12.negate();
      predicate6.negate();
      predicate6.negate();
      predicate5.or(predicate11);
      predicate11.and(predicate2);
      predicate1.and(predicate7);
      predicate9.or(predicate14);
      predicate8.negate();
      predicate13.negate();
      predicate5.negate();
      predicate7.negate();
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 2496);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)34;
      byteArray0[1] = (byte)14;
      byte byte0 = (byte) (-1);
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate7.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate10);
      Predicate<Object> predicate14 = predicate1.negate();
      Predicate<Object> predicate15 = predicate13.negate();
      Predicate<Object> predicate16 = predicate6.negate();
      Predicate<Object> predicate17 = predicate5.or(predicate12);
      Predicate<Object> predicate18 = predicate12.and(predicate2);
      Predicate<Object> predicate19 = predicate16.negate();
      predicate8.negate();
      Predicate<Object> predicate20 = predicate14.negate();
      predicate11.negate();
      Predicate<Object> predicate21 = Predicate.isEqual((Object) predicate18);
      predicate13.and(predicate21);
      Predicate<Object> predicate22 = predicate17.negate();
      predicate22.and(predicate2);
      predicate15.or(predicate8);
      Predicate<Integer> predicate23 = Predicate.isEqual((Object) predicate19);
      predicate20.or(predicate22);
      Object object0 = new Object();
      predicate15.test(predicate23);
      Predicate<Object> predicate24 = predicate19.negate();
      predicate8.or(predicate24);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)46;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)113;
      byteArray0[8] = (byte) (-119);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      linkedList0.add(nucleotide0);
      Integer integer0 = new Integer(67);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.removeLastOccurrence(integer0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec[] defaultNucleotideCodecArray0 = DefaultNucleotideCodec.values();
      assertEquals(1, defaultNucleotideCodecArray0.length);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.812328619861991
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-127);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-74);
      byteArray0[5] = (byte) (-55);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(9, iterator0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.047707978151193
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-1179010631));
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate3);
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Predicate<Object> predicate7 = Predicate.isEqual((Object) nucleotide0);
      Predicate<Object> predicate8 = predicate6.and(predicate7);
      Predicate<Object> predicate9 = predicate1.and(predicate3);
      Predicate<Object> predicate10 = predicate6.or(predicate4);
      Predicate<Object> predicate11 = predicate9.or(predicate4);
      Predicate<Object> predicate12 = predicate11.negate();
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      Predicate<Object> predicate13 = Predicate.isEqual((Object) predicate7);
      Nucleotide nucleotide1 = Nucleotide.NotCytosine;
      predicate7.test(nucleotide1);
      Predicate<Object> predicate14 = predicate13.or(predicate9);
      predicate6.negate();
      predicate10.test(predicate7);
      predicate14.and(predicate12);
      predicate0.or(predicate8);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("HEADER_LENGTH");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.HEADER_LENGTH
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.365349639944498
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate4.negate();
      predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate7.or(predicate1);
      Predicate<Object> predicate10 = predicate2.negate();
      Predicate<Object> predicate11 = predicate5.or(predicate9);
      Object object0 = new Object();
      predicate1.and(predicate7);
      predicate7.test(object0);
      Predicate<Object> predicate12 = predicate8.negate();
      Predicate<Object> predicate13 = predicate10.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      predicate13.test(predicate3);
      predicate6.or(predicate12);
      linkedList0.removeIf(predicate11);
      Object object1 = new Object();
      Object object2 = new Object();
      Predicate<Object> predicate15 = predicate10.and(predicate13);
      Predicate<Object> predicate16 = predicate15.negate();
      predicate13.and(predicate16);
      predicate12.or(predicate14);
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-1179010631), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte) (-127);
      byteArray0[2] = (byte) (-74);
      byteArray0[5] = (byte)0;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-2), iterator0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.6074986111006435
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Integer integer0 = new Integer((-1179010631));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate1.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate8 = predicate4.or(predicate7);
      Predicate<Object> predicate9 = predicate0.and(predicate1);
      predicate8.test(object0);
      Predicate<Object> predicate10 = predicate9.or(predicate6);
      Predicate<Object> predicate11 = predicate7.negate();
      Predicate<Object> predicate12 = predicate5.negate();
      predicate6.test(object0);
      Predicate<Object> predicate13 = predicate1.negate();
      Predicate<Object> predicate14 = predicate11.negate();
      predicate14.negate();
      predicate14.test(predicate3);
      Predicate<Object> predicate15 = predicate3.negate();
      Predicate<Object> predicate16 = predicate5.or(predicate13);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.removeIf(predicate12);
      Predicate<Object> predicate17 = predicate11.and(predicate14);
      Predicate<Object> predicate18 = predicate17.negate();
      Predicate<Object> predicate19 = predicate3.negate();
      Predicate<Object> predicate20 = predicate19.or(predicate10);
      predicate20.test(predicate19);
      predicate15.negate();
      Predicate<Object> predicate21 = predicate18.and(predicate16);
      predicate16.or(predicate21);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte) (-30);
      byteArray0[3] = (byte)77;
      byteArray0[4] = (byte)6;
      byteArray0[5] = (byte)126;
      byteArray0[6] = (byte)109;
      byteArray0[7] = (byte) (-104);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 71);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.574729047527649
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1420L;
      Range range0 = Range.of(range_CoordinateSystem0, 1420L, 1420L);
      Range.of((long) (byte)85);
      Range range1 = Range.ofLength(0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 713
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.831673301904631
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test("");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      predicate1.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate9 = predicate7.or(predicate7);
      Predicate<Object> predicate10 = predicate9.and(predicate8);
      Predicate<Object> predicate11 = predicate9.negate();
      predicate10.negate();
      Predicate<Object> predicate12 = predicate6.negate();
      Predicate<Object> predicate13 = predicate5.or(predicate9);
      predicate9.and(predicate2);
      Object object0 = new Object();
      Predicate<Object> predicate14 = predicate1.and(predicate7);
      predicate7.test(object0);
      Predicate<Object> predicate15 = predicate6.negate();
      predicate6.test(predicate3);
      predicate0.or(predicate6);
      Predicate<Object> predicate16 = predicate13.negate();
      Predicate.isEqual((Object) predicate14);
      predicate12.or(predicate16);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      predicate2.negate();
      predicate15.or(predicate11);
      Nucleotide nucleotide0 = Nucleotide.NotAdenine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-1L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -1
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.403835153836796
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ":");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      predicate1.test(":");
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.and(predicate6);
      Predicate<Object> predicate8 = predicate5.negate();
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate<Object> predicate11 = predicate2.negate();
      Predicate<Object> predicate12 = predicate10.negate();
      Predicate<Object> predicate13 = predicate8.negate();
      Predicate<Object> predicate14 = predicate13.negate();
      Object object0 = new Object();
      Predicate<Object> predicate15 = predicate7.negate();
      Predicate<Object> predicate16 = predicate14.negate();
      Predicate<Object> predicate17 = predicate15.negate();
      predicate6.test(predicate3);
      predicate16.negate();
      Predicate<Object> predicate18 = predicate11.negate();
      predicate17.or(predicate18);
      Object object1 = new Object();
      Object object2 = new Object();
      predicate7.test(predicate7);
      Predicate.isEqual((Object) predicate4);
      predicate9.negate();
      predicate12.negate();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)37;
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-84);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, 2496);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Keto;
      linkedList0.add(nucleotide0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList0.sort(comparator0);
      Integer integer0 = new Integer(67);
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.removeLastOccurrence(integer0);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec.values();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 557L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 557 corresponds to encodedIndex 282  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (long) (byte)0, (long) (byte)0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ -1 .. -1 ]/0B is out of range of sequence which is only [ 0 .. 5570559 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[1] = (byte)0;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1413L;
      Range range0 = Range.of(range_CoordinateSystem0, 1413L, 1413L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 1412 .. 1412 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.574729047527649
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, 1771);
      byte byte0 = (byte)2;
      byteArray0[3] = (byte)2;
      byteArray0[1] = (byte)85;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1420L;
      Range range0 = Range.of(range_CoordinateSystem0, 1420L, 1420L);
      Range range1 = Range.ofLength(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersects(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 713
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[12];
      Integer integer0 = new Integer((-1179010631));
      defaultNucleotideCodec0.iterator(byteArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.949432502961013
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Nucleotide nucleotide0 = Nucleotide.Pyrimidine;
      LinkedList<Nucleotide> linkedList1 = new LinkedList<Nucleotide>();
      linkedList0.addAll((Collection<? extends Nucleotide>) linkedList1);
      linkedList0.add(nucleotide0);
      Integer integer0 = new Integer(67);
      LinkedList<Nucleotide> linkedList2 = new LinkedList<Nucleotide>();
      linkedList0.removeLastOccurrence(integer0);
      LinkedList<Nucleotide> linkedList3 = new LinkedList<Nucleotide>();
      nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec.values();
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 67);
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      byte[] byteArray1 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Integer integer0 = new Integer((-1549));
      Object object1 = new Object();
      Object object2 = new Object();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-37);
      byteArray0[1] = (byte)51;
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)37;
      byteArray0[4] = (byte) (-37);
      byteArray0[6] = (byte)60;
      byteArray0[7] = (byte) (-84);
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 2496);
      assertFalse(boolean0);
  }
}
