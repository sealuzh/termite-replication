/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 16 10:17:22 GMT 2019
 */

package com.ib.client;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.ib.client.Contract;
import com.ib.client.ContractDetails;
import com.ib.client.EWrapperMsgGenerator;
import com.ib.client.Execution;
import com.ib.client.Order;
import com.ib.client.OrderState;
import com.ib.client.TagValue;
import com.ib.client.UnderComp;
import java.util.Collection;
import java.util.Vector;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class EWrapperMsgGenerator_ESTest extends EWrapperMsgGenerator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_comboLegsDescrip = "Zc9q\"";
      contract0.m_secType = "BAG";
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_stockRangeUpper = (double) 'c';
      orderState0.m_initMargin = "zY&k^)&!>kD3TeYT";
      orderState0.m_commission = (-322.1);
      orderState0.m_minCommission = (double) 'b';
      UnderComp underComp0 = new UnderComp();
      contract0.m_underComp = underComp0;
      underComp0.m_price = 1.7976931348623157E308;
      orderState0.m_status = "";
      order0.m_delta = 0.0;
      underComp0.m_delta = 2324.39318606;
      orderState0.m_equityWithLoan = null;
      order0.m_algoStrategy = "zY&k^)&!>kD3TeYT";
      EWrapperMsgGenerator.openOrder(699, contract0, order0, orderState0);
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Integer integer0 = new Integer(2147483646);
      Integer integer1 = new Integer(226);
      Integer integer2 = new Integer(2145805153);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer3 = new Integer(0);
      vector0.add(integer3);
      Integer integer4 = new Integer(171);
      Integer integer5 = new Integer(2147483646);
      String string0 = EWrapperMsgGenerator.tickOptionComputation(13, 13, 1.7976931348623157E308, 0, 171, 0.0);
      assertEquals("id=13  modelOptComp: vol = N/A delta = 0.0: modelPrice = 171.0: pvDividend = 0.0", string0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.2985266783242972
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Order order0 = new Order();
      EWrapperMsgGenerator.tickSize(Integer.MAX_VALUE, 3, 0);
      EWrapperMsgGenerator.tickOptionComputation(0, 13, (-2205.84849), 0, 0, 1.7976931348623157E308);
      EWrapperMsgGenerator.tickPrice(31, 2145920705, 4113.0, (-148));
      EWrapperMsgGenerator.tickGeneric(0, 3, 0);
      EWrapperMsgGenerator.tickOptionComputation(Integer.MAX_VALUE, Integer.MAX_VALUE, (-1.621026952E9), (-148), 1886.6624641701128, 2145920705);
      EWrapperMsgGenerator.tickGeneric(28, (-148), (-458.963744));
      System.setCurrentTimeMillis(13);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation((-48), 13, 1103.0127339503797, 1.7976931348623157E308, (-6), 1.7976931348623157E308);
      System.setCurrentTimeMillis((-2146510548));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_secType = "BAG";
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_stockRangeUpper = (double) 'c';
      orderState0.m_initMargin = "zY&k^)&!>kD3TeYT";
      orderState0.m_minCommission = (double) 'b';
      UnderComp underComp0 = new UnderComp();
      contract0.m_underComp = underComp0;
      orderState0.m_status = "";
      underComp0.m_delta = 2324.39318606;
      orderState0.m_equityWithLoan = null;
      order0.m_algoStrategy = "zY&k^)&!>kD3TeYT";
      EWrapperMsgGenerator.openOrder(699, contract0, order0, orderState0);
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals("[]", vector0.toString());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_secType = "BAG";
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_stockRangeUpper = (double) 'c';
      orderState0.m_initMargin = "zY&k^)&!>kD3TeYT";
      orderState0.m_commission = (-322.1);
      orderState0.m_minCommission = (double) 'b';
      UnderComp underComp0 = new UnderComp();
      underComp0.m_price = 1.7976931348623157E308;
      orderState0.m_status = "";
      order0.m_delta = 0.0;
      order0.m_basisPoints = 2324.39318606;
      orderState0.m_equityWithLoan = null;
      order0.m_algoStrategy = "zY&k^)&!>kD3TeYT";
      EWrapperMsgGenerator.openOrder(699, contract0, order0, orderState0);
      Vector<Object> vector0 = new Vector<Object>();
      assertTrue(vector0.isEmpty());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3674724429174536
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      EWrapperMsgGenerator.tickSnapshotEnd((-1923));
      EWrapperMsgGenerator.tickOptionComputation((-48), (-1923), 1.7976931348623157E308, (-2864.0), (-1.0), 1013.0);
      UnderComp underComp0 = new UnderComp();
      underComp0.m_price = (double) (-1923);
      EWrapperMsgGenerator.tickEFP(0, 2812, (-2864.0), "id=-48  unknown: vol = N/A delta = N/A", 1.7976931348623157E308, (-48), "id=-48  unknown: vol = N/A delta = N/A", (-48), 2812);
      EWrapperMsgGenerator.tickGeneric((-1923), (-48), (-1923.0));
      EWrapperMsgGenerator.tickString(0, 0, "id=-1923  unknown=-1923.0");
      System.setCurrentTimeMillis(0);
      EWrapperMsgGenerator.tickSize(1867, (-696), 10);
      underComp0.m_delta = (double) (-1228);
      EWrapperMsgGenerator.tickEFP((-696), 2812, (-48.0), "id=-48  unknown: vol = N/A delta = N/A", (-1228.0), 0, (String) null, 1867, 949.45668997);
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.updatePortfolio((Contract) null, 628, 1.7976931348623157E308, 1867, 1.7976931348623157E308, 2812, (-1.0), "id=1867  unknown=10");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Contract contract0 = new Contract();
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_stockRangeUpper = (double) 'c';
      orderState0.m_initMargin = "CzY&k^)&!>kD3TeYT";
      orderState0.m_minCommission = (double) 'b';
      UnderComp underComp0 = new UnderComp();
      order0.m_deltaNeutralOrderType = " goodTillDape=";
      contract0.m_underComp = underComp0;
      orderState0.m_status = "";
      underComp0.m_delta = 2324.39318606;
      orderState0.m_equityWithLoan = null;
      order0.m_algoStrategy = "CzY&k^)&!>kD3TeYT";
      String string0 = EWrapperMsgGenerator.openOrder(699, contract0, order0, orderState0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation((-48), 13, (-48), (-0.9234875568608139), (-48), (-0.9234875568608139));
      Integer integer0 = new Integer((-92));
      Integer integer1 = new Integer((-4481));
      Integer integer2 = new Integer((-9));
      Integer integer3 = new Integer(2145028277);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer4 = new Integer(371);
      vector0.add(integer4);
      Integer integer5 = new Integer((-2123));
      Integer integer6 = new Integer(371);
      vector0.add(integer4);
      Integer integer7 = new Integer((-92));
      Integer integer8 = new Integer(371);
      Integer integer9 = new Integer((-4481));
      Integer integer10 = new Integer(2146413277);
      Integer integer11 = new Integer((-9));
      Integer integer12 = new Integer(2786);
      vector0.add(integer7);
      Integer integer13 = new Integer(2211);
      Integer integer14 = new Integer(2145028277);
      Integer integer15 = new Integer((-9));
      Integer integer16 = new Integer(2147018197);
      Integer integer17 = new Integer(371);
      boolean boolean0 = vector0.add(integer9);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Contract contract0 = new Contract();
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_stockRangeUpper = (double) 'c';
      order0.m_scaleInitLevelSize = 2344;
      orderState0.m_initMargin = "zY&k^)&!>kD3TeYT";
      orderState0.m_minCommission = (double) 'b';
      UnderComp underComp0 = new UnderComp();
      contract0.m_underComp = underComp0;
      orderState0.m_status = "";
      underComp0.m_delta = 2324.39318606;
      orderState0.m_equityWithLoan = null;
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.openOrder(2, contract0, (Order) null, orderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation(2145805123, 157, 1.7976931348623157E308, 1.7976931348623157E308, 1.7976931348623157E308, 153.8);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(10);
      vector0.add(integer0);
      Integer integer1 = new Integer(2420);
      Integer integer2 = new Integer((-1621026952));
      Integer integer3 = new Integer((-1621026952));
      vector0.add(integer2);
      vector0.add(integer1);
      Integer integer4 = new Integer(2145805123);
      Integer integer5 = new Integer(2420);
      Integer integer6 = new Integer((-2639));
      Integer integer7 = new Integer((-3863));
      Integer integer8 = new Integer(2145805123);
      boolean boolean0 = vector0.add(integer8);
      Integer integer9 = new Integer(10);
      vector0.add(integer9);
      Integer integer10 = new Integer(157);
      Integer integer11 = new Integer(2420);
      Integer integer12 = new Integer(157);
      vector0.add(integer12);
      Integer integer13 = new Integer(1994091958);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer14 = new Integer(1394);
      vector0.add(integer11);
      Integer integer15 = new Integer(1308);
      Integer integer16 = new Integer(157);
      Integer integer17 = new Integer((-1621026952));
      boolean boolean1 = vector0.add(integer17);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      EWrapperMsgGenerator.execDetailsEnd((-842));
      EWrapperMsgGenerator.scannerDataEnd(0);
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.scannerData(13, (-21), (ContractDetails) null, "_O}5rE14)lpC|@(X", "1ib8lyGea5f/Gp8", "9+", "\"*");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.fundamentalData(13, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.clone();
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.contractMsg((Contract) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = EWrapperMsgGenerator.tickString(2146510107, 1994091958, "OptionHistoricalVolatility");
      assertEquals("id=2146510107  unknown=OptionHistoricalVolatility", string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Execution execution0 = new Execution(50, 50, "tradingClass = ", "tradingClass = ", "tradingClass = ", (String) null, (String) null, 50, 50, 50, 10, 10, 1.7976931348623157E308);
      execution0.m_side = "\u00BCQl|";
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.execDetails(50, (Contract) null, execution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_secType = "BAG";
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_orderId = 2742;
      order0.m_stockRangeUpper = (double) 'c';
      orderState0.m_initMargin = "zY&k^)&!>kD3TeYT";
      orderState0.m_commission = (-322.1);
      orderState0.m_minCommission = (double) 'b';
      UnderComp underComp0 = new UnderComp();
      contract0.m_underComp = underComp0;
      underComp0.m_price = 1.7976931348623157E308;
      orderState0.m_status = "";
      underComp0.m_delta = 2324.39318606;
      orderState0.m_equityWithLoan = null;
      order0.m_algoStrategy = "zY&k^)&!>kD3TeYT";
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.bondContractDetails(0, (ContractDetails) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.tickPrice(175, 175, 2145805153, 175);
      assertEquals("id=175  unknown=2.145805153E9  canAutoExecute", string0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Order order0 = new Order();
      order0.equals((Object) null);
      order0.m_referencePriceType = 1621;
      order0.m_orderRef = "OptionPutOpenInterest";
      EWrapperMsgGenerator.tickOptionComputation(29, (-701), 0.0, 0, 3, 2);
      Vector<Object> vector0 = new Vector<Object>();
      assertFalse(vector0.contains("OptionPutOpenInterest"));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.deltaNeutralValidation((-1), (UnderComp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract((-3606), "~mgh", "Ag}B&tD*/u0]", "ov2=64zkHaron%", (-1831.5147961353227), "Nq6@7j'fzK<", "DZubZ4Gtr%Pp3\"O5L", "{$jY@85f>-w", "~mgh", "!GH$Zqil8kez;T", (Vector) null, "{$jY@85f>-w", false, "~mgI", "]@~p,ftY4^<UOn+Kxc");
      Execution execution0 = new Execution((-2332), 1, "ov2=64zkHaron%", "DZubZ4Gtr%Pp3\"O5L", "BAG", "~mgh", (String) null, 1500, (-1.0), (-25), (-25), (-25), 0.0);
      execution0.m_liquidation = (-3606);
      String string0 = EWrapperMsgGenerator.execDetails(3417, contract0, execution0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.fundamentalData(74, "WUhJcVqj");
      assertEquals("id  = 74 len = 8\nWUhJcVqj", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ContractDetails contractDetails0 = new ContractDetails((Contract) null, ",AF6QKVly", ",AF6QKVly", (-1), ",AF6QKVly", ",AF6QKVly", (-1), ",AF6QKVly", ",AF6QKVly", ",AF6QKVly", ",AF6QKVly", ",AF6QKVly", ",AF6QKVly", "CZFM", ",AF6QKVly");
      contractDetails0.m_validExchanges = null;
      // Undeclared exception!
      try { 
        EWrapperMsgGenerator.contractDetails((-1), (ContractDetails) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.ib.client.EWrapperMsgGenerator", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Contract contract0 = new Contract();
      contract0.m_secType = "BAG";
      OrderState orderState0 = new OrderState();
      contract0.m_secId = "zY&k^)&!>kD3TeYT";
      UnderComp underComp0 = new UnderComp();
      contract0.m_underComp = underComp0;
      underComp0.m_conId = 699;
      underComp0.m_delta = 1331.44;
      underComp0.m_delta = (-234.8639448619);
      underComp0.m_delta = (-234.8639448619);
      contract0.m_right = null;
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = EWrapperMsgGenerator.tickPrice(0, 699, 0.0, 0);
      assertEquals("id=0  unknown=0.0  noAutoExecute", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OrderState orderState0 = new OrderState("", "{", "{", "", 9.0, 2058005162, 1.7976931348623157E308, "close", "close");
      Order order0 = new Order();
      Contract contract0 = new Contract(3, "i4/U0101|ThyG-]", "f{undamentals", "auctionImbalance", (-1954.1699161), "{", (String) null, "M<}t", (String) null, "", (Vector) null, "N/A", false, "OptionPutVolume", "close");
      OrderState orderState1 = new OrderState("", "{", "auctionImbalance", "avgPrice = ", 9.0, 0, 2205.04, " impliedFuture = ", "Ag}B&tD*/u0]");
      String string0 = EWrapperMsgGenerator.openOrder(13, contract0, order0, orderState1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.accountDownloadEnd("AF@UqP,Am'M");
      assertEquals("accountDownloadEnd: AF@UqP,Am'M", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      EWrapperMsgGenerator.contractDetailsEnd(2145805123);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(10);
      vector0.add(integer0);
      Integer integer1 = new Integer(2420);
      Integer integer2 = new Integer((-1621026952));
      Integer integer3 = new Integer((-1621026952));
      vector0.add(integer2);
      vector0.add(integer1);
      Integer integer4 = new Integer(2145805123);
      Integer integer5 = new Integer(2420);
      Integer integer6 = new Integer((-2639));
      Integer integer7 = new Integer((-3863));
      Integer integer8 = new Integer(2145805123);
      vector0.add(integer8);
      Integer integer9 = new Integer(10);
      vector0.add(integer9);
      Integer integer10 = new Integer(157);
      Integer integer11 = new Integer(2420);
      Integer integer12 = new Integer(157);
      vector0.add(integer12);
      Integer integer13 = new Integer(1994091958);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer14 = new Integer(1394);
      boolean boolean0 = vector0.add(integer11);
      Integer integer15 = new Integer(1308);
      Integer integer16 = new Integer(157);
      Integer integer17 = new Integer((-1621026952));
      boolean boolean1 = vector0.add(integer17);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Contract contract0 = new Contract();
      ContractDetails contractDetails0 = new ContractDetails(contract0, "tf6Udeb$^", (String) null, 1.7976931348623157E308, (String) null, "tf6Udeb$^", (-207), " delta=", "OptionAskExchStr", (String) null, "tf6Udeb$^", "+Ge++b8_Fmooq&y8t", (String) null, (String) null, (String) null);
      String string0 = EWrapperMsgGenerator.contractDetails((-207), contractDetails0);
      assertEquals("reqId = -207 ===================================\n ---- Contract Details begin ----\nconid = 0\nsymbol = null\nsecType = null\nexpiry = null\nstrike = 0.0\nright = null\nmultiplier = null\nexchange = null\nprimaryExch = null\ncurrency = null\nlocalSymbol = null\nmarketName = tf6Udeb$^\ntradingClass = null\nminTick = 1.7976931348623157E308\nprice magnifier = 0\norderTypes = null\nvalidExchanges = tf6Udeb$^\nunderConId = -207\nlongName =  delta=\ncontractMonth = OptionAskExchStr\nindustry = null\ncategory = tf6Udeb$^\nsubcategory = +Ge++b8_Fmooq&y8t\ntimeZoneId = null\ntradingHours = null\nliquidHours = null\n ---- Contract Details End ----\n", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation(2145920724, 13, 13, 13, 1.0, 13);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.removeAllElements();
      Integer integer0 = new Integer(13);
      vector0.add(integer0);
      Vector<Integer> vector1 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer1 = new Integer(4943);
      unaryOperator0.apply(integer1);
      vector1.replaceAll(unaryOperator0);
      vector1.add(integer0);
      Integer integer2 = new Integer(13);
      vector0.add(integer2);
      int int0 = (-152631047);
      Integer integer3 = new Integer((-152631047));
      int int1 = 48;
      Integer integer4 = new Integer(48);
      Integer integer5 = new Integer(48);
      Integer integer6 = new Integer(2145920724);
      int int2 = 1881;
      Integer integer7 = new Integer(1881);
      Integer integer8 = new Integer(13);
      Vector<Integer> vector2 = new Vector<Integer>();
      vector2.spliterator();
      Integer integer9 = new Integer(13);
      Integer integer10 = new Integer((-2147483645));
      Integer integer11 = new Integer(1881);
      // Undeclared exception!
      try { 
        vector2.addAll((-2147483645), (Collection<? extends Integer>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2147483645
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Contract contract0 = new Contract();
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_blockOrder = false;
      order0.m_stockRangeUpper = (double) 'c';
      orderState0.m_initMargin = "execId = ";
      orderState0.m_minCommission = (double) Integer.MAX_VALUE;
      UnderComp underComp0 = contract0.m_underComp;
      contract0.m_underComp = null;
      orderState0.m_status = "";
      orderState0.m_equityWithLoan = null;
      order0.m_algoStrategy = null;
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = EWrapperMsgGenerator.contractMsg(contract0);
      assertEquals("conid = 0\nsymbol = null\nsecType = null\nexpiry = null\nstrike = 0.0\nright = null\nmultiplier = null\nexchange = null\nprimaryExch = null\ncurrency = null\nlocalSymbol = null\n", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EWrapperMsgGenerator.updateNewsBulletin(1, 1226, "callable = ", "OptionBidExchStr");
      System.setCurrentTimeMillis(1226);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.receiveFA((-1521), "  It does not support secIdType and secId parameters.");
      assertEquals("FA: null   It does not support secIdType and secId parameters.", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Vector<TagValue> vector0 = new Vector<TagValue>();
      Contract contract0 = new Contract(2878, " p>U+ ]|5Ca>", " p>U+ ]|5Ca>", "bIPce];Jq+}3)Q\"X\"", 2878, "ChLeo)0", ": basisPoints = ", " p>U+ ]|5Ca>", "x>M;H1DxIT", "ChLeo)0", vector0, "5?}<7gzB5Fx(l)w^a>", false, ":i5", "price = ");
      String string0 = EWrapperMsgGenerator.updatePortfolio(contract0, 48, (-0.9234875568608139), 2878, (-1.621026952E9), (-1300.333), (-2242.001564408893), "eWMzkBL.{");
      assertEquals("updatePortfolio: conid = 2878\nsymbol =  p>U+ ]|5Ca>\nsecType =  p>U+ ]|5Ca>\nexpiry = bIPce];Jq+}3)Q\"X\"\nstrike = 2878.0\nright = ChLeo)0\nmultiplier = : basisPoints = \nexchange =  p>U+ ]|5Ca>\nprimaryExch = 5?}<7gzB5Fx(l)w^a>\ncurrency = x>M;H1DxIT\nlocalSymbol = ChLeo)0\n48 -0.9234875568608139 2878.0 -1.621026952E9 -1300.333 -2242.001564408893 eWMzkBL.{", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.currentTime((-1644L));
      assertEquals("current time = -1644 (Dec 31, 1969 11:32:36 PM)", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateAccountValue("]KMtRiz", " hidden=", "bidEFP", "bidEFP");
      assertEquals("updateAccountValue: ]KMtRiz  hidden= bidEFP bidEFP", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.scannerParameters("SJ&Emp%){S'4 vPm");
      assertEquals("SCANNER PARAMETERS:\nSJ&Emp%){S'4 vPm", string0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Order order0 = new Order();
      order0.m_deltaNeutralAuxPrice = (double) 0;
      OrderState orderState0 = new OrderState();
      order0.m_stockRangeUpper = (-470.9986991349414);
      orderState0.m_minCommission = (-1.0);
      order0.m_algoStrategy = " goodTillDape=";
      EWrapperMsgGenerator.nextValidId(Integer.MAX_VALUE);
      order0.m_notHeld = true;
      order0.m_lmtPrice = (-1.0);
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateAccountTime("  It does not support snapshot market data requests.");
      assertEquals("updateAccountTime:   It does not support snapshot market data requests.", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      System.setCurrentTimeMillis(1344);
      String string0 = EWrapperMsgGenerator.updateAccountValue("YF", "!#Mf}x.g!mNc$yAfm_", "!#Mf}x.g!mNc$yAfm_", (String) null);
      assertEquals("updateAccountValue: YF !#Mf}x.g!mNc$yAfm_ !#Mf}x.g!mNc$yAfm_ null", string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Order order0 = new Order();
      order0.m_clearingAccount = null;
      String string0 = EWrapperMsgGenerator.orderStatus(1711, "y>zVqRIp%", (-1), (-345), 0, 0, 1, (-1655.66699803), 504, (String) null);
      assertEquals("order status: orderId=1711 clientId=504 permId=0 status=y>zVqRIp% filled=-1 remaining=-345 avgFillPrice=0.0 lastFillPrice=-1655.66699803 parent Id=1 whyHeld=null", string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.realtimeBar(157, 990L, 1576.4617, 0.0, 0.0, (-23.0), 0L, 797.73832301, 2146967177);
      assertEquals("id=157 time = 990 open=1576.4617 high=0.0 low=0.0 close=-23.0 volume=0 count=2146967177 WAP=797.73832301", string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.realtimeBar(910, 669L, (-1.0), 910, 669L, 2323.4219493, 0L, 631.0, 910);
      assertEquals("id=910 time = 669 open=-1.0 high=910.0 low=669.0 close=2323.4219493 volume=0 count=910 WAP=631.0", string0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.updateMktDepth((-4098), 2145960609, 0, (-493), (-924.33273822), 4607);
      assertEquals("updateMktDepth: -4098 2145960609 0 -493 -924.33273822 4607", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector<String> vector0 = new Vector<String>();
      Contract contract0 = new Contract(440, "?,a#uiEXRE.", "RFPCP", "RFPCP", (-2190.927), "?,a#uiEXRE.", "Q-Tp<*K>[`", "Q-Tp<*K>[`", "RFPCP", "<!3J*M~IiM~o)4z$rl/", vector0, "highEFP", true, " delta = ", "Q-Tp<*K>[`");
      ContractDetails contractDetails0 = new ContractDetails(contract0, " low=", "highEFP", 1.7976931348623157E308, "Q-Tp<*K>[`", "?,a#uiEXRE.", 440, "id=-48  modelOptComp: vol = 1071.15351 delta = N/A: modelPrice = 1576.4617: pvDividend = N/A", " delta = ", "id=-48  modelOptComp: vol = 1071.15351 delta = N/A: modelPrice = 1748.18196: pvDividend = 13.0", "LRNLFE#hBOO;J=", "S*<P(cL_7DV0fvaeMC", "*yLyf)?SJFl7=~y", "tGeqUhV85J", "id=2145920705  modelOptComp: vol = 2.058005179E9 delta = N/A: modelPrice = N/A: pvDividend = 68.2862767174");
      String string0 = EWrapperMsgGenerator.bondContractDetails(440, contractDetails0);
      assertEquals("reqId = 440 ===================================\n ---- Bond Contract Details begin ----\nsymbol = ?,a#uiEXRE.\nsecType = RFPCP\ncusip = null\ncoupon = 0.0\nmaturity = null\nissueDate = null\nratings = null\nbondType = null\ncouponType = null\nconvertible = false\ncallable = false\nputable = false\ndescAppend = null\nexchange = Q-Tp<*K>[`\ncurrency = RFPCP\nmarketName =  low=\ntradingClass = highEFP\nconid = 440\nminTick = 1.7976931348623157E308\norderTypes = Q-Tp<*K>[`\nvalidExchanges = ?,a#uiEXRE.\nnextOptionDate = null\nnextOptionType = null\nnextOptionPartial = false\nnotes = null\nlongName = id=-48  modelOptComp: vol = 1071.15351 delta = N/A: modelPrice = 1576.4617: pvDividend = N/A\n ---- Bond Contract Details End ----\n", string0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract(10, "  It does not support delta-neutral orders.", (String) null, "qz{:un!gUKoBOL", 10, "qz{:un!gUKoBOL", (String) null, (String) null, "  It does not support delta-neutral orders.", "  It does not support delta-neutral orders.", vector0, (String) null, false, (String) null, (String) null);
      ContractDetails contractDetails0 = new ContractDetails(contract0, ".LY&gk.?", "  It does not support fundamental data requests.", 1872.97466, "  It does not support fundamental data requests.", "  It does not support delta-neutral orders.", (-3954), "OptionHistoricalVolatility", "RL'm3%O/Kgw|xJ", "k|I~6~a/FQx.DRhcq", "JIdL", "LF#B^dXbfJ>s|", "qz{:un!gUKoBOL", "9]`n1DY.`w`V5OHGabr", "U6L6 Vw[_IV;a+");
      String string0 = EWrapperMsgGenerator.scannerData((-3954), (-3954), contractDetails0, "^QzY+8t%6}~Ww#", "v", ",Z]#:q-o1WjR^", "9]`n1DY.`w`V5OHGabr");
      assertEquals("id = -3954 rank=-3954 symbol=  It does not support delta-neutral orders. secType=null expiry=qz{:un!gUKoBOL strike=10.0 right=qz{:un!gUKoBOL exchange=null currency=  It does not support delta-neutral orders. localSymbol=  It does not support delta-neutral orders. marketName=.LY&gk.? tradingClass=  It does not support fundamental data requests. distance=^QzY+8t%6}~Ww# benchmark=v projection=,Z]#:q-o1WjR^ legsStr=9]`n1DY.`w`V5OHGabr", string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      Contract contract0 = new Contract();
      ContractDetails contractDetails0 = new ContractDetails(contract0, (String) null, (String) null, 1560.63826556, (String) null, (String) null, (-1212), "s-}i9P7", (String) null, (String) null, (String) null, "U:ebOozU>0 ", (String) null, "cHX,I>1s={", (String) null);
      String string0 = EWrapperMsgGenerator.scannerData((-201), (-1212), contractDetails0, (String) null, (String) null, "askOptComp", (String) null);
      assertEquals("id = -201 rank=-1212 symbol=null secType=null expiry=null strike=0.0 right=null exchange=null currency=null localSymbol=null marketName=null tradingClass=null distance=null benchmark=null projection=askOptComp legsStr=null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = EWrapperMsgGenerator.historicalData((-1), "unknown", (-1), 3720.0, (-1), 1215.0, 1090, 2146521082, 511.0, true);
      assertEquals("id=-1 date = unknown open=-1.0 high=3720.0 low=-1.0 close=1215.0 volume=1090 count=2146521082 WAP=511.0 hasGaps=true", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      UnderComp underComp0 = new UnderComp();
      underComp0.m_price = 1.7976931348623157E308;
      underComp0.m_delta = (-1538.654430279032);
      String string0 = EWrapperMsgGenerator.deltaNeutralValidation(944, underComp0);
      assertEquals("id = 944 underComp.conId =0 underComp.delta =-1538.654430279032 underComp.price =1.7976931348623157E308", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Vector<Object> vector0 = new Vector<Object>();
      String string0 = EWrapperMsgGenerator.historicalData((-2147483647), (String) null, 3720.0, 0, (-1979), (-1979), (-1979), (-895), (-3400.5894342), false);
      assertEquals("id=-2147483647 date = null open=3720.0 high=0.0 low=-1979.0 close=-1979.0 volume=-1979 count=-895 WAP=-3400.5894342 hasGaps=false", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = EWrapperMsgGenerator.managedAccounts("Cwp OP~'w(&<RP");
      assertEquals("Connected : The list of managed accounts are : [Cwp OP~'w(&<RP]", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      EWrapperMsgGenerator.openOrderEnd();
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(2452);
      Integer integer1 = new Integer((-1621026952));
      Integer integer2 = new Integer((-1621026952));
      vector0.add(integer1);
      Integer integer3 = new Integer(2145805123);
      Integer integer4 = new Integer(2145805123);
      Integer integer5 = new Integer((-2639));
      Integer integer6 = new Integer((-3863));
      Integer integer7 = new Integer(2452);
      Integer integer8 = new Integer(150);
      Integer integer9 = new Integer(2452);
      Integer integer10 = new Integer(13);
      Integer integer11 = new Integer(2145805123);
      vector0.add(integer11);
      Integer integer12 = new Integer((-1621026952));
      Integer integer13 = new Integer(2145805123);
      Integer integer14 = new Integer((-211));
      boolean boolean0 = vector0.add(integer14);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Integer integer0 = new Integer(13);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.add(integer0);
      Integer integer1 = new Integer((-48));
      Integer integer2 = new Integer((-3401));
      Integer integer3 = new Integer(13);
      Integer integer4 = new Integer(18);
      Integer integer5 = new Integer(4);
      String string0 = EWrapperMsgGenerator.updateMktDepthL2(18, 4, "<|O/-YII:", (-1165), (-197), 583.92, (-3401));
      assertEquals("updateMktDepth: 18 4 <|O/-YII: -1165 -197 583.92 -3401", string0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Order order0 = new Order();
      order0.m_auxPrice = (double) 13;
      order0.m_orderRef = "IndexFuturePremium";
      order0.m_orderRef = "OptionPutOpenInterest";
      order0.m_goodTillDate = " hidden=";
      order0.m_eTradeOnly = true;
      EWrapperMsgGenerator.tickOptionComputation(0, 13, Integer.MAX_VALUE, 0, 1.7976931348623157E308, 4409.67044278);
      Vector<Object> vector0 = new Vector<Object>();
      assertEquals(0, vector0.size());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation(1, 1, 23, (-1.0), 1.7976931348623157E308, 985.0);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(157);
      Integer integer2 = new Integer(10);
      Vector<Integer> vector1 = new Vector<Integer>();
      Integer integer3 = new Integer(10);
      vector1.add(integer3);
      Integer integer4 = new Integer(2147483646);
      Integer integer5 = new Integer((-2142082997));
      Integer integer6 = new Integer(1);
      vector1.add(integer6);
      Integer integer7 = new Integer((-435));
      Integer integer8 = new Integer((-350));
      Integer integer9 = new Integer(2133611014);
      Integer integer10 = new Integer(23);
      boolean boolean0 = vector0.add(integer0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation(157, 13, 23, 1071.15351, 23, 13);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(Integer.MAX_VALUE);
      vector0.add(integer0);
      Integer integer1 = new Integer(1295);
      Integer integer2 = new Integer(1295);
      boolean boolean0 = vector0.add(integer2);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer(Integer.MAX_VALUE);
      Integer integer5 = new Integer((-2349));
      boolean boolean1 = vector0.add(integer5);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation((-48), 13, 1071.0, (-0.9234875568608139), 1748.182, (-0.9234875568608139));
      Integer integer0 = new Integer((-92));
      Integer integer1 = new Integer((-4481));
      Integer integer2 = new Integer((-9));
      Integer integer3 = new Integer(2145028277);
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.clear();
      Integer integer4 = new Integer(371);
      vector0.add(integer4);
      Integer integer5 = new Integer((-2123));
      Integer integer6 = new Integer(371);
      vector0.add(integer4);
      Integer integer7 = new Integer((-92));
      Integer integer8 = new Integer(371);
      Integer integer9 = new Integer((-4481));
      Integer integer10 = new Integer(2146413277);
      Integer integer11 = new Integer((-9));
      Integer integer12 = new Integer(2786);
      vector0.add(integer7);
      Integer integer13 = new Integer(2211);
      Integer integer14 = new Integer(2145028277);
      Integer integer15 = new Integer((-9));
      Integer integer16 = new Integer((-9));
      vector0.add(integer14);
      Integer integer17 = new Integer(371);
      boolean boolean0 = vector0.add(integer9);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation(2145920724, (-11), (-11), (-11), 1.0, (-11));
      Vector<Integer> vector0 = new Vector<Integer>();
      vector0.removeAllElements();
      Integer integer0 = new Integer((-11));
      vector0.add(integer0);
      Integer integer1 = new Integer(2145920724);
      Vector<Integer> vector1 = new Vector<Integer>();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      vector1.replaceAll(unaryOperator0);
      vector1.add(integer1);
      Integer integer2 = new Integer((-11));
      vector0.add(integer2);
      Integer integer3 = new Integer((-152631047));
      int int0 = 60;
      Integer integer4 = new Integer(60);
      Integer integer5 = new Integer(60);
      Integer integer6 = new Integer(2145920724);
      int int1 = 1881;
      Integer integer7 = new Integer(1881);
      Integer integer8 = new Integer((-11));
      Vector<Integer> vector2 = new Vector<Integer>();
      Integer integer9 = new Integer((-11));
      Integer integer10 = new Integer((-2147483645));
      Integer integer11 = new Integer(1881);
      // Undeclared exception!
      try { 
        vector2.addAll((-2147483645), (Collection<? extends Integer>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -2147483645
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      EWrapperMsgGenerator.tickOptionComputation(157, 157, 23, 1071.15351, 23, 157);
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer(1994091958);
      Integer integer1 = new Integer(10);
      boolean boolean0 = vector0.add(integer1);
      Integer integer2 = new Integer(157);
      Integer integer3 = new Integer(157);
      boolean boolean1 = vector0.add(integer3);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      EWrapperMsgGenerator eWrapperMsgGenerator0 = new EWrapperMsgGenerator();
      Order order0 = new Order();
      assertEquals(1.7976931348623157E308, order0.m_deltaNeutralAuxPrice, 0.01);
  }
}
