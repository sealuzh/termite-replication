/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 21:09:46 GMT 2019
 */

package org.jcvi.jillion.core.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileFilter;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.function.Consumer;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcvi.jillion.core.util.FileIterator;
import org.jcvi.jillion.core.util.MultipleFileFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FileIterator_ESTest extends FileIterator_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.0139635800408087
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.getNextFile();
      fileIterator0.getNextFile();
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/92_jcvi-javacommon");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-47);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.setUpInitialState(mockFile0);
      MockFile mockFile1 = new MockFile((File) null, "b{ ',JaR-_U3:/Lg");
      // Undeclared exception!
      try { 
        fileIterator0.setUpInitialState((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.499194281165898
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileIterator_FileIteratorBuilder1.fileFilter(multipleFileFilter0);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Predicate.isEqual((Object) "");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      Predicate.isEqual((Object) multipleFileFilter1);
      fileIterator_FileIteratorBuilder0.build();
      File file0 = fileIterator0.getNextFile();
      assertEquals(1392409281320L, file0.lastModified());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5429288720312995
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "2[THb]Ok\b");
      MockFile mockFile0 = new MockFile("", "");
      boolean boolean0 = false;
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home");
      FileSystemHandling.setPermissions(evoSuiteFile1, true, false, true);
      fileIterator0.next();
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.83744221333961
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      fileIterator1.getNextFile();
      fileIterator1.spliterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      FileIterator.createNonRecursiveFileIteratorBuilder((File) null);
      fileIterator0.iterator();
      fileIterator0.next();
      fileIterator0.getNextFile();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      assertNotSame(fileIterator_FileIteratorBuilder4, fileIterator_FileIteratorBuilder3);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.679878997677478
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      byte[] byteArray0 = new byte[6];
      byteArray0[4] = (byte)13;
      byteArray0[1] = (byte) (-33);
      byteArray0[2] = (byte)18;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte)98;
      byteArray0[5] = (byte) (-117);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileFilter[] fileFilterArray0 = new FileFilter[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "v],,,1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      File file0 = MockFile.createTempFile("tL7-ofD[", "");
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      fileIterator_FileIteratorBuilder1.includeDirectories(true);
      byte[] byteArray1 = new byte[2];
      byteArray1[1] = (byte) (-104);
      fileIterator0.setUpInitialState(file0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.forEachRemaining(consumer0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder2.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.513374339053286
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.build();
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      FileFilter[] fileFilterArray0 = new FileFilter[8];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[2] = (FileFilter) multipleFileFilter4;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      File file0 = MockFile.createTempFile("R<g?6jm", "");
      FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file1 = fileIterator0.getNextFile();
      assertNotNull(file1);
      assertFalse(file1.isDirectory());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.6127192021639605
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.831771131703419
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("", "");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "org.jcvi.jillion.core.util.FileIterator$FileIteratorBuilder");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.spliterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder0.build();
      File file0 = fileIterator2.getNextFile();
      FileIterator.createNonRecursiveFileIteratorBuilder(file0);
      assertEquals("/home", file0.toString());
      
      File file1 = fileIterator1.getNextFile();
      assertNull(file1);
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7634162065080794
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.updateFileIterator(mockFile0);
      fileIterator0.spliterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder3.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      assertNotSame(fileIterator_FileIteratorBuilder4, fileIterator_FileIteratorBuilder2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6504585629650066
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.next();
      fileIterator0.hasNext();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator0.getNextFile();
      assertNotSame(file0, mockFile0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.388128675904839
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = "";
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.hasNext();
      fileIterator0.getNextFile();
      // Undeclared exception!
      try { 
        fileIterator0.updateFileIterator((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.675975558995287
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      linkedList0.add((FileFilter) multipleFileFilter0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      linkedList1.push(multipleFileFilter1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList2);
      File file0 = MockFile.createTempFile("org.jcvi.jillion.core.util.MultipleFileFilter", "org.jcvi.jillion.core.util.MultipleFileFilter", (File) mockFile0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList2);
      linkedList2.add((FileFilter) multipleFileFilter1);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList3);
      FileFilter[] fileFilterArray0 = new FileFilter[8];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter4;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter2;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter6;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter5;
      fileFilterArray0[7] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray0);
      linkedList3.removeLastOccurrence(multipleFileFilter7);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList3);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList3);
      FileFilter[] fileFilterArray1 = new FileFilter[0];
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(fileFilterArray1);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(fileFilterArray1);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
      
      fileIterator0.next();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.getNextFile();
      File file1 = fileIterator0.next();
      FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      FileIterator.createNonRecursiveFileIteratorBuilder(file1);
      assertFalse(fileIterator0.hasNext());
      assertTrue(file1.equals((Object)file0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.793491898761524
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.spliterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      File file0 = fileIterator1.next();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder5 = fileIterator_FileIteratorBuilder3.includeDirectories(false);
      assertFalse(fileIterator_FileIteratorBuilder5.equals((Object)fileIterator_FileIteratorBuilder4));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.6591943304375274
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder3.build();
      MockFile mockFile1 = new MockFile(mockFile0, "SrjU3:Oc");
      fileIterator0.updateFileIterator(mockFile1);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder3.build();
      fileIterator1.spliterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator2 = fileIterator_FileIteratorBuilder2.build();
      fileIterator_FileIteratorBuilder2.includeDirectories(false);
      fileIterator1.iterator();
      fileIterator1.iterator();
      fileIterator2.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder3));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.766696961911058
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.spliterator();
      assertFalse(fileIterator0.hasNext());
      
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder3.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder1.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.676970419424028
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder1.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      fileIterator0.iterator();
      fileIterator0.updateFileIterator(mockFile0);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator0.remove();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // can not remove
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4450047939551998
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.containsAll(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      linkedList2.add((FileFilter) multipleFileFilter0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      linkedList3.add((Object) linkedList3);
      linkedList3.addLast(linkedList2);
      linkedList3.add((Object) linkedList1);
      linkedList2.removeAll(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList1.containsAll(linkedList2);
      Predicate.isEqual((Object) linkedList0);
      linkedList1.containsAll(linkedList5);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      linkedList8.toArray();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList4);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList8);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3360791930213036
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockFile mockFile0 = new MockFile("BCXU#nzpm8q[>V");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate2);
      Predicate.isEqual((Object) predicate5);
      predicate1.test((Object) null);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate1);
      Predicate<Object> predicate10 = predicate1.negate();
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate8);
      Predicate<Object> predicate14 = predicate2.and(predicate4);
      Predicate<Object> predicate15 = predicate7.or(predicate9);
      predicate1.test("BCXU#nzpm8q[>V");
      Predicate<Object> predicate16 = predicate15.or(predicate14);
      Object object1 = new Object();
      Predicate<Object> predicate17 = predicate0.or(predicate11);
      Predicate<Object> predicate18 = predicate15.negate();
      Predicate<Object> predicate19 = predicate14.and(predicate7);
      Predicate<Object> predicate20 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate21 = predicate18.or(predicate20);
      Predicate<Object> predicate22 = predicate20.or(predicate16);
      Object object2 = new Object();
      MockFile.createTempFile("BCXU#nzpm8q[>V", "Qr", (File) mockFile0);
      predicate9.and(predicate22);
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate23 = predicate22.or(predicate13);
      Predicate<Object> predicate24 = Predicate.isEqual((Object) predicate17);
      predicate23.negate();
      predicate24.or(predicate21);
      predicate19.negate();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.65169694634056
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.add((FileFilter) multipleFileFilter1);
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList3 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList2);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList5.add((FileFilter) multipleFileFilter2);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList6);
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      linkedList0.add((FileFilter) multipleFileFilter3);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(linkedList2);
      MultipleFileFilter multipleFileFilter10 = new MultipleFileFilter(linkedList5);
      MultipleFileFilter multipleFileFilter11 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter12 = new MultipleFileFilter(linkedList3);
      FileFilter[] fileFilterArray0 = new FileFilter[1];
      File file0 = MockFile.createTempFile("qH'= QVT/<vpc|9$B1", "qH'= QVT/<vpc|9$B1");
      MultipleFileFilter multipleFileFilter13 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter14 = new MultipleFileFilter(linkedList7);
      MultipleFileFilter multipleFileFilter15 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter16 = new MultipleFileFilter(fileFilterArray0);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator0.iterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = FileIterator.createBreadthFirstFileIteratorBuilder(file0);
      assertFalse(fileIterator_FileIteratorBuilder1.equals((Object)fileIterator_FileIteratorBuilder0));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(linkedList1);
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[4];
      fileFilterArray0[0] = (FileFilter) multipleFileFilter4;
      fileFilterArray0[1] = (FileFilter) multipleFileFilter7;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter8;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.fileFilter(multipleFileFilter5);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.8009702028424197
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      fileIterator_FileIteratorBuilder1.build();
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder2.build();
      fileIterator0.setUpInitialState(mockFile0);
      fileIterator0.spliterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder3.build();
      MockFile mockFile1 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder4 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile1);
      assertFalse(fileIterator_FileIteratorBuilder4.equals((Object)fileIterator_FileIteratorBuilder1));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.331484813877749
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      boolean boolean0 = false;
      MockFile mockFile0 = new MockFile("");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      // Undeclared exception!
      try { 
        fileIterator0.next();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more files
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.6205171472932416
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      FileSystemHandling.createFolder(evoSuiteFile0);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertTrue(fileIterator0.hasNext());
      
      Consumer<File> consumer0 = (Consumer<File>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      fileIterator0.forEachRemaining(consumer0);
      fileIterator0.spliterator();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = fileIterator_FileIteratorBuilder1.includeDirectories(true);
      fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate.isEqual((Object) predicate1);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = predicate4.and(predicate1);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate4.and(predicate1);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate0.negate();
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<Object> predicate12 = predicate11.and(predicate7);
      Predicate<Object> predicate13 = predicate2.and(predicate4);
      Predicate<Object> predicate14 = predicate6.or(predicate8);
      predicate1.test("");
      Predicate<Object> predicate15 = predicate14.or(predicate13);
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Predicate<Object> predicate16 = predicate0.or(predicate10);
      Predicate<Object> predicate17 = predicate15.negate();
      predicate13.and(predicate6);
      Predicate<Object> predicate18 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate19 = predicate17.or(predicate18);
      Predicate<Object> predicate20 = predicate18.or(predicate15);
      Object object2 = new Object();
      predicate8.and(predicate20);
      Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate21 = predicate20.or(predicate12);
      Predicate<Object> predicate22 = Predicate.isEqual((Object) predicate16);
      predicate21.negate();
      predicate22.or(predicate19);
      predicate1.negate();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder((File) null);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // rootDir can not be null
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.8008788469380876
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder1 = fileIterator_FileIteratorBuilder0.includeDirectories(false);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder2 = FileIterator.createNonRecursiveFileIteratorBuilder(mockFile0);
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder3 = fileIterator_FileIteratorBuilder2.includeHiddenFiles(false);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder1.build();
      assertFalse(fileIterator0.hasNext());
      
      FileIterator fileIterator1 = fileIterator_FileIteratorBuilder2.build();
      fileIterator1.spliterator();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder3.build();
      FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      File file0 = fileIterator1.getNextFile();
      assertNull(file0);
      assertFalse(fileIterator1.hasNext());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.383506473056194
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createBreadthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      File file0 = fileIterator0.getNextFile();
      assertNull(file0);
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[3] = (FileFilter) multipleFileFilter3;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[4] = (FileFilter) multipleFileFilter4;
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[5] = (FileFilter) multipleFileFilter5;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[6] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(linkedList0);
      fileFilterArray0[7] = (FileFilter) multipleFileFilter7;
      MultipleFileFilter multipleFileFilter8 = new MultipleFileFilter(fileFilterArray0);
      fileFilterArray0[8] = (FileFilter) multipleFileFilter8;
      MultipleFileFilter multipleFileFilter9 = new MultipleFileFilter(fileFilterArray0);
      File file0 = MockFile.createTempFile("R<g?6jm", "F@e8");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(file0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4329327515015158
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(false);
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      FileFilter[] fileFilterArray0 = new FileFilter[9];
      FileFilter[] fileFilterArray1 = new FileFilter[4];
      fileFilterArray1[0] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList0);
      fileFilterArray1[1] = (FileFilter) multipleFileFilter1;
      fileFilterArray1[2] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList0);
      fileFilterArray1[3] = (FileFilter) multipleFileFilter2;
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(fileFilterArray1);
      fileFilterArray1[3] = (FileFilter) multipleFileFilter3;
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      fileFilterArray0[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[2] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[4] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[5] = (FileFilter) multipleFileFilter0;
      fileFilterArray0[6] = (FileFilter) multipleFileFilter0;
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(fileFilterArray0);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(fileFilterArray1);
      FileFilter[] fileFilterArray2 = new FileFilter[8];
      fileFilterArray2[0] = (FileFilter) multipleFileFilter5;
      fileFilterArray2[1] = (FileFilter) multipleFileFilter0;
      fileFilterArray2[3] = (FileFilter) multipleFileFilter0;
      fileFilterArray2[4] = (FileFilter) multipleFileFilter0;
      fileFilterArray2[5] = (FileFilter) multipleFileFilter1;
      fileFilterArray2[6] = (FileFilter) multipleFileFilter1;
      MultipleFileFilter multipleFileFilter6 = new MultipleFileFilter(fileFilterArray2);
      fileFilterArray2[7] = (FileFilter) multipleFileFilter6;
      MultipleFileFilter multipleFileFilter7 = new MultipleFileFilter(fileFilterArray2);
      FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.432757197408911
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<FileFilter> linkedList0 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter0 = new MultipleFileFilter(linkedList0);
      LinkedList<FileFilter> linkedList1 = new LinkedList<FileFilter>();
      linkedList1.containsAll(linkedList0);
      LinkedList<FileFilter> linkedList2 = new LinkedList<FileFilter>();
      linkedList2.add((FileFilter) multipleFileFilter0);
      LinkedList<Object> linkedList3 = new LinkedList<Object>();
      linkedList3.add((Object) linkedList3);
      linkedList3.addLast(linkedList2);
      linkedList3.add((Object) linkedList1);
      linkedList2.removeAll(linkedList3);
      LinkedList<FileFilter> linkedList4 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter1 = new MultipleFileFilter(linkedList4);
      LinkedList<FileFilter> linkedList5 = new LinkedList<FileFilter>();
      linkedList1.containsAll(linkedList2);
      Predicate.isEqual((Object) linkedList0);
      linkedList1.containsAll(linkedList5);
      LinkedList<FileFilter> linkedList6 = new LinkedList<FileFilter>();
      LinkedList<FileFilter> linkedList7 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter2 = new MultipleFileFilter(linkedList1);
      LinkedList<FileFilter> linkedList8 = new LinkedList<FileFilter>();
      MultipleFileFilter multipleFileFilter3 = new MultipleFileFilter(linkedList4);
      MultipleFileFilter multipleFileFilter4 = new MultipleFileFilter(linkedList8);
      MultipleFileFilter multipleFileFilter5 = new MultipleFileFilter(linkedList4);
      MockFile mockFile0 = new MockFile("", "");
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      fileIterator_FileIteratorBuilder0.includeHiddenFiles(true);
      FileIterator fileIterator0 = fileIterator_FileIteratorBuilder0.build();
      assertFalse(fileIterator0.hasNext());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.138526235860879
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockFile mockFile0 = new MockFile("BqXUp#nzpm8q[>V");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.or(predicate0);
      Predicate.isEqual((Object) predicate5);
      predicate1.test(predicate0);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate4.and(predicate1);
      Predicate<Object> predicate10 = predicate1.negate();
      Predicate<Object> predicate11 = predicate0.negate();
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate8);
      Predicate<Object> predicate14 = predicate2.and(predicate4);
      Predicate<Object> predicate15 = predicate7.or(predicate9);
      predicate1.test("BqXUp#nzpm8q[>V");
      Predicate<Object> predicate16 = predicate15.or(predicate14);
      Object object1 = new Object();
      Predicate<Object> predicate17 = predicate0.or(predicate11);
      Predicate<Object> predicate18 = predicate15.negate();
      Predicate<Object> predicate19 = predicate14.and(predicate7);
      Predicate<Object> predicate20 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate21 = predicate18.or(predicate20);
      Predicate<Object> predicate22 = predicate20.or(predicate16);
      Object object2 = new Object();
      predicate9.and(predicate22);
      Predicate.isEqual((Object) predicate10);
      Predicate<Object> predicate23 = predicate22.or(predicate13);
      Predicate<Object> predicate24 = Predicate.isEqual((Object) predicate17);
      predicate23.negate();
      predicate24.or(predicate21);
      predicate19.negate();
      FileIterator.FileIteratorBuilder fileIterator_FileIteratorBuilder0 = FileIterator.createDepthFirstFileIteratorBuilder(mockFile0);
      // Undeclared exception!
      try { 
        fileIterator_FileIteratorBuilder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // rootDir must be a directory
         //
         verifyException("org.jcvi.jillion.core.util.FileIterator", e);
      }
  }
}
