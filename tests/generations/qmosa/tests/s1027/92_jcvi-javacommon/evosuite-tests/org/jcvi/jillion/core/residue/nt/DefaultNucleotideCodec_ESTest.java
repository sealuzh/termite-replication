/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 21:10:44 GMT 2019
 */

package org.jcvi.jillion.core.residue.nt;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.BufferUnderflowException;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec;
import org.jcvi.jillion.core.residue.nt.Nucleotide;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultNucleotideCodec_ESTest extends DefaultNucleotideCodec_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.258083680640355
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray2, 0);
      Range.of((long) (byte)0);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.getGappedOffsetFor((byte[]) null, (byte) (-86));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
      Range range0 = Range.of((long) (byte)6);
      Range range1 = Range.of((long) (byte)6);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(4L);
      range2.startsBefore(range1);
      range2.getLength();
      Range range3 = Range.ofLength(1848L);
      range1.getEnd();
      Range range4 = Range.ofLength(3346L);
      range4.intersects(range1);
      Range range5 = range0.intersection(range3);
      Range range6 = Range.of(3346L);
      range2.equals(range6);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.isSubRangeOf(range5);
      Range.of(range_CoordinateSystem1, (-1407L), (-1407L));
      range6.equals(range1);
      String string0 = "";
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      Iterator<Nucleotide> iterator0 = linkedList0.descendingIterator();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte)6, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList$ListItr", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.241618614580397
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray2, 0);
      assertEquals(0, int0);
      
      Range.of((long) (byte)0);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray3.length);
      
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.isGap(byteArray2, 141232475);
      defaultNucleotideCodec4.isGap(byteArray1, 141232475);
      Nucleotide nucleotide2 = Nucleotide.Gap;
      boolean boolean0 = defaultNucleotideCodec4.isGap(byteArray1, (byte)0);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray1);
      
      Set<Nucleotide> set2 = nucleotide2.getBasesFor();
      nucleotide0.getBasesFor();
      byte[] byteArray4 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set2);
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      int int1 = defaultNucleotideCodec6.getNumberOfGapsUntil(byteArray4, 0);
      assertEquals(1, int1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.933463844018959
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Integer integer0 = new Integer((-952));
      predicate4.test((Object) null);
      predicate1.or(predicate4);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate4.test(object1);
      predicate4.and(predicate1);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate1);
      predicate6.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      predicate7.and(predicate0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getBasesFor();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList4);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      linkedList1.toArray();
      Nucleotide nucleotide1 = Nucleotide.Gap;
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide1);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-952));
      assertEquals(0, int0);
      
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray0, 0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.273367118754812
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-23);
      byteArray0[1] = (byte)9;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-41);
      defaultNucleotideCodec0.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-2147483625));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-3879));
      Range.of(40L);
      defaultNucleotideCodec1.decodedLengthOf(byteArray2);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      defaultNucleotideCodec1.isGap(byteArray1, (-2506));
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2741507871063655
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Nucleotide nucleotide1 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide1.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      Set<Nucleotide> set1 = nucleotide1.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec3.encode((Collection<Nucleotide>) set1);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, 1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.getUngappedOffsetFor(byteArray0, 1);
      Range.of((-643L));
      nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide2 = Nucleotide.NotThymine;
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.isGap(byteArray1, 1);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec7.isGap(byteArray0, 3778);
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.isGap(byteArray0, 3778);
      Nucleotide nucleotide3 = Nucleotide.Cytosine;
      nucleotide3.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.2195804402676993
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      predicate5.negate();
      predicate5.test(object1);
      Predicate<Object> predicate7 = predicate5.and(predicate1);
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Predicate.isEqual((Object) nucleotide0);
      predicate3.negate();
      predicate7.negate();
      predicate6.negate();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.and(predicate0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Nucleotide nucleotide1 = Nucleotide.Weak;
      nucleotide1.getBasesFor();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList4);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      linkedList3.toArray();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide1);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
      assertEquals(0, int0);
      
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((-1), iterator0);
      assertArrayEquals(new byte[] {(byte) (-1), (byte) (-1), (byte) (-1), (byte) (-1), (byte)0}, byteArray1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)64}, byteArray0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)23;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)26;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)105;
      byteArray0[5] = (byte) (-11);
      byteArray0[6] = (byte)9;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec1.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((-2145813753), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.087494066886195
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      predicate3.test(predicate2);
      predicate6.or(predicate0);
      predicate5.negate();
      predicate5.test(object1);
      predicate5.and(predicate1);
      predicate3.negate();
      predicate2.or(predicate1);
      predicate6.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      predicate7.and(predicate0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Nucleotide nucleotide0 = Nucleotide.Weak;
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList4);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      linkedList3.toArray();
      byte[] byteArray0 = defaultNucleotideCodec0.encode(nucleotide0);
      int int0 = defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (-1));
      assertEquals(0, int0);
      
      long long0 = new Integer((-952));
      Nucleotide nucleotide1 = defaultNucleotideCodec0.decode(byteArray0, 0);
      assertEquals(Nucleotide.Weak, nucleotide1);
      assertEquals(5, byteArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-2145813753);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)0;
      byte byte0 = (byte)26;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.186870042921599
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte byte0 = (byte) (-10);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-2147483625));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.getUngappedOffsetFor((byte[]) null, (-3899));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate1.and(predicate2);
      Integer integer0 = new Integer((-952));
      predicate4.test((Object) null);
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate5.test(object1);
      predicate5.and(predicate1);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.and(predicate0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Nucleotide nucleotide0 = Nucleotide.Amino;
      nucleotide0.getBasesFor();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList4);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      LinkedList<Nucleotide> linkedList6 = new LinkedList<Nucleotide>();
      linkedList6.toArray();
      linkedList3.toArray();
      linkedList6.poll();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Nucleotide) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-152047872);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)3;
      byteArray0[1] = (byte) (-85);
      byteArray0[2] = (byte)72;
      byteArray0[3] = (byte)0;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.786100866302153
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Integer integer0 = new Integer((-952));
      predicate4.test((Object) null);
      predicate1.or(predicate4);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate4.test(object1);
      predicate4.and(predicate1);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate1);
      predicate6.and(predicate5);
      predicate6.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      predicate7.and(predicate0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Nucleotide nucleotide0 = Nucleotide.Amino;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList4);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      linkedList3.toArray();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      Integer integer1 = new Integer((-1));
      String string0 = defaultNucleotideCodec0.toString(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals("AC", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4075193248449804
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-41);
      defaultNucleotideCodec0.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-2147483625));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-10));
      Range.of(40L);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray2.length);
      
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray1, (-2506));
      assertFalse(boolean0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec2.getUngappedOffsetFor(byteArray1, 14);
      assertEquals(14, int0);
      
      Nucleotide nucleotide2 = defaultNucleotideCodec2.decode(byteArray1, 1L);
      assertEquals(Nucleotide.Cytosine, nucleotide2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.455021719609384
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, (-2147483625));
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 0);
      assertEquals(0, int0);
      
      Range.of(40L);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray2.length);
      
      Nucleotide nucleotide1 = Nucleotide.NotGuanine;
      defaultNucleotideCodec1.isGap(byteArray0, (-2506));
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals(3L, long0);
      
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec2.encode(nucleotide0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)1, (byte)96}, byteArray3);
      
      Set<Nucleotide> set2 = nucleotide1.getBasesFor();
      byte[] byteArray4 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray4);
      
      defaultNucleotideCodec1.getGappedOffsetFor(byteArray1, 0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)18, (byte) (-32)}, byteArray1);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.528138472277958
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-10);
      byteArray0[0] = (byte) (-10);
      byte byte1 = (byte) (-23);
      byteArray0[1] = (byte) (-23);
      byte byte2 = (byte)9;
      byteArray0[2] = (byte)9;
      byte byte3 = (byte)23;
      byteArray0[3] = (byte) (-23);
      byte byte4 = (byte) (-41);
      byteArray0[4] = (byte) (-41);
      defaultNucleotideCodec0.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode(nucleotide0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-2147483625));
      defaultNucleotideCodec0.decode(byteArray1, 1L);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-3879));
      Range.of(40L);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      defaultNucleotideCodec1.isGap(byteArray1, (-2506));
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3766265400583184
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      String string0 = null;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      Integer integer0 = new Integer((-936));
      Integer.toUnsignedLong((-936));
      predicate3.test(integer0);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate3);
      Predicate<Object> predicate6 = predicate3.and(predicate1);
      predicate5.test(predicate3);
      predicate4.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate2);
      predicate1.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.and(predicate1);
      predicate8.negate();
      predicate8.and(predicate1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil((byte[]) null, 2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      predicate4.negate();
      predicate1.or(predicate4);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate5);
      predicate1.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.and(predicate1);
      predicate8.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.toArray();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)26;
      byteArray0[4] = (byte)83;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((Collection<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.254013892339514
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      Nucleotide nucleotide0 = Nucleotide.Gap;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (-2));
      defaultNucleotideCodec1.getGapOffsets(byteArray0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getGappedOffsetFor(byteArray1, (-2));
      assertEquals(1, int0);
      
      defaultNucleotideCodec2.getGapOffsets(byteArray1);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      long long0 = defaultNucleotideCodec4.getUngappedLength(byteArray1);
      assertEquals(0L, long0);
      assertEquals(5, byteArray1.length);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3513682226173116
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-41);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-2147483625));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-3879));
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray0, (-1633));
      assertEquals((-1633), int0);
      
      Range.of(40L);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray3 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray3.length);
      
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      defaultNucleotideCodec1.isGap(byteArray1, (-2506));
      defaultNucleotideCodec0.encode(nucleotide0);
      Set<Nucleotide> set2 = nucleotide1.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray0, 0);
      DefaultNucleotideCodec.values();
      List<Integer> list0 = defaultNucleotideCodec0.getGapOffsets(byteArray1);
      assertTrue(list0.isEmpty());
      
      String string0 = defaultNucleotideCodec0.toString(byteArray2);
      assertEquals("ACT", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3031707406112094
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray2, 0);
      defaultNucleotideCodec2.getGappedOffsetFor(byteArray2, (-371));
      Range.of((long) (byte)0);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 141232475;
      defaultNucleotideCodec5.isGap(byteArray2, 141232475);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3766265400583184
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Integer integer0 = new Integer((-936));
      Integer.toUnsignedLong((-936));
      predicate4.test(integer0);
      predicate4.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      predicate6.test(predicate4);
      predicate5.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate1);
      predicate8.and(predicate2);
      predicate1.or(predicate7);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      predicate9.negate();
      predicate9.and(predicate1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-624));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(9, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)2;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)14;
      int int0 = defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, 3);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.062237312819917
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[3] = (byte)6;
      byteArray0[1] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec1.decode(byteArray0, (byte)6);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      List<Integer> list0 = defaultNucleotideCodec1.getGapOffsets(byteArray0);
      assertEquals(6, list0.size());
      
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.363849705758321
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray0, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray1, 0);
      assertEquals(0, int0);
      
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      Nucleotide nucleotide2 = Nucleotide.NotCytosine;
      nucleotide2.getAllPossibleAmbiguities();
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide3 = Nucleotide.NotThymine;
      boolean boolean0 = defaultNucleotideCodec0.isGap(byteArray2, (byte)0);
      assertFalse(boolean0);
      assertEquals(4, byteArray2.length);
      
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.valueOf("INSTANCE");
      Nucleotide nucleotide4 = Nucleotide.Adenine;
      Set<Nucleotide> set2 = nucleotide4.getBasesFor();
      Nucleotide nucleotide5 = Nucleotide.Weak;
      nucleotide5.getBasesFor();
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec6.encode((Collection<Nucleotide>) set2);
      long long0 = defaultNucleotideCodec5.getUngappedLength(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray0);
      assertEquals(3L, long0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1588459331367913
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)9;
      byteArray0[4] = (byte) (-41);
      defaultNucleotideCodec0.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.Unknown;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-2147483625));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-10));
      Range.of(40L);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      defaultNucleotideCodec1.isGap(byteArray1, (-2506));
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.3599822067157277
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte) (-86);
      byteArray0[0] = (byte) (-86);
      byte byte1 = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec3.getUngappedOffsetFor(byteArray2, 0);
      Range range0 = Range.of((long) (byte)0);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.isGap(byteArray2, 141232475);
      defaultNucleotideCodec4.isGap(byteArray1, 141232475);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec2.iterator(byteArray3, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 0 .. 0 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1196150585169233
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)7;
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.retainAll(linkedList1);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) linkedList0);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray1, (byte)90);
      defaultNucleotideCodec0.getGapOffsets(byteArray1);
      Range range0 = Range.of(775L);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte)7;
      byteArray2[1] = (byte)7;
      byteArray2[2] = (byte)90;
      byteArray2[3] = (byte)126;
      byteArray2[4] = (byte)4;
      byteArray2[5] = (byte)21;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray2, range0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 391
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8657996865897
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray0 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray0);
      assertEquals(6, byteArray0.length);
      
      LinkedList<Nucleotide> linkedList0 = new LinkedList<Nucleotide>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) nucleotide0);
      Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate1.negate();
      linkedList1.removeIf(predicate2);
      linkedList0.add(nucleotide0);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList3.removeAll(linkedList4);
      linkedList0.retainAll(linkedList3);
      linkedList1.removeIf(predicate1);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      linkedList6.parallelStream();
      linkedList2.removeAll(linkedList0);
      LinkedList<Nucleotide> linkedList7 = new LinkedList<Nucleotide>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      LinkedList<Nucleotide> linkedList9 = new LinkedList<Nucleotide>();
      LinkedList<Nucleotide> linkedList10 = new LinkedList<Nucleotide>();
      linkedList6.toArray();
      linkedList0.poll();
      linkedList10.retainAll(linkedList9);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) linkedList0);
      Range range0 = Range.ofLength(0L);
      defaultNucleotideCodec1.iterator(byteArray1, range0);
      assertEquals(4, byteArray1.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.310282179723015
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-41);
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-2147483625));
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte) (-26));
      Range.of(40L);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      defaultNucleotideCodec1.isGap(byteArray1, (-2506));
      defaultNucleotideCodec1.encode(0, iterator0);
      // Undeclared exception!
      try { 
        DefaultNucleotideCodec.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5696376201112083
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getGapOffsets(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 3702);
      byteArray0[0] = (byte) (-2);
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)68;
      byteArray0[3] = (byte) (-1);
      defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (byte) (-1));
      byte[] byteArray1 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap((byte[]) null, (byte)3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5633125094217712
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.getUngappedLength(byteArray0);
      defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
      long long0 = 4L;
      Range.of((long) (byte)6);
      Range range0 = Range.of((long) (byte)6);
      Range range1 = Range.of(4L);
      range1.startsBefore(range0);
      Range.ofLength(1848L);
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("%l", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse %l into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      predicate4.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate2);
      predicate1.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.and(predicate1);
      predicate8.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[4] = (byte)83;
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-1));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3074L), (-794L));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-86));
      defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-86));
      Range range0 = Range.ofLength(1840700269);
      Range range1 = Range.of((long) (byte) (-86));
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
      byte byte0 = (byte)6;
      long long0 = 4L;
      Range range0 = Range.of((long) (byte)6);
      Range.of((long) (byte)6);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 1L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 1 corresponds to encodedIndex 4  encodedglyph length is 4
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate3.and(predicate2);
      Integer integer0 = new Integer((-952));
      Predicate.isEqual((Object) null);
      predicate4.test(integer0);
      predicate4.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate2);
      predicate1.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.negate();
      predicate8.and(predicate1);
      predicate8.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-1));
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4273916305367944
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
      Range range0 = Range.of((long) (byte)6);
      Range range1 = Range.of((long) (byte)6);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd();
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(4L);
      range2.startsBefore(range1);
      Range range3 = Range.ofLength(1848L);
      range1.getEnd();
      Range range4 = Range.ofLength(3346L);
      Range range5 = range0.intersection(range3);
      Range range6 = Range.of(3346L);
      range2.equals(range6);
      List<Range> list0 = range5.split(3656L);
      range5.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.isSubRangeOf(range5);
      Range.of(range_CoordinateSystem1, (-1407L), (-1407L));
      defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
      range6.equals(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)109;
      byteArray0[0] = (byte)109;
      byte byte1 = (byte)109;
      byteArray0[1] = (byte)109;
      byte byte2 = (byte)71;
      byteArray0[2] = (byte)71;
      byte byte3 = (byte) (-121);
      byteArray0[3] = (byte) (-121);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte) (-121));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.505567150104359
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.Strong;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(9, (Iterator<Nucleotide>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3826794502038573
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[7] = (byte)6;
      byteArray0[1] = (byte)0;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = defaultNucleotideCodec1.decode(byteArray0, (byte)6);
      assertEquals(Nucleotide.Gap, nucleotide0);
      
      List<Integer> list0 = defaultNucleotideCodec1.getGapOffsets(byteArray0);
      assertTrue(list0.isEmpty());
      
      Set<Nucleotide> set0 = nucleotide0.getAllPossibleAmbiguities();
      defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      int int0 = defaultNucleotideCodec1.getUngappedOffsetFor(byteArray1, (byte)0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0}, byteArray1);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = 65;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec1.iterator(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
      Range range0 = Range.of((long) (byte)6);
      Range range1 = Range.of((long) (byte)6);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(4L);
      range2.startsBefore(range1);
      Range range3 = Range.ofLength(1848L);
      range1.getEnd();
      Range range4 = Range.ofLength(3346L);
      Range range5 = range0.intersection(range3);
      range4.split((byte)6);
      range5.isSubRangeOf(range0);
      Range range6 = Range.of(3346L);
      range2.equals(range6);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.isSubRangeOf(range5);
      Range.of(range_CoordinateSystem1, (-1407L), (-1407L));
      range6.equals(range1);
      defaultNucleotideCodec0.toString(byteArray0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("", range_CoordinateSystem2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      int int0 = defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      int int0 = (-2103);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      byteArray0[1] = (byte) (-86);
      defaultNucleotideCodec0.decodedLengthOf(byteArray0);
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-86));
      int int0 = 1840700270;
      Byte byte0 = new Byte((byte) (-86));
      Range.ofLength(1840700270);
      String string0 = "`j";
      // Undeclared exception!
      try { 
        Range.parseRange("`j");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `j into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)89;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-86);
      Object object0 = new Object();
      Integer integer0 = new Integer(2081);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate0.and(predicate1);
      Predicate<Object> predicate6 = predicate2.and(predicate0);
      Byte byte0 = new Byte((byte)117);
      predicate5.test(predicate3);
      Integer integer1 = new Integer((byte) (-86));
      predicate0.negate();
      Object object1 = new Object();
      predicate3.test(object1);
      Object object2 = new Object();
      predicate1.test(predicate0);
      predicate6.or(predicate4);
      Predicate<Object> predicate7 = predicate4.and(predicate3);
      predicate7.test(predicate5);
      predicate5.negate();
      Predicate<Object> predicate8 = predicate6.or(predicate5);
      predicate5.and(predicate2);
      predicate1.or(predicate8);
      Predicate.isEqual((Object) integer1);
      predicate4.and(predicate0);
      predicate1.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, 2081);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGappedOffsetFor(byteArray0, (-273));
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decodedLengthOf(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate3.and(predicate2);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      predicate4.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate2);
      predicate1.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.negate();
      predicate8.and(predicate1);
      predicate8.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-1));
      assertEquals((-1), int0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-15856114L), long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-86);
      Object object0 = new Object();
      Integer integer0 = new Integer((byte) (-86));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate2.and(predicate0);
      Byte byte0 = new Byte((byte) (-86));
      Predicate.isEqual((Object) null);
      predicate4.test(predicate1);
      Integer integer1 = new Integer((byte) (-86));
      Object object1 = new Object();
      predicate1.test(object1);
      Object object2 = new Object();
      predicate1.test(predicate0);
      predicate5.or(predicate3);
      predicate3.and(predicate1);
      predicate4.negate();
      Predicate<Object> predicate6 = predicate5.or(predicate4);
      predicate4.and(predicate2);
      predicate1.or(predicate6);
      Predicate.isEqual((Object) integer1);
      predicate3.and(predicate0);
      predicate1.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode((int) (byte) (-86), iterator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.ByteBuffer", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.8493821196946767
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-61);
      Integer integer0 = new Integer((byte) (-61));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Object[] objectArray0 = new Object[10];
      objectArray0[2] = (Object) (byte) (-61);
      objectArray0[1] = (Object) (byte) (-61);
      objectArray0[3] = (Object) linkedList0;
      linkedList1.add(integer0);
      objectArray0[4] = (Object) linkedList2;
      objectArray0[6] = (Object) linkedList0;
      objectArray0[7] = (Object) integer0;
      objectArray0[4] = (Object) linkedList1;
      linkedList1.toArray(objectArray0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList3);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      Integer integer1 = new Integer(2876);
      linkedList6.add(integer1);
      linkedList8.removeLastOccurrence(linkedList2);
      linkedList3.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList8.sort(comparator0);
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      linkedList9.removeFirstOccurrence((Object) null);
      LinkedList<String> linkedList10 = new LinkedList<String>();
      linkedList3.toArray();
      Iterator<Nucleotide> iterator0 = defaultNucleotideCodec0.iterator(byteArray0);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.encode(1124644074, iterator0);
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no more elements
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = null;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode((byte[]) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)12;
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)108;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.4045403310125617
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-9);
      byteArray0[3] = (byte) (-54);
      byteArray0[4] = (byte) (-83);
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte) (-124);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGaps(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate3.and(predicate2);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      predicate6.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate1);
      predicate8.and(predicate2);
      predicate1.or(predicate7);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      predicate9.negate();
      predicate9.and(predicate1);
      predicate5.negate();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec1.getNumberOfGaps(byteArray0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.6063676846108654
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Integer integer0 = new Integer((-970));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-120);
      byteArray0[1] = (byte)127;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte) (-66);
      int int0 = new Byte((byte)127);
      predicate4.test(integer0);
      predicate4.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate2);
      predicate1.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.and(predicate1);
      predicate8.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte)14;
      byteArray1[2] = (byte)14;
      byteArray1[0] = (byte)14;
      byteArray1[4] = (byte)83;
      byteArray1[5] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (byte)14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.510404533308129
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-37);
      byteArray0[6] = (byte)62;
      byteArray0[0] = (byte) (-105);
      byteArray0[8] = (byte)3;
      byteArray0[4] = (byte) (-27);
      byteArray0[0] = (byte)116;
      byteArray0[6] = (byte)32;
      byteArray0[7] = (byte)116;
      byteArray0[8] = (byte) (-84);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedLength(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.6820730621847044
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate3.and(predicate2);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      predicate4.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      Predicate<Object> predicate6 = predicate4.and(predicate1);
      predicate5.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate7.and(predicate2);
      predicate1.or(predicate6);
      Predicate<Object> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate8.negate();
      predicate8.and(predicate1);
      predicate8.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte) (-1);
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte) (-1));
      assertEquals((-1), int0);
      
      long long0 = defaultNucleotideCodec0.getUngappedLength(byteArray0);
      assertEquals((-15856114L), long0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.417715857393759
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      predicate4.negate();
      Predicate<Object> predicate5 = predicate2.negate();
      predicate4.and(predicate1);
      predicate5.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate1);
      predicate6.and(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      predicate7.and(predicate1);
      predicate7.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte) (-62);
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte) (-56);
      byteArray0[5] = (byte)102;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.400344526816758
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)6;
      byteArray0[4] = (byte) (-107);
      byteArray0[5] = (byte)2;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.310370489301072
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-23);
      byteArray0[2] = (byte)9;
      byteArray0[3] = (byte)23;
      byteArray0[4] = (byte) (-41);
      defaultNucleotideCodec0.iterator(byteArray0);
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec1.getNumberOfGapsUntil(byteArray1, (-2147483625));
      int int0 = defaultNucleotideCodec0.getUngappedOffsetFor(byteArray1, (-3879));
      assertEquals((-3879), int0);
      
      Range.of(40L);
      Set<Nucleotide> set1 = nucleotide0.getAllPossibleAmbiguities();
      byte[] byteArray2 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set1);
      assertEquals(4, byteArray2.length);
      
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      boolean boolean0 = defaultNucleotideCodec1.isGap(byteArray1, (-2506));
      assertFalse(boolean0);
      
      defaultNucleotideCodec0.encode(nucleotide0);
      Set<Nucleotide> set2 = nucleotide1.getBasesFor();
      byte[] byteArray3 = defaultNucleotideCodec0.encode((Collection<Nucleotide>) set2);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte)32}, byteArray3);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.6063676846108654
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Byte byte0 = new Byte((byte)8);
      predicate0.test(byte0);
      Integer integer0 = new Integer((-952));
      predicate3.test(integer0);
      Object object2 = new Object();
      predicate0.test(object2);
      predicate3.negate();
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate4.test(predicate3);
      predicate2.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate1);
      predicate6.and(predicate3);
      predicate1.or(predicate5);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      predicate7.and(predicate1);
      predicate7.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)83;
      byteArray0[1] = (byte)8;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.4330104198977724
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      DefaultNucleotideCodec defaultNucleotideCodec1 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide0 = Nucleotide.NotGuanine;
      Set<Nucleotide> set0 = nucleotide0.getBasesFor();
      byte[] byteArray1 = defaultNucleotideCodec1.encode((Collection<Nucleotide>) set0);
      DefaultNucleotideCodec defaultNucleotideCodec2 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray2 = defaultNucleotideCodec2.encode((Collection<Nucleotide>) set0);
      defaultNucleotideCodec2.getNumberOfGapsUntil(byteArray1, (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec3 = DefaultNucleotideCodec.INSTANCE;
      int int0 = defaultNucleotideCodec3.getUngappedOffsetFor(byteArray2, 0);
      assertEquals(0, int0);
      
      Range range0 = Range.of((long) (byte)0);
      DefaultNucleotideCodec defaultNucleotideCodec4 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray3 = defaultNucleotideCodec4.encode((Collection<Nucleotide>) set0);
      Nucleotide nucleotide1 = Nucleotide.NotThymine;
      DefaultNucleotideCodec defaultNucleotideCodec5 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec5.isGap(byteArray2, 141232475);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray2);
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      DefaultNucleotideCodec defaultNucleotideCodec6 = DefaultNucleotideCodec.INSTANCE;
      Nucleotide nucleotide2 = Nucleotide.Guanine;
      byte[] byteArray4 = defaultNucleotideCodec6.encode(nucleotide2);
      DefaultNucleotideCodec defaultNucleotideCodec7 = DefaultNucleotideCodec.INSTANCE;
      DefaultNucleotideCodec defaultNucleotideCodec8 = DefaultNucleotideCodec.INSTANCE;
      defaultNucleotideCodec8.getNumberOfGapsUntil(byteArray3, (-152565481));
      String string0 = defaultNucleotideCodec8.toString(byteArray3);
      assertEquals("ACT", string0);
      
      defaultNucleotideCodec7.getNumberOfGapsUntil(byteArray4, (-2616));
      defaultNucleotideCodec8.iterator(byteArray3, range0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)3, (byte)29, (byte) (-32)}, byteArray3);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
      Range range0 = Range.of((long) (byte)6);
      Range range1 = Range.of((long) (byte)6);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(4L);
      range2.startsBefore(range1);
      Range range3 = Range.ofLength(1848L);
      range1.getEnd();
      Range range4 = Range.ofLength(3346L);
      Range range5 = range0.intersection(range3);
      Range range6 = Range.of(3346L);
      range2.equals(range6);
      range3.getEnd();
      range6.iterator();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.isSubRangeOf(range5);
      Range.of(range_CoordinateSystem1, (-1407L), (-1407L));
      range6.equals(range1);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range7 = Range.of(3346L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, range7);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // range [ 3346 .. 3346 ]/0B is out of range of sequence which is only [ 0 .. -1 ]/0B
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)12;
      byteArray0[0] = (byte)12;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 4L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 4 corresponds to encodedIndex 6  encodedglyph length is 5
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-12);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, 65535L);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index 65535 corresponds to encodedIndex 32771  encodedglyph length is 6
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      Integer integer0 = new Integer((byte) (-86));
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Object[] objectArray0 = new Object[10];
      objectArray0[4] = (Object) (byte) (-86);
      objectArray0[1] = (Object) (byte) (-86);
      objectArray0[2] = (Object) linkedList2;
      objectArray0[3] = (Object) linkedList0;
      linkedList1.add(integer0);
      objectArray0[4] = (Object) linkedList2;
      objectArray0[5] = (Object) (byte) (-86);
      objectArray0[6] = (Object) linkedList0;
      objectArray0[7] = (Object) integer0;
      objectArray0[4] = (Object) linkedList1;
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Nucleotide nucleotide0 = Nucleotide.NotCytosine;
      nucleotide0.getBasesFor();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      linkedList1.removeAll(linkedList3);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList7 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      linkedList8.removeLastOccurrence(linkedList2);
      linkedList6.add(integer0);
      linkedList3.add(integer0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList8.sort(comparator0);
      LinkedList<Integer> linkedList9 = new LinkedList<Integer>();
      linkedList9.removeFirstOccurrence((Object) null);
      linkedList9.clone();
      linkedList3.toArray();
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.decode(byteArray0, (-2285L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // index can not be negative: -2285
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Object object1 = new Object();
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Byte byte0 = new Byte((byte)8);
      predicate2.test(byte0);
      Integer integer0 = new Integer((-952));
      predicate4.test(integer0);
      Object object2 = new Object();
      predicate0.test(object2);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      predicate6.or(predicate5);
      Predicate<Object> predicate7 = predicate4.and(predicate1);
      predicate6.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate1);
      predicate8.and(predicate4);
      predicate8.and(predicate2);
      predicate1.or(predicate7);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      predicate9.and(predicate1);
      predicate9.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)83;
      byteArray0[1] = (byte)83;
      byteArray0[2] = (byte) (-1);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getGapOffsets(byteArray0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.5643202009216517
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      defaultNucleotideCodec0.isGap(byteArray0, (-1442840576));
      Range range0 = Range.of((long) (byte)6);
      Range range1 = Range.of((long) (byte)6);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem0);
      Range range2 = Range.of(4L);
      range2.startsBefore(range1);
      Range range3 = Range.ofLength(1848L);
      range1.getEnd();
      Range range4 = Range.ofLength(3346L);
      Range range5 = range0.intersection(range3);
      Range range6 = Range.of(3346L);
      range0.endsBefore(range5);
      range2.equals(range6);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.isSubRangeOf(range5);
      Range.of(range_CoordinateSystem1, (-1407L), (-1407L));
      range6.equals(range1);
      String string0 = "";
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      byte[] byteArray1 = new byte[6];
      byteArray1[0] = (byte)6;
      byteArray1[1] = (byte)6;
      byteArray1[2] = (byte)6;
      byteArray1[3] = (byte)6;
      byteArray1[4] = (byte)6;
      byteArray1[5] = (byte)6;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.isGap(byteArray1, (-1442840576));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8104399097753396
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)6;
      byteArray0[1] = (byte)10;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.toString(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.624945863276291
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Integer integer0 = new Integer((-952));
      predicate5.test(integer0);
      predicate5.negate();
      predicate1.or(predicate5);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate5.and(predicate1);
      predicate6.test(predicate5);
      predicate3.negate();
      Predicate<Object> predicate8 = predicate2.or(predicate1);
      predicate8.and(predicate6);
      predicate1.or(predicate7);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      predicate9.and(predicate1);
      predicate9.and(predicate0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.toArray();
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)26;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (byte)0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)1;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.getNumberOfGapsUntil(byteArray0, (byte)1);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)5;
      byteArray0[1] = (byte)85;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte) (-50);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-10);
      byteArray0[6] = (byte)0;
      byteArray0[7] = (byte) (-21);
      byteArray0[8] = (byte)67;
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray0, (Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.residue.nt.DefaultNucleotideCodec$IteratorImpl", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.675485446901437
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      DefaultNucleotideCodec defaultNucleotideCodec0 = DefaultNucleotideCodec.INSTANCE;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-86);
      Object object0 = new Object();
      Integer integer0 = new Integer((byte) (-86));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Integer integer1 = new Integer((-152499939));
      Object object1 = new Object();
      predicate1.test(object1);
      Predicate<Object> predicate5 = predicate2.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate3);
      Predicate<Object> predicate7 = predicate2.and(predicate4);
      predicate5.test(predicate2);
      Predicate<Object> predicate8 = predicate0.negate();
      Predicate<Object> predicate9 = predicate2.or(predicate0);
      predicate9.and(predicate3);
      predicate8.and(predicate7);
      Predicate<Object> predicate10 = predicate9.negate();
      predicate10.or(predicate3);
      Predicate.isEqual((Object) predicate5);
      predicate0.and(predicate6);
      predicate8.and(predicate7);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.toArray();
      defaultNucleotideCodec0.getUngappedOffsetFor(byteArray0, (-2257));
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-86);
      byteArray1[1] = (byte) (-86);
      byteArray1[2] = (byte) (-86);
      Range range0 = Range.ofLength(1032L);
      // Undeclared exception!
      try { 
        defaultNucleotideCodec0.iterator(byteArray1, range0);
        fail("Expecting exception: BufferUnderflowException");
      
      } catch(BufferUnderflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }
}
