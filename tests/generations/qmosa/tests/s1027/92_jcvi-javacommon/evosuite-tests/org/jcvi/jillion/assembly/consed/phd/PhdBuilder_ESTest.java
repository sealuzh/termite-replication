/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 21:27:30 GMT 2019
 */

package org.jcvi.jillion.assembly.consed.phd;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.ZoneId;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.assembly.consed.phd.ArtificialPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhd;
import org.jcvi.jillion.assembly.consed.phd.DefaultPhdWholeReadItem;
import org.jcvi.jillion.assembly.consed.phd.Phd;
import org.jcvi.jillion.assembly.consed.phd.PhdBuilder;
import org.jcvi.jillion.assembly.consed.phd.PhdReadTag;
import org.jcvi.jillion.assembly.consed.phd.PhdWholeReadItem;
import org.jcvi.jillion.core.pos.PositionSequence;
import org.jcvi.jillion.core.qual.QualitySequence;
import org.jcvi.jillion.core.residue.nt.NucleotideSequence;
import org.jcvi.jillion.trace.chromat.Chromatogram;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class PhdBuilder_ESTest extends PhdBuilder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      ArtificialPhd artificialPhd0 = ArtificialPhd.createNewbler454Phd("", nucleotideSequence0, qualitySequence0, (Map<String, String>) hashMap0, (List<PhdWholeReadItem>) linkedList0);
      List<PhdWholeReadItem> list0 = artificialPhd0.getWholeReadItems();
      hashMap0.put("0JEd5GG<ulIOU0", ", Size: ");
      linkedList0.pollFirst();
      linkedList0.add((PhdWholeReadItem) null);
      List<PhdReadTag> list1 = null;
      DefaultPhd defaultPhd0 = new DefaultPhd("", nucleotideSequence0, qualitySequence0, (PositionSequence) null, hashMap0, list0, (List<PhdReadTag>) null);
      defaultPhd0.getWholeReadItems();
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(defaultPhd0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("N%$6<5MJGcdxhn", "N%$6<5MJGcdxhn");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap3.put("S-3H", "[bxk8`#m\"x(gP6f>");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap0.put((String) null, (String) null);
      hashMap5.put("id can not be null", "nEK]E==\"D./");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap9.put("invalid character ", "y<73:Me|vXd");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap4.put("", "");
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      hashMap12.put("", (String) null);
      hashMap3.put((String) null, "[bxk8`#m\"x(gP6f>");
      HashMap<String, String> hashMap13 = new HashMap<String, String>(hashMap8);
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("!n", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks(2569, (-1669));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // peak spacing must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap6.put("", "(Y");
      hashMap6.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap5.put("(Y", (String) null);
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      hashMap4.put("{", "{");
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NONE", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("se.]^|f{iJK]+s5Ld=~", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      phdBuilder0.peaks((PositionSequence) null);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      LinkedList<String> linkedList3 = new LinkedList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList3, locale_FilteringMode0);
      ZoneId.getAvailableZoneIds();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      DefaultPhdWholeReadItem[] defaultPhdWholeReadItemArray0 = new DefaultPhdWholeReadItem[9];
      DefaultPhdWholeReadItem defaultPhdWholeReadItem0 = new DefaultPhdWholeReadItem(linkedList3);
      defaultPhdWholeReadItemArray0[0] = defaultPhdWholeReadItem0;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem1 = new DefaultPhdWholeReadItem(linkedList3);
      defaultPhdWholeReadItemArray0[1] = defaultPhdWholeReadItem1;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem2 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[2] = defaultPhdWholeReadItem2;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem3 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[3] = defaultPhdWholeReadItem3;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem4 = new DefaultPhdWholeReadItem(linkedList3);
      defaultPhdWholeReadItemArray0[4] = defaultPhdWholeReadItem4;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem5 = new DefaultPhdWholeReadItem(linkedList3);
      defaultPhdWholeReadItemArray0[5] = defaultPhdWholeReadItem5;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem6 = new DefaultPhdWholeReadItem(linkedList3);
      defaultPhdWholeReadItemArray0[6] = defaultPhdWholeReadItem6;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem7 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[7] = defaultPhdWholeReadItem7;
      DefaultPhdWholeReadItem defaultPhdWholeReadItem8 = new DefaultPhdWholeReadItem(list0);
      defaultPhdWholeReadItemArray0[8] = defaultPhdWholeReadItem8;
      linkedList3.toArray(defaultPhdWholeReadItemArray0);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) linkedList3, locale_FilteringMode2);
      Set<String> set1 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set1, locale_FilteringMode3);
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) list1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      NucleotideSequence nucleotideSequence1 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence1).getLength();
      QualitySequence qualitySequence1 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence1).getLength();
      PhdBuilder phdBuilder1 = new PhdBuilder("se.]^|f{iJK]+s5Ld=~", nucleotideSequence1, qualitySequence1);
      assertFalse(phdBuilder1.equals((Object)phdBuilder0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      System.setCurrentTimeMillis(709L);
      DefaultPhd defaultPhd0 = new DefaultPhd("AaUzRPZd", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      DefaultPhd defaultPhd1 = new DefaultPhd("AaUzRPZd", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd1);
      defaultPhd0.toString();
      phdBuilder0.peaks((PositionSequence) null);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap5.put("", "(Y");
      hashMap5.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      hashMap4.put("(Y", (String) null);
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap1.put("{", "{");
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NONE", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.fakePeaks((-1087), 316);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // first peak position must be >0
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("`-y Pef6LKH&(86", "`-y Pef6LKH&(86");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put("b", "b");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap6.entrySet();
      hashMap6.put("", "(Y");
      hashMap6.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      hashMap5.put("(Y", (String) null);
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("b", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.wholeReadItems((List<PhdWholeReadItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("N%$6<5MJGcdxhn", "N%$6<5MJGcdxhn");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap1.put("N%$6<5MJGcdxhn", "UT~Zm");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      hashMap1.put(";#BGg", "UT~Zm");
      hashMap10.put((String) null, (String) null);
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap7.put("IWiwW.%C-K\"#8h%", "IWiwW.%C-K\"#8h%");
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap14.put((String) null, (String) null);
      HashMap<String, String> hashMap15 = new HashMap<String, String>(hashMap10);
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((String) null, (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // id can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8976492786748422
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L, 0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("LQ~37d", nucleotideSequence0, qualitySequence0);
      phdBuilder0.fakePeaks();
      PhdBuilder phdBuilder1 = phdBuilder0.fakePeaks(946, 10);
      phdBuilder0.fakePeaks();
      phdBuilder1.build();
      PhdBuilder phdBuilder2 = null;
      try {
        phdBuilder2 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("`-y Pef6LKH&(86", "`-y Pef6LKH&(86");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put("b", "b");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap6.entrySet();
      hashMap6.put("", "(Y");
      hashMap6.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap5.put("(Y", (String) null);
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NONE", nucleotideSequence0, qualitySequence0);
      Phd phd0 = phdBuilder0.build();
      assertEquals("NONE", phd0.getId());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap6.put("]a+v)&Lm}Z0?8cwO", "can not call getNext()");
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap14.put("]a+v)&Lm}Z0?8cwO", "can not call getNext()");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap1.put("UT~Zm", "");
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("peak spacing must be >0", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdWholeReadItem> linkedList0 = new LinkedList<PhdWholeReadItem>();
      PhdBuilder phdBuilder1 = phdBuilder0.wholeReadItems(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("se.]^|f{iJK]+s5Ld=~", nucleotideSequence0, qualitySequence0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      phdBuilder0.copy();
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1, locale_FilteringMode0);
      ZoneId.getAvailableZoneIds();
      linkedList0.iterator();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode2);
      locale0.getUnicodeLocaleAttributes();
      LinkedList<String> linkedList4 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) linkedList4, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      PhdBuilder phdBuilder1 = null;
      try {
        phdBuilder1 = new PhdBuilder((Chromatogram) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // chromatogram can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("`-y Pef6LKH&(86", "`-y Pef6LKH&(86");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put("b", "b");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap6.put("", "(Y");
      hashMap6.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      hashMap2.put("afD]l;56R^P2tZ:}l", (String) null);
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap5.put("(Y", (String) null);
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NONE", nucleotideSequence0, qualitySequence0);
      LinkedList<PhdReadTag> linkedList0 = new LinkedList<PhdReadTag>();
      PhdBuilder phdBuilder1 = phdBuilder0.readTags(linkedList0);
      assertSame(phdBuilder1, phdBuilder0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("N%$6<5MJGcdxhn", "N%$6<5MJGcdxhn");
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap3.put("", "[bxk8`#m\"x(gP6f>");
      hashMap4.put((String) null, "");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap5.put("[bxk8`#m\"x(gP6f>", "N%$6<5MJGcdxhn");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      hashMap9.putIfAbsent("JT_eM", (String) null);
      hashMap9.put("invalid character ", "y<73:Me|vXd");
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      hashMap4.put("(d+)s*..s*(d+)", "");
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>(hashMap12);
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("<=(3k'?\"QR{s&H6i", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.readTags((List<PhdReadTag>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      hashMap1.put("`-y Pef6LKH&(86", "`-y Pef6LKH&(86");
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      hashMap3.put("b", "b");
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap5.put("", "(Y");
      hashMap5.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap1.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      hashMap4.put("(Y", (String) null);
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NONE", nucleotideSequence0, qualitySequence0);
      // Undeclared exception!
      try { 
        phdBuilder0.comments((Map<String, String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("`-y Pef6LKH&(86", "`-y Pef6LKH&(86");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put("b", "b");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap6.put("", "(Y");
      hashMap6.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap5.put("(Y", (String) null);
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(qualitySequence0).getLength();
      PhdBuilder phdBuilder0 = new PhdBuilder("NONE", nucleotideSequence0, qualitySequence0);
      PhdBuilder phdBuilder1 = phdBuilder0.comments(hashMap18);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("`-y Pef6LKH&(86", "`-y Pef6LKH&(86");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put("", "");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap6.put("", "(Y");
      hashMap6.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      hashMap3.put((String) null, (String) null);
      HashMap<String, String> hashMap21 = new HashMap<String, String>();
      HashMap<String, String> hashMap22 = new HashMap<String, String>();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("", (NucleotideSequence) null, qualitySequence0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // sequence can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      hashMap5.put("", "");
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      hashMap5.put("caC]YK_*L@\")))Y|>+", "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap17.put("-Gn%B5'=hP", "NH_t/hmy#Z/2**_@V'1");
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder("!sS+.J.gR", nucleotideSequence0, (QualitySequence) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // qualities can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      HashMap<String, String> hashMap1 = new HashMap<String, String>();
      HashMap<String, String> hashMap2 = new HashMap<String, String>();
      hashMap2.put("`-y Pef6LKH&(86", "`-y Pef6LKH&(86");
      HashMap<String, String> hashMap3 = new HashMap<String, String>();
      HashMap<String, String> hashMap4 = new HashMap<String, String>();
      hashMap4.put("b", "b");
      HashMap<String, String> hashMap5 = new HashMap<String, String>();
      HashMap<String, String> hashMap6 = new HashMap<String, String>();
      HashMap<String, String> hashMap7 = new HashMap<String, String>();
      HashMap<String, String> hashMap8 = new HashMap<String, String>();
      hashMap6.put("", "(Y");
      hashMap6.put((String) null, "afD]l;56R^P2tZ:}l");
      HashMap<String, String> hashMap9 = new HashMap<String, String>();
      HashMap<String, String> hashMap10 = new HashMap<String, String>();
      HashMap<String, String> hashMap11 = new HashMap<String, String>();
      HashMap<String, String> hashMap12 = new HashMap<String, String>();
      HashMap<String, String> hashMap13 = new HashMap<String, String>();
      HashMap<String, String> hashMap14 = new HashMap<String, String>();
      hashMap2.put((String) null, "caC]YK_*L@\")))Y|>+");
      HashMap<String, String> hashMap15 = new HashMap<String, String>();
      HashMap<String, String> hashMap16 = new HashMap<String, String>();
      HashMap<String, String> hashMap17 = new HashMap<String, String>();
      HashMap<String, String> hashMap18 = new HashMap<String, String>();
      hashMap5.put("(Y", (String) null);
      HashMap<String, String> hashMap19 = new HashMap<String, String>();
      HashMap<String, String> hashMap20 = new HashMap<String, String>();
      NucleotideSequence nucleotideSequence0 = mock(NucleotideSequence.class, new ViolatedAssumptionAnswer());
      doReturn(0L).when(nucleotideSequence0).getLength();
      QualitySequence qualitySequence0 = mock(QualitySequence.class, new ViolatedAssumptionAnswer());
      ArtificialPhd artificialPhd0 = new ArtificialPhd("", nucleotideSequence0, qualitySequence0, (-669));
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder(artificialPhd0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initial capacity should be > 0 :0
         //
         verifyException("org.jcvi.jillion.internal.core.util.GrowableShortArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultPhd defaultPhd0 = new DefaultPhd("AaUzRPZd", (NucleotideSequence) null, (QualitySequence) null, (PositionSequence) null);
      PhdBuilder phdBuilder0 = new PhdBuilder(defaultPhd0);
      PhdBuilder phdBuilder1 = phdBuilder0.peaks((PositionSequence) null);
      assertSame(phdBuilder0, phdBuilder1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      System.setCurrentTimeMillis((-9223372036854775808L));
      System.setCurrentTimeMillis((-224L));
      System.setCurrentTimeMillis(2301);
      PhdBuilder phdBuilder0 = null;
      try {
        phdBuilder0 = new PhdBuilder((Phd) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // phd to copy can not be null
         //
         verifyException("org.jcvi.jillion.assembly.consed.phd.PhdBuilder", e);
      }
  }
}
