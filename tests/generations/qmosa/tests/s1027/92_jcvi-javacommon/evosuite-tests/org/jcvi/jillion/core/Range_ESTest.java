/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 20:17:47 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6689214115995776
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(255L);
      range_Builder0.shift((-1557L));
      Range range2 = range_Builder1.build();
      Range.ofLength(9223372036854772265L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      range1.equals(range2);
      range_Builder1.copy();
      Object object1 = new Object();
      range2.equals(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object2));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.811475478592774
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      long long0 = 370L;
      long long1 = 9223372036854773244L;
      Range.of(370L, 9223372036854773244L);
      Object object0 = new Object();
      Range range0 = Range.of(1L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range range1 = Range.ofLength(9223372036854773244L);
      range1.isSubRangeOf(range0);
      Object object4 = new Object();
      Range.ofLength(1L);
      long long2 = 798L;
      Range range2 = Range.of(798L);
      Object object5 = new Object();
      range2.equals(object5);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854773244L);
      range_Builder0.copy();
      Range range3 = Range.ofLength(9223372036854773244L);
      // Undeclared exception!
      try { 
        range3.split(9223372036854773244L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -5129 would make range [9223372036854773244 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.6960727622009073
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.of(2814L);
      long long0 = 1393L;
      Range range2 = Range.of(1393L, 1393L);
      Range.ofLength(156L);
      range1.equals(range2);
      range_Builder0.copy();
      Range.ofLength(2290L);
      long long1 = (-2147481505L);
      // Undeclared exception!
      try { 
        Range.of(1393L, (-2147481505L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.5228473913496896
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(65512L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long0 = new Long((-3737L));
      Object object7 = new Object();
      Long long1 = new Long(9968L);
      Range range1 = Range.of(9968L, 65512L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range0, range2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3979951840726086
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(65535L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long0 = new Long((-3737L));
      Object object7 = new Object();
      Long long1 = new Long(9968L);
      Range range1 = Range.of(423L);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.087048583381649
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2577L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1L), 2577L);
      range1.intersects(range0);
      linkedList0.add(range1);
      Range range2 = linkedList0.pop();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      linkedList0.add(range0);
      range1.complement(range0);
      Range.ofLength(1476L);
      range2.isSubRangeOf(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin(2577L);
      range_Builder0.build();
      range1.equals(range0);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.5239011233398694
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      range_Builder1.expandEnd(65535L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.shift(2427L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(4294967295L);
      Object object3 = new Object();
      Long long1 = new Long(255L);
      range0.equals((Object) null);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object4));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.472620683892681
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder0.shift(925L);
      Range range0 = range_Builder2.build();
      Object object0 = new Object();
      Long long0 = new Long(2147483647L);
      Object object1 = new Object();
      Long long1 = new Long(925L);
      range_Builder2.copy();
      Long long2 = new Long(47L);
      range_Builder2.build();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7233288679881116
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range range0 = Range.of(370L, 9223372036854773244L);
      Object object0 = new Object();
      range0.equals(object0);
      Range range1 = Range.of(1L);
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(range1);
      range_Builder0.copy();
      range_Builder0.contractEnd((-3981L));
      Range.Builder range_Builder1 = range_Builder0.expandBegin(1L);
      Range range2 = range_Builder1.build();
      range1.equals(range2);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.187516037708218
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((-3546L), 1L);
      range0.iterator();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-246L), 9223372036854775098L);
      Range range2 = range_Builder0.build();
      Range range3 = Range.of(9223372036854775098L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range2.getLength();
      range1.complement(range3);
      Long long0 = new Long((-3546L));
      Long long1 = new Long(1L);
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-9223372036854774669L));
      Range.Builder range_Builder3 = new Range.Builder((-246L), 2147484356L);
      range_Builder1.copy();
      range_Builder3.copy();
      // Undeclared exception!
      try { 
        range_Builder2.contractBegin((-246L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.625112527023554
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), 2978L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2147483648L));
      range_Builder2.expandBegin(615L);
      range0.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.690581103700259
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-704L));
      Range.Builder range_Builder1 = new Range.Builder((-2L), 9223372032559814963L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.expandBegin((-355L));
      Range range0 = range_Builder2.build();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.457392797628403
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3546L);
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder0.shift((-3546L));
      Range range0 = range_Builder2.build();
      Object object0 = new Object();
      range0.equals(object0);
      range_Builder2.contractEnd((-1056L));
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder((-881L), (-3282L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.810546275291866
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      range_Builder1.expandEnd(65535L);
      range_Builder1.shift(65535L);
      Object object0 = new Object();
      Range range0 = Range.of((-9223372036854774231L));
      Object object1 = new Object();
      range0.equals(object1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = Range.of(65535L, 65535L);
      // Undeclared exception!
      try { 
        range1.intersection(range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854774231 would make range [65535 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.7617746501085523
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), 2978L);
      range_Builder1.expandEnd((-2147483648L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = range_Builder0.contractEnd((-2147483648L));
      Range.Builder range_Builder4 = range_Builder3.expandEnd(2978L);
      range_Builder3.expandBegin(615L);
      Range range1 = range_Builder1.build();
      boolean boolean0 = range1.equals(range0);
      assertFalse(boolean0);
      
      Range.CoordinateSystem.values();
      Range range2 = range_Builder4.build();
      Range range3 = range0.intersection(range2);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.997832494414118
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.of(9223372036854775670L);
      Object object0 = new Object();
      Range range1 = Range.ofLength(9223372036854775670L);
      Range range2 = Range.of(9223372036854775670L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      range1.complement(range2);
      range2.equals(object3);
      range1.intersects(range2);
      Range range3 = Range.of((-849L), (-849L));
      Range range4 = Range.ofLength(9223372036854775670L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of((-1L));
      range0.intersects(range3);
      Range.of(9223372036854775807L);
      Object object4 = new Object();
      range4.equals((Object) null);
      long long0 = 613L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-9223372036854772873L), 9223372036854775670L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.070584840382464
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2577L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1L), 2577L);
      range1.intersects(range0);
      linkedList0.add(range1);
      Range range2 = linkedList0.pop();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      linkedList0.add(range0);
      range1.complement(range0);
      Range.ofLength(1476L);
      range2.isSubRangeOf(range0);
      range0.equals(range2);
      Range.of(255L);
      // Undeclared exception!
      try { 
        Range.parseRange("The first parameter in the comparison is null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse The first parameter in the comparison is null. into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.7132710904636843
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(108L, 541L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder1.contractEnd((-1056L));
      range_Builder3.contractEnd((-2724L));
      range_Builder2.copy();
      range_Builder0.contractBegin((-1056L));
      range_Builder2.expandBegin(9223372036854775438L);
      Range range0 = range_Builder2.build();
      range0.equals(range_Builder3);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.7674154324692024
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(33415L);
      Range.Builder range_Builder2 = range_Builder0.shift((-1557L));
      range_Builder1.build();
      Range.ofLength(9223372036854772265L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Range.ofLength(2147483647L);
      range0.equals((Object) null);
      range_Builder2.copy();
      Range.ofLength(2147483647L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772265L, 242L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7658899132822965
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(9223372036854775768L);
      Range range0 = Range.of(9223372036854772994L, 9223372036854772994L);
      Range.ofLength(108L);
      range0.equals((Object) null);
      range_Builder0.copy();
      Range.ofLength(9223372036854772994L);
      Range.of(1120L, 9223372036854772994L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("Nd<", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse Nd< into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.581518472494229
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = new Range.Builder();
      long long0 = 65535L;
      range_Builder1.expandEnd(65535L);
      range_Builder1.shift(65535L);
      Range.Builder range_Builder3 = new Range.Builder((-3546L), (-1163L));
      Range range0 = Range.of((-54L), 1308L);
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.8612688780102036
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(32766L, 32766L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      linkedList0.forEach(consumer0);
      range0.complementFrom(linkedList0);
      Range range1 = Range.ofLength(32766L);
      range1.spliterator();
      List<Range> list0 = range0.complement(range1);
      range1.iterator();
      range0.complementFrom(list0);
      range0.intersects(range1);
      Range.ofLength(1544L);
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 1544L, 32766L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.2249455965257963
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 65535L, 65535L);
      Long long0 = new Long((-3199L));
      Object object2 = new Object();
      Long long1 = new Long((-3821L));
      Object object3 = new Object();
      range0.equals(object3);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=4.217968433605109
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem.values();
      long long1 = 2724L;
      Range range1 = Range.of(2724L, 2147483647L);
      Range range2 = Range.of((-306L), 2147483647L);
      Range range3 = range_Builder0.build();
      Range range4 = Range.ofLength(4294967295L);
      range0.startsBefore(range3);
      range2.getLength();
      List<Range> list0 = range4.complement(range1);
      range3.complementFrom(list0);
      range1.toString();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.ofLength(2724L);
      range3.intersects(range2);
      Long long2 = new Long(2724L);
      range5.equals(long2);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(2147483647L, (-5226L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.444218761519138
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range range0 = Range.of(4294967285L, 9223372036854775438L);
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(4294967285L, 9223372036854775438L);
      range_Builder1.copy();
      Object object3 = new Object();
      range0.equals((Object) null);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=4.026784405949919
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.shift((-1771L));
      Range range0 = Range.ofLength(2147484641L);
      Range range1 = Range.of((-1771L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      range0.intersects(range1);
      Range.of((-28L), 127L);
      range0.equals(range_Builder2);
      Range range2 = Range.ofLength(2147484641L);
      Range range3 = range1.intersection(range2);
      assertTrue(range3.isEmpty());
      
      List<Range> list0 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertFalse(list0.contains(range3));
      assertSame(range0, range2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.8943669348447996
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(32767L);
      range_Builder0.shift((-1771L));
      Range range0 = Range.ofLength(2147484641L);
      Range.of((-1771L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range0.intersects(range1);
      Range.of(4406L, 4406L);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of((-250L), (-1771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.684848531516247
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-16L);
      Range range0 = Range.of(range_CoordinateSystem0, (-16L), (-16L));
      Range range1 = Range.of((-16L), (-16L));
      range0.isSubRangeOf(range1);
      Range range2 = Range.of((-16L));
      Range range3 = Range.of(range_CoordinateSystem0, (-16L), (-16L));
      range2.equals(range1);
      range3.isSubRangeOf(range1);
      range0.intersects(range2);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of((-1139L));
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.854421049375817
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Object object0 = new Object();
      Range range1 = Range.of(2041L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(32767L);
      Object object6 = new Object();
      Long long1 = new Long(561L);
      Range range2 = Range.of(155L);
      Range range3 = Range.ofLength(506L);
      boolean boolean0 = range3.equals(range2);
      assertFalse(range3.isEmpty());
      assertFalse(boolean0);
      
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Range range4 = range2.intersection(range0);
      assertTrue(range4.isEmpty());
      
      range1.complement(range0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.673316519965478
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.of(2147482907L);
      range_Builder0.expandBegin((-1281L));
      range_Builder0.shift((-4527L));
      range_Builder0.expandBegin((-1281L));
      Range.Builder range_Builder2 = range_Builder1.contractEnd((-1281L));
      assertSame(range_Builder1, range_Builder2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=4.01030479467423
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 9223372036854775768L;
      Range range0 = Range.of(108L, 9223372036854775768L);
      range0.toString();
      Range range1 = Range.parseRange("[ 108 .. 9223372036854775768 ]/0B");
      range1.complement(range0);
      Range range2 = Range.parseRange("[ 108 .. 9223372036854775768 ]/0B");
      range1.equals(range2);
      Range.Builder range_Builder1 = new Range.Builder();
      range0.isSubRangeOf(range1);
      Range range3 = Range.of(3343L);
      range1.intersects(range3);
      Range.ofLength(3343L);
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2638509295502933
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(65535L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(65535L);
      Object object6 = new Object();
      Long long1 = new Long(9968L);
      boolean boolean0 = range0.equals(range0);
      assertTrue(boolean0);
      
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Range range1 = range0.intersection(range0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.72268088850258
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(2147480669L, 9223372036854773244L);
      Object object0 = new Object();
      Range range1 = Range.of(2576L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(2091L);
      boolean boolean0 = range0.equals(object4);
      assertFalse(boolean0);
      
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.430477331476803
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.intersects(range0);
      linkedList0.add(range0);
      linkedList0.pop();
      Range.ofLength(1L);
      Range.of(range_CoordinateSystem0, 1L, 1L);
      // Undeclared exception!
      try { 
        range0.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=4.265430814480778
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      range_Builder0.shift((-1771L));
      Range range0 = Range.ofLength(2147484641L);
      List<Range> list0 = range0.split(2147483647L);
      range0.complementFrom(list0);
      Range range1 = Range.of((-1771L));
      Object object0 = new Object();
      range1.equals(range_Builder1);
      range_Builder1.copy();
      range1.getLength();
      // Undeclared exception!
      try { 
        Range.parseRange("inputstream can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse inputstream can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.4054241011097175
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(9223372036854775670L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = Range.of(9223372036854775670L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      range0.getEnd(range_CoordinateSystem0);
      Long long0 = new Long(9223372036854775671L);
      Long.toUnsignedString(9223372036854775671L);
      range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      assertFalse(object9.equals((Object)object5));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.761711147000793
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.expandEnd(33415L);
      range_Builder0.shift((-1557L));
      Range range2 = Range.ofLength(9223372036854772265L);
      assertFalse(range2.isEmpty());
      
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      range0.equals(range0);
      Range.Builder range_Builder1 = new Range.Builder(13L, 9223372036854775386L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.contractBegin(1026L);
      range0.equals("N<vGuX");
      Range.CoordinateSystem.values();
      Range range3 = range0.intersection(range1);
      assertSame(range3, range0);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.9999176349656635
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3546L);
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd(65535L);
      long long1 = 2427L;
      range_Builder2.shift(2427L);
      Range range0 = range_Builder1.build();
      Range range1 = Range.of(65535L);
      range0.intersects(range1);
      Range range2 = Range.ofLength(2427L);
      range2.isSubRangeOf(range0);
      Object object0 = new Object();
      Range range3 = Range.ofLength(9223372036854773761L);
      range3.equals(range_Builder0);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.961847857011794
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.of(1L, 1L);
      Range range2 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range1.equals(range1);
      range2.isSubRangeOf(range1);
      range0.intersects(range0);
      String string0 = null;
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>(list1);
      List<Range> list2 = range1.complementFrom(linkedList0);
      List<Range> list3 = range0.complementFrom(list2);
      range1.complementFrom(list3);
      range0.endsBefore(range0);
      Range range3 = Range.of(1L, 515L);
      range1.isSubRangeOf(range3);
      Range.of(515L);
      long long1 = 9223372036854772265L;
      Range range4 = Range.ofLength(9223372036854772265L);
      range4.intersects(range0);
      Range.ofLength(515L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 515L, 367L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.577294939955052
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.of(1L, 1L);
      range0.intersects(range1);
      Range range2 = Range.ofLength(1L);
      Range range3 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range2.equals(range1);
      range3.isSubRangeOf(range1);
      range0.intersects(range2);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=4.197502809415987
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(2724L, 9223372036854775098L);
      Range range2 = Range.of(2724L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      //  // Unstable assertion: assertFalse(range0.isEmpty());
      
      Range.Builder range_Builder2 = range_Builder1.contractBegin(2724L);
      range_Builder2.copy();
      range_Builder0.contractBegin((-2757L));
      range1.toString();
      Range.Builder range_Builder3 = new Range.Builder();
      Range.Builder range_Builder4 = new Range.Builder(range1);
      Range range3 = Range.of(918L, 9223372036854775098L);
      range0.endsBefore(range3);
      Range range4 = range_Builder2.build();
      //  // Unstable assertion: assertFalse(range4.isEmpty());
      
      String string0 = range1.toString();
      //  // Unstable assertion: assertEquals("[ 2724 .. 9223372036854775098 ]/0B", string0);
      
      Range range5 = Range.parseRange("[ 2724 .. 9223372036854775098 ]/0B");
      range1.isEmpty();
      List<Range> list0 = range5.complement(range3);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range2.asRange();
      range5.iterator();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      String string1 = range2.toString(range_CoordinateSystem0);
      //  // Unstable assertion: assertEquals("[ 2725 .. 2725 ]/RB", string1);
      
      range5.equals(range1);
      //  // Unstable assertion: assertFalse(range1.equals((Object)range3));
      //  // Unstable assertion: assertFalse(range5.equals((Object)range2));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.722577352756864
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(370L, 9223372036854773244L);
      Object object0 = new Object();
      Range range1 = Range.of(1L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long((-2417L));
      Object object6 = new Object();
      Long long1 = new Long((-2417L));
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.408661043467654
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 925L, 925L);
      range_Builder0.shift(925L);
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range_Builder0.copy();
      Long long0 = new Long(925L);
      Object object3 = new Object();
      Long long1 = new Long(9223372036854775285L);
      range0.equals((Object) null);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.845778007079902
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483671L);
      List<Range> list0 = range1.split(1L);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.3778379642763916
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.shift(370L);
      Range range0 = range_Builder2.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long(370L);
      Object object2 = new Object();
      Long long1 = new Long(2147483647L);
      range0.equals(range0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9069873127218933
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2672L), (-2672L));
      Range range1 = Range.of((-2672L));
      range0.intersects(range1);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2672L), long0);
      
      long long1 = range0.getLength();
      assertTrue(range0.isEmpty());
      assertEquals(0L, long1);
      
      Range.Builder range_Builder0 = new Range.Builder(658L, 2708L);
      Range range2 = range_Builder0.build();
      Range range3 = Range.of((-2672L), 2708L);
      Range range4 = Range.of((-2672L));
      range1.equals(range4);
      assertNotSame(range4, range3);
      assertFalse(range4.isEmpty());
      assertFalse(range4.equals((Object)range2));
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.6003577749429327
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd(65535L);
      Range.Builder range_Builder3 = range_Builder1.shift(9223372032559808513L);
      range_Builder3.build();
      range_Builder0.expandBegin(1879L);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.copy();
      Range.Builder range_Builder5 = new Range.Builder((-3105L), (-1L));
      range_Builder0.expandBegin(9223372032559808513L);
      Range range0 = range_Builder2.build();
      range0.equals(range_Builder4);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("y33T{UT>=QpwB2Ah~*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.y33T{UT>=QpwB2Ah~*
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.939057778607568
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      long long0 = 9223372036854775098L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.iterator();
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775098L);
      Range range2 = Range.of(9223372036854775098L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.getLength();
      range2.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range2);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        Range.ofLength((-2243L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.712492747800965
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd(65535L);
      Range.Builder range_Builder3 = range_Builder2.shift(2427L);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder4 = new Range.Builder((-1011L), (-149L));
      Range.Builder range_Builder5 = range_Builder0.copy();
      range_Builder5.contractEnd((-128L));
      range_Builder2.expandBegin((-149L));
      range_Builder3.build();
      range0.equals(range_Builder3);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=4.089103692388988
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2577L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1L), 2577L);
      range1.intersects(range0);
      linkedList0.add(range1);
      Range range2 = linkedList0.pop();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      linkedList0.add(range0);
      range1.complement(range0);
      Range range3 = Range.ofLength(1476L);
      range2.isSubRangeOf(range0);
      range0.equals(range2);
      Range range4 = Range.of(255L);
      range2.intersection(range4);
      range0.complement(range3);
      long long0 = (-1059L);
      // Undeclared exception!
      try { 
        Range.ofLength((-1059L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.6413292834700552
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.expandEnd(65535L);
      Range.Builder range_Builder3 = range_Builder1.shift(65535L);
      Range range0 = range_Builder1.build();
      range_Builder3.copy();
      Object object0 = new Object();
      Range.Builder range_Builder4 = new Range.Builder(range0);
      range_Builder3.expandBegin(2003L);
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range range1 = range_Builder5.build();
      range1.equals(range_Builder5);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.435639278951569
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(370L);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder2.contractEnd((-1772L));
      range_Builder0.copy();
      range_Builder1.expandBegin((-1772L));
      Range range1 = range_Builder3.build();
      range1.equals(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.109879442694464
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2577L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1L), 2577L);
      boolean boolean0 = range1.intersects(range0);
      linkedList0.add(range1);
      Range range2 = linkedList0.pop();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      linkedList0.add(range0);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertFalse(list0.contains(range1));
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range range3 = Range.ofLength(313L);
      boolean boolean1 = range2.isSubRangeOf(range0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      range0.equals(range2);
      Range.of(255L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin((-1L));
      range_Builder1.build();
      range_Builder1.expandBegin(2577L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder0.build();
      Range.Builder range_Builder3 = new Range.Builder((-1L), 255L);
      range_Builder3.build();
      Long.getLong("The first parameter in the comparison is null.");
      boolean boolean2 = range3.equals((Object) null);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertFalse(boolean2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.348322843856917
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem.values();
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.ofLength(81L);
      Range.CoordinateSystem.values();
      boolean boolean0 = range0.endsBefore(range1);
      assertFalse(boolean0);
      
      boolean boolean1 = range0.isSubRangeOf(range1);
      assertFalse(boolean1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.8287591372555445
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(255L);
      range_Builder0.shift((-1557L));
      Range range2 = range_Builder1.build();
      Range range3 = Range.ofLength(9223372036854772265L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      range1.equals(range2);
      range_Builder1.copy();
      long long0 = 2147483647L;
      Range.ofLength(2147483647L);
      Range.of(9223372036854772265L, 9223372036854775807L);
      range2.startsBefore(range3);
      // Undeclared exception!
      try { 
        Range.ofLength((-1472L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.4157633675086294
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-2847L), 32768L);
      range_Builder1.shift(2147483619L);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Long long0 = new Long(974L);
      Object object5 = new Object();
      Long long1 = new Long(974L);
      Object object6 = new Object();
      range0.equals(object6);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      assertFalse(object10.equals((Object)object4));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5072279655028726
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder0);
      range_Builder1.shift(65535L);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(2147483647L);
      Object object3 = new Object();
      Long long1 = new Long(65535L);
      range0.endsBefore(range0);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.8248657223014826
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(32767L);
      range_Builder0.shift((-1771L));
      Range range0 = Range.ofLength(2147484641L);
      Range range1 = Range.of((-1771L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.intersects(range1);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of((-250L), (-1771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.843063383389614
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 370L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      //  // Unstable assertion: assertFalse(range1.isEmpty());
      
      Range range2 = range0.intersection(range0);
      Range range3 = Range.of(4294967295L, 9223372036854775807L);
      List<Range> list0 = range3.complement(range2);
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range range4 = Range.of(1231L, 1231L);
      Range range5 = range4.intersection(range0);
      //  // Unstable assertion: assertFalse(range5.isEmpty());
      //  // Unstable assertion: assertSame(range0, range2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.9271249601375717
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 2577L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2577L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1L), 2577L);
      range1.intersects(range0);
      linkedList0.add(range1);
      Range range2 = linkedList0.pop();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      linkedList0.add(range1);
      range0.complement(range2);
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2194L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.6555627900888283
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.copy();
      range_Builder0.copy();
      range_Builder1.expandBegin(1L);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder4 = new Range.Builder(32767L, 32767L);
      Range range0 = range_Builder1.build();
      range0.equals(range_Builder0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.8357983361671986
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.shift((-1557L));
      Range range2 = range_Builder0.build();
      Range range3 = Range.ofLength(9223372036854772265L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      range_Builder0.copy();
      Range range4 = Range.ofLength(2147483647L);
      Range.of(9223372036854772265L, 9223372036854775807L);
      boolean boolean0 = range2.startsBefore(range3);
      assertFalse(boolean0);
      assertFalse(range3.isEmpty());
      
      Range range5 = Range.of(2147483647L);
      boolean boolean1 = range4.endsBefore(range1);
      assertTrue(boolean1);
      assertSame(range1, range5);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.5663790688971666
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd((-2530L));
      Range.Builder range_Builder1 = new Range.Builder(108L, 541L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.copy();
      range_Builder1.contractEnd((-1056L));
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range.Builder range_Builder4 = new Range.Builder(0L, 65535L);
      range_Builder4.copy();
      Object object0 = new Object();
      range_Builder3.copy();
      Long long0 = new Long(108L);
      Range range0 = range_Builder4.build();
      range0.equals(object0);
      Range.CoordinateSystem.values();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.4247316751001824
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2239L), 32767L);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      boolean boolean1 = range0.equals(object5);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.5730322335935756
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.of(1L, 1L);
      range0.intersects(range1);
      Range range2 = Range.ofLength(1L);
      Range range3 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range2.equals(range1);
      range3.isSubRangeOf(range1);
      range0.intersects(range2);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.49924896928199
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(61989L, 61989L);
      Range.ofLength(61989L);
      range0.isSubRangeOf(range0);
      long long0 = (-2314L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2314L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.7132682500754024
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 0L;
      range_Builder1.expandEnd(0L);
      range_Builder1.expandEnd(65535L);
      range_Builder1.shift(65535L);
      Range range0 = range_Builder1.build();
      Range.of(0L);
      range_Builder1.copy();
      long long1 = 1423L;
      range_Builder1.contractBegin((-3542L));
      range_Builder1.contractBegin(1423L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854772352L, 1423L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(61989L, 4294967294L);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.953769652658392
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem.values();
      Range range1 = Range.of(2724L, 9223372036854775068L);
      Range.of((-310L), 2147483647L);
      Range range2 = Range.ofLength(81L);
      Range.of(81L);
      range2.isSubRangeOf(range1);
      Range range3 = Range.of(81L, 9223372036854775068L);
      range0.endsBefore(range3);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, (-3273L), 9223372036854775068L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.49326347011603
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      range_Builder0.shift((-2147483648L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long.toUnsignedString(9223372036854775279L);
      Long long0 = new Long(0L);
      long long1 = Long.min(1359L, (-1L));
      Long long2 = Long.getLong("", long0);
      assertFalse(long2.equals((Object)long1));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.9409821403467067
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.iterator();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372036854775098L);
      range_Builder0.build();
      Range range2 = Range.of(9223372036854775098L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      range1.getLength();
      range2.complement(range1);
      Long long0 = new Long(9223372036854775098L);
      Long long1 = new Long(9223372036854775098L);
      Range.Builder range_Builder2 = new Range.Builder(9223372034707291452L, 9223372036854775807L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder3.copy();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775098L, (-2442L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2443 would make range [9223372036854775097 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.9213883206287234
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.CoordinateSystem.values();
      long long0 = 2724L;
      Range range1 = Range.of(2724L, 9223372036854775098L);
      Range range2 = Range.of((-128L), 2147483647L);
      range1.intersects(range2);
      Range range3 = range_Builder0.build();
      range3.startsBefore(range2);
      Range.of(9223372036854775098L, 9223372036854775098L);
      range1.startsBefore(range1);
      Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range range4 = Range.of((-128L));
      range4.getEnd();
      range1.intersects(range2);
      range_Builder0.contractEnd(127L);
      // Undeclared exception!
      try { 
        Range.of(2147483647L, (-546L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      long long0 = (-9223372036854775808L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.CoordinateSystem) null, (-9223372036854775808L), (-9223372036854775808L));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.7311426872043385
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.of((-2147483648L), (-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), 3005L);
      range_Builder0.copy();
      range_Builder0.contractEnd((-2147483648L));
      Range.ofLength(5114L);
      long long0 = 9223372036854774883L;
      long long1 = (-1299L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854774883L, (-1299L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1299 would make range [9223372036854774883 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.574464215715726
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-9223372036854775808L));
      range_Builder0.expandEnd(32767L);
      range_Builder0.shift((-1771L));
      range_Builder1.expandBegin(4603L);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854744812 would make range [9223372036854767663 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.693715908951202
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1L, 1L);
      range_Builder0.expandEnd((-3546L));
      range_Builder0.shift(1L);
      Object object0 = new Object();
      Range range0 = Range.of((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-32768L), 2147483647L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        Range.of(9223372034707292162L, 190L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.144913261875693
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.of(32766L, 32766L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range0.complementFrom(linkedList0);
      Range range1 = Range.ofLength(32766L);
      range1.spliterator();
      List<Range> list0 = range0.complement(range1);
      range1.iterator();
      List<Range> list1 = range0.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      
      range0.intersects(range1);
      Range range2 = Range.ofLength(1544L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 1544L, 32766L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range3.getBegin(range_CoordinateSystem1);
      Range range4 = Range.of((-2916L));
      range3.complement(range2);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      range4.complement(range0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.470926539174656
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of((-2197L), 32767L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      long long0 = 255L;
      Range.Builder range_Builder1 = range_Builder0.expandEnd(9223372036854775700L);
      range_Builder1.shift(0L);
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=4.049232493497328
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.of((-2147483648L));
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      Range.Builder range_Builder1 = new Range.Builder((-2147483648L), 2978L);
      range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.contractEnd((-2147483648L));
      range_Builder2.expandBegin(615L);
      Range range1 = Range.of(2978L);
      boolean boolean0 = range0.endsBefore(range1);
      assertTrue(boolean0);
      
      Range range2 = Range.ofLength(2978L);
      Range range3 = range2.intersection(range0);
      range1.intersection(range3);
      assertTrue(range3.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=4.113441549289698
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(370L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = range_Builder0.build();
      Range range1 = range0.asRange();
      Range range2 = Range.ofLength(2147483646L);
      Range.of(2147483646L);
      range2.isSubRangeOf(range1);
      Range.of((-1166L), 370L);
      Range range3 = range0.intersection(range1);
      range3.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2057L, (-1166L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.7655189188833695
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      long long0 = 4294967288L;
      Range range0 = Range.of(4294967288L);
      Range range1 = Range.of(4294967288L, 4294967288L);
      long long1 = new Long(4294967288L);
      range0.spliterator();
      range0.intersects(range1);
      Range range2 = null;
      Range range3 = Range.ofLength(4294967288L);
      range1.intersection(range3);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.958731424010933
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2724L, 9223372036854775098L);
      Range range2 = Range.of((-128L), 2147483647L);
      range0.endsBefore(range1);
      Range range3 = Range.ofLength(9223372036854775098L);
      Range.of(9223372036854775098L, 9223372036854775098L);
      range1.intersects(range3);
      range3.startsBefore(range1);
      range1.startsBefore(range1);
      range3.startsBefore(range0);
      Range range4 = Range.ofLength(2147483647L);
      Range.of((-128L));
      range2.endsBefore(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.741273599879487
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(1L, 32767L);
      range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder0.shift(1L);
      range_Builder1.expandBegin(1L);
      range_Builder0.contractEnd((-1L));
      Range.Builder range_Builder4 = range_Builder1.expandBegin(1L);
      range_Builder0.expandBegin(1377L);
      range_Builder1.build();
      range_Builder3.expandBegin(32767L);
      Range.Builder range_Builder5 = new Range.Builder();
      range_Builder5.build();
      Range range1 = range_Builder4.build();
      assertFalse(range1.isEmpty());
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.9767496060853973
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L, 9223372036854775098L);
      Range range2 = Range.of((-128L), 2147483647L);
      range0.endsBefore(range1);
      Range range3 = Range.ofLength(9223372036854775098L);
      Range.of(9223372036854775098L, 9223372036854775098L);
      range1.intersects(range3);
      range3.startsBefore(range1);
      range1.startsBefore(range1);
      range3.startsBefore(range0);
      Range range4 = Range.ofLength(2147483647L);
      Range.of((-128L));
      range2.endsBefore(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=4.115118330384247
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 2419L);
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      range0.endsBefore(range1);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      range0.asRange();
      // Undeclared exception!
      try { 
        Range.ofLength((-1771L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.765352693357932
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 370L, 4294967295L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 190L);
      Range range2 = range0.intersection(range0);
      assertSame(range2, range0);
      assertFalse(range2.isEmpty());
      
      Range range3 = Range.of(4294967295L, 9223372036854775807L);
      List<Range> list0 = range3.complement(range1);
      assertFalse(range1.isEmpty());
      assertTrue(list0.contains(range3));
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.7164921755301794
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(9223372036854773244L, 9223372036854773244L);
      Object object0 = new Object();
      Range range1 = Range.of(2539L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(2091L);
      Object object6 = new Object();
      Object object7 = new Object();
      range_Builder0.expandEnd(61989L);
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(1973L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.638833070401709
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder1.expandEnd(65535L);
      Range.Builder range_Builder4 = range_Builder3.copy();
      range_Builder3.expandBegin((-1L));
      Range.Builder range_Builder5 = range_Builder4.contractEnd((-1L));
      range_Builder5.expandBegin(255L);
      range_Builder1.expandBegin(1377L);
      Range.Builder range_Builder6 = new Range.Builder(255L, 1544L);
      Range range0 = range_Builder6.build();
      range0.equals(range_Builder3);
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.4450831512955027
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 4294967295L;
      Range.of(range_CoordinateSystem0, 370L, 4294967295L);
      Range.ofLength(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 370L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.378424516964351
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(1L, 1L);
      range0.intersects(range1);
      long long1 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 1057L, 1L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.2665975060417
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      long long0 = 2724L;
      Range.of(9223372036854775670L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775670L, 2724L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.366474799446424
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder0.shift(925L);
      Range range0 = range_Builder2.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Long long0 = new Long(2147483647L);
      Object object3 = new Object();
      Long long1 = new Long(925L);
      range0.isEmpty();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      assertFalse(object6.equals((Object)object3));
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.042066457958706
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = range_Builder1.copy();
      range_Builder0.copy();
      Range range1 = Range.of(2669L);
      range1.intersects(range0);
      Range range2 = Range.ofLength(1801L);
      boolean boolean0 = range2.isSubRangeOf(range1);
      Object object0 = new Object();
      Range range3 = Range.ofLength(9223372036854775807L);
      boolean boolean1 = range1.equals(range3);
      assertFalse(range1.isEmpty());
      
      range_Builder3.copy();
      Range.ofLength(1801L);
      Range.of(32767L, 9223372036854773761L);
      Range.of(32767L);
      boolean boolean2 = range0.startsBefore(range3);
      assertTrue(boolean2 == boolean1);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.ofLength(65535L);
      Range.of(32767L);
      boolean boolean3 = range4.endsBefore(range0);
      assertTrue(range0.isEmpty());
      assertTrue(boolean3 == boolean0);
      assertNotSame(range4, range2);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.809922300519564
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      range_Builder1.expandBegin(4294967295L);
      Range range1 = Range.ofLength(65535L);
      range0.intersects(range1);
      range1.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of((-1732L), (-2238L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.5931386794704245
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 1L;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 1L);
      Range range1 = Range.of(1L, 1L);
      range0.endsBefore(range1);
      Range range2 = Range.ofLength(1L);
      Range range3 = Range.of(range_CoordinateSystem0, 1L, 1L);
      range3.endsBefore(range2);
      range3.intersects(range0);
      range0.intersects(range2);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.272590588465372
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(370L);
      range_Builder1.build();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder(2147483646L, (-1299L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.3086120583140826
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of((-2988L));
      Object object0 = new Object();
      Object object1 = new Object();
      Range.of((-1955L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long1 = new Long((-2988L));
      Long.toUnsignedString((-1955L));
      Long long2 = new Long((-2988L));
      Long.toUnsignedString((-2987L));
      Long long3 = new Long((-2361L));
      Long long4 = Long.getLong("[>QNjCn$", long3);
      assertFalse(long4.equals((Object)long0));
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.853739697192787
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2724L, 9223372036854775098L);
      Range range2 = Range.of((-128L));
      range0.endsBefore(range1);
      Range range3 = Range.ofLength(9223372036854775098L);
      Range.of(9223372036854775098L, 9223372036854775098L);
      range1.intersects(range3);
      range3.startsBefore(range1);
      range1.startsBefore(range1);
      Range range4 = Range.ofLength(2147483647L);
      Range.of((-128L));
      range2.endsBefore(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4134407599935304
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 2814L;
      Range range0 = Range.of(2814L);
      long long1 = 156L;
      Range.ofLength(156L);
      range0.equals(range0);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.84492200331018
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-1L), (-1L));
      linkedList0.add(range0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.ofLength((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.3960193303930795
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(569L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      List<Range> list0 = range0.split(569L);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.8166092643244784
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range range0 = range_Builder1.build();
      range0.split(65535L);
      range_Builder1.expandBegin(4294967295L);
      Range.ofLength(65535L);
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.6775076169272367
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      //  // Unstable assertion: assertTrue(range0.isEmpty());
      
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      List<Range> list0 = range1.split(1L);
      //  // Unstable assertion: assertEquals(1772, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range1));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.3235346639983794
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      range_Builder0.contractEnd(370L);
      Range range0 = range_Builder0.build();
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.463070313912537
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(370L, 2147483646L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(370L);
      Range range0 = range_Builder1.build();
      range_Builder0.expandEnd(2147483646L);
      Long long0 = new Long(2147483647L);
      range_Builder1.expandEnd(2147483647L);
      Object object0 = new Object();
      Long long1 = new Long(2147483647L);
      range_Builder1.copy();
      Long long2 = new Long(1L);
      range0.intersects(range0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      assertFalse(object4.equals((Object)object1));
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.7038238399566468
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem0);
      Range.Builder range_Builder2 = new Range.Builder(1L, 32767L);
      range_Builder1.copy();
      range_Builder0.copy();
      range_Builder1.expandBegin(1L);
      range_Builder1.build();
      range_Builder0.contractEnd((-1L));
      Range.Builder range_Builder3 = range_Builder1.expandBegin(1L);
      range_Builder0.expandBegin(1377L);
      range_Builder1.build();
      range_Builder3.shift(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 0 ]/SB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 0 ]/SB
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=4.020123450892584
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(33415L);
      range_Builder0.shift((-1557L));
      List<Range> list0 = range1.complement(range0);
      assertTrue(list0.isEmpty());
      
      range_Builder1.build();
      Range range2 = Range.ofLength(9223372036854772265L);
      range0.isSubRangeOf(range1);
      Range.of(33415L);
      Object object0 = new Object();
      boolean boolean0 = range2.isEmpty();
      assertFalse(boolean0);
      
      Range.Builder range_Builder2 = range_Builder1.copy();
      range_Builder1.contractBegin((-1557L));
      range_Builder2.expandEnd((-986L));
      assertSame(range0, range1);
      
      Range range3 = Range.of(2724L, 33415L);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.expandBegin((-338L));
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.5390803569662803
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(9223372036854775807L);
      range_Builder1.contractBegin((-736L));
      Range range0 = Range.ofLength(71964L);
      long long0 = range0.getLength();
      assertEquals(71964L, long0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.9587138129511867
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range range0 = Range.ofLength(2147483620L);
      Range range1 = Range.of(2724L, 9223372036854775098L);
      Range range2 = Range.of((-128L), 2147483620L);
      range0.endsBefore(range1);
      Range range3 = Range.ofLength(9223372036854775098L);
      Range.of(9223372036854775098L, 9223372036854775098L);
      range1.intersects(range3);
      range0.isEmpty();
      range1.startsBefore(range1);
      range3.startsBefore(range0);
      Range range4 = Range.ofLength(2147483620L);
      Range.of((-128L));
      range2.endsBefore(range4);
      // Undeclared exception!
      try { 
        Range.ofLength((-9223372036854775808L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.226347648829042
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range range0 = Range.of(65535L);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Long long0 = new Long((-2530L));
      Object object7 = new Object();
      range0.equals(object6);
      Object object8 = new Object();
      Object object9 = new Object();
      Object object10 = new Object();
      Object object11 = new Object();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.3402997630821867
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-1L), (-1L));
      linkedList0.add(range0);
      linkedList0.pop();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-1L), 127L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.6418421150225924
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-2530L));
      Range.Builder range_Builder2 = new Range.Builder(108L, 541L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder2.contractEnd((-1056L));
      Range.Builder range_Builder4 = range_Builder3.copy();
      Range.Builder range_Builder5 = new Range.Builder(541L, 65535L);
      range_Builder5.copy();
      Object object0 = new Object();
      range_Builder4.copy();
      Long long0 = new Long(108L);
      Range range0 = range_Builder5.build();
      Range.CoordinateSystem.values();
      Range range1 = range_Builder3.build();
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      
      Range range3 = range_Builder1.build();
      assertSame(range3, range1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.73163411184437
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder((-3546L), 65535L);
      Range.Builder range_Builder4 = range_Builder1.shift(65535L);
      Range range0 = range_Builder1.build();
      range_Builder4.copy();
      Object object0 = new Object();
      Range.Builder range_Builder5 = new Range.Builder(range0);
      Range.Builder range_Builder6 = new Range.Builder((-3546L), 2003L);
      range_Builder4.copy();
      Object object1 = new Object();
      range_Builder6.copy();
      Long long0 = new Long(2003L);
      range_Builder6.build();
      range0.equals(range_Builder5);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.9496419069912787
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.contractEnd(0L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(0L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483671L);
      List<Range> list0 = range1.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range1));
      //  // Unstable assertion: assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.5986976774441644
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(1L, 32767L);
      range_Builder1.copy();
      range_Builder0.copy();
      range_Builder1.expandBegin(1L);
      range_Builder0.contractEnd((-1L));
      range_Builder1.expandBegin(1L);
      range_Builder0.expandBegin(1377L);
      Range range0 = range_Builder1.build();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("must be >=0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.must be >=0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.1341519506138185
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = 925L;
      range_Builder0.shift(925L);
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(925L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.823084091111281
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      long long0 = 2724L;
      Range range0 = Range.of(2724L);
      Range range1 = null;
      range_Builder0.build();
      Range range2 = Range.ofLength(2724L);
      range2.intersection(range0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.6886635966448447
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = new Range.Builder((-2147483648L), 9223372032559870502L);
      Range.Builder range_Builder3 = range_Builder2.copy();
      Range.Builder range_Builder4 = range_Builder3.contractEnd(1883L);
      range_Builder4.copy();
      range_Builder0.expandBegin(9223372032559870502L);
      range_Builder0.expandBegin((-505L));
      Range range0 = range_Builder3.build();
      range0.endsBefore(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=4.149770022714026
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 2577L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of((-1L), 2577L);
      range1.intersects(range0);
      linkedList0.add(range1);
      Range range2 = linkedList0.pop();
      range1.complementFrom(linkedList0);
      range2.complementFrom(linkedList0);
      linkedList0.add(range0);
      range1.getLength();
      range1.complement(range0);
      Range.ofLength(1476L);
      range2.isSubRangeOf(range0);
      range0.iterator();
      range0.equals(range2);
      Range range3 = range1.intersection(range0);
      range0.getLength();
      range2.complement(range3);
      Range range4 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range5 = range4.asRange();
      range0.startsBefore(range5);
      // Undeclared exception!
      try { 
        Range.of(2577L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.816011353405646
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(1L, 32767L);
      range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder1.expandBegin(1L);
      Range range1 = range_Builder1.build();
      assertFalse(range1.isEmpty());
      
      range_Builder0.contractEnd((-1L));
      Range.Builder range_Builder4 = range_Builder1.expandBegin(1L);
      range_Builder1.expandEnd(1167L);
      range_Builder0.expandBegin(1377L);
      range_Builder1.build();
      range_Builder4.shift(0L);
      range_Builder3.expandBegin(32767L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range range2 = range_Builder5.build();
      range_Builder4.build();
      range2.equals(range_Builder0);
      assertTrue(range2.isEmpty());
      assertSame(range2, range0);
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.347367941794885
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3546L), (-3546L));
      Range range0 = range_Builder0.build();
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long((-3546L));
      Long long1 = new Long((-3546L));
      range0.equals(long1);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object2));
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.115053675356123
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of(2100L);
      range0.getEnd();
      Object object0 = new Object();
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.7524550775525416
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(0L, 0L);
      range0.asRange();
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      range0.intersects(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = Range.ofLength(0L);
      range2.getLength();
      // Undeclared exception!
      try { 
        range2.split(0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.7390440303763492
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.of(9223372036854775670L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range.of(666L, 2724L);
      Object object5 = new Object();
      Range range1 = Range.ofLength(0L);
      range1.intersection(range0);
      long long0 = range1.getLength();
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.342529428571216
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 4294967295L);
      Range.of(4294967295L, 9223372036854775807L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.2671143019073328
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Long long0 = new Long((-1L));
      Long.toUnsignedString(2147483647L);
      Long long1 = new Long(4294967295L);
      Long.toUnsignedString(2147483647L);
      Long.getLong("2147483647", long1);
      Long long2 = new Long(4294967295L);
      Long.compareUnsigned(9223372036854525572L, 255L);
      Range range0 = Range.of(2147482907L, 2147483647L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      assertFalse(linkedList0.contains(range0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.859562754263308
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(1L, 32767L);
      range_Builder1.copy();
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder1.expandBegin(1L);
      range_Builder1.build();
      range_Builder0.contractEnd((-1L));
      Range.Builder range_Builder4 = range_Builder1.expandBegin(1L);
      range_Builder0.expandBegin(234L);
      range_Builder0.expandBegin(1377L);
      Range range0 = range_Builder1.build();
      range_Builder4.shift(0L);
      range_Builder3.expandBegin(32767L);
      Range.Builder range_Builder5 = new Range.Builder();
      Range range1 = range_Builder5.build();
      Range range2 = range_Builder4.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range0);
      
      range1.equals(range_Builder0);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.3243047833668813
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(32767L, 2147483646L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(32767L);
      Range range0 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.506155437453087
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.expandEnd(65535L);
      range_Builder1.expandEnd((-3546L));
      range_Builder1.shift(65535L);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range1 = range0.asRange();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.7087442338722467
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1771L), 0L);
      range_Builder0.contractEnd(0L);
      range_Builder0.expandEnd(0L);
      Range.Builder range_Builder1 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder0.contractEnd(0L);
      range_Builder0.contractBegin((-1771L));
      range_Builder1.expandEnd(2147483647L);
      // Undeclared exception!
      range0.split(1L);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.256262634996239
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(925L);
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long((-4815L));
      Long long1 = new Long((-4815L));
      range0.equals(object1);
      Object object4 = new Object();
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      assertFalse(object7.equals((Object)object2));
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.1859742525795545
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-433L), (-433L));
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-433L), (-433L));
      range_Builder0.build();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4423L, (-433L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=4.265470873708882
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.of(108L, 9223372036854775768L);
      String string0 = range0.toString();
      //  // Unstable assertion: assertEquals("[ 108 .. 9223372036854775768 ]/0B", string0);
      
      Range range1 = Range.parseRange("[ 108 .. 9223372036854775768 ]/0B");
      range1.endsBefore(range0);
      List<Range> list0 = range1.complement(range0);
      Range range2 = Range.parseRange("[ 108 .. 9223372036854775768 ]/0B");
      Range range3 = Range.parseRange("[ 108 .. 9223372036854775768 ]/0B");
      List<Range> list1 = range2.complementFrom(list0);
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range4 = Range.of(2814L);
      Range range5 = range4.intersection(range1);
      //  // Unstable assertion: assertSame(range5, range4);
      
      Range range6 = Range.parseRange("[ 108 .. 9223372036854775768 ]/0B");
      Range range7 = Range.of((-44L), 1393L);
      boolean boolean0 = range1.isSubRangeOf(range7);
      range2.intersection(range7);
      Range range8 = Range.of(2319L);
      boolean boolean1 = range2.intersects(range7);
      Range.ofLength(2319L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-2844L), (-1L));
      Range range9 = Range.parseRange("[ 108 .. 9223372036854775768 ]/0B", range_CoordinateSystem0);
      range9.intersection(range0);
      List<Range> list2 = range8.complement(range6);
      //  // Unstable assertion: assertEquals(0, list2.size());
      
      Range range10 = range6.asRange();
      boolean boolean2 = range10.startsBefore(range7);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      
      boolean boolean3 = range3.endsBefore(range2);
      //  // Unstable assertion: assertTrue(boolean3 == boolean0);
      //  // Unstable assertion: assertFalse(boolean3);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2459427981487714
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      long long0 = (-2147483641L);
      Range.of((-2147483641L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-2147483641L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.51489163228962
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(0L, 0L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.9433793943650564
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd(65535L);
      Range.Builder range_Builder3 = range_Builder2.contractEnd((-1L));
      Range range0 = range_Builder3.build();
      range_Builder3.expandEnd(2427L);
      Range.Builder range_Builder4 = new Range.Builder(range0);
      Range range1 = range_Builder4.build();
      range_Builder3.copy();
      range_Builder2.contractBegin((-3546L));
      range_Builder3.expandEnd(2979L);
      List<Range> list0 = range0.split(313L);
      assertFalse(list0.contains(range0));
      assertSame(range0, range1);
      assertEquals(210, list0.size());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.5382014487217113
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.of(9223372036854775670L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Range range0 = Range.of(666L, 2724L);
      range0.getBegin();
      Object object5 = new Object();
      range0.equals(object5);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.6806345041014326
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-882L), (-882L));
      range0.getBegin();
      Range.of((-1578L), 1307L);
      Range.ofLength(65535L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("length must beW>= 0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.length must beW>= 0
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.398468925267773
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-882L), (-882L));
      Range.of((-1578L), (-1578L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.5687983602136297
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder1.expandEnd((-5188L));
      range_Builder2.expandEnd(2147484641L);
      Range.Builder range_Builder3 = range_Builder0.expandEnd(9223372032559808520L);
      Range.Builder range_Builder4 = range_Builder2.shift((-5188L));
      Range.of(2147484641L);
      range_Builder3.expandBegin((-5188L));
      range_Builder3.shift((-5188L));
      Range.Builder range_Builder5 = range_Builder4.expandBegin(255L);
      Range.Builder range_Builder6 = range_Builder5.contractEnd(1993L);
      assertSame(range_Builder2, range_Builder6);
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.2081819478882947
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 145
  /*Coverage entropy=3.622397207886695
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.contractEnd(0L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = range_Builder0.shift((-1771L));
      Range range0 = range_Builder0.build();
      range_Builder0.copy();
      range_Builder2.build();
      range_Builder0.contractBegin((-1771L));
      range_Builder2.expandEnd(2147483638L);
      // Undeclared exception!
      try { 
        range0.split((-20L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=3.4771563436240447
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      range_Builder0.build();
      range_Builder0.expandBegin((-1281L));
      // Undeclared exception!
      try { 
        Range.ofLength((-1281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=3.357718378762424
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1567L), 3021L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Kdo_P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Kdo_P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 148
  /*Coverage entropy=3.586733499234471
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(2147480669L, 9223372036854773244L);
      Object object0 = new Object();
      Range.of(2576L);
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Long long0 = new Long(2091L);
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(61989L);
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 149
  /*Coverage entropy=3.6989543357216377
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(32767L);
      range_Builder1.copy();
      range_Builder0.copy();
      Range.Builder range_Builder3 = range_Builder0.contractEnd((-1L));
      range_Builder0.expandBegin(1377L);
      Range range0 = range_Builder1.build();
      range_Builder3.build();
      boolean boolean0 = range0.equals(range_Builder1);
      //  // Unstable assertion: assertFalse(boolean0);
      //  // Unstable assertion: assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=3.728429718070412
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range_Builder1.build();
      range_Builder1.expandBegin(4294967295L);
      Range.ofLength(65535L);
      Range range0 = range_Builder1.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=3.3763612566307986
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(108L, 541L);
      Range range0 = range_Builder0.build();
      range_Builder0.expandBegin((-32768L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem._
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=3.4085730796737437
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), (-1L));
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Kdo_P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Kdo_P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=3.3986677638769924
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(9223372036854775098L);
      Long long1 = new Long(9223372036854775098L);
      Range.Builder range_Builder0 = new Range.Builder((-1329L), 1183L);
      Range range0 = Range.of((-1L), 9223372036854772994L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 154
  /*Coverage entropy=3.556593938869672
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem0.getAbbreviatedName();
      Range.Builder range_Builder0 = new Range.Builder(3152L, 3152L);
      Range.Builder range_Builder1 = range_Builder0.shift(3152L);
      Range range0 = range_Builder0.build();
      Range range1 = Range.of(0L, 3152L);
      range0.isSubRangeOf(range1);
      long long0 = 2049L;
      Range.Builder range_Builder2 = range_Builder1.shift(2049L);
      Range range2 = range_Builder2.build();
      range2.endsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = 2419L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-1L), (-2003L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 155
  /*Coverage entropy=3.3976800595209387
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Range.Comparators.values();
      Range.Builder range_Builder0 = new Range.Builder((-32768L), 1181L);
      range_Builder0.shift((-32768L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=3.3212761584353205
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(108L, 3021L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("Kdo_P");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.Kdo_P
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=3.9338923954232046
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-3546L);
      Range.Builder range_Builder1 = new Range.Builder((-3546L), (-3546L));
      Range.Builder range_Builder2 = range_Builder1.expandEnd(65535L);
      long long1 = 2427L;
      range_Builder2.shift(2427L);
      Range range0 = range_Builder1.build();
      Range range1 = Range.ofLength(2427L);
      range1.isSubRangeOf(range0);
      range_Builder1.contractBegin(65535L);
      range1.isSubRangeOf(range0);
      Object object0 = new Object();
      Range.ofLength(9223372036854773761L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        Range.ofLength((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 158
  /*Coverage entropy=3.377940085767439
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range.CoordinateSystem.values();
      Range range1 = Range.ofLength(81L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range.CoordinateSystem.values();
      boolean boolean1 = range0.endsBefore(range1);
      assertFalse(boolean1);
      
      boolean boolean2 = range0.isSubRangeOf(range1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range2 = range_Builder0.build();
      assertSame(range2, range0);
      
      Range range3 = Range.ofLength(81L);
      assertFalse(range3.equals((Object)range0));
  }

  /**
  //Test case number: 159
  /*Coverage entropy=3.3568113492839653
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Long long0 = new Long((-3958L));
      Object object4 = new Object();
      Long long1 = new Long((-1L));
      Object object5 = new Object();
      Object object6 = new Object();
      Object object7 = new Object();
      Object object8 = new Object();
      Range range0 = Range.of((-3958L), 9968L);
      assertFalse(range0.isEmpty());
  }
}
