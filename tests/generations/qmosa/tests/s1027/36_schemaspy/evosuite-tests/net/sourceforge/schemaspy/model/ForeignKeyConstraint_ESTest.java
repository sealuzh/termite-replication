/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:35:18 GMT 2019
 */

package net.sourceforge.schemaspy.model;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.util.LinkedList;
import java.util.List;
import net.sourceforge.schemaspy.Config;
import net.sourceforge.schemaspy.model.ForeignKeyConstraint;
import net.sourceforge.schemaspy.model.Table;
import net.sourceforge.schemaspy.model.TableColumn;
import net.sourceforge.schemaspy.model.xml.SchemaMeta;
import net.sourceforge.schemaspy.model.xml.TableColumnMeta;
import net.sourceforge.schemaspy.view.DefaultSqlFormatter;
import net.sourceforge.schemaspy.view.SqlFormatter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ForeignKeyConstraint_ESTest extends ForeignKeyConstraint_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "4_7daE+*,A7!`>0nK_O";
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "4_7daE+*,A7!`>0nK_O", 556, 3);
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      foreignKeyConstraint0.addChildColumn(tableColumn0);
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.isRestrictDelete();
      Config config0 = new Config();
      String string1 = "";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("W$Y&", "}Z-'.\"", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"W$Y&\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      System.setCurrentTimeMillis(2381L);
      tableColumn0.setComments("");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 93, 93);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.addChildColumn(tableColumn0);
      List<TableColumn> list0 = foreignKeyConstraint0.getChildColumns();
      assertTrue(list0.contains(tableColumn0));
      
      foreignKeyConstraint0.getName();
      foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(93, foreignKeyConstraint0.getDeleteRule());
      assertEquals(93, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7935868607173573
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "ls`Y/");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 1, 1);
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      String string0 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(1, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Restrict delete", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 0, (-484));
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      foreignKeyConstraint0.getParentColumns();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      assertFalse(boolean0);
      
      foreignKeyConstraint0.getName();
      foreignKeyConstraint0.getChildColumns();
      assertEquals((-484), foreignKeyConstraint0.getDeleteRule());
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Table table0 = null;
      Config config0 = new Config();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "!WncWa]Q", 1, 1);
      foreignKeyConstraint0.isRestrictDelete();
      config0.setMaxDbThreads(46);
      Config.getInstance();
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("UTF-8", "UTF-8", "UTF-8");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"UTF-8\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-3507), 1043);
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals((-3507), int0);
      assertEquals(1043, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "4_7daE+*,A7!`>0nK_O";
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "4_7daE+*,A7!`>0nK_O", 2, 2);
      foreignKeyConstraint0.isNullOnDelete();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string1 = "YEAR";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "YEAR");
      String string2 = "6FR";
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("YEAR", "YEAR", "6FR");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \"YEAR\" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2508570947192674
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "xjXb(6:JOu ", 2357, 1);
      foreignKeyConstraint0.getDeleteRuleDescription();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      foreignKeyConstraint0.getDeleteRuleDescription();
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta("", "C", "");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Meta directory \"\" must contain a file named \".meta.xml\"
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8797877350457353
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "|}/", 3, 2);
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Null on delete:\n Foreign key to parent set to NULL when parent deleted", string0);
      
      Config config0 = Config.getInstance();
      config0.setUser("4_7daE+*,A7!`>0nK_O");
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DatabaseMetaData databaseMetaData0 = mock(DatabaseMetaData.class, new ViolatedAssumptionAnswer());
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("N", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals(3, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Null on delete", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, (String) null, 12, 12);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46~Ah1GUP");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "6v@^hW=", 12, (-167));
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6Q/;4JZonUVP?o?Rnw", 0, 8);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Config.getInstance();
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)94;
      byteArray0[1] = (byte)94;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      foreignKeyConstraint0.getName();
      assertEquals(0, foreignKeyConstraint0.getUpdateRule());
      assertEquals(8, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "*6Sv@4~^hWa", (-1), (-1));
      foreignKeyConstraint0.addChildColumn((TableColumn) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) linkedList0;
      linkedList0.offerFirst((TableColumn) null);
      Object object0 = new Object();
      objectArray0[1] = object0;
      linkedList0.listIterator();
      linkedList0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        ForeignKeyConstraint.toString((List<TableColumn>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.649669942596342
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict dlete", 8, 0);
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      List<TableColumn> list0 = foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.getParentColumns();
      foreignKeyConstraint0.isImplied();
      int int0 = foreignKeyConstraint0.getDeleteRule();
      assertEquals(0, int0);
      
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      ForeignKeyConstraint.toString(list0);
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.isImplied();
      foreignKeyConstraint0.getChildColumns();
      foreignKeyConstraint0.getParentTable();
      foreignKeyConstraint0.isImplied();
      foreignKeyConstraint0.getChildTable();
      foreignKeyConstraint0.getParentColumns();
      boolean boolean1 = foreignKeyConstraint0.isImplied();
      assertEquals(8, foreignKeyConstraint0.getUpdateRule());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-2677), (-2677));
      foreignKeyConstraint0.isReal();
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      Config config0 = new Config();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      Config config1 = new Config();
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      SqlFormatter sqlFormatter1 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter1);
      SqlFormatter sqlFormatter2 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter1);
      SqlFormatter sqlFormatter3 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter3);
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      config1.setSqlFormatter(sqlFormatter0);
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      SqlFormatter sqlFormatter4 = config1.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      config0.isHighQuality();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      config0.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      config1.setSqlFormatter((SqlFormatter) null);
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      config0.setSqlFormatter(sqlFormatter2);
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter12);
      DefaultSqlFormatter defaultSqlFormatter15 = new DefaultSqlFormatter();
      config1.setSqlFormatter((SqlFormatter) defaultSqlFormatter14);
      config0.setSqlFormatter(sqlFormatter4);
      assertSame(sqlFormatter4, sqlFormatter1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "L DR:", 48, 216);
      foreignKeyConstraint0.addParentColumn((TableColumn) null);
      Config config0 = Config.getInstance();
      config0.getMeta();
      Config config1 = Config.getInstance();
      config1.getDbType();
      int int0 = config0.getMaxDetailedTables();
      assertEquals(300, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4#\"E,sK");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6v@4$^hW=", 12, 12);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      foreignKeyConstraint0.isRestrictDelete();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@4$^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46~Ah1GUP");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      System.setCurrentTimeMillis(12);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6v@^hW=", 12, 12);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46~Ah1GUP");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint0);
      assertEquals(12, foreignKeyConstraint0.getDeleteRule());
      assertEquals(12, foreignKeyConstraint0.getUpdateRule());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-2677), (-2677));
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      Config config0 = new Config();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      Config config1 = new Config();
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      SqlFormatter sqlFormatter1 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter1);
      SqlFormatter sqlFormatter2 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter1);
      SqlFormatter sqlFormatter3 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter3);
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      config1.setSqlFormatter(sqlFormatter0);
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      SqlFormatter sqlFormatter4 = config1.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      config0.getSqlFormatter();
      config0.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      config1.setSqlFormatter((SqlFormatter) null);
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      config0.setSqlFormatter(sqlFormatter2);
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter11);
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      config1.setSqlFormatter((SqlFormatter) defaultSqlFormatter13);
      config0.setSqlFormatter(sqlFormatter4);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "UTF-8", (-2677), (-2677));
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals((-2677), foreignKeyConstraint1.getUpdateRule());
      assertEquals((-5), int0);
      assertEquals((-2677), foreignKeyConstraint1.getDeleteRule());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6v@^hW=", 12, 12);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46~Ah1GUP");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling5 = new FileSystemHandling();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "46~Ah1GUP", (-167), 12);
      int int0 = foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
      assertEquals(12, foreignKeyConstraint1.getDeleteRule());
      assertEquals(2, int0);
      assertEquals((-167), foreignKeyConstraint1.getUpdateRule());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6v@^hW=", 12, 12);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6v@^hW=");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "46~Ah1GUP");
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      System.setCurrentTimeMillis(0L);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "6v@^hW=", 12, (-167));
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.compareTo(foreignKeyConstraint1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.225175021491882
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "4_7daE+*,A=!`>0nK_O", (-15), 3);
      boolean boolean0 = foreignKeyConstraint0.isNullOnDelete();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 3, (-2076));
      foreignKeyConstraint1.getParentColumns();
      foreignKeyConstraint1.getDeleteRuleDescription();
      boolean boolean1 = foreignKeyConstraint0.isRestrictDelete();
      assertFalse(boolean1 == boolean0);
      
      foreignKeyConstraint1.getDeleteRuleName();
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string1);
      
      int int0 = foreignKeyConstraint1.getDeleteRule();
      assertFalse(foreignKeyConstraint1.isRestrictDelete());
      assertEquals(3, foreignKeyConstraint1.getUpdateRule());
      assertFalse(foreignKeyConstraint1.isNullOnDelete());
      assertEquals((-2076), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3313099562506174
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, " references ", 8, 3);
      boolean boolean0 = foreignKeyConstraint0.isCascadeOnDelete();
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "", 56, (-2076));
      foreignKeyConstraint1.getParentColumns();
      foreignKeyConstraint1.getChildColumns();
      foreignKeyConstraint1.getParentColumns();
      foreignKeyConstraint1.getDeleteRuleDescription();
      boolean boolean1 = foreignKeyConstraint1.isCascadeOnDelete();
      assertFalse(boolean1);
      
      boolean boolean2 = foreignKeyConstraint1.isNullOnDelete();
      assertTrue(boolean2 == boolean0);
      
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string1);
      
      foreignKeyConstraint0.getDeleteRule();
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals(8, foreignKeyConstraint0.getUpdateRule());
      assertEquals("R", string2);
      assertFalse(foreignKeyConstraint0.isNullOnDelete());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0942005731507534
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "$A", 4332, 0);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "$A", (-1910), 0);
      Integer integer0 = new Integer(4332);
      foreignKeyConstraint0.getDeleteRuleAlias();
      Integer integer1 = new Integer(52);
      foreignKeyConstraint1.getDeleteRuleAlias();
      Integer integer2 = new Integer((-1910));
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleDescription();
      foreignKeyConstraint1.getDeleteRuleName();
      foreignKeyConstraint1.getDeleteRuleDescription();
      foreignKeyConstraint1.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleName();
      int int0 = new Integer(0);
      String string0 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Cascade on delete", string0);
      
      boolean boolean0 = foreignKeyConstraint1.isRestrictDelete();
      assertFalse(boolean0);
      
      foreignKeyConstraint1.getDeleteRuleAlias();
      foreignKeyConstraint1.getDeleteRuleAlias();
      foreignKeyConstraint1.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleAlias();
      foreignKeyConstraint0.getDeleteRuleAlias();
      String string1 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("C", string1);
      
      String string2 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals(4332, foreignKeyConstraint0.getUpdateRule());
      assertEquals("Cascade on delete:\n Deletion of parent deletes child", string2);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", 3, 1043);
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(1043, foreignKeyConstraint0.getDeleteRule());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "Restrict dlete", 8, 9);
      foreignKeyConstraint0.getDeleteRuleName();
      Config config0 = new Config();
      config0.getLogLevel();
      SchemaMeta schemaMeta0 = null;
      try {
        schemaMeta0 = new SchemaMeta(" references ", "-7.\tZQ4ch", "-7.\tZQ4ch");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Specified meta file \" references \" does not exist
         //
         verifyException("net.sourceforge.schemaspy.model.xml.SchemaMeta", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6Q/;4JZonUVP?o?Rnw", 0, 8);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)66;
      byteArray0[3] = (byte) (-106);
      byteArray0[4] = (byte)46;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = foreignKeyConstraint0.getUpdateRule();
      assertEquals(0, int0);
      assertEquals(8, foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "!WncWa]Q", (-1), (-1));
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer integer2 = new Integer(2545);
      foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals((-1), foreignKeyConstraint0.getUpdateRule());
      assertEquals((-1), foreignKeyConstraint0.getDeleteRule());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.078887863030093
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "4_7daE+*,A7!`>0nK_O", 556, 3);
      foreignKeyConstraint0.isRestrictDelete();
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "4_7daE+*,A7!`>0nK_O", 2810, 556);
      String string0 = foreignKeyConstraint0.getDeleteRuleDescription();
      assertEquals("Restrict delete:\n Parent cannot be deleted if children exist", string0);
      
      int int0 = new Integer(2810);
      boolean boolean0 = foreignKeyConstraint0.isRestrictDelete();
      String string1 = foreignKeyConstraint0.getDeleteRuleName();
      assertEquals("Restrict delete", string1);
      
      boolean boolean1 = foreignKeyConstraint1.isRestrictDelete();
      assertFalse(boolean1 == boolean0);
      
      foreignKeyConstraint1.getDeleteRuleAlias();
      foreignKeyConstraint1.getDeleteRuleAlias();
      String string2 = foreignKeyConstraint0.getDeleteRuleAlias();
      assertEquals("R", string2);
      
      foreignKeyConstraint1.getDeleteRuleAlias();
      assertEquals(2810, foreignKeyConstraint1.getUpdateRule());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn0.removeChild(tableColumn1);
      tableColumn0.setType(",L>zDL");
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta1);
      TableColumnMeta tableColumnMeta3 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta3).getComments();
      doReturn((String) null).when(tableColumnMeta3).getDefaultValue();
      doReturn(0).when(tableColumnMeta3).getDigits();
      doReturn((String) null).when(tableColumnMeta3).getId();
      doReturn((String) null).when(tableColumnMeta3).getName();
      doReturn(0).when(tableColumnMeta3).getSize();
      doReturn((String) null).when(tableColumnMeta3).getType();
      doReturn(false).when(tableColumnMeta3).isAutoUpdated();
      doReturn(false).when(tableColumnMeta3).isNullable();
      TableColumn tableColumn3 = new TableColumn((Table) null, tableColumnMeta3);
      tableColumn2.removeParent(tableColumn1);
      tableColumn3.removeChild(tableColumn2);
      tableColumn3.setType("GIz");
      tableColumn2.unlinkChildren();
      tableColumn3.removeChild(tableColumn0);
      tableColumn2.setType((String) null);
      tableColumn2.removeChild(tableColumn1);
      tableColumn3.unlinkParents();
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn3, tableColumn0, 1, 984);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "6Q/;4JZonUVP?o?Rnw", 0, 8);
      ForeignKeyConstraint foreignKeyConstraint1 = new ForeignKeyConstraint((Table) null, "6Q/;4JZonUVP?o?Rnw", 0, 0);
      foreignKeyConstraint1.isCascadeOnDelete();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "6Q/;4JZonUVP?o?Rnw";
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      LinkedList<TableColumn> linkedList1 = new LinkedList<TableColumn>();
      TableColumn tableColumn0 = null;
      try {
        tableColumn0 = new TableColumn((Table) null, (TableColumnMeta) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ForeignKeyConstraint foreignKeyConstraint0 = new ForeignKeyConstraint((Table) null, "", (-2677), (-2677));
      DefaultSqlFormatter defaultSqlFormatter0 = new DefaultSqlFormatter();
      Config config0 = new Config();
      DefaultSqlFormatter defaultSqlFormatter1 = new DefaultSqlFormatter();
      Config config1 = new Config();
      SqlFormatter sqlFormatter0 = config0.getSqlFormatter();
      SqlFormatter sqlFormatter1 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter1);
      SqlFormatter sqlFormatter2 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter1);
      SqlFormatter sqlFormatter3 = config0.getSqlFormatter();
      config0.setSqlFormatter(sqlFormatter3);
      DefaultSqlFormatter defaultSqlFormatter2 = new DefaultSqlFormatter();
      config1.setSqlFormatter(sqlFormatter0);
      DefaultSqlFormatter defaultSqlFormatter3 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter4 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter5 = new DefaultSqlFormatter();
      SqlFormatter sqlFormatter4 = config1.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter6 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter7 = new DefaultSqlFormatter();
      config0.getSqlFormatter();
      config0.getSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter8 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter9 = new DefaultSqlFormatter();
      config1.setSqlFormatter((SqlFormatter) null);
      DefaultSqlFormatter defaultSqlFormatter10 = new DefaultSqlFormatter();
      config0.setSqlFormatter(sqlFormatter2);
      DefaultSqlFormatter defaultSqlFormatter11 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter12 = new DefaultSqlFormatter();
      DefaultSqlFormatter defaultSqlFormatter13 = new DefaultSqlFormatter();
      config0.setSqlFormatter((SqlFormatter) defaultSqlFormatter11);
      DefaultSqlFormatter defaultSqlFormatter14 = new DefaultSqlFormatter();
      config1.setSqlFormatter((SqlFormatter) defaultSqlFormatter13);
      config0.setSqlFormatter(sqlFormatter4);
      // Undeclared exception!
      try { 
        foreignKeyConstraint0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.ForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.053882356878545
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<TableColumn> linkedList0 = new LinkedList<TableColumn>();
      TableColumnMeta tableColumnMeta0 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta0).getComments();
      doReturn((String) null).when(tableColumnMeta0).getDefaultValue();
      doReturn(0).when(tableColumnMeta0).getDigits();
      doReturn((String) null).when(tableColumnMeta0).getId();
      doReturn((String) null).when(tableColumnMeta0).getName();
      doReturn(0).when(tableColumnMeta0).getSize();
      doReturn((String) null).when(tableColumnMeta0).getType();
      doReturn(false).when(tableColumnMeta0).isAutoUpdated();
      doReturn(false).when(tableColumnMeta0).isNullable();
      TableColumn tableColumn0 = new TableColumn((Table) null, tableColumnMeta0);
      TableColumnMeta tableColumnMeta1 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta1).getComments();
      doReturn((String) null).when(tableColumnMeta1).getDefaultValue();
      doReturn(0).when(tableColumnMeta1).getDigits();
      doReturn((String) null).when(tableColumnMeta1).getId();
      doReturn((String) null).when(tableColumnMeta1).getName();
      doReturn(0).when(tableColumnMeta1).getSize();
      doReturn((String) null).when(tableColumnMeta1).getType();
      doReturn(false).when(tableColumnMeta1).isAutoUpdated();
      doReturn(false).when(tableColumnMeta1).isNullable();
      tableColumn0.removeChild(tableColumn0);
      tableColumn0.setType("Iy9/ekN{nSMH");
      tableColumn0.unlinkParents();
      TableColumn tableColumn1 = new TableColumn((Table) null, tableColumnMeta1);
      TableColumnMeta tableColumnMeta2 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta2).getComments();
      doReturn((String) null).when(tableColumnMeta2).getDefaultValue();
      doReturn(0).when(tableColumnMeta2).getDigits();
      doReturn((String) null).when(tableColumnMeta2).getId();
      doReturn((String) null).when(tableColumnMeta2).getName();
      doReturn(0).when(tableColumnMeta2).getSize();
      doReturn((String) null).when(tableColumnMeta2).getType();
      doReturn(false).when(tableColumnMeta2).isAutoUpdated();
      doReturn(false).when(tableColumnMeta2).isNullable();
      TableColumn tableColumn2 = new TableColumn((Table) null, tableColumnMeta2);
      tableColumn2.setShortType("&b%GxVU#6a_U");
      tableColumn1.removeParent(tableColumn0);
      tableColumn2.removeChild(tableColumn1);
      tableColumn2.setType("GIz");
      tableColumn1.unlinkChildren();
      tableColumn2.removeChild(tableColumn0);
      tableColumn1.setType((String) null);
      tableColumn1.removeChild(tableColumn0);
      tableColumn2.unlinkParents();
      tableColumn0.removeParent(tableColumn1);
      tableColumn1.removeChild(tableColumn0);
      TableColumnMeta tableColumnMeta3 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      TableColumnMeta tableColumnMeta4 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta4).getComments();
      doReturn((String) null).when(tableColumnMeta4).getDefaultValue();
      doReturn(0).when(tableColumnMeta4).getDigits();
      doReturn((String) null).when(tableColumnMeta4).getId();
      doReturn((String) null).when(tableColumnMeta4).getName();
      doReturn(0).when(tableColumnMeta4).getSize();
      doReturn((String) null).when(tableColumnMeta4).getType();
      doReturn(false).when(tableColumnMeta4).isAutoUpdated();
      doReturn(false).when(tableColumnMeta4).isNullable();
      TableColumn tableColumn3 = new TableColumn((Table) null, tableColumnMeta4);
      TableColumnMeta tableColumnMeta5 = mock(TableColumnMeta.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(tableColumnMeta5).getComments();
      doReturn((String) null).when(tableColumnMeta5).getDefaultValue();
      doReturn(0).when(tableColumnMeta5).getDigits();
      doReturn((String) null).when(tableColumnMeta5).getId();
      doReturn((String) null).when(tableColumnMeta5).getName();
      doReturn(0).when(tableColumnMeta5).getSize();
      doReturn((String) null).when(tableColumnMeta5).getType();
      doReturn(false).when(tableColumnMeta5).isAutoUpdated();
      doReturn(false).when(tableColumnMeta5).isNullable();
      TableColumn tableColumn4 = new TableColumn((Table) null, tableColumnMeta5);
      tableColumn0.setIsAutoUpdated(true);
      tableColumn4.setIsAutoUpdated(false);
      tableColumn3.setComments((String) null);
      tableColumn3.removeChild(tableColumn0);
      tableColumn4.setComments(".X^`demP)Rj}~Sf-_");
      ForeignKeyConstraint foreignKeyConstraint0 = null;
      try {
        foreignKeyConstraint0 = new ForeignKeyConstraint(tableColumn3, tableColumn2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.schemaspy.model.TableColumn", e);
      }
  }
}
