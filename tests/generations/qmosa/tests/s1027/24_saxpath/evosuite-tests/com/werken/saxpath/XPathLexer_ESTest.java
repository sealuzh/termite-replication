/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 18:52:37 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8395590564123154
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2t}O ZM(h2V");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      String string0 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7503106278312082
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("R@.l");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("R@.l");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("R@.l");
      xPathLexer7.nextToken();
      xPathLexer3.or();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.not();
      xPathLexer6.slashes();
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer1.pipe();
      xPathLexer3.not();
      xPathLexer7.slashes();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer10.plus();
      xPathLexer9.notEquals();
      xPathLexer7.dollar();
      xPathLexer8.equals();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer2.dots();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1426083262386477
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer(">C>j,.o9,Gqs");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.nextToken();
      xPathLexer0.star();
      xPathLexer1.colon();
      xPathLexer1.pipe();
      xPathLexer3.not();
      xPathLexer3.or();
      xPathLexer0.not();
      XPathLexer xPathLexer4 = new XPathLexer(">C>j,.o9,Gqs");
      xPathLexer1.rightParen();
      xPathLexer0.pipe();
      xPathLexer4.not();
      xPathLexer2.identifierOrOperatorName();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.plus();
      xPathLexer2.notEquals();
      xPathLexer4.dollar();
      xPathLexer3.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.dots();
      Token token0 = xPathLexer6.and();
      assertNull(token0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.757193805135603
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer3.or();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer5.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer3.nextToken();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token2 = xPathLexer1.relationalOperator();
      assertEquals("<", token2.getTokenText());
      assertEquals(7, token2.getTokenType());
      
      Token token3 = xPathLexer6.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer4.minus();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.mod();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token4 = xPathLexer2.star();
      assertEquals("<", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer1.or();
      Token token5 = xPathLexer7.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer11 = new XPathLexer("");
      Token token6 = xPathLexer11.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer8.notEquals();
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer12 = new XPathLexer("");
      Token token8 = xPathLexer10.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer8.minus();
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9182642845264621
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";>)KS]-on~j/`(!TD0");
      Token token0 = xPathLexer0.not();
      assertEquals(";", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(9, token1.getTokenType());
      assertEquals(">", token1.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("=B8jrJ>bKTwP`,gp");
      Token token2 = xPathLexer1.doubleColon();
      assertEquals("=B", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(6, token3.getTokenType());
      assertEquals("-", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      assertEquals("8", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("/]6tNFc<");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token6 = xPathLexer3.leftBracket();
      assertEquals("[", token6.getTokenText());
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer1.or();
      Token token7 = xPathLexer1.number();
      assertEquals(30, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer0.dots();
      assertEquals("j", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer4.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer3.slashes();
      assertEquals(" ", token10.getTokenText());
      
      Token token11 = xPathLexer1.identifierOrOperatorName();
      assertEquals("jrJ", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer5.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer4.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.043614870271976
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("af<2+t7)}7:");
      xPathLexer1.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer2.nextToken();
      xPathLexer2.star();
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer4.or();
      xPathLexer3.not();
      xPathLexer0.slashes();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.plus();
      xPathLexer4.nextToken();
      xPathLexer5.dollar();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.equals();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer1.comma();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.at();
      XPathLexer xPathLexer10 = null;
      try {
        xPathLexer10 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0433703359833455
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.not();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("5sH");
      XPathLexer xPathLexer2 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("NW");
      xPathLexer0.or();
      xPathLexer1.not();
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("N", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer2.plus();
      assertEquals("$", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("W", token6.getTokenText());
      
      xPathLexer5.dollar();
      Token token7 = xPathLexer3.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer4.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals("H", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      xPathLexer2.or();
      Token token10 = xPathLexer2.not();
      assertEquals("V", token10.getTokenText());
      assertEquals(23, token10.getTokenType());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.4873533626167958
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(":R@.xlg");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer(":R@.xlg");
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer(":R@.xlg");
      Token token3 = xPathLexer6.nextToken();
      assertEquals(18, token3.getTokenType());
      
      xPathLexer3.or();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.not();
      xPathLexer5.slashes();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer1.pipe();
      Token token4 = xPathLexer3.not();
      assertEquals(":", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer6.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("R", token5.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token6 = xPathLexer9.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer8.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer3.minus();
      assertEquals(6, token8.getTokenType());
      assertEquals("R", token8.getTokenText());
      
      Token token9 = xPathLexer7.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer("");
      Token token10 = xPathLexer10.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer3.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals("@", token11.getTokenText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7985888624935233
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("vKQk2V['NRWF)!Lu");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      xPathLexer0.operatorName();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      xPathLexer4.star();
      XPathLexer xPathLexer5 = new XPathLexer(") (");
      xPathLexer0.or();
      xPathLexer1.not();
      xPathLexer3.slashes();
      XPathLexer xPathLexer6 = new XPathLexer("vKQk2V['NRWF)!Lu");
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.plus();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer(") (");
      xPathLexer0.comma();
      xPathLexer2.at();
      xPathLexer1.colon();
      xPathLexer2.minus();
      xPathLexer0.rightParen();
      Token token0 = xPathLexer5.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.444465599511852
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("vKQk2V['NRWF)!Lu");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("vKQk2V['NRWF)!Lu");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.star();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9747025681553483
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightBracket();
      xPathLexer0.consume((-1682));
      xPathLexer0.doubleColon();
      xPathLexer0.star();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.0239185562845305
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.equals();
      xPathLexer0.literal();
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.consume((-1667));
      xPathLexer0.plus();
      xPathLexer0.setXPath("com.werken.saxpath.Token");
      xPathLexer0.consume((-1667));
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7896814711981812
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      XPathLexer xPathLexer1 = new XPathLexer("bpNr");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.colon();
      XPathLexer xPathLexer6 = new XPathLexer("bpNr");
      xPathLexer6.pipe();
      XPathLexer xPathLexer7 = new XPathLexer("}8x:(m]I. 6_!");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer8.or();
      xPathLexer2.not();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer8.or();
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer5.not();
      xPathLexer0.slashes();
      XPathLexer xPathLexer11 = new XPathLexer();
      xPathLexer8.plus();
      xPathLexer1.dollar();
      xPathLexer2.equals();
      xPathLexer4.relationalOperator();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.322382849788453
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("dDj/");
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer1.or();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Dj", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("BE[@(n`J7PSei", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("}^P");
      XPathLexer xPathLexer6 = new XPathLexer("N?UdYe[inr@wwP");
      Token token6 = xPathLexer0.slashes();
      assertEquals("B", token6.getTokenText());
      
      xPathLexer6.or();
      xPathLexer6.relationalOperator();
      Token token7 = xPathLexer0.pipe();
      assertEquals("E", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer3.plus();
      Token token9 = xPathLexer6.dollar();
      assertEquals("N", token9.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer2.and();
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token11 = xPathLexer4.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer6.minus();
      assertEquals("?", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer4.colon();
      assertEquals(18, token15.getTokenType());
      
      Token token16 = xPathLexer7.nextToken();
      assertEquals((-1), token16.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.1372482177269205
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("]i`N4WYIqJ[(");
      xPathLexer0.or();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer2.or();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("i", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer(" 8Jyv5&HC3z.8Y");
      XPathLexer xPathLexer4 = new XPathLexer("\u0001-4Y");
      Token token2 = xPathLexer2.nextToken();
      assertEquals("4", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer3.or();
      xPathLexer5.not();
      Token token4 = xPathLexer2.slashes();
      assertEquals("w", token4.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("]i`N4WYIqJ[(");
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token5 = xPathLexer7.plus();
      assertEquals("]", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer5.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer7.dollar();
      assertEquals("i", token7.getTokenText());
      
      Token token8 = xPathLexer6.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals("(", token9.getTokenText());
      
      Token token10 = xPathLexer4.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("\u0001", token10.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.or();
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      assertEquals("g", token11.getTokenText());
      
      Token token12 = xPathLexer1.at();
      assertEquals("`", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer2.nextToken();
      assertEquals((-1), token13.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.059072942422339
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("[", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("n`", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("7P", token6.getTokenText());
      
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.setPreviousToken(token5);
      Token token8 = xPathLexer2.not();
      assertEquals("4", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Sei", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("w", token10.getTokenText());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer1.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer2.slashes();
      assertEquals("g", token15.getTokenText());
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1590915553857424
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.consume();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("k_ud.A.zq", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.mod();
      XPathLexer xPathLexer2 = new XPathLexer("&(k_ud.A.zq=YFi(");
      Token token2 = xPathLexer2.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer2.operatorName();
      Token token3 = xPathLexer2.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token4 = xPathLexer3.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      xPathLexer1.rightParen();
      XPathLexer xPathLexer4 = new XPathLexer("&(k_ud.A.zq=YFi(");
      Token token5 = xPathLexer4.dollar();
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer("&(k_ud.A.zq=YFi(");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer3.rightParen();
      assertEquals(2, token6.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("spi.|9=G:");
      Token token7 = xPathLexer2.colon();
      assertEquals("k", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      xPathLexer5.literal();
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token9 = xPathLexer10.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer5.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer8.nextToken();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9473607357838643
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer3.or();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token1 = xPathLexer5.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer3.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer3.nextToken();
      assertEquals(7, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer4.or();
      XPathLexer xPathLexer7 = new XPathLexer("8(4nfsO)}7SgOB");
      Token token4 = xPathLexer7.not();
      assertEquals("8", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("|}f{xb9b<5j(,");
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.plus();
      Token token6 = xPathLexer8.nextToken();
      assertEquals(17, token6.getTokenType());
      assertEquals("|", token6.getTokenText());
      
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("<", token7.getTokenText());
      
      XPathLexer xPathLexer10 = new XPathLexer();
      xPathLexer9.plus();
      xPathLexer8.nextToken();
      Token token8 = xPathLexer9.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer11 = new XPathLexer("rq");
      Token token9 = xPathLexer6.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("G", token9.getTokenText());
      
      Token token10 = xPathLexer3.number();
      assertEquals("", token10.getTokenText());
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer10.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer9.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer1.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("G", token13.getTokenText());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.823277828694484
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals("(", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("k", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer(" Zp>~R@e)G`{");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("Zp", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      String string0 = token4.toString();
      assertEquals("[ (11) ()", string0);
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("d.", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(">", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("Q(^}Dq?1u f}$ogJ");
      XPathLexer xPathLexer3 = new XPathLexer("Q(^}Dq?1u f}$ogJ");
      Token token7 = xPathLexer3.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("Q", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("IVX,b3$k7'#");
      xPathLexer1.or();
      Token token8 = xPathLexer2.notEquals();
      assertEquals("Q(", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      xPathLexer7.identifier();
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer2.nextToken();
      assertEquals("^}Dq?1u f}$ogJ", token9.getTokenText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.899065986133745
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("<q", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("xV", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("|", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("/TonM]i[");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer3.mod();
      Token token4 = xPathLexer0.not();
      assertEquals("+", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer2.or();
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("/TonM]i[");
      Token token5 = xPathLexer5.not();
      assertEquals("/", token5.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("B^V$7x7");
      xPathLexer6.relationalOperator();
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("G", token6.getTokenText());
      
      Token token7 = xPathLexer5.dollar();
      assertEquals("T", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("/TonM]i[");
      Token token8 = xPathLexer7.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("B^V$7x7");
      Token token10 = xPathLexer1.number();
      assertEquals(30, token10.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6892217458709582
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.equals();
      xPathLexer2.or();
      Token token0 = xPathLexer2.plus();
      assertEquals("G", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer2.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("<q", token1.getTokenText());
      
      Token token2 = xPathLexer2.nextToken();
      assertEquals("xV", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer5 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token3 = xPathLexer4.star();
      assertEquals("G", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("D~$s1jh;H|");
      xPathLexer0.or();
      Token token4 = xPathLexer5.not();
      assertEquals("G", token4.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.slashes();
      XPathLexer xPathLexer9 = new XPathLexer("#,2N{w$s@)5ex}6VM");
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token5 = xPathLexer4.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token6 = xPathLexer11.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer5.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("<", token7.getTokenText());
      
      Token token8 = xPathLexer6.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer7.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("D", token9.getTokenText());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("G", token11.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2332264546874456
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token0 = xPathLexer1.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.mod();
      XPathLexer xPathLexer2 = new XPathLexer("?|CpuPh>d");
      Token token3 = xPathLexer2.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.whitespace();
      XPathLexer xPathLexer4 = new XPathLexer("7129r0-g%\":__|nh");
      xPathLexer1.star();
      Token token4 = xPathLexer1.literal();
      assertNull(token4);
      
      xPathLexer4.or();
      Token token5 = xPathLexer4.not();
      assertEquals("7", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer1.dollar();
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("d", token9.getTokenText());
      
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      xPathLexer5.whitespace();
      Token token13 = xPathLexer4.star();
      assertEquals(20, token13.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.378826508933866
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer3.or();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.doubleColon();
      String string0 = "";
      String string1 = null;
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.103956555138537
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N?UdYe[inr@wwP");
      Token token0 = xPathLexer0.at();
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("?UdYe[inr@wwP", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("N?UdYe[inr@wwP");
      Token token2 = xPathLexer0.identifier();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("N?", token3.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.plus();
      XPathLexer xPathLexer4 = new XPathLexer("gDy;9q`R@");
      xPathLexer1.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer6 = new XPathLexer("cvBDK1Z");
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("U", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("B");
      Token token7 = xPathLexer7.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("B", token7.getTokenText());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("d", token8.getTokenText());
      
      Token token9 = xPathLexer5.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer7.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer6.colon();
      assertEquals("c", token11.getTokenText());
      
      Token token12 = xPathLexer6.minus();
      assertEquals("v", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.980918092272777
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("6M-0[O{_;Rd-x'");
      Token token2 = xPathLexer1.dollar();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("(&N");
      xPathLexer2.mod();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer2.nextToken();
      assertEquals("(", token3.getTokenText());
      
      xPathLexer1.slashes();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (26) (6)", string0);
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("`J", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(")");
      xPathLexer3.operatorName();
      Token token5 = xPathLexer1.pipe();
      assertEquals("-", token5.getTokenText());
      
      xPathLexer0.setPreviousToken((Token) null);
      Token token6 = xPathLexer1.number();
      assertEquals("0", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer2.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("&", token7.getTokenText());
      
      Token token8 = xPathLexer1.not();
      assertEquals("[", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer2.dollar();
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      assertEquals("7PSei", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("LWpe)jOU`>wKW");
      Token token11 = xPathLexer5.colon();
      assertEquals("L", token11.getTokenText());
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7402108678115726
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      token0.toString();
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume((-1));
      XPathLexer xPathLexer2 = new XPathLexer("k9ct8EUG5");
      // Undeclared exception!
      try { 
        xPathLexer1.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.6658029876112943
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("k52$s${mwn<\"");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("k", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.number();
      Token token1 = xPathLexer1.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("5", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer0.at();
      assertEquals("2", token3.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("k52$s${mwn<\"");
      Token token4 = xPathLexer5.dollar();
      assertEquals("k", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token5);
      
      Token token6 = xPathLexer4.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token7 = xPathLexer6.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer6.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer5.number();
      assertEquals("52", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9566126853004433
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer2.setPreviousToken(token0);
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.equals();
      xPathLexer3.rightParen();
      xPathLexer0.getXPath();
      xPathLexer3.consume((-227));
      // Undeclared exception!
      try { 
        xPathLexer3.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0081067709715295
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wNBE[n(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("E[", token0.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("4wNBE[n(n`J7PSei");
      Token token1 = xPathLexer0.nextToken();
      assertEquals("n(n`J7PSei", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("4wNBE[n(n`J7PSei");
      xPathLexer0.or();
      Token token2 = xPathLexer2.not();
      assertEquals("4", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("n", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("9+Vfh,j*Q .");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer4.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals("9", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      xPathLexer3.dollar();
      Token token7 = xPathLexer3.dollar();
      assertEquals("V", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("4", token8.getTokenText());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals("(", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals("n", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7895684382782258
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2t}O ZM(h2V");
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("");
      String string0 = null;
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7184106924994513
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.colon();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.currentPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer(" Zp>~R@e)G`{");
      xPathLexer1.nextToken();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.29548604543688
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.star();
      Token token0 = xPathLexer0.star();
      assertEquals("w", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("6$", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("V3uda", token2.getTokenText());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals("]", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer("~W");
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals("m", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("~W");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer4.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer3.comma();
      assertEquals(32, token12.getTokenType());
      assertEquals("~", token12.getTokenText());
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer4.colon();
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer1.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.095643138447815
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals("4", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.plus();
      assertEquals("[", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(16, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("(", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("n`", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("J7PSei", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer0.or();
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals("o", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      xPathLexer1.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer4.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer3.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer3.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8629213113151164
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("MoT");
      xPathLexer1.consume();
      Token token1 = xPathLexer1.at();
      xPathLexer1.or();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("T", token2.getTokenText());
      
      xPathLexer1.mod();
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer1.operatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token1);
      assertEquals("o", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("xgk}5}^pla38zEUE?s");
      Token token6 = xPathLexer2.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer3.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("x", token7.getTokenText());
      
      Token token8 = xPathLexer3.dots();
      assertEquals("g", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("MoT");
      XPathLexer xPathLexer5 = new XPathLexer("PI^dU:+&}1Ca}4[]J$");
      xPathLexer0.getXPath();
      xPathLexer4.consume((-1015));
      xPathLexer1.identifier();
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9961290326502166
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.dots();
      assertEquals("4", token0.getTokenText());
      assertEquals(13, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer1.setXPath("jD%,B4|yZ*M9^");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("gBE", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.star();
      assertEquals("@", token4.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer1.at();
      xPathLexer1.star();
      Token token5 = xPathLexer1.dollar();
      assertEquals("B", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("=m]lNQcKOZm?");
      Token token6 = xPathLexer1.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("4", token6.getTokenText());
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals("|", token7.getTokenText());
      assertEquals(3, token7.getTokenType());
      
      xPathLexer2.mod();
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("y", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      xPathLexer2.relationalOperator();
      xPathLexer4.operatorName();
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer2.leftParen();
      assertEquals("m", token10.getTokenText());
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer2.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("]", token11.getTokenText());
      
      xPathLexer1.setXPath(") (");
      XPathLexer xPathLexer5 = new XPathLexer("8Z1'Uz");
      Token token12 = xPathLexer2.pipe();
      assertEquals("l", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.0451305289648123
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("(", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.comma();
      Token token3 = xPathLexer0.dollar();
      assertEquals("_", token3.getTokenText());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("u", token4.getTokenText());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals("A.", token6.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("&(k_ud.A.zq=YFi(");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.or();
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("&", token8.getTokenText());
      
      xPathLexer0.slashes();
      Token token9 = xPathLexer2.slashes();
      assertEquals(11, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer2.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals("k_", token11.getTokenText());
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.dollar();
      assertEquals(26, token13.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token14 = xPathLexer7.literal();
      assertNull(token14);
      
      Token token15 = xPathLexer1.colon();
      assertEquals(18, token15.getTokenType());
      
      Token token16 = xPathLexer4.rightBracket();
      assertEquals(4, token16.getTokenType());
      
      Token token17 = xPathLexer4.comma();
      assertEquals(32, token17.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.5716721869793404
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.rightParen();
      assertEquals("k", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("_u", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.or();
      Token token5 = xPathLexer4.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer4.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer4.leftParen();
      assertEquals(1, token9.getTokenType());
      
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer4.rightParen();
      assertEquals(2, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      XPathLexer xPathLexer6 = new XPathLexer("[ (");
      Token token12 = xPathLexer4.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer5.whitespace();
      assertEquals((-2), token13.getTokenType());
      assertEquals("", token13.getTokenText());
      
      Token token14 = xPathLexer3.at();
      assertEquals(16, token14.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6708773041008704
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.175805986925925
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("BE", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(3, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token2 = xPathLexer2.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("4", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer2.or();
      xPathLexer3.not();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer2.leftBracket();
      assertEquals("w", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token5 = xPathLexer4.colon();
      assertEquals("4", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("Y;A<b]|=AB3fu");
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
      
      xPathLexer6.nextToken();
      Token token7 = xPathLexer6.dollar();
      assertEquals(";", token7.getTokenText());
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer5.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("F?D");
      Token token9 = xPathLexer7.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("F", token9.getTokenText());
      
      Token token10 = xPathLexer3.comma();
      assertEquals("w", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer4.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("w", token11.getTokenText());
      
      Token token12 = xPathLexer5.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer3.minus();
      assertEquals("g", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer6.nextToken();
      assertEquals("A<b]|=AB3fu", token14.getTokenText());
      
      Token token15 = xPathLexer7.not();
      assertEquals(23, token15.getTokenType());
      assertEquals("?", token15.getTokenText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.8310225932095805
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(")K^!~.Cuam<X0");
      Token token0 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.and();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.minus();
      xPathLexer0.consume((-3955));
      XPathLexer xPathLexer1 = new XPathLexer(")K^!~.Cuam<X0");
      xPathLexer1.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8842802123171847
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.relationalOperator();
      xPathLexer0.consume((-3021));
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.091201282756392
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("[", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("af<2+t7)}7:");
      Token token2 = xPathLexer1.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("af", token2.getTokenText());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("(n", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(7, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer2.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer4.or();
      Token token7 = xPathLexer3.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("`", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer6.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      assertEquals("J7PSei", token10.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      Token token11 = xPathLexer7.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      assertEquals(" ", token12.getTokenText());
      
      Token token13 = xPathLexer1.colon();
      assertEquals("2", token13.getTokenText());
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer5.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer2.rightParen();
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0388528453204398
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("~W");
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("~W", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer1.and();
      xPathLexer0.number();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.star();
      assertEquals(20, token5.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer0.operatorName();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer0.rightParen();
      assertEquals("V", token6.getTokenText());
      assertEquals(2, token6.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer4 = new XPathLexer("~W");
      xPathLexer1.or();
      Token token7 = xPathLexer4.not();
      assertEquals("~", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer4.dollar();
      XPathLexer xPathLexer5 = new XPathLexer("7-I:=P\")!ok+}`");
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("3", token10.getTokenText());
      
      Token token11 = xPathLexer3.slashes();
      assertEquals("c", token11.getTokenText());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7209517778076706
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.literal();
      assertEquals("k_ud.A.zq=YFi", token2.getTokenText());
      assertNotNull(token2);
      assertEquals(27, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(")");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.notEquals();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(")", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("7=0++rZ8hoK0+%;aOJw");
      XPathLexer xPathLexer4 = new XPathLexer(")");
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("7=0++rZ8hoK0+%;aOJw");
      xPathLexer3.or();
      xPathLexer2.pipe();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer6.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer1.notEquals();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token7 = xPathLexer4.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token8 = xPathLexer9.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer7.relationalOperator();
      Token token9 = xPathLexer8.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer7.notEquals();
      assertEquals("7=", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6862774233194473
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.doubleColon();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.not();
      xPathLexer2.slashes();
      xPathLexer0.plus();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.207541878720143
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.notEquals();
      assertEquals("Vh", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("]", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(",", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Hy97V$b1TaVO>&/+");
      xPathLexer1.setPreviousToken(token2);
      assertEquals("(k", token2.getTokenText());
      
      xPathLexer1.setXPath("A1JZNXhs\"Bc");
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer1.identifier();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7991283576470187
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.equals();
      xPathLexer2.or();
      Token token1 = xPathLexer2.plus();
      assertEquals("G", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer2.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("<q", token2.getTokenText());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals("xV", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer5 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer1.star();
      assertEquals("G", token4.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("\"s_C~c9");
      xPathLexer5.or();
      Token token5 = xPathLexer2.not();
      assertEquals("|", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("<", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token7 = xPathLexer8.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer6.nextToken();
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer7.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer5.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals("G", token12.getTokenText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.579825068105
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("7=0++rZ8hoK0+%;aOJw");
      XPathLexer xPathLexer4 = new XPathLexer(")");
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("7=0++rZ8hoK0+%;aOJw");
      xPathLexer3.or();
      xPathLexer2.pipe();
      xPathLexer0.not();
      xPathLexer6.slashes();
      xPathLexer2.plus();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer4.pipe();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.doubleColon();
      Token token0 = xPathLexer7.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.1131874020282453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals("4", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("wgBE", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("af<2+t7)}7:");
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("af", token3.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      xPathLexer1.or();
      Token token5 = xPathLexer0.not();
      assertEquals("`", token5.getTokenText());
      
      Token token6 = xPathLexer1.pipe();
      assertEquals("<", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      xPathLexer1.doubleColon();
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.equals();
      xPathLexer2.setPreviousToken(token8);
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer3.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer4.slashes();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      assertEquals("7", token11.getTokenText());
      
      Token token12 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer2.doubleColon();
      assertEquals(19, token14.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token15 = xPathLexer5.colon();
      assertEquals(18, token15.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.7381830131097167
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      xPathLexer1.plus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer2.or();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer5 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      xPathLexer1.star();
      XPathLexer xPathLexer6 = new XPathLexer("\"s_C~c9");
      xPathLexer5.or();
      xPathLexer2.not();
      xPathLexer1.slashes();
      xPathLexer0.or();
      xPathLexer2.not();
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer("0C!");
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer9.notEquals();
      XPathLexer xPathLexer10 = new XPathLexer("J-pH5-");
      xPathLexer10.consume((-4124));
      xPathLexer7.dollar();
      xPathLexer4.equals();
      // Undeclared exception!
      try { 
        xPathLexer10.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5951122827630615
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.not();
      xPathLexer1.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.plus();
      xPathLexer2.nextToken();
      xPathLexer1.dollar();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer0.dots();
      xPathLexer4.pipe();
      xPathLexer2.or();
      XPathLexer xPathLexer6 = null;
      try {
        xPathLexer6 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.077734299088855
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";o)KS]-on~j/`(!TD0", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(";", token1.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("=B8jrJ>bKTwP`,gp");
      Token token2 = xPathLexer1.doubleColon();
      assertEquals("=B", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("]", token3.getTokenText());
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("/]6tNFc<");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token4 = xPathLexer3.leftBracket();
      assertEquals("[", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer1.or();
      xPathLexer2.star();
      Token token5 = xPathLexer1.star();
      assertEquals("8", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      xPathLexer2.not();
      Token token6 = xPathLexer1.slashes();
      assertEquals("j", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      Token token7 = xPathLexer1.nextToken();
      assertEquals(15, token7.getTokenType());
      assertEquals("rJ", token7.getTokenText());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals("t", token8.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer5.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer5.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer1.dots();
      assertEquals(">", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer5.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer3.and();
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      assertEquals("on", token13.getTokenText());
      
      Token token14 = xPathLexer4.minus();
      assertEquals(";", token14.getTokenText());
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer2.not();
      assertEquals(23, token15.getTokenType());
      assertEquals("N", token15.getTokenText());
      
      Token token16 = xPathLexer5.equals();
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.9183831912459757
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer0.doubleColon();
      xPathLexer0.endPosition();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("h\u0005yOT |mv_MU");
      xPathLexer1.nextToken();
      xPathLexer1.slashes();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("O?#e]S&pl");
      xPathLexer2.rightBracket();
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      xPathLexer3.operatorName();
      xPathLexer3.pipe();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer3.number();
      xPathLexer2.dots();
      XPathLexer xPathLexer4 = new XPathLexer("");
      int int0 = (-1582);
      xPathLexer2.consume((-1582));
      // Undeclared exception!
      try { 
        xPathLexer2.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9955741564634761
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("[", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("@", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightBracket();
      String string0 = token3.toString();
      assertEquals("[ (4) (`)", string0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("J", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token5);
      char char0 = xPathLexer0.LA(0);
      assertEquals('7', char0);
      
      xPathLexer0.getXPath();
      Token token6 = xPathLexer0.leftParen();
      assertEquals("P", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals("7", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.consume();
      Token token8 = xPathLexer0.at();
      assertEquals("e", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.identifier();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.8808713955556904
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("`J", token4.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token5 = xPathLexer1.nextToken();
      assertEquals(30, token5.getTokenType());
      assertEquals("4", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("c");
      xPathLexer1.or();
      Token token6 = xPathLexer2.not();
      assertEquals("c", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("P", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer(",5W;g#x6^m)[%7!b");
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals(",", token8.getTokenText());
      
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer3.dollar();
      Token token10 = xPathLexer2.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("W", token11.getTokenText());
      
      Token token12 = xPathLexer3.pipe();
      assertEquals(";", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.967767711480038
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("E[", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.or();
      Token token4 = xPathLexer2.not();
      assertEquals("4", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("n", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("`J7PSei", token6.getTokenText());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals("4", token7.getTokenText());
      
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("g", token9.getTokenText());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.643368283510255
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("af<2+t7)}7:");
      xPathLexer0.doubleColon();
      xPathLexer1.operatorName();
      xPathLexer1.pipe();
      xPathLexer1.leftBracket();
      xPathLexer0.or();
      xPathLexer1.not();
      xPathLexer0.pipe();
      String string0 = "nPFD6^]vT)*@Y@A";
      XPathLexer xPathLexer2 = new XPathLexer("nPFD6^]vT)*@Y@A");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.848316989206716
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("a>smWk/U;9");
      xPathLexer0.number();
      xPathLexer0.and();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.415942633506724
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("ud.A.zq", token4.getTokenText());
      
      xPathLexer0.slashes();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (19) (k_)", string0);
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("Y", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("(^Qa&V(S_QT&'J2,");
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer1.setPreviousToken(token1);
      Token token8 = xPathLexer1.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.or();
      Token token11 = xPathLexer1.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token14 = xPathLexer2.colon();
      assertEquals(18, token14.getTokenType());
      assertEquals("c", token14.getTokenText());
      
      Token token15 = xPathLexer1.notEquals();
      assertEquals("a&", token15.getTokenText());
      assertEquals(22, token15.getTokenType());
      
      xPathLexer3.at();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token16 = xPathLexer4.star();
      assertEquals(20, token16.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.054107606755906
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer0.slashes();
      XPathLexer xPathLexer4 = new XPathLexer("|@bNKFxj9 \"Nibjhzv");
      xPathLexer4.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("JyH/ ");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.at();
      XPathLexer xPathLexer7 = new XPathLexer("&-");
      xPathLexer2.plus();
      XPathLexer xPathLexer8 = new XPathLexer("=nydL9rSP[= k");
      xPathLexer5.nextToken();
      xPathLexer2.dollar();
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer9.dollar();
      xPathLexer1.dots();
      xPathLexer2.pipe();
      Token token0 = xPathLexer8.or();
      assertNull(token0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.1012885207599115
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("-'kqP*");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("-", token2.getTokenText());
      
      xPathLexer1.or();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("'k", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("gBE[@(n`J7PSei", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer2.or();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("*", token6.getTokenText());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer6.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer3.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer5.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer("D");
      Token token12 = xPathLexer2.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8593826074146897
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$3uda]UJsQ)C]M");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      assertEquals("6", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("$", token2.getTokenText());
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.not();
      assertEquals("u", token5.getTokenText());
      
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.not();
      XPathLexer xPathLexer5 = new XPathLexer(">C>j,.o9,Gqs");
      Token token6 = xPathLexer1.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals("d", token7.getTokenText());
      
      Token token8 = xPathLexer3.not();
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token9 = xPathLexer6.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      assertNotNull(token9);
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer(">C>j,.o9,Gqs");
      Token token10 = xPathLexer8.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals(">", token10.getTokenText());
      
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals("a]", token11.getTokenText());
      
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      
      xPathLexer3.dollar();
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer6.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer1.pipe();
      assertEquals(17, token15.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1712050654878357
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.pipe();
      xPathLexer1.setPreviousToken(token4);
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer2.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1000425230653166
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.doubleColon();
      xPathLexer3.operatorName();
      Token token0 = xPathLexer2.pipe();
      token0.toString();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer1.dots();
      xPathLexer0.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.slashes();
      xPathLexer4.dollar();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer4.equals();
      xPathLexer2.at();
      xPathLexer1.number();
      XPathLexer xPathLexer5 = new XPathLexer("NCf5:57Wp1yR{k");
      xPathLexer0.minus();
      xPathLexer2.plus();
      Token token1 = xPathLexer3.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.1429096150505953
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("G", token0.getTokenText());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("<q", token1.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("/TonM]i[");
      Token token2 = xPathLexer0.nextToken();
      assertEquals(5, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.slashes();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer1.operatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token4 = xPathLexer4.pipe();
      xPathLexer4.setPreviousToken(token4);
      assertEquals("G", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals(13, token6.getTokenType());
      assertEquals("/", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer4.slashes();
      assertEquals("<", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("e\"");
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      assertEquals("6IYa", token10.getTokenText());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("#%3>+spk@");
      Token token12 = xPathLexer2.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer4.notEquals();
      assertEquals("qx", token13.getTokenText());
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.021367738017542
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer1.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer2.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer2.or();
      Token token1 = xPathLexer3.not();
      assertEquals("4", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer2.leftBracket();
      assertEquals("w", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token4 = xPathLexer4.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("4", token4.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("9+Vfh,j*Q .");
      xPathLexer6.plus();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer("9+Vfh,j*Q .");
      Token token5 = xPathLexer7.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("9", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("@", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer3.dollar();
      Token token7 = xPathLexer6.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("V", token7.getTokenText());
      
      Token token8 = xPathLexer3.dots();
      assertEquals("g", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer7.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("+", token9.getTokenText());
      
      Token token10 = xPathLexer6.doubleColon();
      assertEquals("fh", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7799497738519825
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S6");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("S6", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer2.slashes();
      assertEquals(")", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer2.equals();
      assertEquals(" ", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer2.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("(", token10.getTokenText());
      
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.1588099504381946
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("[", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("@", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("n`", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("J7PSei", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("el;FCx1</_w");
      xPathLexer1.nextToken();
      Token token6 = xPathLexer1.slashes();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("el;FCx1</_w");
      xPathLexer2.setPreviousToken(token6);
      assertEquals(";", token6.getTokenText());
      
      Token token8 = xPathLexer1.number();
      assertEquals("", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer2.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("e", token9.getTokenText());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer2.notEquals();
      assertEquals(22, token12.getTokenType());
      assertEquals("l;", token12.getTokenText());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.9425860060097606
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("&(k_ud.A.zq=YFi(");
      XPathLexer xPathLexer3 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.or();
      xPathLexer2.not();
      xPathLexer3.slashes();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0694198909702775
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals("(", token1.getTokenText());
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("k", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      assertEquals("_", token3.getTokenText());
      
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.rightBracket();
      String string0 = token4.toString();
      assertEquals("[ (4) ()", string0);
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(".A", token6.getTokenText());
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.LA(0);
      xPathLexer0.getXPath();
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("q", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals("=Y", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      assertEquals("Fi", token9.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.number();
      assertEquals(30, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.088953450099103
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer1.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("BE[@(n`J7PSei", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      assertEquals(3, token2.getTokenType());
      
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(">~UJ={ZEWs=Y27.");
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token5 = xPathLexer2.nextToken();
      assertEquals(9, token5.getTokenType());
      assertEquals(">", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.or();
      Token token6 = xPathLexer3.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("4", token6.getTokenText());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token8 = xPathLexer5.star();
      assertEquals("4", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer(">~UJ={ZEWs=Y27.");
      Token token9 = xPathLexer0.plus();
      assertEquals("(", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      xPathLexer4.nextToken();
      xPathLexer4.dollar();
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer4.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.pipe();
      assertEquals("n", token12.getTokenText());
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9476269979960623
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.dollar();
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("wg", token1.getTokenText());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(16, int0);
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals("BE", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("n", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer0.not();
      assertEquals("J", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals("S", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token12 = xPathLexer4.colon();
      assertEquals("4", token12.getTokenText());
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals("e", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.1687086789502694
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("gBE[@(n`J7PSei", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("g", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("BE", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(3, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("@", token7.getTokenText());
      
      Token token8 = xPathLexer1.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("(", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals("n", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("4", token11.getTokenText());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals("`", token13.getTokenText());
      
      Token token14 = xPathLexer3.pipe();
      assertEquals("w", token14.getTokenText());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.4741039163999754
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.consume((-3955));
      xPathLexer0.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7168187360229377
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N?UdYe[inr@wwP");
      Token token0 = xPathLexer0.at();
      assertEquals("N", token0.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("N?UdYe[inr@wwP");
      Token token1 = xPathLexer1.doubleColon();
      assertEquals("N?", token1.getTokenText());
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer1.nextToken();
      assertEquals("UdYe", token2.getTokenText());
      
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("N?UdYe[inr@wwP");
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token3 = xPathLexer2.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals("?", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("N?UdYe[inr@wwP");
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token5 = xPathLexer5.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer5.slashes();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer4.plus();
      assertEquals("N", token6.getTokenText());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer6.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer2.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer2.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("d", token11.getTokenText());
      
      Token token12 = xPathLexer3.equals();
      assertEquals(21, token12.getTokenType());
      
      xPathLexer4.at();
      Token token13 = xPathLexer2.colon();
      assertEquals(18, token13.getTokenType());
      assertEquals("Y", token13.getTokenText());
      
      Token token14 = xPathLexer8.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7684469688635067
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("3SWw", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.consume();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer1.nextToken();
      Token token3 = xPathLexer1.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      Token token4 = xPathLexer1.doubleColon();
      assertEquals("3S", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer1.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer4.or();
      Token token5 = xPathLexer3.notEquals();
      assertEquals("-c", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("-c3SWw(k+Vh],");
      Token token6 = xPathLexer8.identifier();
      assertEquals(15, token6.getTokenType());
      assertEquals("-c3SWw", token6.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer(") (");
      Token token7 = xPathLexer7.nextToken();
      assertEquals("-", token7.getTokenText());
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("]", token8.getTokenText());
      
      Token token9 = xPathLexer9.rightBracket();
      assertEquals(4, token9.getTokenType());
      assertEquals(")", token9.getTokenText());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9424664192661911
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer1.notEquals();
      assertEquals("co", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token4 = xPathLexer1.nextToken();
      assertEquals("m.werken.saxpath.XPathLexer", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("V", token5.getTokenText());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer1.operatorName();
      Token token7 = xPathLexer3.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.div();
      XPathLexer xPathLexer5 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.or();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer3.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer4.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer2.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer("-c3SWw(k+Vh],");
      Token token12 = xPathLexer4.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1542771599077577
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals("4", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("g", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.dollar();
      xPathLexer0.currentPosition();
      Token token4 = xPathLexer0.notEquals();
      assertEquals("E[", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("`okBR~VYOv,t]");
      Token token5 = xPathLexer1.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer1.slashes();
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("ok", token6.getTokenText());
      
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals("B", token7.getTokenText());
      
      xPathLexer1.operatorName();
      xPathLexer0.equals();
      xPathLexer1.setPreviousToken(token3);
      xPathLexer1.star();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("(", token8.getTokenText());
      
      xPathLexer1.not();
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token10 = xPathLexer1.nextToken();
      assertEquals("YOv", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dollar();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("Fx|g");
      Token token11 = xPathLexer4.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("F", token11.getTokenText());
      
      Token token12 = xPathLexer2.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer1.and();
      Token token13 = xPathLexer3.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer0.minus();
      assertEquals("n", token14.getTokenText());
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer4.not();
      assertEquals("x", token15.getTokenText());
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer4.equals();
      assertEquals(21, token16.getTokenType());
      assertEquals("|", token16.getTokenText());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.9578388539141551
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer2.or();
      Token token1 = xPathLexer2.plus();
      assertEquals("G", token1.getTokenText());
      
      xPathLexer1.or();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer4 = new XPathLexer("dartw*/hZ4}uc5cApF-");
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer5.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer3.or();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer5.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("\"s_C~c9");
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token7 = xPathLexer6.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.nextToken();
      assertEquals("qxV", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      xPathLexer1.dollar();
      Token token9 = xPathLexer4.dollar();
      assertEquals("*", token9.getTokenText());
      
      xPathLexer8.or();
      Token token10 = xPathLexer8.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("<", token11.getTokenText());
      
      Token token12 = xPathLexer4.dots();
      assertEquals("/", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.7863037061851617
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer("&(k_ud.A.zq=YFi(");
      Token token0 = xPathLexer3.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("&(", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("(", token1.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer("p0#NA74v.");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token2 = xPathLexer3.star();
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer6.or();
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer3.slashes();
      assertEquals("_", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("k", token5.getTokenText());
      
      Token token6 = xPathLexer3.nextToken();
      assertEquals("ud.A.zq", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      assertEquals("_", token7.getTokenText());
      
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer4.colon();
      assertEquals("&", token9.getTokenText());
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer3.minus();
      assertEquals("=", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.9815320327605013
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("vKQk2V['NRWF)!Lu");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer2.or();
      xPathLexer1.doubleColon();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("|<=X`_");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("*7.,9A$-");
      xPathLexer1.or();
      xPathLexer3.not();
      xPathLexer2.slashes();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("9+Vfh,j*Q .");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer0.plus();
      xPathLexer2.nextToken();
      xPathLexer5.dollar();
      xPathLexer2.pipe();
      XPathLexer xPathLexer8 = new XPathLexer("*7.,9A$-");
      xPathLexer7.comma();
      XPathLexer xPathLexer9 = null;
      try {
        xPathLexer9 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.6702523552800335
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.not();
      xPathLexer0.slashes();
      XPathLexer xPathLexer4 = new XPathLexer("|@bNKFxj9 \"Nibjhzv");
      xPathLexer4.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("JyH/ ");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("&-");
      xPathLexer2.plus();
      XPathLexer xPathLexer8 = new XPathLexer("=nydL9rSP[= k");
      xPathLexer8.nextToken();
      xPathLexer3.dollar();
      XPathLexer xPathLexer9 = new XPathLexer("");
      xPathLexer5.dollar();
      xPathLexer7.pipe();
      Token token0 = xPathLexer5.and();
      assertNull(token0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.0164521815631153
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.literal();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3928));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.221069236729976
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.yerken.saBpath.XPathLexer");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.pipe();
      assertEquals(17, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token1 = xPathLexer4.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token2);
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("com.yerken.saBpath.XPathLexer");
      Token token3 = xPathLexer5.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("co", token3.getTokenText());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.6907783278797992
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.nextToken();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.or();
      Token token0 = xPathLexer2.nextToken();
      assertEquals("com.werken.saxpath.Token", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token1 = xPathLexer4.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer4.nextToken();
      Token token2 = xPathLexer5.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token3 = xPathLexer5.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer5.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("4o");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.nextToken();
      xPathLexer3.or();
      xPathLexer4.not();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token5 = xPathLexer5.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("&", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer11 = new XPathLexer();
      Token token7 = xPathLexer10.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer7.dollar();
      assertEquals("4", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer4.equals();
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.0652395619406905
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("k_ud.A.zq", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer0.colon();
      assertEquals("F", token4.getTokenText());
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("i", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("&(k_ud.A.zq=YFi(");
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("{J1c");
      Token token6 = xPathLexer5.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer3.or();
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer5.not();
      assertEquals("{", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.or();
      XPathLexer xPathLexer7 = new XPathLexer("&(k_ud.A.zq=YFi(");
      XPathLexer xPathLexer8 = new XPathLexer("hb");
      Token token9 = xPathLexer7.notEquals();
      assertEquals("&(", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("hb");
      Token token10 = xPathLexer9.dollar();
      assertEquals("h", token10.getTokenText());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer("{J1c");
      Token token12 = xPathLexer10.dots();
      assertEquals(13, token12.getTokenType());
      assertEquals("{", token12.getTokenText());
      
      Token token13 = xPathLexer6.dollar();
      assertEquals(26, token13.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.92418257358435
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("u", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      Token token5 = xPathLexer0.number();
      assertEquals(".", token5.getTokenText());
      assertEquals(31, token5.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.pipe();
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
      
      xPathLexer1.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("&(k_ud.A.zq=YFi(");
      Token token8 = xPathLexer3.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("&", token8.getTokenText());
      
      xPathLexer3.not();
      xPathLexer3.or();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("q", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token10 = xPathLexer3.slashes();
      assertEquals(11, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer6.plus();
      assertEquals(5, token11.getTokenType());
      
      xPathLexer6.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer("[ (");
      xPathLexer6.dollar();
      Token token12 = xPathLexer3.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer4.dollar();
      assertEquals(26, token14.getTokenType());
      assertEquals("[", token14.getTokenText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.8524124768838106
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.consume();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$3uda]UJsQ)C]M");
      Token token0 = xPathLexer0.notEquals();
      assertEquals("6$", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("u", token2.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer1.plus();
      Token token3 = xPathLexer0.star();
      assertEquals("d", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer1.not();
      xPathLexer1.or();
      Token token6 = xPathLexer0.not();
      assertEquals("a", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("6$3uda]UJsQ)C]M");
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer("9eWw;<q2(");
      Token token9 = xPathLexer5.dollar();
      assertEquals("9", token9.getTokenText());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer4.dollar();
      assertEquals(26, token12.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7534468185411942
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer2.or();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer2.notEquals();
      assertEquals("<q", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer2.nextToken();
      assertEquals("xV", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer5 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      Token token3 = xPathLexer1.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("\"s_C~c9");
      xPathLexer5.or();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer3.or();
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer6.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("\"", token6.getTokenText());
      
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer7 = new XPathLexer("=m|*u(YZ6%R0Z");
      Token token7 = xPathLexer5.dots();
      assertEquals("G", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer6.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer4.comma();
      assertEquals("G", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer7.nextToken();
      assertEquals("=", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5069690524165842
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("k", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("+", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.div();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("V", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.notEquals();
      assertEquals("h]", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      Token token6 = xPathLexer0.identifier();
      assertEquals("", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(32, token7.getTokenType());
      assertEquals(",", token7.getTokenText());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.18586114951723
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("u9vq3zvH4f&l=83F");
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("u9vq3zvH4f", token0.getTokenText());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("l=", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("83", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("^bNN-p]`:.");
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("&BG$7cTvh0&EXfu9PX");
      XPathLexer xPathLexer3 = new XPathLexer("&BG$7cTvh0&EXfu9PX");
      xPathLexer0.nextToken();
      xPathLexer1.star();
      XPathLexer xPathLexer4 = new XPathLexer("u9vq3zvH4f&l=83F");
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer("Ul16a_uUj A!o5N70U");
      Token token4 = xPathLexer0.not();
      assertEquals("F", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer5.slashes();
      assertEquals("U", token5.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("&BG$7cTvh0&EXfu9PX");
      xPathLexer1.plus();
      Token token6 = xPathLexer6.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer2.dollar();
      assertEquals("&", token7.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("&B", token8.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token9 = xPathLexer8.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer6.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("&", token10.getTokenText());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer4.at();
      assertEquals("u", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token14 = xPathLexer9.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.0707556206907176
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.comma();
      Token token0 = xPathLexer1.plus();
      assertEquals("G", token0.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer2.or();
      xPathLexer0.notEquals();
      xPathLexer1.or();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("<", token1.getTokenText());
      assertEquals(7, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer4 = new XPathLexer("dartw*/hZ4}uc5cApF-");
      Token token3 = xPathLexer4.slashes();
      assertEquals("d", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer4.nextToken();
      assertEquals("artw", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer2.or();
      Token token6 = xPathLexer2.not();
      assertEquals("G", token6.getTokenText());
      
      Token token7 = xPathLexer4.slashes();
      assertEquals(12, token7.getTokenType());
      assertEquals("*/", token7.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("dartw*/hZ4}uc5cApF-");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token8 = xPathLexer2.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer4.nextToken();
      assertEquals("hZ4}uc5cApF-", token9.getTokenText());
      
      Token token10 = xPathLexer7.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer5.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer4.minus();
      assertEquals("h", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.644091638079689
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("_", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("u", token3.getTokenText());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(14, token4.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer1.leftParen();
      xPathLexer3.and();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("A", token7.getTokenText());
      
      xPathLexer2.plus();
      Token token8 = xPathLexer1.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(".", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.8269369688243433
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightBracket();
      String string0 = token3.toString();
      assertEquals("[ (4) (u)", string0);
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token3);
      char char0 = xPathLexer0.LA(0);
      assertEquals('', char0);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.colon();
      assertEquals("A", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.and();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      assertEquals("z", token8.getTokenText());
      
      xPathLexer0.consume(100);
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      xPathLexer0.plus();
      xPathLexer0.consume();
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1904602230508528
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.mod();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("=Y", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.pipe();
      Token token3 = xPathLexer2.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      assertEquals("F", token2.getTokenText());
      
      Token token4 = xPathLexer2.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer2.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNull(token9);
      
      XPathLexer xPathLexer4 = new XPathLexer("JXL{6W%v'");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer5.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer5.doubleColon();
      assertEquals(19, token12.getTokenType());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7514454237674002
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      Token token0 = xPathLexer1.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      xPathLexer1.or();
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token2 = xPathLexer6.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer2.plus();
      xPathLexer2.nextToken();
      Token token4 = xPathLexer7.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      XPathLexer xPathLexer10 = new XPathLexer("com.werken.saxpath.Token");
      Token token5 = xPathLexer10.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("c", token5.getTokenText());
      
      Token token6 = xPathLexer10.nextToken();
      assertEquals(15, token6.getTokenType());
      assertEquals("om.werken.saxpath.Token", token6.getTokenText());
      
      Token token7 = xPathLexer7.equals();
      assertEquals(21, token7.getTokenType());
      
      XPathLexer xPathLexer11 = new XPathLexer("K!Mn 8>Rzr:");
      Token token8 = xPathLexer11.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("K", token8.getTokenText());
      
      Token token9 = xPathLexer5.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer2.getPreviousToken();
      assertEquals((-1), token11.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.064836214980367
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("yU[lPT_@D\"jx]bQwB");
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.7499591567397053
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S6");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("S6", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals(")", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.dollar();
      Token token8 = xPathLexer3.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer2.leftBracket();
      assertEquals(3, token10.getTokenType());
      assertEquals(" ", token10.getTokenText());
      
      Token token11 = xPathLexer2.dollar();
      assertEquals("(", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.7197109920325357
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals("&", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("k", token3.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("_u", token4.getTokenText());
      
      Token token5 = xPathLexer0.dots();
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.or();
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer4.slashes();
      assertEquals(11, token9.getTokenType());
      
      xPathLexer2.plus();
      xPathLexer4.leftParen();
      Token token10 = xPathLexer4.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer2.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer2.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer4.dollar();
      assertEquals(26, token13.getTokenType());
      
      Token token14 = xPathLexer4.equals();
      assertEquals(21, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer5.dots();
      assertEquals(13, token15.getTokenType());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.119893519557283
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.consume((-192));
      xPathLexer0.rightBracket();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.111623184725662
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("[", token0.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("(", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.currentPosition();
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("n`", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer2.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token5 = xPathLexer3.doubleColon();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("J", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.setPreviousToken(token5);
      assertEquals(19, token5.getTokenType());
      
      Token token7 = xPathLexer4.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer4.or();
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer4.identifierOrOperatorName();
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.plus();
      assertEquals("7", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer3.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer3.equals();
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("OcLn0Tg2TT");
      Token token13 = xPathLexer5.dots();
      assertEquals("O", token13.getTokenText());
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer2.at();
      assertEquals(16, token14.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token15 = xPathLexer6.slashes();
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.085192389687591
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+VNh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.star();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("w", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("(k", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("+", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.setPreviousToken(token1);
      assertEquals(20, token1.getTokenType());
      assertEquals("3", token1.getTokenText());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer3.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("V", token9.getTokenText());
      
      xPathLexer3.getXPath();
      xPathLexer0.consume((-3955));
      Token token10 = xPathLexer2.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token12 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer2.notEquals();
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.9874337948098186
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("vKQk2V['NRWF)!Lu");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      String string0 = "c|tq.+#(poOj$'J";
      XPathLexer xPathLexer3 = new XPathLexer("c|tq.+#(poOj$'J");
      xPathLexer2.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.colon();
      xPathLexer2.not();
      xPathLexer1.slashes();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.comma();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dollar();
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer7 = new XPathLexer("");
      XPathLexer xPathLexer8 = new XPathLexer("vKQk2V['NRWF)!Lu");
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.notEquals();
      String string1 = null;
      XPathLexer xPathLexer10 = null;
      try {
        xPathLexer10 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6190641080658743
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(";o)KS]-on~j/`(!TD0", token0.getTokenText());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(";", token1.getTokenText());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("24E;CpKTi|");
      xPathLexer0.or();
      Token token2 = xPathLexer1.plus();
      assertEquals("2", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.notEquals();
      assertEquals(22, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(";o)KS]-on~j/`(!TD0");
      XPathLexer xPathLexer4 = new XPathLexer("24E;CpKTi|");
      xPathLexer2.nextToken();
      Token token5 = xPathLexer4.star();
      assertEquals("2", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(".,OXl*#kw[ajVH+");
      xPathLexer3.or();
      Token token6 = xPathLexer5.not();
      assertEquals(".", token6.getTokenText());
      
      Token token7 = xPathLexer5.slashes();
      assertEquals(",", token7.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token8 = xPathLexer8.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals(30, token9.getTokenType());
      assertEquals("4", token9.getTokenText());
      
      Token token10 = xPathLexer3.dollar();
      assertEquals(";", token10.getTokenText());
      
      Token token11 = xPathLexer7.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(")", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer1.pipe();
      assertEquals(17, token13.getTokenType());
      
      xPathLexer7.or();
      Token token14 = xPathLexer6.not();
      assertEquals(23, token14.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.588436392851467
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.star();
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.dollar();
      xPathLexer0.pipe();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.setXPath("]:mr/g\"Rt");
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.isIdentifierChar('#');
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dollar();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.hasMoreChars();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.rightParen();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7466790414616877
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.consume((-798));
      xPathLexer0.consume(118);
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.currentPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.768498603470507
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.operatorName();
      String string0 = "";
      String string1 = null;
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.8236990125679893
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.nextToken();
      xPathLexer2.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.number();
      xPathLexer2.dots();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-3955));
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.identifierOrOperatorName();
      xPathLexer1.plus();
      XPathLexer xPathLexer7 = new XPathLexer("DDFFJ}Tq2(S");
      xPathLexer1.consume();
      assertNotSame(xPathLexer1, xPathLexer7);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.177107245414508
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("c", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      Token token2 = xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      xPathLexer0.endPosition();
      Token token4 = xPathLexer0.notEquals();
      Token token5 = xPathLexer0.not();
      assertEquals("]", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("Hy97V$b1TaVO>&/+");
      xPathLexer1.setPreviousToken(token2);
      assertEquals(19, token2.getTokenType());
      assertEquals("(k", token2.getTokenText());
      
      String string0 = token4.toString();
      assertEquals("[ (22) (Vh)", string0);
      
      xPathLexer1.setXPath("A1JZNXhs\"Bc");
      xPathLexer0.number();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer1.identifier();
      assertEquals("A1JZNXhs", token10.getTokenText());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token4);
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Hy97V$b1TaVO>&/+");
      xPathLexer3.setXPath("Y=yr;dD;i");
      Token token12 = xPathLexer2.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.endPosition();
      Token token13 = xPathLexer0.identifier();
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.0063757978487176
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.comma();
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer2.or();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer1.or();
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer4 = new XPathLexer("dartw*/hZ4}uc5cApF-");
      Token token1 = xPathLexer4.slashes();
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer4.nextToken();
      assertEquals("artw", token2.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token3 = xPathLexer5.star();
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer3.or();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer5.slashes();
      XPathLexer xPathLexer7 = new XPathLexer("\"s_C~c9");
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token5 = xPathLexer6.plus();
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("qxV", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer8.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer2.dots();
      assertEquals("G", token9.getTokenText());
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer8.slashes();
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6981357765276295
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("vKQk2V['NRWF)!Lu");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer2.or();
      xPathLexer1.doubleColon();
      xPathLexer2.nextToken();
      xPathLexer1.consume(52);
      XPathLexer xPathLexer3 = new XPathLexer("|<=X`_");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("*7.,9A$-");
      xPathLexer1.or();
      xPathLexer3.not();
      xPathLexer2.slashes();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer5 = new XPathLexer("9+Vfh,j*Q .");
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer0.plus();
      xPathLexer2.nextToken();
      xPathLexer5.dollar();
      xPathLexer4.equals();
      XPathLexer xPathLexer8 = new XPathLexer("*7.,9A$-");
      xPathLexer7.comma();
      XPathLexer xPathLexer9 = null;
      try {
        xPathLexer9 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.8430118502941566
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("1");
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.star();
      xPathLexer0.leftParen();
      xPathLexer1.relationalOperator();
      xPathLexer1.operatorName();
      xPathLexer1.minus();
      xPathLexer0.star();
      xPathLexer0.leftParen();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer1.not();
      xPathLexer1.slashes();
      xPathLexer0.plus();
      xPathLexer1.dollar();
      xPathLexer1.leftParen();
      Token token0 = xPathLexer0.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.4276016257041304
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.operatorName();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("~");
      xPathLexer1.operatorName();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.or();
      xPathLexer2.not();
      xPathLexer1.slashes();
      xPathLexer2.plus();
      xPathLexer2.notEquals();
      xPathLexer2.at();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.1065927984884394
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("u", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("=", token4.getTokenText());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.star();
      assertEquals("Y", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.leftParen();
      assertEquals("i", token7.getTokenText());
      assertEquals(1, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("&(k_ud.A.zq=YFi(");
      Token token8 = xPathLexer0.rightParen();
      assertEquals("(", token8.getTokenText());
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer2.not();
      assertEquals("&", token10.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer3.or();
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer3.plus();
      assertEquals("&", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer("9eWw;<q2(");
      Token token14 = xPathLexer2.dollar();
      assertEquals("k", token14.getTokenText());
      
      Token token15 = xPathLexer4.equals();
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer0.dots();
      assertEquals(13, token16.getTokenType());
      
      Token token17 = xPathLexer0.dollar();
      assertEquals(26, token17.getTokenType());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.57213375505735
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer3.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer1.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer4.minus();
      assertEquals(6, token12.getTokenType());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.6769815440657925
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals(")", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer2.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(" ", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer1.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer3.pipe();
      assertEquals(17, token7.getTokenType());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.083134153509946
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("gBE[@(n`J7PSei", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("g", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      String string0 = token4.toString();
      assertEquals("[ (20) (B)", string0);
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (B)");
      xPathLexer1.or();
      xPathLexer1.not();
      xPathLexer0.slashes();
      XPathLexer xPathLexer3 = new XPathLexer("[ (20) (B)");
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      Token token8 = xPathLexer3.dollar();
      assertEquals("[", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer5.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.118199787144424
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("[@", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("f[$,=,HGMX/5\"Q");
      Token token4 = xPathLexer1.nextToken();
      assertEquals("f", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("0#Ui");
      xPathLexer0.or();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("0", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("n", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("f[$,=,HGMX/5\"Q");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer2.plus();
      assertEquals("#", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("`J7PSei", token8.getTokenText());
      
      xPathLexer3.dollar();
      Token token9 = xPathLexer4.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer2.dots();
      assertEquals("U", token10.getTokenText());
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer1.pipe();
      assertEquals("[", token11.getTokenText());
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.0884535638137223
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("wgBE[@(n`J7PSei", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("w", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("gB", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.colon();
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("AtB10n6^0\"W}rL");
      xPathLexer1.or();
      xPathLexer1.not();
      Token token5 = xPathLexer3.slashes();
      assertEquals("A", token5.getTokenText());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer("AtB10n6^0\"W}rL");
      xPathLexer4.and();
      Token token7 = xPathLexer0.dots();
      assertEquals("E", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer4.comma();
      assertEquals(32, token9.getTokenType());
      assertEquals("A", token9.getTokenText());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.9867060360310578
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("E[", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("@", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token4 = xPathLexer0.nextToken();
      assertEquals("(", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.or();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals("n", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("9+Vfh,j*Q .");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals(30, token8.getTokenType());
      assertEquals("9", token8.getTokenText());
      
      xPathLexer3.dollar();
      Token token9 = xPathLexer3.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("V", token9.getTokenText());
      
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("4", token10.getTokenText());
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      assertEquals("`", token11.getTokenText());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.7773763706967323
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals("@", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("n`", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("J7", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      assertEquals("PSei", token5.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("4", token7.getTokenText());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token8 = xPathLexer7.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer3.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer7.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.7444223556176939
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.and();
      xPathLexer1.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer2.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("p0#NA74v.");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.or();
      xPathLexer4.not();
      xPathLexer1.slashes();
      xPathLexer0.leftBracket();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer5.plus();
      xPathLexer6.setXPath("");
      xPathLexer3.nextToken();
      xPathLexer3.dollar();
      xPathLexer4.equals();
      XPathLexer xPathLexer9 = new XPathLexer("9+Vfh,j*Q .");
      xPathLexer9.pipe();
      xPathLexer5.comma();
      xPathLexer2.at();
      xPathLexer4.colon();
      Token token0 = xPathLexer6.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.7259521111255725
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      String string0 = " Zp>~R@e)G`{";
      XPathLexer xPathLexer1 = new XPathLexer(" Zp>~R@e)G`{");
      xPathLexer1.nextToken();
      Token token0 = xPathLexer0.slashes();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.960592698684506
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      Token token0 = xPathLexer0.plus();
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("d", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("d", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals("B", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      char char0 = xPathLexer0.LA(21);
      assertEquals('\uFFFF', char0);
      
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('\uFFFF');
      assertFalse(boolean0);
      
      Token token12 = xPathLexer0.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer1.plus();
      assertEquals(5, token13.getTokenType());
      
      xPathLexer1.notEquals();
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.0383756138478675
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("yU[lPT_@D\"jx]bQwB");
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.298673254040233
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.relationalOperator();
      token1.toString();
      Token token2 = xPathLexer0.dollar();
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.operatorName();
      token1.toString();
      token1.toString();
      Token token3 = xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      token3.toString();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (19) (k_)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (15) ()", string1);
      
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.number();
      Token token6 = xPathLexer0.dots();
      assertEquals("i", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("(", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.number();
      assertEquals(30, token12.getTokenType());
      
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6944865083683398
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.equals();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer2.notEquals();
      assertEquals("<q", token2.getTokenText());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("G", token3.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer5 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      Token token4 = xPathLexer1.star();
      assertEquals("<", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("\"s_C~c9");
      xPathLexer5.or();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("x", token5.getTokenText());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("\"s_C~c9");
      Token token7 = xPathLexer4.plus();
      assertEquals("G", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer6.minus();
      assertEquals("\"", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("ZQMr?nRYx)k=yU");
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer7.equals();
      assertEquals("\"", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer1.dots();
      assertEquals("x", token12.getTokenText());
      assertEquals(13, token12.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token13 = xPathLexer6.pipe();
      assertEquals(17, token13.getTokenType());
      assertEquals("s", token13.getTokenText());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.0375164770048935
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer1.plus();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer2.or();
      Token token1 = xPathLexer2.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.nextToken();
      Token token2 = xPathLexer1.identifierOrOperatorName();
      assertEquals("qxV", token2.getTokenText());
      
      Token token3 = xPathLexer2.nextToken();
      assertEquals(7, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer1.or();
      Token token4 = xPathLexer4.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer1.not();
      assertEquals("|", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer4.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer3.dollar();
      Token token8 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals("qx", token9.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("#\"r");
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer7.equals();
      assertEquals("#", token11.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token12 = xPathLexer7.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer8.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer7.at();
      assertEquals("r", token14.getTokenText());
      assertEquals(16, token14.getTokenType());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.9604081708045142
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      Token token0 = xPathLexer0.plus();
      assertEquals("`", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("d", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals("B", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.mod();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      int int0 = xPathLexer0.endPosition();
      assertEquals(6, int0);
      
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.8726358986783274
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.isIdentifierStartChar('g');
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("9k6p~aLy?");
      xPathLexer1.plus();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      xPathLexer1.notEquals();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.960755467396103
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.mod();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.at();
      xPathLexer0.setXPath("4d;");
      xPathLexer0.consume();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.isIdentifierChar('V');
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.nextToken();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.050135907568589
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.colon();
      assertEquals("B", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.at();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("[", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(16, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
      
      char char0 = xPathLexer1.LA(21);
      assertEquals('\uFFFF', char0);
      
      boolean boolean1 = xPathLexer1.isIdentifierStartChar(':');
      assertFalse(boolean1 == boolean0);
      
      Token token7 = xPathLexer1.rightParen();
      assertEquals(2, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals("n`", token9.getTokenText());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.6205710483795666
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.number();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.getPreviousToken();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.LA(100);
      xPathLexer0.rightBracket();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.301201529280804
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.dots();
      assertEquals("v", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.number();
      String string0 = token0.toString();
      assertEquals("[ (23) (@)", string0);
      
      xPathLexer0.and();
      xPathLexer0.mod();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.getXPath();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(".|x(4NkrI>`qfl/u");
      Token token6 = xPathLexer2.leftParen();
      assertEquals(".", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertNotNull(token8);
      assertEquals("", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer4.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer2.identifier();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.812039212615631
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      XPathLexer xPathLexer3 = new XPathLexer("G<qxV|+<ND$6IYa&]a");
      xPathLexer3.or();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token0 = xPathLexer5.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer3.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("G", token1.getTokenText());
      
      Token token2 = xPathLexer3.nextToken();
      assertEquals(7, token2.getTokenType());
      assertEquals("<", token2.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.colon();
      xPathLexer2.pipe();
      xPathLexer4.not();
      xPathLexer5.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer3.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("q", token4.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token5 = xPathLexer7.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer7.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token6 = xPathLexer4.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer3.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("x", token7.getTokenText());
      
      Token token8 = xPathLexer2.colon();
      assertEquals("q", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer7.identifier();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.7443417649122415
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("vKQk2V['NRWF)!Lu");
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer1.or();
      Token token2 = xPathLexer1.doubleColon();
      assertEquals("vK", token2.getTokenText());
      
      xPathLexer1.nextToken();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      Token token3 = xPathLexer1.nextToken();
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("}YVar796");
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("}YVar796");
      xPathLexer3.or();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer3.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("}", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("YVar796", token8.getTokenText());
      
      Token token9 = xPathLexer5.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer2.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("}YVar796");
      Token token11 = xPathLexer7.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("}", token11.getTokenText());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.5378288267674065
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.whitespace();
      xPathLexer0.at();
      String string0 = "N?UdYe[inr@wwP";
      XPathLexer xPathLexer1 = new XPathLexer("N?UdYe[inr@wwP");
      xPathLexer1.at();
      xPathLexer0.or();
      xPathLexer1.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.doubleColon();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("tdqU2b?u`.#>b#&1");
      xPathLexer0.div();
      xPathLexer0.or();
      Token token0 = xPathLexer0.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.7505134186677562
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.nextToken();
      xPathLexer1.star();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.or();
      XPathLexer xPathLexer5 = new XPathLexer(")e*_=L");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.not();
      xPathLexer1.slashes();
      XPathLexer xPathLexer7 = null;
      try {
        xPathLexer7 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.9700779829701658
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("wgBE[@(n`J7PSei", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("gB", token1.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("E[", token2.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(1, token3.getTokenType());
      assertEquals("(", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.or();
      Token token4 = xPathLexer2.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("4", token4.getTokenText());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("n", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("9+Vfh,j*Q .");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer3.nextToken();
      assertEquals(30, token7.getTokenType());
      assertEquals("9", token7.getTokenText());
      
      Token token8 = xPathLexer3.equals();
      assertEquals("+", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("4", token9.getTokenText());
      
      Token token10 = xPathLexer3.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("V", token10.getTokenText());
      
      Token token11 = xPathLexer0.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("`", token11.getTokenText());
  }
}
