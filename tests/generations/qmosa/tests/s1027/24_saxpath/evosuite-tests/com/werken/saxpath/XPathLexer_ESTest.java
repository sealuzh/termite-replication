/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 06:55:00 GMT 2020
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.2960043253737106
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.dots();
      assertEquals(":", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(11, token2.getTokenType());
      assertEquals("/", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("9eWw;<q2(");
      xPathLexer1.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.identifier();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer7.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer3.leftParen();
      Token token7 = xPathLexer3.identifierOrOperatorName();
      assertEquals("eWw", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      assertEquals(";", token8.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("1{:/ktH");
      Token token9 = xPathLexer3.nextToken();
      assertEquals("<", token9.getTokenText());
      
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3330417542679014
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("2Gs2ugf\"Z|-5*>L");
      Token token0 = xPathLexer0.plus();
      assertEquals("2", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("^-r`!");
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      assertEquals("Gs", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("2", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer1.leftParen();
      assertEquals(1, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer3.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token5 = xPathLexer6.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer6.dollar();
      XPathLexer xPathLexer7 = new XPathLexer("t*czPdln;ucv");
      xPathLexer4.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("ug", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("f", token7.getTokenText());
      
      Token token8 = xPathLexer5.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer7.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("t", token9.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer("-YPy");
      Token token10 = xPathLexer8.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("-", token10.getTokenText());
      
      xPathLexer2.mod();
      Token token11 = xPathLexer4.rightParen();
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3135297303991973
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("9xc*O1");
      xPathLexer1.doubleColon();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("c", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("9xc*O1");
      xPathLexer1.or();
      Token token4 = xPathLexer1.nextToken();
      assertEquals("*", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token5 = xPathLexer4.not();
      assertEquals("6", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer1.colon();
      assertEquals("O", token7.getTokenText());
      
      xPathLexer0.doubleColon();
      Token token8 = xPathLexer4.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer7.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3474460451657084
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("2Gs2ugf\"Z|-5*>L");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer2.plus();
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer("^-r`!");
      Token token2 = xPathLexer1.doubleColon();
      assertEquals("2G", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals("s2ugf", token3.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token4 = xPathLexer6.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer5.or();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.notEquals();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer2.and();
      xPathLexer8.plus();
      Token token5 = xPathLexer8.dollar();
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("t*czPdln;ucv");
      xPathLexer6.identifierOrOperatorName();
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer2.notEquals();
      assertEquals("wg", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("B", token7.getTokenText());
      
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("E", token8.getTokenText());
      
      Token token9 = xPathLexer7.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer5.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer("2Gs2ugf\"Z|-5*>L");
      xPathLexer9.nextToken();
      XPathLexer xPathLexer11 = new XPathLexer("2Gs2ugf\"Z|-5*>L");
      Token token11 = xPathLexer11.rightParen();
      assertEquals(2, token11.getTokenType());
      assertEquals("2", token11.getTokenText());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.544248499156683
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.consume();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.star();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("$V", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("3", token3.getTokenText());
      
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("d", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("a", token7.getTokenText());
      
      xPathLexer0.rightParen();
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token10 = xPathLexer0.plus();
      assertEquals("U", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer3.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer4.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer4.equals();
      assertEquals(21, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer3.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer0.nextToken();
      assertEquals((-1), token16.getTokenType());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2825769137898586
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.plus();
      assertEquals("v", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("Z", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("J:(GOjd*1#Db`kv.n B");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("J", token8.getTokenText());
      
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      assertEquals(":(", token9.getTokenText());
      
      xPathLexer3.identifier();
      Token token10 = xPathLexer2.nextToken();
      assertEquals(15, token10.getTokenType());
      assertEquals("GOjd", token10.getTokenText());
      
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer1.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2678266223080548
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D4{ud5&GG6d1wp E>+");
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.consume((-893));
      xPathLexer0.consume(25);
      xPathLexer0.doubleColon();
      char char0 = '|';
      xPathLexer0.isIdentifierStartChar('|');
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.2960391592176324
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8vlVS)J");
      xPathLexer0.number();
      Token token0 = xPathLexer0.identifier();
      assertEquals("vlVS", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      assertEquals("J", token2.getTokenText());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("8vlVS)J");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("8", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.slashes();
      Token token4 = xPathLexer4.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer2.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer4.dollar();
      assertEquals(26, token7.getTokenType());
      
      Token token8 = xPathLexer2.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7038436660368843
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.star();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("$V", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("ud", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      
      Token token5 = xPathLexer2.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals("a", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.rightParen();
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("U", token8.getTokenText());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer("r4Lxq");
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertEquals("msQ", token9.getTokenText());
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token10 = xPathLexer4.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("6", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals("r", token11.getTokenText());
      
      Token token12 = xPathLexer5.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer3.rightParen();
      assertEquals(2, token13.getTokenType());
      assertEquals("4", token13.getTokenText());
      
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token15 = xPathLexer6.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer3.nextToken();
      assertEquals("Lxq", token16.getTokenText());
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3227182911847841
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("werken.saxpath.XPathLexer", token2.getTokenText());
      
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals("c", token4.getTokenText());
      
      xPathLexer1.or();
      Token token5 = xPathLexer1.not();
      assertEquals("o", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("Da|]/E2Lv1z");
      Token token9 = xPathLexer4.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer4.dots();
      assertEquals("|", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer2.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer2.or();
      Token token12 = xPathLexer5.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.3565011977255876
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.notEquals();
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      xPathLexer1.plus();
      xPathLexer1.or();
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("a[s");
      xPathLexer3.rightParen();
      xPathLexer1.colon();
      xPathLexer1.or();
      xPathLexer2.consume(101);
      XPathLexer xPathLexer4 = new XPathLexer(")");
      XPathLexer xPathLexer5 = new XPathLexer("!QdLts~TO<MH@_=)");
      xPathLexer5.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dollar();
      xPathLexer1.dots();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer2.notEquals();
      xPathLexer7.not();
      xPathLexer6.dollar();
      xPathLexer0.nextToken();
      xPathLexer7.colon();
      xPathLexer6.rightBracket();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1790751255350043
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("0JEriXq");
      Token token1 = xPathLexer0.nextToken();
      assertEquals(1, token1.getTokenType());
      assertEquals("(", token1.getTokenText());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("0", token2.getTokenText());
      
      Token token3 = xPathLexer1.rightParen();
      assertEquals("J", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("E", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("1.lu, {0+Qmq{C");
      Token token5 = xPathLexer1.minus();
      assertEquals("r", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("Vh", token6.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("-c3SWw(k+Vh],");
      Token token7 = xPathLexer2.identifierOrOperatorName();
      assertEquals("1.lu", token7.getTokenText());
      
      Token token8 = xPathLexer6.plus();
      assertEquals("-", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer3.at();
      assertEquals(16, token10.getTokenType());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.4736199520151805
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("$", token4.getTokenText());
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifier();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("H0", token6.getTokenText());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("V", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer("nV\"v4");
      Token token8 = xPathLexer2.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.66960183783829
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals("[", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("@", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("J7PSei", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("}dIl");
      xPathLexer0.or();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.slashes();
      Token token6 = xPathLexer2.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("}d", token6.getTokenText());
      
      xPathLexer2.operatorName();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer1.slashes();
      assertEquals(11, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("Ib^oD*1&i{&(c%oP-");
      XPathLexer xPathLexer4 = new XPathLexer("}dIl");
      xPathLexer3.identifier();
      Token token9 = xPathLexer3.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer3.mod();
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4046624562727648
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.number();
      xPathLexer0.and();
      token0.toString();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.number();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("[ (30) ()");
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("1{:/ktH");
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.plus();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer2.nextToken();
      xPathLexer4.at();
      Token token2 = xPathLexer4.relationalOperator();
      assertNull(token2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.533157184078048
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.equals();
      assertEquals(":", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer3 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token3 = xPathLexer4.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token4 = xPathLexer2.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer1.colon();
      Token token5 = xPathLexer2.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("{:", token5.getTokenText());
      
      Token token6 = xPathLexer4.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("ktH", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      assertEquals("/", token8.getTokenText());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5535593635113898
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("}dIl");
      xPathLexer0.or();
      xPathLexer0.not();
      Token token0 = xPathLexer0.slashes();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer2.nextToken();
      xPathLexer2.dots();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer("}dIl");
      xPathLexer3.notEquals();
      Token token1 = xPathLexer0.identifier();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7642988902533565
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.notEquals();
      xPathLexer0.mod();
      xPathLexer1.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.rightParen();
      xPathLexer1.plus();
      xPathLexer1.or();
      xPathLexer1.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer1.nextToken();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("a[s");
      xPathLexer1.colon();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.notEquals();
      xPathLexer1.or();
      xPathLexer0.consume((-2849));
      XPathLexer xPathLexer5 = new XPathLexer("a[s");
      xPathLexer5.not();
      xPathLexer3.slashes();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer3.plus();
      XPathLexer xPathLexer6 = new XPathLexer("a[s");
      xPathLexer1.nextToken();
      xPathLexer5.rightParen();
      xPathLexer2.star();
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5359713044978267
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(26, token6.getTokenType());
      assertEquals("$", token6.getTokenText());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer1.not();
      assertEquals("u", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token8 = xPathLexer0.star();
      assertEquals("V", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer1.slashes();
      assertEquals("H", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      Token token10 = xPathLexer1.identifier();
      assertEquals(15, token10.getTokenType());
      assertEquals("0", token10.getTokenText());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals(27, token11.getTokenType());
      assertEquals("TWasY?dqH$+5", token11.getTokenText());
      
      xPathLexer0.mod();
      Token token12 = xPathLexer2.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals("=", token12.getTokenText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.3869823156189482
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("o");
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      xPathLexer1.rightParen();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer("rM'>");
      xPathLexer2.minus();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("cJ[f~");
      XPathLexer xPathLexer4 = new XPathLexer("rM'>");
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.dots();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.colon();
      xPathLexer2.notEquals();
      xPathLexer3.not();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token1 = xPathLexer7.nextToken();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.1811832247380614
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      token0.toString();
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-3955));
      XPathLexer xPathLexer1 = new XPathLexer("k9ct8EUG5");
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("@vrZ");
      xPathLexer2.or();
      // Undeclared exception!
      try { 
        xPathLexer0.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.2911810122480811
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("om.werken.saxpath.XPathLexer", token1.getTokenText());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer2.rightParen();
      assertEquals("c", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals("o", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("|[d:{<Ihx^");
      Token token5 = xPathLexer2.minus();
      assertEquals("m", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.div();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer5.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("co", token6.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("cJ[f~");
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer2.nextToken();
      assertEquals(".", token7.getTokenText());
      
      XPathLexer xPathLexer9 = new XPathLexer();
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer9.colon();
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer3.not();
      assertEquals(23, token10.getTokenType());
      assertEquals("|", token10.getTokenText());
      
      Token token11 = xPathLexer3.nextToken();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5649493574615376
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("[[FhcPu");
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.minus();
      xPathLexer0.at();
      xPathLexer0.consume((-932));
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271882965548058
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("gB", token1.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("4wgBE[@(n`J7PSei");
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.plus();
      assertEquals("w", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("gB", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      assertEquals("E", token5.getTokenText());
      
      xPathLexer1.colon();
      Token token6 = xPathLexer0.colon();
      assertEquals("[", token6.getTokenText());
      
      xPathLexer1.or();
      xPathLexer2.consume(101);
      XPathLexer xPathLexer3 = new XPathLexer("#8o15IN95");
      XPathLexer xPathLexer4 = new XPathLexer("!QdLts~TO<MH@_=)");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.dollar();
      Token token7 = xPathLexer0.dots();
      assertEquals("@", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer5.colon();
      Token token8 = xPathLexer2.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer4.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("!", token9.getTokenText());
      
      Token token10 = xPathLexer5.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      Token token12 = xPathLexer6.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.8126186176606127
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.doubleColon();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("6$V3uda]UmsQ)C]M");
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer1.setXPath(",Gk58%+H");
      xPathLexer1.setXPath(",Gk58%+H");
      xPathLexer1.dots();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.minus();
      xPathLexer0.not();
      Token token1 = xPathLexer0.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.603978827323091
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.notEquals();
      xPathLexer0.operatorName();
      xPathLexer0.div();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.setXPath("jv&)ri/DyQ)r");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(15, token6.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.minus();
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
      
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals("D", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals("y", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2028242050775495
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("-YPy");
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      xPathLexer2.rightParen();
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer("-YPy");
      xPathLexer1.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer7.equals();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer0.plus();
      XPathLexer xPathLexer8 = new XPathLexer("K");
      xPathLexer8.nextToken();
      xPathLexer4.at();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1006147961306332
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("@]7w<~&A");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer2.or();
      xPathLexer2.consume();
      xPathLexer0.consume((-1409));
      xPathLexer2.not();
      // Undeclared exception!
      try { 
        xPathLexer0.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5210314667533917
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer0.number();
      xPathLexer1.dots();
      xPathLexer1.consume((-3955));
      XPathLexer xPathLexer4 = new XPathLexer("BPc7B|pAU.|Clz*lA/");
      xPathLexer4.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer1.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.384795415302008
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("*^j93j");
      xPathLexer4.relationalOperator();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer("%f");
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.dots();
      xPathLexer3.plus();
      xPathLexer0.colon();
      xPathLexer6.doubleColon();
      xPathLexer0.dots();
      xPathLexer3.at();
      xPathLexer1.slashes();
      xPathLexer4.dollar();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.321554168727216
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("-YPy");
      Token token1 = xPathLexer2.nextToken();
      assertEquals("-", token1.getTokenText());
      
      Token token2 = xPathLexer2.slashes();
      assertEquals("Y", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer2.rightParen();
      assertEquals("P", token3.getTokenText());
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer1.star();
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("-YPy");
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("cJ[f~");
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("4w", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("K");
      xPathLexer5.identifierOrOperatorName();
      Token token7 = xPathLexer6.plus();
      assertEquals("", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("K");
      Token token8 = xPathLexer2.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("y", token8.getTokenText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5424823979386248
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.comma();
      assertEquals(32, token1.getTokenType());
      
      Token token2 = xPathLexer2.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("6$V3uda]UmsQ)C]M");
      XPathLexer xPathLexer4 = new XPathLexer("1{:/ktH");
      xPathLexer4.at();
      xPathLexer0.or();
      xPathLexer4.nextToken();
      xPathLexer1.mod();
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer2.rightParen();
      Token token5 = xPathLexer4.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("{", token5.getTokenText());
      
      xPathLexer1.or();
      XPathLexer xPathLexer5 = new XPathLexer("1{:/ktH");
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer("JzWA");
      Token token6 = xPathLexer3.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("6", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("Uj_kSL-,%BNOEHe`R/");
      Token token7 = xPathLexer4.dots();
      assertEquals(":", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      xPathLexer7.nextToken();
      Token token8 = xPathLexer3.rightParen();
      assertEquals("$", token8.getTokenText());
      
      Token token9 = xPathLexer6.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token10 = xPathLexer7.not();
      assertEquals(23, token10.getTokenType());
      assertEquals(",", token10.getTokenText());
      
      Token token11 = xPathLexer3.nextToken();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer3.literal();
      assertNotNull(token12);
      assertEquals("UmsQ)C", token12.getTokenText());
      assertEquals(27, token12.getTokenType());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3412278821164605
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer1.rightBracket();
      xPathLexer1.operatorName();
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.plus();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dollar();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer1.dots();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.or();
      Token token1 = xPathLexer0.dots();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8891242471415297
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6$V3uda]UmsQ)C]M");
      xPathLexer1.colon();
      XPathLexer xPathLexer3 = new XPathLexer("}E^uQg09C~");
      xPathLexer3.or();
      xPathLexer3.whitespace();
      xPathLexer2.consume(101);
      xPathLexer1.pipe();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      xPathLexer1.star();
      xPathLexer0.plus();
      xPathLexer0.dollar();
      xPathLexer3.at();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.star();
      xPathLexer4.minus();
      xPathLexer0.literal();
      xPathLexer1.not();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3029590666123867
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer(")");
      XPathLexer xPathLexer3 = new XPathLexer(")");
      xPathLexer1.not();
      xPathLexer3.or();
      xPathLexer2.not();
      xPathLexer2.slashes();
      xPathLexer1.notEquals();
      xPathLexer1.identifier();
      xPathLexer1.nextToken();
      xPathLexer3.dots();
      xPathLexer3.or();
      xPathLexer2.notEquals();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7040088356185934
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("V3uda", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("]U", token5.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("}E^uQg09C~");
      xPathLexer3.or();
      xPathLexer2.consume(101);
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("m", token7.getTokenText());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("s", token8.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer2.notEquals();
      Token token9 = xPathLexer2.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1916211884213352
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QUi;x#mv]IE}P$7Ol[");
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.div();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.notEquals();
      assertEquals(22, token0.getTokenType());
      assertEquals("Ui", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals(";", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("x", token2.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.or();
      xPathLexer0.consume(45);
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.isIdentifierStartChar('l');
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3275978972320555
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("1{:/ktH");
      xPathLexer0.nextToken();
      xPathLexer1.slashes();
      xPathLexer1.rightParen();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("cJ[f~");
      xPathLexer1.colon();
      XPathLexer xPathLexer4 = new XPathLexer("1{:/ktH");
      xPathLexer3.consume((-189));
      xPathLexer2.not();
      xPathLexer1.slashes();
      XPathLexer xPathLexer5 = new XPathLexer("B4");
      xPathLexer5.nextToken();
      xPathLexer2.dollar();
      xPathLexer1.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer3.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.522888465985237
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.doubleColon();
      assertEquals(19, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.comma();
      xPathLexer2.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer("6$V3uda]UmsQ)C]M");
      XPathLexer xPathLexer4 = new XPathLexer("1{:/ktH");
      Token token2 = xPathLexer4.at();
      assertEquals("1", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer4.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer5 = new XPathLexer("1{:/ktH");
      Token token4 = xPathLexer5.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer1.operatorName();
      Token token5 = xPathLexer5.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("{", token5.getTokenText());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("1{:/ktH");
      Token token7 = xPathLexer3.nextToken();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer2.dots();
      assertEquals(13, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("d<SZW{#FO<sM");
      xPathLexer7.or();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifier();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token11 = xPathLexer8.comma();
      assertEquals(32, token11.getTokenType());
      assertEquals("6", token11.getTokenText());
      
      xPathLexer1.mod();
      Token token12 = xPathLexer6.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("1", token12.getTokenText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2827392085387403
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer2.rightParen();
      assertEquals("c", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer2.or();
      xPathLexer1.nextToken();
      xPathLexer2.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("m.", token3.getTokenText());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals("om.werken.saxpath.XPathLexer", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer1.leftParen();
      assertEquals(1, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("CR}ltzeo@K2:p'3r$CE");
      xPathLexer2.or();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer3.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer3.notEquals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.identifier();
      Token token8 = xPathLexer2.nextToken();
      assertEquals("", token8.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer("CR}ltzeo@K2:p'3r$CE");
      Token token9 = xPathLexer6.dots();
      assertEquals("C", token9.getTokenText());
      
      Token token10 = xPathLexer6.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer1.or();
      XPathLexer xPathLexer7 = new XPathLexer("}dIl");
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer3.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5264762868181156
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("wgBE", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("[", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.or();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token4 = xPathLexer3.not();
      assertEquals("4", token4.getTokenText());
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      Token token6 = xPathLexer3.colon();
      assertEquals("w", token6.getTokenText());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("wg", token7.getTokenText());
      
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("tiNldht=gd:qw");
      Token token9 = xPathLexer0.at();
      assertEquals("n", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("B", token10.getTokenText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.663431223179793
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("(", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.dollar();
      assertEquals("k", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("_", token2.getTokenText());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.rightBracket();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (4) (u)", string0);
      
      xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.getXPath();
      Token token4 = xPathLexer0.leftParen();
      assertEquals("d", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      Token token5 = xPathLexer0.dots();
      assertEquals(".", token5.getTokenText());
      assertEquals(13, token5.getTokenType());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.notEquals();
      assertEquals("zq", token7.getTokenText());
      assertEquals(22, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.identifier();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("=", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.comma();
      Token token9 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.comma();
      assertEquals("(", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
      
      xPathLexer2.operatorName();
      xPathLexer1.div();
      Token token11 = xPathLexer1.colon();
      assertEquals(18, token11.getTokenType());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.5275226997868927
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("-YPy");
      Token token0 = xPathLexer2.nextToken();
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer1.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer3.equals();
      assertEquals(21, token2.getTokenType());
      
      xPathLexer3.or();
      XPathLexer xPathLexer4 = new XPathLexer("0Ny");
      Token token3 = xPathLexer4.doubleColon();
      assertEquals("0N", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer2.nextToken();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("-YPy");
      Token token5 = xPathLexer7.at();
      assertEquals("-", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      assertEquals("4", token6.getTokenText());
      
      xPathLexer2.notEquals();
      Token token7 = xPathLexer7.identifier();
      assertEquals("YPy", token7.getTokenText());
      
      Token token8 = xPathLexer3.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("");
      Token token9 = xPathLexer9.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer3.or();
      Token token10 = xPathLexer9.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9498583921253263
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-3955));
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7154178418054642
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      xPathLexer0.not();
      xPathLexer1.slashes();
      xPathLexer2.plus();
      xPathLexer0.dollar();
      xPathLexer2.rightParen();
      xPathLexer2.at();
      xPathLexer0.nextToken();
      xPathLexer2.notEquals();
      xPathLexer2.identifier();
      xPathLexer0.nextToken();
      xPathLexer1.dots();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token1 = xPathLexer2.minus();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.2827392085387408
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      xPathLexer1.consume((-1269));
      xPathLexer0.minus();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.not();
      xPathLexer0.not();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer5.slashes();
      // Undeclared exception!
      try { 
        xPathLexer1.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4515817643357876
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.comma();
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.rightParen();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("RI\"KaM:");
      Token token3 = xPathLexer1.slashes();
      assertEquals("R", token3.getTokenText());
      assertEquals(11, token3.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("RI\"KaM:");
      xPathLexer2.rightParen();
      Token token4 = xPathLexer1.star();
      assertEquals("I", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("cJ[f~");
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer3.minus();
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("RI\"KaM:");
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer7 = new XPathLexer("RI\"KaM:");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer4.identifier();
      Token token7 = xPathLexer7.nextToken();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer6.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("R", token8.getTokenText());
      
      Token token9 = xPathLexer7.comma();
      assertEquals(32, token9.getTokenType());
      assertEquals("\"", token9.getTokenText());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5094914289235586
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("3", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("Ww", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("(", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer0.plus();
      assertEquals("k", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(")");
      Token token9 = xPathLexer5.nextToken();
      assertEquals(")", token9.getTokenText());
      
      Token token10 = xPathLexer1.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer5.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      assertNotNull(token12);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3497404137736755
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("v", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("r", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("Z", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.or();
      Token token7 = xPathLexer2.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer3.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals("", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer3.dollar();
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.identifierOrOperatorName();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer6.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6258101937849234
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer0.leftParen();
      xPathLexer0.rightParen();
      xPathLexer0.setXPath(";N~z&fk($/.[*Ki0");
      Token token0 = xPathLexer0.star();
      assertEquals(";", token0.getTokenText());
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("&f", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(";N~z&fk($/.[*Ki0");
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals("k", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals(";", token4.getTokenText());
      
      Token token5 = xPathLexer1.plus();
      assertEquals("N", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("~z", token8.getTokenText());
      
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("&", token9.getTokenText());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5290167861545505
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">");
      Token token0 = xPathLexer0.relationalOperator();
      assertNotNull(token0);
      
      String string0 = token0.toString();
      assertEquals("[ (9) (>)", string0);
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.or();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.rightParen();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
      
      xPathLexer0.dots();
      xPathLexer0.colon();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.colon();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(")dyu\bBJTZ'ha");
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(")", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.4666753463725886
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer1.or();
      xPathLexer0.comma();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      assertEquals("S", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer2.or();
      Token token3 = xPathLexer1.doubleColon();
      assertEquals("-c", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer0.leftParen();
      assertEquals("(", token4.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("FFoMue8KCWQjC.'P");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.or();
      Token token5 = xPathLexer4.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals("3", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer6.notEquals();
      xPathLexer1.identifier();
      Token token7 = xPathLexer4.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer5.dots();
      assertEquals("F", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      xPathLexer3.or();
      Token token9 = xPathLexer4.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer5.identifier();
      assertEquals("FoMue8KCWQjC.", token10.getTokenText());
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      assertEquals("(", token11.getTokenText());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.3562302851574684
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      xPathLexer0.not();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer("-YPy");
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.rightParen();
      xPathLexer2.star();
      XPathLexer xPathLexer3 = new XPathLexer("K^xN5bK|PRtB$}ylX;:");
      xPathLexer1.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer7 = new XPathLexer("$.V|/x#nvBU%W/");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer5.plus();
      XPathLexer xPathLexer8 = null;
      try {
        xPathLexer8 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3829109136060573
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("2Gs2ugf\"Z|-5*>L");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer2.plus();
      xPathLexer0.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      XPathLexer xPathLexer4 = new XPathLexer("^-r`!");
      xPathLexer1.doubleColon();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.at();
      xPathLexer5.or();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.notEquals();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.plus();
      xPathLexer8.dollar();
      XPathLexer xPathLexer9 = new XPathLexer("t*czPdln;ucv");
      xPathLexer6.identifierOrOperatorName();
      xPathLexer1.relationalOperator();
      xPathLexer2.notEquals();
      xPathLexer2.star();
      xPathLexer2.dots();
      xPathLexer7.equals();
      xPathLexer9.not();
      XPathLexer xPathLexer10 = new XPathLexer("-YPy");
      xPathLexer10.dollar();
      xPathLexer4.mod();
      Token token1 = xPathLexer6.rightParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1274905770595525
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("FjCn#[{UnDa");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer1.mod();
      Token token4 = xPathLexer1.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("#", token4.getTokenText());
      
      Token token5 = xPathLexer1.plus();
      assertEquals(5, token5.getTokenType());
      assertEquals("[", token5.getTokenText());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.540036303820981
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume((-2229));
      xPathLexer0.isIdentifierStartChar('}');
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.1006147961306332
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer1 = new XPathLexer("@]7w<~&A");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer2.or();
      xPathLexer2.consume();
      xPathLexer0.consume((-1409));
      xPathLexer2.not();
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.774502933523121
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.not();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token1 = xPathLexer0.star();
      assertEquals("6", token1.getTokenText());
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.notEquals();
      Token token2 = xPathLexer0.slashes();
      assertEquals(11, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      assertEquals("u", token3.getTokenText());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals(32, token0.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.dots();
      assertEquals("a", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals("]", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("Um", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals(")", token11.getTokenText());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals("C]", token12.getTokenText());
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals("M", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer0.not();
      assertEquals(23, token14.getTokenType());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.1496357781567432
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("rZ", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer1.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer2.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("gW0RiQbL\"Dl13]M/");
      Token token5 = xPathLexer4.dollar();
      assertEquals("g", token5.getTokenText());
      assertEquals(26, token5.getTokenType());
      
      Token token6 = xPathLexer3.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7511661656555937
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.not();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token2 = xPathLexer0.rightParen();
      assertEquals("6", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("uda", token4.getTokenText());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("[");
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertNull(token5);
      
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.not();
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("]", token6.getTokenText());
      
      Token token7 = xPathLexer3.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("U", token8.getTokenText());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("ms", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token10 = xPathLexer5.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer5.identifierOrOperatorName();
      Token token11 = xPathLexer3.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer2.identifierOrOperatorName();
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5429579668871467
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.number();
      xPathLexer0.dots();
      xPathLexer0.getXPath();
      xPathLexer1.consume((-3230));
      XPathLexer xPathLexer2 = new XPathLexer(" 4");
      // Undeclared exception!
      try { 
        xPathLexer1.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.508847676804288
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.div();
      xPathLexer0.notEquals();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.consume();
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer0.dollar();
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.LA(0);
      xPathLexer0.comma();
      xPathLexer0.div();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-522));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5846510158145537
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("we", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("r", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("ke", token5.getTokenText());
      
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("o", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      xPathLexer1.slashes();
      Token token11 = xPathLexer1.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals("p", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.minus();
      Token token14 = xPathLexer2.pipe();
      assertEquals(17, token14.getTokenType());
      
      Token token15 = xPathLexer2.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.6128084661317121
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.currentPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer1.rightBracket();
      token0.toString();
      xPathLexer1.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.dots();
      xPathLexer1.at();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      xPathLexer0.plus();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.relationalOperator();
      xPathLexer1.notEquals();
      xPathLexer1.star();
      xPathLexer1.dots();
      xPathLexer2.equals();
      xPathLexer0.not();
      Token token2 = xPathLexer0.identifier();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7467898074075832
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("k", token2.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer1.notEquals();
      assertEquals("co", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("]", token5.getTokenText());
      
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer3.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.or();
      Token token8 = xPathLexer1.not();
      assertEquals("m", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token11 = xPathLexer4.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer0.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.identifierOrOperatorName();
      xPathLexer2.identifierOrOperatorName();
      Token token13 = xPathLexer6.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token14.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.541055420775214
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      Token token1 = xPathLexer0.slashes();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token2 = xPathLexer0.star();
      assertEquals("6", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("$V", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("3", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("ud", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setPreviousToken(token1);
      Token token7 = xPathLexer2.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token9 = xPathLexer3.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("6", token9.getTokenText());
      
      xPathLexer3.relationalOperator();
      xPathLexer3.operatorName();
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.dollar();
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
      assertEquals("a", token12.getTokenText());
      
      Token token13 = xPathLexer3.nextToken();
      assertEquals("$", token13.getTokenText());
      assertEquals(26, token13.getTokenType());
      
      xPathLexer0.mod();
      Token token14 = xPathLexer1.colon();
      assertEquals(18, token14.getTokenType());
      
      xPathLexer2.div();
      Token token15 = xPathLexer4.plus();
      assertEquals("c", token15.getTokenText());
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.7612678179273453
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.consume();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("$V", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("3", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("u", token6.getTokenText());
      
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("da", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token8 = xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token8);
      Token token9 = xPathLexer0.number();
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      xPathLexer2.identifier();
      xPathLexer0.operatorName();
      xPathLexer1.setPreviousToken(token9);
      assertEquals(30, token9.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer2.setXPath(") (");
      Token token11 = xPathLexer2.pipe();
      assertEquals(")", token11.getTokenText());
      
      Token token12 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
      assertEquals("", token12.getTokenText());
      
      Token token13 = xPathLexer2.leftParen();
      assertEquals(" ", token13.getTokenText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.4184085987278043
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.star();
      assertEquals("W", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("(k", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("@]7w<~&A");
      Token token6 = xPathLexer2.nextToken();
      assertEquals("@", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer2.or();
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals("V", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      xPathLexer1.plus();
      Token token10 = xPathLexer1.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertEquals("h", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("-c3SWw(k+Vh],");
      Token token12 = xPathLexer3.notEquals();
      assertEquals("-c", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.2230516212596956
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("S6");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("S6", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.2219696870303052
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("m", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      String string0 = token3.toString();
      assertEquals("[ (20) (.)", string0);
      
      Token token4 = xPathLexer0.minus();
      assertEquals("w", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.XPathLexer", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer0.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer5 = new XPathLexer("[ (20) (.)");
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.440074495757916
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.dots();
      assertEquals("v", token1.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      String string0 = token0.toString();
      assertEquals("[ (23) (@)", string0);
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("Z", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.dots();
      assertEquals(13, token4.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("k9ct8EUG5");
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer1.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("k", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("@vrZ");
      xPathLexer2.or();
      Token token6 = xPathLexer2.nextToken();
      assertEquals(16, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("k9ct8EUG5");
      Token token7 = xPathLexer3.rightParen();
      assertEquals(2, token7.getTokenType());
      assertEquals("k", token7.getTokenText());
      
      Token token8 = xPathLexer3.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.3461608924184265
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("{", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(":", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      char char0 = xPathLexer0.LA(3);
      assertEquals('t', char0);
      
      Token token3 = xPathLexer0.dots();
      assertEquals("/", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("k", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("tH", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      char char1 = xPathLexer0.LA(1);
      assertEquals('\uFFFF', char1);
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3114417530330291
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer1.at();
      xPathLexer0.or();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("5");
      xPathLexer3.colon();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.or();
      xPathLexer3.not();
      xPathLexer4.relationalOperator();
      xPathLexer3.slashes();
      xPathLexer4.plus();
      XPathLexer xPathLexer5 = new XPathLexer("5");
      xPathLexer5.dollar();
      xPathLexer4.doubleColon();
      xPathLexer4.consume((-3158));
      xPathLexer5.identifierOrOperatorName();
      xPathLexer5.relationalOperator();
      // Undeclared exception!
      try { 
        xPathLexer4.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.636360380705737
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.and();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath(";N~z&fk($/.[*Ki0");
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer("~J,:1HBg4)f");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.or();
      Token token4 = xPathLexer0.not();
      assertEquals("~", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer2.equals();
      assertEquals(21, token5.getTokenType());
      assertEquals("~", token5.getTokenText());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals("J", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer2.plus();
      assertEquals(",", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("z", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("&f", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer3.relationalOperator();
      xPathLexer3.identifierOrOperatorName();
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token11);
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6811114701939964
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("c", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("3", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals("S", token3.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("Ww", token4.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.leftParen();
      assertEquals("k", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("FFoMue8KCWQjC.'P");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.or();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token7 = xPathLexer4.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer4.notEquals();
      xPathLexer4.identifier();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("Vh", token8.getTokenText());
      
      xPathLexer1.relationalOperator();
      xPathLexer2.or();
      Token token9 = xPathLexer0.notEquals();
      assertEquals("],", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer1.identifier();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer4.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5215690170338725
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer("1{:/ktH");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      xPathLexer2.slashes();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("dNJvX\"r(7m3QKo%58@");
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token1 = xPathLexer5.at();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer4.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("dNJvX", token2.getTokenText());
      
      xPathLexer5.mod();
      Token token3 = xPathLexer4.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("\"", token3.getTokenText());
      
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.operatorName();
      Token token4 = xPathLexer1.star();
      assertEquals("{", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token6 = xPathLexer1.plus();
      assertEquals(":", token6.getTokenText());
      
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer7.identifierOrOperatorName();
      XPathLexer xPathLexer8 = new XPathLexer("dNJvX\"r(7m3QKo%58@");
      Token token8 = xPathLexer8.notEquals();
      assertEquals("dN", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.8678863904438929
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("&(k_ud.A.zq=YFi(");
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("&(k_ud.A.zq=YFi(");
      Token token0 = xPathLexer1.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer1.or();
      Token token2 = xPathLexer1.notEquals();
      assertEquals("&(", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer1.identifier();
      assertEquals(15, token3.getTokenType());
      assertEquals("k_ud.A.zq", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("(", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0703605418790958
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("c3SWw", token1.getTokenText());
      
      xPathLexer0.dots();
      Token token2 = xPathLexer0.dots();
      assertEquals("k", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("+", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("Vh", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(4, token5.getTokenType());
      assertEquals("]", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("Z5F-nSoQxNap");
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer0.not();
      assertEquals(",", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.slashes();
      assertEquals(11, token7.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer6.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer3.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer6.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer5.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.6221606087765683
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer1.slashes();
      xPathLexer1.notEquals();
      xPathLexer0.identifier();
      xPathLexer1.nextToken();
      xPathLexer1.dots();
      xPathLexer1.or();
      xPathLexer1.notEquals();
      xPathLexer2.identifier();
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-156));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.5205768070403738
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals("w", token1.getTokenText());
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("B", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("E[", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      XPathLexer xPathLexer2 = new XPathLexer("V';\"0?");
      Token token6 = xPathLexer2.not();
      assertEquals("V", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals("'", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("n`J7PSei", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer1.dots();
      assertEquals("", token9.getTokenText());
      assertEquals(13, token9.getTokenType());
      
      xPathLexer3.colon();
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer2.colon();
      assertEquals(";", token11.getTokenText());
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("n", token12.getTokenText());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.41730474889665
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.not();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      assertEquals("m", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token1 = xPathLexer1.notEquals();
      assertEquals("co", token1.getTokenText());
      
      xPathLexer1.mod();
      Token token2 = xPathLexer1.rightParen();
      assertEquals("m", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("we", token4.getTokenText());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(".", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token6 = xPathLexer3.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer3.or();
      xPathLexer1.consume(1342);
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer3.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer4.dots();
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.dollar();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("e", token11.getTokenText());
      
      xPathLexer4.and();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token12 = xPathLexer6.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer4.nextToken();
      assertEquals(15, token13.getTokenType());
      assertEquals("om.werken.saxpath.XPathLexer", token13.getTokenText());
      
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0660352776292246
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("-YPy");
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      xPathLexer2.rightParen();
      xPathLexer1.star();
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer("-YPy");
      xPathLexer1.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.doubleColon();
      xPathLexer6.nextToken();
      XPathLexer xPathLexer7 = null;
      try {
        xPathLexer7 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5989811769150832
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      Token token2 = xPathLexer0.slashes();
      assertEquals("r", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("ke", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = new Token(29, "com.werken.saxpath.XPathLexer", 29, 29);
      Token token6 = xPathLexer0.pipe();
      assertEquals("n", token6.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      assertEquals("o", token1.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals(31, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals("s", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      assertEquals("a", token10.getTokenText());
      
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.star();
      assertEquals("x", token13.getTokenText());
      
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      assertEquals("p", token14.getTokenText());
      
      Token token15 = xPathLexer1.dollar();
      assertEquals(26, token15.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token16 = xPathLexer2.minus();
      assertEquals(6, token16.getTokenType());
      assertEquals("c", token16.getTokenText());
      
      Token token17 = xPathLexer2.notEquals();
      assertEquals(22, token17.getTokenType());
      assertEquals("om", token17.getTokenText());
      
      Token token18 = xPathLexer0.identifier();
      assertEquals("ath.XPathLexer", token18.getTokenText());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.3965368987385296
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer0.dots();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.comma();
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("=", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.mod();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("u", token5.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      assertEquals("H", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      XPathLexer xPathLexer3 = new XPathLexer("=uH0\"TWasY?dqH$+5\"");
      Token token8 = xPathLexer1.identifier();
      assertEquals("0", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer3.nextToken();
      assertEquals("=", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer2.colon();
      assertEquals("=", token10.getTokenText());
      
      Token token11 = xPathLexer3.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("uH", token11.getTokenText());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.3108084039605277
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("wgBE", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("[", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals(2, token3.getTokenType());
      assertEquals("@", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("n`", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      assertEquals("P", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token6 = xPathLexer1.star();
      assertEquals("4", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("S", token7.getTokenText());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("ei", token8.getTokenText());
      
      Token token9 = xPathLexer0.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.identifier();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.nextToken();
      Token token11 = xPathLexer1.leftParen();
      assertEquals("w", token11.getTokenText());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.711582152427744
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.setXPath("6$V3uda]UmsQ)C]M");
      xPathLexer0.and();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("6$", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.slashes();
      assertEquals("V", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("3u", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.setPreviousToken(token0);
      assertEquals(11, token0.getTokenType());
      
      Token token5 = xPathLexer2.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer1.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals("d", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.rightParen();
      Token token8 = xPathLexer0.at();
      assertEquals("]", token8.getTokenText());
      assertEquals(16, token8.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer3 = new XPathLexer("paGpY#n?% 538J");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("6$V3uda]UmsQ)C]M");
      Token token9 = xPathLexer4.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("6", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("fG_O(=R&SZ");
      Token token10 = xPathLexer3.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("p", token10.getTokenText());
      
      Token token11 = xPathLexer5.nextToken();
      assertEquals("fG_O", token11.getTokenText());
      
      Token token12 = xPathLexer3.rightParen();
      assertEquals("a", token12.getTokenText());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(21, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer6.not();
      assertEquals(23, token14.getTokenType());
      
      Token token15 = xPathLexer3.nextToken();
      assertEquals(15, token15.getTokenType());
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.5545999880430137
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.or();
      Token token1 = xPathLexer0.doubleColon();
      assertEquals("om", token1.getTokenText());
      
      xPathLexer0.endPosition();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      Token token2 = xPathLexer0.slashes();
      assertEquals("e", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer1.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("e", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("c", token0.getTokenText());
      
      Token token6 = xPathLexer0.number();
      assertEquals("", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals("n.", token7.getTokenText());
      assertEquals(14, token7.getTokenType());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.notEquals();
      assertEquals("sa", token8.getTokenText());
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("FjCn#[{UnDa");
      Token token9 = xPathLexer0.identifier();
      assertEquals("xpath.XPathLexer", token9.getTokenText());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer2.mod();
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("#", token11.getTokenText());
      
      Token token12 = xPathLexer2.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("[", token12.getTokenText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7546758190125926
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer2.nextToken();
      xPathLexer2.slashes();
      xPathLexer2.not();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.number();
      xPathLexer1.dots();
      xPathLexer3.or();
      xPathLexer4.notEquals();
      xPathLexer1.identifier();
      xPathLexer2.nextToken();
      Token token1 = xPathLexer1.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.49537317517472
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertEquals("c3SWw", token1.getTokenText());
      
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.at();
      assertEquals("h", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("]", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.mod();
      Token token6 = xPathLexer0.not();
      assertEquals(",", token6.getTokenText());
      
      xPathLexer0.mod();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("-", token8.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.notEquals();
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.notEquals();
      assertEquals("c3", token10.getTokenText());
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer1.dollar();
      assertEquals(26, token11.getTokenType());
      assertEquals("c", token11.getTokenText());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.4831765866636433
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer0.getPreviousToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer4.not();
      xPathLexer4.slashes();
      xPathLexer3.plus();
      xPathLexer0.dollar();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.566384202596466
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.leftParen();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.currentPosition();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.colon();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.hasMoreChars();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("yU[lPT_@D\"jx]bQwB");
      xPathLexer0.equals();
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      xPathLexer0.mod();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.5137479634785307
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(">");
      Token token0 = xPathLexer0.relationalOperator();
      token0.toString();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("[ (");
      xPathLexer1.nextToken();
      xPathLexer1.comma();
      xPathLexer1.rightParen();
      xPathLexer1.getPreviousToken();
      Token token1 = xPathLexer0.div();
      assertNull(token1);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.759431711880385
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer1.slashes();
      xPathLexer1.notEquals();
      xPathLexer0.identifier();
      xPathLexer1.nextToken();
      xPathLexer2.minus();
      xPathLexer1.dots();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer0.mod();
      xPathLexer2.colon();
      Token token0 = xPathLexer3.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.currentPosition();
      xPathLexer0.consume((-2229));
      xPathLexer0.isIdentifierStartChar('}');
      xPathLexer0.notEquals();
      xPathLexer0.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9294985710298584
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token1 = xPathLexer2.nextToken();
      assertEquals("com.werken.saxpath.Token", token1.getTokenText());
      
      Token token2 = xPathLexer2.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer1.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("co", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      Token token4 = xPathLexer2.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      Token token5 = xPathLexer1.literal();
      assertNull(token5);
      
      xPathLexer3.operatorName();
      Token token6 = xPathLexer2.pipe();
      xPathLexer1.setPreviousToken(token6);
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer3.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer1.or();
      xPathLexer0.notEquals();
      Token token10 = xPathLexer3.plus();
      assertEquals(5, token10.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      Token token11 = xPathLexer2.identifierOrOperatorName();
      assertNull(token11);
      
      xPathLexer2.relationalOperator();
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer3.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer3.equals();
      assertEquals(21, token14.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token15 = xPathLexer5.not();
      assertEquals(23, token15.getTokenType());
      
      Token token16 = xPathLexer2.dollar();
      assertEquals(26, token16.getTokenType());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.6776765509208462
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.at();
      assertEquals("g", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("E[", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("@", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals("(", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      XPathLexer xPathLexer2 = new XPathLexer("V';\"0?");
      Token token7 = xPathLexer2.not();
      assertEquals("V", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals("'", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("n", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer2.nextToken();
      assertEquals(";\"0?", token10.getTokenText());
      
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      assertEquals(";", token11.getTokenText());
      
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.identifierOrOperatorName();
      Token token12 = xPathLexer0.notEquals();
      assertEquals("`J", token12.getTokenText());
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token13);
      assertEquals("", token13.getTokenText());
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.5687229148614836
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      Token token2 = xPathLexer0.at();
      assertEquals("g", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertNotSame(token3, token1);
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("B", token4.getTokenText());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("E[", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      assertEquals("@", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals("(", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      XPathLexer xPathLexer2 = new XPathLexer("V';\"0?");
      Token token8 = xPathLexer2.not();
      assertEquals("V", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer2.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("'", token9.getTokenText());
      
      Token token10 = xPathLexer0.plus();
      assertEquals(5, token10.getTokenType());
      assertEquals("n", token10.getTokenText());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals("`", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer2.nextToken();
      assertEquals(";\"0?", token12.getTokenText());
      
      Token token13 = xPathLexer2.dots();
      assertEquals(13, token13.getTokenType());
      assertEquals(";", token13.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.equals();
      xPathLexer3.or();
      Token token14 = xPathLexer2.equals();
      assertEquals("\"", token14.getTokenText());
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.1308596534603357
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.relationalOperator();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.literal();
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.setXPath("]:mr/g\"Rt");
      xPathLexer0.literal();
      xPathLexer0.minus();
      xPathLexer0.isIdentifierChar('#');
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertNotNull(token3);
      
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightParen();
      xPathLexer0.setPreviousToken(token8);
      assertEquals(2, token8.getTokenType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.2508807221339566
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.consume((-798));
      xPathLexer0.consume(118);
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.currentPosition();
      // Undeclared exception!
      try { 
        xPathLexer0.operatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.5400363038209806
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer0.comma();
      xPathLexer1.notEquals();
      xPathLexer1.mod();
      String string0 = null;
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.4400322431066916
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.comma();
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.div();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.mod();
      xPathLexer0.relationalOperator();
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.not();
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.pipe();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.whitespace();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.number();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.slashes();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.leftParen();
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.pipe();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.div();
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token14 = xPathLexer0.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.5955668643712078
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.getXPath();
      xPathLexer1.consume((-3955));
      XPathLexer xPathLexer3 = new XPathLexer("_'~YJH|t0-H");
      // Undeclared exception!
      try { 
        xPathLexer1.identifierOrOperatorName();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.4972286389421336
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.minus();
      String string0 = token2.toString();
      assertEquals("[ (6) (B)", string0);
      
      xPathLexer0.minus();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (B)");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("[", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer1.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("[@", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.or();
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("4", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals("(", token7.getTokenText());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("w", token8.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token9 = xPathLexer0.nextToken();
      assertEquals("n`J7PSei", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.or();
      Token token10 = xPathLexer4.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("4", token10.getTokenText());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.6693266301329477
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.minus();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      xPathLexer1.setXPath("4wgBE[@(n`J7PSei");
      xPathLexer0.star();
      Token token0 = xPathLexer1.notEquals();
      xPathLexer1.slashes();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.operatorName();
      xPathLexer1.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer2.at();
      xPathLexer0.or();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer1.mod();
      assertNull(token1);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.5820006624605458
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("4", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token1 = xPathLexer0.comma();
      assertEquals("g", token1.getTokenText());
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.plus();
      assertEquals("E", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(3, token3.getTokenType());
      assertEquals("[", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("n", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("`", token5.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer1.or();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("J", token6.getTokenText());
      
      Token token7 = xPathLexer1.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("aVFte!N-gpdQtU!u");
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.2371036846319663
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("1", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("{", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("/", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("1{:/ktH");
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token5 = xPathLexer2.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer2.slashes();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("k", token6.getTokenText());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("1{", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      Token token8 = xPathLexer2.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals("t", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.4976304691326734
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      XPathLexer xPathLexer1 = new XPathLexer("-c3SWw(k+Vh],");
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer1.not();
      xPathLexer0.dots();
      xPathLexer1.colon();
      xPathLexer0.doubleColon();
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer3.equals();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.5535257165264607
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token2 = xPathLexer0.comma();
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer1.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer("r#qku");
      Token token5 = xPathLexer2.nextToken();
      assertEquals("r", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.or();
      Token token7 = xPathLexer4.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.slashes();
      assertEquals(11, token8.getTokenType());
      
      xPathLexer1.notEquals();
      xPathLexer5.identifier();
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer4.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer2.or();
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer2.identifier();
      assertEquals("ku", token12.getTokenText());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.783693213349526
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.rightBracket();
      xPathLexer0.currentPosition();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(".w", token2.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("erken.saxpath.XPathLexer", token3.getTokenText());
      
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("c", token6.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (26) (o)", string0);
      
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.number();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer1.at();
      assertEquals("m", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      xPathLexer0.or();
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer2.relationalOperator();
      xPathLexer0.identifier();
      Token token13 = xPathLexer1.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
      
      xPathLexer0.not();
      Token token15 = xPathLexer0.dollar();
      assertEquals(26, token15.getTokenType());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.1648317202454193
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.plus();
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.equals();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.minus();
      assertEquals(6, token7.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.5801427860543809
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("V@Tf J8");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Tf", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(" ", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("J8", token5.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.mod();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token9 = xPathLexer2.nextToken();
      assertEquals(3, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer3.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer2.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals(" (", token11.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("Up3/ut*,$~3_S3x,");
      xPathLexer4.and();
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.3693821196946767
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.slashes();
      xPathLexer0.div();
      Token token0 = xPathLexer1.and();
      assertNull(token0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.3669061747673477
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.star();
      assertEquals("k", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer1.notEquals();
      assertEquals("co", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      assertEquals("]", token5.getTokenText());
      
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer1.at();
      xPathLexer0.or();
      Token token6 = xPathLexer1.nextToken();
      assertEquals(".", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("5");
      Token token7 = xPathLexer3.colon();
      assertEquals("5", token7.getTokenText());
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer4.or();
      Token token8 = xPathLexer3.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer4.relationalOperator();
      Token token9 = xPathLexer3.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer4.plus();
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("5");
      Token token11 = xPathLexer5.dollar();
      assertEquals("5", token11.getTokenText());
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer4.doubleColon();
      assertEquals("om", token12.getTokenText());
      assertEquals(19, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.consume((-3158));
      xPathLexer5.identifierOrOperatorName();
      xPathLexer5.relationalOperator();
      Token token13 = xPathLexer4.identifierOrOperatorName();
      assertEquals(".werken.saxpath.XPathLexer", token13.getTokenText());
      
      Token token14 = xPathLexer5.notEquals();
      assertEquals(22, token14.getTokenType());
      
      xPathLexer5.identifierOrOperatorName();
      Token token15 = xPathLexer1.at();
      assertEquals("w", token15.getTokenText());
      assertEquals(16, token15.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4408272121570205
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("1{:/ktH");
      xPathLexer2.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(30, token1.getTokenType());
      
      Token token2 = xPathLexer1.slashes();
      assertEquals(11, token2.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer2.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("1", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("cJ[f~");
      Token token5 = xPathLexer2.minus();
      assertEquals("{", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("cJ[f~");
      Token token6 = xPathLexer6.doubleColon();
      assertEquals("c", token6.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer("");
      Token token7 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      assertNotNull(token7);
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token8 = xPathLexer5.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer6.colon();
      assertEquals("J", token9.getTokenText());
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals("[f", token10.getTokenText());
      
      Token token11 = xPathLexer3.colon();
      assertEquals(18, token11.getTokenType());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer6.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("[", token13.getTokenText());
      
      boolean boolean0 = xPathLexer7.isIdentifierStartChar('{');
      assertFalse(boolean0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.618407868267424
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.currentPosition();
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.number();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.literal();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.rightParen();
      assertEquals(2, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("yU[lPT_@D\"jx]bQwB");
      Token token10 = xPathLexer0.equals();
      assertEquals("y", token10.getTokenText());
      
      xPathLexer0.notEquals();
      Token token11 = xPathLexer0.notEquals();
      assertEquals("lP", token11.getTokenText());
      
      xPathLexer0.mod();
      Token token12 = xPathLexer0.slashes();
      assertEquals("T", token12.getTokenText());
      
      xPathLexer0.or();
      Token token13 = xPathLexer0.plus();
      assertEquals("_", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      boolean boolean1 = xPathLexer0.isIdentifierStartChar('!');
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.714376372878234
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("v", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals("r", token2.getTokenText());
      
      Token token3 = xPathLexer0.number();
      xPathLexer0.and();
      String string0 = token0.toString();
      assertEquals("[ (23) (@)", string0);
      
      Token token4 = xPathLexer0.slashes();
      assertEquals("Z", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.number();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token3);
      assertEquals(30, token3.getTokenType());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer0.star();
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (23) (@)");
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      assertEquals("[", token9.getTokenText());
      
      xPathLexer0.or();
      Token token10 = xPathLexer2.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals(" (", token10.getTokenText());
      
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer2.star();
      assertEquals("2", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
      
      Token token13 = xPathLexer1.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer0.and();
      Token token14 = xPathLexer1.minus();
      assertEquals(6, token14.getTokenType());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.7790033841057438
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer0.equals();
      xPathLexer0.minus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer0.number();
      xPathLexer1.dots();
      xPathLexer2.getXPath();
      xPathLexer1.consume((-3955));
      XPathLexer xPathLexer4 = new XPathLexer("BPc7B|pAU.|Clz*lA/");
      xPathLexer4.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer3.plus();
      xPathLexer4.comma();
      xPathLexer4.operatorName();
      xPathLexer4.rightBracket();
      xPathLexer2.notEquals();
      // Undeclared exception!
      try { 
        xPathLexer1.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.270502892959526
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.notEquals();
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("1", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      xPathLexer1.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("{:/ktH", token2.getTokenText());
      
      xPathLexer1.slashes();
      Token token3 = xPathLexer1.rightParen();
      assertEquals(2, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("{", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("cJ[f~");
      xPathLexer1.minus();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      Token token5 = xPathLexer3.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer1.dots();
      Token token6 = xPathLexer0.at();
      assertEquals(":", token6.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(11, token7.getTokenType());
      assertEquals("/", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer1.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer4.setXPath("");
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("&@H}1s");
      Token token10 = xPathLexer5.colon();
      assertEquals("&", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer5.doubleColon();
      assertEquals("@H", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer3.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer3.not();
      assertEquals(23, token13.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.4713638363746917
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("c3SWw", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("+V", token4.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("Z5F-nSoQxNap");
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("h", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.slashes();
      assertEquals(11, token6.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer3.colon();
      Token token8 = xPathLexer5.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.4621503310832598
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("`ddBBx");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("`", token0.getTokenText());
      
      Token token1 = xPathLexer0.equals();
      assertEquals("d", token1.getTokenText());
      assertEquals(21, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftBracket();
      assertEquals("d", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.literal();
      assertNull(token4);
      
      xPathLexer0.leftBracket();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.star();
      xPathLexer0.or();
      Token token7 = xPathLexer0.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.mod();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.leftParen();
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.or();
      xPathLexer0.endPosition();
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6790857783009943
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(30, token0.getTokenType());
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("wgBE", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("[", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals("(", token4.getTokenText());
      assertEquals(2, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.or();
      Token token5 = xPathLexer0.not();
      assertEquals("n", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer2.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals("`", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer1.identifierOrOperatorName();
      Token token10 = xPathLexer2.notEquals();
      assertEquals(22, token10.getTokenType());
      
      boolean boolean0 = xPathLexer2.isIdentifierStartChar('e');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.4201488849822825
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.comma();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.slashes();
      xPathLexer0.operatorName();
      xPathLexer0.comma();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.and();
      boolean boolean0 = xPathLexer0.isIdentifierChar('V');
      assertTrue(boolean0);
      
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer0.star();
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(16, int0);
      
      xPathLexer0.dots();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.endPosition();
      xPathLexer0.getPreviousToken();
      Token token11 = xPathLexer0.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.5525055758150346
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertNull(token0);
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("w", token1.getTokenText());
      
      boolean boolean0 = xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.getPreviousToken();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.colon();
      assertEquals("B", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.at();
      assertEquals("E", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftBracket();
      assertEquals("[", token5.getTokenText());
      assertEquals(3, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(16, token7.getTokenType());
      
      char char0 = xPathLexer1.LA(21);
      assertEquals('\uFFFF', char0);
      
      boolean boolean1 = xPathLexer1.isIdentifierStartChar(':');
      assertFalse(boolean1 == boolean0);
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("(", token9.getTokenText());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals("n`", token10.getTokenText());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.5401444518246494
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("8vlVS)J");
      Token token0 = xPathLexer0.number();
      assertEquals("8", token0.getTokenText());
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("v", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("l", token2.getTokenText());
      
      xPathLexer0.LA(12);
      Token token3 = xPathLexer0.dots();
      assertEquals("V", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.slashes();
      assertEquals("S", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      Token token5 = xPathLexer0.identifier();
      assertEquals("", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals(")J", token6.getTokenText());
      
      char char0 = xPathLexer0.LA(4429);
      assertEquals('\uFFFF', char0);
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.2332707304901138
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals("4", token0.getTokenText());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("wgBE", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(3, token2.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("(n", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.or();
      Token token5 = xPathLexer0.not();
      assertEquals("`", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.slashes();
      assertEquals("4", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals("J", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("@,|GPCAGAd*GB\"W3`");
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("@", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token9 = xPathLexer2.nextToken();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer2.dots();
      assertEquals("|", token10.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      Token token11 = xPathLexer4.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer1.or();
      Token token12 = xPathLexer3.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("7", token13.getTokenText());
      
      Token token14 = xPathLexer2.leftBracket();
      assertEquals("G", token14.getTokenText());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.3419154780949614
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@vrZ");
      Token token0 = xPathLexer0.not();
      Token token1 = xPathLexer0.dots();
      assertEquals("v", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      xPathLexer0.number();
      xPathLexer0.and();
      String string0 = token0.toString();
      assertEquals("[ (23) (@)", string0);
      
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("k9ct8EUG5");
      xPathLexer0.or();
      xPathLexer1.not();
      Token token4 = xPathLexer1.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("9", token4.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("7a_+r`");
      Token token5 = xPathLexer2.notEquals();
      assertEquals("7a", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer2.nextToken();
      assertEquals("_", token6.getTokenText());
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.or();
      Token token8 = xPathLexer3.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer3.minus();
      assertEquals(6, token9.getTokenType());
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.4825628963506061
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals("-", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      assertEquals("c", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("S", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Ww(k+Vh],", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("Ww", token5.getTokenText());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("(", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.dots();
      assertEquals("k", token8.getTokenText());
      assertEquals(13, token8.getTokenType());
      
      xPathLexer1.colon();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer2.colon();
      assertEquals(18, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token11 = xPathLexer0.at();
      assertEquals("h", token11.getTokenText());
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer3.equals();
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.4474508207711407
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("gBE", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.or();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(16, token1.getTokenType());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("(", token2.getTokenText());
      
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("n`", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals(3, token4.getTokenType());
      assertEquals("J", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals("P", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-F hg]O%!%%y'}");
      XPathLexer xPathLexer2 = new XPathLexer("V';\"0?");
      Token token7 = xPathLexer2.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals("e", token10.getTokenText());
      assertEquals(26, token10.getTokenType());
      
      xPathLexer2.nextToken();
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.whitespace();
      xPathLexer3.equals();
      xPathLexer3.or();
      Token token12 = xPathLexer2.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("\"", token12.getTokenText());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.010701234185562
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("-c3SWw(k+Vh],");
      Token token2 = xPathLexer1.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("-c3SWw(k+Vh],");
      xPathLexer3.or();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token5 = xPathLexer6.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer2.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.plus();
      assertEquals("c", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer4.dollar();
      assertEquals("-", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3234529518873408
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token0 = xPathLexer0.comma();
      assertEquals("4", token0.getTokenText());
      assertEquals(32, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("wgBE", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("[", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("`J7PSei", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.or();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(30, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token5 = xPathLexer3.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("4", token5.getTokenText());
      
      Token token6 = xPathLexer2.dots();
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer3.colon();
      assertEquals("w", token7.getTokenText());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals("wg", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer2.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("tiNldht=gd:qw");
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("`", token10.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.027952748364517
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1{:/ktH");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("1", token0.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer1.slashes();
      Token token2 = xPathLexer1.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("cJ[f~");
      Token token4 = xPathLexer1.minus();
      assertEquals(6, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer3.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("cJ[f~");
      xPathLexer5.not();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token7 = xPathLexer4.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer5.colon();
      assertEquals("c", token8.getTokenText());
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer2.not();
      assertEquals(23, token10.getTokenType());
      assertEquals("", token10.getTokenText());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals(11, token11.getTokenType());
      assertEquals("/", token11.getTokenText());
      
      Token token12 = xPathLexer3.colon();
      assertEquals(18, token12.getTokenType());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.4799555205445176
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4411836182692033
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("-c3SWw(k+Vh],");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("-", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.dots();
      assertEquals("k", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("+", token2.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(19, token3.getTokenType());
      assertEquals("Vh", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(4, token4.getTokenType());
      assertEquals("]", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("Z5F-nSoQxNap");
      xPathLexer1.or();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("-c3SWw(k+Vh],");
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer6.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer3.leftParen();
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer(" 4");
      Token token9 = xPathLexer7.nextToken();
      assertEquals(30, token9.getTokenType());
      
      Token token10 = xPathLexer3.rightParen();
      assertEquals(2, token10.getTokenType());
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.6156305770275505
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer1.not();
      assertEquals(23, token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token1 = xPathLexer3.slashes();
      assertEquals(11, token1.getTokenType());
      
      xPathLexer2.or();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token2 = xPathLexer6.doubleColon();
      assertEquals("co", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      Token token3 = xPathLexer3.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.51633098142039
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("4wgBE[@(n`J7PSei");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.or();
      Token token0 = xPathLexer0.nextToken();
      assertEquals("gBE[@(n`J7PSei", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("B", token2.getTokenText());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      assertEquals("E", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(3, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("@(", token5.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("4wgBE[@(n`J7PSei");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.or();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("4", token6.getTokenText());
      
      Token token7 = xPathLexer2.slashes();
      assertEquals(11, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("4wgBE[@(n`J7PSei");
      Token token10 = xPathLexer4.nextToken();
      assertEquals(30, token10.getTokenType());
      assertEquals("4", token10.getTokenText());
      
      xPathLexer0.dots();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.or();
      Token token11 = xPathLexer1.dots();
      assertEquals("w", token11.getTokenText());
  }
}
