/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:39:43 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Discretize discretize0 = new Discretize("Sets the desired weight of instances per interval for equal-frequency binning.");
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.m_MakeBinary = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      System.setCurrentTimeMillis(160L);
      discretize0.getOptions();
      boolean boolean0 = discretize0.getMakeBinary();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Discretize discretize0 = new Discretize("xf");
      discretize0.m_UseBinNumbers = true;
      discretize0.getAttributeIndices();
      int int0 = 1284;
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setMakeBinary(true);
      discretize0.setInvertSelection(false);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3454.7368616033546));
      discretize0.toString();
      discretize0.setIgnoreClass(false);
      discretize0.attributeIndicesTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 0;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", protectedProperties2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 0);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2305129151956655
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3454.7368616033546));
      discretize0.toString();
      discretize0.setIgnoreClass(false);
      discretize0.attributeIndicesTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 0;
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("\tUse equal-frequency instead of equal-width discretization.", protectedProperties2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("date", arrayList0, 0);
      discretize0.setInputFormat(instances0);
      discretize0.getOptions();
      discretize0.listOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1354);
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(1354);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1354
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.2604276858025543
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.toString();
      discretize0.setIgnoreClass(false);
      discretize0.attributeIndicesTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", list0);
      arrayList0.add(attribute0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute("ine.sepaator", protectedProperties0);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 1822);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Discretize discretize1 = new Discretize("string");
      discretize1.isFirstBatchDone();
      boolean boolean0 = discretize0.batchFinished();
      assertTrue(boolean0);
      
      Discretize discretize2 = new Discretize();
      discretize2.useBinNumbersTipText();
      String string1 = discretize0.useEqualFrequencyTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      assertEquals(10, discretize0.getBins());
      
      discretize1.findNumBinsTipText();
      assertEquals(10, discretize1.getBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6921342243091364
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("K97Zw ", arrayList0, 3220);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) instances1;
      objectArray0[1] = (Object) instances0;
      instances0.toArray(objectArray0);
      instances0.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("bZjFCbk{Fk");
      SystemInUtil.addInputLine("@relation");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      discretize0.setInputFormat(instances0);
      discretize0.invertSelectionTipText();
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2350664588969766
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("a5)B&zk--e", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      arrayList0.trimToSize();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "a5)B&zk--e");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) instances1);
      predicate3.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      predicate8.or(predicate4);
      predicate5.negate();
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate8);
      instances1.iterator();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      instances1.parallelStream();
      Attribute attribute1 = new Attribute("Number of bins.");
      SystemInUtil.addInputLine("*sSgCY/Zw1KJj&");
      arrayList0.add(attribute0);
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      discretize0.isFirstBatchDone();
      discretize0.batchFinished();
      SparseInstance sparseInstance0 = new SparseInstance(200);
      discretize0.convertInstance(sparseInstance0);
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1695294282768733
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      arrayList0.trimToSize();
      instances1.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) instances1);
      predicate5.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      predicate2.negate();
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate6);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Instances.mergeInstances(instances1, instances1);
      instances1.stream();
      Attribute attribute1 = new Attribute("Number of bins.");
      SystemInUtil.addInputLine("*sSgCY/Zw1KJj&");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      discretize0.isFirstBatchDone();
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 2;
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      discretize0.convertInstance(denseInstance0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.975507230548075
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 3220);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) instances1;
      objectArray0[1] = (Object) instances0;
      discretize0.setFindNumBins(true);
      instances0.toArray(objectArray0);
      instances0.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      arrayList0.stream();
      Attribute attribute0 = new Attribute("bZjFCbk{Fk");
      attribute0.equalsMsg((Object) null);
      SystemInUtil.addInputLine("@relation");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      Random.setNextRandom((-2178));
      discretize0.findNumBinsTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals(5.7, double0, 0.01);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.163271163315031
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 3220);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) instances1;
      objectArray0[1] = (Object) instances0;
      discretize0.setFindNumBins(true);
      instances0.toArray(objectArray0);
      instances0.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      arrayList0.stream();
      Attribute attribute0 = new Attribute("bZjFCbk{Fk");
      attribute0.equalsMsg((Object) null);
      SystemInUtil.addInputLine("@relation");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)10;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute1 = new Attribute("@end");
      arrayList0.add(attribute1);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      discretize0.isFirstBatchDone();
      discretize0.batchFinished();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.049357538804166
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.676773461851994;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Instances instances0 = new Instances("", arrayList0, 3220);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      discretize0.setFindNumBins(true);
      instances0.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("", instances1);
      arrayList0.trimToSize();
      discretize0.isNewBatch();
      Attribute.typeToString((-1303));
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      attribute0.equalsMsg((Object) null);
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Random.setNextRandom((-2178));
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextDouble();
      instances0.resampleWithWeights((java.util.Random) mockRandom0);
      discretize0.findNumBinsTipText();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      discretize0.setInputFormat(instances0);
      discretize0.useBinNumbersTipText();
      discretize0.useEqualFrequencyTipText();
      System.setCurrentTimeMillis(4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6975837295727447
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 4.501047291996611;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("K97Zw ", arrayList0, 3220);
      Object[] objectArray0 = new Object[24];
      objectArray0[7] = (Object) instances0;
      objectArray0[1] = (Object) instances0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.toArray(objectArray0);
      instances0.parallelStream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      arrayList0.stream();
      Attribute attribute0 = new Attribute("bZjFCbk{Fk");
      SystemInUtil.addInputLine("@relation");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1590));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1313650219229507
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setInvertSelection(false);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3454.7368616033546));
      discretize0.toString();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      discretize0.setIgnoreClass(true);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("weka.filters.unsupervised.attribute.Discretize", protectedProperties2);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("weka.filters.unsupervised.attribute.Discretize", arrayList0, 28);
      discretize0.setInputFormat(instances0);
      discretize0.getOptions();
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize();
      discretize1.findNumBinsTipText();
      Discretize discretize2 = new Discretize("K`q1");
      discretize2.isNewBatch();
      attribute0.value((-384));
      arrayList0.add(attribute0);
      discretize1.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.2815850555535593
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setDesiredWeightOfInstancesPerInterval((-3454.7368616033546));
      discretize0.toString();
      discretize0.attributeIndicesTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("ine.sepaator", protectedProperties0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 1822);
      discretize0.setInputFormat(instances0);
      discretize0.getOptions();
      discretize0.listOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      System.setCurrentTimeMillis((-2059L));
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize("-R");
      discretize0.setInvertSelection(true);
      discretize0.getInvertSelection();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      double[][] doubleArray0 = new double[5][5];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = 10.0;
      doubleArray1[1] = (-2149.519);
      doubleArray1[2] = 5.70001;
      doubleArray1[3] = (-5626.7090624830025);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[8];
      doubleArray2[0] = (-5626.7090624830025);
      doubleArray2[1] = 10.0;
      doubleArray2[2] = 10.0;
      doubleArray2[3] = (-5626.7090624830025);
      doubleArray2[4] = (-5626.7090624830025);
      doubleArray2[5] = 2.0;
      doubleArray2[6] = 5.70001;
      doubleArray2[7] = 10.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = 5.70001;
      doubleArray3[1] = (-2149.519);
      doubleArray3[2] = 5.70001;
      doubleArray3[3] = 0.0;
      doubleArray3[4] = 5.70001;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-2149.519);
      doubleArray4[2] = (-2149.519);
      doubleArray4[3] = 0.0;
      doubleArray4[4] = (-2149.519);
      doubleArray4[5] = 0.0;
      doubleArray4[6] = 5.70001;
      doubleArray4[7] = 2.0;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[8];
      doubleArray5[0] = 2.0;
      doubleArray5[1] = 10.0;
      doubleArray5[2] = 439.0;
      doubleArray5[3] = 0.0;
      doubleArray5[4] = 5.70001;
      doubleArray5[5] = 5.70001;
      doubleArray5[6] = 0.0;
      doubleArray5[7] = 2.0;
      doubleArray0[4] = doubleArray5;
      discretize0.m_CutPoints = doubleArray0;
      AllFilter allFilter2 = new AllFilter();
      allFilter2.toString();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(48);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 48
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1829908921331764
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[10];
      doubleArray0[1] = (-355.914);
      int[] intArray0 = new int[2];
      intArray0[0] = (-4555);
      intArray0[1] = 170;
      SparseInstance sparseInstance0 = new SparseInstance((-355.914), doubleArray0, intArray0, 170);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 6);
      Instances instances1 = new Instances(instances0, (-2032));
      Attribute attribute0 = new Attribute("@relation", instances0, 170);
      Attribute.typeToString(attribute0);
      instances0.containsAll(instances1);
      Attribute.typeToString(attribute0);
      attribute0.indexOfValue("integer");
      Attribute attribute1 = new Attribute("integer", (-1));
      attribute1.value(0);
      binarySparseInstance0.setMissing(attribute1);
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      instances2.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute2 = new Attribute("/packageListWithVersion.txt");
      SystemInUtil.addInputLine("numeric");
      arrayList0.add(attribute2);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances1);
      discretize0.findNumBinsTipText();
      discretize0.isFirstBatchDone();
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(105);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 105
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.178270481463794
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      intArray0[0] = (-4555);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      instances1.stream();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      predicate3.and(predicate2);
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate4);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Instances.mergeInstances(instances1, instances1);
      instances1.stream();
      String string1 = discretize0.binsTipText();
      assertEquals("Number of bins.", string1);
      
      Attribute attribute1 = new Attribute("string", instances1, 4);
      SystemInUtil.addInputLine("*sSgCY/Zw1KJj&");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute2 = attribute1.copy("date");
      arrayList0.add(attribute2);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      String string2 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string2);
      
      discretize0.isFirstBatchDone();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.136296720094677
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      arrayList0.trimToSize();
      instances1.stream();
      discretize0.makeBinaryTipText();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) instances1);
      predicate5.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      predicate2.negate();
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate6);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Instances.mergeInstances(instances1, instances1);
      instances1.stream();
      Attribute attribute1 = new Attribute("Number of bins.");
      SystemInUtil.addInputLine("*sSgCY/Zw1KJj&");
      Attribute attribute2 = new Attribute((String) null);
      arrayList0.add(attribute2);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      String string1 = discretize0.findNumBinsTipText();
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string1);
      
      discretize0.isFirstBatchDone();
      discretize0.batchFinished();
      boolean boolean0 = discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8376608800972254
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-355.914);
      int[] intArray0 = new int[8];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = (-4555);
      intArray0[1] = 177;
      SparseInstance sparseInstance0 = new SparseInstance((-355.914), doubleArray0, intArray0, 177);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.stream();
      Instances instances0 = new Instances("", arrayList0, 6);
      Instances instances1 = new Instances(instances0, (-2010));
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      Instances.mergeInstances(instances2, instances2);
      instances1.iterator();
      MockRandom mockRandom0 = new MockRandom();
      instances2.resample(mockRandom0);
      instances2.parallelStream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      MockRandom mockRandom1 = new MockRandom();
      Instances.mergeInstances(instances0, instances2);
      Attribute attribute0 = new Attribute("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      attribute0.value((-2010));
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances1);
      discretize0.calculateCutPoints();
      discretize0.useEqualFrequencyTipText();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4942584884831285
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-355.914);
      int[] intArray0 = new int[2];
      intArray0[0] = (-4555);
      intArray0[1] = 170;
      SparseInstance sparseInstance0 = new SparseInstance((-355.914), doubleArray0, intArray0, 170);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 6);
      Instances instances1 = new Instances(instances0, 170);
      Attribute attribute0 = new Attribute("@relation", instances0, 170);
      Attribute.typeToString(attribute0);
      Attribute.typeToString(attribute0);
      attribute0.indexOfValue("integer");
      attribute0.value(0);
      sparseInstance0.setMissing(attribute0);
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      instances2.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute1 = new Attribute("/packageListWithVersion.txt");
      SystemInUtil.addInputLine("numeric");
      arrayList0.add(attribute1);
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
      
      boolean boolean0 = discretize0.setInputFormat(instances1);
      discretize0.findNumBinsTipText();
      discretize0.isNewBatch();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "real";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@relation";
      stringArray0[3] = "integer";
      discretize0.setOptions(stringArray0);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(boolean1 == boolean0);
      
      discretize0.convertInstance(sparseInstance0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.206668657765116
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      instances1.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      predicate1.test(discretize0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      predicate3.and(predicate2);
      predicate3.negate();
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate4);
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@data";
      stringArray0[1] = ".arff";
      stringArray0[2] = "numeric";
      stringArray0[3] = "Number of bins.";
      stringArray0[4] = "@data";
      discretize0.setOptions(stringArray0);
      discretize0.m_MakeBinary = false;
      discretize0.findNumBinsTipText();
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3555);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.754627133386218
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      instances1.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      discretize0.isOutputFormatDefined();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate2.or(predicate3);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate3.and(predicate2);
      predicate0.negate();
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate4);
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("date");
      try { 
        discretize1.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at date
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9678355092773265
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.setInvertSelection(true);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3454.7368616033546));
      discretize0.toString();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setIgnoreClass(false);
      discretize0.attributeIndicesTipText();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", protectedProperties2);
      discretize0.getOptions();
      discretize0.listOptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3257379004509158
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(true);
      discretize0.setDesiredWeightOfInstancesPerInterval((-3454.7368616033546));
      discretize0.toString();
      discretize0.setIgnoreClass(false);
      discretize0.attributeIndicesTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", list0);
      arrayList0.add(attribute0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      Attribute attribute1 = new Attribute("ine.sepaator", protectedProperties0);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 1822);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.getBinRangesString(0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      System.setCurrentTimeMillis((-2059L));
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.7460733669022432
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-355.914);
      int[] intArray0 = new int[2];
      intArray0[0] = (-4555);
      intArray0[1] = 170;
      SparseInstance sparseInstance0 = new SparseInstance((-355.914), doubleArray0, intArray0, 170);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 6);
      Instances instances1 = new Instances(instances0, (-2032));
      Attribute attribute0 = new Attribute("@relation", instances0, 170);
      attribute0.indexOfValue("integer");
      Attribute attribute1 = new Attribute("-B", (List<String>) null);
      attribute0.equals(attribute1);
      Attribute attribute2 = new Attribute("integer", (-1));
      attribute2.value(0);
      sparseInstance1.setMissing(attribute2);
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      instances2.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute3 = new Attribute("/packageListWithVersion.txt");
      SystemInUtil.addInputLine("numeric");
      arrayList0.add(attribute3);
      arrayList0.add(attribute3);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances1);
      discretize0.findNumBinsTipText();
      discretize0.isFirstBatchDone();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '/packageListWithVersion.txt' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize("i");
      discretize0.getBinRangesString((-1994091956));
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0976761907196333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      discretize0.setFindNumBins(true);
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Random.setNextRandom((-2178));
      discretize0.findNumBinsTipText();
      discretize0.m_DefaultCols = "weka.core.Version";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.useBinNumbersTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.getOptions();
      assertEquals(5.7, discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.726830484810118
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("K97Zw ", arrayList0, 3220);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Object[] objectArray0 = new Object[24];
      objectArray0[7] = (Object) instances0;
      objectArray0[1] = (Object) instances0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.toArray(objectArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      discretize0.makeBinaryTipText();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, "nC!(7I1");
      discretize0.binsTipText();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.setPermissions(evoSuiteFile2, true, false, true);
      arrayList0.stream();
      Attribute attribute0 = new Attribute("bZjFCbk{Fk");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      discretize0.attributeIndicesTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(100000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.107771272036207
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setInvertSelection(false);
      discretize0.toString();
      discretize0.setIgnoreClass(false);
      discretize0.attributeIndicesTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList2, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", list0);
      arrayList0.add(attribute0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      Attribute attribute1 = new Attribute("ine.sepaator", protectedProperties0);
      arrayList0.add(attribute1);
      Instances instances0 = new Instances("Specify range of attributes to act on. This is a comma separated list of attribute indices,with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".", arrayList0, 1822);
      discretize0.setInputFormat(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      discretize0.batchFinished();
      discretize0.convertInstance(binarySparseInstance0);
      discretize0.getBinRangesString(0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      System.setCurrentTimeMillis((-2059L));
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.782880254385889
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      doubleArray0[1] = (-355.914);
      int[] intArray0 = new int[8];
      intArray0[0] = (-4555);
      doubleArray0[1] = (double) (-4555);
      SparseInstance sparseInstance0 = new SparseInstance((-355.914), doubleArray0, intArray0, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.stream();
      Instances instances0 = new Instances("", arrayList0, 6);
      Instances instances1 = new Instances(instances0, (-2010));
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      instances2.sort(comparator0);
      Instances instances3 = Instances.mergeInstances(instances2, instances2);
      instances1.iterator();
      instances0.stringFreeStructure();
      instances2.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Instances instances4 = Instances.mergeInstances(instances0, instances2);
      instances4.listIterator();
      Attribute attribute0 = new Attribute("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      attribute0.addRelation(instances3);
      attribute0.value((-2010));
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances1);
      discretize0.useEqualFrequencyTipText();
      double double0 = discretize0.m_DesiredWeightOfInstancesPerInterval;
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.654408572990075
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-355.914);
      int[] intArray0 = new int[2];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = (-4555);
      intArray0[1] = 170;
      SparseInstance sparseInstance0 = new SparseInstance((-355.914), doubleArray0, intArray0, 170);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.stream();
      Instances instances0 = new Instances("", arrayList0, 6);
      Instances instances1 = new Instances(instances0, (-2010));
      Attribute attribute0 = new Attribute("@relation", instances0, 170);
      attribute0.value(0);
      binarySparseInstance0.setMissing(attribute0);
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      Instances.mergeInstances(instances2, instances2);
      instances2.iterator();
      instances2.stream();
      discretize0.makeBinaryTipText();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      MockRandom mockRandom0 = new MockRandom();
      instances0.resample(mockRandom0);
      Attribute attribute1 = new Attribute("/packageListWithVersion.txt");
      attribute1.value((-2010));
      arrayList0.add(attribute1);
      arrayList0.add(attribute1);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      boolean boolean0 = discretize0.setInputFormat(instances1);
      assertFalse(boolean0);
      
      discretize0.calculateCutPoints();
      String string1 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string1);
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.4489341378392258
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList0.parallelStream();
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.toArray();
      linkedList2.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      discretize0.setIgnoreClass(true);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.offerFirst((Locale.LanguageRange) null);
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) set0, locale_FilteringMode0);
      Locale.getISOLanguages();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize1 = new Discretize();
      discretize0.getOptions();
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "x7AWH&_{";
      stringArray0[1] = "";
      stringArray0[2] = "-";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayName();
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList4.add((Locale.LanguageRange) null);
      linkedList4.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayScript();
      LinkedList<String> linkedList5 = new LinkedList<String>();
      String[] stringArray0 = Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale2 = Locale.GERMAN;
      Locale.getISOLanguages();
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      discretize0.m_MakeBinary = true;
      LinkedList<Locale> linkedList9 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      discretize0.getOptions();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList16 = new LinkedList<Locale.LanguageRange>();
      assertTrue(linkedList16.equals((Object)linkedList13));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6402761383277222
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Discretize discretize0 = new Discretize("%vqh>16]w<2#$kNO&");
      discretize0.getCapabilities();
      discretize0.m_UseEqualFrequency = true;
      discretize0.m_MakeBinary = true;
      discretize0.getUseEqualFrequency();
      discretize0.getOptions();
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayName();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      locale1.getDisplayScript();
      LinkedList<String> linkedList6 = new LinkedList<String>();
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      discretize0.setMakeBinary(true);
      Locale.getISOLanguages();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      sparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.235229433337145
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      arrayList0.trimToSize();
      discretize0.makeBinaryTipText();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) instances1);
      predicate3.negate();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.or(predicate4);
      predicate2.negate();
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate7);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      instances1.stream();
      Attribute attribute1 = new Attribute("Number of bins.");
      SystemInUtil.addInputLine("*sSgCY/Zw1KJj&");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      discretize0.isFirstBatchDone();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      String string1 = discretize0.useBinNumbersTipText();
      assertEquals("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", string1);
      
      String string2 = discretize0.useEqualFrequencyTipText();
      assertEquals("If set to true, equal-frequency binning will be used instead of equal-width binning.", string2);
      
      discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6195259631210703
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ">~ht@=~U5% Fi.l";
      stringArray0[1] = "";
      stringArray0[2] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[3] = "[Environment] Variable";
      discretize0.listOptions();
      stringArray0[4] = "-M";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      stringArray0[5] = "V#IGNnw{0|Z_R";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9397928111645655
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      intArray0[0] = (-4555);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      instances1.stream();
      Attribute attribute0 = new Attribute("-F");
      arrayList0.add(attribute0);
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute1 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      predicate4.and(predicate5);
      Predicate.isEqual((Object) "Number of bins.");
      instances0.removeIf(predicate4);
      arrayList0.add(attribute1);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      Random.setNextRandom((-1456));
      discretize0.invertSelectionTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.binsTipText();
      discretize0.useBinNumbersTipText();
      Random.setNextRandom(1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.514714844546625
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      discretize0.m_UseEqualFrequency = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      discretize0.getOptions();
      assertTrue(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.188427326358821
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList0.parallelStream();
      linkedList0.add((Locale.LanguageRange) null);
      linkedList0.toArray();
      linkedList2.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      discretize0.setIgnoreClass(true);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.offerFirst((Locale.LanguageRange) null);
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) set0, locale_FilteringMode0);
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("17,41,96,96,41,96,96", list0);
      arrayList1.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      Instances instances0 = new Instances("17,41,96,96,41,96,96", arrayList1, 2);
      discretize0.setInputFormat(instances0);
      discretize0.invertSelectionTipText();
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1014);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.9761326214173685
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 3220);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) instances1;
      objectArray0[1] = (Object) instances0;
      discretize0.setFindNumBins(true);
      instances0.toArray(objectArray0);
      instances0.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      arrayList0.stream();
      Attribute attribute0 = new Attribute("@relation", instances1);
      attribute0.equalsMsg((Object) null);
      SystemInUtil.addInputLine("@relation");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      Random.setNextRandom((-2178));
      discretize0.findNumBinsTipText();
      discretize0.getFindNumBins();
      discretize0.setInputFormat(instances0);
      discretize0.invertSelectionTipText();
      String string0 = discretize0.desiredWeightOfInstancesPerIntervalTipText();
      assertEquals("Sets the desired weight of instances per interval for equal-frequency binning.", string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "1@k%vY?$^jqny");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = discretize0.getOptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      discretize0.setOptions(stringArray0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList0.parallelStream();
      linkedList0.toArray();
      linkedList2.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      locale0.getScript();
      String[] stringArray0 = new String[19];
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.offerFirst((Locale.LanguageRange) null);
      discretize0.getFindNumBins();
      Locale locale1 = Locale.GERMANY;
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      assertTrue(linkedList13.equals((Object)linkedList2));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getScript();
      locale0.getDisplayName();
      String[] stringArray0 = new String[6];
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      stringArray0[0] = "Chinese (China)";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Chinese (China)";
      stringArray0[4] = "Chinese (China)";
      stringArray0[5] = "";
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      SystemInUtil.addInputLine("Chinese (China)");
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      String string0 = discretize0.binsTipText();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Number of bins.", string0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList0.parallelStream();
      discretize0.setInvertSelection(false);
      linkedList2.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getScript();
      String[] stringArray0 = new String[6];
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      Locale.getISOCountries();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filter((List<Locale.LanguageRange>) null, (Collection<Locale>) linkedList4, locale_FilteringMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      Filter.makeCopies(discretize0, 70);
      discretize0.attributeIndicesTipText();
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6151104036339126
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)95;
      byteArray0[2] = (byte)40;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.788415958988295
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      discretize0.m_DesiredWeightOfInstancesPerInterval = 5.7;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 3220;
      Instances instances0 = new Instances("K97Zw ", arrayList0, 3220);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      Object[] objectArray0 = new Object[8];
      objectArray0[7] = (Object) instances1;
      objectArray0[1] = (Object) instances0;
      instances0.toArray(objectArray0);
      instances0.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      arrayList0.stream();
      Attribute attribute0 = new Attribute("bZjFCbk{Fk");
      SystemInUtil.addInputLine("@relation");
      arrayList0.add(attribute0);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.setInputFormat(instances0);
      discretize0.findNumBinsTipText();
      SystemInUtil.addInputLine("@end");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1590));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getScript();
      locale0.getDisplayName();
      String[] stringArray0 = new String[6];
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      stringArray0[0] = "Chinese (China)";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Chinese (China)";
      stringArray0[4] = "Chinese (China)";
      stringArray0[5] = "";
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      discretize0.attributeIndicesTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[0];
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Discretize discretize0 = new Discretize();
      discretize0.setBins(200);
      AllFilter allFilter1 = new AllFilter();
      AllFilter allFilter2 = new AllFilter();
      AllFilter allFilter3 = new AllFilter();
      AllFilter allFilter4 = new AllFilter();
      AllFilter allFilter5 = new AllFilter();
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList3.sort(comparator0);
      linkedList3.push((Locale.LanguageRange) null);
      linkedList3.parallelStream();
      linkedList0.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.stripExtensions();
      locale0.getDisplayVariant();
      locale0.getScript();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Filter.runFilter(discretize0, (String[]) null);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      Locale.getISOLanguages();
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList4);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      String string0 = discretize0.makeBinaryTipText();
      assertEquals("Make resulting attributes binary.", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.push((Locale.LanguageRange) null);
      linkedList3.parallelStream();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.ITALIAN;
      locale0.getExtension('B');
      locale0.getDisplayVariant();
      locale0.getScript();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale2 = Locale.KOREAN;
      Locale.getISOLanguages();
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      int int0 = discretize0.getBins();
      assertEquals(10, int0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      String[] stringArray0 = new String[6];
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      stringArray0[2] = stringArray0[1];
      stringArray0[4] = stringArray0[3];
      Filter.runFilter(discretize0, stringArray0);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.FRENCH;
      Locale.getISOLanguages();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      locale0.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      Random.setNextRandom((-556));
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.push((Locale.LanguageRange) null);
      linkedList3.parallelStream();
      linkedList0.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getDisplayVariant();
      locale0.getScript();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Filter.runFilter(discretize0, (String[]) null);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      Locale.getISOLanguages();
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList4, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList4);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      discretize0.globalInfo();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[1];
      int[] intArray0 = new int[2];
      intArray0[0] = (-4556);
      intArray0[1] = 170;
      SparseInstance sparseInstance0 = new SparseInstance((-383.7413675528692), doubleArray0, intArray0, 170);
      discretize0.setDesiredWeightOfInstancesPerInterval((-383.7413675528692));
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("/packageListWithVersion.txt");
      SystemInUtil.addInputLine("numeric");
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.findNumBinsTipText();
      discretize0.isNewBatch();
      attribute0.enumerateValues();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "real";
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      discretize0.invertSelectionTipText();
      assertEquals((-383.7413675528692), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.203341240631385
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "xv^{M\"K-0";
      stringArray0[1] = ":'CbzW@6BCY{wtjQx)";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[3] = "m=,;";
      stringArray0[4] = "S,On{uD'i [T]1`.";
      discretize0.m_MakeBinary = true;
      stringArray0[5] = "M8$D28r|VIYy";
      discretize0.setOptions(stringArray0);
      discretize0.m_DesiredWeightOfInstancesPerInterval = (-1.0);
      discretize0.m_MakeBinary = false;
      discretize0.getUseEqualFrequency();
      discretize0.setAttributeIndices("M8$D28r|VIYy");
      discretize0.setDesiredWeightOfInstancesPerInterval(0.0);
      discretize0.getCutPoints((-2042));
      discretize0.setMakeBinary(false);
      discretize0.setOutputFormat();
      discretize0.listOptions();
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.invertSelectionTipText();
      discretize0.invertSelectionTipText();
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[2];
      doubleArray0[1] = (-355.914);
      int[] intArray0 = new int[2];
      intArray0[0] = (-4555);
      Discretize discretize1 = null;
      try {
        discretize1 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[2];
      intArray0[0] = (-4555);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 0);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      MockRandom mockRandom0 = new MockRandom();
      instances1.randomize(mockRandom0);
      instances1.stream();
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      Attribute attribute0 = new Attribute("@data");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) instances1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "");
      Predicate.isEqual((Object) instances1);
      predicate1.test(discretize0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      predicate3.and(predicate2);
      Predicate.isEqual((Object) "Number of bins.");
      discretize0.setUseEqualFrequency(true);
      instances0.removeIf(predicate4);
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList4.toArray();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getScript();
      locale0.getDisplayName();
      linkedList4.add((Locale.LanguageRange) null);
      locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      SystemInUtil.addInputLine("");
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      linkedList6.addAll((Collection<? extends Locale.LanguageRange>) linkedList12);
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(86);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      double[] doubleArray0 = new double[26];
      doubleArray0[0] = (double) 6;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 0;
      doubleArray0[22] = (double) 6;
      intArray0[5] = 0;
      intArray0[6] = 0;
      sparseInstance0.toString(6, 1);
      SparseInstance sparseInstance1 = new SparseInstance(6);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6, intArray0, 6);
      binarySparseInstance1.toString(6, 6);
      SparseInstance sparseInstance2 = null;
      try {
        sparseInstance2 = new SparseInstance(0, doubleArray0, intArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[1] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[2] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[3] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[4] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[5] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[6] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[7] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      stringArray0[8] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7274335622103947
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".3z}e");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".3z}e";
      discretize0.setFindNumBins(true);
      stringArray0[1] = ".3z}e";
      stringArray0[2] = ".3z}e";
      stringArray0[3] = ".3z}e";
      stringArray0[4] = ".3z}e";
      discretize0.m_UseEqualFrequency = true;
      stringArray0[5] = ".3z}e";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: .3z}e .3z}e .3z}e .3z}e .3z}e .3z}e 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList1.removeAll(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.toArray();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList1.add((Locale.LanguageRange) null);
      locale0.getScript();
      locale0.getExtension('J');
      locale0.getDisplayName();
      linkedList1.add((Locale.LanguageRange) null);
      locale0.getUnicodeLocaleKeys();
      locale0.getScript();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Japanese");
      linkedList0.add(locale_LanguageRange0);
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add((Locale.LanguageRange) null);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap2 = new HashMap<String, List<String>>(hashMap1);
      Locale.LanguageRange.mapEquivalents(linkedList2, hashMap2);
      linkedList1.addAll((Collection<? extends Locale.LanguageRange>) linkedList7);
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      boolean boolean0 = discretize0.m_IgnoreClass;
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), double0, 0.01);
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList1.removeAll(linkedList2);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.toArray();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList1.add((Locale.LanguageRange) null);
      locale0.getScript();
      locale0.getExtension('J');
      locale0.getDisplayName();
      linkedList1.add((Locale.LanguageRange) null);
      locale0.getUnicodeLocaleKeys();
      locale0.getScript();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Japanese");
      linkedList0.add(locale_LanguageRange0);
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add((Locale.LanguageRange) null);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap1 = new HashMap<String, List<String>>();
      HashMap<String, List<String>> hashMap2 = new HashMap<String, List<String>>(hashMap1);
      Locale.LanguageRange.mapEquivalents(linkedList2, hashMap2);
      linkedList1.addAll((Collection<? extends Locale.LanguageRange>) linkedList7);
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setUseBinNumbers(false);
      Discretize discretize1 = new Discretize();
      discretize0.getUseBinNumbers();
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter1.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(86);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(6);
      double[] doubleArray0 = new double[26];
      doubleArray0[0] = (double) 6;
      int[] intArray0 = new int[9];
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 0;
      doubleArray0[22] = (double) 6;
      intArray0[5] = 0;
      doubleArray0[5] = (double) 0;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray0, 6);
      int int0 = 8;
      binarySparseInstance1.toString((-2013265917), 8);
      SparseInstance sparseInstance1 = null;
      try {
        sparseInstance1 = new SparseInstance((-1281.95276687), doubleArray0, intArray0, 126);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 22
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINESE;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList4.toArray();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getScript();
      locale0.getDisplayName();
      linkedList4.add((Locale.LanguageRange) null);
      locale1.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList7.add((Locale.LanguageRange) null);
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Discretize discretize0 = new Discretize("T8o&oTA}");
      String[] stringArray0 = new String[6];
      stringArray0[3] = "";
      stringArray0[1] = "Chinese";
      stringArray0[2] = "_";
      stringArray0[2] = "";
      stringArray0[4] = "";
      stringArray0[5] = "Chinese";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(86);
      SparseInstance sparseInstance1 = new SparseInstance((Instance) sparseInstance0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 6;
      intArray0[8] = 6;
      sparseInstance1.toString(0, 6);
      SparseInstance sparseInstance2 = new SparseInstance(3.4, doubleArray0, intArray0, 3);
      Discretize discretize0 = new Discretize("");
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getFindNumBins());
      
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.push((Locale.LanguageRange) null);
      linkedList3.parallelStream();
      linkedList0.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getScript();
      locale0.stripExtensions();
      locale0.getDisplayVariant();
      locale0.getScript();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Filter.runFilter(discretize0, (String[]) null);
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      Locale.getISOLanguages();
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList6 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      discretize0.getRevision();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(86);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      int[] intArray0 = new int[23];
      intArray0[0] = 200;
      intArray0[2] = 6;
      intArray0[3] = (-17);
      intArray0[1] = 6;
      intArray0[5] = (-17);
      intArray0[6] = (-17);
      intArray0[7] = 6;
      intArray0[8] = 6;
      SparseInstance sparseInstance1 = new SparseInstance(3.4, doubleArray0, intArray0, 3);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 200;
      SparseInstance sparseInstance2 = new SparseInstance(3.4, doubleArray1, intArray0, 3);
      SparseInstance sparseInstance3 = new SparseInstance(2949);
      SparseInstance sparseInstance4 = new SparseInstance(6, doubleArray1);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance0);
      Discretize discretize0 = new Discretize();
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.CHINA;
      locale0.getScript();
      locale0.getDisplayName();
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      linkedList5.add((Locale.LanguageRange) null);
      Locale locale1 = Locale.FRENCH;
      LinkedList<String> linkedList6 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList6, locale_FilteringMode0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList5, (Collection<String>) list0, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode2);
      Locale.getISOLanguages();
      locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      locale1.toLanguageTag();
      Locale.getISOCountries();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      double[] doubleArray0 = new double[15];
      doubleArray0[0] = 2.0;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      sparseInstance0.dataset();
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SparseInstance sparseInstance0 = new SparseInstance(86);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 6;
      int[] intArray0 = new int[9];
      intArray0[0] = 200;
      intArray0[1] = 6;
      intArray0[2] = 6;
      intArray0[3] = 0;
      intArray0[4] = 6;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 6;
      intArray0[8] = 6;
      SparseInstance sparseInstance1 = new SparseInstance(3.4, doubleArray0, intArray0, 3);
      double[] doubleArray1 = new double[3];
      doubleArray1[0] = (double) 6;
      doubleArray1[1] = (double) 3;
      doubleArray1[2] = (double) 200;
      SparseInstance sparseInstance2 = new SparseInstance(3.4, doubleArray1, intArray0, 3);
      SparseInstance sparseInstance3 = new SparseInstance(2949);
      SparseInstance sparseInstance4 = new SparseInstance(6, doubleArray1);
      SparseInstance sparseInstance5 = new SparseInstance((Instance) sparseInstance0);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.getCapabilities();
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[0] = (byte)95;
      String[] stringArray0 = new String[2];
      stringArray0[0] = ";2-z&8y:[>wJtM";
      stringArray0[1] = "?";
      Discretize.main(stringArray0);
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "weka.log");
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "x7AWH&_{";
      stringArray0[1] = "f";
      stringArray0[2] = "9-";
      Discretize discretize0 = new Discretize("9-");
      discretize0.setOutputFormat();
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleAttributes();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      linkedList4.toArray();
      linkedList3.add((Locale.LanguageRange) null);
      linkedList0.add((Locale.LanguageRange) null);
      locale0.getUnicodeLocaleAttributes();
      linkedList4.addFirst((Locale.LanguageRange) null);
      locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      locale1.getScript();
      locale0.getDisplayName();
      linkedList4.add((Locale.LanguageRange) null);
      Locale locale2 = Locale.FRENCH;
      locale2.getDisplayName();
      locale2.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Discretize discretize0 = new Discretize("Xi}s_xW9.3=5$&II");
      // Undeclared exception!
      try { 
        discretize0.findNumBins(2208);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      int int0 = (-1431655763);
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]%>`/lfB>8ng=@zM";
      stringArray0[1] = "1,41,1,1,1,96";
      stringArray0[2] = "]%>`/lfB>8ng=@zM";
      stringArray0[3] = "]%>`/lfB>8ng=@zM";
      stringArray0[4] = "]%>`/lfB>8ng=@zM";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1431655763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      AllFilter allFilter1 = new AllFilter();
      Discretize discretize0 = new Discretize("]%>`/lfB>8ng=@zM");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "]%>`/lfB>8ng=@zM";
      stringArray0[1] = "1,41,1,1,1,96";
      stringArray0[2] = "]%>`/lfB>8ng=@zM";
      stringArray0[3] = "]%>`/lfB>8ng=@zM";
      stringArray0[4] = "]%>`/lfB>8ng=@zM";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning((-1431655763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2049915089181553
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      linkedList3.push((Locale.LanguageRange) null);
      linkedList3.parallelStream();
      linkedList0.toArray();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.ITALIAN;
      locale0.getExtension('B');
      LinkedList<String> linkedList4 = new LinkedList<String>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList4);
      locale0.getDisplayVariant();
      locale0.getScript();
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      Filter.runFilter(discretize0, (String[]) null);
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      linkedList0.add((Locale.LanguageRange) null);
      Locale locale2 = Locale.GERMAN;
      Locale.getISOLanguages();
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList7 = new LinkedList<Locale>();
      LinkedList<Locale> linkedList8 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList9 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList10 = new LinkedList<Locale.LanguageRange>();
      discretize0.getOptions();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale.getISOCountries();
      LinkedList<Locale.LanguageRange> linkedList11 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList12 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList13 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList14 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList15 = new LinkedList<Locale.LanguageRange>();
      assertFalse(linkedList15.equals((Object)linkedList3));
  }
}
