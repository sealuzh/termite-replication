/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 20:34:52 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.Enumeration;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.lazy.IBk;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Environment;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.KDTree;
import weka.core.tokenizers.NGramTokenizer;
import weka.filters.AllFilter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.355825830420688
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute((String) null, (String) null, 0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance1.setValue(1, (-407.5386158643967));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      SparseInstance sparseInstance2 = new SparseInstance((Instance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance11.toString();
      instances1.add((Instance) binarySparseInstance7);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(2370.0);
      try { 
        jRip_RipperRule0.grow(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[19];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      classOrderArray0[1] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[13] = classOrder0;
      arrayList0.toArray(classOrderArray0);
      Instances instances0 = new Instances("sum:  ", arrayList1, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",?x$rY=OB");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      arrayList1.add(0, attribute0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1);
      jRip_RipperRule0.grow(instances0);
      jRip0.getTechnicalInformation();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.setCheckErrorRate(false);
      jRip0.getOptions();
      Utils.SMALL = 64.0;
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.checkErrorRateTipText();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      assertEquals("Set of delimiter characters to use in tokenizing (\\r, \\n and \\t can be used for carriage-return, line-feed and tab)", nGramTokenizer0.delimitersTipText());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getOptions();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPAN;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("RandomTree: tree can't be printed", arrayList0, 37);
      Attribute attribute0 = null;
      try {
        attribute0 = new Attribute("RandomTree: tree can't be printed", "@relation");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'r'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "^hZ8tIMrU";
      stringArray0[1] = "^hZ8tIMrU";
      stringArray0[2] = "^hZ8tIMrU";
      Attribute attribute0 = new Attribute("^hZ8tIMrU", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      jRip_NominalAntd0.value = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      // Undeclared exception!
      try { 
        instances0.meanOrMode(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.360381915118041
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      Attribute attribute0 = new Attribute("", list0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      linkedList0.add("numeric");
      Instances instances0 = new Instances("relational", arrayList1, 0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      sparseInstance0.deleteAttributeAt(11);
      jRip_NominalAntd0.covers(sparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((Instance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance(1);
      instances1.add((Instance) binarySparseInstance3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.splitData(instances0, 0.01, (-7.857609742482056));
      jRip0.toString();
      jRip0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      arrayList0.iterator();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instance[] instanceArray0 = new Instance[1];
      instanceArray0[0] = (Instance) binarySparseInstance1;
      arrayList0.toArray(instanceArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      AbstractInstance.s_numericAfterDecimalPoint = 1;
      binarySparseInstance6.isMissing(1);
      binarySparseInstance0.toString();
      binarySparseInstance6.setMissing(attribute0);
      binarySparseInstance0.toString(1);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(1, intArray0, 1);
      instances0.add((Instance) binarySparseInstance6);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1155.487791, 64.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.647826624623992
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = new Instances(instances0, 1);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      instances0.addAll(0, (Collection<? extends Instance>) instances2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance2.setValue(1, (-408.36912));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      inputMappedClassifier0.setModelPath(".arff");
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      binarySparseInstance3.toString();
      instances0.add((Instance) binarySparseInstance3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.getMaxInfoGain();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_NominalAntd0.copy();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7250352741261774
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[19];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder1;
      arrayList0.toArray(classOrderArray0);
      Instances instances0 = new Instances("sum:  ", arrayList1, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_NumericAntd0.splitData(instances0, (byte) (-15), 0);
      arrayList1.add(0, attribute0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((byte) (-15));
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.grow(instances0);
      assertEquals((-15.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      jRip0.getTechnicalInformation();
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      jRip0.setUsePruning(false);
      jRip0.setCheckErrorRate(true);
      try { 
        jRip0.rulesetForOneClass((-1.0), (Instances) null, (-1.0), 115.01661032002389);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      properties1.replace((Object) properties0, (Object) properties0);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties3);
      protectedProperties0.stringPropertyNames();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      protectedProperties1.stringPropertyNames();
      SparseInstance sparseInstance0 = new SparseInstance(1679);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("Morgan Kaufmann Publishers Inc.", arrayList0, 4);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip jRip1 = new JRip();
      long long0 = jRip1.getSeed();
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(1L, long0);
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setUsePruning(false);
      Instances instances0 = null;
      try { 
        jRip0.rulesetForOneClass(Double.NaN, (Instances) null, Double.NaN, 4.3890961102879515);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      inputMappedClassifier0.setModelPath(".arff");
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 1;
      Integer integer0 = new Integer((-1092));
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 1;
      instances0.toArray(integerArray0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      instances1.add((Instance) binarySparseInstance6);
      instances2.toArray(integerArray0);
      try { 
        jRip0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      JRip jRip1 = new JRip();
      Utils.SMALL = (-52.0);
      try { 
        jRip0.rulesetForOneClass((-1.0), (Instances) null, (-52.0), Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jRip0.setSeed((-1L));
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      environment0.addVariableSystemWide("i3z&a |*,T", "");
      Locale locale0 = Locale.CHINESE;
      locale0.getUnicodeLocaleKeys();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("JRIP rules:\n===========\n\n", linkedList3, 3);
      long long0 = jRip0.getSeed();
      assertEquals((-1L), long0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = Instances.mergeInstances(instances0, instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance2.setValue(1, (-408.36912));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      inputMappedClassifier0.setModelPath(".bsi");
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = 1;
      BinarySparseInstance binarySparseInstance12 = new BinarySparseInstance(1, intArray0, 1);
      try { 
        jRip0.rulesetForOneClass((-5634.6793), instances1, 1, 1845.09);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.KOREA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.UK;
      Locale locale3 = Locale.FRANCE;
      Locale locale4 = Locale.GERMAN;
      locale1.clone();
      Locale locale5 = Locale.CANADA_FRENCH;
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-21);
      byteArray0[1] = (byte)11;
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode1);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      locale5.getDisplayName(locale2);
      Locale locale6 = Locale.SIMPLIFIED_CHINESE;
      Locale locale7 = new Locale("Ts8");
      locale1.getDisplayScript(locale7);
      JRip jRip0 = new JRip();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      String string0 = jRip0.seedTipText();
      assertEquals("The seed used for randomizing the data.", string0);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String string1 = jRip0.debugTipText();
      assertEquals("Whether debug information is output to the console.", string1);
      
      String string2 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string2);
      
      jRip0.enumerateMeasures();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("The seed used for randomizing the data.", linkedList0, (-1852));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Environment environment0 = new Environment();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      Attribute attribute0 = new Attribute("nw9oQ@1:I:35%}", list0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      arrayList1.stream();
      arrayList1.replaceAll(unaryOperator0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) arrayList1);
      jRip0.enumerateMeasures();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Enumeration enumeration0 = new NGramTokenizer();
      ClassOrder classOrder0 = new ClassOrder();
      jRip_NumericAntd0.getAccuRate();
      // Undeclared exception!
      try { 
        classOrder0.output();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("#Z|<UZm/", linkedList0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("string", arrayList0, 2);
      Attribute attribute1 = new Attribute("", instances0, (-70));
      Attribute attribute2 = attribute1.copy("integer");
      jRip_RipperRule0.toString(attribute2);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd1.getAttrValue();
      jRip_NominalAntd1.getAttrValue();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      IBk iBk0 = new IBk(0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Instances instances1 = bayesNet1.m_Instances;
      iBk0.pruneToK((Instances) null, (double[]) null, 0);
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      try { 
        principalComponents1.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.setOptimizations((-11));
      jRip0.listOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      jRip_RipperRule0.covers((Instance) null);
      int int0 = jRip0.getOptimizations();
      assertEquals((-11), int0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      protectedProperties4.replace((Object) "each", (Object) protectedProperties2, (Object) protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ClassOrder classOrder0 = new ClassOrder();
      properties0.putIfAbsent(classOrder0, protectedProperties5);
      Set<String> set0 = protectedProperties3.stringPropertyNames();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties5);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties6);
      protectedProperties0.stringPropertyNames();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("each", list0, protectedProperties9);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList1, 2);
      Instances instances1 = new Instances(instances0);
      jRip_NominalAntd0.splitData(instances1, (-693.901025475555), 1404.318);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      protectedProperties4.replace((Object) "each", (Object) protectedProperties2, (Object) protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ClassOrder classOrder0 = new ClassOrder();
      properties0.putIfAbsent(classOrder0, protectedProperties5);
      protectedProperties3.stringPropertyNames();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties5);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties6);
      protectedProperties0.stringPropertyNames();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals("JRIP: No model built yet. = ", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-884.7533796631191));
      jRip_RipperRule0.covers((Instance) null);
      IBk iBk0 = new IBk();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      Environment environment0 = new Environment();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      PrincipalComponents principalComponents3 = new PrincipalComponents();
      PrincipalComponents principalComponents4 = new PrincipalComponents();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(nGramTokenizer0);
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream1);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(sequenceInputStream1, sequenceInputStream0);
      assertFalse(sequenceInputStream2.equals((Object)sequenceInputStream1));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0);
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[19];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder1;
      arrayList0.toArray(classOrderArray0);
      Instances instances0 = new Instances("sum:  ", arrayList1, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      arrayList0.add("Ph%R(]j8N0n");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip_NominalAntd0.splitData(instances0, 1, 2055.328811273723);
      UnaryOperator.identity();
      double double0 = jRip_NominalAntd0.accu;
      assertEquals(Double.NaN, double0, 0.01);
      
      jRip0.getTechnicalInformation();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NominalAntd1.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.add(locale0);
      locale0.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList2.sort(comparator0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      try { 
        jRip0.rulesetForOneClass(3, (Instances) null, 4, 0.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0376415037372215
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      String[] stringArray0 = jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1.0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (-1168.2301387957775);
      doubleArray0[3] = (-1168.2301387957775);
      JRip.main(stringArray0);
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      AbstractClassifier.makeCopy(jRip0);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getConsequent();
      jRip0.setMinNo((-1168.2301387957775));
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      jRip0.minNoTipText();
      jRip0.setOptions(stringArray0);
      jRip0.setDebug(true);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule2 = jRip1.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.setConsequent(0.0);
      jRip1.getSeed();
      // Undeclared exception!
      try { 
        jRip1.getMeasure("8118");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // 8118 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      protectedProperties0.replace((Object) pipedInputStream0, (Object) protectedProperties1);
      Properties properties1 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0);
      protectedProperties1.list((PrintStream) mockPrintStream1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      String[] stringArray0 = new String[0];
      jRip0.setOptions(stringArray0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      Object object1 = new Object();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      protectedProperties1.replace((Object) protectedProperties5, (Object) protectedProperties4, (Object) mockPrintStream1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      protectedProperties5.stringPropertyNames();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties13);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties15);
      protectedProperties1.stringPropertyNames();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("h9p~,v,66N@+", linkedList0, 69);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 2673.082901256;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 64.0;
      doubleArray0[3] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(boolean0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9417429777213613
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      arrayList0.iterator();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      Instance[] instanceArray0 = new Instance[1];
      instanceArray0[0] = (Instance) binarySparseInstance1;
      arrayList0.toArray(instanceArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      sparseInstance0.copy();
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      assertEquals(6, AbstractInstance.s_numericAfterDecimalPoint);
      
      AbstractInstance.s_numericAfterDecimalPoint = 1;
      binarySparseInstance6.isMissing(1);
      binarySparseInstance0.toString();
      binarySparseInstance0.toString(1);
      int[] intArray0 = new int[3];
      binarySparseInstance6.s_numericAfterDecimalPoint = 1;
      intArray0[1] = 1;
      intArray0[2] = 1;
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(1, intArray0, 1);
      instances0.add((Instance) binarySparseInstance6);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      SparseInstance sparseInstance2 = new SparseInstance(1);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(1132);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance1);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(0L);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Environment environment0 = Environment.getSystemWide();
      Set<String> set0 = environment0.getVariableNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      jRip0.getSeed();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.7496393746041248
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.enumerateMeasures();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("", arrayList0, (-4866));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      attribute0.setStringValue("");
      jRip_NominalAntd0.getAttr();
      jRip_NominalAntd0.getRevision();
      jRip0.checkErrorRateTipText();
      Attribute.main(stringArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@end");
      jRip0.getRevision();
      jRip0.optimizationsTipText();
      jRip0.seedTipText();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.68478541691352
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "NC";
      stringArray0[1] = "NC";
      stringArray0[2] = "NC";
      AbstractClassifier.runClassifier(naiveBayes0, stringArray0);
      Attribute attribute0 = new Attribute("NC", linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add("relational");
      Instances instances0 = new Instances("string", arrayList0, 1);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = new Instances(instances1, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance0);
      assertTrue(boolean0);
      
      Instances instances3 = new Instances(instances1, 118, (-1732));
      jRip_NominalAntd0.splitData(instances3, 0.0, 0.001);
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute0);
      double double0 = jRip_NominalAntd1.getMaxInfoGain();
      assertEquals(0.0, double0, 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      jRip_RipperRule0.prune(instances1, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string1 = jRip_NominalAntd1.getRevision();
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(string1.equals((Object)string0));
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[19];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      classOrderArray0[1] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[2] = classOrder0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getCheckErrorRate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties1.stringPropertyNames();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("_3|T_6i`\"aKB{pbE", list0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        linkedList1.addAll((Collection<? extends Locale.LanguageRange>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      protectedProperties0.replace((Object) properties0, (Object) properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      protectedProperties3.stringPropertyNames();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties5);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayCountry();
      locale1.getDisplayScript(locale0);
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      locale1.getDisplayName(locale0);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.add(locale0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode3);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Attribute attribute0 = new Attribute(";i", (String) null, (-1596));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip jRip1 = new JRip();
      String string1 = jRip_NumericAntd0.toString();
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(";i <= NaN", string1);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.KOREA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.UK;
      Locale locale3 = Locale.FRANCE;
      Locale locale4 = Locale.GERMAN;
      locale1.clone();
      Locale locale5 = Locale.CANADA_FRENCH;
      locale5.getDisplayName(locale2);
      Locale locale6 = Locale.KOREA;
      Locale locale7 = new Locale("Ts8");
      locale1.getDisplayScript(locale7);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      
      jRip_RipperRule0.size();
      Attribute attribute0 = new Attribute("French (Canada)", "M~");
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => French (Canada)=", string0);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      boolean boolean0 = jRip0.getDebug();
      assertFalse(boolean0);
      
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      instances0.addAll(0, (Collection<? extends Instance>) instances2);
      inputMappedClassifier0.setModelPath(".arff");
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 0;
      Integer integer0 = new Integer((-1092));
      integerArray0[4] = integer0;
      instances0.toArray(integerArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute((String) null, arrayList0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[25];
      FileSystemHandling.shouldAllThrowIOExceptions();
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder0;
      ClassOrder classOrder2 = new ClassOrder();
      classOrder2.getCapabilities();
      classOrderArray0[2] = classOrder1;
      arrayList0.toArray(classOrderArray0);
      Instances instances0 = new Instances("sum:  ", arrayList1, 0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_NumericAntd0.splitData(instances0, (byte) (-15), 0);
      assertEquals(0.0, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.prune(instances0, true);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayCountry();
      locale1.getDisplayScript(locale0);
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.add(locale0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      linkedList2.add((Locale.LanguageRange) null);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode3);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Attribute attribute0 = new Attribute(";i", (String) null, (-1596));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(";i <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string1 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string1);
      
      JRip jRip1 = new JRip();
      assertEquals(3, jRip1.getFolds());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertFalse(jRip1.getDebug());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("\tSpecifies the desired weight of instances per bin for\n\tequal-frequency binning. If this is set to a positive\n\tnumber then the -B option will be ignored.\n\t(default = -1)", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(2111);
      Utils.log2 = 0.0;
      jRip0.listOptions();
      jRip0.getOptimizations();
      JRip jRip1 = new JRip();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte) (-51);
      byteArray0[3] = (byte) (-37);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte) (-2);
      byteArray0[6] = (byte)1;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setFolds(2141810473);
      jRip_RipperRule0.covers((Instance) null);
      DecisionTable decisionTable0 = new DecisionTable();
      IBk iBk0 = decisionTable0.m_ibk;
      StringReader stringReader0 = new StringReader("*%KSns");
      Instances instances0 = null;
      try {
        instances0 = new Instances(stringReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // keyword @relation expected, read Token[*], line 1
         //
         verifyException("weka.core.converters.ArffLoader$ArffReader", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getUsePruning();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Environment environment0 = new Environment();
      // Undeclared exception!
      try { 
        environment0.addVariableSystemWide((String) null, "\noldDL: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, (String) null);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      arrayList0.iterator();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      inputMappedClassifier0.setModelPath(".arff");
      Integer[] integerArray0 = new Integer[6];
      integerArray0[0] = (Integer) 0;
      integerArray0[1] = (Integer) 2;
      integerArray0[2] = (Integer) 0;
      integerArray0[3] = (Integer) 1;
      Integer integer0 = new Integer((-1092));
      integerArray0[4] = integer0;
      integerArray0[5] = (Integer) 1;
      instances0.toArray(integerArray0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((Instance) binarySparseInstance1);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      instances1.add((Instance) binarySparseInstance6);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.cover = (double) 1;
      jRip0.minNoTipText();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances1, (-7.857609742482056), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREA;
      locale0.getDisplayCountry();
      locale1.getDisplayScript(locale0);
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      linkedList1.add(locale0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList2, (Collection<String>) arrayList1);
      LinkedList<String> linkedList3 = new LinkedList<String>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("China");
      linkedList4.add(locale_LanguageRange0);
      LinkedList<Locale> linkedList5 = new LinkedList<Locale>();
      LinkedList<Locale.LanguageRange> linkedList6 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList7 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList8 = new LinkedList<Locale.LanguageRange>();
      linkedList6.add((Locale.LanguageRange) null);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      jRip0.setOptions((String[]) null);
      Attribute attribute0 = new Attribute("China", 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.covers((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setDebug(false);
      jRip_RipperRule0.covers((Instance) null);
      DecisionTable decisionTable0 = new DecisionTable();
      StringReader stringReader0 = new StringReader("%>Se");
      AllFilter allFilter0 = new AllFilter();
      KDTree kDTree0 = new KDTree();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      DecisionTable decisionTable1 = new DecisionTable();
      IBk iBk0 = decisionTable1.m_ibk;
      // Undeclared exception!
      try { 
        decisionTable0.setEvaluationMeasure((SelectedTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.DecisionTable", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      Locale locale2 = Locale.ITALIAN;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(";i", arrayList3, 66);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-8);
      byteArray0[1] = (byte) (-106);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      instances0.remove((Object) dataInputStream0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip0.foldsTipText();
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Properties properties0 = new Properties();
      jRip0.enumerateMeasures();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.close();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      protectedProperties0.replace((Object) pipedInputStream0, (Object) protectedProperties1);
      Properties properties1 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0);
      protectedProperties1.list((PrintStream) mockPrintStream1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties2);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-1.0), doubleArray0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("", protectedProperties2);
      protectedProperties0.keySet();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.copy();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.8737381995780646
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setSeed(0L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = " instances";
      stringArray0[2] = "";
      stringArray0[3] = "\"));\n";
      stringArray0[4] = "Whether pruning is performed.";
      stringArray0[5] = "\tSet number of folds for REP\n\tOne fold is used as pruning set.\n\t(default 3)";
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip jRip1 = (JRip)AbstractClassifier.makeCopy(jRip0);
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.getConsequent();
      jRip0.setMinNo((-1.0));
      jRip0.setUsePruning(false);
      jRip0.getUsePruning();
      jRip0.setOptions(stringArray0);
      jRip1.setDebug(false);
      JRip jRip2 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip2.new RipperRule();
      jRip_RipperRule1.getRevision();
      jRip_RipperRule1.setConsequent((-1.0));
      jRip0.getSeed();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " instances");
      // Undeclared exception!
      try { 
        jRip2.getMeasure("Af2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Af2 not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.384415616105067
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ClassOrder[] classOrderArray0 = new ClassOrder[19];
      ClassOrder classOrder0 = new ClassOrder();
      classOrderArray0[0] = classOrder0;
      ClassOrder classOrder1 = new ClassOrder();
      classOrderArray0[1] = classOrder1;
      ClassOrder classOrder2 = new ClassOrder();
      classOrderArray0[2] = classOrder1;
      arrayList0.toArray(classOrderArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Object object0 = jRip_RipperRule0.copy();
      Predicate<Attribute> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Attribute> predicate2 = predicate0.and(predicate1);
      Predicate<Attribute> predicate3 = predicate2.negate();
      Predicate<Attribute> predicate4 = predicate3.or(predicate0);
      arrayList1.removeIf(predicate4);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-72);
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte) (-15);
      byteArray0[5] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      
      jRip_RipperRule1.setConsequent(1);
      jRip_RipperRule1.hasAntds();
      assertEquals(1.0, jRip_RipperRule1.getConsequent(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.setMinNo((-655.0));
      jRip_RipperRule0.covers((Instance) null);
      JRip jRip1 = new JRip();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.covers((Instance) null);
      jRip_RipperRule0.getRevision();
      Instances instances0 = null;
      // Undeclared exception!
      try { 
        jRip_RipperRule0.prune((Instances) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.UK;
      Locale locale2 = Locale.FRANCE;
      Locale locale3 = Locale.GERMAN;
      locale3.getDisplayName(locale0);
      Locale locale4 = Locale.KOREA;
      locale4.getDisplayScript(locale0);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats((-563));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.KOREA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Locale locale2 = Locale.UK;
      Locale locale3 = Locale.FRANCE;
      Locale locale4 = Locale.GERMAN;
      Locale locale5 = Locale.CANADA_FRENCH;
      locale5.getDisplayName(locale2);
      Locale locale6 = Locale.KOREA;
      Locale locale7 = Locale.JAPAN;
      locale1.getDisplayScript(locale7);
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      Utils.SMALL = 64.0;
      jRip0.globalInfo();
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      InputMappedClassifier inputMappedClassifier2 = new InputMappedClassifier();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      Environment environment0 = new Environment();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      assertEquals(5, principalComponents2.getMaximumAttributeNames());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.218456332760875
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add((String) null);
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      instances0.addAll(0, (Collection<? extends Instance>) instances2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance5);
      binarySparseInstance1.isMissing(3);
      boolean boolean0 = jRip_NominalAntd0.covers(binarySparseInstance5);
      assertFalse(boolean0);
      
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance7);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      inputMappedClassifier0.setModelPath(".arff");
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance((Instance) binarySparseInstance3);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      instances1.add((Instance) binarySparseInstance8);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      RuleStats.partition(instances0, 1);
      int int0 = jRip0.getFolds();
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, int0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      linkedList0.add((String) null);
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      binarySparseInstance1.isMissing(3);
      jRip_NominalAntd0.covers(binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((Instance) binarySparseInstance2);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance8);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instances instances0 = null;
      Environment.getSystemWide();
      jRip0.getCapabilities();
      Random.setNextRandom(3);
      Instances instances1 = null;
      try {
        instances1 = new Instances((Instances) null, (-882));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instances instances0 = null;
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      protectedProperties0.replace((Object) pipedInputStream0, (Object) protectedProperties1);
      Properties properties1 = new Properties();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(pipedOutputStream0);
      protectedProperties1.list((PrintStream) mockPrintStream1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties3);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 0.0;
      SparseInstance sparseInstance0 = new SparseInstance((-55.530054389549925), doubleArray0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("N", protectedProperties2);
      protectedProperties0.keySet();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties4);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      double double0 = jRip0.getMinNo();
      assertEquals(2.0, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Environment.getSystemWide();
      BiFunction<Object, Object, RuleStats> biFunction0 = (BiFunction<Object, Object, RuleStats>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("nw9oQ@1:I:35%}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("nw9oQ@1:I:35%}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // nw9oQ@1:I:35%} not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute((String) null, (String) null, 0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances.mergeInstances(instances0, instances0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance2.setValue(1, (-407.5386158643967));
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      inputMappedClassifier0.setModelPath(".bsi");
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance10 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance10.stringValue(attribute0);
      BinarySparseInstance binarySparseInstance11 = new BinarySparseInstance((SparseInstance) binarySparseInstance10);
      binarySparseInstance3.toString();
      instances0.add((Instance) binarySparseInstance3);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = true;
      System.setCurrentTimeMillis(1);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 1, 2794.1700547351);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.3080561808079394
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Attribute attribute0 = new Attribute((String) null, linkedList0, 0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.getCheckErrorRate();
      Instances instances0 = new Instances("@attribute", arrayList0, 2);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      Instances instances2 = Instances.mergeInstances(instances0, instances1);
      instances0.addAll(0, (Collection<? extends Instance>) instances2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      jRip_NominalAntd0.covers(binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(2);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      jRip_NominalAntd0.covers(binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      inputMappedClassifier0.setModelPath(".arff");
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance((Instance) binarySparseInstance2);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance3);
      instances1.add((Instance) binarySparseInstance7);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.splitData(instances1, (-7.857609742482056), 1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Integer[] integerArray0 = new Integer[6];
      Integer integer0 = new Integer((-1092));
      integerArray0[4] = integer0;
      Attribute attribute0 = new Attribute((String) null, (-1092));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals("8118", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.KOREA;
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode0);
      locale0.getUnicodeLocaleAttributes();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list1, locale_FilteringMode1);
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Comparator<Locale.LanguageRange> comparator0 = (Comparator<Locale.LanguageRange>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      linkedList2.sort(comparator0);
      LinkedList<Locale> linkedList3 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<Locale> list2 = Locale.filter((List<Locale.LanguageRange>) linkedList2, (Collection<Locale>) list0, locale_FilteringMode2);
      Locale.FilteringMode locale_FilteringMode3 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) linkedList1, locale_FilteringMode3);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list2);
      LinkedList<Locale> linkedList4 = new LinkedList<Locale>();
      Attribute attribute0 = new Attribute(";i", (String) null, (-1596));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd1.toString();
      assertEquals(";i <= NaN", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string1 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => ;i=", string1);
      
      JRip.NumericAntd jRip_NumericAntd2 = (JRip.NumericAntd)jRip_NumericAntd1.copy();
      assertEquals(0.0, jRip_NumericAntd2.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAccuRate(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertNotSame(jRip_NumericAntd2, jRip_NumericAntd1);
      assertEquals(Double.NaN, jRip_NumericAntd2.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.KOREA;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale0);
      locale1.getUnicodeLocaleKeys();
      locale0.getUnicodeLocaleKeys();
      Locale locale2 = Locale.UK;
      Locale locale3 = Locale.FRANCE;
      Locale locale4 = Locale.UK;
      Locale locale5 = Locale.FRANCE;
      Locale locale6 = Locale.US;
      locale1.clone();
      Locale locale7 = Locale.CANADA_FRENCH;
      Locale locale8 = Locale.CHINESE;
      locale8.getDisplayName(locale6);
      Locale locale9 = Locale.KOREA;
      Locale locale10 = new Locale("");
      locale4.getDisplayScript(locale7);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      String string0 = jRip0.getRevision();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Object object0 = new Object();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      protectedProperties3.stringPropertyNames();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      double[] doubleArray0 = new double[7];
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties2);
      Attribute attribute0 = new Attribute("/", protectedProperties6);
      protectedProperties6.keySet();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(1L, jRip0.getSeed());
      assertEquals("8118", string0);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.7808459625592628
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.usePruningTipText();
      AbstractClassifier.makeCopies(jRip0, 80);
      jRip0.getRevision();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8118";
      stringArray0[1] = "Whether pruning is performed.";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-107);
      byteArray0[1] = (byte) (-10);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_NumericAntd0.getRevision();
      jRip_NumericAntd0.value = 2526.9824016274692;
      jRip0.listOptions();
      jRip_NumericAntd0.getMaxInfoGain();
      jRip_NumericAntd0.getSplitPoint();
      // Undeclared exception!
      try { 
        jRip_NumericAntd0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$NumericAntd", e);
      }
  }
}
