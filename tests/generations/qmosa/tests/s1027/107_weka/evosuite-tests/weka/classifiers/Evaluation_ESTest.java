/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:43:48 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.IOException;
import java.io.PipedReader;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Random;
import java.util.TreeSet;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.attributeSelection.WrapperSubsetEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.NaiveBayes;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.lazy.IBk;
import weka.classifiers.lazy.KStar;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.Stacking;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Version;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.LibSVMLoader;
import weka.core.converters.Loader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.KDTree;
import weka.core.neighboursearch.NearestNeighbourSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.estimators.UnivariateKernelEstimator;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.8306007398058715
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.getHeader();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3377277902783415
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      MockRandom mockRandom0 = new MockRandom(1L);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      mockRandom1.nextBoolean();
      mockRandom1.doubles(427L);
      mockRandom1.ints(0L);
      evaluation0.falsePositiveRate(12);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) 12;
      doubleArray0[1] = 1293.2040065;
      doubleArray0[2] = (double) 1L;
      doubleArray0[3] = (double) 20;
      doubleArray0[4] = (double) 1L;
      doubleArray0[5] = (double) 12;
      doubleArray0[6] = (double) 1L;
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.2731036383097503
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Evaluation.handleCostOption("", 4564);
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(0L);
      MockRandom mockRandom1 = new MockRandom();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double double1 = evaluation0.m_TotalCoverage;
      assertEquals(double1, double0, 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.340234055942502
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedMatthewsCorrelation();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.numTrueNegatives((byte)91);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "']n}zw6PC;:NbY\u0003*");
      Attribute attribute0 = new Attribute("esg%", linkedList0, protectedProperties1);
      evaluation0.KBMeanInformation();
      linkedList0.listIterator();
      boolean boolean0 = evaluation0.m_NoPriors;
      Object object0 = new Object();
      LWL lWL0 = new LWL();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.m_NumClasses = 3;
      try { 
        evaluation1.priorEntropy();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.280562095343322
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[2];
      intArray0[0] = (-149);
      intArray0[1] = (-149);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1189.687, intArray0, 477);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-149), intArray0, 1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1262.18238, intArray0, (-972));
      byte[] byteArray0 = new byte[3];
      evaluation0.m_SumSqrPredicted = (-10.0);
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-70);
      byteArray0[2] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      double double0 = evaluation0.m_SumKBInfo;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.confusionMatrix();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 10.0;
      doubleArray0[1] = (double) (byte) (-70);
      doubleArray0[2] = (double) (byte) (-70);
      try { 
        evaluation1.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3000635949410424
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation1.numTruePositives((-1));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      Evaluation.k_MarginResolution = (-2);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation1.weightedTrueNegativeRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      UnaryOperator.identity();
      int int0 = 255;
      Instances instances1 = new Instances(instances0, 255);
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader1);
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation(instances1);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2237433298858864
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.numTruePositives(1024);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      int int0 = (-1450);
      evaluation2.falseNegativeRate((-1450));
      Float float0 = new Float((-149.0));
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      double double0 = evaluation3.m_SumAbsErr;
      double double1 = evaluation3.m_MaxTarget;
      try { 
        CostMatrix.parseMatlab("@data");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((byte)91);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      multilayerPerceptron0.setGUI(true);
      boolean boolean0 = evaluation0.m_NoPriors;
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.crossValidateModel((Classifier) stacking0, instances0, 491, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.778792044607509
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.weightedFalsePositiveRate();
      evaluation1.falsePositiveRate((-1));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMacroFmeasure();
      evaluation0.numTruePositives((-1));
      evaluation1.weightedFalsePositiveRate();
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation3 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      // Undeclared exception!
      try { 
        evaluation3.recall(412);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 412
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      textDirectoryLoader0.setOptions(stringArray0);
      Classifier classifier0 = lWL1.getClassifier();
      evaluation0.KBInformation();
      UnaryOperator.identity();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) evaluation1;
      objectArray0[1] = (Object) lWL0;
      int[] intArray0 = new int[6];
      intArray0[0] = 499;
      intArray0[1] = 1;
      intArray0[2] = 2;
      intArray0[3] = 1;
      AbstractClassifier.makeCopies(classifier0, 80);
      intArray0[4] = (-2763);
      intArray0[5] = 0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-2763);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3204863871626777
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.meanAbsoluteError();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(false);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      DenseInstance denseInstance0 = new DenseInstance(3071);
      int int0 = 9;
      Attribute attribute0 = new Attribute(".arff", (-972));
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      denseInstance0.toStringNoWeight(0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForIntervalEstimator(gaussianProcesses0, denseInstance1, 122);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0779937181985124
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      MockRandom mockRandom1 = new MockRandom();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 33.9671;
      doubleArray0[2] = 1802.097599080084;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 1802.097599080084;
      int[] intArray0 = new int[6];
      intArray0[0] = (-353);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toMatrixString(" ");
      assertEquals(" \n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double0 = evaluation0.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.relativeAbsoluteError();
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6964338652581576
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 33.9671;
      doubleArray0[2] = 1802.097599080084;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 1802.097599080084;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(false);
      boolean boolean0 = evaluation0.m_NoPriors;
      Object object0 = new Object();
      LWL lWL0 = new LWL();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.9940302114769565, double0, 0.01);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.860578128728688
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom0 = new MockRandom();
      multilayerPerceptron0.setGUI(false);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      DenseInstance denseInstance0 = new DenseInstance(3);
      Attribute attribute0 = new Attribute(".bsi", (-75));
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation1 = new Evaluation(instances0, costMatrix0);
      evaluation1.setPriors(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFPriorEntropy();
      evaluation1.meanPriorAbsoluteError();
      Evaluation evaluation3 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 1097;
      int[] intArray0 = new int[1];
      intArray0[0] = 1;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(1, doubleArray0, intArray0, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.11037990115403
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(11);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.numTrueNegatives((-1));
      WrapperSubsetEval wrapperSubsetEval0 = new WrapperSubsetEval();
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = null;
      double[] doubleArray1 = new double[0];
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = (-725.169);
      doubleArray2[1] = (double) 7;
      doubleArray2[2] = (double) 6;
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray1, doubleArray2, 3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9059863321786428
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      stringArray0[1] = ".bsi";
      Instances.test(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      UnaryOperator.identity();
      evaluation0.m_Incorrect = 3561.555911115;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(109);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-972));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      lWL0.setNearestNeighbourSearchAlgorithm((NearestNeighbourSearch) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1798;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, intArray0, (-755));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-1616.78622220235), intArray0, 2146215386);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Vector<String> vector0 = findWithCapabilities0.getMatches();
      Attribute attribute0 = new Attribute(".bsi", vector0);
      binarySparseInstance1.setMissing(attribute0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1.0, intArray0, 5);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance0.setValue(19, (double) 4);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Double double0 = new Double(4);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      boolean boolean0 = evaluation0.equals((Object) null);
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.493173717497124
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(108);
      evaluation0.meanAbsoluteError();
      evaluation0.weightedTruePositiveRate();
      byte[] byteArray0 = new byte[22];
      byteArray0[0] = (byte) (-24);
      byteArray0[1] = (byte) (-24);
      byteArray0[8] = (byte)19;
      byteArray0[3] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (byte) (-24);
      int[] intArray0 = new int[4];
      intArray0[0] = 108;
      intArray0[1] = (int) (byte)19;
      intArray0[2] = (int) (byte)19;
      intArray0[3] = (-1);
      SparseInstance sparseInstance0 = new SparseInstance(2020.06759052, doubleArray0, intArray0, 12);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1.0E-12, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(sparseInstance1);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.m_TotalCoverage;
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((byte) (-24));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -24
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.8019354405787666
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives(108);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.meanAbsoluteError();
      evaluation0.weightedTruePositiveRate();
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.numFalseNegatives((-2));
      double double2 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double2, double1, 0.01);
      
      MockRandom mockRandom0 = new MockRandom(70);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) textDirectoryLoader0;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation.makeOptionString(serializedClassifier0, true);
      double[] doubleArray1 = evaluation0.getClassPriors();
      assertNotNull(doubleArray1);
      assertEquals(Double.NaN, evaluation0.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.424943714670272
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom(424L);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 424L;
      doubleArray0[1] = (double) (-1061L);
      doubleArray0[2] = (double) 424L;
      doubleArray0[3] = (-2.0);
      doubleArray0[4] = (-2.0);
      evaluation0.updateNumericScores((double[]) null, doubleArray0, (-5656.58428987276));
      double double0 = evaluation0.SFMeanEntropyGain();
      KDTree kDTree0 = new KDTree();
      double[] doubleArray1 = new double[20];
      doubleArray1[0] = (-739.023);
      doubleArray1[1] = (double) 2;
      doubleArray1[2] = (double) 2;
      double double1 = evaluation0.SFMeanSchemeEntropy();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.rootMeanSquaredError();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.areaUnderROC(0);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      
      evaluation0.updateNumericScores((double[]) null, doubleArray0, 100.0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.335589071082488
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      DecisionStump decisionStump0 = (DecisionStump)lWL0.getClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      instances0.iterator();
      Object[] objectArray0 = new Object[0];
      evaluation0.numFalseNegatives(501);
      decisionStump0.getOptions();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-737.35573512673));
      AbstractClassifier.runClassifier(decisionStump0, testInstances0.DEFAULT_WORDS);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.equals(naiveBayesUpdateable0);
      MockRandom mockRandom0 = new MockRandom();
      decisionStump0.setOptions(testInstances0.DEFAULT_WORDS);
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation1 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      testInstances0.getRelationalClassFormat();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.8580988905037388
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[3];
      intArray0[1] = 2146215386;
      intArray0[2] = (-149);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, 2146215386);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-149), intArray0, (-38));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(37.0, intArray0, 0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      binarySparseInstance0.setValue((-972), (double) (-149));
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance2);
      Double double0 = new Double((-972));
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      evaluation0.equals(evaluation0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'v';
      charArray0[1] = '8';
      charArray0[2] = ',';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(124, charArray0, (-972));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      org.evosuite.runtime.Random.setNextRandom(18);
      Classifier classifier0 = null;
      boolean boolean0 = true;
      Evaluation.makeOptionString((Classifier) null, true);
      LibSVMLoader libSVMLoader0 = new LibSVMLoader();
      try { 
        libSVMLoader0.getStructure();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.LibSVMLoader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances1 = new TestInstances();
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom0 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      double[] doubleArray0 = null;
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, (-2));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7389896102893403
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[3];
      intArray0[1] = 2146215386;
      intArray0[2] = (-149);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, 2146215386);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-149), intArray0, (-38));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(37.0, intArray0, 0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      String string0 = Evaluation.makeOptionString((Classifier) null, false);
      assertNotNull(string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Evaluation.main((String[]) null);
      Evaluation.main((String[]) null);
      Instance instance0 = null;
      try { 
        evaluation0.updateStatsForPredictor(4538.507147968, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1756260027254717
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      int[] intArray1 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray1, (-149));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte) (-99);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DenseInstance denseInstance0 = new DenseInstance(1097);
      double double0 = evaluation0.truePositiveRate(10000000);
      assertEquals(0.0, double0, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom0 = new MockRandom(682L);
      double double1 = evaluation0.trueNegativeRate((byte) (-99));
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      evaluation0.addNumericTrainClass(0, 2);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Instances instances1 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      Evaluation evaluation0 = new Evaluation(instances1);
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = evaluation0.evaluateModel(classifier0, instances0, objectArray0);
      UnaryOperator.identity();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-3.0), doubleArray0);
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) 2;
      doubleArray1[1] = (double) 5;
      doubleArray1[2] = (double) 818;
      doubleArray1[3] = (double) 1;
      doubleArray1[4] = (double) 818;
      doubleArray1[5] = (double) 5;
      doubleArray1[6] = (double) 4;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 818;
      int[] intArray0 = new int[6];
      intArray0[0] = 4;
      intArray0[1] = 1;
      intArray0[2] = (-972);
      intArray0[3] = 4;
      intArray0[4] = 4;
      intArray0[5] = 3;
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((-3.0), doubleArray1, intArray0, 122);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.274277160583419
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setWordSeparators("-synopsis or -info\n");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      double double0 = evaluation0.m_Unclassified;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation1.weightedTrueNegativeRate();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      testInstances0.setNumRelationalDate(484);
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'c';
      charArray0[2] = '-';
      charArray0[3] = 'c';
      charArray0[4] = 'c';
      charArray0[5] = 'c';
      charArray0[6] = 'c';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-2), charArray0, 484);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3212483362318825
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      textDirectoryLoader0.setOptions(stringArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 498;
      intArray0[1] = 498;
      intArray0[2] = 498;
      evaluation0.m_NumClasses = 498;
      MockRandom mockRandom0 = new MockRandom(466);
      Object object0 = new Object();
      Object object1 = new Object();
      Capabilities capabilities0 = Capabilities.forInstances(instances0, false);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate((-3699));
      char[] charArray0 = new char[7];
      charArray0[0] = 'c';
      charArray0[1] = 'M';
      charArray0[2] = 'c';
      charArray0[3] = 'M';
      charArray0[4] = 'M';
      charArray0[5] = 'c';
      charArray0[6] = 'M';
      evaluation0.num2ShortID(498, charArray0, 485);
      evaluation0.SFMeanEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.weightedTruePositiveRate();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8611168332566117
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Properties properties0 = new Properties();
      properties0.clear();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      testInstances0.setRelation(".bsi");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      additiveRegression0.getOptions();
      Double double0 = new Double((-2));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.setPriors(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(100);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 100
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1989L));
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-698), (char[]) null, 12);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.5156538964820814
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-149));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Double double0 = new Double(800.6494859982963);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.truePositiveRate(1035);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.trueNegativeRate(200);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.trueNegativeRate(0);
      org.evosuite.runtime.Random.setNextRandom((-149));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)19;
      instances0.deleteWithMissing((int) (byte)19);
      byteArray0[3] = (byte) (-74);
      byteArray0[4] = (byte)5;
      byteArray0[5] = (byte)95;
      byteArray0[6] = (byte) (-24);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Instances.test(stringArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      UnaryOperator.identity();
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      int[] intArray0 = new int[2];
      intArray0[0] = (int) (byte) (-24);
      intArray0[1] = (int) (byte)91;
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      evaluation0.precision((byte)56);
      char[] charArray0 = new char[0];
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((byte)19, charArray0, 477);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4902259998997436
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = textDirectoryLoader0.getOptions();
      MockRandom mockRandom0 = new MockRandom(1L);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      mockRandom1.nextBoolean();
      mockRandom1.doubles(427L);
      mockRandom1.ints(0L);
      evaluation0.falsePositiveRate(12);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.truePositiveRate(20);
      evaluation1.weightedAreaUnderROC();
      MockRandom mockRandom2 = new MockRandom();
      try { 
        evaluation1.crossValidateModel(",aP,t&=uF/STC>s", instances0, (-904), stringArray0, (Random) mockRandom1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: ,aP,t&=uF/STC>s
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 124;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 124, 917.739372039);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0836901633397042
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      KStar kStar0 = new KStar();
      Capabilities capabilities0 = kStar0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      textDirectoryLoader0.setOutputFilename(false);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation.main(testInstances1.DEFAULT_WORDS);
      int int0 = 19;
      evaluation1.numTruePositives(19);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "weka/core/Capabilities.props");
      evaluation0.weightedTrueNegativeRate();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      UnaryOperator.identity();
      Instances instances2 = new Instances(instances0, (-2));
      ConverterUtils.DataSource.read((Loader) textDirectoryLoader1);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.weightedAreaUnderPRC();
      evaluation0.matthewsCorrelationCoefficient(497);
      AllFilter allFilter0 = new AllFilter();
      evaluation0.falsePositiveRate((-1));
      // Undeclared exception!
      try { 
        evaluation2.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.0720427194811966
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.meanAbsoluteError();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.0);
      doubleArray0[1] = Double.NaN;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(true);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      DenseInstance denseInstance0 = new DenseInstance(122);
      Attribute attribute0 = new Attribute("\nOptions specific to ", 9);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      denseInstance1.setValue(attribute0, (double) 3);
      evaluation0.updateMargins(doubleArray0, 3, 1877.032483);
      evaluation0.falsePositiveRate(7);
      evaluation1.trueNegativeRate((-5));
      try { 
        Evaluation.evaluateModel("\n\n=== Error on training data ===\n", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name 
         // 
         // === Error on training data ===
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.881807511606033
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-149));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Double double0 = new Double(800.6494859982963);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.truePositiveRate(1035);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.trueNegativeRate(200);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(98.54532, Double.NaN);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 98.54532;
      doubleArray0[1] = 800.6494859982963;
      doubleArray0[2] = 800.6494859982963;
      doubleArray0[3] = (double) (-149);
      doubleArray0[4] = (double) 1;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 0, (-338.1856116029));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 24886
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2653188729187956
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "seedTipText");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.areaUnderROC(68);
      evaluation0.areaUnderPRC(36);
      double double0 = evaluation0.numFalsePositives(1363);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.rootMeanSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      double double0 = 2.0;
      int[] intArray1 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray1, (-149));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-972), intArray0, (-583));
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = 2.0;
      DenseInstance denseInstance0 = new DenseInstance((-583), doubleArray0);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, binarySparseInstance1, 4.9E-324);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5617755919609793
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KNNTipText");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IBk iBk0 = new IBk();
      Capabilities capabilities0 = new Capabilities(iBk0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation0.weightedTrueNegativeRate();
      Function.identity();
      Evaluation.main((String[]) null);
      double double1 = evaluation0.KBInformation();
      double double2 = evaluation0.numFalseNegatives(1024);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.numFalsePositives(1);
      assertEquals(double4, double1, 0.01);
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8772618077528356
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      textDirectoryLoader0.setOutputFilename(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setKNN");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      double double0 = evaluation0.falsePositiveRate(1097);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      double double1 = evaluation2.truePositiveRate(20);
      double double2 = evaluation2.meanAbsoluteError();
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double2, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation3.m_ClassPriors;
      double double4 = evaluation1.numFalseNegatives(70);
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation3.avgCost();
      assertNotEquals(double5, double0, 0.01);
      
      evaluation0.meanPriorAbsoluteError();
      evaluation3.numTrueNegatives(115);
      assertEquals(0.0, evaluation3.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.707865600544012
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Properties properties0 = new Properties();
      properties0.clear();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.weightedMatthewsCorrelation();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives((-1));
      Properties properties1 = new Properties();
      double double0 = evaluation1.m_SumPriorSqrErr;
      evaluation1.makeDistribution(0.0);
      evaluation0.numFalseNegatives((-1));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3651117152141232
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.m_ClassPriorsSum = (double) (-2);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.weightedFalsePositiveRate();
      evaluation1.falsePositiveRate((-1));
      Evaluation evaluation2 = new Evaluation(instances0);
      testInstances0.setHandler(multilayerPerceptron0);
      evaluation0.numTruePositives((-1));
      evaluation1.weightedFalsePositiveRate();
      int int0 = 110;
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.9058438561088598
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.meanAbsoluteError();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-3.0);
      doubleArray0[1] = Double.NaN;
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(true);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      evaluation0.numTruePositives(799);
      // Undeclared exception!
      try { 
        evaluation0.recall((-2648));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2648
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.9574227041064718
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      try { 
        costSensitiveClassifier0.graph();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Classifier: weka.classifiers.rules.ZeroR  cannot be graphed
         //
         verifyException("weka.classifiers.meta.CostSensitiveClassifier", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.3497578654663114
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.recall(Integer.MAX_VALUE);
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation1.truePositiveRate(2433);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.m_NumClasses = 23;
      // Undeclared exception!
      try { 
        evaluation3.weightedAreaUnderROC();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.976067484582713
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      char[] charArray0 = new char[2];
      charArray0[0] = 'u';
      charArray0[1] = 'C';
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(3, charArray0, (-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.2993869396158915
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      Properties properties0 = new Properties();
      properties0.clear();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives((-1));
      Properties properties1 = new Properties();
      double double0 = evaluation0.m_SumPriorSqrErr;
      evaluation0.makeDistribution(0.95);
      int int0 = 1945;
      evaluation0.numFalseNegatives(1945);
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.truePositiveRate(23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 23
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.1284141589692998
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator.identity();
      UnaryOperator.identity();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.numFalseNegatives((-3237));
      evaluation0.sizeOfPredictedRegions();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalDate(1003);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3914337620844703
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1692.2498;
      evaluation0.m_MarginCounts = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance(0.0, doubleArray0);
      instances0.add((Instance) denseInstance0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-972), (int[]) null, (-1609));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(denseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = ".arff";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@relation";
      stringArray0[4] = "k#HX%'[j<sj_ag41^]X";
      stringArray0[5] = ".bsi";
      stringArray0[6] = "@relation";
      textDirectoryLoader0.setOptions(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setDirectory(file0);
      evaluation0.setDiscardPredictions(true);
      assertTrue(evaluation0.getDiscardPredictions());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 1802.097599080084;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 1802.097599080084;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      // Undeclared exception!
      try { 
        evaluation0.precision(92);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 92
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6602698609258804
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.numTruePositives(1024);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      evaluation0.weightedTrueNegativeRate();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedFalseNegativeRate();
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.7650406133145347
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Properties properties0 = new Properties();
      properties0.clear();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives((-1));
      Properties properties1 = new Properties();
      double double0 = evaluation1.m_SumPriorSqrErr;
      evaluation1.makeDistribution(0.0);
      evaluation0.numFalseNegatives((-1));
      double double1 = evaluation1.m_MinTarget;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation1.weightedFalseNegativeRate();
      evaluation0.trueNegativeRate((-5200));
      MockRandom mockRandom1 = new MockRandom(0L);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation1.weightedFalsePositiveRate();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      int int0 = 25;
      evaluation1.falsePositiveRate(25);
      evaluation0.falsePositiveRate(114);
      PipedReader pipedReader0 = new PipedReader();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7843161681628152
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "KNNTipText");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      IBk iBk0 = new IBk();
      Capabilities capabilities0 = new Capabilities(iBk0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.weightedTrueNegativeRate();
      Function.identity();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)59;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte) (-21);
      byteArray0[6] = (byte) (-77);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Evaluation.main((String[]) null);
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double double1 = evaluation0.weightedFMeasure();
      assertEquals(Double.NaN, double1, 0.01);
      
      iBk0.setKNN((-1));
      capabilities0.dependencies();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      double double2 = evaluation0.weightedPrecision();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.352641895713288
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((byte)91);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.truePositiveRate((-1326));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom2 = new MockRandom(0L);
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = (-2);
      evaluation1.trueNegativeRate((-2));
      evaluation1.weightedTruePositiveRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.makeDistribution(Double.NaN);
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader((-2));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3307102464186924
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.getClassifier();
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[1];
      double[] doubleArray0 = evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
      UnaryOperator.identity();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 4;
      intArray0[1] = (-972);
      intArray0[2] = 0;
      intArray0[3] = 4;
      intArray0[4] = 2;
      intArray0[5] = 818;
      intArray0[6] = 2;
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0, intArray0, 2);
      evaluation0.falseNegativeRate(4);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1989L));
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      multilayerPerceptron0.setGUI(false);
      boolean boolean0 = evaluation0.m_NoPriors;
      Object object0 = new Object();
      LWL lWL0 = new LWL();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) mockRandom1;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) lWL0;
      objectArray0[3] = object0;
      objectArray0[4] = (Object) textDirectoryLoader0;
      objectArray0[5] = (Object) mockRandom1;
      objectArray0[6] = (Object) lWL0;
      objectArray0[7] = (Object) evaluation0;
      try { 
        evaluation0.crossValidateModel((Classifier) lWL0, instances0, 16, (Random) mockRandom1, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockRandom cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      UnaryOperator.identity();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((byte)91);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      multilayerPerceptron1.setGUI(false);
      boolean boolean0 = evaluation0.m_NoPriors;
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) multilayerPerceptron1;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) mockRandom0;
      Object object1 = new Object();
      objectArray0[4] = object1;
      objectArray0[5] = (Object) stacking0;
      objectArray0[4] = (Object) stacking0;
      objectArray0[7] = (Object) mockRandom0;
      objectArray0[8] = (Object) instances0;
      try { 
        evaluation0.crossValidateModel((Classifier) null, instances0, 497, (Random) mockRandom1, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.858388266789381
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(39L);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives((-1));
      Properties properties1 = new Properties();
      evaluation1.getRevision();
      Properties properties2 = new Properties();
      UnivariateKernelEstimator univariateKernelEstimator0 = new UnivariateKernelEstimator();
      evaluation0.m_PriorEstimator = univariateKernelEstimator0;
      ProtectedProperties protectedProperties1 = null;
      try {
        protectedProperties1 = new ProtectedProperties((Properties) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.3228823459307204
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((byte)91);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      multilayerPerceptron0.setGUI(false);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      DenseInstance denseInstance0 = new DenseInstance(37);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-972);
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = (double) 37;
      Attribute attribute0 = new Attribute("@data", (-972));
      evaluation0.setPriors(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFPriorEntropy();
      evaluation0.meanPriorAbsoluteError();
      try { 
        evaluation1.evaluateModelOnce((Classifier) naiveBayesMultinomialUpdateable0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.677653559417036
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[3];
      intArray0[0] = 1110;
      intArray0[1] = 1110;
      intArray0[2] = (-149);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-360.0), intArray0, 206);
      textDirectoryLoader0.setCharSet("@relation");
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelationalClassFormat(instances0);
      testInstances0.setNumRelationalDate((-149));
      evaluation0.truePositiveRate((-2));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      evaluation0.precision(8);
      evaluation0.falsePositiveRate(5400);
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      Version.REVISION = 17;
      evaluation0.trueNegativeRate(102);
      org.evosuite.runtime.Random.setNextRandom(5400);
      char[] charArray0 = new char[5];
      charArray0[0] = 'A';
      charArray0[1] = '_';
      charArray0[2] = 'b';
      charArray0[3] = '%';
      charArray0[4] = 'f';
      evaluation1.num2ShortID(1110, charArray0, 17);
      try { 
        evaluation1.evaluateModelOnce(1827.68682930145, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1827
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      String[] stringArray0 = new String[0];
      textDirectoryLoader0.setOptions(stringArray0);
      int[] intArray0 = new int[2];
      intArray0[0] = 498;
      intArray0[1] = 498;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1000.0, intArray0, (-1983656986));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2521.0, intArray0, (-972));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.setValue(466, (double) (-1983656986));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance3.setMissing((-972));
      Evaluation.main(stringArray0);
      try { 
        evaluation0.updateStatsForPredictor(1798.536256992, binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.464336640144949
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-149));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      double double0 = evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Double double1 = new Double(800.6494859982963);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double2, double0, 0.01);
      
      evaluation0.truePositiveRate(1035);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.trueNegativeRate(200);
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.addNumericTrainClass(2, 10000.0);
      String string0 = evaluation1.toClassDetailsString();
      assertEquals("=== Detailed Accuracy By Class ===\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "seedTipText");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.areaUnderROC(68);
      evaluation0.areaUnderPRC(36);
      double double0 = evaluation0.m_SumSqrPredicted;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(36);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 36
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = Locale.getISOCountries();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      textDirectoryLoader1.setOptions(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getStructure();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setDirectory(file0);
      evaluation0.setDiscardPredictions(false);
      assertFalse(evaluation0.getDiscardPredictions());
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)19;
      instances0.deleteWithMissing((int) (byte)91);
      byteArray0[3] = (byte) (-74);
      byteArray0[5] = (byte) (-18);
      Evaluation evaluation0 = new Evaluation(instances0);
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      DenseInstance denseInstance0 = new DenseInstance((byte)5);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) (byte) (-74);
      doubleArray0[1] = (double) (byte) (-74);
      doubleArray0[2] = (double) (byte)91;
      doubleArray0[3] = (double) (byte)19;
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.765922840359812
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.totalCost();
      textDirectoryLoader0.setCharSet("@relation");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1438));
      evaluation0.SFSchemeEntropy();
      int int0 = (-2869);
      evaluation0.recall((-2869));
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      double double0 = 1152.8250277934;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2869);
      doubleArray0[1] = (double) (-2869);
      doubleArray0[2] = (double) (-1438);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(114);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.0214996810937595
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toSummaryString(".bsi", true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      textDirectoryLoader0.setOutputFilename(false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setKNN");
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      evaluation0.recall(Integer.MAX_VALUE);
      evaluation0.weightedFalsePositiveRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.falsePositiveRate(1097);
      Evaluation evaluation2 = new Evaluation(instances0, (CostMatrix) null);
      evaluation2.truePositiveRate(20);
      double double2 = evaluation1.weightedAreaUnderROC();
      double double3 = evaluation2.meanAbsoluteError();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.weightedTruePositiveRate();
      assertEquals(double4, double2, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation3.m_ClassPriors;
      double double5 = evaluation1.numFalseNegatives(70);
      assertEquals(0.0, double5, 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      double double6 = evaluation0.truePositiveRate(26);
      assertEquals(double6, double1, 0.01);
      assertNotEquals(double6, double2, 0.01);
      
      evaluation3.toSummaryString(false);
      evaluation2.useNoPriors();
      assertEquals(Double.NaN, evaluation2.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.572094242000117
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      testInstances0.setNumNominalValues(115);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedAreaUnderROC();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation1.weightedFalsePositiveRate();
      evaluation1.falsePositiveRate((-1));
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.numTruePositives((-1));
      evaluation1.weightedFalsePositiveRate();
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation3 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      evaluation0.pctIncorrect();
      double double0 = evaluation2.m_SumSqrClass;
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation4.weightedFalsePositiveRate();
      Evaluation evaluation5 = new Evaluation(instances0);
      evaluation4.weightedFalsePositiveRate();
      evaluation4.falsePositiveRate((-980));
      // Undeclared exception!
      try { 
        evaluation4.truePositiveRate(40);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 40
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.609076840277197
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1692.2498;
      evaluation0.m_MarginCounts = doubleArray0;
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.totalCost();
      assertEquals(0.0, double0, 0.01);
      
      evaluation1.recall(17);
      evaluation1.weightedFalsePositiveRate();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation2.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation2.falsePositiveRate(2921);
      assertEquals(0.0, double2, 0.01);
      
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      double double3 = evaluation3.truePositiveRate(918);
      assertEquals(double3, double2, 0.01);
      
      Evaluation evaluation4 = new Evaluation(instances0);
      Evaluation evaluation5 = new Evaluation(instances0, (CostMatrix) null);
      double double4 = evaluation5.weightedAreaUnderROC();
      assertEquals(double4, double1, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      int[] intArray1 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray1, (-149));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-972), intArray0, (-583));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      binarySparseInstance3.setValue(26, 1.7976931348623157E308);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((Instance) binarySparseInstance3);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      double double0 = evaluation0.errorRate();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.813192741150463
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1692.2498;
      evaluation0.m_MarginCounts = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance(11);
      instances0.add((Instance) denseInstance0);
      evaluation0.m_Correct = 4.9E-324;
      int[] intArray0 = new int[6];
      textDirectoryLoader0.setCharSet((String) null);
      intArray0[0] = (-1438);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falsePositiveRate((-1438));
      evaluation1.SFSchemeEntropy();
      evaluation1.recall((-1438));
      Evaluation evaluation2 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation3 = new Evaluation(instances0);
      String[] stringArray0 = new String[10];
      Evaluation.main(stringArray0);
      evaluation1.setPriors(instances0);
      evaluation2.SFPriorEntropy();
      double double0 = evaluation0.m_Correct;
      evaluation1.recall(466);
      evaluation3.weightedFalsePositiveRate();
      assertEquals(Double.NaN, evaluation3.pctCorrect(), 0.01);
      
      double double1 = evaluation0.pctCorrect();
      assertEquals(Double.POSITIVE_INFINITY, double1, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.4675368896014644
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@data";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((byte)56);
      Stacking stacking0 = new Stacking();
      double double0 = evaluation0.m_Correct;
      evaluation0.recall((byte)91);
      evaluation0.weightedFalsePositiveRate();
      double double1 = evaluation0.pctCorrect();
      evaluation0.weightedFalsePositiveRate();
      double double2 = evaluation0.falsePositiveRate((-2074));
      assertNotEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.truePositiveRate((byte)56);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1012448189540684
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom((byte)91);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      MockRandom mockRandom2 = new MockRandom(0L);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate((-2));
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.0339214067724836
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(86);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double double0 = evaluation0.numTrueNegatives((byte)91);
      assertEquals(0.0, double0, 0.01);
      
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "']n}zw6PC;:NbY\u0003*");
      Attribute attribute0 = new Attribute("esg%", linkedList0, protectedProperties1);
      double double1 = evaluation0.KBMeanInformation();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      Evaluation evaluation2 = new Evaluation(instances0);
      double double2 = evaluation2.m_MaxTarget;
      double double3 = evaluation0.trueNegativeRate(0);
      double double4 = evaluation1.truePositiveRate((-943));
      assertEquals(double4, double3, 0.01);
      
      double double5 = evaluation0.KBRelativeInformation();
      assertEquals(double5, double1, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (-3179.5164405056635);
      doubleArray0[1] = (-1475.519212391207);
      doubleArray0[2] = (double) (-972);
      double double0 = evaluation0.numInstances();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.8109710120534392
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1692.2498;
      evaluation0.m_MarginCounts = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance(11);
      instances0.add((Instance) denseInstance0);
      int[] intArray0 = new int[6];
      textDirectoryLoader0.setCharSet((String) null);
      intArray0[0] = (-1438);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 400);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Vote vote0 = new Vote();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = "@relation";
      stringArray0[3] = ".arff";
      stringArray0[4] = "   * @param args the commandline arguments\n";
      try { 
        Evaluation.evaluateModel((Classifier) vote0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.meta.Vote:
         // 
         // -S <num>
         // \tRandom number seed.
         // \t(default 1)
         // -B <classifier specification>
         // \tFull class name of classifier to include, followed
         // \tby scheme options. May be specified multiple times.
         // \t(default: \"weka.classifiers.rules.ZeroR\")
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         // -P <path to serialized classifier>
         // \tFull path to serialized classifier to include.
         // \tMay be specified multiple times to include
         // \tmultiple serialized classifiers. Note: it does
         // \tnot make sense to use pre-built classifiers in
         // \ta cross-validation.
         // -R <AVG|PROD|MAJ|MIN|MAX|MED>
         // \tThe combination rule to use
         // \t(default: AVG)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.9969587135755305
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[5] = 1097;
      intArray0[1] = (-1438);
      instances0.deleteWithMissing(112);
      REPTree rEPTree0 = new REPTree();
      REPTree rEPTree1 = new REPTree();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".bsi";
      stringArray0[1] = ".bsi";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@data";
      stringArray0[7] = ".bsi";
      AbstractClassifier.runClassifier(rEPTree1, stringArray0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-18);
      byteArray0[1] = (byte) (-18);
      byteArray0[2] = (byte) (-18);
      byteArray0[3] = (byte) (-18);
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-18);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Instances.test(stringArray0);
      Evaluation evaluation1 = new Evaluation(instances0);
      REPTree rEPTree2 = new REPTree();
      try { 
        evaluation1.evaluateModel((Classifier) rEPTree1, instances0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.7978358662388025
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      UnaryOperator.identity();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.m_MarginCounts;
      evaluation0.numFalseNegatives((byte)91);
      evaluation0.sizeOfPredictedRegions();
      MockRandom mockRandom0 = new MockRandom(0L);
      Object object0 = new Object();
      Object object1 = new Object();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Capabilities capabilities0 = naiveBayesUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate((byte)91);
      evaluation0.truePositiveRate((byte)91);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.precision(4);
      evaluation0.falsePositiveRate((-124));
      evaluation0.trueNegativeRate(1);
      org.evosuite.runtime.Random.setNextRandom((-219252797));
      Instances instances1 = evaluation0.getHeader();
      Instances instances2 = new Instances(instances0, (-1));
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances2);
      converterUtils_DataSource0.nextElement(instances1);
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.7002883476198396
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.KBRelativeInformation();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.coverageOfTestCasesByPredictedRegions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.weightedPrecision();
      try { 
        costSensitiveClassifier0.graph();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Classifier: weka.classifiers.rules.ZeroR  cannot be graphed
         //
         verifyException("weka.classifiers.meta.CostSensitiveClassifier", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom((-1414L));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      UnaryOperator.identity();
      UnaryOperator.identity();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-11);
      byteArray0[1] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      textDirectoryLoader0.setDebug(true);
      evaluation0.toSummaryString(">m)_# 3@ {{", false);
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9696189082731257
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      int[] intArray0 = new int[2];
      intArray0[0] = 1097;
      intArray0[1] = (-1438);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1.7976931348623157E308, intArray0, (-149));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-1438);
      doubleArray0[1] = (double) (-149);
      doubleArray0[2] = (double) (-1438);
      try { 
        evaluation1.evaluationForSingleInstance(doubleArray0, sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      evaluation0.m_MarginCounts = doubleArray0;
      DenseInstance denseInstance0 = new DenseInstance(11);
      instances0.add((Instance) denseInstance0);
      int[] intArray0 = new int[6];
      textDirectoryLoader0.setCharSet((String) null);
      intArray0[0] = (-1438);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, 400);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String[] stringArray0 = new String[2];
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)93;
      MockRandom mockRandom0 = new MockRandom((byte)56);
      Stacking stacking0 = new Stacking();
      try { 
        Evaluation.evaluateModel((Classifier) stacking0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.9004214117554474
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 1692.2498;
      DenseInstance denseInstance0 = new DenseInstance(483);
      instances0.add((Instance) denseInstance0);
      textDirectoryLoader0.setCharSet(".bsi");
      int[] intArray0 = new int[6];
      intArray0[0] = 400;
      intArray0[1] = 11;
      evaluation0.setPriors(instances0);
      intArray0[2] = 483;
      intArray0[3] = 483;
      intArray0[4] = (-972);
      int[] intArray1 = new int[2];
      intArray1[0] = 12;
      intArray1[1] = 400;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1438), intArray1, (-972));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      textDirectoryLoader0.setOutputFilename(true);
      BallNode ballNode0 = new BallNode(12, 8, (-972), denseInstance0, (-1085.8862230146));
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.612726894621007
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      DenseInstance denseInstance0 = new DenseInstance(497);
      instances0.add((Instance) denseInstance0);
      textDirectoryLoader0.getOptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[9];
      intArray0[1] = 498;
      intArray0[3] = 1097;
      intArray0[4] = 1097;
      intArray0[5] = 1097;
      intArray0[6] = 1097;
      intArray0[7] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1097.0, intArray0, 2895);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1097, intArray0, 498);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance2.setValue(1097, (-1722.578934));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance3.setMissing(473);
      try { 
        evaluation0.updatePriors(binarySparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.6172452880430224
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      evaluation0.SFMeanPriorEntropy();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.8688897147295798
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "@relation";
      stringArray0[1] = ".arff";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      textDirectoryLoader0.setOptions(stringArray0);
      int[] intArray0 = new int[4];
      intArray0[0] = 498;
      intArray0[1] = 498;
      intArray0[2] = 498;
      intArray0[3] = 466;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.numTrueNegatives(498);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute(".arff", linkedList0, protectedProperties1);
      instances0.sort(attribute0);
      evaluation0.KBMeanInformation();
      evaluation0.meanAbsoluteError();
      evaluation0.weightedTruePositiveRate();
      evaluation0.makeDistribution(Double.NaN);
      evaluation0.numFalseNegatives(484);
      evaluation0.truePositiveRate(0);
      CostMatrix costMatrix0 = Evaluation.handleCostOption((String) null, (-1082));
      assertNull(costMatrix0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Locale.getISOCountries();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader1.getDataSet();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      File file0 = serializedClassifier0.getModelFile();
      textDirectoryLoader0.setDirectory(file0);
      double double0 = evaluation0.weightedFMeasure();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.5083224300792684
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      MockRandom mockRandom0 = new MockRandom(424L);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      ZeroR zeroR0 = new ZeroR();
      Evaluation evaluation0 = new Evaluation(instances0);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      double double0 = evaluation0.truePositiveRate((-50));
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      double double1 = evaluation0.precision((-1));
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.falsePositiveRate((-1508));
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.trueNegativeRate((-124));
      org.evosuite.runtime.Random.setNextRandom((-2));
      double double3 = evaluation0.weightedAreaUnderROC();
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.2116676591133655
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 10.0;
      doubleArray0[2] = 288.2165;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = evaluation0.m_DiscardPredictions;
      textDirectoryLoader0.setOutputFilename(true);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".arff");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "state");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double double0 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      textDirectoryLoader0.setCharSet("No training file and no test file given.");
      UnaryOperator.identity();
      Instances instances1 = new Instances(instances0, 2288);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.weightedAreaUnderPRC();
      double double2 = evaluation1.m_MinTarget;
      double double3 = evaluation1.weightedFalseNegativeRate();
      assertEquals(double3, double1, 0.01);
      assertEquals(0.0, evaluation1.SFPriorEntropy(), 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      textDirectoryLoader0.setCharSet("@data");
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray0, (-891));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      textDirectoryLoader0.setCharSet("setMinNumObj");
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-972);
      doubleArray0[1] = (double) (-149);
      evaluation0.areaUnderROC((-972));
      evaluation0.areaUnderPRC(7);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("modelFileTipText", protectedProperties0);
      instances0.insertAttributeAt(attribute0, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) textDirectoryLoader0;
      objectArray0[1] = (Object) 1097;
      objectArray0[2] = (Object) null;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) binarySparseInstance0;
      objectArray0[5] = (Object) evaluation0;
      Object object1 = new Object();
      objectArray0[7] = object1;
      objectArray0[8] = (Object) binarySparseInstance0;
      try { 
        evaluation0.evaluateModel((Classifier) null, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.4967941443989226
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((byte)91);
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedFalsePositiveRate();
      evaluation1.falsePositiveRate(12);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation0.truePositiveRate((byte)91);
      evaluation1.weightedAreaUnderROC();
      MockRandom mockRandom2 = new MockRandom();
      try { 
        evaluation1.evaluationForSingleInstance((Classifier) multilayerPerceptron0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      intArray0[1] = (-1438);
      intArray0[2] = 1097;
      intArray0[4] = 1097;
      intArray0[4] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, intArray0, (-1438));
      int[] intArray1 = new int[4];
      intArray1[0] = 1;
      intArray1[1] = 1097;
      intArray1[2] = (-1069);
      intArray1[3] = (-1438);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0.0, intArray1, 2147483645);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1989L));
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom1 = new MockRandom();
      MultilayerPerceptron multilayerPerceptron1 = new MultilayerPerceptron();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.9319997931263964
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(86);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.numTrueNegatives((byte)91);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "']n}zw6PC;:NbY\u0003*");
      Attribute attribute0 = new Attribute("esg%", linkedList0, protectedProperties1);
      evaluation0.KBMeanInformation();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.relativeAbsoluteError();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.numFalseNegatives(1284);
      ZeroR zeroR0 = new ZeroR();
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction((Classifier) zeroR0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4305679341561652
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      UnaryOperator.identity();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getDataSet();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "@relation";
      stringArray0[2] = "@relation";
      stringArray0[3] = "@data";
      stringArray0[4] = "setConfidenceFactor";
      AbstractClassifier.runClassifier(serializedClassifier0, stringArray0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      serializedClassifier0.setModel(inputMappedClassifier0);
      String string0 = Evaluation.makeOptionString(inputMappedClassifier0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.1995219101255112
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      Stacking stacking0 = new Stacking();
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedFalsePositiveRate();
      mockRandom0.nextBoolean();
      mockRandom0.ints(0L);
      double double1 = evaluation0.falsePositiveRate(12);
      assertEquals(0.0, double1, 0.01);
      
      MockRandom mockRandom1 = new MockRandom();
      double double2 = evaluation0.weightedMatthewsCorrelation();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.863632173131252
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives((-149));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      evaluation0.weightedTrueNegativeRate();
      double double1 = evaluation0.kappa();
      assertEquals(1.0, double1, 0.01);
      
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Double double2 = new Double(800.6494859982963);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Double double3 = new Double(0.0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedFalseNegativeRate();
      double double4 = evaluation0.truePositiveRate((-149));
      assertEquals(0.0, double4, 0.01);
      
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      double double5 = evaluation0.trueNegativeRate(0);
      assertEquals(double5, double0, 0.01);
      
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.addNumericTrainClass(796.8668266743217, 800.6494859982963);
      assertEquals(Double.NaN, evaluation1.weightedTrueNegativeRate(), 0.01);
      
      evaluation0.correct();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.671193286591189
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(86);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      double double0 = evaluation0.numTrueNegatives((byte)91);
      Properties properties1 = new Properties();
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "']n}zw6PC;:NbY\u0003*");
      Attribute attribute0 = new Attribute("esg%", linkedList0, protectedProperties1);
      evaluation0.KBMeanInformation();
      CostMatrix costMatrix0 = new CostMatrix(2);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation1.matthewsCorrelationCoefficient((byte)91);
      assertEquals(double1, double0, 0.01);
      
      AllFilter allFilter0 = new AllFilter();
      double double2 = evaluation0.falsePositiveRate(0);
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[9];
      intArray0[0] = (-1903);
      intArray0[1] = (-2802);
      intArray0[2] = (-972);
      intArray0[3] = (-972);
      intArray0[4] = 1097;
      intArray0[5] = (-972);
      intArray0[6] = (-972);
      intArray0[7] = 1097;
      intArray0[8] = (-972);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-972), intArray0, (-972));
      BallTree ballTree0 = new BallTree((Instances) null);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.3931284250670086
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LWL lWL0 = new LWL();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(501);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      evaluation0.equals(naiveBayesUpdateable0);
      MockRandom mockRandom0 = new MockRandom();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.weightedRecall();
      Evaluation evaluation1 = new Evaluation(instances0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      testInstances0.getRelationalClassFormat();
      Evaluation evaluation2 = null;
      try {
        evaluation2 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.4835839954737446
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-1));
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numTrueNegatives((-1));
      Properties properties1 = new Properties();
      double double0 = evaluation1.m_SumSqrClass;
      MockRandom mockRandom1 = new MockRandom((-1L));
      evaluation1.toClassDetailsString("nhNGF");
      // Undeclared exception!
      try { 
        instances0.testCV((-1), 1940);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be at least 2!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.4060671899909023
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(108);
      evaluation0.meanAbsoluteError();
      evaluation0.weightedTruePositiveRate();
      evaluation0.numFalseNegatives((-2));
      int[] intArray0 = new int[8];
      intArray0[0] = (-1);
      intArray0[1] = (-1);
      intArray0[2] = 108;
      intArray0[3] = (-2);
      NaiveBayes naiveBayes0 = new NaiveBayes();
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Capabilities capabilities0 = naiveBayes0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.setNumRelationalDate(108);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("7%|~@PiR3fv(;", arrayList0, 450);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.511261069545129
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((byte)91);
      Stacking stacking0 = new Stacking();
      NaiveBayes naiveBayes0 = new NaiveBayes();
      Evaluation.getGlobalInfo(stacking0);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Capabilities capabilities0 = naiveBayesUpdateable0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalDate((byte)91);
      evaluation0.truePositiveRate((byte)91);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.precision((-1));
      evaluation1.falsePositiveRate((byte)91);
      evaluation0.trueNegativeRate((-124));
      org.evosuite.runtime.Random.setNextRandom((-2494));
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.166089906805759
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "@data";
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)56;
      byteArray0[1] = (byte)91;
      byteArray0[2] = (byte)56;
      instances0.deleteWithMissing((int) (byte)91);
      byteArray0[3] = (byte) (-74);
      byteArray0[5] = (byte) (-18);
      Evaluation evaluation0 = new Evaluation(instances0);
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      naiveBayesMultinomialUpdateable0.lnFactorial(50);
      DenseInstance denseInstance0 = new DenseInstance((byte)5);
      evaluation0.SFMeanEntropyGain();
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) additiveRegression0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.2577108695590575
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      UnaryOperator.identity();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives(108);
      double double0 = evaluation0.m_SumPriorEntropy;
      LWL lWL0 = new LWL();
      Classifier classifier0 = lWL0.getClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[0];
      try { 
        evaluation0.evaluateModel(classifier0, instances0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.DecisionStump", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      int[] intArray1 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(15.0, intArray1, (-149));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-972), intArray0, (-583));
      int[] intArray2 = new int[5];
      intArray2[0] = (-583);
      intArray2[1] = (-972);
      intArray2[2] = (-972);
      intArray2[3] = (-972);
      intArray2[4] = (-972);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1013.7, intArray2, 2904);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(1334.329037172857, intArray2, (-972));
      Attribute attribute0 = new Attribute("@relation", (-1576));
      SparseInstance sparseInstance0 = new SparseInstance(1);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      J48 j48_0 = new J48();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) j48_0, (Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.7774503447663808
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFEntropyGain();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.668803800330735
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numTruePositives(86);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      evaluation0.numTrueNegatives((byte)91);
      Properties properties1 = new Properties();
      evaluation0.m_ComplexityStatisticsAvailable = true;
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties2);
      Attribute attribute0 = new Attribute("resret", instances0, 86);
      instances0.sort(attribute0);
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 0.0;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4);
      binarySparseInstance0.setValue(Integer.MIN_VALUE, (-2075.7));
      double double1 = evaluation0.falseNegativeRate((byte)91);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double2, 0.01);
      
      evaluation0.numFalseNegatives(8);
      double double3 = evaluation1.truePositiveRate(3);
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.numFalsePositives((-4050));
      assertEquals(0.0, double4, 0.01);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.9174992175431913
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      UnaryOperator.identity();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom((-2));
      Properties properties0 = new Properties();
      MockRandom mockRandom1 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = 33.9671;
      doubleArray0[2] = 1802.097599080084;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 1802.097599080084;
      int[] intArray0 = new int[6];
      intArray0[0] = (-353);
      intArray0[1] = (-2);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[5] = (-1);
      evaluation0.falsePositiveRate((-1));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      int[] intArray1 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray1, (-149));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-972), intArray0, (-583));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      TreeSet<String> treeSet0 = new TreeSet<String>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) treeSet0);
      Attribute attribute0 = new Attribute("r)7M]tvm;of_RK!!tqG", list0, (-149));
      binarySparseInstance0.value(attribute0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0);
      binarySparseInstance4.setValue(1, (double) (-972));
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((Instance) binarySparseInstance3);
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.rootRelativeSquaredError();
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.5243899369820615
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      evaluation0.toCumulativeMarginDistributionString();
      intArray0[0] = 1097;
      evaluation0.numTruePositives((-68));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "setModel");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.weightedTrueNegativeRate();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.truePositiveRate((-149));
      evaluation0.trueNegativeRate(1952);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 1097;
      doubleArray0[1] = 1469.6692;
      doubleArray0[2] = (-1948.9419);
      doubleArray0[3] = (double) 1097;
      doubleArray0[4] = (double) 1097;
      doubleArray0[5] = (double) (-4892);
      SparseInstance sparseInstance0 = new SparseInstance(1097, doubleArray0, intArray0, (-197112209));
      assertEquals(6, sparseInstance0.numValues());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.3208119525559794
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      int[] intArray1 = new int[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray1, (-149));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-972), intArray0, (-583));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-13);
      byteArray0[1] = (byte) (-70);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 15.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-13.21845663532716), doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((SparseInstance) binarySparseInstance4);
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.m_TotalCoverage;
      double double1 = evaluation1.fMeasure(26);
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-525.1), intArray0, (-972));
      AbstractInstance.s_numericAfterDecimalPoint = (-972);
      BallTree ballTree0 = new BallTree((Instances) null);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.9535761275244625
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[6];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      textDirectoryLoader0.setCharSet("@data");
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray0, (-891));
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-583);
      doubleArray0[1] = (double) (-149);
      doubleArray0[2] = (double) (-583);
      doubleArray0[3] = (double) (-583);
      doubleArray0[4] = (double) (-1438);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.806543253194114
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numTruePositives((-149));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      evaluation0.weightedTrueNegativeRate();
      evaluation0.kappa();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      Double double0 = new Double(800.6494859982963);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.unweightedMacroFmeasure();
      evaluation0.weightedFalseNegativeRate();
      evaluation0.truePositiveRate(1035);
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.falsePositiveRate(0);
      evaluation0.truePositiveRate(200);
      org.evosuite.runtime.Random.setNextRandom((-1453208835));
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.7671896554690316
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int[] intArray0 = new int[1];
      intArray0[0] = 1097;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15.0, intArray0, (-149));
      int[] intArray1 = new int[1];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.0, intArray1, (-149));
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-583));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setNearestNeighbourSearchAlgorithm((NearestNeighbourSearch) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object object0 = new Object();
      LWL lWL2 = new LWL();
      double double0 = evaluation0.priorEntropy();
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.448442309591302
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int[] intArray0 = new int[5];
      intArray0[0] = (-149);
      intArray0[1] = (int) (byte)91;
      intArray0[2] = (int) (byte)91;
      intArray0[3] = (int) (byte)91;
      intArray0[4] = (-149);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-149), intArray0, (-1749));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(Double.NaN, intArray0, (-1749));
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(91, intArray0, (-1749));
      Attribute attribute0 = new Attribute(".bsi", instances0, (-583));
      binarySparseInstance2.toString(attribute0, 91);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.numFalseNegatives(17);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.truePositiveRate(14);
      double double2 = evaluation0.SFPriorEntropy();
      assertEquals(double2, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation1.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double3 = evaluation0.pctUnclassified();
      assertEquals(Double.NaN, double3, 0.01);
      assertNotEquals(double3, double2, 0.01);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      ZeroR zeroR0 = new ZeroR();
      String string0 = Evaluation.wekaStaticWrapper(zeroR0, "-R");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-R";
      stringArray0[1] = string0;
      stringArray0[2] = "-R";
      stringArray0[3] = "-R";
      try { 
        Evaluation.evaluateModel(string0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name // Generated with Weka 3.7.7
         // //
         // // This code is public domain and comes with no warranty.
         // //
         // // Timestamp: Fri Feb 14 20:21:21 GMT 2014
         // 
         // package weka.classifiers;
         // 
         // import weka.core.Attribute;
         // import weka.core.Capabilities;
         // import weka.core.Capabilities.Capability;
         // import weka.core.Instance;
         // import weka.core.Instances;
         // import weka.core.RevisionUtils;
         // import weka.classifiers.Classifier;
         // import weka.classifiers.AbstractClassifier;
         // 
         // public class WekaWrapper
         //   extends AbstractClassifier {
         // 
         //   /**
         //    * Returns only the toString() method.
         //    *
         //    * @return a string describing the classifier
         //    *_/
         //   public String globalInfo() {
         //     return toString();
         //   }
         // 
         //   /**
         //    * Returns the capabilities of this classifier.
         //    *
         //    * @return the capabilities
         //    *_/
         //   public Capabilities getCapabilities() {
         //     weka.core.Capabilities result = new weka.core.Capabilities(this);
         // 
         //     result.enable(weka.core.Capabilities.Capability.NOMINAL_ATTRIBUTES);
         //     result.enable(weka.core.Capabilities.Capability.NUMERIC_ATTRIBUTES);
         //     result.enable(weka.core.Capabilities.Capability.DATE_ATTRIBUTES);
         //     result.enable(weka.core.Capabilities.Capability.STRING_ATTRIBUTES);
         //     result.enable(weka.core.Capabilities.Capability.RELATIONAL_ATTRIBUTES);
         //     result.enable(weka.core.Capabilities.Capability.MISSING_VALUES);
         //     result.enable(weka.core.Capabilities.Capability.NOMINAL_CLASS);
         //     result.enable(weka.core.Capabilities.Capability.NUMERIC_CLASS);
         //     result.enable(weka.core.Capabilities.Capability.DATE_CLASS);
         //     result.enable(weka.core.Capabilities.Capability.MISSING_CLASS_VALUES);
         // 
         // 
         //     result.setMinimumNumberInstances(0);
         // 
         //     return result;
         //   }
         // 
         //   /**
         //    * only checks the data against its capabilities.
         //    *
         //    * @param i the training data
         //    *_/
         //   public void buildClassifier(Instances i) throws Exception {
         //     // can classifier handle the data?
         //     getCapabilities().testWithFail(i);
         //   }
         // 
         //   /**
         //    * Classifies the given instance.
         //    *
         //    * @param i the instance to classify
         //    * @return the classification result
         //    *_/
         //   public double classifyInstance(Instance i) throws Exception {
         //     Object[] s = new Object[i.numAttributes()];
         //     
         //     for (int j = 0; j < s.length; j++) {
         //       if (!i.isMissing(j)) {
         //         if (i.attribute(j).isNominal())
         //           s[j] = new String(i.stringValue(j));
         //         else if (i.attribute(j).isNumeric())
         //           s[j] = new Double(i.value(j));
         //       }
         //     }
         //     
         //     // set class value to missing
         //     s[i.classIndex()] = null;
         //     
         //     return -R.classify(s);
         //   }
         // 
         //   /**
         //    * Returns the revision string.
         //    * 
         //    * @return        the revision
         //    *_/
         //   public String getRevision() {
         //     return RevisionUtils.extract(\"1.0\");
         //   }
         // 
         //   /**
         //    * Returns only the classnames and what classifier it is based on.
         //    *
         //    * @return a short description
         //    *_/
         //   public String toString() {
         //     return \"Auto-generated classifier wrapper, based on weka.classifiers.rules.ZeroR (generated with Weka 3.7.7).\\n\" + this.getClass().getName() + \"/-R\";
         //   }
         // 
         //   /**
         //    * Runs the classfier from commandline.
         //    *
         //    * @param args the commandline arguments
         //    *_/
         //   public static void main(String args[]) {
         //     runClassifier(new WekaWrapper(), args);
         //   }
         // }
         // 
         // class -R {
         //   public static double classify(Object[] i) {
         //     return 0.0;
         //   }
         // }
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^Af% %Jl");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "seedTipText");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = 68;
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, ".arff");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "%,";
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      stringArray0[1] = "globalInfo";
      stringArray0[4] = "%,";
      stringArray0[3] = "PUbE-/HYe+}KX$@,";
      stringArray0[5] = "\tSets index of class attribute (default: last).\n";
      Evaluation.main(stringArray0);
      LogitBoost logitBoost0 = new LogitBoost();
      logitBoost0.getCapabilities();
      try { 
        Evaluation.wekaStaticWrapper(logitBoost0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.LogitBoost", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.1049561813316413
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "seedTipText");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.getDirectory();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      evaluation0.areaUnderROC(68);
      evaluation0.areaUnderPRC(68);
      double double0 = evaluation0.m_SumSqrPredicted;
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)29;
      byteArray0[1] = (byte) (-3);
      databaseLoader0.setUrl("a");
      byteArray0[2] = (byte)85;
      byteArray0[3] = (byte)61;
      byteArray0[4] = (byte) (-18);
      byteArray0[5] = (byte) (-114);
      byteArray0[6] = (byte)120;
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)88;
      databaseLoader0.getDataSet();
      try { 
        Evaluation.handleCostOption("DATE_ATTRIBUTES", 101);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = evaluation0.getClassPriors();
      assertEquals(0, doubleArray0.length);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertNotNull(doubleArray0);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 83;
      Instances instances0 = new Instances("'QuEZ<Uu3uOs2B8^C", arrayList0, 83);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
