/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 20:55:28 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Properties;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.FilteredClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Option;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.stemmers.IteratedLovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.estimators.KernelEstimator;
import weka.filters.Filter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.809815475399116
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "s.7k*VYFp");
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances3 = new TestInstances();
      Instances instances1 = testInstances2.generate();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.setOptions(testInstances3.DEFAULT_WORDS);
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText2.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8496377800098367
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "s.7k*VYFp");
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      naiveBayesMultinomialText1.useStopListTipText();
      testInstances0.clone();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.getOptions();
      assertEquals("If true, ignores all words that are on the stoplist.", naiveBayesMultinomialText1.useStopListTipText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.8778952727983707
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ",Z8Y");
      naiveBayesMultinomialText0.setMinWordFrequency(1.0E-8);
      IteratedLovinsStemmer iteratedLovinsStemmer0 = new IteratedLovinsStemmer();
      iteratedLovinsStemmer0.stemString("j}rb%uGQ4WhVv");
      iteratedLovinsStemmer0.stem("<");
      iteratedLovinsStemmer0.stem("<");
      naiveBayesMultinomialText0.setStemmer(iteratedLovinsStemmer0);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.m_norm = (-4213.4310718);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.getNorm();
      System.setCurrentTimeMillis((-1L));
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.LNormTipText();
      assertEquals(1.0E-8, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.301608716407634
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "4>;|XnEcP1k";
      stringArray0[1] = "";
      stringArray0[2] = ")+u7L-Z*.w^&6";
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-1224.43112);
      doubleArray0[1] = (-1786.538);
      doubleArray0[2] = 20.0;
      doubleArray0[3] = (-1.0);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      stringArray0[3] = "p.4hNBy=P#UC*E7";
      stringArray0[4] = "bRJT1lwJy=h_<guTuH";
      NaiveBayesMultinomialText.main(stringArray0);
      serializedClassifier0.setModel(naiveBayesMultinomialText0);
      String[] stringArray1 = new String[0];
      AbstractClassifier.runClassifier(serializedClassifier0, stringArray1);
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.useStopListTipText();
      naiveBayesMultinomialText0.LNormTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.0823851807497404
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = 1.0E-10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      naiveBayesMultinomialText0.m_normalize = true;
      testInstances0.setNumNominal(1);
      testInstances0.setRelation("L$:h)@`S");
      Instances instances0 = testInstances0.generate();
      instances0.clear();
      instances0.add((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      try { 
        costSensitiveClassifier1.graph();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Classifier: weka.classifiers.rules.ZeroR  cannot be graphed
         //
         verifyException("weka.classifiers.meta.CostSensitiveClassifier", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("The tokenizing algorithm to use on the strings.", arrayList0, 1);
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8660655013349245
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel5 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel6 = new PrecomputedKernelMatrixKernel();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "`RaS1{!I}F";
      stringArray0[1] = "-M";
      stringArray0[2] = "UGuNl> L<";
      stringArray0[3] = "    }\n    return (double) maxI;\n  }\n\n";
      stringArray0[4] = "=M\"LdK*ZZ0&\"j";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.673453421123148
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = true;
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      TestInstances testInstances0 = new TestInstances();
      MockFile mockFile0 = new MockFile("Use word frequencies rather than binary bag of words representation");
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      try { 
        costSensitiveClassifier0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // On-demand cost file doesn't exist: /home/ubuntu/termite/projects/107_weka/Testdata.cost
         //
         verifyException("weka.classifiers.meta.CostSensitiveClassifier", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7401591094179802
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.541260541191291
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.m_norm = 1443.80691253;
      naiveBayesMultinomialText0.setPeriodicPruning(2);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.normTipText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.add((Instance) sparseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours((Instance) null, 83);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      KernelEstimator kernelEstimator0 = new KernelEstimator(1355.11691);
      Capabilities capabilities0 = kernelEstimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Instances instances1 = new Instances(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText1.buildClassifier(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8529610277865571
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      FilteredClassifier filteredClassifier0 = new FilteredClassifier();
      Capabilities capabilities0 = filteredClassifier0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Instances instances1 = new Instances(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@data");
      try { 
        naiveBayesMultinomialText2.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0008621747507367
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "A stemmer based on the Lovins stemmer, described here:\n\n");
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.getLowercaseTokens();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      naiveBayesMultinomialText0.stopwordsTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.normTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.useWordFrequenciesTipText();
      naiveBayesMultinomialText5.tokenizerTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", naiveBayesMultinomialText5.useStopListTipText());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2062643589053543
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.clone();
      testInstances0.setNumNominal((-2));
      Instances instances1 = testInstances1.generate();
      instances1.clear();
      DenseInstance denseInstance0 = new DenseInstance(107);
      instances0.add((Instance) denseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      try { 
        costSensitiveClassifier0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // On-demand cost file doesn't exist: /home/ubuntu/termite/projects/107_weka/Testdata.cost
         //
         verifyException("weka.classifiers.meta.CostSensitiveClassifier", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.486945229497435
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      Instances instances1 = new Instances(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText2.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText6 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText7 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText8 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText8.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText9 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      NaiveBayesMultinomialText naiveBayesMultinomialText10 = new NaiveBayesMultinomialText();
      String string1 = naiveBayesMultinomialText10.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string1);
      
      naiveBayesMultinomialText6.stopwordsTipText();
      naiveBayesMultinomialText2.normalizeDocLengthTipText();
      String string2 = naiveBayesMultinomialText8.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      
      naiveBayesMultinomialText7.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText11 = new NaiveBayesMultinomialText();
      String string3 = naiveBayesMultinomialText4.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string3);
      
      String string4 = naiveBayesMultinomialText7.normTipText();
      assertEquals("The norm of the instances after normalization.", string4);
      
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      naiveBayesMultinomialText5.lowercaseTokensTipText();
      assertEquals(3.0, naiveBayesMultinomialText5.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText5.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText5.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText5.getNormalizeDocLength());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.8642961282019823
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      naiveBayesMultinomialText0.setLNorm((-181.1249208300193));
      costSensitiveClassifier0.getCostMatrixSource();
      FileSystemHandling.shouldAllThrowIOExceptions();
      costSensitiveClassifier0.setDebug(false);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "z";
      stringArray0[1] = "$43~Y";
      stringArray0[2] = "vWq'd";
      costSensitiveClassifier0.setOptions(stringArray0);
      File file0 = costSensitiveClassifier0.getOnDemandDirectory();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.normTipText();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-181.1249208300193), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.218736967976606
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("");
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.setSeed(3225);
      testInstances0.generate("@data");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendLineToFile(evoSuiteFile1, ".bsi");
      naiveBayesMultinomialText0.toString();
      Random.setNextRandom(121);
      // Undeclared exception!
      try { 
        testInstances0.setRelationalFormat((-399), instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -399
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      int[] intArray0 = new int[9];
      intArray0[0] = 1073741824;
      intArray0[1] = 82;
      intArray0[2] = (-1343);
      intArray0[3] = 6;
      intArray0[4] = 65;
      intArray0[5] = (-1244);
      intArray0[6] = 5;
      intArray0[7] = (-376);
      intArray0[8] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(350.8495701, intArray0, (-1343));
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.37425381042729
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setPeriodicPruning(50);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.debugTipText();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      instances0.getRandomNumberGenerator((-1));
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = null;
      try {
        instances1 = new Instances("", arrayList0, (-1361));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1361
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.debugTipText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.042704310510305
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.normTipText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(1, naiveBayesMultinomialText0.getPeriodicPruning());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.m_norm = 2002.9004776509714;
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.setPeriodicPruning((-1));
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText5.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText6 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText7 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText8 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.LNormTipText();
      naiveBayesMultinomialText8.stopwordsTipText();
      naiveBayesMultinomialText2.normalizeDocLengthTipText();
      naiveBayesMultinomialText5.useStopListTipText();
      naiveBayesMultinomialText5.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText9 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText9.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText10 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText10.normTipText();
      naiveBayesMultinomialText9.lowercaseTokensTipText();
      Random.setNextRandom(3);
      naiveBayesMultinomialText6.minWordFrequencyTipText();
      naiveBayesMultinomialText8.useWordFrequenciesTipText();
      assertFalse(naiveBayesMultinomialText8.getUseWordFrequencies());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9254241393966653
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Enumeration<Option> enumeration0 = new AlphabeticTokenizer();
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setPeriodicPruning((-399));
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.debugTipText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.getRandomNumberGenerator(1);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setDebug(false);
      costSensitiveClassifier0.getOnDemandDirectory();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText2.globalInfo();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.stemmerTipText();
      naiveBayesMultinomialText3.stemmerTipText();
      naiveBayesMultinomialText0.normTipText();
      assertEquals((-399), naiveBayesMultinomialText0.getPeriodicPruning());
      
      naiveBayesMultinomialText4.periodicPruningTipText();
      String string0 = naiveBayesMultinomialText4.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-81.6518401), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance2.copy();
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((-81.6518401), doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance6);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(1.0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText1.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string0);
      
      String string1 = naiveBayesMultinomialText1.normTipText();
      assertEquals("The norm of the instances after normalization.", string1);
      
      String string2 = naiveBayesMultinomialText1.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string2);
      
      String string3 = naiveBayesMultinomialText1.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string3);
      
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance6, false);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.792904926173455
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel5 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel6 = new PrecomputedKernelMatrixKernel();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText1.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      String string1 = naiveBayesMultinomialText0.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      String string2 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string2);
      
      String string3 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string3);
      
      String string4 = naiveBayesMultinomialText1.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string4);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String string5 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string5);
      
      String string6 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string6);
      
      naiveBayesMultinomialText2.setStopwords((File) null);
      String string7 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string7);
      
      String string8 = naiveBayesMultinomialText2.lowercaseTokensTipText();
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText2.getNorm(), 0.01);
      assertEquals("Whether to convert all tokens to lowercase", string8);
      assertFalse(naiveBayesMultinomialText2.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3950628639657614
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-81.6518401), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance2.copy();
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((-81.6518401), doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(1921.0, doubleArray0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      intArray0[6] = 0;
      BinarySparseInstance binarySparseInstance9 = new BinarySparseInstance(12.0, intArray0, 0);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance4 = new SparseInstance((SparseInstance) binarySparseInstance5);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.setOptions((String[]) null);
      File file0 = MockFile.createTempFile("-norm", "-norm", (File) null);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SparseInstance sparseInstance0 = new SparseInstance(1);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 1;
      doubleArray0[6] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(2.1025196807909743, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(2.1025196807909743, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "$;9P**";
      stringArray0[1] = "";
      stringArray0[2] = "$;9P**";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4267173502315558
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 13.0;
      doubleArray0[1] = 3.4;
      doubleArray0[2] = 13.0;
      doubleArray0[3] = 13.0;
      doubleArray0[4] = (-564.7116033226);
      doubleArray0[5] = 8.0;
      doubleArray0[6] = 3.0;
      doubleArray0[8] = 3.4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3.4, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Random.setNextRandom(0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "-norm";
      stringArray0[1] = "";
      stringArray0[2] = "{|2~v3lMi:3LY";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.879376754279852
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
      naiveBayesMultinomialText0.setStemmer(nullStemmer0);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.periodicPruningTipText();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 713.0;
      doubleArray0[1] = 713.0;
      doubleArray0[2] = (-1585.0527023);
      doubleArray0[3] = 1011.5;
      doubleArray0[4] = 713.0;
      doubleArray0[5] = 713.0;
      SparseInstance sparseInstance0 = new SparseInstance((-1585.0527023), doubleArray0);
      double[] doubleArray1 = naiveBayesMultinomialText0.m_wordsPerClass;
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.setMinWordFrequency(0.0);
      naiveBayesMultinomialText1.globalInfo();
      double double0 = naiveBayesMultinomialText1.getMinWordFrequency();
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.9205174592770455
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(1);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.debugTipText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances");
      naiveBayesMultinomialText0.useStopListTipText();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances1);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      naiveBayesMultinomialText1.m_data = instances0;
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier1.setMinimizeExpectedCost(false);
      CostSensitiveClassifier costSensitiveClassifier3 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getOnDemandDirectory();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText2.useStopListTipText();
      naiveBayesMultinomialText1.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.stemmerTipText();
      naiveBayesMultinomialText2.useWordFrequenciesTipText();
      naiveBayesMultinomialText2.lowercaseTokensTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText2.tokenizeInstance((Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.3566035010871094
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      Kernel.makeCopy(precomputedKernelMatrixKernel0);
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.listOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(14, stringArray0.length);
      
      naiveBayesMultinomialText0.getMinWordFrequency();
      String string0 = naiveBayesMultinomialText0.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = naiveBayesMultinomialText0.getNormalizeDocLength();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(boolean0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 876.6609447857;
      doubleArray0[1] = 876.6609447857;
      doubleArray0[2] = 876.6609447857;
      doubleArray0[3] = 876.6609447857;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(876.6609447857, doubleArray0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.390507814144438
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qBRFQd|.e");
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getOnDemandDirectory();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText4.m_tokenizer;
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText1.stopwordsTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      naiveBayesMultinomialText2.useStopListTipText();
      naiveBayesMultinomialText4.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.stemmerTipText();
      naiveBayesMultinomialText1.normTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText6 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText6.useWordFrequenciesTipText();
      naiveBayesMultinomialText3.lowercaseTokensTipText();
      String string0 = naiveBayesMultinomialText1.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.270128309864819
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.debugTipText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[4] = (double) (-2);
      doubleArray0[5] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance1.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(3962.567119906, doubleArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-1.0), doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(0.0, doubleArray0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qBRFQd|.e");
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      naiveBayesMultinomialText0.getStopwords();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 13.0;
      doubleArray0[1] = 3.4;
      doubleArray0[2] = 13.0;
      doubleArray0[3] = 13.0;
      doubleArray0[4] = (-564.7116033226);
      doubleArray0[5] = 8.0;
      doubleArray0[6] = 3.0;
      doubleArray0[7] = 13.0;
      doubleArray0[8] = 3.4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.0, doubleArray0);
      WordTokenizer wordTokenizer0 = new WordTokenizer();
      Random.setNextRandom(0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (-1040.430463603493);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 1.0;
      doubleArray0[4] = (-4195.532808037);
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (-4479.819806599489);
      doubleArray0[7] = 1840.469553782;
      doubleArray0[8] = (-455.4830660589);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.getLowercaseTokens();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.m_lnorm = 811.084403121833;
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 4.5;
      doubleArray0[1] = 19.0;
      doubleArray0[2] = (-1953.0);
      doubleArray0[3] = 21.0;
      doubleArray0[4] = 19.0;
      doubleArray0[5] = 19.0;
      doubleArray0[6] = 19.0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(19.0, doubleArray0);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[0];
      naiveBayesMultinomialText0.m_wordFrequencies = true;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-81.6518401), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance2.copy();
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      int int0 = (-915);
      binarySparseInstance3.isMissing((-915));
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Random.setNextRandom((-792));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("Kg`V2pAg{a", "c!8u2T0prG", file0);
      file1.delete();
      naiveBayesMultinomialText0.setStopwords(file1);
      doubleArray0[0] = (double) (-792);
      doubleArray0[1] = (double) (-792);
      doubleArray0[2] = (double) (-792);
      doubleArray0[3] = (double) (-792);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      String string0 = naiveBayesMultinomialText0.stopwordsTipText();
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string0);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0);
      int int0 = 0;
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance2);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Whether to convert all tokens to lowercase");
      naiveBayesMultinomialText0.m_periodicP = 5623;
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(1.0, doubleArray0);
      binarySparseInstance1.copy();
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((SparseInstance) binarySparseInstance5);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      binarySparseInstance4.s_numericAfterDecimalPoint = 0;
      intArray0[5] = 2430;
      intArray0[6] = 0;
      intArray0[7] = 0;
      SparseInstance sparseInstance1 = new SparseInstance((-2994.044205389649), doubleArray0, intArray0, 0);
      ArrayList<String> arrayList0 = new ArrayList<String>(0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("", arrayList0, protectedProperties0);
      sparseInstance1.isMissing(attribute0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      CoverTree coverTree0 = new CoverTree();
      Random.setNextRandom(10000);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.8232539857707217
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 1308;
      naiveBayesMultinomialText0.setPeriodicPruning(1308);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getUseStopList();
      boolean boolean0 = true;
      naiveBayesMultinomialText0.setMinWordFrequency(1308);
      Instances instances0 = null;
      try { 
        Filter.useFilter((Instances) null, (Filter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.8077927431911682
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(2.0, double0, 0.01);
      
      naiveBayesMultinomialText0.listOptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)108;
      byteArray0[1] = (byte) (-49);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText1.setOptions((String[]) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "#56";
      stringArray0[1] = "bz>d~!x";
      NaiveBayesMultinomialText.main(stringArray0);
      int int0 = naiveBayesMultinomialText1.getPeriodicPruning();
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText1.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
      assertEquals(0, int0);
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1946531330062844
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      TestInstances testInstances0 = new TestInstances();
      Object object0 = testInstances0.clone();
      naiveBayesMultinomialText0.m_normalize = true;
      testInstances0.setNumNominal(1);
      binarySparseInstance0.copy();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = 12.0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) (-2);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(6.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-588.24), doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((-1), doubleArray0);
      naiveBayesMultinomialText0.getOptions();
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setOptions(((TestInstances) object0).DEFAULT_WORDS);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0548651789166215
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setRelation("");
      Instances instances0 = testInstances0.generate();
      instances0.stream();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      FileSystemHandling.createFolder(evoSuiteFile0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.setSeed(3225);
      testInstances0.generate("@data");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.m_useStopList = true;
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText5.setUseStopList(false);
      assertFalse(naiveBayesMultinomialText5.getUseStopList());
      
      naiveBayesMultinomialText2.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText6 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      NaiveBayesMultinomialText naiveBayesMultinomialText7 = new NaiveBayesMultinomialText();
      WordTokenizer wordTokenizer0 = (WordTokenizer)naiveBayesMultinomialText6.m_tokenizer;
      NaiveBayesMultinomialText naiveBayesMultinomialText8 = new NaiveBayesMultinomialText();
      String string1 = naiveBayesMultinomialText8.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string1);
      
      naiveBayesMultinomialText7.stopwordsTipText();
      String string2 = naiveBayesMultinomialText1.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string2);
      
      String string3 = naiveBayesMultinomialText3.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string3);
      
      naiveBayesMultinomialText2.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText9 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText7.stemmerTipText();
      naiveBayesMultinomialText2.normTipText();
      String string4 = naiveBayesMultinomialText1.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string4);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText10 = new NaiveBayesMultinomialText();
      String string5 = naiveBayesMultinomialText10.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string5);
      
      String string6 = naiveBayesMultinomialText3.periodicPruningTipText();
      assertEquals(0, naiveBayesMultinomialText3.getPeriodicPruning());
      assertEquals(3.0, naiveBayesMultinomialText3.getMinWordFrequency(), 0.01);
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string6);
      assertFalse(naiveBayesMultinomialText3.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText3.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText3.getLNorm(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6868977693384446
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Random.setNextRandom((-792));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[4];
      SGDText sGDText0 = new SGDText();
      File file0 = sGDText0.getStopwords();
      File file1 = MockFile.createTempFile("Kg`V2pAg{a", "c!8u2T0prG", file0);
      naiveBayesMultinomialText0.setStopwords(file1);
      doubleArray0[0] = (double) (-792);
      doubleArray0[1] = (double) (-792);
      doubleArray0[2] = (double) (-792);
      doubleArray0[3] = (double) (-792);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.stopwordsTipText();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      naiveBayesMultinomialText0.m_normalize = true;
      testInstances0.setNumNominal(1);
      testInstances0.setRelation("L$:h)@`S");
      Instances instances0 = testInstances0.generate();
      instances0.clear();
      instances0.add((Instance) binarySparseInstance0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 7.0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-671.0995446), doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(Double.NEGATIVE_INFINITY, doubleArray0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u8{");
      naiveBayesMultinomialText0.setLNorm(3298.0);
      naiveBayesMultinomialText0.setNormalizeDocLength(false);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      double double0 = naiveBayesMultinomialText0.getNorm();
      assertEquals(3298.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(1.0, double0, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 13.0;
      doubleArray0[1] = 3.4;
      doubleArray0[2] = 13.0;
      doubleArray0[3] = 13.0;
      doubleArray0[4] = (-564.7116033226);
      doubleArray0[5] = 8.0;
      doubleArray0[6] = 3.0;
      doubleArray0[7] = 13.0;
      doubleArray0[8] = 3.4;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3.0, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(3.4, doubleArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText1.normTipText();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setMinWordFrequency((-564.7116033226));
      naiveBayesMultinomialText2.lowercaseTokensTipText();
      assertEquals((-564.7116033226), naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.440530683111708
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      boolean boolean0 = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      naiveBayesMultinomialText0.getUseWordFrequencies();
      String string0 = "s.7k*VYFp";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "s.7k*VYFp");
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      try { 
        AbstractClassifier.forName("y*;bA6h7ZQ/d#%,", testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: y*;bA6h7ZQ/d#%,
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6376398674083723
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.useStopListTipText();
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.setPeriodicPruning(0);
      File file1 = naiveBayesMultinomialText0.getStopwords();
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, (String) null, file1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      Random.setNextRandom(1141);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.8836095585126564
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 8.0;
      doubleArray0[1] = 8.0;
      doubleArray0[2] = 8.0;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = new NullStemmer();
      naiveBayesMultinomialText1.setStemmer(nullStemmer0);
      naiveBayesMultinomialText1.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getOnDemandDirectory();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      naiveBayesMultinomialText0.stopwordsTipText();
      String string1 = naiveBayesMultinomialText3.stopwordsTipText();
      assertEquals("The file containing the stopwords (if this is a directory then the default ones are used).", string1);
      
      String string2 = naiveBayesMultinomialText1.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      
      String string3 = naiveBayesMultinomialText2.periodicPruningTipText();
      assertEquals("How often (number of instances) to prune the dictionary of low frequency terms. 0 means don't prune. Setting a positive integer n means prune after every n instances", string3);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      String string4 = naiveBayesMultinomialText1.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string4);
      
      String string5 = naiveBayesMultinomialText4.normTipText();
      assertEquals("The norm of the instances after normalization.", string5);
      
      String string6 = naiveBayesMultinomialText3.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string6);
      
      String string7 = naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertEquals("Whether to convert all tokens to lowercase", string7);
      
      String string8 = naiveBayesMultinomialText2.getRevision();
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText2.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getNormalizeDocLength());
      assertEquals(1.0, naiveBayesMultinomialText2.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText2.getUseWordFrequencies());
      assertEquals(0, naiveBayesMultinomialText2.getPeriodicPruning());
      assertEquals("9122", string8);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.9918158637915617
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.debugTipText();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate();
      naiveBayesMultinomialText1.buildClassifier(instances0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText6 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText7 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText6.LNormTipText();
      naiveBayesMultinomialText2.stopwordsTipText();
      naiveBayesMultinomialText6.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.useStopListTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText8 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText5.periodicPruningTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText9 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText10 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText9.normTipText();
      naiveBayesMultinomialText0.lowercaseTokensTipText();
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_norm = (-1.0);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.1946531330062844
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      binarySparseInstance2.copy();
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0, doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance7 = new BinarySparseInstance(1921.0, doubleArray0);
      BinarySparseInstance binarySparseInstance8 = new BinarySparseInstance(0, doubleArray0);
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      intArray0[4] = 0;
      intArray0[5] = 0;
      naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "<anonymous>";
      stringArray0[1] = "m0N'TwGJ(;n-P|GLd4u";
      stringArray0[2] = "-W";
      stringArray0[3] = "124-133";
      stringArray0[4] = "YMd>!Cq/jN#|";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseWordFrequencies());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3574036981168276
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel1 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel2 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel3 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel4 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel5 = new PrecomputedKernelMatrixKernel();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel6 = new PrecomputedKernelMatrixKernel();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = ")";
      stringArray0[3] = "g?sog";
      NaiveBayesMultinomialText.main(stringArray0);
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      naiveBayesMultinomialText0.setOptions(stringArray1);
      Random.setNextRandom((-346));
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.064355996075928
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_normalize = true;
      testInstances0.setNumNominal(1);
      testInstances0.setRelation("L$:h)@`S");
      Instances instances0 = testInstances0.generate();
      instances0.add((Instance) binarySparseInstance0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Instances instances1 = naiveBayesMultinomialText0.m_data;
      try { 
        costSensitiveClassifier0.buildClassifier(instances1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // On-demand cost file doesn't exist: /home/ubuntu/termite/projects/107_weka/L$:h)@`S.cost
         //
         verifyException("weka.classifiers.meta.CostSensitiveClassifier", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance2);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance4);
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance(0);
      SparseInstance sparseInstance2 = new SparseInstance(0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }
}
