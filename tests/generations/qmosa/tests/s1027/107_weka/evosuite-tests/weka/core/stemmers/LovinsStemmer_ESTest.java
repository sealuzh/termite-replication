/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 08:00:57 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1355184734621102
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.getRevision();
      assertEquals("8034", string0);
      
      lovinsStemmer0.stemString("8034");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("Median (doubles): ");
      lovinsStemmer1.stemString("");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = ",?kjxfj.nd?ond";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      String string1 = lovinsStemmer2.stemString("_W!v0fx$ml%PF:rs");
      assertEquals("_w!v0fx$ml%pf:rs", string1);
      
      lovinsStemmer2.stemString("vas");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string2 = lovinsStemmer5.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string2);
      
      lovinsStemmer4.toString();
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer4.stemString("locet");
      String string4 = lovinsStemmer4.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.", string4);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0596900893751875
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Fatal error.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("Fatal error.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("Fatal error.");
      assertEquals("fat error.", string1);
      
      String string2 = lovinsStemmer0.stem("contents");
      assertEquals("content", string2);
      
      String string3 = lovinsStemmer1.stemString("ation");
      assertEquals("ation", string3);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1884606813619691
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = "NwgK\\uLS";
      String string1 = lovinsStemmer0.stemString(string0);
      assertEquals("nwgk\\l", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("end");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
      
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2108539372116165
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("_)WUA)tqnokV&|l8");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("4z5&HURy:5\"J8K");
      lovinsStemmer0.stem("t'qgher");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("w,WqGG)fY1I7");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("4z5&hury:5\"j8k");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("_)wua)tqnokv&|l8");
      String string1 = lovinsStemmer2.stemString("w,wqgg)fy1i7");
      assertEquals("w,wqg)fy1i7", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "xi7V0vZgVmd3DC";
      stringArray0[1] = "\r";
      stringArray0[2] = "t'qgher";
      stringArray0[3] = "4z5&hury:5\"j8k";
      stringArray0[4] = "w,wqg)fy1i7";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("t'qgher");
      assertEquals("t'qghes", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer2.stemString("k7s%' ob@ZI- u");
      assertEquals("k7%' ob@zi- u", string4);
      
      String string5 = lovinsStemmer0.stemString("xi7V0vZgVmd3DC");
      assertEquals("xi7v0vzgvmd3dc", string5);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1240387716033924
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem(",?kjxfj.nd?ond");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`kOr>}&OX/N(D/SDVW";
      stringArray0[1] = "8034";
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      stringArray0[2] = "8034";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.stem("iev");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("iev");
      assertEquals("ief", string1);
      
      lovinsStemmer3.stemString("k0n[");
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.getRevision();
      String string2 = lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      assertEquals("nam(s) of edit(s), typ as indic in th latic book. if ther is als an author field, then th edit field giv th edit of th book or collect in which th refer appear.", string2);
      
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2385956737890385
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("/eGRe'`:lBj!y?%VT");
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("lingulud");
      assertEquals("lingulus", string2);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string3 = lovinsStemmer0.stem("\"#p=`OuxU><Qu'BB");
      assertEquals("\"#p=`ouxu><qu'b", string3);
      
      String string4 = lovinsStemmer0.stem("mit");
      assertEquals("mis", string4);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1201043596738967
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("_)WUA)tqnokV&|l8");
      assertEquals("_)wu)tqnokv&|l8", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("4z5&HURy:5\"J8K");
      lovinsStemmer0.stemString("xi7V0vZgVmd3DC");
      lovinsStemmer0.stemString("idine");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("Development of a stemming algorithm");
      assertEquals("developm of a stem algorithm", string1);
      
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer0.toString();
      lovinsStemmer3.stemString("xi7v0vzgvmd3dc");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_)wu)tqnokv&|l8";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer3.stemString("%UT5.Fww.YT{%`JY");
      assertEquals("%ut5.fww.yt{%`jy", string2);
      
      lovinsStemmer0.stemString("7{a(D9M'1p ");
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stemString("linguuad");
      lovinsStemmer2.stemString("id");
      lovinsStemmer3.stem("ation");
      String string4 = lovinsStemmer0.stemString("4z5&hury:5\"j8k");
      assertEquals("4z5&hury:5\"j8k", string4);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1806624461335262
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer0.stemString("3'CQ-!x@Fh3G");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("KEYWORDS");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("nu\"hSR9zJnJ1P&\"r`");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      lovinsStemmer2.globalInfo();
      stringArray0[1] = "keyword";
      stringArray0[2] = "-h";
      stringArray0[3] = "KEYWORDS";
      stringArray0[4] = "3'CQ-!x@Fh3G";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer3.stemString("KEYWORDS");
      assertEquals("keyword", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer3.stem("3'CQ-!x@Fh3G");
      assertTrue(string3.equals((Object)string0));
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stem("-h");
      String string4 = lovinsStemmer3.stem("icists");
      assertEquals("ic", string4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1614662921410885
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stemString("`kOr>}&OX/N(D/SDVW");
      lovinsStemmer0.stem("Get position of option -o: ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("istr");
      assertEquals("ister", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("B4}F\u0001Ldbds+J.+Q ");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stem("`kOr>}&OX/N(D/SDVW");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("weka.core.stemmers.lovinsstemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.149000625079662
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString(" opt:ion.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("7Rr@|*Lz");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString(" opt:ion.");
      lovinsStemmer0.stemString("7Rr@|*Lz");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "rud";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString(" opt:ion.");
      assertEquals(" opt:ion.", string2);
      
      lovinsStemmer2.toString();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer2.stemString("'s");
      assertEquals("'s", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1489653525597563
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("ement");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A book~with an expLicit publisher.");
      lovinsStemmer0.stemString("SIZE");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer1.stemString("siz");
      lovinsStemmer1.stem("rud");
      lovinsStemmer1.stem("tex");
      lovinsStemmer0.stemString("ert");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.pex";
      stringArray0[1] = "=^j/g@;>\"LZa.N";
      stringArray0[2] = "ement";
      stringArray0[3] = "ement";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1456438031694904
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("0,8 ?j9@Y#H");
      lovinsStemmer0.stemString("0,8 ?j9@y#h");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("dex");
      assertEquals("dic", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("lovinsstemmerlux");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.stem("encies");
      assertEquals("enci", string3);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1304761769060139
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.stemString("lid");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "lis";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("UTFlHD|V'NJcAr");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1901230791849713
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("Array-Dimensions of 'new String[3][4][]': ");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "array-dimensions of 'new string[3][4][]': ";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "8034";
      stringArray1[1] = "";
      stringArray1[2] = "";
      lovinsStemmer2.stem("");
      stringArray1[3] = "array-dimensions of 'new string[3][4][]': ";
      stringArray1[4] = "&b9-qv:^oypcet";
      stringArray1[5] = "";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.stemString("otide");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.getRevision();
      lovinsStemmer2.stem("&b9-qv:^oypcet");
      lovinsStemmer3.toString();
      lovinsStemmer2.stemString("array-dimensions of 'new string[3][4][]': ");
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.1084624621349384
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("_)WUA)tqnokV&|l8");
      assertEquals("_)wu)tqnokv&|l8", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("4z5&HURy:5\"J8K");
      lovinsStemmer0.stemString("xi7V0vZgVmd3DC");
      lovinsStemmer0.stemString("idine");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer0.toString();
      lovinsStemmer3.stemString("xi7v0vzgvmd3dc");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_)wu)tqnokv&|l8";
      String string1 = lovinsStemmer3.stemString("%UT5.Fww.YT{%`JY");
      assertEquals("%ut5.fww.yt{%`jy", string1);
      
      String string2 = lovinsStemmer0.stemString("7{a(D9M'1p ");
      assertEquals("7{a(d9m'1p ", string2);
      
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stemString("linguuad");
      lovinsStemmer2.stemString("id");
      lovinsStemmer3.stem("ation");
      String string4 = lovinsStemmer3.stemString("lovinsstemmeryt");
      assertEquals("lovinsstemmerys", string4);
      
      lovinsStemmer1.toString();
      String string5 = lovinsStemmer2.stem("7&<4");
      assertEquals("7&<4", string5);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0824022154048178
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("ax");
      assertEquals("ax", string3);
      
      lovinsStemmer2.toString();
      lovinsStemmer1.stem("The physical dimensions of a work.");
      lovinsStemmer1.toString();
      String string4 = lovinsStemmer1.stemString(",lZ:r ]>D");
      assertEquals(",lz:r ]>d", string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "the physical dimensions of a work.";
      stringArray0[1] = ";ft<2>K4`jSfu";
      stringArray0[2] = ",lZ:r ]>D";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("vasyt");
      lovinsStemmer2.stem("mit");
      lovinsStemmer1.stem("volume");
      String string5 = lovinsStemmer0.stemString("vas");
      assertEquals("va", string5);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0990424718219998
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stemString("O");
      lovinsStemmer0.stem("lovinsstemmervad");
      lovinsStemmer0.stemString("O");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer1.stemString("o");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "lovinsstemmervad";
      stringArray0[1] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      stringArray0[2] = "lr&8 wpb";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[5] = "O";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("h3#aV_SI,P&Nj?r");
      lovinsStemmer0.stemString("arlerid");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0871478465651596
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("editpanset");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("editpansend");
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("bibtex");
      lovinsStemmer1.stemString("editpansens");
      String string0 = lovinsStemmer1.stem(".R`zA!HE taBbuY");
      assertEquals(".r`za!he tabbu", string0);
      
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "editpansens";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ANNOTE");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stem("lingulid");
      assertEquals("lingulis", string3);
      
      String string4 = lovinsStemmer0.stem("INPROCEEDINGS");
      assertEquals("inproceed", string4);
      
      String string5 = lovinsStemmer1.stemString("inproceed");
      assertEquals("inproceed", string5);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2110996910509508
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("lovinsstemmerix");
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1680645488110146
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("3'CQ-!x@Fh3G");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("uad");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "uad";
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Any additional information that can help the readr. The first word should be capitalized.");
      assertEquals("any addit inform that can help th readr. th first word should be capital.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("ond");
      assertEquals("ons", string2);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0812656770377511
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Fatal error.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("$IXQ&r(e9<^i5*l/Tw");
      lovinsStemmer0.stemString("uad");
      lovinsStemmer0.stemString("\"");
      lovinsStemmer0.stemString(">h");
      lovinsStemmer0.stemString("ates");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string1);
      
      String string2 = lovinsStemmer0.stemString("}ia^?ZSG5~X");
      assertEquals("}ia^?zsg5~x", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.116000723278595
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "UE3J/?";
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stem("UE3J/?");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("The physical dimensions of a work.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString(";ft<2>K4`jSfu");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(" ALwKOt");
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer0.stemString("icide");
      lovinsStemmer0.stemString("");
      String string3 = lovinsStemmer0.stem("NgRFt0'");
      assertEquals("ngrft0'", string3);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0721679869623437
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      lovinsStemmer1.stemString("AMR|$CqBVsqK5w2{eYU");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer3.stemString("!s-5yvEj7U$/!@V");
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1621382526727755
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("&%XK");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("&%xk");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer1.stem("");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stem("vad");
      lovinsStemmer1.stemString("OGpp}:P");
      lovinsStemmer0.stemString("ond");
      lovinsStemmer1.stemString("bex");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.2311849522774823
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("&%XK");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("IM$(]5,Is\"<oh}8MuM");
      assertEquals("im$(]5,is\"<oh}8m", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0775691041907103
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("$IXQ&r(e9<^i5*l/Tw");
      lovinsStemmer0.stemString("pex");
      String string0 = lovinsStemmer1.stemString("^J_B$~T/Qz|Cs62EC");
      assertEquals("^j_b$~t/qz|cs62ec", string0);
      
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      lovinsStemmer1.stemString("lovinsstemmervasrud");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
      
      String string4 = lovinsStemmer2.stemString("YB");
      assertEquals("yb", string4);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.1644305817674898
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("ZCtUj<psm&p1lx14PI");
      lovinsStemmer0.stemString("CO~![cQ3XXwY1m>*\"U");
      lovinsStemmer0.stem("\"");
      lovinsStemmer0.stemString("CO~![cQ3XXwY1m>*\"U");
      lovinsStemmer0.stem("erid");
      lovinsStemmer0.stemString("+DCdiUT~K");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "\"";
      stringArray0[1] = "+dcdiut~k";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("lingulid");
      lovinsStemmer1.stem("ium");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmermit");
      lovinsStemmer1.stem("zctuj<psm&p1lx14p");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1144254703006906
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer1.stem("NFg +eyTH09uwHsD>t@");
      lovinsStemmer1.stemString("used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.stemString("vad");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vad";
      stringArray0[1] = "used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[4] = "vas";
      stringArray0[5] = "5yvej7uet";
      stringArray0[6] = "vas";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.098828741999466
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stemString("O");
      lovinsStemmer0.stem("lovinsstemmervad");
      lovinsStemmer0.stemString("O");
      lovinsStemmer0.stemString("lR&8 WpB");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.stemString("o");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.");
      assertEquals("th www univers resourc loc that point to th item being refer. th oft is us for techn report to point to th ftp sit whes th postscript sourc of th report is loc.", string1);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "lovinsstemmervad";
      stringArray0[1] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      stringArray0[2] = "lr&8 wpb";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "The WWW Universal Resource Locator that points to the item being referenced. This often is used for technical reports to point to the ftp site where the postscript source of the report is located.";
      stringArray0[5] = "O";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("< 6amR[JVrZ");
      String string2 = lovinsStemmer0.stemString("h3#aV_SI,P&Nj?r");
      assertEquals("h3#av_si,p&nj?r", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.2819432887754827
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("#B|g");
      lovinsStemmer0.stemString("#b|g");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("#b|g");
      lovinsStemmer0.stem("lovinsstemmerlux");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("#b|g");
      LovinsStemmer.main((String[]) null);
      String string2 = lovinsStemmer0.stem("#b|g");
      assertTrue(string2.equals((Object)string1));
      
      String string3 = lovinsStemmer0.stemString("pex");
      assertEquals("pic", string3);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.1278769273931821
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("1993");
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("v05y5ryz");
      String string1 = lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer1.stemString("0Ko.sVl)}s0");
      assertEquals("0k.svl)}s0", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0624888657857579
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("NFg +eyTH09uwHsD>t@");
      lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      lovinsStemmer0.stemString("K=y{90+6\"sCnv");
      String string2 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string2);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.";
      stringArray0[4] = "wek.cor.stemmer.lovinsstemmervad";
      stringArray0[5] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      stringArray1[1] = "NFg +eyTH09uwHsD>t@";
      stringArray1[2] = "proceed of th sixteenth intern confer on mach learn";
      stringArray1[4] = "NFg +eyTH09uwHsD>t@";
      stringArray1[5] = "K=y{90+6\"sCnv";
      LovinsStemmer.main(stringArray1);
      String string3 = lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmervad");
      assertEquals("wek.cor.stemmer.lovinsstemmervas", string3);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1599783935368395
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerex");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("pand");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pand";
      stringArray0[1] = "weka.core.stemmers.lovinsstemmerex";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.lovinsstemmerec";
      stringArray0[4] = "weka.core.stemmers.lovinsstemmerex";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("_)WUA)tqnokV&|l8");
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerex");
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("-ozO:)3WxdGP+h");
      assertEquals("-oz:)3wxdgp+h", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerec");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerec");
      lovinsStemmer0.stemString("");
      String string2 = lovinsStemmer0.stem("ert");
      assertEquals("ers", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9689972972005365
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("lovinsstemmerlux");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.066244499492408
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("ax");
      assertEquals("ax", string3);
      
      lovinsStemmer2.toString();
      lovinsStemmer1.stem("The physical dimensions of a work.");
      lovinsStemmer1.toString();
      String string4 = lovinsStemmer1.stemString(",lZ:r ]>D");
      assertEquals(",lz:r ]>d", string4);
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "the physical dimensions of a work.";
      stringArray0[1] = ";ft<2>K4`jSfu";
      stringArray0[2] = ",lZ:r ]>D";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString(" ALwKOt");
      lovinsStemmer2.stemString(" ALwKOt");
      String string5 = lovinsStemmer1.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.mit");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.mis", string5);
      
      String string6 = lovinsStemmer2.stemString("Get option -o: ");
      assertEquals("ges opt -o: ", string6);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.020061291396514
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "A{s\"QWJ*,zG:V}f0";
      stringArray0[1] = "-!PZ=o(,#y)";
      stringArray0[2] = "ross d)ll*ntex";
      stringArray0[3] = "LTfK4}qV.";
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("}%I");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      stringArray0[4] = "ross d)ll*nmit";
      stringArray0[5] = ",D<seVEwRTL4AvgA\"_";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("LTfK4}qV.");
      lovinsStemmer0.stem("ross d)ll*nex");
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0881599021256732
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      String string0 = lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.stemString("tex");
      lovinsStemmer0.stem("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer1.stemString("ti*};aC");
      lovinsStemmer1.stem("tex");
      lovinsStemmer2.stemString("ti*};aC");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("`kOr>}&OX/N(D/SDVW");
      assertEquals("`kor>}&ox/n(d/sdvw", string1);
      
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.stem("\t");
      lovinsStemmer2.stem("#q<`!j!o\"h|VgmT5");
      String string3 = lovinsStemmer1.stem("weka.core.stemmers.lovinsstemmerax");
      assertEquals("weka.core.stemmers.lovinsstemmerac", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2340003285642462
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("`twll~.c#nvqslid");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertNotSame(technicalInformation1, technicalInformation0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.1434019609515833
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("editpanset");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("editpansend");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("7Z&5e*BQ");
      lovinsStemmer1.stem("bibtex");
      String string0 = lovinsStemmer1.stemString("7z&5e*bq");
      assertEquals("7z&5e*bq", string0);
      
      lovinsStemmer1.stem(".R`zA!HE taBbuY");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "editpansens";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ANNOTE");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stem("lingulid");
      lovinsStemmer1.stemString(").");
      lovinsStemmer0.stemString(".r`za!he tabbu");
      lovinsStemmer0.stemString("sVANiBeiLw~o2^@");
      lovinsStemmer1.stemString(".R`zA!HE taBbuY");
      String string2 = lovinsStemmer1.stemString("%%Sro^S^OeT<6ueR&");
      assertEquals("%%sr^s^oes<6uer&", string2);
      
      String string3 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string3);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.18068582855082
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("vBQg");
      lovinsStemmer0.stemString("vbqg");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("vbqg");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("lovinsstemmerlux");
      lovinsStemmer0.stemString("M");
      lovinsStemmer0.stem("vbqg");
      String string0 = lovinsStemmer0.stemString(".R`zA!HE taBbuY");
      assertEquals(".r`za!he tabbu", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = ".r`za!he tabbu";
      stringArray0[2] = "atory";
      stringArray0[3] = "M";
      stringArray0[4] = "lovinsstemmerlux";
      stringArray0[5] = ".R`zA!HE taBbuY";
      stringArray0[6] = "vBQg";
      stringArray0[7] = "M";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("W8'");
      assertEquals("w8'", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("M");
      String string2 = lovinsStemmer0.stem("end");
      assertEquals("ens", string2);
      
      lovinsStemmer0.stem("vBQg");
      lovinsStemmer0.stemString("vbqg");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1537112501635998
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("lL|)8R\u0006Jh,");
      assertEquals("ll|)8r\u0006jh,", string0);
      
      lovinsStemmer1.stemString("GTY");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("loccid");
      assertEquals("loccis", string2);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("k=#CyWQd");
      String string3 = lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1831034999614076
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("h");
      lovinsStemmer0.stemString("z]}G[/c+J<Hrb['");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("S\"}kIy^,'I8aee}4$H");
      assertEquals("s\"}kiy^,'i8ae}4$h", string0);
      
      lovinsStemmer0.stem("s\"}kiy^,'i8ae}4$h");
      lovinsStemmer0.stemString("M=Wx.Cg~n3M+4}2^");
      lovinsStemmer0.stem("j2");
      String string1 = lovinsStemmer0.stemString("`twll~.c#nvqsbex");
      assertEquals("`twl~.c#nvqsbic", string1);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`twl~.c#nvqsbic";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("s\"}kiy^,'i8ae}4$h");
      assertEquals("s\"}kiy^,'i8}4$h", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("%2Mlu*&0=6jBk");
      String string4 = lovinsStemmer0.stem("z]}g[/c+j<hrb['");
      assertEquals("z]}g[/c+j<hrb['", string4);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0618534480504065
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString(" opt:ion.");
      assertEquals(" opt:ion.", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("lud");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.1541578309757012
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("x");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("!u>cvd!9");
      lovinsStemmer0.stem("a2'NQ,");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("rud");
      lovinsStemmer0.stemString("5{MC8A5T");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("!bsZ.f/HUo|Jhph");
      assertEquals("!bsz.f/hu|jhph", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem(".R`zA!HE taBbuY");
      String string2 = lovinsStemmer0.stem("lessness");
      assertEquals("les", string2);
      
      lovinsStemmer0.stem("_o");
      String string3 = lovinsStemmer0.stemString("S");
      assertEquals("s", string3);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1801535202258195
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("eyuet");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(" opt:ion.");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[4];
      stringArray0[2] = "N~L|2wD3HxllG";
      stringArray0[3] = "eyues";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("MLc=oAt'S*F");
      lovinsStemmer0.stemString("Can't add object to itself!");
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Development of a stemming algorithm");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      assertFalse(lovinsStemmer1.equals((Object)lovinsStemmer0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1278769273931821
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString(" opt:ion.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString(" opt:ion.");
      String[] stringArray0 = new String[4];
      stringArray0[0] = " opt:ion.";
      lovinsStemmer0.stemString("");
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("dex");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("4");
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("uAY*o1s^mW/Sbmh*");
      assertEquals("uay*o1^mw/sbmh*", string2);
      
      String string3 = lovinsStemmer0.stemString("dex");
      assertEquals("dic", string3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.094550221267563
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("izable");
      String string1 = lovinsStemmer1.stemString("mzFu3bd:caH6M}eLq1");
      assertEquals("mzfu3bd:cah6m}elq1", string1);
      
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "mzFu3bd:caH6M}eLq1";
      stringArray0[1] = "iz";
      stringArray0[2] = "AMR|$CqBVsqK5w2{eYU";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "mzFu3bd:caH6M}eLq1";
      stringArray0[6] = "mzFu3bd:caH6M}eLq1";
      stringArray0[7] = "AMR|$CqBVsqK5w2{eYU";
      stringArray0[8] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.toString();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.2230945902745431
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "UE3J/?";
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("<0'}0Z3Qwa&O");
      assertEquals("<0'}0z3qw&o", string0);
      
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stemString("Problem reading user properties: ");
      assertEquals("problem read user propers: ", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("CfSu*FB)vkC>_#");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1264880496542928
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Ross Quinlan");
      assertEquals("ros quinlan", string0);
      
      lovinsStemmer0.stemString("@9/");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("1993");
      lovinsStemmer0.stemString(" opt:ion.");
      lovinsStemmer0.stemString("@9/");
      lovinsStemmer0.stemString("dex");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "dic";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "Ross Quinlan";
      stringArray0[3] = "y1g4vad";
      stringArray0[4] = "1993";
      stringArray0[5] = ";3";
      stringArray0[6] = "dex";
      stringArray0[7] = "";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("Iqq$r<mLxCd\"");
      assertEquals("iqq$r<mlxcd\"", string3);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0796536535519872
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("An article Lrom a journalTor magazine.");
      assertEquals("an articl lrom a journalt magaz.", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("pand");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("idine");
      assertEquals("id", string1);
      
      lovinsStemmer3.stemString(")/b1");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "id";
      stringArray0[1] = "An article Lrom a journalTor magazine.";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "idine";
      stringArray0[4] = "ably";
      stringArray0[5] = ")/b1";
      stringArray0[6] = "an articl lrom a journalt magaz.";
      stringArray0[7] = "pans";
      stringArray0[8] = ")/b1";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer4.toString();
      lovinsStemmer4.toString();
      lovinsStemmer4.stemString(".GnND%U\u0000(81");
      lovinsStemmer1.stemString("\"");
      String string2 = lovinsStemmer3.stemString("$x:Kg-ZAmV'?=Qz");
      assertEquals("$x:kg-zamv'?=qz", string2);
      
      lovinsStemmer4.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer4.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      assertEquals("th year of public or, for an unpubl work, th year it wa writ. gener it should cons of four numer, such as 1984, although th standard styl can handl any year whos last four nonpunctu character ar numer, such as `hbox{(about 1984)}'.", string4);
      
      String string5 = lovinsStemmer3.stemString(")/b1");
      assertEquals(")/b1", string5);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1608677105055636
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("3'CQ-!x@Fh3G");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("`kOr>}&OX/N(D/SDVW");
      lovinsStemmer0.stem("");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "`kOr>}&OX/N(D/SDVW";
      lovinsStemmer0.stemString("");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("Any additional information that can help the reader. The first word should be capitalized.");
      assertEquals("any addit inform that can help th reader. th first word should be capital.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      String string2 = lovinsStemmer0.stem("icists");
      assertEquals("ic", string2);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string3 = lovinsStemmer0.stemString("ab7sS#MyaGF");
      assertEquals("ab7s#mygf", string3);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.188751447107405
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("W<*[zLR1b:K0$sc#%");
      lovinsStemmer0.stemString("Min index (doubles): ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Min index (doubles): ");
      lovinsStemmer0.stemString("min indic (doubl): ");
      lovinsStemmer0.stemString("w<*[zlr1b:k0$sc#%");
      lovinsStemmer0.stemString("{Q7N*^5}Z~AO");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1859003816155174
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stemString("ros quinlan");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("Max index (ints): ");
      lovinsStemmer0.stemString("yrjnBh^Ef!\"R$_JU");
      lovinsStemmer0.stemString("yrjnBh^Ef!\"R$_JU");
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(";)m_og xW6z<&");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1724106682073085
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "yish";
      stringArray1[1] = "C";
      stringArray1[2] = " ";
      stringArray1[3] = "efully";
      stringArray1[4] = "Y<f1XME)S&H3#omZ<5";
      stringArray1[5] = "Y<f1XME)S&H3#omZ<5";
      stringArray1[6] = "D6mi{:@D;'`\"#*'";
      stringArray1[7] = " ";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("A hyperlink to a resource.");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer1.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1570563043021076
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("An article Lrom a journalTor magazine.");
      lovinsStemmer0.toString();
      String string0 = "3'CQ-!x@Fh3G";
      lovinsStemmer0.stemString("xi7v0vzgvmd3dcmit");
      lovinsStemmer0.stem("*");
      lovinsStemmer0.stemString("yYB'*#LB+(Xpx3HR");
      lovinsStemmer0.stem("-T| ");
      lovinsStemmer0.stemString("a");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3'CQ-!x@Fh3G";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("-%~hs|");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
