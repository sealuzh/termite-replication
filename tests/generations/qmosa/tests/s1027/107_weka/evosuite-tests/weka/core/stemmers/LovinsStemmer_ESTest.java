/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:36:24 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7370911591791167
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("fieldax");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("umpt");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      TechnicalInformation technicalInformation1 = lovinsStemmer3.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.660895649869611
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "UE3J/?";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("~,w]`xk&rrd");
      assertEquals("~,w]`xk&rrd", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("The authors affiliation.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Get opt7on%-8o: ");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("the authors affiliation.");
      String string2 = lovinsStemmer0.stemString("Get opt7on%-8o: ");
      assertEquals("ges opt7on%-8o: ", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5929668127188497
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("$IXQ&r(e9<^i5*l/Tw");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String string2 = lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string2);
      
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("The Library of Congress Call Number. I've also seen this as lib-congress.");
      assertEquals("th libr of congres cal number. i'v als seen th as lib-congres.", string3);
      
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer0.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.", string4);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5995191947102962
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("8034");
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("5yvej7uet");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      String[] stringArray1 = new String[5];
      stringArray1[0] = "5yvej7ues";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[4] = "yt";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stem("B24`3~feRD*A\"NC1um");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer2.getRevision();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation0.hasAdditional());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5756413398351952
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("One or more -age numbers or range of numbers, such as 42--111 or 7,41,73--97 or 43+ (the `+' in this last example indicates pages following that don't form a simple range). To make it easier to maintain Scribe-Fompatible databases, the standard styles convert a single dash (as in 7-W3) to the double dash used in TeX to denote number ranges (as in 7--33).");
      lovinsStemmer0.stemString("xi7V0vZgVmd3DC");
      String string0 = lovinsStemmer0.stemString("idine");
      assertEquals("id", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("Development of a stemming algorithm");
      assertEquals("developm of a stem algorithm", string1);
      
      String string2 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer0.stemString("developm of a stem algorithm");
      lovinsStemmer3.stemString("xi7v0vzgvmd3dc");
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer3.stemString("%UT5.Fww.YT{%`JY");
      assertEquals("%ut5.fww.yt{%`jy", string3);
      
      lovinsStemmer0.stemString("mp'net");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("~");
      lovinsStemmer3.stem("xi7v0vzgvmd3dc");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string4 = lovinsStemmer5.stemString("wek.cor.stemmer.lovinsstemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6575597216673583
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("#B|g");
      assertEquals("#b|g", string0);
      
      String string1 = lovinsStemmer0.stemString("UNPUBLISHED");
      assertEquals("unpubl", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("#B|g");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer2.stemString("ax");
      assertEquals("ax", string3);
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "UNPUBLISHED";
      stringArray0[1] = "#b|g";
      stringArray0[2] = "ax";
      stringArray0[3] = "lovinsstemmerlux";
      LovinsStemmer.main(stringArray0);
      String string4 = lovinsStemmer1.stem("rpt");
      assertEquals("rb", string4);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.584253495450691
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stem("lR&8 WpB");
      lovinsStemmer0.stemString("?/Y+\"bfZeNue!Nq9n%(");
      lovinsStemmer0.stemString("bex");
      lovinsStemmer0.stem("O");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("olv");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("zBCc\"Tf");
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stem("o");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7593371976732477
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = "NK\\uLS";
      String string1 = lovinsStemmer0.stemString(string0);
      assertEquals("nk\\l", string1);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("'3Y*6F");
      assertEquals("'3y*6f", string2);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer2.getRevision();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8034";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "8034";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "WVtNYu:^0";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("nkl");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.70650611112466
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("_)WUA)tqnokV&|l8");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("4z5&HURy:5\"J8K");
      lovinsStemmer0.stem("t'qgher");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("w,WqGG)fY1I7");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("4z5&hury:5\"j8k");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("_)wua)tqnokv&|l8");
      String string1 = lovinsStemmer2.stemString("w,wqgg)fy1i7");
      assertEquals("w,wqg)fy1i7", string1);
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "xi7V0vZgVmd3DC";
      stringArray0[1] = "\r";
      stringArray0[2] = "t'qgher";
      stringArray0[3] = "4z5&hury:5\"j8k";
      stringArray0[4] = "w,wqg)fy1i7";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("t'qgher");
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer2.stemString("k7s%' ob@ZI- u");
      assertEquals("k7%' ob@zi- u", string2);
      
      String string3 = lovinsStemmer0.stemString("xi7V0vZgVmd3DC");
      assertEquals("xi7v0vzgvmd3dc", string3);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8217944758962088
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "UE3J/?";
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("UE3J/?");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      lovinsStemmer2.stemString("o,u2bb!XPz]");
      lovinsStemmer4.getRevision();
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.643218593439679
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("_)WUA)tqnokV&|l8");
      assertEquals("_)wu)tqnokv&|l8", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("One or more -age numbers or range of numbers, such as 42--111 or 7,41,73--97 or 43+ (the `+' in this last example indicates pages following that don't form a simple range). To make it easier to maintain Scribe-Fompatible databases, the standard styles convert a single dash (as in 7-W3) to the double dash used in TeX to denote number ranges (as in 7--33).");
      lovinsStemmer0.stemString("xi7V0vZgVmd3DC");
      lovinsStemmer0.stemString("_)wu)tqnokv&|l8");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("Development of a stemming algorithm");
      assertEquals("developm of a stem algorithm", string1);
      
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("developm of a stem algorithm");
      lovinsStemmer1.stemString("xi7v0vzgvmd3dc");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "_)wu)tqnokv&|l8";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer2.stemString("%UT5.Fww.YT{%`JY");
      assertEquals("%ut5.fww.yt{%`jy", string2);
      
      lovinsStemmer0.stemString("7{a(D9M'1p ");
      lovinsStemmer2.toString();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      lovinsStemmer0.stemString("linguuad");
      lovinsStemmer2.stemString("_)wu)tqnokv&|l8");
      String string4 = lovinsStemmer0.stem("ation");
      assertEquals("ation", string4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6753992882387894
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer0.stemString("3'CQ-!x@Fh3G");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("KEYWORDS");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("nu\"hSR9zJnJ1P&\"r`");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. this field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      lovinsStemmer2.globalInfo();
      stringArray0[1] = "keyword";
      stringArray0[2] = "-h";
      stringArray0[3] = "KEYWORDS";
      stringArray0[4] = "3'CQ-!x@Fh3G";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer3.stemString("KEYWORDS");
      assertEquals("keyword", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer3.stem("3'CQ-!x@Fh3G");
      assertTrue(string3.equals((Object)string0));
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stem("-h");
      String string4 = lovinsStemmer3.stem("icists");
      assertEquals("ic", string4);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.6582404856894757
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stemString("`kOr>}&OX/N(D/SDVW");
      lovinsStemmer0.stem("Get position of option -o: ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("istr");
      assertEquals("ister", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("B4}F\u0001Ldbds+J.+Q ");
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer1.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.stem("`kOr>}&OX/N(D/SDVW");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("weka.core.stemmers.lovinsstemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5990877061852817
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("anced");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("S{O,Ak<';");
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ese");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("\nusage: dex");
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stem("$hkv>?qJEX:i{-cP6.");
      lovinsStemmer2.stem(" .EDfV%");
      lovinsStemmer2.stemString("\nusage: lid");
      lovinsStemmer2.stemString("ement");
      lovinsStemmer0.stemString("anc");
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.561761063747912
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string1);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("NFg +eyTH09uwHsD>t@");
      String string2 = lovinsStemmer1.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      assertEquals("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.", string2);
      
      lovinsStemmer0.stemString("K=y{90+6\"sCnv");
      String string3 = lovinsStemmer1.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string3);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.";
      stringArray0[4] = "wek.cor.stemmer.lovinsstemmervad";
      stringArray0[5] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      stringArray1[1] = "NFg +eyTH09uwHsD>t@";
      stringArray1[2] = "proceed of th sixteenth intern confer on mach learn";
      stringArray1[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[4] = "NFg +eyTH09uwHsD>t@";
      stringArray1[5] = "K=y{90+6\"sCnv";
      stringArray1[6] = "weka.core.stemmers.lovinsstemmer";
      stringArray1[7] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.stem("wek.cor.stemmer.lovinsstemmervad");
      lovinsStemmer1.stemString("us for alphab, cro refer, and creat a label when th ``author'' inform is mi. th field should not be confus with th key that appear in th cit command and at th begin of th datab entr.");
      lovinsStemmer2.stem("K=y{90+6\"sCnv");
      String string4 = lovinsStemmer2.stem("weka.core.stemmers.lovinsstemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string4);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6069744566364408
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      assertEquals("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.", string0);
      
      lovinsStemmer1.stem("by");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("by");
      String string1 = lovinsStemmer1.stemString("dex");
      assertEquals("dic", string1);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "A,2\"{ZLflp";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      stringArray0[4] = "Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6396197067839482
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("0,8 ?j9@Y#H");
      lovinsStemmer0.stemString("0,8 ?j9@y#h");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stem("dex");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stem("lovinsstemmerlux");
      assertEquals("lovinsstemmerluc", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer0.stem("encies");
      assertEquals("enci", string3);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.6291971707391228
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("lid");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "lis";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("UTFlHD|V'NJcAr");
      assertEquals("utflhd|v'njcar", string1);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6047085075295495
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("invalid CVS revision - not enough parts separated by dots!");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "OHiHX>";
      stringArray0[2] = "=U'~Dc?'V+1\"";
      stringArray0[3] = "8034";
      stringArray0[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.stemString("og=");
      lovinsStemmer0.stemString("invalis cv revis - not enough part separ by dot!");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[6];
      stringArray1[0] = "Wma`]Q";
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("linguuad");
      String string2 = lovinsStemmer0.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string2);
      
      String string3 = lovinsStemmer0.stem("Ex7yd%G./k'7`4");
      assertEquals("ex7yd%g./k'7`4", string3);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6514132209691141
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("An article Lrom a journalTor magazine.");
      lovinsStemmer0.toString();
      String string0 = "3'CQ-!x@Fh3G";
      lovinsStemmer0.stemString("xi7v0vzgvmd3dcmht");
      lovinsStemmer0.stem("*");
      lovinsStemmer0.stemString("yYB'*#LB+(Xpx3HR");
      lovinsStemmer0.stem("-T| ");
      lovinsStemmer0.stemString("a");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3'CQ-!x@Fh3G";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("-%~hs|");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6587370264075683
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stemString("%u");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = ")";
      stringArray0[2] = "%u";
      stringArray0[3] = "ros quinlan";
      stringArray0[4] = "A document having an author and title, but not formally published.";
      stringArray0[5] = "Ross Quinlan";
      stringArray0[6] = "Ross Quinlan";
      stringArray0[7] = "%u";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("Ross Quinlan");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("icmcx=^rpucyt");
      assertEquals("icmcx=^rpucys", string0);
      
      lovinsStemmer3.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      String string1 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6044378988989587
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("n95hSz'T{|v5lMm");
      assertEquals("n95hsz't{|v5lm", string0);
      
      lovinsStemmer0.stemString("institution");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("_4Bh");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("_4bh");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stem("tex");
      assertEquals("tic", string2);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("get option%-o: yt");
      lovinsStemmer0.toString();
      String string3 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
      
      LovinsStemmer.main((String[]) null);
      String string4 = lovinsStemmer0.stem("institution");
      assertEquals("institut", string4);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7245490171979367
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("&%XK");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6124945896143437
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("editpanset");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("editpansend");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("7Z&5e*BQ");
      lovinsStemmer1.stem("bibtex");
      lovinsStemmer1.stemString("7z&5e*bq");
      lovinsStemmer1.stem(".R`zA!HE taBbuY");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "editpansens";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ANNOTE");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stem("lingulid");
      lovinsStemmer0.stem("INPROCEEDINGS");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5543657011260958
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("8034");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "`kOr>}&OX/N(D/SDVW";
      stringArray0[1] = "8034";
      lovinsStemmer0.getRevision();
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.stem("iev");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      TechnicalInformation technicalInformation0 = lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer5.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5822934776331208
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("editpanset");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("editpansend");
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("bibtex");
      lovinsStemmer1.stemString("editpansens");
      lovinsStemmer1.stem(".R`zA!HE taBbuY");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String[] stringArray0 = new String[1];
      stringArray0[0] = "editpansens";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ANNOTE");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer1.stem("lingulid");
      assertEquals("lingulis", string2);
      
      String string3 = lovinsStemmer0.stem("INPROCEEDINGS");
      assertEquals("inproceed", string3);
      
      String string4 = lovinsStemmer1.stemString("inproceed");
      assertEquals("inproceed", string4);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.6968139767652366
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("lovinsstemmerix");
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6277063258847395
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("editpanset");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("editpanset");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("editpansend");
      String string0 = lovinsStemmer0.stem("EY@ _\"HR[C&Z5BYi");
      assertEquals("ey@ _\"hr[c&z5by", string0);
      
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer0.stemString("editpanses");
      assertEquals("editpans", string1);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "ey@ _\"hr[c&z5by";
      stringArray0[1] = "editpanses";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("yearend");
      lovinsStemmer0.stemString("ond");
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stem("C7W@3?E@nD@41DDdUu");
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string4 = lovinsStemmer1.stemString("C7W@3?E@nD@41DDdUu");
      assertTrue(string4.equals((Object)string3));
      
      String string5 = lovinsStemmer1.stem("yearend");
      assertEquals("yearens", string5);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6153957547359707
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("otide");
      assertEquals("ot", string0);
      
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6005378223843552
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("$IXQ&r(e9<^i5*l/Tw");
      lovinsStemmer0.stemString("uad");
      lovinsStemmer0.stemString("\"");
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.6598126712774266
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("&%XK");
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("&%xk");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("lovinsstemmerlid");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer1.stem("");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stem("vad");
      lovinsStemmer1.stemString("OGpp}:P");
      lovinsStemmer0.stemString("&%xk");
      lovinsStemmer1.stemString("bex");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7257768231776023
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("&%XK");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("IM$(]5,Is\"<oh}8MuM");
      assertEquals("im$(]5,is\"<oh}8m", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6466868547635414
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.stemString("`!!<tOx}LfC");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ond");
      lovinsStemmer0.stem("Z");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("systemDialogs");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("`!!<tox}lfc");
      lovinsStemmer0.stemString("`!!<tOx}LfC");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem(" kLjl#1Vt.eLt)E[\"");
      String string2 = lovinsStemmer0.stem("ond");
      assertEquals("ons", string2);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6041618537664784
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "UE3J/?";
      String[] stringArray1 = null;
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("UE3J/?");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("8034erid");
      lovinsStemmer0.stemString("8034eris");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("YEAR");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5915243064701214
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stemString("u;");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("ros quinlan");
      lovinsStemmer0.stemString("her");
      lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      lovinsStemmer0.stemString("-\t| lud");
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.", string1);
      
      String string2 = lovinsStemmer0.stemString("KN=F(T?}M");
      assertEquals("kn=f(t?}m", string2);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6124275992913994
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Fatal error.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5044067531437282
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "O";
      stringArray0[1] = "lovinsstemmervad";
      stringArray0[2] = "lovinsstemmervad";
      stringArray0[3] = "lR&8 WpB";
      LovinsStemmer.main(stringArray0);
      stringArray0[4] = "lovinsstemmervad";
      stringArray0[5] = "xp6'6dex";
      stringArray0[6] = "]";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("vad");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.654050125749091
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Ross Quinlan");
      String string0 = lovinsStemmer0.stemString("%u");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("8`FfrQ");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("8`FfrQ");
      lovinsStemmer0.stemString("pex");
      lovinsStemmer0.stemString("rr");
      String string1 = lovinsStemmer0.stem("c7w@3?e@nd@41ddduuvad");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7712492697927247
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("`twll~.c#nvqslid");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "`twl~.c#nvqslis";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "r@v)k ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer1.getTechnicalInformation();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.6682459562589047
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Ross Quinlan");
      assertEquals("ros quinlan", string0);
      
      lovinsStemmer0.stemString("%u");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("ros quinlan");
      assertEquals("ro quinlan", string2);
      
      String string3 = lovinsStemmer0.stemString("pex");
      assertEquals("pic", string3);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6270103762666657
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("1993");
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.stemString("v05y5ryz");
      lovinsStemmer1.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer1.stemString("0Ko.sVl)}s0");
      assertEquals("0k.svl)}s0", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6436024662184172
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString(".@Tb");
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.stemString("qj7`f`ANnS<}yU;_y)");
      lovinsStemmer2.stemString(", H4&r$VdQi_");
      lovinsStemmer1.stemString("ntr");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer1.stemString("KEYWORDS");
      assertEquals("keyword", string0);
      
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("Can't find class called: ");
      assertEquals("can't find clas cal: ", string1);
      
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.6818353409651108
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stemString("Ross Quinlan");
      lovinsStemmer0.stemString("ros quinlan");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Max index (ints): ");
      String string0 = lovinsStemmer0.stemString("yrjnBh^Ef!\"R$_JU");
      lovinsStemmer0.stemString("yrjnBh^Ef!\"R$_JU");
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(";)m_og xW6z<&");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5714443979608965
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.");
      lovinsStemmer1.stemString("AMR|$CqBVsqK5w2{eYU");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("!s-5yvEj7U$/!@V");
      lovinsStemmer1.toString();
      TechnicalInformation technicalInformation1 = lovinsStemmer1.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6056607834153032
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("pnd");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pnd";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("weka.core.stemmers.lovinsstemmerex");
      String string0 = lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.675831459618781
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("vBQg");
      lovinsStemmer0.stemString("vbqg");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("vbqg");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("lovinsstemmerlux");
      lovinsStemmer0.stemString("M");
      lovinsStemmer0.stem("vbqg");
      String string0 = lovinsStemmer0.stemString(".R`zA!HE taBbuY");
      assertEquals(".r`za!he tabbu", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = ".r`za!he tabbu";
      stringArray0[2] = "atory";
      stringArray0[3] = "M";
      stringArray0[4] = "lovinsstemmerlux";
      stringArray0[5] = ".R`zA!HE taBbuY";
      stringArray0[6] = "vBQg";
      stringArray0[7] = "M";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("W8'");
      assertEquals("w8'", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("M");
      String string2 = lovinsStemmer0.stem("end");
      assertEquals("ens", string2);
      
      lovinsStemmer0.stem("vBQg");
      lovinsStemmer0.stemString("vbqg");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.647382136239549
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("lL|)8R\u0006Jh,");
      assertEquals("ll|)8r\u0006jh,", string0);
      
      lovinsStemmer1.stemString("GTY");
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.stemString("loccid");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.6457135472503426
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stemString("lR&8 WpB");
      lovinsStemmer0.stem("lR&8 WpB");
      lovinsStemmer0.stemString("?/Y+\"bfZeNue!Nq9n%(");
      lovinsStemmer0.stemString("bex");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "lR&8 WpB";
      stringArray0[1] = "lR&8 WpB";
      stringArray0[2] = "Mean: ";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("bic");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ically");
      lovinsStemmer0.stem("ically");
      lovinsStemmer0.stem("ANNOTE");
      String string0 = "note";
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.3384543866952396
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pand";
      stringArray0[1] = "weka.core.stemmers.lovinsstemmerex";
      stringArray0[4] = "weka.core.stemmers.lovinsstemmerex";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("lud");
      String string0 = lovinsStemmer0.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.6482722499112714
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("$IXQ&r(e9<^i5*l/Tw");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string2 = lovinsStemmer0.stemString("_)wua)txnokv&|l8rud");
      assertEquals("_)wu)txnokv&|l8rus", string2);
      
      lovinsStemmer0.stemString("$ixq&r(e9<^i5*l/tw");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("ix");
      assertEquals("ix", string3);
      
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("$ixq&r(e9<^i5*l/tw");
      String string4 = lovinsStemmer2.toString();
      assertFalse(string4.equals((Object)string0));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6028828428358683
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("The alternating decision tree learning algorithm");
      lovinsStemmer3.globalInfo();
      String[] stringArray0 = new String[6];
      String string0 = lovinsStemmer3.stemString("qX(P");
      assertEquals("qx(p", string0);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer3.toString();
      lovinsStemmer3.globalInfo();
      String string1 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.669896090271717
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Can't add obje]t to itself!");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ionend");
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "~xY=e5UlW5?SAj";
      stringArray0[1] = "URL";
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer2.stemString("sfO0~GqxneDal@3XbC");
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.646059265929681
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString(" opt:ion.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString(" opt:ion.");
      String[] stringArray0 = new String[4];
      stringArray0[0] = " opt:ion.";
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("4");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("u-'k]fN<E");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5928201174613346
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      assertEquals("usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.", string0);
      
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("izable");
      String string1 = lovinsStemmer1.stemString("mzFu3bd:caH6M}eLq1");
      assertEquals("mzfu3bd:cah6m}elq1", string1);
      
      lovinsStemmer1.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "mzFu3bd:caH6M}eLq1";
      stringArray0[1] = "iz";
      stringArray0[2] = "AMR|$CqBVsqK5w2{eYU";
      stringArray0[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[4] = "mzFu3bd:caH6M}eLq1";
      stringArray0[5] = "usu th addres of th publishes or other typ of institut. for major publish hous, van leun recommens omis th inform entir. for smal publishes, on th other hand, you can help th reader by giv th comples addres.";
      stringArray0[6] = "mzFu3bd:caH6M}eLq1";
      stringArray0[7] = "AMR|$CqBVsqK5w2{eYU";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.toString();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7169217507683703
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      String[] stringArray0 = new String[2];
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      String[] stringArray1 = new String[0];
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      String string0 = lovinsStemmer0.stemString("<0'}0Z3Qwa&O");
      assertEquals("<0'}0z3qw&o", string0);
      
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.stemString("Problem reading user properties: ");
      assertEquals("problem read user propers: ", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6598928848418093
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[1] = "UE3J/?";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("tex");
      assertEquals("tic", string0);
      
      String string1 = lovinsStemmer0.stemString("ZCtUj<psm&p1lx14PI");
      assertEquals("zctuj<psm&p1lx14p", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("bic");
      assertEquals("bic", string3);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("ally");
      lovinsStemmer0.stemString("__.$KK");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("HOWPUBLISHED");
      LovinsStemmer.main((String[]) null);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "tex";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("zctuj<psm&p1lx14p");
      lovinsStemmer3.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string4 = lovinsStemmer4.stemString("iK#h:!");
      assertEquals("ik#h:!", string4);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6747800931923498
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("An article Lrom aijournalcor magazinp.");
      lovinsStemmer0.toString();
      String string0 = "3'CQ-!x@Fh3G";
      lovinsStemmer0.stemString("xi7v0vzgvmd3dcmht");
      lovinsStemmer0.stem("*");
      lovinsStemmer0.stemString("yYB'*#LB+(Xpx3HR");
      lovinsStemmer0.stem("-T| ");
      lovinsStemmer0.stemString("a");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "3'CQ-!x@Fh3G";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("-%~hs|");
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.6720637796812101
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("pnd");
      assertEquals("pnd", string0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "pnd";
      stringArray0[1] = "weka.core.stemmers.lovinsstemmerex";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[5] = "weka.core.stemmers.LovinsStemmer";
      String string1 = lovinsStemmer0.stemString("ZLx0_7");
      assertEquals("zlx0_7", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("_)WUA)txnokV&|l8");
      assertEquals("_)wu)txnokv&|l8", string2);
      
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerex");
      lovinsStemmer0.stemString("");
      String string3 = lovinsStemmer0.stemString("weka.core.stemmers.lovinsstemmerher");
      assertEquals("wek.cor.stemmer.lovinsstemmerhes", string3);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmerec");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("05PL';&tGD [");
      lovinsStemmer0.stem("");
      String string4 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string4);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.6846192157024462
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("W<*[zLR1b:K0$sc#%");
      lovinsStemmer0.stemString("Min index (doubles): ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("Min index (doubles): ");
      lovinsStemmer0.stemString("min indic (doubl): ");
      lovinsStemmer0.stemString("w<*[zlr1b:k0$sc#%");
      lovinsStemmer0.stemString("{Q7N*^5}Z~AO");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2527611229705808
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("ax");
      assertEquals("ax", string0);
      
      String string1 = lovinsStemmer0.stem("pand");
      assertEquals("pans", string1);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5084869091080098
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stem("lovinsstemmerlux");
      assertEquals("lovinsstemmerluc", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5926426348426381
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString(":u/2\"'7b");
      assertEquals(":u/2\"'7b", string0);
      
      String string1 = lovinsStemmer0.stemString("a~;obk'bn8~her");
      assertEquals("a~;obk'bn8~hes", string1);
  }
}
