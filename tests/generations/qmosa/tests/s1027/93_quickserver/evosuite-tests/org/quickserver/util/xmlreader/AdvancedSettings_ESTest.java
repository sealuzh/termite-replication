/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:35:39 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.688656384655456
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("Ohpo-mF(Z5OC");
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setCharset("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getMaxThreadsForNioWrite();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("$U)ewZnW?U8");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // $U)ewZnW?U8
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(2719);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(2719, int0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(3965);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(3965, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("");
      String string0 = advancedSettings0.getCharset();
      assertEquals("ISO-8859-1", string0);
      
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTrafficClass();
      String string1 = advancedSettings0.getClientIdentifier();
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", string1);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(1336);
      advancedSettings0.getPerformancePreferencesBandwidth();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(1336, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketTrafficClass("h");
      advancedSettings0.getClientSocketTrafficClass();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.661167662344534
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setMaxThreadsForNioWrite((-3228));
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.toXML("</max-threads-for-nio-write>\n");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getSocketLinger();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.toXML("</max-threads-for-nio-write>\n");
      advancedSettings0.setCharset("");
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(0, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.7107401559847455
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketReceiveBufferSize(1047);
      advancedSettings0.setClientSocketReceiveBufferSize(1047);
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTrafficClass("7FQ^BF.w=\":r1<qNIJ");
      advancedSettings0.setSocketLinger((-1));
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setPerformancePreferencesLatency((-1));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setSocketLinger(2418);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setMaxThreadsForNioWrite((-3322));
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth(5);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.toXML("NWLJf,2*}?oCEHp");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getCharset();
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(8);
      advancedSettings0.setByteBufferSize(0);
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals(8, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(1);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(25355);
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setBacklog(0);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(25355, advancedSettings0.getClientSocketSendBufferSize());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setBacklog(1);
      advancedSettings0.setClientSocketReceiveBufferSize(65536);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.362385208963958
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(1918);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setPerformancePreferencesLatency(10);
      advancedSettings0.setPerformancePreferencesBandwidth(1918);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setSocketLinger(1918);
      advancedSettings0.setPerformancePreferencesLatency(1918);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2719));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getBacklog();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketReceiveBufferSize(1918);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-2958));
      advancedSettings0.setPerformancePreferencesLatency((-47));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setQSObjectPoolMaker("`y6;2]oPQHp#z'+k)8d");
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setBacklog((-47));
      assertEquals((-2958), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("rg.quickserver.net.server.impT.OptimisicClintdentifier");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // rg.quickserver.net.server.impT.OptimisicClintdentifier
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1724318111562746
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-177));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize((-177));
      advancedSettings0.setSocketLinger((-177));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setPerformancePreferencesLatency((-177));
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setMaxThreadsForNioWrite((-177));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(4262);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertEquals((-177), advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-493));
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals((-493), int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.2607697993230333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(898);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(4262);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(4262, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2410283190591764
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-177));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getCharset();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("ISO-8859-1");
      advancedSettings0.setClientSocketSendBufferSize(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.setPerformancePreferencesBandwidth(4262);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier("y-[;xI?5");
      advancedSettings0.getCharset();
      assertEquals("y-[;xI?5", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset((String) null);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime(2758);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(2758, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-48));
      int int0 = advancedSettings0.getPerformancePreferencesConnectionTime();
      assertEquals((-48), int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.326793811203479
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("} P2V0]");
      advancedSettings0.setPerformancePreferencesBandwidth((-488));
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-488), int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.6249053607370807
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings1.getByteBufferSize();
      advancedSettings1.getPerformancePreferencesConnectionTime();
      advancedSettings1.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings1.setClientSocketReceiveBufferSize((-168));
      advancedSettings1.setDebugNonBlockingMode(false);
      advancedSettings0.setByteBufferSize(2437);
      advancedSettings1.setClientSocketTcpNoDelay(false);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientIdentifier("");
      AdvancedSettings advancedSettings2 = new AdvancedSettings();
      advancedSettings1.toXML("Ohpo-mF(Z5OC");
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings2.setClientSocketTrafficClass("% qKSi C");
      advancedSettings2.setClientSocketSendBufferSize((-168));
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings2.toXML("");
      advancedSettings0.toXML("");
      assertEquals(2437, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.583169173157273
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.toXML("");
      advancedSettings0.toXML((String) null);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1));
      advancedSettings0.toXML("%f2eL");
      advancedSettings0.setClientSocketReceiveBufferSize((-661));
      advancedSettings0.setPerformancePreferencesBandwidth(0);
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setByteBufferSize(728);
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n");
      int int0 = advancedSettings0.getClientSocketSendBufferSize();
      assertEquals((-1), advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0238736061572697
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("HCBCGc #pn1+<");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("Ohpo-mF(Z5OC");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      assertEquals("Ohpo-mF(Z5OC", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setBacklog((-1781));
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }
}
