/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:20:58 GMT 2019
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.function.Predicate;
import java.util.stream.Stream;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.GDSType;
import org.firebirdsql.gds.impl.jni.EmbeddedGDSImpl;
import org.firebirdsql.gds.impl.jni.TransactionParameterBufferImpl;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnectionFactory;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.field.FBBlobField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8325212035167984
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      fBCachedFetcher0.setFetchSize((-2941));
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.relative((-2941));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = fBCachedFetcher0.isEmpty();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean4 = fBCachedFetcher0.isEmpty();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean4);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      
      boolean boolean5 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean5);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean3);
      
      boolean boolean6 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean6);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean6 == boolean2);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals((-2941), int0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals((-2941), fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.785701277407809
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Subject subject0 = new Subject(false, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertNotNull(subject0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Class<byte[][]> class0 = byte[][].class;
      Set<byte[][]> set0 = subject0.getPublicCredentials(class0);
      assertNotNull(set0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean2 = linkedList0.addAll((Collection<? extends byte[][]>) set0);
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Iterator<byte[][]> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = linkedList0.add((byte[][]) null);
      assertTrue(boolean4);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean5 = linkedList0.add((byte[][]) null);
      assertTrue(boolean5);
      assertEquals(3, linkedList0.size());
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate0);
      assertEquals(3, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean6 = linkedList0.add((byte[][]) null);
      assertTrue(boolean6);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      
      boolean boolean7 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean7);
      assertEquals(4, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean6);
      
      byte[][] byteArray0 = linkedList0.poll();
      assertNull(byteArray0);
      assertEquals(3, linkedList0.size());
      
      boolean boolean8 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean8);
      assertEquals(3, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean9 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean9);
      assertEquals(3, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean2);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean1);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean7);
      assertFalse(boolean9 == boolean6);
      assertFalse(boolean9 == boolean8);
      
      boolean boolean10 = linkedList0.add((byte[][]) null);
      assertTrue(boolean10);
      assertEquals(4, linkedList0.size());
      assertFalse(boolean10 == boolean9);
      assertFalse(boolean10 == boolean2);
      assertFalse(boolean10 == boolean1);
      assertFalse(boolean10 == boolean3);
      assertTrue(boolean10 == boolean5);
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean7);
      assertTrue(boolean10 == boolean4);
      assertTrue(boolean10 == boolean0);
      
      boolean boolean11 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean11);
      assertEquals(4, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean11 == boolean5);
      assertFalse(boolean11 == boolean8);
      assertFalse(boolean11 == boolean10);
      assertTrue(boolean11 == boolean9);
      assertTrue(boolean11 == boolean3);
      assertTrue(boolean11 == boolean7);
      assertFalse(boolean11 == boolean4);
      assertFalse(boolean11 == boolean6);
      assertTrue(boolean11 == boolean2);
      assertFalse(boolean11 == boolean0);
      assertTrue(boolean11 == boolean1);
      
      boolean boolean12 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean12);
      assertEquals(4, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean12 == boolean4);
      assertFalse(boolean12 == boolean0);
      assertTrue(boolean12 == boolean2);
      assertTrue(boolean12 == boolean1);
      assertTrue(boolean12 == boolean3);
      assertFalse(boolean12 == boolean5);
      assertFalse(boolean12 == boolean6);
      assertTrue(boolean12 == boolean7);
      assertTrue(boolean12 == boolean9);
      assertTrue(boolean12 == boolean11);
      assertFalse(boolean12 == boolean8);
      assertFalse(boolean12 == boolean10);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(4, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(4, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[1];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertEquals(4, fBBlobFieldArray1.length);
      assertEquals(1, fBBlobFieldArray0.length);
      assertNotNull(fBBlobFieldArray1);
      assertNotSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertNotSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertEquals(4, linkedList0.size());
      assertFalse(fBBlobFieldArray1.equals((Object)fBBlobFieldArray0));
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertEquals(4, linkedList0.size());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean13 = fBCachedFetcher0.absolute(1);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean13);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertEquals(4, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean13 == boolean7);
      assertTrue(boolean13 == boolean5);
      assertTrue(boolean13 == boolean10);
      assertTrue(boolean13 == boolean6);
      assertTrue(boolean13 == boolean4);
      assertFalse(boolean13 == boolean1);
      assertFalse(boolean13 == boolean3);
      assertFalse(boolean13 == boolean11);
      assertTrue(boolean13 == boolean8);
      assertFalse(boolean13 == boolean9);
      assertTrue(boolean13 == boolean0);
      assertFalse(boolean13 == boolean2);
      assertFalse(boolean13 == boolean12);
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.909686157639045
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add((byte[][]) null);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate0);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[][] byteArray0 = linkedList0.pop();
      assertNull(byteArray0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean3 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean3);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean4);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean5 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean5);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      
      boolean boolean6 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean6);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      
      boolean boolean7 = linkedList0.add((byte[][]) null);
      assertTrue(boolean7);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean0);
      
      boolean boolean8 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean8);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean7);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean4);
      
      boolean boolean9 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean9);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean0);
      assertFalse(boolean9 == boolean2);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean8);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean7);
      
      boolean boolean10 = fBCachedFetcher0.absolute((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean10);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean10 == boolean6);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean8);
      assertFalse(boolean10 == boolean2);
      assertFalse(boolean10 == boolean4);
      assertTrue(boolean10 == boolean0);
      assertTrue(boolean10 == boolean5);
      assertFalse(boolean10 == boolean7);
      assertTrue(boolean10 == boolean1);
      assertTrue(boolean10 == boolean9);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean11 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean11);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean11 == boolean2);
      assertFalse(boolean11 == boolean1);
      assertFalse(boolean11 == boolean9);
      assertTrue(boolean11 == boolean7);
      assertFalse(boolean11 == boolean6);
      assertFalse(boolean11 == boolean5);
      assertFalse(boolean11 == boolean10);
      assertTrue(boolean11 == boolean4);
      assertFalse(boolean11 == boolean3);
      assertFalse(boolean11 == boolean0);
      assertFalse(boolean11 == boolean8);
      
      boolean boolean12 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean12);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean12 == boolean5);
      assertTrue(boolean12 == boolean10);
      assertTrue(boolean12 == boolean9);
      assertTrue(boolean12 == boolean1);
      assertTrue(boolean12 == boolean6);
      assertTrue(boolean12 == boolean8);
      assertFalse(boolean12 == boolean7);
      assertFalse(boolean12 == boolean11);
      assertFalse(boolean12 == boolean2);
      assertFalse(boolean12 == boolean4);
      assertTrue(boolean12 == boolean0);
      assertTrue(boolean12 == boolean3);
      
      boolean boolean13 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean13);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean13 == boolean5);
      assertTrue(boolean13 == boolean7);
      assertFalse(boolean13 == boolean6);
      assertFalse(boolean13 == boolean0);
      assertFalse(boolean13 == boolean8);
      assertTrue(boolean13 == boolean11);
      assertFalse(boolean13 == boolean12);
      assertFalse(boolean13 == boolean9);
      assertFalse(boolean13 == boolean1);
      assertFalse(boolean13 == boolean10);
      assertTrue(boolean13 == boolean2);
      assertTrue(boolean13 == boolean4);
      assertFalse(boolean13 == boolean3);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      boolean boolean14 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean14);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(boolean14 == boolean6);
      assertFalse(boolean14 == boolean2);
      assertTrue(boolean14 == boolean0);
      assertTrue(boolean14 == boolean9);
      assertTrue(boolean14 == boolean12);
      assertFalse(boolean14 == boolean4);
      assertFalse(boolean14 == boolean13);
      assertTrue(boolean14 == boolean8);
      assertTrue(boolean14 == boolean5);
      assertTrue(boolean14 == boolean1);
      assertFalse(boolean14 == boolean7);
      assertTrue(boolean14 == boolean10);
      assertFalse(boolean14 == boolean11);
      assertTrue(boolean14 == boolean3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.7843122468128025
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add((byte[][]) null);
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      boolean boolean3 = linkedList0.add((byte[][]) null);
      assertTrue(boolean3);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate0);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean4 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean4);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      
      boolean boolean5 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean5);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean6 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean6);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(boolean6 == boolean1);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      
      boolean boolean7 = linkedList0.add((byte[][]) null);
      assertTrue(boolean7);
      assertEquals(3, linkedList0.size());
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      
      boolean boolean8 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean8);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean6);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean2);
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean3);
      
      boolean boolean9 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean9);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean9 == boolean2);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean8);
      assertTrue(boolean9 == boolean4);
      assertFalse(boolean9 == boolean3);
      assertFalse(boolean9 == boolean7);
      assertTrue(boolean9 == boolean6);
      assertFalse(boolean9 == boolean5);
      
      boolean boolean10 = linkedList0.add((byte[][]) null);
      assertTrue(boolean10);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean4);
      assertFalse(boolean10 == boolean1);
      assertFalse(boolean10 == boolean6);
      assertTrue(boolean10 == boolean8);
      assertFalse(boolean10 == boolean0);
      assertFalse(boolean10 == boolean9);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean5);
      assertTrue(boolean10 == boolean2);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean11 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean11);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(boolean11 == boolean0);
      assertFalse(boolean11 == boolean8);
      assertTrue(boolean11 == boolean4);
      assertFalse(boolean11 == boolean3);
      assertTrue(boolean11 == boolean9);
      assertFalse(boolean11 == boolean10);
      assertFalse(boolean11 == boolean2);
      assertTrue(boolean11 == boolean6);
      assertFalse(boolean11 == boolean7);
      assertFalse(boolean11 == boolean5);
      assertTrue(boolean11 == boolean1);
      
      boolean boolean12 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean12);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(boolean12 == boolean9);
      assertFalse(boolean12 == boolean7);
      assertFalse(boolean12 == boolean2);
      assertFalse(boolean12 == boolean10);
      assertFalse(boolean12 == boolean5);
      assertTrue(boolean12 == boolean1);
      assertTrue(boolean12 == boolean6);
      assertFalse(boolean12 == boolean3);
      assertFalse(boolean12 == boolean8);
      assertTrue(boolean12 == boolean4);
      assertTrue(boolean12 == boolean11);
      assertTrue(boolean12 == boolean0);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.5034603585235073
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      assertNotNull(linkedHashSet0);
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("6*=!L3rgl18CeEpp&O");
      assertNotNull(jMXPrincipal0);
      
      boolean boolean2 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertTrue(boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean3);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      Subject subject0 = new Subject(true, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(subject0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Class<byte[][]> class0 = byte[][].class;
      Set<byte[][]> set0 = subject0.getPublicCredentials(class0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(set0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      boolean boolean4 = linkedList0.addAll((Collection<? extends byte[][]>) set0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean4);
      assertEquals(1, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      
      Iterator<byte[][]> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean5 = linkedList0.add((byte[][]) null);
      assertTrue(boolean5);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean3);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean6 = linkedList0.add((byte[][]) null);
      assertTrue(boolean6);
      assertEquals(3, linkedList0.size());
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate0);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      
      boolean boolean7 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean7);
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean0);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean5);
      
      boolean boolean8 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean8);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean2);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean1);
      assertFalse(boolean8 == boolean5);
      
      byte[][] byteArray0 = linkedList0.poll();
      assertNull(byteArray0);
      assertEquals(2, linkedList0.size());
      
      boolean boolean9 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean9);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean0);
      assertTrue(boolean9 == boolean2);
      assertTrue(boolean9 == boolean5);
      assertTrue(boolean9 == boolean6);
      assertFalse(boolean9 == boolean7);
      assertFalse(boolean9 == boolean8);
      assertFalse(boolean9 == boolean3);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean10 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean10);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean4);
      assertFalse(boolean10 == boolean0);
      assertFalse(boolean10 == boolean2);
      assertFalse(boolean10 == boolean9);
      assertFalse(boolean10 == boolean6);
      assertFalse(boolean10 == boolean5);
      assertFalse(boolean10 == boolean1);
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean7);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher1);
      assertEquals(0, linkedList1.size());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isEmpty());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean11 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean11);
      assertNotSame(linkedList0, linkedList1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean11 == boolean7);
      assertFalse(boolean11 == boolean1);
      assertTrue(boolean11 == boolean8);
      assertTrue(boolean11 == boolean10);
      assertFalse(boolean11 == boolean0);
      assertFalse(boolean11 == boolean5);
      assertFalse(boolean11 == boolean9);
      assertFalse(boolean11 == boolean6);
      assertTrue(boolean11 == boolean3);
      assertTrue(boolean11 == boolean4);
      assertFalse(boolean11 == boolean2);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6023613143091793
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate1);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate2 = Predicate.isEqual((Object) fBCachedFetcher0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate2);
      assertNotSame(predicate2, predicate0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(predicate2.equals((Object)predicate0));
      
      boolean boolean2 = predicate0.test((byte[][]) null);
      assertFalse(boolean2);
      assertNotSame(predicate0, predicate2);
      assertEquals(1, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Predicate<byte[][]> predicate3 = predicate2.negate();
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate3);
      assertNotSame(predicate2, predicate0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate4 = predicate2.and(predicate3);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate4);
      assertNotSame(predicate2, predicate0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate5 = predicate4.and(predicate3);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate5);
      assertNotSame(predicate2, predicate0);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate6 = predicate0.negate();
      assertNotNull(predicate6);
      assertNotSame(predicate0, predicate2);
      assertNotSame(predicate6, predicate3);
      assertEquals(1, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      
      boolean boolean3 = predicate0.test((byte[][]) null);
      assertFalse(boolean3);
      assertNotSame(predicate0, predicate2);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate3));
      
      boolean boolean4 = linkedList0.removeIf(predicate4);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean4);
      assertNotSame(predicate2, predicate0);
      assertNotSame(predicate3, predicate6);
      assertNotSame(predicate4, predicate5);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate5));
      
      boolean boolean5 = linkedList0.add((byte[][]) null);
      assertTrue(boolean5);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      
      boolean boolean6 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean6);
      assertEquals(2, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean4);
      
      boolean boolean7 = fBCachedFetcher0.isEmpty();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean7);
      assertEquals(2, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean1);
      assertTrue(boolean7 == boolean2);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      boolean boolean8 = linkedList1.add((byte[][]) null);
      assertTrue(boolean8);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean8 == boolean4);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean7);
      
      boolean boolean9 = fBCachedFetcher0.relative((-1));
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean9);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean9 == boolean5);
      assertFalse(boolean9 == boolean2);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean7);
      assertFalse(boolean9 == boolean6);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean3);
      assertFalse(boolean9 == boolean0);
      
      boolean boolean10 = fBCachedFetcher0.isEmpty();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean10);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertFalse(boolean10 == boolean1);
      assertTrue(boolean10 == boolean4);
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean8);
      assertFalse(boolean10 == boolean9);
      assertTrue(boolean10 == boolean6);
      assertTrue(boolean10 == boolean2);
      assertFalse(boolean10 == boolean5);
      assertTrue(boolean10 == boolean3);
      assertTrue(boolean10 == boolean0);
      
      boolean boolean11 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean11);
      assertNotSame(linkedList0, linkedList1);
      assertEquals(2, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(linkedList0.equals((Object)linkedList1));
      assertTrue(boolean11 == boolean6);
      assertTrue(boolean11 == boolean4);
      assertFalse(boolean11 == boolean8);
      assertFalse(boolean11 == boolean9);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean0);
      assertTrue(boolean11 == boolean10);
      assertFalse(boolean11 == boolean1);
      assertTrue(boolean11 == boolean3);
      assertFalse(boolean11 == boolean5);
      assertTrue(boolean11 == boolean2);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6583627201946896
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("6*=!L3rgl18CeEpp&O");
      assertNotNull(jMXPrincipal0);
      
      Subject subject0 = new Subject(true, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertFalse(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(subject0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      boolean boolean2 = jMXPrincipal0.implies(subject0);
      assertFalse(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean2);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertTrue(boolean3);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      boolean boolean4 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean4);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      
      Subject subject1 = new Subject(true, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(subject1);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(subject1.equals((Object)subject0));
      
      Class<byte[][]> class0 = byte[][].class;
      boolean boolean5 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6*=!L3rgl18CeEpp&O");
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean1);
      assertFalse(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      Class<JMXPrincipal> class1 = JMXPrincipal.class;
      Set<JMXPrincipal> set0 = subject1.getPrivateCredentials(class1);
      assertTrue(set0.contains(jMXPrincipal0));
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(set0);
      assertNotSame(subject1, subject0);
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(subject1.equals((Object)subject0));
      
      Set<byte[][]> set1 = subject1.getPublicCredentials(class0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(set1);
      assertNotSame(subject1, subject0);
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(subject1.equals((Object)subject0));
      
      boolean boolean6 = linkedList0.addAll((Collection<? extends byte[][]>) set1);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean6);
      assertNotSame(subject1, subject0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean3);
      assertFalse(subject1.equals((Object)subject0));
      
      boolean boolean7 = fBCachedFetcher0.absolute(2515);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean7);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean3);
      
      Iterator<byte[][]> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean8 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean4);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean0);
      assertTrue(boolean8 == boolean6);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean9 = linkedList0.add((byte[][]) null);
      assertTrue(boolean9);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean9 == boolean5);
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean4);
      assertFalse(boolean9 == boolean2);
      assertTrue(boolean9 == boolean3);
      assertTrue(boolean9 == boolean0);
      assertFalse(boolean9 == boolean7);
      assertFalse(boolean9 == boolean8);
      assertFalse(boolean9 == boolean6);
      
      boolean boolean10 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean10);
      assertTrue(boolean10 == boolean2);
      assertTrue(boolean10 == boolean8);
      assertTrue(boolean10 == boolean7);
      assertFalse(boolean10 == boolean9);
      assertFalse(boolean10 == boolean0);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean1);
      assertTrue(boolean10 == boolean5);
      assertTrue(boolean10 == boolean4);
      assertFalse(boolean10 == boolean3);
      
      byte[][] byteArray0 = linkedList0.poll();
      assertNull(byteArray0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean11 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean11);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean11 == boolean2);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean8);
      assertFalse(boolean11 == boolean9);
      assertTrue(boolean11 == boolean6);
      assertFalse(boolean11 == boolean0);
      assertTrue(boolean11 == boolean5);
      assertFalse(boolean11 == boolean1);
      assertTrue(boolean11 == boolean10);
      assertFalse(boolean11 == boolean3);
      assertTrue(boolean11 == boolean4);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean12 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean12);
      assertTrue(boolean12 == boolean7);
      assertTrue(boolean12 == boolean8);
      assertFalse(boolean12 == boolean0);
      assertFalse(boolean12 == boolean3);
      assertFalse(boolean12 == boolean9);
      assertTrue(boolean12 == boolean2);
      assertTrue(boolean12 == boolean6);
      assertFalse(boolean12 == boolean1);
      assertTrue(boolean12 == boolean11);
      assertTrue(boolean12 == boolean10);
      assertTrue(boolean12 == boolean5);
      assertTrue(boolean12 == boolean4);
      
      boolean boolean13 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean13);
      assertFalse(boolean13 == boolean0);
      assertTrue(boolean13 == boolean8);
      assertTrue(boolean13 == boolean12);
      assertTrue(boolean13 == boolean7);
      assertTrue(boolean13 == boolean11);
      assertFalse(boolean13 == boolean1);
      assertTrue(boolean13 == boolean4);
      assertFalse(boolean13 == boolean3);
      assertTrue(boolean13 == boolean5);
      assertTrue(boolean13 == boolean6);
      assertFalse(boolean13 == boolean9);
      assertTrue(boolean13 == boolean10);
      assertTrue(boolean13 == boolean2);
      
      boolean boolean14 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean14);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean14 == boolean4);
      assertTrue(boolean14 == boolean12);
      assertTrue(boolean14 == boolean13);
      assertTrue(boolean14 == boolean8);
      assertTrue(boolean14 == boolean11);
      assertFalse(boolean14 == boolean9);
      assertTrue(boolean14 == boolean2);
      assertTrue(boolean14 == boolean6);
      assertFalse(boolean14 == boolean1);
      assertFalse(boolean14 == boolean3);
      assertTrue(boolean14 == boolean5);
      assertTrue(boolean14 == boolean7);
      assertFalse(boolean14 == boolean0);
      assertTrue(boolean14 == boolean10);
      
      boolean boolean15 = linkedList0.add((byte[][]) null);
      assertTrue(boolean15);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean15 == boolean7);
      assertTrue(boolean15 == boolean3);
      assertFalse(boolean15 == boolean8);
      assertFalse(boolean15 == boolean10);
      assertTrue(boolean15 == boolean1);
      assertTrue(boolean15 == boolean0);
      assertFalse(boolean15 == boolean2);
      assertFalse(boolean15 == boolean6);
      assertFalse(boolean15 == boolean14);
      assertFalse(boolean15 == boolean11);
      assertTrue(boolean15 == boolean9);
      assertFalse(boolean15 == boolean5);
      assertFalse(boolean15 == boolean12);
      assertFalse(boolean15 == boolean13);
      assertFalse(boolean15 == boolean4);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(3, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean16 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean16);
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean16 == boolean7);
      assertFalse(boolean16 == boolean8);
      assertFalse(boolean16 == boolean13);
      assertFalse(boolean16 == boolean12);
      assertTrue(boolean16 == boolean9);
      assertFalse(boolean16 == boolean11);
      assertFalse(boolean16 == boolean4);
      assertTrue(boolean16 == boolean3);
      assertFalse(boolean16 == boolean14);
      assertTrue(boolean16 == boolean15);
      assertTrue(boolean16 == boolean0);
      assertFalse(boolean16 == boolean6);
      assertFalse(boolean16 == boolean5);
      assertTrue(boolean16 == boolean1);
      assertFalse(boolean16 == boolean2);
      assertFalse(boolean16 == boolean10);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.196383935410301
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      Predicate<byte[][]> predicate1 = predicate0.or(predicate0);
      assertNotNull(predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate1.and(predicate0);
      assertNotNull(predicate2);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<Delayed> predicate3 = Predicate.isEqual((Object) predicate0);
      assertNotNull(predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate0);
      assertNotNull(predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate5 = predicate0.or(predicate2);
      assertNotNull(predicate5);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate5, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate0));
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      
      Integer integer0 = new Integer(74);
      assertNotNull(integer0);
      assertEquals(74, (int)integer0);
      
      Predicate<byte[][]> predicate6 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate6);
      assertNotSame(predicate6, predicate0);
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate7 = predicate2.negate();
      assertNotNull(predicate7);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate1, predicate5);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate8 = Predicate.isEqual((Object) predicate6);
      assertNotNull(predicate8);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate9 = predicate7.or(predicate6);
      assertNotNull(predicate9);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate9, predicate1);
      assertNotSame(predicate9, predicate5);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate7));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<Object> predicate10 = predicate4.negate();
      assertNotNull(predicate10);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      
      Predicate<Object> predicate11 = predicate4.and(predicate10);
      assertNotNull(predicate11);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate10));
      
      Predicate<byte[][]> predicate12 = predicate7.and(predicate11);
      assertNotNull(predicate12);
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate12);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate6));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate13 = predicate8.negate();
      assertNotNull(predicate13);
      assertNotSame(predicate13, predicate7);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate14 = predicate13.negate();
      assertNotNull(predicate14);
      assertNotSame(predicate13, predicate7);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate0));
      
      boolean boolean0 = predicate14.test((byte[][]) null);
      assertFalse(boolean0);
      assertNotSame(predicate13, predicate7);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate15 = predicate12.and(predicate6);
      assertNotNull(predicate15);
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate15);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate15, predicate2);
      assertNotSame(predicate15, predicate12);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate7, predicate13);
      assertNotSame(predicate7, predicate14);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate6));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate13));
      assertFalse(predicate12.equals((Object)predicate14));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate7));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate14));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate6));
      
      byte[][] byteArray0 = new byte[0][1];
      boolean boolean1 = predicate14.test(byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean1);
      assertNotSame(predicate13, predicate7);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate12));
      assertTrue(boolean1 == boolean0);
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate16 = predicate14.or(predicate1);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate16);
      assertNotSame(predicate13, predicate7);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate1, predicate16);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate16, predicate1);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate15));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate17 = predicate2.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate17);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate16);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate13);
      assertNotSame(predicate17, predicate14);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate17.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate8));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate5));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate1));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate0));
      assertFalse(predicate17.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate18 = predicate16.and(predicate11);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate18);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate16);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertNotSame(predicate13, predicate7);
      assertNotSame(predicate13, predicate17);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate16, predicate1);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate18, predicate2);
      assertNotSame(predicate18, predicate15);
      assertNotSame(predicate18, predicate12);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate17));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate16));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate15));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate18.equals((Object)predicate2));
      assertFalse(predicate18.equals((Object)predicate15));
      assertFalse(predicate18.equals((Object)predicate13));
      assertFalse(predicate18.equals((Object)predicate14));
      assertFalse(predicate18.equals((Object)predicate8));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate1));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate0));
      assertFalse(predicate18.equals((Object)predicate7));
      assertFalse(predicate18.equals((Object)predicate12));
      
      Predicate<byte[][]> predicate19 = predicate2.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate19);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate1, predicate16);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate19, predicate7);
      assertNotSame(predicate19, predicate17);
      assertNotSame(predicate19, predicate13);
      assertNotSame(predicate19, predicate14);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate8));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate14));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate7));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate18));
      
      Predicate<byte[][]> predicate20 = predicate0.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate20);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate14);
      assertNotSame(predicate20, predicate7);
      assertNotSame(predicate20, predicate19);
      assertNotSame(predicate20, predicate13);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate7));
      assertFalse(predicate20.equals((Object)predicate12));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate13));
      assertFalse(predicate20.equals((Object)predicate0));
      assertFalse(predicate20.equals((Object)predicate2));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate1));
      
      boolean boolean2 = predicate16.test((byte[][]) null);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertNotSame(predicate13, predicate19);
      assertNotSame(predicate13, predicate7);
      assertNotSame(predicate13, predicate17);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate13, predicate20);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertNotSame(predicate14, predicate17);
      assertNotSame(predicate14, predicate7);
      assertNotSame(predicate14, predicate20);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate14, predicate19);
      assertNotSame(predicate1, predicate16);
      assertNotSame(predicate1, predicate5);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate16, predicate9);
      assertNotSame(predicate16, predicate1);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate6, predicate8);
      assertNotSame(predicate6, predicate0);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate8, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate19));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate7));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate15));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate7));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate8));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate18));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate19));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate17));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate20));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate16));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate1));
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = linkedList0.removeIf(predicate0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertNotSame(predicate0, predicate6);
      assertNotSame(predicate0, predicate8);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate19));
      
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5333813402021033
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<byte[][]> predicate1 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate1);
      assertNotSame(predicate1, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate0.and(predicate1);
      assertNotNull(predicate2);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate3 = predicate0.or(predicate2);
      assertNotNull(predicate3);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      Predicate<Object> predicate4 = Predicate.isEqual(object0);
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate5);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate5.equals((Object)predicate4));
      
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      assertNotNull(predicate6);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      
      Predicate<Object> predicate7 = predicate6.negate();
      assertNotNull(predicate7);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate4));
      
      Predicate<Object> predicate8 = predicate5.or(predicate4);
      assertNotNull(predicate8);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate8, predicate6);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate5));
      
      Predicate<byte[][]> predicate9 = predicate1.and(predicate2);
      assertNotNull(predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate9, predicate2);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate10 = predicate0.and(predicate5);
      assertNotNull(predicate10);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate11 = predicate3.negate();
      assertNotNull(predicate11);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate12 = predicate9.or(predicate8);
      assertNotNull(predicate12);
      assertNotSame(predicate12, predicate3);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate10);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate9));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate11));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate10));
      
      boolean boolean1 = predicate10.test((byte[][]) null);
      assertFalse(boolean1);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate12));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate3));
      assertTrue(boolean1 == boolean0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate13 = predicate10.and(predicate5);
      assertNotNull(predicate13);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate10, predicate13);
      assertNotSame(predicate13, predicate10);
      assertNotSame(predicate13, predicate2);
      assertNotSame(predicate13, predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate12));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      
      boolean boolean2 = predicate2.test((byte[][]) null);
      assertFalse(boolean2);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate13);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate9);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate0));
      
      boolean boolean3 = linkedList0.removeIf(predicate11);
      assertFalse(boolean3);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate13);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate3, predicate12);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate13));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate12));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate11));
      
      boolean boolean4 = linkedList0.add((byte[][]) null);
      assertTrue(boolean4);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean2);
      
      boolean boolean5 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean5);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean4);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean6 = fBCachedFetcher1.isBeforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean6);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean5);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      assertEquals(400, int0);
      
      int int1 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, int1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(int1 == int0);
      
      int int2 = fBCachedFetcher1.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, int2);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean7 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean7);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertTrue(boolean7 == boolean5);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[2][3];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)64;
      byteArray1[1] = (byte) (-1);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte) (-1);
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(2, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      byte[][] byteArrayArray0 = null;
      linkedList0.addFirst((byte[][]) null);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(2, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = linkedList0.add((byte[][]) null);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean2);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(4, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = linkedList0.pollFirst();
      assertNull(byteArray0);
      assertEquals(0, linkedList0.size());
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[7];
      assertFalse(fBBlobFieldArray1.equals((Object)fBBlobFieldArray0));
      
      boolean boolean0 = linkedList0.removeLastOccurrence(fBBlobFieldArray0[3]);
      assertEquals(8, fBBlobFieldArray0.length);
      assertFalse(boolean0);
      assertNotSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBBlobFieldArray0.equals((Object)fBBlobFieldArray1));
      
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray1[1] = fBBlobField0;
      fBBlobFieldArray1[2] = fBBlobField0;
      fBBlobFieldArray1[3] = fBBlobField0;
      fBBlobFieldArray1[4] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[2];
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray1));
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray0));
      
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      boolean boolean2 = linkedList1.add((byte[][]) null);
      assertTrue(boolean2);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Stream<byte[][]> stream0 = linkedList1.stream();
      assertNotNull(stream0);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(1, linkedList1.size());
      assertTrue(linkedList1.equals((Object)linkedList0));
      
      boolean boolean3 = linkedList1.add((byte[][]) null);
      assertTrue(boolean3);
      assertNotSame(linkedList1, linkedList0);
      assertEquals(2, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(2, linkedList1.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = linkedList0.pollFirst();
      assertNull(byteArray0);
      assertEquals(0, linkedList0.size());
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[6] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertEquals(8, fBBlobFieldArray0.length);
      assertEquals(8, fBBlobFieldArray1.length);
      assertNotNull(fBBlobFieldArray1);
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.setFetchSize(2353);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(2353, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(2353, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-113);
      byteArray1[1] = (byte)100;
      byteArray1[2] = (byte)73;
      byteArray1[3] = (byte)21;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(2353, int0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(2353, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean2 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[1][5];
      Stream<byte[][]> stream0 = linkedList0.parallelStream();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(stream0);
      assertEquals(0, linkedList0.size());
      
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte) (-123);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)83;
      byteArray0[0] = byteArray1;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      byte[][] byteArray2 = linkedList0.pollFirst();
      assertEquals(1, byteArray2.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(byteArray2);
      assertSame(byteArray2, byteArray0);
      assertEquals(0, linkedList0.size());
      
      LinkedBlockingDeque<Delayed> linkedBlockingDeque0 = new LinkedBlockingDeque<Delayed>();
      assertNotNull(linkedBlockingDeque0);
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.361061809768637
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      Predicate<byte[][]> predicate1 = predicate0.or(predicate0);
      assertNotNull(predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate1.and(predicate0);
      assertNotNull(predicate2);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<Delayed> predicate3 = Predicate.isEqual((Object) predicate0);
      assertNotNull(predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      Integer integer0 = new Integer(74);
      assertNotNull(integer0);
      assertEquals(74, (int)integer0);
      
      Predicate<byte[][]> predicate4 = Predicate.isEqual((Object) integer0);
      assertNotNull(predicate4);
      assertNotSame(predicate4, predicate0);
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate5 = predicate2.negate();
      assertNotNull(predicate5);
      assertNotSame(predicate0, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate6 = predicate5.or(predicate2);
      assertNotNull(predicate6);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate6, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      
      Predicate<byte[][]> predicate7 = Predicate.isEqual((Object) predicate4);
      assertNotNull(predicate7);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate0);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate7, predicate0);
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate8 = predicate5.or(predicate4);
      assertNotNull(predicate8);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate8);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate0);
      assertNotSame(predicate8, predicate1);
      assertNotSame(predicate8, predicate6);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate9 = predicate7.negate();
      assertNotNull(predicate9);
      assertNotSame(predicate9, predicate5);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate0);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate7, predicate0);
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate2));
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      byte[][] byteArray0 = new byte[0][1];
      boolean boolean1 = predicate8.test(byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertTrue(boolean1);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate8);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate0);
      assertNotSame(predicate5, predicate9);
      assertNotSame(predicate8, predicate1);
      assertNotSame(predicate8, predicate6);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate9));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate10 = predicate4.or(predicate1);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate10);
      assertNotSame(predicate10, predicate1);
      assertNotSame(predicate10, predicate6);
      assertNotSame(predicate10, predicate8);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate8);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate7));
      assertFalse(predicate10.equals((Object)predicate8));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate11 = predicate5.or(predicate9);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate11);
      assertNotSame(predicate9, predicate5);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertNotSame(predicate11, predicate1);
      assertNotSame(predicate11, predicate10);
      assertNotSame(predicate11, predicate6);
      assertNotSame(predicate11, predicate8);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate8);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate0);
      assertNotSame(predicate5, predicate9);
      assertNotSame(predicate7, predicate4);
      assertNotSame(predicate7, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate9.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate10));
      assertFalse(predicate9.equals((Object)predicate8));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate5));
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate1));
      assertFalse(predicate7.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate0));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate12 = predicate2.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate12);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate8);
      assertNotSame(predicate12, predicate5);
      assertNotSame(predicate12, predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate6));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate7));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate13 = predicate0.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate13);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertNotSame(predicate13, predicate5);
      assertNotSame(predicate13, predicate9);
      assertNotSame(predicate13, predicate12);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate4));
      
      boolean boolean2 = predicate10.test((byte[][]) null);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertNotSame(predicate10, predicate1);
      assertNotSame(predicate10, predicate6);
      assertNotSame(predicate10, predicate8);
      assertNotSame(predicate10, predicate11);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate8);
      assertNotSame(predicate4, predicate7);
      assertNotSame(predicate4, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate13));
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate7));
      assertFalse(predicate10.equals((Object)predicate12));
      assertFalse(predicate10.equals((Object)predicate8));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate7));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate0));
      
      boolean boolean3 = linkedList0.removeIf(predicate0);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean3);
      assertNotSame(predicate0, predicate4);
      assertNotSame(predicate0, predicate7);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate7));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate11));
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(1, int0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      boolean boolean4 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean4);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.650911854089007
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("6*=!L3rgl18CeEpp&O");
      assertNotNull(jMXPrincipal0);
      
      boolean boolean2 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertTrue(boolean2);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean3);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      Subject subject0 = new Subject(true, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(subject0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Class<byte[][]> class0 = byte[][].class;
      Class<JMXPrincipal> class1 = JMXPrincipal.class;
      boolean boolean4 = subject0.isReadOnly();
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertTrue(boolean4);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      
      Set<JMXPrincipal> set0 = subject0.getPrivateCredentials(class1);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertTrue(set0.contains(jMXPrincipal0));
      assertNotNull(set0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(set0.isEmpty());
      assertEquals(1, set0.size());
      
      Set<byte[][]> set1 = subject0.getPublicCredentials(class0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(set1);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      boolean boolean5 = linkedList0.addAll((Collection<? extends byte[][]>) set1);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean5);
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertEquals(1, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(boolean5 == boolean2);
      assertFalse(boolean5 == boolean4);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5 == boolean1);
      
      Iterator<byte[][]> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean6);
      assertFalse(boolean6 == boolean0);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean4);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      boolean boolean7 = linkedList0.add((byte[][]) null);
      assertTrue(boolean7);
      assertEquals(2, linkedList0.size());
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean6);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean3);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate0);
      assertEquals(2, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      
      boolean boolean8 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean3);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean0);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean1);
      
      boolean boolean9 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean9);
      assertFalse(boolean9 == boolean4);
      assertTrue(boolean9 == boolean5);
      assertFalse(boolean9 == boolean2);
      assertTrue(boolean9 == boolean6);
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean1);
      assertTrue(boolean9 == boolean8);
      assertFalse(boolean9 == boolean7);
      assertFalse(boolean9 == boolean0);
      
      byte[][] byteArray0 = linkedList0.poll();
      assertNull(byteArray0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean10 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean10);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean10 == boolean0);
      assertTrue(boolean10 == boolean7);
      assertTrue(boolean10 == boolean2);
      assertFalse(boolean10 == boolean8);
      assertTrue(boolean10 == boolean4);
      assertFalse(boolean10 == boolean3);
      assertFalse(boolean10 == boolean6);
      assertFalse(boolean10 == boolean9);
      assertFalse(boolean10 == boolean5);
      assertTrue(boolean10 == boolean1);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean11 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean11);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(boolean11 == boolean3);
      assertTrue(boolean11 == boolean7);
      assertTrue(boolean11 == boolean4);
      assertTrue(boolean11 == boolean1);
      assertTrue(boolean11 == boolean2);
      assertFalse(boolean11 == boolean8);
      assertTrue(boolean11 == boolean10);
      assertFalse(boolean11 == boolean5);
      assertFalse(boolean11 == boolean6);
      assertFalse(boolean11 == boolean9);
      assertTrue(boolean11 == boolean0);
      
      boolean boolean12 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean12);
      assertTrue(boolean12 == boolean9);
      assertFalse(boolean12 == boolean11);
      assertTrue(boolean12 == boolean8);
      assertFalse(boolean12 == boolean4);
      assertFalse(boolean12 == boolean7);
      assertTrue(boolean12 == boolean5);
      assertFalse(boolean12 == boolean2);
      assertTrue(boolean12 == boolean6);
      assertFalse(boolean12 == boolean1);
      assertTrue(boolean12 == boolean3);
      assertFalse(boolean12 == boolean10);
      assertFalse(boolean12 == boolean0);
      
      boolean boolean13 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean13);
      assertEquals(1, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertTrue(boolean13 == boolean12);
      assertTrue(boolean13 == boolean9);
      assertFalse(boolean13 == boolean11);
      assertFalse(boolean13 == boolean7);
      assertFalse(boolean13 == boolean0);
      assertTrue(boolean13 == boolean5);
      assertFalse(boolean13 == boolean2);
      assertTrue(boolean13 == boolean8);
      assertFalse(boolean13 == boolean10);
      assertFalse(boolean13 == boolean4);
      assertTrue(boolean13 == boolean6);
      assertFalse(boolean13 == boolean1);
      assertTrue(boolean13 == boolean3);
      
      boolean boolean14 = linkedList0.add((byte[][]) null);
      assertTrue(boolean14);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean14 == boolean12);
      assertFalse(boolean14 == boolean5);
      assertTrue(boolean14 == boolean2);
      assertFalse(boolean14 == boolean3);
      assertTrue(boolean14 == boolean11);
      assertFalse(boolean14 == boolean8);
      assertTrue(boolean14 == boolean0);
      assertFalse(boolean14 == boolean6);
      assertFalse(boolean14 == boolean13);
      assertTrue(boolean14 == boolean10);
      assertTrue(boolean14 == boolean4);
      assertFalse(boolean14 == boolean9);
      assertTrue(boolean14 == boolean1);
      assertTrue(boolean14 == boolean7);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      
      Stream<byte[][]> stream0 = linkedList0.parallelStream();
      assertNotNull(stream0);
      assertEquals(2, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertEquals(2, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean15 = fBCachedFetcher1.last();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean15);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertEquals(2, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBCachedFetcher1.getRowNum());
      assertTrue(fBCachedFetcher1.isLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(boolean15 == boolean3);
      assertTrue(boolean15 == boolean0);
      assertFalse(boolean15 == boolean8);
      assertTrue(boolean15 == boolean11);
      assertFalse(boolean15 == boolean6);
      assertTrue(boolean15 == boolean10);
      assertFalse(boolean15 == boolean13);
      assertFalse(boolean15 == boolean9);
      assertTrue(boolean15 == boolean1);
      assertTrue(boolean15 == boolean7);
      assertFalse(boolean15 == boolean12);
      assertTrue(boolean15 == boolean4);
      assertFalse(boolean15 == boolean5);
      assertTrue(boolean15 == boolean2);
      assertTrue(boolean15 == boolean14);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      byte[][] byteArray0 = new byte[5][2];
      byte[] byteArray1 = new byte[5];
      byteArray1[0] = (byte)45;
      byteArray1[1] = (byte) (-74);
      byteArray1[2] = (byte) (-98);
      byteArray1[3] = (byte)71;
      byteArray1[4] = (byte)100;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      assertFalse(byteArray2.equals((Object)byteArray1));
      
      byteArray2[0] = (byte)114;
      byteArray2[1] = (byte)55;
      byteArray2[2] = (byte)45;
      byteArray2[3] = (byte)45;
      byteArray2[4] = (byte) (-74);
      byteArray2[5] = (byte) (-98);
      byteArray2[6] = (byte)1;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      assertFalse(byteArray3.equals((Object)byteArray2));
      assertFalse(byteArray3.equals((Object)byteArray1));
      
      byteArray3[0] = (byte)100;
      byteArray3[1] = (byte)100;
      byteArray3[2] = (byte)114;
      byteArray3[3] = (byte)45;
      byteArray3[4] = (byte)55;
      byteArray3[5] = (byte) (-74);
      byteArray3[6] = (byte)71;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[2];
      assertFalse(byteArray4.equals((Object)byteArray1));
      assertFalse(byteArray4.equals((Object)byteArray2));
      assertFalse(byteArray4.equals((Object)byteArray3));
      
      byteArray4[0] = (byte)100;
      byteArray4[1] = (byte) (-98);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[9];
      assertFalse(byteArray5.equals((Object)byteArray2));
      assertFalse(byteArray5.equals((Object)byteArray1));
      assertFalse(byteArray5.equals((Object)byteArray4));
      assertFalse(byteArray5.equals((Object)byteArray3));
      
      byteArray5[0] = (byte) (-74);
      byteArray5[1] = (byte)1;
      byteArray5[2] = (byte) (-74);
      byteArray5[3] = (byte) (-74);
      byteArray5[4] = (byte)114;
      byteArray5[5] = (byte)55;
      byteArray5[6] = (byte)100;
      byteArray5[7] = (byte) (-98);
      byteArray5[8] = (byte)100;
      byteArray0[4] = byteArray5;
      linkedList0.push(byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertEquals(1, linkedList0.size());
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBResultSet0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = fBCachedFetcher0.first();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9660775859666666
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean1 = fBCachedFetcher1.absolute((-4165));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertNotSame(fBCachedFetcher1, fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = fBCachedFetcher0.first();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean2);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      GDSType gDSType0 = GDSType.getType(",{Vn`{");
      assertNull(gDSType0);
      
      FBManagedConnectionFactory fBManagedConnectionFactory0 = null;
      try {
        fBManagedConnectionFactory0 = new FBManagedConnectionFactory((GDSType) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jca.FBManagedConnectionFactory", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.87581752666317
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = linkedList0.pollFirst();
      assertNull(byteArray0);
      assertEquals(0, linkedList0.size());
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[7];
      assertFalse(fBBlobFieldArray1.equals((Object)fBBlobFieldArray0));
      
      boolean boolean1 = linkedList0.removeLastOccurrence(fBBlobField0);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray1[2] = fBBlobField0;
      fBBlobFieldArray1[3] = fBBlobField0;
      fBBlobFieldArray1[1] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[2];
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray1));
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray0));
      
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray3 = linkedList0.toArray(fBBlobFieldArray2);
      assertEquals(2, fBBlobFieldArray3.length);
      assertEquals(2, fBBlobFieldArray2.length);
      assertNotNull(fBBlobFieldArray3);
      assertNotSame(fBBlobFieldArray3, fBBlobFieldArray1);
      assertSame(fBBlobFieldArray3, fBBlobFieldArray2);
      assertNotSame(fBBlobFieldArray3, fBBlobFieldArray0);
      assertNotSame(fBBlobFieldArray2, fBBlobFieldArray1);
      assertNotSame(fBBlobFieldArray2, fBBlobFieldArray0);
      assertSame(fBBlobFieldArray2, fBBlobFieldArray3);
      assertEquals(1, linkedList0.size());
      assertFalse(fBBlobFieldArray3.equals((Object)fBBlobFieldArray1));
      assertFalse(fBBlobFieldArray3.equals((Object)fBBlobFieldArray0));
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray1));
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative((-819));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.757872925413054
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.add((byte[][]) null);
      assertTrue(boolean1);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean1 == boolean0);
      
      int int0 = (-41);
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      assertNotNull(predicate1);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertEquals(1, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      byte[][] byteArray0 = linkedList0.pop();
      assertNull(byteArray0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean2 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean2);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean3);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3 == boolean0);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      databaseParameterBufferImp0.addArgument((-41), "n.o`");
      boolean boolean4 = fBCachedFetcher0.isFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean4);
      assertEquals(0, linkedList0.size());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      int int1 = 1648;
      EmbeddedGDSImpl embeddedGDSImpl0 = null;
      try {
        embeddedGDSImpl0 = new EmbeddedGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.734399680379122
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[1][0];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)49;
      byteArray1[1] = (byte) (-118);
      byteArray1[2] = (byte) (-2);
      byteArray0[0] = byteArray1;
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[9];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[5];
      assertFalse(fBBlobFieldArray1.equals((Object)fBBlobFieldArray0));
      
      boolean boolean1 = linkedList0.removeLastOccurrence(fBBlobFieldArray0[3]);
      assertEquals(9, fBBlobFieldArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertNotSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertEquals(1, linkedList0.size());
      assertFalse(fBBlobFieldArray0.equals((Object)fBBlobFieldArray1));
      assertFalse(boolean1 == boolean0);
      
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray1[1] = fBBlobField0;
      fBBlobFieldArray1[2] = fBBlobFieldArray0[3];
      fBBlobFieldArray1[3] = fBBlobField0;
      fBBlobFieldArray1[4] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[2];
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray1));
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray0));
      
      boolean boolean2 = linkedList0.removeFirstOccurrence(fBBlobFieldArray0[3]);
      assertEquals(9, fBBlobFieldArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertFalse(boolean2);
      assertNotSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertNotSame(fBBlobFieldArray0, fBBlobFieldArray2);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(fBBlobFieldArray0.equals((Object)fBBlobFieldArray1));
      assertFalse(fBBlobFieldArray0.equals((Object)fBBlobFieldArray2));
      
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.995295628324261
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      byte[][] byteArray0 = fBResultSet0.row;
      assertEquals(0, xSQLVARArray0.length);
      assertNull(byteArray0);
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      Integer integer0 = new Integer((-711));
      assertNotNull(integer0);
      assertEquals((-711), (int)integer0);
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[4];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobFieldArray0[1];
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      boolean boolean1 = fBCachedFetcher0.relative(335544628);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(boolean1 == boolean0);
      
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      
      isc_db_handle_impl isc_db_handle_impl0 = isc_stmt_handle_impl0.getRsr_rdb();
      assertNull(isc_db_handle_impl0);
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      
      // Undeclared exception!
      try { 
        javaGDSImpl0.disconnect((isc_db_handle_impl) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.gds.impl.wire.AbstractJavaGDSImpl", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1437065979373684
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[0][0];
      boolean boolean0 = linkedList0.add(byteArray0);
      assertEquals(0, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(1, linkedList0.size());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.53275594933281
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual(object0);
      assertNotNull(predicate0);
      
      Predicate<byte[][]> predicate1 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate1);
      assertNotSame(predicate1, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate0.and(predicate1);
      assertNotNull(predicate2);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate3 = predicate0.or(predicate2);
      assertNotNull(predicate3);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Predicate<Object> predicate4 = Predicate.isEqual(object0);
      assertNotNull(predicate4);
      
      Predicate<Object> predicate5 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate5);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate5.equals((Object)predicate4));
      
      Predicate<Object> predicate6 = predicate4.or(predicate5);
      assertNotNull(predicate6);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      
      Predicate<Object> predicate7 = predicate6.negate();
      assertNotNull(predicate7);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate6));
      assertFalse(predicate7.equals((Object)predicate4));
      
      Predicate<Object> predicate8 = predicate5.or(predicate4);
      assertNotNull(predicate8);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate8, predicate6);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate5));
      
      Predicate<byte[][]> predicate9 = predicate1.and(predicate2);
      assertNotNull(predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate9, predicate2);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate10 = predicate0.and(predicate5);
      assertNotNull(predicate10);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      
      Predicate<byte[][]> predicate11 = predicate3.negate();
      assertNotNull(predicate11);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate10);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate10));
      
      Predicate<byte[][]> predicate12 = predicate9.or(predicate8);
      assertNotNull(predicate12);
      assertNotSame(predicate12, predicate3);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate4, predicate5);
      assertNotSame(predicate5, predicate4);
      assertNotSame(predicate8, predicate6);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate10);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate9));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate7));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate6));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate11));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate10));
      
      boolean boolean1 = predicate10.test((byte[][]) null);
      assertFalse(boolean1);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate12));
      assertTrue(boolean1 == boolean0);
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      
      Predicate<byte[][]> predicate13 = predicate10.and(predicate5);
      assertNotNull(predicate13);
      assertNotSame(predicate10, predicate13);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate13, predicate2);
      assertNotSame(predicate13, predicate10);
      assertNotSame(predicate13, predicate9);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate5, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate11));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate10));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate7));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate8));
      
      boolean boolean2 = predicate2.test((byte[][]) null);
      assertFalse(boolean2);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate13);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate13));
      
      boolean boolean3 = linkedList0.removeIf(predicate11);
      assertFalse(boolean3);
      assertNotSame(predicate0, predicate1);
      assertNotSame(predicate1, predicate0);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate13);
      assertNotSame(predicate3, predicate12);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate11.equals((Object)predicate10));
      assertFalse(predicate11.equals((Object)predicate13));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate12));
      assertFalse(predicate11.equals((Object)predicate1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate13));
      
      boolean boolean4 = linkedList0.add((byte[][]) null);
      assertTrue(boolean4);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      
      boolean boolean5 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean5);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      
      boolean boolean6 = fBCachedFetcher0.isBeforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean6);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean3);
      assertFalse(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean1);
      
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      assertEquals(400, int0);
      
      int int1 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, int1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(int1 == int0);
      
      int int2 = fBCachedFetcher0.getRowNum();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, int2);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      
      boolean boolean7 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean7);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertFalse(fBResultSet0.isClosed());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean3);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean0);
      assertFalse(boolean7 == boolean4);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[7];
      assertFalse(fBBlobFieldArray1.equals((Object)fBBlobFieldArray0));
      
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray1[2] = fBBlobField0;
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertFalse(boolean0);
      
      fBBlobFieldArray1[3] = fBBlobField0;
      fBBlobFieldArray1[4] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[2];
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray0));
      assertFalse(fBBlobFieldArray2.equals((Object)fBBlobFieldArray1));
      
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = new byte[12][5];
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)30;
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-112);
      boolean boolean2 = linkedList0.add(byteArray0);
      assertEquals(12, byteArray0.length);
      assertTrue(linkedList0.contains(byteArray0));
      assertTrue(boolean2);
      assertEquals(1, linkedList0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      byteArray1[4] = (byte)30;
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-114);
      byteArray0[0] = byteArray1;
      Stream<byte[][]> stream0 = linkedList0.parallelStream();
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(stream0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertEquals(1, linkedList0.size());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      assertNotNull(databaseParameterBuffer0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertNotSame(databaseParameterBuffer0, databaseParameterBufferImp0);
      assertTrue(databaseParameterBuffer0.equals((Object)databaseParameterBufferImp0));
      
      int int0 = databaseParameterBufferImp0.getArgumentAsInt(335544628);
      assertEquals(0, int0);
      assertNotSame(databaseParameterBufferImp0, databaseParameterBuffer0);
      assertTrue(databaseParameterBufferImp0.equals((Object)databaseParameterBuffer0));
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp1 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp1, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      assertNotNull(gDSHelper0);
      assertFalse(gDSHelper0.inTransaction());
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      int int1 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int1);
      assertEquals(0, linkedList0.size());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(int1 == int0);
      
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher(gDSHelper0, 643, 519, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = linkedList0.pollFirst();
      assertNull(byteArray0);
      assertEquals(0, linkedList0.size());
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[7];
      assertFalse(fBBlobFieldArray1.equals((Object)fBBlobFieldArray0));
      
      fBBlobFieldArray1[0] = fBBlobField0;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      int int0 = databaseParameterBufferImp0.getArgumentAsInt(66);
      assertEquals(0, int0);
      
      databaseParameterBufferImp0.addArgument((-548), 790);
      FBManagedConnectionFactory fBManagedConnectionFactory0 = new FBManagedConnectionFactory();
      assertNotNull(fBManagedConnectionFactory0);
      assertEquals("PURE_JAVA", fBManagedConnectionFactory0.getType());
      assertNull(fBManagedConnectionFactory0.getTpbMapping());
      
      // Undeclared exception!
      try { 
        fBManagedConnectionFactory0.getDefaultConnectionRequestInfo();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Specified GDS type PURE_JAVA is unknown.
         //
         verifyException("org.firebirdsql.gds.impl.GDSFactory", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      int int0 = databaseParameterBufferImp0.getArgumentAsInt(335544628);
      assertEquals(0, int0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp1 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      
      int int1 = databaseParameterBufferImp0.getArgumentAsInt((-2829));
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      databaseParameterBufferImp0.removeArgument(0);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      TransactionParameterBufferImpl transactionParameterBufferImpl0 = new TransactionParameterBufferImpl();
      assertNotNull(transactionParameterBufferImpl0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      String string0 = databaseParameterBufferImp0.getArgumentAsString(913);
      assertNull(string0);
      
      int int0 = databaseParameterBufferImp0.getArgumentAsInt(335544628);
      assertEquals(0, int0);
      
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp1 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp1);
      
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp1, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      assertNotNull(gDSHelper0);
      assertFalse(gDSHelper0.inTransaction());
      assertEquals(16384, GDSHelper.DEFAULT_BLOB_BUFFER_SIZE);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      int int1 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(int1 == int0);
      
      FBCachedFetcher fBCachedFetcher1 = null;
      try {
        fBCachedFetcher1 = new FBCachedFetcher(gDSHelper0, 643, 519, isc_stmt_handle_impl0, (FBObjectListener.FetcherListener) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.68267203473572
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertTrue(boolean1 == boolean0);
      
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("6*=!L3rgl18CeEpp&O");
      assertNotNull(jMXPrincipal0);
      
      boolean boolean2 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertTrue(boolean2);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      boolean boolean3 = linkedHashSet0.add(jMXPrincipal0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean3);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean2);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      Subject subject0 = new Subject(true, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(subject0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      
      Class<byte[][]> class0 = byte[][].class;
      Set<byte[][]> set0 = subject0.getPublicCredentials(class0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertNotNull(set0);
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean4 = linkedList0.addAll((Collection<? extends byte[][]>) set0);
      assertTrue(linkedHashSet0.contains(jMXPrincipal0));
      assertFalse(boolean4);
      assertEquals(1, linkedList0.size());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean0);
      assertFalse(boolean4 == boolean2);
      
      Iterator<byte[][]> iterator0 = linkedList0.iterator();
      assertNotNull(iterator0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean5 = linkedList0.add((byte[][]) null);
      assertTrue(boolean5);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean4);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate0);
      assertEquals(2, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      boolean boolean6 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean6);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean4);
      assertFalse(boolean6 == boolean1);
      assertFalse(boolean6 == boolean0);
      assertFalse(boolean6 == boolean5);
      assertFalse(boolean6 == boolean2);
      
      boolean boolean7 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean7);
      assertFalse(boolean7 == boolean5);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean1);
      assertFalse(boolean7 == boolean2);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean3);
      
      byte[][] byteArray0 = linkedList0.poll();
      assertNull(byteArray0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean8 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean8);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean1);
      assertFalse(boolean8 == boolean7);
      assertFalse(boolean8 == boolean6);
      assertFalse(boolean8 == boolean4);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean5);
      
      fBCachedFetcher0.beforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.9557135998277697
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1003, fBResultSet0.getType());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      Predicate<byte[][]> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate1.negate();
      assertNotNull(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate3 = predicate1.and(predicate2);
      assertNotNull(predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate4 = predicate1.negate();
      assertNotNull(predicate4);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate5 = predicate0.and(predicate1);
      assertNotNull(predicate5);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate5, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      
      Predicate<byte[][]> predicate6 = predicate0.negate();
      assertNotNull(predicate6);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      assertNotNull(predicate7);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      
      Predicate<Object> predicate8 = predicate7.negate();
      assertNotNull(predicate8);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate9 = predicate3.negate();
      assertNotNull(predicate9);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate1);
      assertNotSame(predicate9, predicate4);
      assertNotSame(predicate9, predicate6);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate5));
      
      Predicate<Object> predicate10 = predicate7.or(predicate8);
      assertNotNull(predicate10);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate10.equals((Object)predicate8));
      assertFalse(predicate10.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate11 = predicate6.negate();
      assertNotNull(predicate11);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate11);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate11, predicate9);
      assertNotSame(predicate11, predicate2);
      assertNotSame(predicate11, predicate4);
      assertNotSame(predicate11, predicate6);
      assertNotSame(predicate11, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate5));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate3));
      
      Predicate<Object> predicate12 = predicate8.and(predicate7);
      assertNotNull(predicate12);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate11);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate13 = predicate4.or(predicate8);
      assertNotNull(predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      
      Predicate<String> predicate14 = Predicate.isEqual((Object) predicate0);
      assertNotNull(predicate14);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate15 = predicate1.or(predicate5);
      assertNotNull(predicate15);
      assertNotSame(predicate15, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate5, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate16 = predicate6.and(predicate2);
      assertNotNull(predicate16);
      assertNotSame(predicate16, predicate3);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate11);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate11);
      assertNotSame(predicate6, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate15));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate17 = predicate2.and(predicate15);
      assertNotNull(predicate17);
      assertNotSame(predicate15, predicate13);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate5);
      assertNotSame(predicate17, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate11);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate17);
      assertNotSame(predicate5, predicate16);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate16));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate1));
      assertFalse(predicate17.equals((Object)predicate5));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate4));
      assertFalse(predicate17.equals((Object)predicate0));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate3));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate16));
      
      Predicate<byte[][]> predicate18 = predicate13.negate();
      assertNotNull(predicate18);
      assertNotSame(predicate13, predicate15);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate18, predicate6);
      assertNotSame(predicate18, predicate4);
      assertNotSame(predicate18, predicate9);
      assertNotSame(predicate18, predicate2);
      assertNotSame(predicate18, predicate1);
      assertNotSame(predicate18, predicate11);
      assertNotSame(predicate4, predicate18);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate18.equals((Object)predicate0));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate15));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate11));
      assertFalse(predicate18.equals((Object)predicate3));
      assertFalse(predicate18.equals((Object)predicate13));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate2));
      assertFalse(predicate18.equals((Object)predicate1));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate15));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate19 = predicate1.negate();
      assertNotNull(predicate19);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate19, predicate11);
      assertNotSame(predicate19, predicate18);
      assertNotSame(predicate19, predicate6);
      assertNotSame(predicate19, predicate2);
      assertNotSame(predicate19, predicate1);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate19, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate4));
      
      Predicate<byte[][]> predicate20 = predicate17.and(predicate2);
      assertNotNull(predicate20);
      assertNotSame(predicate15, predicate13);
      assertNotSame(predicate17, predicate16);
      assertNotSame(predicate17, predicate5);
      assertNotSame(predicate17, predicate20);
      assertNotSame(predicate17, predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate19);
      assertNotSame(predicate2, predicate11);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate20, predicate5);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate3);
      assertNotSame(predicate20, predicate16);
      assertNotSame(predicate5, predicate20);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate17);
      assertNotSame(predicate5, predicate16);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate19));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate16));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate18));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate15));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate4));
      assertFalse(predicate17.equals((Object)predicate0));
      assertFalse(predicate17.equals((Object)predicate11));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate3));
      assertFalse(predicate17.equals((Object)predicate19));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate17.equals((Object)predicate1));
      assertFalse(predicate17.equals((Object)predicate5));
      assertFalse(predicate17.equals((Object)predicate18));
      assertFalse(predicate17.equals((Object)predicate13));
      assertFalse(predicate17.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate3));
      assertFalse(predicate20.equals((Object)predicate2));
      assertFalse(predicate20.equals((Object)predicate13));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate0));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate1));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      
      Predicate<byte[][]> predicate21 = predicate13.and(predicate15);
      assertNotNull(predicate21);
      assertNotSame(predicate13, predicate15);
      assertNotSame(predicate15, predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate4, predicate18);
      assertNotSame(predicate4, predicate19);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate21, predicate16);
      assertNotSame(predicate21, predicate20);
      assertNotSame(predicate21, predicate3);
      assertNotSame(predicate21, predicate5);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate5, predicate20);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate21);
      assertNotSame(predicate5, predicate17);
      assertNotSame(predicate5, predicate16);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate19));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate16));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate18));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate15));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate18));
      assertFalse(predicate21.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate19));
      assertFalse(predicate21.equals((Object)predicate1));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate5));
      assertFalse(predicate21.equals((Object)predicate16));
      assertFalse(predicate21.equals((Object)predicate13));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate21.equals((Object)predicate3));
      assertFalse(predicate21.equals((Object)predicate4));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate22 = predicate3.or(predicate19);
      assertNotNull(predicate22);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate19);
      assertNotSame(predicate2, predicate11);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate19, predicate11);
      assertNotSame(predicate19, predicate18);
      assertNotSame(predicate19, predicate6);
      assertNotSame(predicate19, predicate2);
      assertNotSame(predicate19, predicate1);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate19, predicate4);
      assertNotSame(predicate3, predicate21);
      assertNotSame(predicate3, predicate20);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate3, predicate17);
      assertNotSame(predicate3, predicate16);
      assertNotSame(predicate22, predicate15);
      assertNotSame(predicate22, predicate13);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate21));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate21));
      assertFalse(predicate3.equals((Object)predicate17));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate19));
      assertFalse(predicate22.equals((Object)predicate0));
      assertFalse(predicate22.equals((Object)predicate6));
      assertFalse(predicate22.equals((Object)predicate1));
      assertFalse(predicate22.equals((Object)predicate18));
      assertFalse(predicate22.equals((Object)predicate5));
      assertFalse(predicate22.equals((Object)predicate16));
      assertFalse(predicate22.equals((Object)predicate15));
      assertFalse(predicate22.equals((Object)predicate19));
      assertFalse(predicate22.equals((Object)predicate4));
      assertFalse(predicate22.equals((Object)predicate3));
      assertFalse(predicate22.equals((Object)predicate11));
      assertFalse(predicate22.equals((Object)predicate17));
      assertFalse(predicate22.equals((Object)predicate20));
      assertFalse(predicate22.equals((Object)predicate21));
      assertFalse(predicate22.equals((Object)predicate2));
      assertFalse(predicate22.equals((Object)predicate9));
      assertFalse(predicate22.equals((Object)predicate13));
      
      Predicate<Object> predicate23 = predicate12.negate();
      assertNotNull(predicate23);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate23, predicate8);
      assertNotSame(predicate8, predicate23);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate7));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate23.equals((Object)predicate12));
      assertFalse(predicate23.equals((Object)predicate8));
      assertFalse(predicate23.equals((Object)predicate10));
      assertFalse(predicate23.equals((Object)predicate7));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      
      boolean boolean0 = predicate11.test((byte[][]) null);
      assertFalse(boolean0);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate19);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate11);
      assertNotSame(predicate6, predicate18);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate11, predicate9);
      assertNotSame(predicate11, predicate2);
      assertNotSame(predicate11, predicate4);
      assertNotSame(predicate11, predicate6);
      assertNotSame(predicate11, predicate19);
      assertNotSame(predicate11, predicate18);
      assertNotSame(predicate11, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate16));
      assertFalse(predicate11.equals((Object)predicate18));
      assertFalse(predicate11.equals((Object)predicate13));
      assertFalse(predicate11.equals((Object)predicate21));
      assertFalse(predicate11.equals((Object)predicate5));
      assertFalse(predicate11.equals((Object)predicate22));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate9));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate15));
      assertFalse(predicate11.equals((Object)predicate19));
      assertFalse(predicate11.equals((Object)predicate20));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate17));
      assertFalse(predicate11.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate24 = predicate21.or(predicate7);
      assertNotNull(predicate24);
      assertNotSame(predicate13, predicate15);
      assertNotSame(predicate13, predicate22);
      assertNotSame(predicate13, predicate24);
      assertNotSame(predicate15, predicate24);
      assertNotSame(predicate15, predicate13);
      assertNotSame(predicate15, predicate22);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate4, predicate18);
      assertNotSame(predicate4, predicate19);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate21, predicate16);
      assertNotSame(predicate21, predicate20);
      assertNotSame(predicate21, predicate3);
      assertNotSame(predicate21, predicate5);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate5, predicate20);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate21);
      assertNotSame(predicate5, predicate17);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate8, predicate23);
      assertNotSame(predicate24, predicate13);
      assertNotSame(predicate24, predicate22);
      assertNotSame(predicate24, predicate15);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate22));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate21));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate9));
      assertFalse(predicate15.equals((Object)predicate19));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate17));
      assertFalse(predicate15.equals((Object)predicate16));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate22));
      assertFalse(predicate15.equals((Object)predicate6));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate18));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate15));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate18));
      assertFalse(predicate21.equals((Object)predicate22));
      assertFalse(predicate21.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate19));
      assertFalse(predicate21.equals((Object)predicate1));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate5));
      assertFalse(predicate21.equals((Object)predicate16));
      assertFalse(predicate21.equals((Object)predicate13));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate21.equals((Object)predicate3));
      assertFalse(predicate21.equals((Object)predicate4));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate5.equals((Object)predicate22));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate23));
      assertFalse(predicate24.equals((Object)predicate18));
      assertFalse(predicate24.equals((Object)predicate19));
      assertFalse(predicate24.equals((Object)predicate0));
      assertFalse(predicate24.equals((Object)predicate22));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate2));
      assertFalse(predicate24.equals((Object)predicate4));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate20));
      assertFalse(predicate24.equals((Object)predicate13));
      assertFalse(predicate24.equals((Object)predicate21));
      assertFalse(predicate24.equals((Object)predicate11));
      assertFalse(predicate24.equals((Object)predicate3));
      assertFalse(predicate24.equals((Object)predicate1));
      assertFalse(predicate24.equals((Object)predicate5));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate15));
      assertFalse(predicate24.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate25 = predicate6.or(predicate19);
      assertNotNull(predicate25);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate19, predicate11);
      assertNotSame(predicate19, predicate18);
      assertNotSame(predicate19, predicate6);
      assertNotSame(predicate19, predicate2);
      assertNotSame(predicate19, predicate1);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate19, predicate4);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate19);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate11);
      assertNotSame(predicate6, predicate18);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate25, predicate15);
      assertNotSame(predicate25, predicate24);
      assertNotSame(predicate25, predicate13);
      assertNotSame(predicate25, predicate22);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate19.equals((Object)predicate22));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate21));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate24));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate25.equals((Object)predicate1));
      assertFalse(predicate25.equals((Object)predicate6));
      assertFalse(predicate25.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate24));
      assertFalse(predicate25.equals((Object)predicate0));
      assertFalse(predicate25.equals((Object)predicate20));
      assertFalse(predicate25.equals((Object)predicate3));
      assertFalse(predicate25.equals((Object)predicate11));
      assertFalse(predicate25.equals((Object)predicate17));
      assertFalse(predicate25.equals((Object)predicate4));
      assertFalse(predicate25.equals((Object)predicate9));
      assertFalse(predicate25.equals((Object)predicate2));
      assertFalse(predicate25.equals((Object)predicate15));
      assertFalse(predicate25.equals((Object)predicate13));
      assertFalse(predicate25.equals((Object)predicate19));
      assertFalse(predicate25.equals((Object)predicate18));
      assertFalse(predicate25.equals((Object)predicate22));
      assertFalse(predicate25.equals((Object)predicate21));
      assertFalse(predicate25.equals((Object)predicate5));
      
      Predicate<byte[][]> predicate26 = predicate9.or(predicate13);
      assertNotNull(predicate26);
      assertNotSame(predicate13, predicate15);
      assertNotSame(predicate13, predicate26);
      assertNotSame(predicate13, predicate22);
      assertNotSame(predicate13, predicate24);
      assertNotSame(predicate13, predicate25);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate19);
      assertNotSame(predicate2, predicate11);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate3, predicate21);
      assertNotSame(predicate3, predicate20);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate3, predicate17);
      assertNotSame(predicate3, predicate16);
      assertNotSame(predicate4, predicate18);
      assertNotSame(predicate4, predicate19);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate8, predicate23);
      assertNotSame(predicate9, predicate18);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate19);
      assertNotSame(predicate9, predicate1);
      assertNotSame(predicate9, predicate4);
      assertNotSame(predicate9, predicate6);
      assertNotSame(predicate9, predicate11);
      assertNotSame(predicate26, predicate15);
      assertNotSame(predicate26, predicate25);
      assertNotSame(predicate26, predicate24);
      assertNotSame(predicate26, predicate13);
      assertNotSame(predicate26, predicate22);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate22));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate21));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate25));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate25));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate22));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate24));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate3.equals((Object)predicate13));
      assertFalse(predicate3.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate11));
      assertFalse(predicate3.equals((Object)predicate21));
      assertFalse(predicate3.equals((Object)predicate17));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate25));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate22));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate24));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate15));
      assertFalse(predicate3.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate15));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate23));
      assertFalse(predicate9.equals((Object)predicate21));
      assertFalse(predicate9.equals((Object)predicate16));
      assertFalse(predicate9.equals((Object)predicate24));
      assertFalse(predicate9.equals((Object)predicate13));
      assertFalse(predicate9.equals((Object)predicate17));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate20));
      assertFalse(predicate9.equals((Object)predicate11));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate18));
      assertFalse(predicate9.equals((Object)predicate25));
      assertFalse(predicate9.equals((Object)predicate15));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate19));
      assertFalse(predicate9.equals((Object)predicate1));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate22));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate26.equals((Object)predicate17));
      assertFalse(predicate26.equals((Object)predicate4));
      assertFalse(predicate26.equals((Object)predicate9));
      assertFalse(predicate26.equals((Object)predicate25));
      assertFalse(predicate26.equals((Object)predicate15));
      assertFalse(predicate26.equals((Object)predicate2));
      assertFalse(predicate26.equals((Object)predicate13));
      assertFalse(predicate26.equals((Object)predicate19));
      assertFalse(predicate26.equals((Object)predicate18));
      assertFalse(predicate26.equals((Object)predicate22));
      assertFalse(predicate26.equals((Object)predicate21));
      assertFalse(predicate26.equals((Object)predicate5));
      assertFalse(predicate26.equals((Object)predicate1));
      assertFalse(predicate26.equals((Object)predicate6));
      assertFalse(predicate26.equals((Object)predicate16));
      assertFalse(predicate26.equals((Object)predicate24));
      assertFalse(predicate26.equals((Object)predicate0));
      assertFalse(predicate26.equals((Object)predicate20));
      assertFalse(predicate26.equals((Object)predicate11));
      assertFalse(predicate26.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate27 = predicate25.negate();
      assertNotNull(predicate27);
      assertNotSame(predicate27, predicate6);
      assertNotSame(predicate27, predicate4);
      assertNotSame(predicate27, predicate18);
      assertNotSame(predicate27, predicate11);
      assertNotSame(predicate27, predicate1);
      assertNotSame(predicate27, predicate2);
      assertNotSame(predicate27, predicate9);
      assertNotSame(predicate27, predicate19);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate1, predicate27);
      assertNotSame(predicate19, predicate27);
      assertNotSame(predicate19, predicate11);
      assertNotSame(predicate19, predicate18);
      assertNotSame(predicate19, predicate6);
      assertNotSame(predicate19, predicate2);
      assertNotSame(predicate19, predicate1);
      assertNotSame(predicate19, predicate9);
      assertNotSame(predicate19, predicate4);
      assertNotSame(predicate6, predicate27);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate19);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate11);
      assertNotSame(predicate6, predicate18);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate25, predicate15);
      assertNotSame(predicate25, predicate24);
      assertNotSame(predicate25, predicate13);
      assertNotSame(predicate25, predicate26);
      assertNotSame(predicate25, predicate22);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate27.equals((Object)predicate22));
      assertFalse(predicate27.equals((Object)predicate0));
      assertFalse(predicate27.equals((Object)predicate6));
      assertFalse(predicate27.equals((Object)predicate18));
      assertFalse(predicate27.equals((Object)predicate5));
      assertFalse(predicate27.equals((Object)predicate1));
      assertFalse(predicate27.equals((Object)predicate16));
      assertFalse(predicate27.equals((Object)predicate24));
      assertFalse(predicate27.equals((Object)predicate15));
      assertFalse(predicate27.equals((Object)predicate19));
      assertFalse(predicate27.equals((Object)predicate4));
      assertFalse(predicate27.equals((Object)predicate17));
      assertFalse(predicate27.equals((Object)predicate11));
      assertFalse(predicate27.equals((Object)predicate3));
      assertFalse(predicate27.equals((Object)predicate21));
      assertFalse(predicate27.equals((Object)predicate25));
      assertFalse(predicate27.equals((Object)predicate20));
      assertFalse(predicate27.equals((Object)predicate2));
      assertFalse(predicate27.equals((Object)predicate9));
      assertFalse(predicate27.equals((Object)predicate26));
      assertFalse(predicate27.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate19.equals((Object)predicate22));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate21));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate24));
      assertFalse(predicate19.equals((Object)predicate25));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate26));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate26));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate25.equals((Object)predicate1));
      assertFalse(predicate25.equals((Object)predicate6));
      assertFalse(predicate25.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate24));
      assertFalse(predicate25.equals((Object)predicate26));
      assertFalse(predicate25.equals((Object)predicate0));
      assertFalse(predicate25.equals((Object)predicate20));
      assertFalse(predicate25.equals((Object)predicate3));
      assertFalse(predicate25.equals((Object)predicate11));
      assertFalse(predicate25.equals((Object)predicate17));
      assertFalse(predicate25.equals((Object)predicate4));
      assertFalse(predicate25.equals((Object)predicate9));
      assertFalse(predicate25.equals((Object)predicate2));
      assertFalse(predicate25.equals((Object)predicate15));
      assertFalse(predicate25.equals((Object)predicate13));
      assertFalse(predicate25.equals((Object)predicate19));
      assertFalse(predicate25.equals((Object)predicate18));
      assertFalse(predicate25.equals((Object)predicate22));
      assertFalse(predicate25.equals((Object)predicate21));
      assertFalse(predicate25.equals((Object)predicate5));
      
      Predicate<byte[][]> predicate28 = predicate18.and(predicate6);
      assertNotNull(predicate28);
      assertNotSame(predicate28, predicate20);
      assertNotSame(predicate28, predicate5);
      assertNotSame(predicate28, predicate17);
      assertNotSame(predicate28, predicate3);
      assertNotSame(predicate28, predicate21);
      assertNotSame(predicate28, predicate16);
      assertNotSame(predicate13, predicate15);
      assertNotSame(predicate13, predicate26);
      assertNotSame(predicate13, predicate22);
      assertNotSame(predicate13, predicate24);
      assertNotSame(predicate13, predicate25);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate1, predicate27);
      assertNotSame(predicate18, predicate19);
      assertNotSame(predicate18, predicate6);
      assertNotSame(predicate18, predicate4);
      assertNotSame(predicate18, predicate9);
      assertNotSame(predicate18, predicate2);
      assertNotSame(predicate18, predicate1);
      assertNotSame(predicate18, predicate11);
      assertNotSame(predicate18, predicate27);
      assertNotSame(predicate4, predicate18);
      assertNotSame(predicate4, predicate19);
      assertNotSame(predicate4, predicate27);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate6, predicate27);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate19);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate11);
      assertNotSame(predicate6, predicate18);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate8, predicate23);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate28.equals((Object)predicate24));
      assertFalse(predicate28.equals((Object)predicate20));
      assertFalse(predicate28.equals((Object)predicate5));
      assertFalse(predicate28.equals((Object)predicate1));
      assertFalse(predicate28.equals((Object)predicate27));
      assertFalse(predicate28.equals((Object)predicate21));
      assertFalse(predicate28.equals((Object)predicate22));
      assertFalse(predicate28.equals((Object)predicate0));
      assertFalse(predicate28.equals((Object)predicate13));
      assertFalse(predicate28.equals((Object)predicate4));
      assertFalse(predicate28.equals((Object)predicate9));
      assertFalse(predicate28.equals((Object)predicate26));
      assertFalse(predicate28.equals((Object)predicate2));
      assertFalse(predicate28.equals((Object)predicate25));
      assertFalse(predicate28.equals((Object)predicate11));
      assertFalse(predicate28.equals((Object)predicate17));
      assertFalse(predicate28.equals((Object)predicate3));
      assertFalse(predicate28.equals((Object)predicate18));
      assertFalse(predicate28.equals((Object)predicate19));
      assertFalse(predicate28.equals((Object)predicate16));
      assertFalse(predicate28.equals((Object)predicate15));
      assertFalse(predicate28.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate26));
      assertFalse(predicate13.equals((Object)predicate22));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate21));
      assertFalse(predicate13.equals((Object)predicate27));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate25));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate27));
      assertFalse(predicate18.equals((Object)predicate0));
      assertFalse(predicate18.equals((Object)predicate19));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate15));
      assertFalse(predicate18.equals((Object)predicate26));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate11));
      assertFalse(predicate18.equals((Object)predicate3));
      assertFalse(predicate18.equals((Object)predicate24));
      assertFalse(predicate18.equals((Object)predicate13));
      assertFalse(predicate18.equals((Object)predicate20));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate2));
      assertFalse(predicate18.equals((Object)predicate1));
      assertFalse(predicate18.equals((Object)predicate25));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate21));
      assertFalse(predicate18.equals((Object)predicate22));
      assertFalse(predicate18.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate26));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate15));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate27));
      assertFalse(predicate6.equals((Object)predicate26));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate23));
      
      Predicate<byte[][]> predicate29 = predicate13.negate();
      assertNotNull(predicate29);
      assertNotSame(predicate13, predicate15);
      assertNotSame(predicate13, predicate26);
      assertNotSame(predicate13, predicate22);
      assertNotSame(predicate13, predicate24);
      assertNotSame(predicate13, predicate25);
      assertNotSame(predicate29, predicate27);
      assertNotSame(predicate29, predicate11);
      assertNotSame(predicate29, predicate18);
      assertNotSame(predicate29, predicate6);
      assertNotSame(predicate29, predicate19);
      assertNotSame(predicate29, predicate2);
      assertNotSame(predicate29, predicate1);
      assertNotSame(predicate29, predicate9);
      assertNotSame(predicate29, predicate4);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate1, predicate29);
      assertNotSame(predicate1, predicate27);
      assertNotSame(predicate4, predicate18);
      assertNotSame(predicate4, predicate19);
      assertNotSame(predicate4, predicate29);
      assertNotSame(predicate4, predicate27);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate8, predicate23);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate26));
      assertFalse(predicate13.equals((Object)predicate22));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate21));
      assertFalse(predicate13.equals((Object)predicate27));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate25));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate28));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate24));
      assertFalse(predicate29.equals((Object)predicate22));
      assertFalse(predicate29.equals((Object)predicate0));
      assertFalse(predicate29.equals((Object)predicate27));
      assertFalse(predicate29.equals((Object)predicate18));
      assertFalse(predicate29.equals((Object)predicate6));
      assertFalse(predicate29.equals((Object)predicate28));
      assertFalse(predicate29.equals((Object)predicate19));
      assertFalse(predicate29.equals((Object)predicate15));
      assertFalse(predicate29.equals((Object)predicate1));
      assertFalse(predicate29.equals((Object)predicate16));
      assertFalse(predicate29.equals((Object)predicate21));
      assertFalse(predicate29.equals((Object)predicate5));
      assertFalse(predicate29.equals((Object)predicate11));
      assertFalse(predicate29.equals((Object)predicate3));
      assertFalse(predicate29.equals((Object)predicate13));
      assertFalse(predicate29.equals((Object)predicate2));
      assertFalse(predicate29.equals((Object)predicate24));
      assertFalse(predicate29.equals((Object)predicate25));
      assertFalse(predicate29.equals((Object)predicate17));
      assertFalse(predicate29.equals((Object)predicate9));
      assertFalse(predicate29.equals((Object)predicate26));
      assertFalse(predicate29.equals((Object)predicate20));
      assertFalse(predicate29.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate28));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate28));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate28));
      assertFalse(predicate4.equals((Object)predicate26));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate15));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate23));
      
      boolean boolean1 = predicate29.test((byte[][]) null);
      assertFalse(boolean1);
      assertNotSame(predicate13, predicate15);
      assertNotSame(predicate13, predicate26);
      assertNotSame(predicate13, predicate22);
      assertNotSame(predicate13, predicate24);
      assertNotSame(predicate13, predicate25);
      assertNotSame(predicate29, predicate27);
      assertNotSame(predicate29, predicate11);
      assertNotSame(predicate29, predicate18);
      assertNotSame(predicate29, predicate6);
      assertNotSame(predicate29, predicate19);
      assertNotSame(predicate29, predicate2);
      assertNotSame(predicate29, predicate1);
      assertNotSame(predicate29, predicate9);
      assertNotSame(predicate29, predicate4);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate11);
      assertNotSame(predicate1, predicate19);
      assertNotSame(predicate1, predicate29);
      assertNotSame(predicate1, predicate27);
      assertNotSame(predicate4, predicate18);
      assertNotSame(predicate4, predicate19);
      assertNotSame(predicate4, predicate29);
      assertNotSame(predicate4, predicate27);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate11);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate8, predicate23);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate6));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate26));
      assertFalse(predicate13.equals((Object)predicate22));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate21));
      assertFalse(predicate13.equals((Object)predicate27));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate25));
      assertFalse(predicate13.equals((Object)predicate9));
      assertFalse(predicate13.equals((Object)predicate17));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate13.equals((Object)predicate28));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate24));
      assertFalse(predicate13.equals((Object)predicate29));
      assertFalse(predicate29.equals((Object)predicate22));
      assertFalse(predicate29.equals((Object)predicate0));
      assertFalse(predicate29.equals((Object)predicate27));
      assertFalse(predicate29.equals((Object)predicate18));
      assertFalse(predicate29.equals((Object)predicate6));
      assertFalse(predicate29.equals((Object)predicate28));
      assertFalse(predicate29.equals((Object)predicate19));
      assertFalse(predicate29.equals((Object)predicate15));
      assertFalse(predicate29.equals((Object)predicate1));
      assertFalse(predicate29.equals((Object)predicate16));
      assertFalse(predicate29.equals((Object)predicate21));
      assertFalse(predicate29.equals((Object)predicate5));
      assertFalse(predicate29.equals((Object)predicate11));
      assertFalse(predicate29.equals((Object)predicate3));
      assertFalse(predicate29.equals((Object)predicate13));
      assertFalse(predicate29.equals((Object)predicate2));
      assertFalse(predicate29.equals((Object)predicate24));
      assertFalse(predicate29.equals((Object)predicate25));
      assertFalse(predicate29.equals((Object)predicate17));
      assertFalse(predicate29.equals((Object)predicate9));
      assertFalse(predicate29.equals((Object)predicate26));
      assertFalse(predicate29.equals((Object)predicate20));
      assertFalse(predicate29.equals((Object)predicate4));
      assertTrue(boolean1 == boolean0);
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate29));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate28));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate29));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate28));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate28));
      assertFalse(predicate4.equals((Object)predicate26));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate29));
      assertFalse(predicate4.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate4.equals((Object)predicate15));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate13));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate11));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate12));
      assertFalse(predicate7.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate10));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate23));
      
      boolean boolean2 = linkedList0.removeIf(predicate11);
      assertFalse(boolean2);
      assertNotSame(predicate6, predicate27);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate19);
      assertNotSame(predicate6, predicate29);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate11);
      assertNotSame(predicate6, predicate18);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate11, predicate9);
      assertNotSame(predicate11, predicate2);
      assertNotSame(predicate11, predicate4);
      assertNotSame(predicate11, predicate29);
      assertNotSame(predicate11, predicate6);
      assertNotSame(predicate11, predicate19);
      assertNotSame(predicate11, predicate18);
      assertNotSame(predicate11, predicate27);
      assertNotSame(predicate11, predicate1);
      assertEquals(0, linkedList0.size());
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate29));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate28));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate6.equals((Object)predicate13));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate24));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate28));
      assertFalse(predicate6.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate27));
      assertFalse(predicate6.equals((Object)predicate26));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate29));
      assertFalse(predicate6.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate15));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate11.equals((Object)predicate24));
      assertFalse(predicate11.equals((Object)predicate6));
      assertFalse(predicate11.equals((Object)predicate16));
      assertFalse(predicate11.equals((Object)predicate18));
      assertFalse(predicate11.equals((Object)predicate13));
      assertFalse(predicate11.equals((Object)predicate21));
      assertFalse(predicate11.equals((Object)predicate5));
      assertFalse(predicate11.equals((Object)predicate27));
      assertFalse(predicate11.equals((Object)predicate22));
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher1);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertTrue(fBCachedFetcher1.isBeforeFirst());
      assertFalse(fBCachedFetcher1.isAfterLast());
      assertFalse(fBCachedFetcher1.isEmpty());
      assertFalse(fBCachedFetcher1.isFirst());
      assertEquals(0, fBCachedFetcher1.getRowNum());
      assertFalse(fBCachedFetcher1.isLast());
      assertEquals(0, fBCachedFetcher1.getFetchSize());
      assertFalse(fBCachedFetcher1.equals((Object)fBCachedFetcher0));
      
      boolean boolean1 = fBCachedFetcher0.isBeforeFirst();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertNotSame(fBCachedFetcher0, fBCachedFetcher1);
      assertEquals(1, linkedList0.size());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.equals((Object)fBCachedFetcher1));
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9557135998277697
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      Predicate<byte[][]> predicate1 = predicate0.negate();
      assertNotNull(predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate1.negate();
      assertNotNull(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate3 = predicate1.and(predicate2);
      assertNotNull(predicate3);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate4 = predicate1.negate();
      assertNotNull(predicate4);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate5 = predicate0.and(predicate1);
      assertNotNull(predicate5);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate5, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate6 = predicate0.negate();
      assertNotNull(predicate6);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      assertNotNull(predicate7);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      
      Predicate<Object> predicate8 = predicate7.negate();
      assertNotNull(predicate8);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate9 = predicate2.negate();
      assertNotNull(predicate9);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate9, predicate2);
      assertNotSame(predicate9, predicate6);
      assertNotSame(predicate9, predicate4);
      assertNotSame(predicate9, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate3));
      assertFalse(predicate9.equals((Object)predicate2));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate4));
      assertFalse(predicate9.equals((Object)predicate5));
      assertFalse(predicate9.equals((Object)predicate0));
      assertFalse(predicate9.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate10 = predicate3.negate();
      assertNotNull(predicate10);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate1);
      assertNotSame(predicate10, predicate6);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate10, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate5));
      assertFalse(predicate10.equals((Object)predicate9));
      assertFalse(predicate10.equals((Object)predicate4));
      
      Predicate<Object> predicate11 = predicate7.or(predicate8);
      assertNotNull(predicate11);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate11.equals((Object)predicate8));
      assertFalse(predicate11.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate12 = predicate6.negate();
      assertNotNull(predicate12);
      assertNotSame(predicate12, predicate10);
      assertNotSame(predicate12, predicate6);
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate9);
      assertNotSame(predicate12, predicate4);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate10);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate12);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate10));
      assertFalse(predicate12.equals((Object)predicate6));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate9));
      assertFalse(predicate12.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate3));
      
      Predicate<Object> predicate13 = predicate8.and(predicate7);
      assertNotNull(predicate13);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate14 = predicate4.or(predicate8);
      assertNotNull(predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate10);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      
      Predicate<String> predicate15 = Predicate.isEqual((Object) predicate0);
      assertNotNull(predicate15);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate16 = predicate1.or(predicate5);
      assertNotNull(predicate16);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate5, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate17 = predicate4.negate();
      assertNotNull(predicate17);
      assertNotSame(predicate17, predicate12);
      assertNotSame(predicate17, predicate9);
      assertNotSame(predicate17, predicate4);
      assertNotSame(predicate17, predicate2);
      assertNotSame(predicate17, predicate6);
      assertNotSame(predicate17, predicate1);
      assertNotSame(predicate17, predicate10);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate10);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate17.equals((Object)predicate0));
      assertFalse(predicate17.equals((Object)predicate12));
      assertFalse(predicate17.equals((Object)predicate14));
      assertFalse(predicate17.equals((Object)predicate3));
      assertFalse(predicate17.equals((Object)predicate5));
      assertFalse(predicate17.equals((Object)predicate4));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate2));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate17.equals((Object)predicate1));
      assertFalse(predicate17.equals((Object)predicate10));
      assertFalse(predicate17.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate16));
      
      Predicate<byte[][]> predicate18 = predicate14.and(predicate5);
      assertNotNull(predicate18);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate18, predicate3);
      assertNotSame(predicate18, predicate5);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate10);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate18);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate12));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate10));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate18.equals((Object)predicate9));
      assertFalse(predicate18.equals((Object)predicate1));
      assertFalse(predicate18.equals((Object)predicate17));
      assertFalse(predicate18.equals((Object)predicate3));
      assertFalse(predicate18.equals((Object)predicate14));
      assertFalse(predicate18.equals((Object)predicate2));
      assertFalse(predicate18.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      
      Predicate<byte[][]> predicate19 = predicate2.and(predicate16);
      assertNotNull(predicate19);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate17);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate19, predicate18);
      assertNotSame(predicate19, predicate3);
      assertNotSame(predicate19, predicate5);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate18);
      assertNotSame(predicate5, predicate19);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate19.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate14));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate20 = predicate14.negate();
      assertNotNull(predicate20);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate20, predicate4);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate9);
      assertNotSame(predicate20, predicate12);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate10);
      assertNotSame(predicate20, predicate1);
      assertNotSame(predicate20, predicate2);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate20);
      assertNotSame(predicate4, predicate10);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate6));
      assertFalse(predicate20.equals((Object)predicate12));
      assertFalse(predicate20.equals((Object)predicate17));
      assertFalse(predicate20.equals((Object)predicate10));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate20.equals((Object)predicate1));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate9));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate3));
      assertFalse(predicate20.equals((Object)predicate0));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      
      Predicate<byte[][]> predicate21 = predicate1.negate();
      assertNotNull(predicate21);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate21, predicate4);
      assertNotSame(predicate21, predicate9);
      assertNotSame(predicate21, predicate12);
      assertNotSame(predicate21, predicate1);
      assertNotSame(predicate21, predicate20);
      assertNotSame(predicate21, predicate6);
      assertNotSame(predicate21, predicate10);
      assertNotSame(predicate21, predicate2);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate21.equals((Object)predicate18));
      assertFalse(predicate21.equals((Object)predicate4));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate12));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate0));
      assertFalse(predicate21.equals((Object)predicate3));
      assertFalse(predicate21.equals((Object)predicate5));
      assertFalse(predicate21.equals((Object)predicate1));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate19));
      assertFalse(predicate21.equals((Object)predicate10));
      assertFalse(predicate21.equals((Object)predicate16));
      
      Predicate<byte[][]> predicate22 = predicate19.and(predicate2);
      assertNotNull(predicate22);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate20);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate21);
      assertNotSame(predicate2, predicate17);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate19, predicate18);
      assertNotSame(predicate19, predicate3);
      assertNotSame(predicate19, predicate5);
      assertNotSame(predicate19, predicate22);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate22);
      assertNotSame(predicate5, predicate18);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate22, predicate3);
      assertNotSame(predicate22, predicate18);
      assertNotSame(predicate22, predicate5);
      assertNotSame(predicate22, predicate19);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate21));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate6));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate10));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate21));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate19.equals((Object)predicate9));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate14));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate17));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate22.equals((Object)predicate10));
      assertFalse(predicate22.equals((Object)predicate12));
      assertFalse(predicate22.equals((Object)predicate18));
      assertFalse(predicate22.equals((Object)predicate16));
      assertFalse(predicate22.equals((Object)predicate20));
      assertFalse(predicate22.equals((Object)predicate5));
      assertFalse(predicate22.equals((Object)predicate6));
      assertFalse(predicate22.equals((Object)predicate4));
      assertFalse(predicate22.equals((Object)predicate9));
      assertFalse(predicate22.equals((Object)predicate21));
      assertFalse(predicate22.equals((Object)predicate1));
      assertFalse(predicate22.equals((Object)predicate19));
      assertFalse(predicate22.equals((Object)predicate3));
      assertFalse(predicate22.equals((Object)predicate17));
      assertFalse(predicate22.equals((Object)predicate14));
      assertFalse(predicate22.equals((Object)predicate2));
      assertFalse(predicate22.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate23 = predicate14.and(predicate16);
      assertNotNull(predicate23);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate4, predicate21);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate20);
      assertNotSame(predicate4, predicate10);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate23);
      assertNotSame(predicate5, predicate22);
      assertNotSame(predicate5, predicate18);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate23, predicate18);
      assertNotSame(predicate23, predicate3);
      assertNotSame(predicate23, predicate19);
      assertNotSame(predicate23, predicate5);
      assertNotSame(predicate23, predicate22);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate21));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate22));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate23.equals((Object)predicate18));
      assertFalse(predicate23.equals((Object)predicate21));
      assertFalse(predicate23.equals((Object)predicate12));
      assertFalse(predicate23.equals((Object)predicate4));
      assertFalse(predicate23.equals((Object)predicate9));
      assertFalse(predicate23.equals((Object)predicate20));
      assertFalse(predicate23.equals((Object)predicate14));
      assertFalse(predicate23.equals((Object)predicate6));
      assertFalse(predicate23.equals((Object)predicate1));
      assertFalse(predicate23.equals((Object)predicate19));
      assertFalse(predicate23.equals((Object)predicate5));
      assertFalse(predicate23.equals((Object)predicate10));
      assertFalse(predicate23.equals((Object)predicate16));
      assertFalse(predicate23.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate0));
      assertFalse(predicate23.equals((Object)predicate3));
      assertFalse(predicate23.equals((Object)predicate2));
      assertFalse(predicate23.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      
      Predicate<byte[][]> predicate24 = predicate3.or(predicate16);
      assertNotNull(predicate24);
      assertNotSame(predicate16, predicate24);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate20);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate21);
      assertNotSame(predicate2, predicate17);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate3, predicate19);
      assertNotSame(predicate3, predicate23);
      assertNotSame(predicate3, predicate18);
      assertNotSame(predicate3, predicate22);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate23);
      assertNotSame(predicate5, predicate22);
      assertNotSame(predicate5, predicate18);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate24, predicate16);
      assertNotSame(predicate24, predicate14);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate21));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate23));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate22));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate23));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate19));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate22));
      assertFalse(predicate3.equals((Object)predicate17));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate21));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate23));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate22));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate24.equals((Object)predicate17));
      assertFalse(predicate24.equals((Object)predicate3));
      assertFalse(predicate24.equals((Object)predicate14));
      assertFalse(predicate24.equals((Object)predicate22));
      assertFalse(predicate24.equals((Object)predicate18));
      assertFalse(predicate24.equals((Object)predicate0));
      assertFalse(predicate24.equals((Object)predicate2));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate12));
      assertFalse(predicate24.equals((Object)predicate10));
      assertFalse(predicate24.equals((Object)predicate20));
      assertFalse(predicate24.equals((Object)predicate23));
      assertFalse(predicate24.equals((Object)predicate9));
      assertFalse(predicate24.equals((Object)predicate4));
      assertFalse(predicate24.equals((Object)predicate21));
      assertFalse(predicate24.equals((Object)predicate5));
      assertFalse(predicate24.equals((Object)predicate6));
      assertFalse(predicate24.equals((Object)predicate19));
      assertFalse(predicate24.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate25 = predicate3.or(predicate21);
      assertNotNull(predicate25);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate20);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate21);
      assertNotSame(predicate2, predicate17);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate3, predicate19);
      assertNotSame(predicate3, predicate23);
      assertNotSame(predicate3, predicate18);
      assertNotSame(predicate3, predicate22);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate21, predicate4);
      assertNotSame(predicate21, predicate9);
      assertNotSame(predicate21, predicate12);
      assertNotSame(predicate21, predicate1);
      assertNotSame(predicate21, predicate20);
      assertNotSame(predicate21, predicate6);
      assertNotSame(predicate21, predicate10);
      assertNotSame(predicate21, predicate2);
      assertNotSame(predicate25, predicate24);
      assertNotSame(predicate25, predicate16);
      assertNotSame(predicate25, predicate14);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate22));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate23));
      assertFalse(predicate2.equals((Object)predicate24));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate19));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate22));
      assertFalse(predicate3.equals((Object)predicate17));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate21));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate23));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate24));
      assertFalse(predicate21.equals((Object)predicate18));
      assertFalse(predicate21.equals((Object)predicate22));
      assertFalse(predicate21.equals((Object)predicate4));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate12));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate23));
      assertFalse(predicate21.equals((Object)predicate0));
      assertFalse(predicate21.equals((Object)predicate3));
      assertFalse(predicate21.equals((Object)predicate5));
      assertFalse(predicate21.equals((Object)predicate24));
      assertFalse(predicate21.equals((Object)predicate1));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate19));
      assertFalse(predicate21.equals((Object)predicate10));
      assertFalse(predicate21.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate12));
      assertFalse(predicate25.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate10));
      assertFalse(predicate25.equals((Object)predicate2));
      assertFalse(predicate25.equals((Object)predicate14));
      assertFalse(predicate25.equals((Object)predicate18));
      assertFalse(predicate25.equals((Object)predicate22));
      assertFalse(predicate25.equals((Object)predicate0));
      assertFalse(predicate25.equals((Object)predicate17));
      assertFalse(predicate25.equals((Object)predicate3));
      assertFalse(predicate25.equals((Object)predicate24));
      assertFalse(predicate25.equals((Object)predicate5));
      assertFalse(predicate25.equals((Object)predicate6));
      assertFalse(predicate25.equals((Object)predicate4));
      assertFalse(predicate25.equals((Object)predicate20));
      assertFalse(predicate25.equals((Object)predicate21));
      assertFalse(predicate25.equals((Object)predicate9));
      assertFalse(predicate25.equals((Object)predicate1));
      assertFalse(predicate25.equals((Object)predicate19));
      assertFalse(predicate25.equals((Object)predicate23));
      
      Predicate<Object> predicate26 = predicate13.negate();
      assertNotNull(predicate26);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate8, predicate26);
      assertNotSame(predicate26, predicate8);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate7));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate26.equals((Object)predicate11));
      assertFalse(predicate26.equals((Object)predicate13));
      assertFalse(predicate26.equals((Object)predicate8));
      assertFalse(predicate26.equals((Object)predicate7));
      
      Predicate<byte[][]> predicate27 = predicate23.or(predicate7);
      assertNotNull(predicate27);
      assertNotSame(predicate14, predicate27);
      assertNotSame(predicate14, predicate24);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate14, predicate25);
      assertNotSame(predicate16, predicate25);
      assertNotSame(predicate16, predicate24);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate16, predicate27);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate4, predicate21);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate20);
      assertNotSame(predicate4, predicate10);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate23);
      assertNotSame(predicate5, predicate22);
      assertNotSame(predicate5, predicate18);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate23, predicate18);
      assertNotSame(predicate23, predicate3);
      assertNotSame(predicate23, predicate19);
      assertNotSame(predicate23, predicate5);
      assertNotSame(predicate23, predicate22);
      assertNotSame(predicate8, predicate26);
      assertNotSame(predicate27, predicate16);
      assertNotSame(predicate27, predicate14);
      assertNotSame(predicate27, predicate24);
      assertNotSame(predicate27, predicate25);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate24));
      assertFalse(predicate14.equals((Object)predicate25));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate19));
      assertFalse(predicate14.equals((Object)predicate23));
      assertFalse(predicate16.equals((Object)predicate17));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate22));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate25));
      assertFalse(predicate16.equals((Object)predicate6));
      assertFalse(predicate16.equals((Object)predicate10));
      assertFalse(predicate16.equals((Object)predicate21));
      assertFalse(predicate16.equals((Object)predicate24));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate23));
      assertFalse(predicate16.equals((Object)predicate9));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate23));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate17));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate24));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate22));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate10));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate25));
      assertFalse(predicate5.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate9));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate6));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate23.equals((Object)predicate18));
      assertFalse(predicate23.equals((Object)predicate21));
      assertFalse(predicate23.equals((Object)predicate12));
      assertFalse(predicate23.equals((Object)predicate25));
      assertFalse(predicate23.equals((Object)predicate4));
      assertFalse(predicate23.equals((Object)predicate9));
      assertFalse(predicate23.equals((Object)predicate20));
      assertFalse(predicate23.equals((Object)predicate14));
      assertFalse(predicate23.equals((Object)predicate6));
      assertFalse(predicate23.equals((Object)predicate1));
      assertFalse(predicate23.equals((Object)predicate19));
      assertFalse(predicate23.equals((Object)predicate5));
      assertFalse(predicate23.equals((Object)predicate10));
      assertFalse(predicate23.equals((Object)predicate16));
      assertFalse(predicate23.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate0));
      assertFalse(predicate23.equals((Object)predicate3));
      assertFalse(predicate23.equals((Object)predicate24));
      assertFalse(predicate23.equals((Object)predicate2));
      assertFalse(predicate23.equals((Object)predicate22));
      assertFalse(predicate7.equals((Object)predicate26));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate26));
      assertFalse(predicate27.equals((Object)predicate23));
      assertFalse(predicate27.equals((Object)predicate0));
      assertFalse(predicate27.equals((Object)predicate20));
      assertFalse(predicate27.equals((Object)predicate1));
      assertFalse(predicate27.equals((Object)predicate2));
      assertFalse(predicate27.equals((Object)predicate19));
      assertFalse(predicate27.equals((Object)predicate5));
      assertFalse(predicate27.equals((Object)predicate4));
      assertFalse(predicate27.equals((Object)predicate12));
      assertFalse(predicate27.equals((Object)predicate24));
      assertFalse(predicate27.equals((Object)predicate25));
      assertFalse(predicate27.equals((Object)predicate21));
      assertFalse(predicate27.equals((Object)predicate9));
      assertFalse(predicate27.equals((Object)predicate22));
      assertFalse(predicate27.equals((Object)predicate18));
      assertFalse(predicate27.equals((Object)predicate6));
      assertFalse(predicate27.equals((Object)predicate16));
      assertFalse(predicate27.equals((Object)predicate10));
      assertFalse(predicate27.equals((Object)predicate3));
      assertFalse(predicate27.equals((Object)predicate17));
      assertFalse(predicate27.equals((Object)predicate14));
      
      Predicate<byte[][]> predicate28 = predicate6.or(predicate21);
      assertNotNull(predicate28);
      assertNotSame(predicate28, predicate24);
      assertNotSame(predicate28, predicate14);
      assertNotSame(predicate28, predicate25);
      assertNotSame(predicate28, predicate16);
      assertNotSame(predicate28, predicate27);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate21, predicate4);
      assertNotSame(predicate21, predicate9);
      assertNotSame(predicate21, predicate12);
      assertNotSame(predicate21, predicate1);
      assertNotSame(predicate21, predicate20);
      assertNotSame(predicate21, predicate6);
      assertNotSame(predicate21, predicate10);
      assertNotSame(predicate21, predicate2);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate10);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate21);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate12);
      assertNotSame(predicate6, predicate20);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate28.equals((Object)predicate23));
      assertFalse(predicate28.equals((Object)predicate24));
      assertFalse(predicate28.equals((Object)predicate3));
      assertFalse(predicate28.equals((Object)predicate17));
      assertFalse(predicate28.equals((Object)predicate20));
      assertFalse(predicate28.equals((Object)predicate12));
      assertFalse(predicate28.equals((Object)predicate6));
      assertFalse(predicate28.equals((Object)predicate10));
      assertFalse(predicate28.equals((Object)predicate16));
      assertFalse(predicate28.equals((Object)predicate5));
      assertFalse(predicate28.equals((Object)predicate1));
      assertFalse(predicate28.equals((Object)predicate19));
      assertFalse(predicate28.equals((Object)predicate18));
      assertFalse(predicate28.equals((Object)predicate4));
      assertFalse(predicate28.equals((Object)predicate21));
      assertFalse(predicate28.equals((Object)predicate9));
      assertFalse(predicate28.equals((Object)predicate14));
      assertFalse(predicate28.equals((Object)predicate25));
      assertFalse(predicate28.equals((Object)predicate27));
      assertFalse(predicate28.equals((Object)predicate2));
      assertFalse(predicate28.equals((Object)predicate22));
      assertFalse(predicate28.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate27));
      assertFalse(predicate21.equals((Object)predicate18));
      assertFalse(predicate21.equals((Object)predicate22));
      assertFalse(predicate21.equals((Object)predicate4));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate25));
      assertFalse(predicate21.equals((Object)predicate9));
      assertFalse(predicate21.equals((Object)predicate12));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate27));
      assertFalse(predicate21.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate17));
      assertFalse(predicate21.equals((Object)predicate23));
      assertFalse(predicate21.equals((Object)predicate0));
      assertFalse(predicate21.equals((Object)predicate3));
      assertFalse(predicate21.equals((Object)predicate5));
      assertFalse(predicate21.equals((Object)predicate24));
      assertFalse(predicate21.equals((Object)predicate1));
      assertFalse(predicate21.equals((Object)predicate6));
      assertFalse(predicate21.equals((Object)predicate19));
      assertFalse(predicate21.equals((Object)predicate10));
      assertFalse(predicate21.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate27));
      assertFalse(predicate6.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate18));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate6.equals((Object)predicate14));
      assertFalse(predicate6.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate1));
      assertFalse(predicate6.equals((Object)predicate16));
      assertFalse(predicate6.equals((Object)predicate19));
      assertFalse(predicate6.equals((Object)predicate10));
      assertFalse(predicate6.equals((Object)predicate2));
      assertFalse(predicate6.equals((Object)predicate21));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate23));
      assertFalse(predicate6.equals((Object)predicate5));
      assertFalse(predicate6.equals((Object)predicate4));
      assertFalse(predicate6.equals((Object)predicate12));
      assertFalse(predicate6.equals((Object)predicate25));
      assertFalse(predicate6.equals((Object)predicate20));
      assertFalse(predicate6.equals((Object)predicate24));
      
      Predicate<byte[][]> predicate29 = predicate10.or(predicate14);
      assertNotNull(predicate29);
      assertNotSame(predicate29, predicate25);
      assertNotSame(predicate29, predicate28);
      assertNotSame(predicate29, predicate27);
      assertNotSame(predicate29, predicate14);
      assertNotSame(predicate29, predicate24);
      assertNotSame(predicate29, predicate16);
      assertNotSame(predicate14, predicate27);
      assertNotSame(predicate14, predicate24);
      assertNotSame(predicate14, predicate28);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate14, predicate25);
      assertNotSame(predicate14, predicate29);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate2, predicate20);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate6);
      assertNotSame(predicate2, predicate10);
      assertNotSame(predicate2, predicate21);
      assertNotSame(predicate2, predicate17);
      assertNotSame(predicate2, predicate12);
      assertNotSame(predicate2, predicate9);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate3, predicate19);
      assertNotSame(predicate3, predicate23);
      assertNotSame(predicate3, predicate18);
      assertNotSame(predicate3, predicate22);
      assertNotSame(predicate3, predicate5);
      assertNotSame(predicate4, predicate21);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate20);
      assertNotSame(predicate4, predicate10);
      assertNotSame(predicate8, predicate26);
      assertNotSame(predicate10, predicate2);
      assertNotSame(predicate10, predicate20);
      assertNotSame(predicate10, predicate1);
      assertNotSame(predicate10, predicate6);
      assertNotSame(predicate10, predicate17);
      assertNotSame(predicate10, predicate12);
      assertNotSame(predicate10, predicate21);
      assertNotSame(predicate10, predicate9);
      assertNotSame(predicate10, predicate4);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate29.equals((Object)predicate3));
      assertFalse(predicate29.equals((Object)predicate0));
      assertFalse(predicate29.equals((Object)predicate17));
      assertFalse(predicate29.equals((Object)predicate28));
      assertFalse(predicate29.equals((Object)predicate23));
      assertFalse(predicate29.equals((Object)predicate27));
      assertFalse(predicate29.equals((Object)predicate14));
      assertFalse(predicate29.equals((Object)predicate6));
      assertFalse(predicate29.equals((Object)predicate10));
      assertFalse(predicate29.equals((Object)predicate16));
      assertFalse(predicate29.equals((Object)predicate12));
      assertFalse(predicate29.equals((Object)predicate25));
      assertFalse(predicate29.equals((Object)predicate21));
      assertFalse(predicate29.equals((Object)predicate1));
      assertFalse(predicate29.equals((Object)predicate19));
      assertFalse(predicate29.equals((Object)predicate9));
      assertFalse(predicate29.equals((Object)predicate18));
      assertFalse(predicate29.equals((Object)predicate22));
      assertFalse(predicate29.equals((Object)predicate5));
      assertFalse(predicate29.equals((Object)predicate4));
      assertFalse(predicate29.equals((Object)predicate20));
      assertFalse(predicate29.equals((Object)predicate24));
      assertFalse(predicate29.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate27));
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate28));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate17));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate22));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate6));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate24));
      assertFalse(predicate14.equals((Object)predicate25));
      assertFalse(predicate14.equals((Object)predicate10));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate9));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate19));
      assertFalse(predicate14.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate28));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate9));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate17));
      assertFalse(predicate1.equals((Object)predicate28));
      assertFalse(predicate1.equals((Object)predicate22));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate27));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate25));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate6));
      assertFalse(predicate2.equals((Object)predicate10));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate22));
      assertFalse(predicate2.equals((Object)predicate17));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate27));
      assertFalse(predicate2.equals((Object)predicate28));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate23));
      assertFalse(predicate2.equals((Object)predicate24));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate19));
      assertFalse(predicate3.equals((Object)predicate6));
      assertFalse(predicate3.equals((Object)predicate10));
      assertFalse(predicate3.equals((Object)predicate16));
      assertFalse(predicate3.equals((Object)predicate18));
      assertFalse(predicate3.equals((Object)predicate22));
      assertFalse(predicate3.equals((Object)predicate17));
      assertFalse(predicate3.equals((Object)predicate14));
      assertFalse(predicate3.equals((Object)predicate28));
      assertFalse(predicate3.equals((Object)predicate27));
      assertFalse(predicate3.equals((Object)predicate0));
      assertFalse(predicate3.equals((Object)predicate21));
      assertFalse(predicate3.equals((Object)predicate9));
      assertFalse(predicate3.equals((Object)predicate23));
      assertFalse(predicate3.equals((Object)predicate5));
      assertFalse(predicate3.equals((Object)predicate4));
      assertFalse(predicate3.equals((Object)predicate12));
      assertFalse(predicate3.equals((Object)predicate25));
      assertFalse(predicate3.equals((Object)predicate20));
      assertFalse(predicate3.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate18));
      assertFalse(predicate4.equals((Object)predicate21));
      assertFalse(predicate4.equals((Object)predicate12));
      assertFalse(predicate4.equals((Object)predicate9));
      assertFalse(predicate4.equals((Object)predicate22));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate4.equals((Object)predicate20));
      assertFalse(predicate4.equals((Object)predicate25));
      assertFalse(predicate4.equals((Object)predicate17));
      assertFalse(predicate4.equals((Object)predicate24));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate23));
      assertFalse(predicate4.equals((Object)predicate19));
      assertFalse(predicate4.equals((Object)predicate27));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate6));
      assertFalse(predicate4.equals((Object)predicate28));
      assertFalse(predicate4.equals((Object)predicate10));
      assertFalse(predicate4.equals((Object)predicate14));
      assertFalse(predicate4.equals((Object)predicate16));
      assertFalse(predicate7.equals((Object)predicate26));
      assertFalse(predicate7.equals((Object)predicate13));
      assertFalse(predicate7.equals((Object)predicate8));
      assertFalse(predicate7.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate7));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate26));
      assertFalse(predicate10.equals((Object)predicate27));
      assertFalse(predicate10.equals((Object)predicate18));
      assertFalse(predicate10.equals((Object)predicate0));
      assertFalse(predicate10.equals((Object)predicate17));
      assertFalse(predicate10.equals((Object)predicate14));
      assertFalse(predicate10.equals((Object)predicate22));
      assertFalse(predicate10.equals((Object)predicate3));
      assertFalse(predicate10.equals((Object)predicate28));
      assertFalse(predicate10.equals((Object)predicate2));
      assertFalse(predicate10.equals((Object)predicate19));
      assertFalse(predicate10.equals((Object)predicate20));
      assertFalse(predicate10.equals((Object)predicate1));
      assertFalse(predicate10.equals((Object)predicate6));
      assertFalse(predicate10.equals((Object)predicate16));
      assertFalse(predicate10.equals((Object)predicate12));
      assertFalse(predicate10.equals((Object)predicate25));
      assertFalse(predicate10.equals((Object)predicate23));
      assertFalse(predicate10.equals((Object)predicate24));
      assertFalse(predicate10.equals((Object)predicate5));
      assertFalse(predicate10.equals((Object)predicate4));
      assertFalse(predicate10.equals((Object)predicate21));
      assertFalse(predicate10.equals((Object)predicate9));
      
      Predicate<byte[][]> predicate30 = predicate28.negate();
      assertNotNull(predicate30);
      assertNotSame(predicate28, predicate29);
      assertNotSame(predicate28, predicate24);
      assertNotSame(predicate28, predicate14);
      assertNotSame(predicate28, predicate25);
      assertNotSame(predicate28, predicate16);
      assertNotSame(predicate28, predicate27);
      assertNotSame(predicate30, predicate21);
      assertNotSame(predicate30, predicate17);
      assertNotSame(predicate30, predicate4);
      assertNotSame(predicate30, predicate12);
      assertNotSame(predicate30, predicate9);
      assertNotSame(predicate30, predicate1);
      assertNotSame(predicate30, predicate2);
      assertNotSame(predicate30, predicate20);
      assertNotSame(predicate30, predicate6);
      assertNotSame(predicate30, predicate10);
      assertNotSame(predicate1, predicate30);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate21, predicate17);
      assertNotSame(predicate21, predicate4);
      assertNotSame(predicate21, predicate9);
      assertNotSame(predicate21, predicate12);
      assertNotSame(predicate21, predicate1);
      assertNotSame(predicate21, predicate20);
      assertNotSame(predicate21, predicate6);
      assertNotSame(predicate21, predicate30);
      assertNotSame(predicate21, predicate10);
      assertNotSame(predicate21, predicate2);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate10);
      assertNotSame(predicate6, predicate30);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate21);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate12);
      assertNotSame(predicate6, predicate20);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate28.equals((Object)predicate23));
      assertFalse(predicate28.equals((Object)predicate24));
      assertFalse(predicate28.equals((Object)predicate3));
      assertFalse(predicate28.equals((Object)predicate17));
      assertFalse(predicate28.equals((Object)predicate20));
      assertFalse(predicate28.equals((Object)predicate12));
      assertFalse(predicate28.equals((Object)predicate6));
      assertFalse(predicate28.equals((Object)predicate10));
      assertFalse(predicate28.equals((Object)predicate16));
      assertFalse(predicate28.equals((Object)predicate5));
      assertFalse(predicate28.equals((Object)predicate1));
      assertFalse(predicate28.equals((Object)predicate19));
      assertFalse(predicate28.equals((Object)predicate29));
      assertFalse(predicate28.equals((Object)predicate18));
      assertFalse(predicate28.equals((Object)predicate4));
      assertFalse(predicate28.equals((Object)predicate21));
      assertFalse(predicate28.equals((Object)predicate9));
      assertFalse(predicate28.equals((Object)predicate14));
      assertFalse(predicate28.equals((Object)predicate25));
      assertFalse(predicate28.equals((Object)predicate27));
      assertFalse(predicate28.equals((Object)predicate2));
      assertFalse(predicate28.equals((Object)predicate22));
      assertFalse(predicate28.equals((Object)predicate0));
      assertFalse(predicate30.equals((Object)predicate21));
      assertFalse(predicate30.equals((Object)predicate29));
      assertFalse(predicate30.equals((Object)predicate4));
      assertFalse(predicate30.equals((Object)predicate14));
      assertFalse(predicate30.equals((Object)predicate22));
      assertFalse(predicate30.equals((Object)predicate12));
      assertFalse(predicate30.equals((Object)predicate9));
      assertFalse(predicate30.equals((Object)predicate18));
      assertFalse(predicate30.equals((Object)predicate27));
      assertFalse(predicate30.equals((Object)predicate1));
      assertFalse(predicate30.equals((Object)predicate19));
      assertFalse(predicate30.equals((Object)predicate28));
      assertFalse(predicate30.equals((Object)predicate16));
      assertFalse(predicate30.equals((Object)predicate10));
      assertFalse(predicate30.equals((Object)predicate6));
      assertFalse(predicate30.equals((Object)predicate0));
      assertFalse(predicate30.equals((Object)predicate24));
      assertFalse(predicate30.equals((Object)predicate17));
      assertFalse(predicate30.equals((Object)predicate3));
      assertFalse(predicate30.equals((Object)predicate23));
      assertFalse(predicate30.equals((Object)predicate5));
      assertFalse(predicate30.equals((Object)predicate2));
      assertFalse(predicate30.equals((Object)predicate20));
      assertFalse(predicate30.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate29));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate10));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate6));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate22));
      assertFalse(predicate0.equals((Object)predicate17));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate28));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate9));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate10));
      assertFalse(predicate1.equals((Object)predicate6));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      
      Predicate<byte[][]> predicate31 = predicate20.and(predicate6);
      assertNotNull(predicate31);
      assertNotSame(predicate14, predicate27);
      assertNotSame(predicate14, predicate24);
      assertNotSame(predicate14, predicate28);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate14, predicate25);
      assertNotSame(predicate14, predicate29);
      assertNotSame(predicate31, predicate19);
      assertNotSame(predicate31, predicate23);
      assertNotSame(predicate31, predicate22);
      assertNotSame(predicate31, predicate18);
      assertNotSame(predicate31, predicate5);
      assertNotSame(predicate31, predicate3);
      assertNotSame(predicate1, predicate30);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate20, predicate30);
      assertNotSame(predicate20, predicate4);
      assertNotSame(predicate20, predicate6);
      assertNotSame(predicate20, predicate21);
      assertNotSame(predicate20, predicate9);
      assertNotSame(predicate20, predicate12);
      assertNotSame(predicate20, predicate17);
      assertNotSame(predicate20, predicate10);
      assertNotSame(predicate20, predicate1);
      assertNotSame(predicate20, predicate2);
      assertNotSame(predicate4, predicate21);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate30);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate20);
      assertNotSame(predicate4, predicate10);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate10);
      assertNotSame(predicate6, predicate30);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate21);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate12);
      assertNotSame(predicate6, predicate20);
      assertNotSame(predicate8, predicate26);
      assertEquals(0, linkedList0.size());
      
      Predicate<byte[][]> predicate32 = predicate14.negate();
      assertNotNull(predicate32);
      assertNotSame(predicate14, predicate27);
      assertNotSame(predicate14, predicate24);
      assertNotSame(predicate14, predicate28);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate14, predicate25);
      assertNotSame(predicate14, predicate29);
      assertNotSame(predicate32, predicate9);
      assertNotSame(predicate32, predicate21);
      assertNotSame(predicate32, predicate4);
      assertNotSame(predicate32, predicate30);
      assertNotSame(predicate32, predicate1);
      assertNotSame(predicate32, predicate12);
      assertNotSame(predicate32, predicate2);
      assertNotSame(predicate32, predicate6);
      assertNotSame(predicate32, predicate10);
      assertNotSame(predicate32, predicate20);
      assertNotSame(predicate32, predicate17);
      assertNotSame(predicate1, predicate30);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate32);
      assertNotSame(predicate4, predicate21);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate32);
      assertNotSame(predicate4, predicate30);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate20);
      assertNotSame(predicate4, predicate10);
      assertNotSame(predicate8, predicate26);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = predicate32.test((byte[][]) null);
      assertFalse(boolean0);
      assertNotSame(predicate14, predicate27);
      assertNotSame(predicate14, predicate24);
      assertNotSame(predicate14, predicate28);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate14, predicate25);
      assertNotSame(predicate14, predicate29);
      assertNotSame(predicate32, predicate9);
      assertNotSame(predicate32, predicate21);
      assertNotSame(predicate32, predicate4);
      assertNotSame(predicate32, predicate30);
      assertNotSame(predicate32, predicate1);
      assertNotSame(predicate32, predicate12);
      assertNotSame(predicate32, predicate2);
      assertNotSame(predicate32, predicate6);
      assertNotSame(predicate32, predicate10);
      assertNotSame(predicate32, predicate20);
      assertNotSame(predicate32, predicate17);
      assertNotSame(predicate1, predicate30);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate10);
      assertNotSame(predicate1, predicate6);
      assertNotSame(predicate1, predicate17);
      assertNotSame(predicate1, predicate20);
      assertNotSame(predicate1, predicate12);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate1, predicate21);
      assertNotSame(predicate1, predicate9);
      assertNotSame(predicate1, predicate32);
      assertNotSame(predicate4, predicate21);
      assertNotSame(predicate4, predicate17);
      assertNotSame(predicate4, predicate12);
      assertNotSame(predicate4, predicate9);
      assertNotSame(predicate4, predicate32);
      assertNotSame(predicate4, predicate30);
      assertNotSame(predicate4, predicate2);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate6);
      assertNotSame(predicate4, predicate20);
      assertNotSame(predicate4, predicate10);
      assertNotSame(predicate8, predicate26);
      assertEquals(0, linkedList0.size());
      
      boolean boolean1 = linkedList0.removeIf(predicate12);
      assertFalse(boolean1);
      assertNotSame(predicate12, predicate17);
      assertNotSame(predicate12, predicate21);
      assertNotSame(predicate12, predicate10);
      assertNotSame(predicate12, predicate6);
      assertNotSame(predicate12, predicate1);
      assertNotSame(predicate12, predicate2);
      assertNotSame(predicate12, predicate20);
      assertNotSame(predicate12, predicate9);
      assertNotSame(predicate12, predicate4);
      assertNotSame(predicate12, predicate32);
      assertNotSame(predicate12, predicate30);
      assertNotSame(predicate6, predicate1);
      assertNotSame(predicate6, predicate10);
      assertNotSame(predicate6, predicate30);
      assertNotSame(predicate6, predicate2);
      assertNotSame(predicate6, predicate21);
      assertNotSame(predicate6, predicate9);
      assertNotSame(predicate6, predicate4);
      assertNotSame(predicate6, predicate32);
      assertNotSame(predicate6, predicate17);
      assertNotSame(predicate6, predicate12);
      assertNotSame(predicate6, predicate20);
      assertEquals(0, linkedList0.size());
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow((byte[][]) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray0 = linkedList0.pollFirst();
      assertNull(byteArray0);
      assertEquals(0, linkedList0.size());
      
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[20];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[1] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray0[4] = fBBlobField0;
      fBBlobFieldArray0[5] = fBBlobField0;
      fBBlobFieldArray0[6] = fBBlobField0;
      fBBlobFieldArray0[7] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray1 = linkedList0.toArray(fBBlobFieldArray0);
      assertEquals(20, fBBlobFieldArray0.length);
      assertEquals(20, fBBlobFieldArray1.length);
      assertNotNull(fBBlobFieldArray1);
      assertSame(fBBlobFieldArray0, fBBlobFieldArray1);
      assertSame(fBBlobFieldArray1, fBBlobFieldArray0);
      assertEquals(0, linkedList0.size());
      
      byte[][] byteArray1 = new byte[2][3];
      boolean boolean0 = linkedList0.add(byteArray1);
      assertEquals(2, byteArray1.length);
      assertTrue(linkedList0.contains(byteArray1));
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      assertFalse(linkedList1.contains(byteArray1));
      assertNotNull(linkedList1);
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      assertFalse(linkedList1.contains(byteArray1));
      assertNotNull(fBCachedFetcher0);
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, linkedList1.size());
      assertFalse(linkedList1.equals((Object)linkedList0));
      
      try { 
        fBCachedFetcher0.absolute(0);
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.8875106532458714
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean0 = linkedList0.add((byte[][]) null);
      assertTrue(boolean0);
      assertEquals(1, linkedList0.size());
      
      boolean boolean1 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean1);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean1 == boolean0);
      
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Subject subject0 = new Subject(false, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      assertNotNull(subject0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Class<byte[][]> class0 = byte[][].class;
      Set<byte[][]> set0 = subject0.getPublicCredentials(class0);
      assertNotNull(set0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      boolean boolean2 = linkedList0.addAll((Collection<? extends byte[][]>) set0);
      assertFalse(boolean2);
      assertEquals(1, linkedList0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      boolean boolean3 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean3);
      assertEquals(1, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      boolean boolean4 = linkedList0.add((byte[][]) null);
      assertTrue(boolean4);
      assertEquals(2, linkedList0.size());
      assertFalse(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(2, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean5 = linkedList0.add((byte[][]) null);
      assertTrue(boolean5);
      assertEquals(3, linkedList0.size());
      assertTrue(boolean5 == boolean0);
      assertFalse(boolean5 == boolean3);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5 == boolean1);
      
      Predicate<Object> predicate0 = Predicate.isEqual((Object) fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertNotNull(predicate0);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      
      Object object0 = new Object();
      assertNotNull(object0);
      
      boolean boolean6 = linkedList0.add((byte[][]) null);
      assertTrue(boolean6);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertFalse(boolean6 == boolean1);
      
      fBCachedFetcher0.afterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(2, fBCachedFetcher0.getRowNum());
      
      boolean boolean7 = fBCachedFetcher0.relative((-41));
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean7);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertFalse(boolean7 == boolean5);
      assertFalse(boolean7 == boolean0);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7 == boolean4);
      assertTrue(boolean7 == boolean2);
      
      byte[][] byteArray0 = linkedList0.poll();
      assertNull(byteArray0);
      assertEquals(3, linkedList0.size());
      
      boolean boolean8 = fBCachedFetcher0.next();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean8);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertFalse(boolean8 == boolean2);
      assertFalse(boolean8 == boolean3);
      assertFalse(boolean8 == boolean1);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean7);
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isAfterLast());
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean9 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean9);
      assertEquals(3, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean9 == boolean3);
      assertFalse(boolean9 == boolean5);
      assertFalse(boolean9 == boolean6);
      assertTrue(boolean9 == boolean2);
      assertFalse(boolean9 == boolean4);
      assertFalse(boolean9 == boolean0);
      assertTrue(boolean9 == boolean7);
      assertTrue(boolean9 == boolean1);
      assertFalse(boolean9 == boolean8);
      
      boolean boolean10 = linkedList0.add((byte[][]) null);
      assertTrue(boolean10);
      assertEquals(4, linkedList0.size());
      assertTrue(boolean10 == boolean0);
      assertTrue(boolean10 == boolean4);
      assertFalse(boolean10 == boolean7);
      assertTrue(boolean10 == boolean5);
      assertFalse(boolean10 == boolean1);
      assertTrue(boolean10 == boolean6);
      assertFalse(boolean10 == boolean9);
      assertTrue(boolean10 == boolean8);
      assertFalse(boolean10 == boolean2);
      assertFalse(boolean10 == boolean3);
      
      boolean boolean11 = fBCachedFetcher0.isAfterLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean11);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean11 == boolean1);
      assertFalse(boolean11 == boolean6);
      assertFalse(boolean11 == boolean5);
      assertFalse(boolean11 == boolean0);
      assertFalse(boolean11 == boolean8);
      assertFalse(boolean11 == boolean10);
      assertTrue(boolean11 == boolean7);
      assertFalse(boolean11 == boolean4);
      assertTrue(boolean11 == boolean3);
      assertTrue(boolean11 == boolean9);
      assertTrue(boolean11 == boolean2);
      
      boolean boolean12 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean12);
      assertEquals(4, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean12 == boolean0);
      assertFalse(boolean12 == boolean4);
      assertTrue(boolean12 == boolean11);
      assertFalse(boolean12 == boolean6);
      assertFalse(boolean12 == boolean8);
      assertFalse(boolean12 == boolean5);
      assertFalse(boolean12 == boolean10);
      assertTrue(boolean12 == boolean3);
      assertTrue(boolean12 == boolean2);
      assertTrue(boolean12 == boolean1);
      assertTrue(boolean12 == boolean7);
      assertTrue(boolean12 == boolean9);
      
      boolean boolean13 = linkedList0.add((byte[][]) null);
      assertTrue(boolean13);
      assertEquals(5, linkedList0.size());
      assertFalse(boolean13 == boolean3);
      assertFalse(boolean13 == boolean2);
      assertTrue(boolean13 == boolean4);
      assertFalse(boolean13 == boolean7);
      assertTrue(boolean13 == boolean10);
      assertTrue(boolean13 == boolean8);
      assertTrue(boolean13 == boolean0);
      assertFalse(boolean13 == boolean9);
      assertTrue(boolean13 == boolean5);
      assertTrue(boolean13 == boolean6);
      assertFalse(boolean13 == boolean11);
      assertFalse(boolean13 == boolean1);
      assertFalse(boolean13 == boolean12);
      
      fBCachedFetcher0.insertRow((byte[][]) null);
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(5, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.deleteRow();
      assertEquals(0, xSQLVARArray0.length);
      assertEquals(5, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      
      boolean boolean14 = fBCachedFetcher0.isLast();
      assertEquals(0, xSQLVARArray0.length);
      assertTrue(boolean14);
      assertEquals(5, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean14 == boolean1);
      assertFalse(boolean14 == boolean11);
      assertTrue(boolean14 == boolean0);
      assertTrue(boolean14 == boolean6);
      assertFalse(boolean14 == boolean2);
      assertTrue(boolean14 == boolean10);
      assertTrue(boolean14 == boolean13);
      assertFalse(boolean14 == boolean12);
      assertTrue(boolean14 == boolean4);
      assertFalse(boolean14 == boolean7);
      assertTrue(boolean14 == boolean8);
      assertFalse(boolean14 == boolean9);
      assertFalse(boolean14 == boolean3);
      assertTrue(boolean14 == boolean5);
      
      boolean boolean15 = fBCachedFetcher0.previous();
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(boolean15);
      assertEquals(5, linkedList0.size());
      assertEquals(0, fBResultSet0.getRow());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1003, fBResultSet0.getType());
      assertFalse(fBCachedFetcher0.isLast());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isEmpty());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertTrue(boolean15 == boolean12);
      assertFalse(boolean15 == boolean13);
      assertFalse(boolean15 == boolean6);
      assertTrue(boolean15 == boolean7);
      assertTrue(boolean15 == boolean9);
      assertFalse(boolean15 == boolean8);
      assertTrue(boolean15 == boolean2);
      assertFalse(boolean15 == boolean10);
      assertFalse(boolean15 == boolean5);
      assertTrue(boolean15 == boolean3);
      assertFalse(boolean15 == boolean0);
      assertTrue(boolean15 == boolean1);
      assertFalse(boolean15 == boolean4);
      assertTrue(boolean15 == boolean11);
      assertFalse(boolean15 == boolean14);
      
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      assertNotNull(predicate0);
      assertEquals(0, linkedList0.size());
      
      Predicate<byte[][]> predicate1 = predicate0.and(predicate0);
      assertNotNull(predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate1.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate2 = predicate0.and(predicate1);
      assertNotNull(predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      byte[][] byteArray0 = new byte[0][4];
      boolean boolean0 = predicate2.test(byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean0);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate1));
      
      Predicate<byte[][]> predicate3 = predicate0.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate1));
      assertFalse(predicate3.equals((Object)predicate2));
      assertFalse(predicate3.equals((Object)predicate0));
      
      Predicate<byte[][]> predicate4 = predicate0.and(predicate0);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate4);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate2);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate5 = predicate0.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate5);
      assertNotSame(predicate5, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate0);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate6);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      
      Predicate<Object> predicate7 = predicate6.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate7);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate7.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate8 = predicate2.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate8);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate8, predicate5);
      assertNotSame(predicate8, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      
      Predicate<Object> predicate9 = predicate6.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate9);
      assertNotSame(predicate9, predicate7);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate9.equals((Object)predicate6));
      assertFalse(predicate9.equals((Object)predicate7));
      
      Predicate<String> predicate10 = Predicate.isEqual((Object) predicate0);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate10);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate11 = predicate4.or(predicate0);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate11);
      assertNotSame(predicate4, predicate1);
      assertNotSame(predicate4, predicate2);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate1));
      assertFalse(predicate4.equals((Object)predicate5));
      assertFalse(predicate4.equals((Object)predicate8));
      assertFalse(predicate4.equals((Object)predicate3));
      assertFalse(predicate4.equals((Object)predicate0));
      assertFalse(predicate4.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate1));
      assertFalse(predicate11.equals((Object)predicate2));
      assertFalse(predicate11.equals((Object)predicate0));
      assertFalse(predicate11.equals((Object)predicate3));
      assertFalse(predicate11.equals((Object)predicate5));
      assertFalse(predicate11.equals((Object)predicate4));
      assertFalse(predicate11.equals((Object)predicate8));
      
      Predicate<byte[][]> predicate12 = predicate0.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate12);
      assertNotSame(predicate12, predicate5);
      assertNotSame(predicate12, predicate3);
      assertNotSame(predicate12, predicate8);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate13 = predicate8.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate13);
      assertNotSame(predicate13, predicate12);
      assertNotSame(predicate13, predicate5);
      assertNotSame(predicate13, predicate3);
      assertNotSame(predicate13, predicate8);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate8, predicate5);
      assertNotSame(predicate8, predicate13);
      assertNotSame(predicate8, predicate3);
      assertNotSame(predicate8, predicate12);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate12));
      
      Predicate<byte[][]> predicate14 = predicate0.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate14);
      assertNotSame(predicate14, predicate8);
      assertNotSame(predicate14, predicate5);
      assertNotSame(predicate14, predicate12);
      assertNotSame(predicate14, predicate3);
      assertNotSame(predicate14, predicate13);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate15 = predicate2.and(predicate1);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate15);
      assertNotSame(predicate15, predicate1);
      assertNotSame(predicate15, predicate4);
      assertNotSame(predicate15, predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate5));
      
      Predicate<byte[][]> predicate16 = predicate15.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate16);
      assertNotSame(predicate15, predicate1);
      assertNotSame(predicate15, predicate4);
      assertNotSame(predicate15, predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate16, predicate3);
      assertNotSame(predicate16, predicate12);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate8);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate15));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate5));
      
      Predicate<Object> predicate17 = predicate7.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate17);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate9);
      assertNotSame(predicate7, predicate9);
      assertNotSame(predicate7, predicate17);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate18 = predicate15.and(predicate17);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate18);
      assertNotSame(predicate15, predicate1);
      assertNotSame(predicate15, predicate4);
      assertNotSame(predicate15, predicate18);
      assertNotSame(predicate15, predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate17, predicate7);
      assertNotSame(predicate17, predicate9);
      assertNotSame(predicate18, predicate15);
      assertNotSame(predicate18, predicate1);
      assertNotSame(predicate18, predicate4);
      assertNotSame(predicate18, predicate2);
      assertNotSame(predicate7, predicate9);
      assertNotSame(predicate7, predicate17);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate17.equals((Object)predicate7));
      assertFalse(predicate17.equals((Object)predicate9));
      assertFalse(predicate17.equals((Object)predicate6));
      assertFalse(predicate18.equals((Object)predicate5));
      assertFalse(predicate18.equals((Object)predicate8));
      assertFalse(predicate18.equals((Object)predicate3));
      assertFalse(predicate18.equals((Object)predicate12));
      assertFalse(predicate18.equals((Object)predicate13));
      assertFalse(predicate18.equals((Object)predicate4));
      assertFalse(predicate18.equals((Object)predicate16));
      assertFalse(predicate18.equals((Object)predicate11));
      assertFalse(predicate18.equals((Object)predicate14));
      assertFalse(predicate18.equals((Object)predicate15));
      assertFalse(predicate18.equals((Object)predicate1));
      assertFalse(predicate18.equals((Object)predicate2));
      assertFalse(predicate18.equals((Object)predicate0));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate9));
      assertFalse(predicate7.equals((Object)predicate17));
      assertFalse(predicate7.equals((Object)predicate6));
      
      Predicate<byte[][]> predicate19 = predicate12.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate19);
      assertNotSame(predicate12, predicate5);
      assertNotSame(predicate12, predicate3);
      assertNotSame(predicate12, predicate8);
      assertNotSame(predicate12, predicate14);
      assertNotSame(predicate12, predicate13);
      assertNotSame(predicate12, predicate16);
      assertNotSame(predicate12, predicate19);
      assertNotSame(predicate19, predicate16);
      assertNotSame(predicate19, predicate13);
      assertNotSame(predicate19, predicate8);
      assertNotSame(predicate19, predicate14);
      assertNotSame(predicate19, predicate5);
      assertNotSame(predicate19, predicate12);
      assertNotSame(predicate19, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate13));
      assertFalse(predicate12.equals((Object)predicate16));
      assertFalse(predicate12.equals((Object)predicate15));
      assertFalse(predicate12.equals((Object)predicate14));
      assertFalse(predicate12.equals((Object)predicate18));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate8));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate19.equals((Object)predicate14));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate3));
      
      Predicate<byte[][]> predicate20 = predicate19.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate20);
      assertNotSame(predicate12, predicate5);
      assertNotSame(predicate12, predicate3);
      assertNotSame(predicate12, predicate8);
      assertNotSame(predicate12, predicate14);
      assertNotSame(predicate12, predicate13);
      assertNotSame(predicate12, predicate20);
      assertNotSame(predicate12, predicate16);
      assertNotSame(predicate12, predicate19);
      assertNotSame(predicate19, predicate16);
      assertNotSame(predicate19, predicate13);
      assertNotSame(predicate19, predicate8);
      assertNotSame(predicate19, predicate14);
      assertNotSame(predicate19, predicate5);
      assertNotSame(predicate19, predicate12);
      assertNotSame(predicate19, predicate3);
      assertNotSame(predicate19, predicate20);
      assertNotSame(predicate20, predicate13);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate14);
      assertNotSame(predicate20, predicate5);
      assertNotSame(predicate20, predicate12);
      assertNotSame(predicate20, predicate3);
      assertNotSame(predicate20, predicate16);
      assertNotSame(predicate20, predicate19);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate13));
      assertFalse(predicate12.equals((Object)predicate16));
      assertFalse(predicate12.equals((Object)predicate19));
      assertFalse(predicate12.equals((Object)predicate15));
      assertFalse(predicate12.equals((Object)predicate14));
      assertFalse(predicate12.equals((Object)predicate18));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate8));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate19.equals((Object)predicate14));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate1));
      assertFalse(predicate20.equals((Object)predicate3));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate13));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate0));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate12));
      assertFalse(predicate20.equals((Object)predicate2));
      
      Predicate<byte[][]> predicate21 = predicate13.or(predicate20);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate21);
      assertNotSame(predicate12, predicate5);
      assertNotSame(predicate12, predicate3);
      assertNotSame(predicate12, predicate8);
      assertNotSame(predicate12, predicate14);
      assertNotSame(predicate12, predicate13);
      assertNotSame(predicate12, predicate20);
      assertNotSame(predicate12, predicate16);
      assertNotSame(predicate12, predicate19);
      assertNotSame(predicate13, predicate12);
      assertNotSame(predicate13, predicate5);
      assertNotSame(predicate13, predicate3);
      assertNotSame(predicate13, predicate19);
      assertNotSame(predicate13, predicate16);
      assertNotSame(predicate13, predicate20);
      assertNotSame(predicate13, predicate8);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate19, predicate16);
      assertNotSame(predicate19, predicate13);
      assertNotSame(predicate19, predicate8);
      assertNotSame(predicate19, predicate14);
      assertNotSame(predicate19, predicate5);
      assertNotSame(predicate19, predicate12);
      assertNotSame(predicate19, predicate3);
      assertNotSame(predicate19, predicate20);
      assertNotSame(predicate20, predicate13);
      assertNotSame(predicate20, predicate8);
      assertNotSame(predicate20, predicate14);
      assertNotSame(predicate20, predicate5);
      assertNotSame(predicate20, predicate12);
      assertNotSame(predicate20, predicate3);
      assertNotSame(predicate20, predicate16);
      assertNotSame(predicate20, predicate19);
      assertNotSame(predicate21, predicate11);
      assertNotSame(predicate8, predicate14);
      assertNotSame(predicate8, predicate5);
      assertNotSame(predicate8, predicate16);
      assertNotSame(predicate8, predicate19);
      assertNotSame(predicate8, predicate3);
      assertNotSame(predicate8, predicate13);
      assertNotSame(predicate8, predicate12);
      assertNotSame(predicate8, predicate20);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate12.equals((Object)predicate5));
      assertFalse(predicate12.equals((Object)predicate3));
      assertFalse(predicate12.equals((Object)predicate8));
      assertFalse(predicate12.equals((Object)predicate1));
      assertFalse(predicate12.equals((Object)predicate4));
      assertFalse(predicate12.equals((Object)predicate11));
      assertFalse(predicate12.equals((Object)predicate13));
      assertFalse(predicate12.equals((Object)predicate16));
      assertFalse(predicate12.equals((Object)predicate19));
      assertFalse(predicate12.equals((Object)predicate15));
      assertFalse(predicate12.equals((Object)predicate14));
      assertFalse(predicate12.equals((Object)predicate18));
      assertFalse(predicate12.equals((Object)predicate20));
      assertFalse(predicate12.equals((Object)predicate2));
      assertFalse(predicate12.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate16));
      assertFalse(predicate19.equals((Object)predicate18));
      assertFalse(predicate19.equals((Object)predicate8));
      assertFalse(predicate19.equals((Object)predicate13));
      assertFalse(predicate19.equals((Object)predicate4));
      assertFalse(predicate19.equals((Object)predicate14));
      assertFalse(predicate19.equals((Object)predicate5));
      assertFalse(predicate19.equals((Object)predicate15));
      assertFalse(predicate19.equals((Object)predicate12));
      assertFalse(predicate19.equals((Object)predicate20));
      assertFalse(predicate19.equals((Object)predicate2));
      assertFalse(predicate19.equals((Object)predicate0));
      assertFalse(predicate19.equals((Object)predicate1));
      assertFalse(predicate19.equals((Object)predicate11));
      assertFalse(predicate19.equals((Object)predicate3));
      assertFalse(predicate20.equals((Object)predicate11));
      assertFalse(predicate20.equals((Object)predicate1));
      assertFalse(predicate20.equals((Object)predicate3));
      assertFalse(predicate20.equals((Object)predicate16));
      assertFalse(predicate20.equals((Object)predicate19));
      assertFalse(predicate20.equals((Object)predicate13));
      assertFalse(predicate20.equals((Object)predicate18));
      assertFalse(predicate20.equals((Object)predicate15));
      assertFalse(predicate20.equals((Object)predicate4));
      assertFalse(predicate20.equals((Object)predicate8));
      assertFalse(predicate20.equals((Object)predicate14));
      assertFalse(predicate20.equals((Object)predicate0));
      assertFalse(predicate20.equals((Object)predicate5));
      assertFalse(predicate20.equals((Object)predicate12));
      assertFalse(predicate20.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate15));
      assertFalse(predicate21.equals((Object)predicate14));
      assertFalse(predicate21.equals((Object)predicate18));
      assertFalse(predicate21.equals((Object)predicate20));
      assertFalse(predicate21.equals((Object)predicate0));
      assertFalse(predicate21.equals((Object)predicate2));
      assertFalse(predicate21.equals((Object)predicate5));
      assertFalse(predicate21.equals((Object)predicate3));
      assertFalse(predicate21.equals((Object)predicate12));
      assertFalse(predicate21.equals((Object)predicate4));
      assertFalse(predicate21.equals((Object)predicate1));
      assertFalse(predicate21.equals((Object)predicate13));
      assertFalse(predicate21.equals((Object)predicate11));
      assertFalse(predicate21.equals((Object)predicate8));
      assertFalse(predicate21.equals((Object)predicate16));
      assertFalse(predicate21.equals((Object)predicate19));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate18));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate20));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate16));
      assertFalse(predicate8.equals((Object)predicate19));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate13));
      
      Predicate<Object> predicate22 = predicate6.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate22);
      assertNotSame(predicate22, predicate9);
      assertNotSame(predicate22, predicate17);
      assertNotSame(predicate22, predicate7);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate22.equals((Object)predicate9));
      assertFalse(predicate22.equals((Object)predicate17));
      assertFalse(predicate22.equals((Object)predicate6));
      assertFalse(predicate22.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      
      Predicate<byte[][]> predicate23 = predicate16.or(predicate6);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate23);
      assertNotSame(predicate15, predicate1);
      assertNotSame(predicate15, predicate4);
      assertNotSame(predicate15, predicate18);
      assertNotSame(predicate15, predicate2);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate16, predicate3);
      assertNotSame(predicate16, predicate12);
      assertNotSame(predicate16, predicate5);
      assertNotSame(predicate16, predicate20);
      assertNotSame(predicate16, predicate19);
      assertNotSame(predicate16, predicate13);
      assertNotSame(predicate16, predicate8);
      assertNotSame(predicate16, predicate14);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate23, predicate21);
      assertNotSame(predicate23, predicate11);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate13));
      assertFalse(predicate15.equals((Object)predicate4));
      assertFalse(predicate15.equals((Object)predicate8));
      assertFalse(predicate15.equals((Object)predicate18));
      assertFalse(predicate15.equals((Object)predicate12));
      assertFalse(predicate15.equals((Object)predicate5));
      assertFalse(predicate15.equals((Object)predicate2));
      assertFalse(predicate15.equals((Object)predicate0));
      assertFalse(predicate15.equals((Object)predicate20));
      assertFalse(predicate15.equals((Object)predicate21));
      assertFalse(predicate15.equals((Object)predicate1));
      assertFalse(predicate15.equals((Object)predicate14));
      assertFalse(predicate15.equals((Object)predicate11));
      assertFalse(predicate15.equals((Object)predicate3));
      assertFalse(predicate15.equals((Object)predicate16));
      assertFalse(predicate15.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate16.equals((Object)predicate15));
      assertFalse(predicate16.equals((Object)predicate11));
      assertFalse(predicate16.equals((Object)predicate1));
      assertFalse(predicate16.equals((Object)predicate4));
      assertFalse(predicate16.equals((Object)predicate8));
      assertFalse(predicate16.equals((Object)predicate3));
      assertFalse(predicate16.equals((Object)predicate12));
      assertFalse(predicate16.equals((Object)predicate5));
      assertFalse(predicate16.equals((Object)predicate21));
      assertFalse(predicate16.equals((Object)predicate20));
      assertFalse(predicate16.equals((Object)predicate0));
      assertFalse(predicate16.equals((Object)predicate19));
      assertFalse(predicate16.equals((Object)predicate2));
      assertFalse(predicate16.equals((Object)predicate18));
      assertFalse(predicate16.equals((Object)predicate13));
      assertFalse(predicate16.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate6.equals((Object)predicate22));
      assertFalse(predicate6.equals((Object)predicate7));
      assertFalse(predicate6.equals((Object)predicate9));
      assertFalse(predicate6.equals((Object)predicate17));
      assertFalse(predicate23.equals((Object)predicate16));
      assertFalse(predicate23.equals((Object)predicate4));
      assertFalse(predicate23.equals((Object)predicate8));
      assertFalse(predicate23.equals((Object)predicate21));
      assertFalse(predicate23.equals((Object)predicate2));
      assertFalse(predicate23.equals((Object)predicate11));
      assertFalse(predicate23.equals((Object)predicate20));
      assertFalse(predicate23.equals((Object)predicate1));
      assertFalse(predicate23.equals((Object)predicate12));
      assertFalse(predicate23.equals((Object)predicate3));
      assertFalse(predicate23.equals((Object)predicate19));
      assertFalse(predicate23.equals((Object)predicate5));
      assertFalse(predicate23.equals((Object)predicate0));
      assertFalse(predicate23.equals((Object)predicate18));
      assertFalse(predicate23.equals((Object)predicate15));
      assertFalse(predicate23.equals((Object)predicate14));
      assertFalse(predicate23.equals((Object)predicate13));
      
      Predicate<byte[][]> predicate24 = predicate5.or(predicate14);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate24);
      assertNotSame(predicate14, predicate20);
      assertNotSame(predicate14, predicate8);
      assertNotSame(predicate14, predicate5);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate14, predicate19);
      assertNotSame(predicate14, predicate12);
      assertNotSame(predicate14, predicate3);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate5, predicate20);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate5, predicate8);
      assertNotSame(predicate5, predicate13);
      assertNotSame(predicate5, predicate12);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate14);
      assertNotSame(predicate24, predicate21);
      assertNotSame(predicate24, predicate11);
      assertNotSame(predicate24, predicate23);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate19));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate23));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate24.equals((Object)predicate15));
      assertFalse(predicate24.equals((Object)predicate11));
      assertFalse(predicate24.equals((Object)predicate1));
      assertFalse(predicate24.equals((Object)predicate14));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate19));
      assertFalse(predicate24.equals((Object)predicate3));
      assertFalse(predicate24.equals((Object)predicate4));
      assertFalse(predicate24.equals((Object)predicate8));
      assertFalse(predicate24.equals((Object)predicate21));
      assertFalse(predicate24.equals((Object)predicate2));
      assertFalse(predicate24.equals((Object)predicate0));
      assertFalse(predicate24.equals((Object)predicate13));
      assertFalse(predicate24.equals((Object)predicate5));
      assertFalse(predicate24.equals((Object)predicate18));
      assertFalse(predicate24.equals((Object)predicate23));
      assertFalse(predicate24.equals((Object)predicate12));
      assertFalse(predicate24.equals((Object)predicate20));
      
      Predicate<byte[][]> predicate25 = predicate13.or(predicate1);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate25);
      assertNotSame(predicate13, predicate12);
      assertNotSame(predicate13, predicate5);
      assertNotSame(predicate13, predicate3);
      assertNotSame(predicate13, predicate19);
      assertNotSame(predicate13, predicate16);
      assertNotSame(predicate13, predicate20);
      assertNotSame(predicate13, predicate8);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate8, predicate14);
      assertNotSame(predicate8, predicate5);
      assertNotSame(predicate8, predicate16);
      assertNotSame(predicate8, predicate19);
      assertNotSame(predicate8, predicate3);
      assertNotSame(predicate8, predicate13);
      assertNotSame(predicate8, predicate12);
      assertNotSame(predicate8, predicate20);
      assertNotSame(predicate25, predicate21);
      assertNotSame(predicate25, predicate24);
      assertNotSame(predicate25, predicate23);
      assertNotSame(predicate25, predicate11);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate21));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate24));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate23));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate24));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate23));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate18));
      assertFalse(predicate8.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate21));
      assertFalse(predicate8.equals((Object)predicate20));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate16));
      assertFalse(predicate8.equals((Object)predicate19));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate24));
      assertFalse(predicate25.equals((Object)predicate2));
      assertFalse(predicate25.equals((Object)predicate8));
      assertFalse(predicate25.equals((Object)predicate21));
      assertFalse(predicate25.equals((Object)predicate4));
      assertFalse(predicate25.equals((Object)predicate0));
      assertFalse(predicate25.equals((Object)predicate12));
      assertFalse(predicate25.equals((Object)predicate13));
      assertFalse(predicate25.equals((Object)predicate20));
      assertFalse(predicate25.equals((Object)predicate3));
      assertFalse(predicate25.equals((Object)predicate23));
      assertFalse(predicate25.equals((Object)predicate16));
      assertFalse(predicate25.equals((Object)predicate1));
      assertFalse(predicate25.equals((Object)predicate11));
      assertFalse(predicate25.equals((Object)predicate14));
      assertFalse(predicate25.equals((Object)predicate19));
      assertFalse(predicate25.equals((Object)predicate24));
      assertFalse(predicate25.equals((Object)predicate18));
      assertFalse(predicate25.equals((Object)predicate15));
      assertFalse(predicate25.equals((Object)predicate5));
      
      Predicate<byte[][]> predicate26 = predicate8.or(predicate2);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate26);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate8, predicate14);
      assertNotSame(predicate8, predicate5);
      assertNotSame(predicate8, predicate16);
      assertNotSame(predicate8, predicate19);
      assertNotSame(predicate8, predicate3);
      assertNotSame(predicate8, predicate13);
      assertNotSame(predicate8, predicate12);
      assertNotSame(predicate8, predicate20);
      assertNotSame(predicate26, predicate25);
      assertNotSame(predicate26, predicate21);
      assertNotSame(predicate26, predicate11);
      assertNotSame(predicate26, predicate24);
      assertNotSame(predicate26, predicate23);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate24));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate25));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate23));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate25));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate18));
      assertFalse(predicate8.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate21));
      assertFalse(predicate8.equals((Object)predicate20));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate16));
      assertFalse(predicate8.equals((Object)predicate19));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate24));
      assertFalse(predicate26.equals((Object)predicate15));
      assertFalse(predicate26.equals((Object)predicate14));
      assertFalse(predicate26.equals((Object)predicate19));
      assertFalse(predicate26.equals((Object)predicate16));
      assertFalse(predicate26.equals((Object)predicate18));
      assertFalse(predicate26.equals((Object)predicate13));
      assertFalse(predicate26.equals((Object)predicate24));
      assertFalse(predicate26.equals((Object)predicate5));
      assertFalse(predicate26.equals((Object)predicate3));
      assertFalse(predicate26.equals((Object)predicate21));
      assertFalse(predicate26.equals((Object)predicate25));
      assertFalse(predicate26.equals((Object)predicate2));
      assertFalse(predicate26.equals((Object)predicate0));
      assertFalse(predicate26.equals((Object)predicate1));
      assertFalse(predicate26.equals((Object)predicate11));
      assertFalse(predicate26.equals((Object)predicate20));
      assertFalse(predicate26.equals((Object)predicate4));
      assertFalse(predicate26.equals((Object)predicate8));
      assertFalse(predicate26.equals((Object)predicate12));
      assertFalse(predicate26.equals((Object)predicate23));
      
      Predicate<byte[][]> predicate27 = predicate24.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate27);
      assertNotSame(predicate14, predicate20);
      assertNotSame(predicate14, predicate8);
      assertNotSame(predicate14, predicate5);
      assertNotSame(predicate14, predicate16);
      assertNotSame(predicate14, predicate19);
      assertNotSame(predicate14, predicate27);
      assertNotSame(predicate14, predicate12);
      assertNotSame(predicate14, predicate3);
      assertNotSame(predicate14, predicate13);
      assertNotSame(predicate5, predicate20);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate5, predicate8);
      assertNotSame(predicate5, predicate13);
      assertNotSame(predicate5, predicate12);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate14);
      assertNotSame(predicate5, predicate27);
      assertNotSame(predicate24, predicate25);
      assertNotSame(predicate24, predicate21);
      assertNotSame(predicate24, predicate11);
      assertNotSame(predicate24, predicate26);
      assertNotSame(predicate24, predicate23);
      assertNotSame(predicate27, predicate12);
      assertNotSame(predicate27, predicate3);
      assertNotSame(predicate27, predicate14);
      assertNotSame(predicate27, predicate20);
      assertNotSame(predicate27, predicate13);
      assertNotSame(predicate27, predicate8);
      assertNotSame(predicate27, predicate16);
      assertNotSame(predicate27, predicate19);
      assertNotSame(predicate27, predicate5);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate14.equals((Object)predicate15));
      assertFalse(predicate14.equals((Object)predicate16));
      assertFalse(predicate14.equals((Object)predicate19));
      assertFalse(predicate14.equals((Object)predicate18));
      assertFalse(predicate14.equals((Object)predicate24));
      assertFalse(predicate14.equals((Object)predicate3));
      assertFalse(predicate14.equals((Object)predicate13));
      assertFalse(predicate14.equals((Object)predicate4));
      assertFalse(predicate14.equals((Object)predicate0));
      assertFalse(predicate14.equals((Object)predicate2));
      assertFalse(predicate14.equals((Object)predicate25));
      assertFalse(predicate14.equals((Object)predicate8));
      assertFalse(predicate14.equals((Object)predicate21));
      assertFalse(predicate14.equals((Object)predicate20));
      assertFalse(predicate14.equals((Object)predicate26));
      assertFalse(predicate14.equals((Object)predicate5));
      assertFalse(predicate14.equals((Object)predicate23));
      assertFalse(predicate14.equals((Object)predicate11));
      assertFalse(predicate14.equals((Object)predicate12));
      assertFalse(predicate14.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate26));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate24));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate25));
      assertFalse(predicate24.equals((Object)predicate15));
      assertFalse(predicate24.equals((Object)predicate11));
      assertFalse(predicate24.equals((Object)predicate1));
      assertFalse(predicate24.equals((Object)predicate14));
      assertFalse(predicate24.equals((Object)predicate26));
      assertFalse(predicate24.equals((Object)predicate16));
      assertFalse(predicate24.equals((Object)predicate19));
      assertFalse(predicate24.equals((Object)predicate3));
      assertFalse(predicate24.equals((Object)predicate4));
      assertFalse(predicate24.equals((Object)predicate8));
      assertFalse(predicate24.equals((Object)predicate21));
      assertFalse(predicate24.equals((Object)predicate25));
      assertFalse(predicate24.equals((Object)predicate2));
      assertFalse(predicate24.equals((Object)predicate0));
      assertFalse(predicate24.equals((Object)predicate13));
      assertFalse(predicate24.equals((Object)predicate5));
      assertFalse(predicate24.equals((Object)predicate18));
      assertFalse(predicate24.equals((Object)predicate23));
      assertFalse(predicate24.equals((Object)predicate12));
      assertFalse(predicate24.equals((Object)predicate20));
      assertFalse(predicate27.equals((Object)predicate14));
      assertFalse(predicate27.equals((Object)predicate15));
      assertFalse(predicate27.equals((Object)predicate8));
      assertFalse(predicate27.equals((Object)predicate13));
      assertFalse(predicate27.equals((Object)predicate24));
      assertFalse(predicate27.equals((Object)predicate11));
      assertFalse(predicate27.equals((Object)predicate16));
      assertFalse(predicate27.equals((Object)predicate19));
      assertFalse(predicate27.equals((Object)predicate26));
      assertFalse(predicate27.equals((Object)predicate12));
      assertFalse(predicate27.equals((Object)predicate3));
      assertFalse(predicate27.equals((Object)predicate23));
      assertFalse(predicate27.equals((Object)predicate1));
      assertFalse(predicate27.equals((Object)predicate4));
      assertFalse(predicate27.equals((Object)predicate20));
      assertFalse(predicate27.equals((Object)predicate21));
      assertFalse(predicate27.equals((Object)predicate18));
      assertFalse(predicate27.equals((Object)predicate5));
      assertFalse(predicate27.equals((Object)predicate2));
      assertFalse(predicate27.equals((Object)predicate0));
      assertFalse(predicate27.equals((Object)predicate25));
      
      Predicate<byte[][]> predicate28 = predicate0.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate28);
      assertNotSame(predicate28, predicate19);
      assertNotSame(predicate28, predicate16);
      assertNotSame(predicate28, predicate8);
      assertNotSame(predicate28, predicate27);
      assertNotSame(predicate28, predicate5);
      assertNotSame(predicate28, predicate14);
      assertNotSame(predicate28, predicate20);
      assertNotSame(predicate28, predicate13);
      assertNotSame(predicate28, predicate12);
      assertNotSame(predicate28, predicate3);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate28.equals((Object)predicate18));
      assertFalse(predicate28.equals((Object)predicate16));
      assertFalse(predicate28.equals((Object)predicate8));
      assertFalse(predicate28.equals((Object)predicate27));
      assertFalse(predicate28.equals((Object)predicate15));
      assertFalse(predicate28.equals((Object)predicate14));
      assertFalse(predicate28.equals((Object)predicate13));
      assertFalse(predicate28.equals((Object)predicate24));
      assertFalse(predicate28.equals((Object)predicate3));
      assertFalse(predicate28.equals((Object)predicate1));
      assertFalse(predicate28.equals((Object)predicate19));
      assertFalse(predicate28.equals((Object)predicate11));
      assertFalse(predicate28.equals((Object)predicate26));
      assertFalse(predicate28.equals((Object)predicate5));
      assertFalse(predicate28.equals((Object)predicate4));
      assertFalse(predicate28.equals((Object)predicate0));
      assertFalse(predicate28.equals((Object)predicate2));
      assertFalse(predicate28.equals((Object)predicate25));
      assertFalse(predicate28.equals((Object)predicate21));
      assertFalse(predicate28.equals((Object)predicate20));
      assertFalse(predicate28.equals((Object)predicate12));
      assertFalse(predicate28.equals((Object)predicate23));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate23));
      
      Predicate<byte[][]> predicate29 = predicate13.and(predicate5);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate29);
      assertNotSame(predicate29, predicate18);
      assertNotSame(predicate29, predicate1);
      assertNotSame(predicate29, predicate4);
      assertNotSame(predicate29, predicate15);
      assertNotSame(predicate29, predicate2);
      assertNotSame(predicate13, predicate12);
      assertNotSame(predicate13, predicate28);
      assertNotSame(predicate13, predicate5);
      assertNotSame(predicate13, predicate3);
      assertNotSame(predicate13, predicate19);
      assertNotSame(predicate13, predicate16);
      assertNotSame(predicate13, predicate20);
      assertNotSame(predicate13, predicate8);
      assertNotSame(predicate13, predicate27);
      assertNotSame(predicate13, predicate14);
      assertNotSame(predicate1, predicate2);
      assertNotSame(predicate1, predicate29);
      assertNotSame(predicate1, predicate18);
      assertNotSame(predicate1, predicate15);
      assertNotSame(predicate1, predicate4);
      assertNotSame(predicate2, predicate15);
      assertNotSame(predicate2, predicate4);
      assertNotSame(predicate2, predicate29);
      assertNotSame(predicate2, predicate1);
      assertNotSame(predicate2, predicate18);
      assertNotSame(predicate5, predicate20);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate5, predicate8);
      assertNotSame(predicate5, predicate13);
      assertNotSame(predicate5, predicate12);
      assertNotSame(predicate5, predicate28);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate14);
      assertNotSame(predicate5, predicate27);
      assertNotSame(predicate8, predicate14);
      assertNotSame(predicate8, predicate5);
      assertNotSame(predicate8, predicate28);
      assertNotSame(predicate8, predicate27);
      assertNotSame(predicate8, predicate16);
      assertNotSame(predicate8, predicate19);
      assertNotSame(predicate8, predicate3);
      assertNotSame(predicate8, predicate13);
      assertNotSame(predicate8, predicate12);
      assertNotSame(predicate8, predicate20);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate29.equals((Object)predicate24));
      assertFalse(predicate29.equals((Object)predicate11));
      assertFalse(predicate29.equals((Object)predicate19));
      assertFalse(predicate29.equals((Object)predicate14));
      assertFalse(predicate29.equals((Object)predicate23));
      assertFalse(predicate29.equals((Object)predicate1));
      assertFalse(predicate29.equals((Object)predicate12));
      assertFalse(predicate29.equals((Object)predicate15));
      assertFalse(predicate29.equals((Object)predicate0));
      assertFalse(predicate29.equals((Object)predicate2));
      assertFalse(predicate29.equals((Object)predicate25));
      assertFalse(predicate29.equals((Object)predicate5));
      assertFalse(predicate29.equals((Object)predicate13));
      assertFalse(predicate29.equals((Object)predicate8));
      assertFalse(predicate29.equals((Object)predicate21));
      assertFalse(predicate29.equals((Object)predicate20));
      assertFalse(predicate29.equals((Object)predicate18));
      assertFalse(predicate29.equals((Object)predicate4));
      assertFalse(predicate29.equals((Object)predicate28));
      assertFalse(predicate29.equals((Object)predicate3));
      assertFalse(predicate29.equals((Object)predicate27));
      assertFalse(predicate29.equals((Object)predicate16));
      assertFalse(predicate29.equals((Object)predicate26));
      assertFalse(predicate13.equals((Object)predicate12));
      assertFalse(predicate13.equals((Object)predicate5));
      assertFalse(predicate13.equals((Object)predicate3));
      assertFalse(predicate13.equals((Object)predicate21));
      assertFalse(predicate13.equals((Object)predicate19));
      assertFalse(predicate13.equals((Object)predicate26));
      assertFalse(predicate13.equals((Object)predicate0));
      assertFalse(predicate13.equals((Object)predicate2));
      assertFalse(predicate13.equals((Object)predicate25));
      assertFalse(predicate13.equals((Object)predicate24));
      assertFalse(predicate13.equals((Object)predicate18));
      assertFalse(predicate13.equals((Object)predicate15));
      assertFalse(predicate13.equals((Object)predicate14));
      assertFalse(predicate13.equals((Object)predicate28));
      assertFalse(predicate13.equals((Object)predicate16));
      assertFalse(predicate13.equals((Object)predicate11));
      assertFalse(predicate13.equals((Object)predicate20));
      assertFalse(predicate13.equals((Object)predicate23));
      assertFalse(predicate13.equals((Object)predicate8));
      assertFalse(predicate13.equals((Object)predicate27));
      assertFalse(predicate13.equals((Object)predicate1));
      assertFalse(predicate13.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate28));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate27));
      assertFalse(predicate1.equals((Object)predicate20));
      assertFalse(predicate1.equals((Object)predicate21));
      assertFalse(predicate1.equals((Object)predicate25));
      assertFalse(predicate1.equals((Object)predicate16));
      assertFalse(predicate1.equals((Object)predicate2));
      assertFalse(predicate1.equals((Object)predicate8));
      assertFalse(predicate1.equals((Object)predicate28));
      assertFalse(predicate1.equals((Object)predicate12));
      assertFalse(predicate1.equals((Object)predicate11));
      assertFalse(predicate1.equals((Object)predicate4));
      assertFalse(predicate1.equals((Object)predicate23));
      assertFalse(predicate1.equals((Object)predicate3));
      assertFalse(predicate1.equals((Object)predicate19));
      assertFalse(predicate1.equals((Object)predicate26));
      assertFalse(predicate1.equals((Object)predicate0));
      assertFalse(predicate1.equals((Object)predicate5));
      assertFalse(predicate1.equals((Object)predicate13));
      assertFalse(predicate1.equals((Object)predicate24));
      assertFalse(predicate1.equals((Object)predicate18));
      assertFalse(predicate1.equals((Object)predicate15));
      assertFalse(predicate1.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate15));
      assertFalse(predicate2.equals((Object)predicate14));
      assertFalse(predicate2.equals((Object)predicate28));
      assertFalse(predicate2.equals((Object)predicate24));
      assertFalse(predicate2.equals((Object)predicate18));
      assertFalse(predicate2.equals((Object)predicate5));
      assertFalse(predicate2.equals((Object)predicate8));
      assertFalse(predicate2.equals((Object)predicate21));
      assertFalse(predicate2.equals((Object)predicate4));
      assertFalse(predicate2.equals((Object)predicate0));
      assertFalse(predicate2.equals((Object)predicate25));
      assertFalse(predicate2.equals((Object)predicate12));
      assertFalse(predicate2.equals((Object)predicate20));
      assertFalse(predicate2.equals((Object)predicate13));
      assertFalse(predicate2.equals((Object)predicate3));
      assertFalse(predicate2.equals((Object)predicate23));
      assertFalse(predicate2.equals((Object)predicate27));
      assertFalse(predicate2.equals((Object)predicate1));
      assertFalse(predicate2.equals((Object)predicate16));
      assertFalse(predicate2.equals((Object)predicate19));
      assertFalse(predicate2.equals((Object)predicate26));
      assertFalse(predicate2.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate28));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate27));
      assertFalse(predicate5.equals((Object)predicate26));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate24));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate25));
      assertFalse(predicate8.equals((Object)predicate0));
      assertFalse(predicate8.equals((Object)predicate2));
      assertFalse(predicate8.equals((Object)predicate4));
      assertFalse(predicate8.equals((Object)predicate25));
      assertFalse(predicate8.equals((Object)predicate5));
      assertFalse(predicate8.equals((Object)predicate18));
      assertFalse(predicate8.equals((Object)predicate23));
      assertFalse(predicate8.equals((Object)predicate1));
      assertFalse(predicate8.equals((Object)predicate12));
      assertFalse(predicate8.equals((Object)predicate21));
      assertFalse(predicate8.equals((Object)predicate20));
      assertFalse(predicate8.equals((Object)predicate14));
      assertFalse(predicate8.equals((Object)predicate28));
      assertFalse(predicate8.equals((Object)predicate15));
      assertFalse(predicate8.equals((Object)predicate11));
      assertFalse(predicate8.equals((Object)predicate27));
      assertFalse(predicate8.equals((Object)predicate16));
      assertFalse(predicate8.equals((Object)predicate19));
      assertFalse(predicate8.equals((Object)predicate26));
      assertFalse(predicate8.equals((Object)predicate3));
      assertFalse(predicate8.equals((Object)predicate13));
      assertFalse(predicate8.equals((Object)predicate24));
      
      Predicate<byte[][]> predicate30 = predicate5.negate();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(predicate30);
      assertNotSame(predicate30, predicate16);
      assertNotSame(predicate30, predicate19);
      assertNotSame(predicate30, predicate20);
      assertNotSame(predicate30, predicate27);
      assertNotSame(predicate30, predicate5);
      assertNotSame(predicate30, predicate14);
      assertNotSame(predicate30, predicate8);
      assertNotSame(predicate30, predicate3);
      assertNotSame(predicate30, predicate12);
      assertNotSame(predicate30, predicate28);
      assertNotSame(predicate30, predicate13);
      assertNotSame(predicate5, predicate20);
      assertNotSame(predicate5, predicate16);
      assertNotSame(predicate5, predicate19);
      assertNotSame(predicate5, predicate8);
      assertNotSame(predicate5, predicate30);
      assertNotSame(predicate5, predicate13);
      assertNotSame(predicate5, predicate12);
      assertNotSame(predicate5, predicate28);
      assertNotSame(predicate5, predicate3);
      assertNotSame(predicate5, predicate14);
      assertNotSame(predicate5, predicate27);
      assertEquals(0, linkedList0.size());
      assertFalse(predicate30.equals((Object)predicate1));
      assertFalse(predicate30.equals((Object)predicate19));
      assertFalse(predicate30.equals((Object)predicate11));
      assertFalse(predicate30.equals((Object)predicate26));
      assertFalse(predicate30.equals((Object)predicate15));
      assertFalse(predicate30.equals((Object)predicate5));
      assertFalse(predicate30.equals((Object)predicate14));
      assertFalse(predicate30.equals((Object)predicate3));
      assertFalse(predicate30.equals((Object)predicate24));
      assertFalse(predicate30.equals((Object)predicate13));
      assertFalse(predicate30.equals((Object)predicate16));
      assertFalse(predicate30.equals((Object)predicate27));
      assertFalse(predicate30.equals((Object)predicate20));
      assertFalse(predicate30.equals((Object)predicate18));
      assertFalse(predicate30.equals((Object)predicate2));
      assertFalse(predicate30.equals((Object)predicate25));
      assertFalse(predicate30.equals((Object)predicate0));
      assertFalse(predicate30.equals((Object)predicate8));
      assertFalse(predicate30.equals((Object)predicate21));
      assertFalse(predicate30.equals((Object)predicate4));
      assertFalse(predicate30.equals((Object)predicate28));
      assertFalse(predicate30.equals((Object)predicate23));
      assertFalse(predicate30.equals((Object)predicate29));
      assertFalse(predicate30.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate26));
      assertFalse(predicate0.equals((Object)predicate5));
      assertFalse(predicate0.equals((Object)predicate11));
      assertFalse(predicate0.equals((Object)predicate13));
      assertFalse(predicate0.equals((Object)predicate24));
      assertFalse(predicate0.equals((Object)predicate16));
      assertFalse(predicate0.equals((Object)predicate19));
      assertFalse(predicate0.equals((Object)predicate3));
      assertFalse(predicate0.equals((Object)predicate27));
      assertFalse(predicate0.equals((Object)predicate28));
      assertFalse(predicate0.equals((Object)predicate15));
      assertFalse(predicate0.equals((Object)predicate14));
      assertFalse(predicate0.equals((Object)predicate18));
      assertFalse(predicate0.equals((Object)predicate20));
      assertFalse(predicate0.equals((Object)predicate8));
      assertFalse(predicate0.equals((Object)predicate21));
      assertFalse(predicate0.equals((Object)predicate29));
      assertFalse(predicate0.equals((Object)predicate2));
      assertFalse(predicate0.equals((Object)predicate4));
      assertFalse(predicate0.equals((Object)predicate25));
      assertFalse(predicate0.equals((Object)predicate1));
      assertFalse(predicate0.equals((Object)predicate12));
      assertFalse(predicate0.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate16));
      assertFalse(predicate5.equals((Object)predicate20));
      assertFalse(predicate5.equals((Object)predicate8));
      assertFalse(predicate5.equals((Object)predicate21));
      assertFalse(predicate5.equals((Object)predicate18));
      assertFalse(predicate5.equals((Object)predicate4));
      assertFalse(predicate5.equals((Object)predicate13));
      assertFalse(predicate5.equals((Object)predicate28));
      assertFalse(predicate5.equals((Object)predicate3));
      assertFalse(predicate5.equals((Object)predicate27));
      assertFalse(predicate5.equals((Object)predicate26));
      assertFalse(predicate5.equals((Object)predicate29));
      assertFalse(predicate5.equals((Object)predicate19));
      assertFalse(predicate5.equals((Object)predicate11));
      assertFalse(predicate5.equals((Object)predicate23));
      assertFalse(predicate5.equals((Object)predicate1));
      assertFalse(predicate5.equals((Object)predicate24));
      assertFalse(predicate5.equals((Object)predicate12));
      assertFalse(predicate5.equals((Object)predicate14));
      assertFalse(predicate5.equals((Object)predicate15));
      assertFalse(predicate5.equals((Object)predicate2));
      assertFalse(predicate5.equals((Object)predicate0));
      assertFalse(predicate5.equals((Object)predicate25));
      
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(fBResultSet0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      
      boolean boolean1 = fBCachedFetcher0.relative(2435);
      assertEquals(0, xSQLVARArray0.length);
      assertFalse(linkedList0.contains(byteArray0));
      assertFalse(boolean1);
      assertEquals(0, linkedList0.size());
      assertFalse(fBResultSet0.isClosed());
      assertEquals(1007, fBResultSet0.getConcurrency());
      assertEquals(0, fBResultSet0.getFetchSize());
      assertNull(fBResultSet0.getCursorName());
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1000, fBResultSet0.getFetchDirection());
      assertEquals(2, fBResultSet0.getHoldability());
      assertEquals(1003, fBResultSet0.getType());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(fBCachedFetcher0.isFirst());
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      assertNotNull(javaGDSImpl0);
      
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      assertNotNull(databaseParameterBufferImp0);
      
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
      assertNotNull(fBConnectionRequestInfo0);
      
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      assertNotNull(isc_stmt_handle_impl0);
      assertFalse(isc_stmt_handle_impl0.hasOpenResultSet());
      assertEquals(0, isc_stmt_handle_impl0.getInsertCount());
      assertEquals(0, isc_stmt_handle_impl0.getStatementType());
      assertFalse(isc_stmt_handle_impl0.isAllRowsFetched());
      assertEquals(0, isc_stmt_handle_impl0.getDeleteCount());
      assertEquals(0, isc_stmt_handle_impl0.getRsr_id());
      assertFalse(isc_stmt_handle_impl0.isSingletonResult());
      assertFalse(isc_stmt_handle_impl0.isValid());
      assertEquals(0, isc_stmt_handle_impl0.getUpdateCount());
      assertNull(isc_stmt_handle_impl0.getExecutionPlan());
      assertEquals(0, isc_stmt_handle_impl0.size());
      assertEquals(0, isc_stmt_handle_impl0.getSelectCount());
      
      byte[][] byteArray0 = new byte[9][8];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(linkedList0.contains(byteArray0));
      assertNotNull(fBCachedFetcher0);
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      fBCachedFetcher0.close();
      assertFalse(linkedList0.contains(byteArray0));
      assertEquals(0, linkedList0.size());
      assertFalse(fBCachedFetcher0.isAfterLast());
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(fBCachedFetcher0.isEmpty());
      assertFalse(fBCachedFetcher0.isFirst());
      assertEquals(0, fBCachedFetcher0.getFetchSize());
      assertEquals(0, fBCachedFetcher0.getRowNum());
      
      int int0 = new Integer(1045);
      assertEquals(1045, int0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9253539308675658
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[7];
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray1[2] = fBBlobField0;
      fBBlobFieldArray1[3] = fBBlobField0;
      fBBlobFieldArray1[4] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[2];
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[12][5];
      byte[] byteArray1 = new byte[7];
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-112);
      byteArray1[4] = (byte) (-22);
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-112);
      byteArray0[0] = byteArray1;
      byteArray1[1] = (byte)90;
      byteArray0[1] = byteArray1;
      linkedList0.parallelStream();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[][] byteArray2 = new byte[9][5];
      byteArray2[0] = byteArray1;
      byteArray2[1] = byteArray1;
      byteArray2[2] = byteArray1;
      byteArray2[3] = byteArray1;
      byteArray2[4] = byteArray1;
      byteArray2[5] = byteArray1;
      byteArray2[6] = byteArray1;
      byteArray2[7] = byteArray1;
      byteArray2[8] = byteArray1;
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, fBConnectionRequestInfo0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      gDSHelper0.getJavaEncoding();
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp1 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp2 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      databaseParameterBufferImp2.deepCopy();
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp3 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][4];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow(byteArray0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.675825284607097
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      LinkedHashSet<JMXPrincipal> linkedHashSet0 = new LinkedHashSet<JMXPrincipal>();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("6*=!L3rgl18CeEpp&O");
      linkedHashSet0.add(jMXPrincipal0);
      linkedHashSet0.add(jMXPrincipal0);
      fBCachedFetcher0.insertRow((byte[][]) null);
      Subject subject0 = new Subject(false, linkedHashSet0, linkedHashSet0, linkedHashSet0);
      Class<byte[][]> class0 = byte[][].class;
      Set<byte[][]> set0 = subject0.getPublicCredentials(class0);
      linkedList0.addAll((Collection<? extends byte[][]>) set0);
      linkedList0.iterator();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      linkedList0.add((byte[][]) null);
      Predicate.isEqual((Object) fBResultSet0);
      linkedList0.add((byte[][]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      linkedList0.poll();
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.insertRow((byte[][]) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      fBCachedFetcher0.isAfterLast();
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.setFetchSize((-41));
      fBCachedFetcher0.isLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.deleteRow();
      assertEquals((-41), fBCachedFetcher0.getFetchSize());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.pollFirst();
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[2] = fBBlobFieldArray0[1];
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      fBBlobFieldArray0[5] = fBBlobFieldArray0[4];
      fBBlobFieldArray0[6] = fBBlobFieldArray0[5];
      fBBlobFieldArray0[7] = fBBlobFieldArray0[6];
      linkedList0.toArray(fBBlobFieldArray0);
      byte[][] byteArray0 = new byte[2][3];
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.0141266108053313
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      FBConnectionRequestInfo fBConnectionRequestInfo0 = new FBConnectionRequestInfo(databaseParameterBufferImp0);
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, fBConnectionRequestInfo0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      gDSHelper0.getJavaEncoding();
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp1 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp2 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      databaseParameterBufferImp2.deepCopy();
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp3 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[8][4];
      byteArray0[0] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[1] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[2] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[3] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[4] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[5] = byteArray0[4];
      byteArray0[6] = gDSHelper0.BLOB_LENGTH_REQUEST;
      byteArray0[7] = gDSHelper0.BLOB_LENGTH_REQUEST;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.updateRow(byteArray0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[7];
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray1[2] = fBBlobField0;
      fBBlobFieldArray1[3] = fBBlobField0;
      fBBlobFieldArray1[4] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[2];
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][5];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-112);
      byteArray1[4] = (byte) (-41);
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-114);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte) (-114);
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte) (-40);
      byteArray2[4] = (byte)90;
      byteArray2[5] = (byte)90;
      byteArray2[6] = (byte)53;
      byteArray2[7] = (byte)90;
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      linkedList0.stream();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[8];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[7];
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobField0;
      fBBlobFieldArray1[2] = fBBlobField0;
      fBBlobFieldArray1[3] = fBBlobField0;
      fBBlobFieldArray1[4] = fBBlobField0;
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[2];
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[2][5];
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-12);
      byteArray1[1] = (byte)90;
      byteArray1[2] = (byte)61;
      byteArray1[3] = (byte) (-112);
      byteArray1[4] = (byte) (-41);
      byteArray1[5] = (byte) (-12);
      byteArray1[6] = (byte) (-114);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte) (-12);
      byteArray2[1] = (byte) (-114);
      byteArray2[2] = (byte)61;
      byteArray2[3] = (byte) (-54);
      byteArray1[1] = (byte)90;
      byteArray2[5] = (byte)90;
      byteArray2[6] = (byte)53;
      byteArray2[1] = (byte)90;
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      linkedList0.stream();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.9913740596968101
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBBlobField[] fBBlobFieldArray0 = new FBBlobField[9];
      FBBlobField fBBlobField0 = mock(FBBlobField.class, new ViolatedAssumptionAnswer());
      fBBlobFieldArray0[0] = fBBlobField0;
      fBBlobFieldArray0[3] = fBBlobFieldArray0[2];
      FBBlobField[] fBBlobFieldArray1 = new FBBlobField[5];
      linkedList0.removeLastOccurrence(fBBlobFieldArray0[3]);
      fBBlobFieldArray1[0] = fBBlobField0;
      fBBlobFieldArray1[1] = fBBlobFieldArray0[3];
      fBBlobFieldArray1[0] = fBBlobFieldArray0[3];
      fBBlobFieldArray1[3] = fBBlobField0;
      byte[][] byteArray0 = new byte[5][4];
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte) (-2);
      byteArray1[1] = (byte)30;
      byteArray1[2] = (byte)120;
      byteArray1[3] = (byte)103;
      byteArray1[4] = (byte)41;
      byteArray1[5] = (byte) (-38);
      byteArray1[6] = (byte) (-111);
      byteArray1[7] = (byte)0;
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[5];
      byteArray2[0] = (byte)41;
      byteArray2[1] = (byte)103;
      byteArray2[2] = (byte) (-38);
      byteArray2[3] = (byte)103;
      byteArray2[4] = (byte) (-112);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte)41;
      byteArray3[1] = (byte) (-2);
      byteArray3[2] = (byte) (-111);
      byteArray3[3] = (byte) (-111);
      byteArray3[4] = (byte)103;
      byteArray3[5] = (byte) (-111);
      byteArray3[6] = (byte)30;
      byteArray3[7] = (byte)41;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[9];
      byteArray4[0] = (byte) (-2);
      byteArray4[1] = (byte) (-111);
      byteArray4[2] = (byte)30;
      byteArray4[3] = (byte)41;
      byteArray4[4] = (byte) (-112);
      byteArray4[5] = (byte)103;
      byteArray4[6] = (byte) (-29);
      byteArray4[7] = (byte) (-111);
      byteArray4[8] = (byte) (-111);
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[4];
      byteArray5[0] = (byte) (-111);
      byteArray5[1] = (byte) (-2);
      byteArray5[2] = (byte)120;
      byteArray5[3] = (byte)103;
      byteArray0[4] = byteArray5;
      linkedList0.addFirst(byteArray0);
      fBBlobFieldArray1[4] = fBBlobField0;
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBBlobField[] fBBlobFieldArray2 = new FBBlobField[6];
      fBBlobFieldArray2[0] = fBBlobField0;
      fBBlobFieldArray2[1] = fBBlobField0;
      fBBlobFieldArray2[2] = fBBlobField0;
      fBBlobFieldArray2[3] = fBBlobField0;
      fBBlobFieldArray2[4] = fBBlobField0;
      fBBlobFieldArray2[5] = fBBlobField0;
      linkedList1.toArray(fBBlobFieldArray2);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute(39);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6036051515160747
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      Predicate<byte[][]> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<byte[][]> predicate1 = predicate0.or(predicate0);
      Predicate<byte[][]> predicate2 = predicate1.and(predicate0);
      Predicate<byte[][]> predicate3 = predicate1.and(predicate2);
      Predicate<byte[][]> predicate4 = predicate0.negate();
      Predicate<byte[][]> predicate5 = predicate0.and(predicate1);
      Predicate<byte[][]> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate1);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<byte[][]> predicate9 = predicate3.negate();
      predicate7.negate();
      Predicate<Object> predicate10 = predicate8.and(predicate7);
      Predicate<byte[][]> predicate11 = predicate4.or(predicate8);
      Predicate.isEqual((Object) predicate0);
      Predicate<byte[][]> predicate12 = predicate1.or(predicate5);
      predicate0.negate();
      predicate6.and(predicate2);
      Predicate<byte[][]> predicate13 = predicate2.and(predicate12);
      Predicate<byte[][]> predicate14 = predicate9.negate();
      Predicate<byte[][]> predicate15 = predicate1.negate();
      predicate13.and(predicate2);
      Predicate<byte[][]> predicate16 = predicate11.and(predicate12);
      predicate10.negate();
      predicate0.test((byte[][]) null);
      predicate16.or(predicate7);
      Predicate<byte[][]> predicate17 = predicate6.or(predicate15);
      predicate9.or(predicate11);
      predicate17.negate();
      predicate11.negate();
      predicate14.and(predicate6);
      predicate6.negate();
      predicate11.negate();
      predicate13.test((byte[][]) null);
      boolean boolean0 = fBCachedFetcher0.last();
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
      assertEquals(0, fBCachedFetcher0.getRowNum());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      databaseParameterBufferImp0.getArgumentAsInt(335544628);
      org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp databaseParameterBufferImp1 = new org.firebirdsql.gds.impl.jni.DatabaseParameterBufferImp();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      databaseParameterBufferImp0.getArgumentAsInt((-2829));
      GDSHelper gDSHelper0 = new GDSHelper(javaGDSImpl0, databaseParameterBufferImp1, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
