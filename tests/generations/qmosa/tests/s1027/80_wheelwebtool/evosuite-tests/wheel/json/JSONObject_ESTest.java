/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 06:55:31 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4582044327855743
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(47);
      Double double0 = new Double(2235.76287651);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.stream();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Long long0 = new Long(1L);
      Short short0 = new Short((short)47);
      JSONObject.quote("");
      Long long1 = new Long(1L);
      JSONObject jSONObject1 = jSONObject0.accumulate("", long1);
      assertEquals(1, jSONObject0.length());
      
      jSONObject1.getInt("");
      jSONObject1.optString("\"\"");
      String[] stringArray0 = JSONObject.getNames(jSONObject1);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.8840633284714168
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      String string0 = "Unclosed comment";
      Integer integer0 = new Integer((-118545668));
      hashMap0.put((JSONArray) null, integer0);
      stringArray0[0] = "Unclosed comment";
      stringArray0[1] = "{";
      stringArray0[2] = "isrotateRight";
      stringArray0[3] = "NAe>cz";
      stringArray0[4] = "getsignum";
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      hashMap1.putAll(hashMap2);
      jSONObject0.put("isvalueOf", (Map) hashMap0);
      jSONObject0.getString("isvalueOf");
      hashMap1.values();
      // Undeclared exception!
      try { 
        jSONObject0.toString(22, (-1349));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.225108238012078
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      hashMap0.clear();
      jSONObject0.append("{}", "$(fr+dE");
      Object object0 = new Object();
      jSONObject0.toString(2345, 1469);
      jSONObject1.isNull("[H");
      jSONObject1.putOpt("to", jSONObject1);
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      String string0 = "b\\V,;/";
      JSONObject jSONObject2 = jSONObject1.put("bV,;/", (Map) hashMap1);
      // Undeclared exception!
      jSONObject2.toString(111, 111);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8817214815477444
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[2] = "QI^yQRX_ EndBFk:";
      stringArray0[2] = "fi_*jhjI6ocQv";
      stringArray0[2] = "fi_*jhjI6ocQv";
      stringArray0[2] = "QI^yQRX_ EndBFk:";
      stringArray0[4] = "u;^EC!\"HF[kU.^$<un!D";
      JSONObject.quote("fi_*jhjI6ocQv");
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.clear();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{28l/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {28l/
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject.getNames((Object) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      linkedList0.stream();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      hashMap0.clear();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1147372957145407
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expcteda ':' afer aBkey", true);
      jSONObject1.accumulate("Expcteda ':' afer aBkey", jSONObject0);
      jSONObject0.getJSONArray("Expcteda ':' afer aBkey");
      Object object0 = JSONObject.NULL;
      jSONObject1.put("sgg+xRL/L0P2", object0);
      // Undeclared exception!
      jSONObject1.toString(42);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0383833401990463
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("getcompare", "getcompare");
      StringWriter stringWriter0 = new StringWriter(55);
      stringWriter0.append('}');
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(55);
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter2 = new StringWriter(55);
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "getcompare");
      StringWriter stringWriter4 = stringWriter3.append('f');
      stringWriter2.append('f');
      StringWriter stringWriter5 = new StringWriter(55);
      stringWriter5.close();
      JSONObject jSONObject2 = new JSONObject(stringWriter4);
      jSONObject2.optDouble("Null pointer");
      StringWriter stringWriter6 = new StringWriter();
      Integer integer0 = new Integer((-561));
      jSONArray1.put(55, (-561));
      String string0 = "8$4jBBq<[YDVUD8=@";
      jSONObject1.put("8$4jBBq<[YDVUD8=@", (-1601));
      jSONObject1.toJSONArray(jSONArray1);
      jSONObject2.optJSONArray("Bjo&");
      try { 
        jSONObject0.getJSONArray("G(<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G(<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.41334063977977
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-1319L));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("{x$}WA", stringArray0);
      jSONObject0.toString();
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject1 = jSONObject0.putOpt("", "{x$}WA");
      JSONObject jSONObject2 = jSONObject1.append("MhEse[", "{x$}WA");
      jSONObject1.get("MhEse[");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject2.put("{x$}WA", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(47);
      StringWriter stringWriter1 = stringWriter0.append('T');
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "MhEse[");
      stringWriter2.close();
      Integer integer0 = new Integer(123);
      StringWriter stringWriter3 = new StringWriter(47);
      Double double0 = new Double(123);
      jSONObject1.putOpt("{z><v", double0);
      Object object2 = JSONObject.NULL;
      jSONObject1.get("{x$}WA");
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4666494095269935
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      JSONObject.valueToString(float0, 1275, 1275);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.putOpt("su", "su");
      StringWriter stringWriter0 = new StringWriter(55);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(55);
      stringWriter1.append('f');
      Writer writer0 = jSONObject0.write(stringWriter1);
      writer0.close();
      jSONObject0.optDouble("4Ipj#\"r>VN,&");
      StringWriter stringWriter2 = new StringWriter(55);
      jSONObject1.optDouble("su");
      jSONObject0.put("getfloatToRawIntBits", 114);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.getLong("getfloatToRawIntBits");
      try { 
        jSONObject0.getJSONArray("true");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"true\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.787860905368237
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter(47);
      stringWriter0.append('f');
      StringWriter stringWriter1 = new StringWriter();
      stringWriter0.flush();
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject0.put("false", (Collection) linkedList0);
      jSONObject0.write(stringWriter1);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2180649339890954
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min(0.0F, 1520.8344F);
      Float float1 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.putOpt("su", "su");
      StringWriter stringWriter0 = new StringWriter(55);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(55);
      stringWriter1.append(';');
      StringWriter stringWriter2 = new StringWriter(';');
      stringWriter1.close();
      Writer writer0 = jSONObject0.write(stringWriter1);
      writer0.close();
      Double double0 = new Double(0.0);
      jSONObject1.put("getclear", (double) 55);
      StringWriter stringWriter3 = new StringWriter(55);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject2 = jSONObject1.put("10&~YNl'", (Map) hashMap0);
      try { 
        jSONObject2.getBoolean("su");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"su\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7894962814468285
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "e]2>OX%xT7Es^";
      stringArray0[1] = "e]2>OX%xT7Es^";
      stringArray0[2] = "A JSONObject text must end with '}'";
      stringArray0[3] = "fo";
      String string0 = "\\u";
      stringArray0[5] = string0;
      stringArray0[6] = "%4KIh";
      stringArray0[7] = "*Mh?=";
      stringArray0[8] = "Rc7;c|YO<-'";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt(stringArray0[4]);
      jSONObject0.optDouble("e]2>OX%xT7Es^", (-0.1576));
      jSONObject0.optDouble("Rc7;c|YO<-'");
      Double double0 = new Double(Double.NaN);
      Double.max((-0.1576), (-0.1576));
      jSONObject0.optString("*Mh?=", "fo");
      try { 
        jSONObject0.putOpt("J+D<>'kL", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.181162835887344
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(111, 111);
      JSONObject.getNames(jSONObject0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(hashMap0, 111, 111);
      hashMap0.clear();
      JSONObject jSONObject3 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject3.put("{}", (Map) hashMap0);
      int int0 = 2;
      jSONObject0.toString(2);
      hashMap0.put((Long) null, jSONObject1);
      jSONObject3.put("{}", false);
      jSONObject0.putOpt("{}", hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(jSONObject1, (-2312), 111);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.139782327675579
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject1 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      jSONObject1.toString((-93), (-93));
      Double double0 = new Double((-93));
      Double.min((-93), 386.7215019);
      JSONObject.getNames((Object) double0);
      jSONObject1.optString("to", "A JSONArray text must start with '['");
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(Double.NaN);
      int int0 = 1275;
      int int1 = 46;
      try { 
        JSONObject.valueToString(float0, 1275, 46);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.143796019089531
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "x`{#@Yszi}9DFCK";
      jSONObject0.optJSONArray("x`{#@Yszi}9DFCK");
      jSONObject0.optLong("x`{#@Yszi}9DFCK");
      JSONObject jSONObject1 = jSONObject0.put("x`{#@Yszi}9DFCK", (-3014.9781));
      String string1 = "tJB";
      int int0 = 40;
      JSONObject jSONObject2 = jSONObject1.put("tJB", 40);
      jSONObject2.optLong("tJB");
      String string2 = "}h+3`;g29nbM2B\"!";
      jSONObject1.optString("}h+3`;g29nbM2B\"!", "}h+3`;g29nbM2B\"!");
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      hashMap1.clear();
      jSONObject1.optString("wc&W}.lA*mT&?fjG};", "wc&W}.lA*mT&?fjG};");
      jSONObject0.optInt("5", 40);
      try { 
        jSONObject1.append("x`{#@Yszi}9DFCK", "}h+3`;g29nbM2B\"!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[x`{#@Yszi}9DFCK] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.8656131068623576
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&>lB,C$6El3s";
      stringArray0[1] = "{x$}WA";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = new Object();
      jSONObject0.isNull("ac");
      Integer integer0 = new Integer((-1971));
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = JSONObject.NULL;
      jSONObject1.putOpt("q|skazQnkrY,2N:$", object1);
      Object object2 = new Object();
      JSONObject jSONObject2 = new JSONObject(object0);
      jSONObject1.opt("q|skazQnkrY,2N:$");
      assertEquals(1, jSONObject1.length());
      
      double double0 = jSONObject0.optDouble("ac", 489.7024380638093);
      assertEquals(489.7024380638093, double0, 0.01);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.4851948114656361
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min(0.0F, 1520.8344F);
      Float float1 = new Float(0.0);
      Integer integer0 = new Integer((-4194));
      JSONObject jSONObject0 = new JSONObject(integer0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", float1);
      int int0 = 55;
      StringWriter stringWriter0 = new StringWriter(34);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(34);
      stringWriter0.append('f');
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5388340843440498
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 97;
      Set<Map.Entry<Long, Object>> set0 = (Set<Map.Entry<Long, Object>>)hashMap0.entrySet();
      JSONObject.valueToString(set0);
      JSONObject.getNames(jSONObject0);
      jSONObject0.put("W$ZE{F|f9", (double) 97);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.616117514322537
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "u";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("u", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      int int0 = (-437);
      JSONObject.valueToString(linkedList0, (-437), 110);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.clear();
      jSONObject1.append("u", "[]");
      Object object0 = new Object();
      JSONArray jSONArray0 = new JSONArray("[]");
      try { 
        jSONArray0.getJSONObject(9);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[9] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("HB8.u_bM", 13);
      Float float0 = new Float(506.69841518294066);
      jSONObject0.remove("HB8.u_bM");
      JSONObject.valueToString(jSONObject0);
      HashMap<Byte, Short> hashMap0 = new HashMap<Byte, Short>();
      JSONObject jSONObject2 = jSONObject1.put("HB8.u_bM", (Map) hashMap0);
      assertSame(jSONObject1, jSONObject2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3638974280224545
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0, 160, 47);
      Boolean boolean0 = Boolean.valueOf(false);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "false";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Double double0 = new Double(160);
      JSONObject jSONObject1 = jSONObject0.putOpt("false", double0);
      StringWriter stringWriter0 = new StringWriter(47);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(160);
      StringWriter stringWriter2 = stringWriter1.append('f');
      jSONObject0.write(stringWriter1);
      stringWriter2.close();
      double double1 = jSONObject1.optDouble("false");
      assertEquals(160.0, double1, 0.01);
      
      StringWriter stringWriter3 = new StringWriter(1275);
      double double2 = jSONObject1.optDouble("java.lang.Float@0000000001");
      assertEquals(Double.NaN, double2, 0.01);
      
      jSONObject1.put("su", 1114);
      JSONArray jSONArray1 = jSONObject1.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      assertEquals((double)double0, (double)double1, 0.01);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3778947911036656
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "{x$}WA";
      String string1 = "&>lB,C$6Eil3s";
      String string2 = "M8$DZ|V\\IYy";
      Long long0 = new Long((-1319L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((Object) "{x$}WA");
      jSONObject0.put("{x$}WA", (-1013));
      jSONObject0.toString();
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject.valueToString("&>lB,C$6Eil3s", (-1013), (-1013));
      JSONObject.quote("java.lang.Long@00000000060");
      JSONObject jSONObject1 = jSONObject0.putOpt("to", "&>lB,C$6Eil3s");
      StringWriter stringWriter0 = new StringWriter();
      jSONObject1.optLong("\"java.lang.Long@00000000060\"", (long) (-1013));
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5247073930301438
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "] i not aBoolean.";
      Long long0 = new Long((-1325L));
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 0.0;
      jSONObject0.put("] i not aBoolean.", 0.0);
      long long1 = (-1L);
      try { 
        jSONObject0.append("] i not aBoolean.", "tf0M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] i not aBoolean.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.091742004336969
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-1319L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      jSONObject0.toString();
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject1 = new JSONObject(double0);
      JSONObject jSONObject2 = jSONObject1.put("gettoString", (Map) null);
      Long long1 = new Long(2103L);
      Object object2 = new Object();
      Object object3 = JSONObject.NULL;
      JSONObject jSONObject3 = jSONObject2.putOpt("[]", object3);
      JSONObject jSONObject4 = new JSONObject("M8$DDZ|VIYy", stringArray0);
      jSONObject4.put("", (double) (-1319L));
      try { 
        jSONObject3.put((String) null, (Object) "{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.739049550717115
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long0 = new Long((-3358L));
      hashMap0.put(long0, long0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 97;
      hashMap0.entrySet();
      JSONObject.valueToString(hashMap0, 97, 97);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.929084001104402
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject1 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      jSONObject0.optInt("M8$DZ|VIYy", (-1013));
      Float float0 = new Float(0.0F);
      Float.min((-1013), 0.0F);
      jSONObject1.putOpt("\"cl~o1n;LZ+GK", float0);
      jSONObject0.put(")\"D+icqW\u0006Jwa#y0D3,", (-29.407712944694));
      Object object1 = JSONObject.NULL;
      jSONObject0.accumulate("isjoin", object1);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8072180062889975
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(111, 111);
      String string0 = "$(frdE";
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(111);
      linkedList0.add(double0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      JSONObject jSONObject1 = jSONObject0.put("$(frdE", (Object) "{}");
      String string1 = "hi";
      jSONObject0.optBoolean("hi", true);
      try { 
        jSONObject1.getLong("$(frdE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$(frdE\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.043129785084379
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "&>lB,C$6El3s";
      Long long0 = new Long((-1319L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      jSONObject0.toString();
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      String string1 = "to";
      JSONObject jSONObject1 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(75);
      JSONObject jSONObject2 = new JSONObject(integer0, stringArray0);
      jSONObject0.has("to");
      jSONObject1.optJSONArray("{x$}WA");
      Integer.sum(75, 75);
      try { 
        jSONObject1.getInt("&>lB,C$6El3s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&>lB,C$6El3s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.684759806567196
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long((-1325L));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 7.751885751940343);
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject0.put("] is not a Boolean.", (Collection) linkedList0);
      jSONObject0.append("] is not a Boolean.", "tf0M");
      Long long1 = new Long((-1L));
      Float float0 = new Float((-1.0F));
      jSONObject1.accumulate("] is not a Boolean.", float0);
      Double double0 = new Double(7.751885751940343);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.clear();
      Float float1 = new Float((double) 22);
      assertNotEquals((float)float1, (float)float0, 0.01F);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.3978291557214435
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 111;
      JSONObject.valueToString(hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(hashMap0, 111, 111);
      hashMap0.clear();
      jSONObject0.append("{}", "$(fr+dE");
      Object object0 = new Object();
      jSONObject0.toString(2345, 1469);
      jSONObject2.isNull("[H");
      String string0 = "to";
      jSONObject2.putOpt("to", jSONObject1);
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      String string1 = "b\\V,;/";
      JSONObject jSONObject3 = jSONObject1.put("bV,;/", (Map) hashMap1);
      try { 
        jSONObject3.getInt("$(fr+dE");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$(fr+dE\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("|\"2,S9S{E}$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of |\"2,S9S{E}$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6686613279901326
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      int int0 = 1275;
      JSONObject.valueToString(float0, 1275, 1275);
      JSONObject jSONObject0 = new JSONObject(float0);
      String string0 = "su";
      jSONObject0.putOpt("su", "su");
      StringWriter stringWriter0 = new StringWriter(1275);
      JSONObject.numberToString(float1);
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) "java.lang.Float@000000001", (-1904), 2357);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0712132693815515
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Float float0 = new Float((-795.04983382));
      Float.min(0.0F, 1520.8344F);
      Float float1 = new Float((-1334.81));
      JSONObject jSONObject1 = new JSONObject(float0);
      jSONObject0.putOpt("su", float0);
      StringWriter stringWriter0 = new StringWriter(55);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(55);
      StringWriter stringWriter2 = stringWriter1.append('0');
      stringWriter0.close();
      jSONObject0.write(stringWriter1);
      StringWriter stringWriter3 = stringWriter2.append((CharSequence) "su");
      stringWriter3.close();
      Double double0 = new Double(0.0F);
      jSONObject1.put("getclear", (double) 55);
      StringWriter stringWriter4 = null;
      try {
        stringWriter4 = new StringWriter((-1420));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.3928523367851
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(hashMap0, 111, 111);
      hashMap0.clear();
      jSONObject0.append("{}", "$(fr+dE");
      Object object0 = new Object();
      jSONObject2.isNull("[H");
      jSONObject2.putOpt("to", jSONObject1);
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      JSONObject jSONObject3 = new JSONObject("{}");
      jSONObject3.toString(111, 111);
      try { 
        jSONObject0.getBoolean("bV,;/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"bV,;/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(111, 111);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(111);
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject(jSONTokener0);
      JSONObject.quote("$(frdE");
      Object object1 = new Object();
      JSONTokener jSONTokener1 = new JSONTokener("$(frdE");
      assertTrue(jSONTokener1.more());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{x$}WA");
      jSONTokener0.skipTo('z');
      jSONTokener0.nextTo("{x$}WA");
      jSONTokener0.syntaxError("{x$}WA");
      jSONTokener0.skipTo('\u0000');
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {x$}WA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.2724250572395603
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      stringArray0[1] = "XA`0>CubW;";
      JSONObject.valueToString("getmin", 5, (-32864431));
      JSONObject jSONObject1 = new JSONObject(long0);
      JSONObject jSONObject2 = jSONObject0.putOpt("su", jSONObject1);
      StringWriter stringWriter0 = new StringWriter(55);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.write(stringWriter0);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "&>lB,C$6El3s");
      jSONObject2.write(stringWriter1);
      stringWriter1.close();
      jSONObject1.write(stringWriter0);
      jSONObject0.optDouble("M8$DZ|VIYy");
      JSONObject jSONObject3 = new JSONObject(stringWriter0, stringArray0);
      String string0 = jSONObject3.optString("getmin");
      assertEquals("", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.5622590391891036
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.optBoolean("<?", false);
      Long.compare(31L, (-1L));
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject.getNames((Object) null);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.stream();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      linkedList2.add((String) null);
      linkedList1.containsAll(linkedList2);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.clear();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      assertEquals(0, linkedList3.size());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8180593275454333
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Long long0 = new Long(31L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      Object object0 = JSONObject.NULL;
      Byte byte0 = new Byte((byte)32);
      JSONObject jSONObject0 = new JSONObject(byte0);
      JSONObject jSONObject1 = jSONObject0.append("EJ", "fi_*jhjI6ocQv");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("fi_*jhjI6ocQv", (Map) null);
      Long long1 = new Long(1017L);
      Long.sum(1L, 1017L);
      jSONObject1.putOpt("M8$DZ|VIYy", (Object) null);
      jSONObject0.put("M8$DZ|VIYy", 0.0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.4142322450532716
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(111, 111);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString(hashMap0, 111, 111);
      jSONObject0.append("{}", "$(fr+dE");
      Object object0 = new Object();
      jSONObject1.isNull("[H");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject0.putOpt("{}", hashMap0);
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(111);
      Float float0 = new Float((-342.0F));
      Float.min((-342.0F), (-342.0F));
      hashMap1.put(integer0, float0);
      jSONObject1.put("$(fr+dE", (Map) hashMap1);
      jSONObject3.optInt("{}");
      jSONObject3.toString(111, (-3587));
      try { 
        jSONObject2.getJSONObject("{\n\"java.lang.String@0000000007\": {},\n\"java.lang.String@0000000003\": []\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000007\\\": {},\\n\\\"java.lang.String@0000000003\\\": []\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.529153811636816
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-1289L));
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject("W>lB,IC$6El3s", stringArray0);
      jSONObject0.toString();
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      jSONObject0.putOpt("to", "W>lB,IC$6El3s");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      Integer integer0 = new Integer(378);
      Float float0 = new Float((-88.5988F));
      Integer integer1 = new Integer(32);
      BiFunction<Integer, Object, Float> biFunction0 = (BiFunction<Integer, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(integer1, biFunction0);
      Integer.max((-3), 34);
      BiFunction<Object, Object, Float> biFunction1 = (BiFunction<Object, Object, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap1.merge(integer0, float0, biFunction1);
      hashMap0.putAll(hashMap1);
      JSONObject jSONObject1 = jSONObject0.put("M8$DZ1V]IYy", (Map) hashMap0);
      jSONObject0.getString("to");
      hashMap0.values();
      jSONObject0.toString(35, 22);
      JSONObject jSONObject2 = new JSONObject("{\n                                                         \"java.lang.String@0000000002\": \"java.lang.String@0000000003\",\n                                                         \"java.lang.String@0000000005\": {\"java.lang.Integer@0000000006\": java.lang.Float@0000000007}\n                      }");
      JSONObject.quote("{\n                                                         \"java.lang.String@0000000002\": \"java.lang.String@0000000003\",\n                                                         \"java.lang.String@0000000005\": {\"java.lang.Integer@0000000006\": java.lang.Float@0000000007}\n                      }");
      jSONObject1.accumulate("\"{\n                                                         \"java.lang.String@0000000002\": \"java.lang.String@0000000003\",\n                                                         \"java.lang.String@0000000005\": {\"java.lang.Integer@0000000006\": java.lang.Float@0000000007}\n                      }\"", "\"{\n                                                         \"java.lang.String@0000000002\": \"java.lang.String@0000000003\",\n                                                         \"java.lang.String@0000000005\": {\"java.lang.Integer@0000000006\": java.lang.Float@0000000007}\n                      }\"");
      try { 
        jSONObject0.getInt("Z1i %I>5>keF++~hOq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Z1i %I>5>keF++~hOq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.names();
      Object object1 = JSONObject.NULL;
      Long.valueOf(0L);
      Object object2 = new Object();
      Long long1 = new Long(1L);
      Object object3 = new Object();
      Object object4 = new Object();
      String string0 = "\"I{k\"MCU&";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"I{k\"MCU&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"I{k\"MCU&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      Object object1 = new Object();
      JSONObject.quote("\"L^9+&/5VN?");
      Float float0 = new Float(0.0F);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8651649104676513
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject("h>lB,C$6*cEl3s", stringArray0);
      JSONObject.valueToString("{x$}WA");
      Object object0 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject1 = jSONObject0.putOpt("", "h>lB,C$6*cEl3s");
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9038038195508198
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      JSONObject.valueToString(float0, 1275, 1275);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.containsAll(linkedList0);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.clear();
      Float float2 = new Float(0.0);
      Object object0 = JSONObject.NULL;
      jSONObject0.append("k", object0);
      assertEquals(4, jSONObject0.length());
      
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object1);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3185163434743736
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String string0 = "&>lB,C$6El3s";
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      jSONObject0.put("{x$}WA", (-1013));
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject1 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      jSONObject0.optInt("M8$DZ|VIYy", (-1013));
      Float float0 = new Float(0.0F);
      Float.min((-1013), 0.0F);
      JSONObject jSONObject2 = jSONObject1.putOpt("\"cl~o1n;LZ+GK", float0);
      jSONObject2.toString();
      try { 
        jSONObject1.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.0346160141680394
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{x$}WA", (-1013));
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject2 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      Float float0 = new Float(0.0F);
      Float.min((-1013), 0.0F);
      jSONObject2.putOpt("\"cl~o1n;LZ+GK", float0);
      jSONObject1.put(")\"D+icqW\u0006Jwa#y0D3,", (-29.407712944694));
      Object object2 = JSONObject.NULL;
      Boolean boolean0 = new Boolean("^jHQ4j.m");
      jSONObject0.accumulate(")\"D+icqW\u0006Jwa#y0D3,", boolean0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.146565733505322
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum(2375.71741, 2375.71741);
      jSONObject0.optBoolean((String) null, true);
      jSONObject0.optLong(".", 0L);
      JSONArray jSONArray0 = jSONObject0.names();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      linkedList0.pollLast();
      jSONArray0.put((Collection) linkedList0);
      int int0 = 128;
      jSONArray0.optBoolean(128);
      JSONObject.getNames((Object) double0);
      // Undeclared exception!
      JSONObject.valueToString(jSONArray0, 1253, 1253);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5644110831024673
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optJSONArray("x`{#@Yszi}9DFCK");
      jSONObject0.optLong("x`{#@Yszi}9DFCK");
      JSONObject jSONObject1 = new JSONObject((Object) hashMap0);
      JSONObject.valueToString(hashMap0);
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      hashMap1.clear();
      JSONObject jSONObject2 = jSONObject1.append("x`{#@Yszi}9DFCK", "{}");
      JSONObject jSONObject3 = jSONObject1.put("x`{#@Yszi}9DFCK", (Map) hashMap0);
      JSONObject jSONObject4 = jSONObject2.put("tJB", false);
      Integer integer0 = new Integer(40);
      JSONObject jSONObject5 = jSONObject4.putOpt("}h+3`;g29nbM2B\"!", integer0);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      jSONObject3.put("t`20", (Map) hashMap2);
      JSONObject jSONObject6 = jSONObject3.put("to", 0.0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject6.put("isintBitsToFloat", (Collection) linkedList0);
      JSONObject.getNames(jSONObject5);
      jSONObject1.accumulate("spl", "isintBitsToFloat");
      assertEquals(9, jSONObject1.length());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.9450138944129725
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum(894.8F, 894.8F);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.putOpt("su", "su");
      StringWriter stringWriter0 = new StringWriter(55);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optDouble("E");
      jSONObject1.optInt("*ciF*_0x+UM");
      jSONObject0.remove("*ciF*_0x+UM");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.086486586239504
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{x$}WA", (-1013));
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject2 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      jSONObject0.optInt("M8$DZ|VIYy", (-1013));
      Float float0 = new Float(0.0F);
      Float.min((-1013), 0.0F);
      jSONObject2.putOpt("\"cl~o1n;LZ+GK", float0);
      JSONObject jSONObject3 = jSONObject1.put(")\"D+icqW\u0006Jwa#y0D3,", (-29.407712944694));
      try { 
        jSONObject3.getBoolean("{x$}WA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{x$}WA\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.831045091249595
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "] is not a Boolean.";
      long long0 = (-1325L);
      Long long1 = new Long((-1325L));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("] is not a Boolean.", 0.0);
      String string1 = "getquote";
      Long long2 = new Long((-1L));
      Float float0 = new Float((-1.0F));
      jSONObject1.accumulate("] is not a Boolean.", float0);
      jSONObject0.optDouble((String) null);
      HashMap<Integer, Long> hashMap0 = new HashMap<Integer, Long>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      jSONObject2.optDouble((String) null, 0.0);
      String string2 = "] is not!a number.";
      Integer.getInteger("] is not!a number.");
      try { 
        jSONObject1.accumulate((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.754637556896648
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long long1 = new Long(31L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      stringArray0[1] = "";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[1] = "";
      JSONObject jSONObject1 = new JSONObject("", stringArray0);
      JSONObject.quote("M8$DZ|VIYy");
      Object object0 = new Object();
      jSONObject1.isNull("u;^EC!\"HF[kU$<un!D");
      Boolean.valueOf("{");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.accumulate("sp", jSONArray0);
      JSONObject jSONObject2 = new JSONObject();
      jSONArray0.optJSONObject(5);
      jSONObject0.put("dAM!$O", 97);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.233781426767753
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7h^@/";
      stringArray0[1] = "7h^@/";
      stringArray0[2] = "7h^@/";
      stringArray0[3] = "fo";
      String string0 = "\\u";
      stringArray0[5] = string0;
      stringArray0[6] = "%4KIh";
      stringArray0[7] = "*Mh?=";
      stringArray0[8] = "Rc7;c|YO<-'";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt(stringArray0[4]);
      double double0 = jSONObject0.optDouble("7h^@/", 1.1342484213190207);
      assertEquals(1.1342484213190207, double0, 0.01);
      
      int int0 = jSONObject0.optInt("par");
      assertEquals(0, int0);
      
      long long0 = jSONObject0.optLong("Expected '");
      assertEquals(0L, long0);
      
      String string1 = jSONObject0.toString();
      assertEquals(1, jSONObject0.length());
      assertNotNull(string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.03986048680513
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject();
      Long.compare(31L, (-1L));
      jSONObject0.append("\t", long0);
      String string0 = "$~Q$3Z_Shu*6zSyjF_";
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      jSONObject0.toString();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.7262874008691989
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Long long0 = new Long(0L);
      Long.sum(0L, 1L);
      Long long1 = new Long(0L);
      hashMap0.put(long0, long1);
      JSONObject.valueToString(hashMap0);
      jSONObject0.optJSONObject("$(fr+dE");
      JSONTokener jSONTokener0 = new JSONTokener("$(fr+dE");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5247073930301438
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "] is not a Boolean.";
      Long long0 = new Long((-1325L));
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 0.0;
      jSONObject0.put("] is not a Boolean.", 0.0);
      long long1 = (-1L);
      try { 
        jSONObject0.append("] is not a Boolean.", "tf0M");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a Boolean.] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = null;
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0253262207700673
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = ")+0*jF{Cs&";
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")+0*jF{Cs&";
      int int0 = 9;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble(")+0*jF{Cs&", (-1941.0));
      Integer.getInteger("m5z,\"<qUUgu]>hWcQC");
      JSONObject jSONObject1 = new JSONObject();
      String string1 = "";
      jSONObject1.accumulate("", (Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONObject$Null");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONObject$Null
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0100997593541636
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = JSONObject.doubleToString(1626.28138927071);
      Float.max(1273, (-1.0F));
      Float.max((-1.0F), (-1.0F));
      Integer integer0 = new Integer(20);
      String string1 = JSONObject.numberToString(integer0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7653809497032729
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("08ZE#,bN9d[", (Object) null);
      jSONObject0.keys();
      JSONObject jSONObject2 = new JSONObject((Object) "08ZE#,bN9d[");
      jSONObject2.optDouble("has");
      Object object0 = JSONObject.NULL;
      jSONObject1.putOpt("JSONArray[", object0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.5028385080007016
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "M8$D2|VIYy");
      boolean boolean0 = jSONObject1.isNull(",\n");
      assertTrue(boolean0);
      
      double double1 = jSONObject1.optDouble("M8$D2|VIYy", (double) 0L);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = jSONObject1.optDouble("&>lB,C$6El3s");
      assertEquals(Double.NaN, double2, 0.01);
      
      long long1 = jSONObject1.optLong((String) null, (-996L));
      assertEquals((-996L), long1);
      assertEquals(3, jSONObject1.length());
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate(",\n", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.971535377085187
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject.getNames((Object) hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      linkedList0.stream();
      Long long0 = new Long((-1293L));
      hashMap0.put(long0, long0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(1172.020263657);
      jSONObject0.putOpt("wheel.json.JSONArray", double0);
      Object object0 = new Object();
      Long long1 = new Long(812L);
      JSONObject jSONObject1 = jSONObject0.put("_{D4qT3cM8~Xb", (-607.53178260184));
      jSONObject1.accumulate("wheel.json.JSONArray", "wheel.json.JSONArray");
      jSONObject0.optString("wheel.json.JSONArray");
      try { 
        jSONObject1.getDouble("wheel.json.JSONArray@0000000007");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONArray@0000000007\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7841758925702789
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      jSONObject0.toString(70, 101);
      Long long1 = new Long(31L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      stringArray0[1] = "XA`0>CubW;";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[2] = "XA`0>CubW;";
      stringArray0[4] = "u;^EC!\"HF[kU$<un!D";
      JSONObject.quote("XA`0>CubW;");
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("gettoBinaryString");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of gettoBinaryString
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.556307965166404
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      jSONObject0.optString("{}", "{}");
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject1.put("{}", (Map) hashMap0);
      jSONObject0.toString(1345);
      jSONObject0.keys();
      jSONObject0.putOpt("{}", hashMap0);
      JSONObject jSONObject2 = jSONObject0.put("#-,7:4sm-Zg'Fhym@2", (Map) hashMap0);
      jSONObject2.optInt("{}");
      jSONObject1.optDouble("].DoJB", 0.0);
      JSONObject jSONObject3 = jSONObject0.getJSONObject("#-,7:4sm-Zg'Fhym@2");
      assertNotSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3503272597288656
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float((-2169.667F));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      String string0 = "fl";
      stringArray0[1] = "fl";
      stringArray0[2] = "] is not a number.";
      String string1 = "!";
      stringArray0[3] = "!";
      stringArray0[4] = "tv=GpF";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("A JSONArray text must start with '['", (Collection) null);
      jSONObject0.length();
      JSONObject jSONObject2 = jSONObject0.append("", float0);
      jSONObject2.optDouble("tv=GpF", (-1362.20470045));
      Float float1 = new Float((double) (-2169.667F));
      jSONObject2.putOpt("fl", float1);
      try { 
        jSONObject1.getJSONObject("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("`&P5RP", true);
      assertTrue(boolean0);
      
      double double0 = jSONObject0.optDouble("val", 0.0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.3734685941026814
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "e]2>OX%xT7Es^";
      stringArray0[1] = "e]2>OX%xT7Es^";
      stringArray0[2] = "e]2>OX%xT7Es^";
      stringArray0[3] = "fo";
      String string0 = "\\u";
      stringArray0[5] = string0;
      stringArray0[6] = "%4KIh";
      stringArray0[7] = "*Mh?=";
      stringArray0[8] = "Rc7;c|YO<-'";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt(stringArray0[4]);
      double double0 = jSONObject0.optDouble("e]2>OX%xT7Es^", (-0.1576));
      assertEquals((-0.1576), double0, 0.01);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JdT2qgRm";
      stringArray0[1] = "oclBK_:";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "oclBK_:";
      stringArray0[5] = "";
      stringArray0[7] = "low";
      stringArray0[8] = "oclBK_:";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      long long0 = jSONObject0.optLong("low", (-29L));
      assertEquals((-29L), long0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.368270344546079
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.valueToString(hashMap0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double(111);
      linkedList0.add(double0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString(hashMap0, 111, 111);
      hashMap0.clear();
      JSONObject jSONObject2 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject2.optLong("{}");
      jSONObject0.optJSONObject("{}");
      JSONTokener jSONTokener0 = new JSONTokener("A JSONObject text must end with '}'");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.230926330829633
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("{x$}WA", (-1013));
      Object object1 = new Object();
      jSONObject0.isNull("{x$}WA");
      JSONObject jSONObject2 = jSONObject0.putOpt("to", "&>lB,C$6El3s");
      jSONObject0.optInt("M8$DZ|VIYy", (-1013));
      Float float0 = new Float(0.0F);
      Float.min((-1013), 0.0F);
      jSONObject2.putOpt("\"cl~o1n;LZ+GK", float0);
      JSONObject jSONObject3 = jSONObject1.put(")\"D+icqW\u0006Jwa#y0D3,", (-29.407712944694));
      jSONObject3.optLong("\"cl~o1n;LZ+GK");
      Object object2 = JSONObject.NULL;
      jSONObject1.accumulate("isjoin", object2);
      assertEquals(5, jSONObject1.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4795008699302592
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      try { 
        jSONObject0.getString(";");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8974297895759447
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optInt("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "g%a9mO";
      stringArray0[1] = "";
      JSONObject jSONObject2 = new JSONObject((Object) jSONObject1, stringArray0);
      jSONObject2.isNull("aBUniB");
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject1.getInt(",R|#yzo2xv6H|ev'Tk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",R|#yzo2xv6H|ev'Tk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.7261928332614538
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Long long0 = new Long(31L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      stringArray0[2] = "fi_*jhjI6ocQv";
      stringArray0[2] = "fi_*jhjI6ocQv";
      stringArray0[2] = "fi_*jhjI6ocQv";
      stringArray0[4] = "u;^EC!\"HF[kU$<un!D";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getDouble("u;^EC!\"HF[kU$<un!D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u;^EC!\\\"HF[kU$<un!D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3718061232922234
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expcteda ':' afer aBkey", true);
      try { 
        jSONObject0.getJSONArray("Expcteda ':' afer aBkey");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expcteda ':' afer aBkey\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(0.0);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.4085788142038693
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.names();
      Object object1 = JSONObject.NULL;
      Long long1 = new Long(0L);
      Object object2 = new Object();
      Long long2 = new Long(1L);
      Object object3 = new Object();
      Object object4 = new Object();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("\"I{k\"MCU&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of \"I{k\"MCU&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.0082348908401264
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min(0.0F, 1520.8344F);
      Float float1 = new Float(0.0);
      String string0 = "\\u";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.opt("*Mh?=");
      jSONObject0.optDouble("*Mh?=", 0.0);
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of wheel.json.JSONTokener
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.7160770873198983
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.entrySet();
      JSONObject.valueToString(hashMap0, 97, 97);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONArray0.put(42, (Map) hashMap0);
      jSONArray0.toJSONObject(jSONArray0);
      jSONArray0.put((Map) hashMap0);
      jSONArray0.put(97, (-1283.504));
      JSONObject.valueToString(jSONArray0, 97, (-2312));
      Short short0 = new Short((short) (-1535));
      Short short1 = new Short((short) (-1535));
      assertEquals((short) (-1535), (short)short1);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8173820666020837
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.entrySet();
      JSONObject.valueToString(hashMap0, (-26705495), (-26705495));
      JSONObject.getNames(jSONObject0);
      String string0 = "";
      jSONObject0.put("", (double) (-26705495));
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.2016820191049764
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[14];
      stringArray0[2] = "QI^yQRX_ EndBFk:";
      stringArray0[2] = "fi_*jhjI6ocQv";
      stringArray0[2] = "fi_*jhjI6ocQv";
      stringArray0[2] = "QI^yQRX_ EndBFk:";
      stringArray0[4] = "u;^EC!\"HF[kU.^$<un!D";
      JSONObject.quote("fi_*jhjI6ocQv");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertFalse(jSONObject1.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[6] = "h^~/";
      JSONObject.quote(".@/*\"\"");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.038582971535018
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7h^@/";
      stringArray0[1] = "7h^@/";
      stringArray0[2] = "7h^@/";
      stringArray0[3] = "fo";
      String string0 = "\\u";
      stringArray0[5] = string0;
      stringArray0[6] = "%4KIh";
      stringArray0[7] = "*Mh?=";
      stringArray0[8] = "Rc7;c|YO<-'";
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.opt(stringArray0[4]);
      jSONObject0.optDouble("7h^@/", 1.1342484213190207);
      int int0 = jSONObject0.optInt("par");
      assertEquals(0, int0);
      
      jSONObject0.optLong("Expected '");
      String string1 = jSONObject0.optString("*Mh?=", "7h^@/");
      assertEquals("7h^@/", string1);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.2706817223249798
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter(47);
      Double double0 = new Double(2235.76287651);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.stream();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Long long0 = new Long(1L);
      Short short0 = new Short((short)47);
      Short.toUnsignedLong((short)35);
      jSONObject0.append("", "");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = null;
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1458417525947544
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "";
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, "");
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.6103413146593237
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&>lB,C$6El3s";
      stringArray0[1] = "{x$}WA";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = new Object();
      Object object1 = new Object();
      Long.getLong("cop");
      jSONObject0.putOpt("to", (Object) null);
      Float float0 = new Float((-912.0F));
      Float.min(0.0F, 0.0F);
      Long long1 = new Long(0L);
      JSONObject jSONObject1 = jSONObject0.putOpt("&>lB,C$6El3s", long1);
      try { 
        jSONObject1.getString("]T+$Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"]T+$Z\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.9600951351245586
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HashMap<JSONArray, Integer> hashMap0 = new HashMap<JSONArray, Integer>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      Integer integer0 = new Integer((-118545668));
      hashMap0.put((JSONArray) null, integer0);
      stringArray0[0] = "Unclosed comment";
      stringArray0[1] = "{";
      stringArray0[2] = "isrotateRight";
      stringArray0[3] = "Unclosed comment";
      stringArray0[4] = "ub?tzpYl:gx^&nlh/w";
      stringArray0[6] = "istoString";
      stringArray0[7] = "isrotateRight";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("ub?tzpYl:gx^&nlh/w", 0.0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Float float0 = new Float(2538.197583665);
      String string0 = JSONObject.doubleToString((-2002));
      assertEquals("-2002", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.9512595041439564
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "W>lB,IC$6El3s";
      stringArray0[1] = "M8$DZ1V]IYy";
      JSONObject jSONObject0 = new JSONObject("{x$}WA", stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Collection) linkedList1);
      jSONObject1.length();
      JSONArray jSONArray0 = new JSONArray();
      try { 
        jSONObject1.append((String) null, "{x$}WA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.7424298313620987
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float float0 = new Float((-2169.667F));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "fl";
      stringArray0[1] = "fl";
      stringArray0[3] = "!";
      stringArray0[4] = "tv=GpF";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      jSONObject0.length();
      JSONObject jSONObject1 = jSONObject0.append("", float0);
      jSONObject1.optDouble("tv=GpF", (-1362.20470045));
      jSONObject0.opt("B");
      try { 
        jSONObject1.getJSONObject("!");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.quote(",:]}/\"[{;=#");
      Float float0 = new Float((-1.0F));
      assertEquals((-1.0F), (float)float0, 0.01F);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.424597867201959
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Substring bounds error";
      stringArray0[1] = "Substring bounds error";
      stringArray0[2] = "Substring bounds error";
      stringArray0[3] = "Substring bounds error";
      JSONObject jSONObject0 = new JSONObject("Substring bounds error", stringArray0);
      jSONObject0.optLong("Substring bounds error");
      double double0 = jSONObject0.optDouble("wT5");
      assertEquals(Double.NaN, double0, 0.01);
      
      long long0 = jSONObject0.optLong(",\n");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5229550675313184
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[4];
      stringArray0[0] = "N_FD";
      stringArray0[1] = "getcompare";
      stringArray0[2] = "'";
      stringArray0[3] = "";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.put("N_FD", true);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(0.0);
      int int0 = 1275;
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, 0L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.007485592695356
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "\\xZ4'i,n6!";
      JSONObject jSONObject0 = new JSONObject((Object) "xZ4'i,n6!");
      int int0 = 3;
      jSONObject0.toString(3);
      try { 
        jSONObject0.get("{\n   \"java.lang.String@0000000004\": [\n      java.lang.Byte@0000000030,\n      java.lang.Byte@0000000031,\n      java.lang.Byte@0000000032,\n      java.lang.Byte@0000000033,\n      java.lang.Byte@0000000034,\n      java.lang.Byte@0000000035,\n      java.lang.Byte@0000000036,\n      java.lang.Byte@0000000037,\n      java.lang.Byte@0000000038,\n      java.lang.Byte@0000000039\n   ],\n   \"java.lang.String@0000000027\": \"java.lang.Class@0000000028\",\n   \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n   \\\"java.lang.String@0000000004\\\": [\\n      java.lang.Byte@0000000030,\\n      java.lang.Byte@0000000031,\\n      java.lang.Byte@0000000032,\\n      java.lang.Byte@0000000033,\\n      java.lang.Byte@0000000034,\\n      java.lang.Byte@0000000035,\\n      java.lang.Byte@0000000036,\\n      java.lang.Byte@0000000037,\\n      java.lang.Byte@0000000038,\\n      java.lang.Byte@0000000039\\n   ],\\n   \\\"java.lang.String@0000000027\\\": \\\"java.lang.Class@0000000028\\\",\\n   \\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Z-X%2$Q@:w}$VFa\"0 ";
      stringArray0[4] = "JSON does not allow non-finite numbers.";
      stringArray0[5] = "000";
      stringArray0[6] = "";
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0, 12, (byte) (-118));
      assertNotNull(string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.4077330623087905
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float float1 = new Float(0.0);
      JSONObject jSONObject0 = new JSONObject(float0);
      JSONObject jSONObject1 = jSONObject0.putOpt("getcompare", "getcompare");
      StringWriter stringWriter0 = new StringWriter(55);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(55);
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "getcompare");
      StringWriter stringWriter4 = stringWriter3.append('f');
      stringWriter2.append('f');
      StringWriter stringWriter5 = new StringWriter(55);
      stringWriter5.close();
      JSONObject jSONObject2 = new JSONObject(stringWriter4);
      jSONObject0.toString(55);
      jSONObject2.optDouble("Null pointer");
      StringWriter stringWriter6 = new StringWriter();
      Integer integer0 = new Integer((-561));
      jSONObject1.put("8$4jBBq<[YDVUD8=@", (-1601));
      jSONObject1.toJSONArray(jSONArray1);
      jSONObject2.optLong("A JSONArray text must start with '['");
      try { 
        jSONObject0.getJSONArray("C%(<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C%(<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.1466266442427115
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "&>lB,C$6El3s";
      stringArray0[1] = "{x$}WA";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      Object object0 = new Object();
      jSONObject0.isNull("ac");
      Integer integer0 = new Integer((-1971));
      JSONObject jSONObject1 = new JSONObject();
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.putOpt("q|skazQnkrY,2N:$", object1);
      JSONObject.valueToString(jSONObject2, (-1971), 4);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      jSONObject2.put("{x$}WA", (Map) hashMap0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      assertEquals(1, jSONObject0.length());
      
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$D2|VIYy";
      stringArray0[1] = "";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[3] = "";
      stringArray0[4] = "u;^EC!\"HF[kU$<un!D";
      Float.sum(0L, 0.0F);
      String string0 = JSONObject.valueToString((Object) null, 102, 102);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      short short0 = (short)1664;
      Short.toUnsignedInt((short)6581);
      Short.compare((short)1985, (short)1985);
      Short.toUnsignedLong((short)1664);
      short short1 = (short)120;
      Short.compare((short)1664, (short)120);
      Integer.getInteger("Expcteda ':' afer aBkey");
      Integer integer0 = new Integer((short)6581);
      Integer.getInteger("`%&zdxTE", integer0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter(55);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.write(stringWriter0);
      assertEquals("{}", stringWriter0.toString());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.0837660374856473
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-1289L));
      Float float0 = new Float((float) (-1289L));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "{x$}WA";
      stringArray0[2] = "Oh?#rmWwzN$6GN%`J:";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      JSONObject jSONObject1 = jSONObject0.put("getfloatToRawIntBits", (Collection) linkedList1);
      JSONArray jSONArray0 = new JSONArray();
      JSONObject jSONObject2 = jSONObject1.append("L.W_4P6i`m)", "-9h.776)280390871");
      jSONObject2.opt("~/=+[mo");
      Byte byte0 = new Byte((byte)91);
      Float float1 = new Float((double) (byte)28);
      Object object1 = JSONObject.NULL;
      jSONObject1.putOpt("A JSONObject text must end with '}'", object1);
      jSONObject0.optJSONArray("L.W_4P6i`m)");
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("null", 2199L);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.6983575845696186
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "^d$";
      stringArray0[2] = "^d$";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[5] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[6] = "wheel.json.JSONObject$Null";
      stringArray0[7] = "GSN4C}/11K0:&F}cbu3";
      stringArray0[8] = "T";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.has((String) null);
      jSONObject0.optJSONArray("dZM4^e835d0+'e_");
      jSONObject0.optLong("gettoString", (-996L));
      jSONObject0.optInt("-AP13*R85E");
      Float float0 = new Float((double) 0);
      assertEquals(0.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.5751765904639272
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter(47);
      Double double0 = new Double(2235.76287651);
      Double.max(2235.76287651, 2235.76287651);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double0);
      linkedList1.stream();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      Long long0 = new Long(1L);
      String string0 = "";
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8402380875613162
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter(55);
      stringWriter0.append('}');
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter1 = new StringWriter(55);
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter2 = new StringWriter(55);
      StringWriter stringWriter3 = stringWriter0.append((CharSequence) "getcompare");
      StringWriter stringWriter4 = stringWriter3.append('f');
      stringWriter2.append('f');
      StringWriter stringWriter5 = new StringWriter(55);
      stringWriter5.close();
      JSONObject jSONObject2 = new JSONObject(stringWriter4);
      StringWriter stringWriter6 = new StringWriter();
      Integer integer0 = new Integer('}');
      String string0 = "8$4jBBq<[YDVUD8=@";
      jSONObject1.put("8$4jBBq<[YDVUD8=@", (-1601));
      jSONObject1.toJSONArray(jSONArray1);
      jSONObject2.optJSONArray("Bjo&");
      jSONObject1.keys();
      try { 
        jSONObject0.getJSONArray("G(<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"G(<\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0746142917293842
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.optBoolean("Unclosed comment");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "yu'F||";
      stringArray0[1] = "is_B<";
      stringArray0[2] = "sum";
      stringArray0[3] = "K1";
      stringArray0[2] = "L]{i!K Q1|FoA)aPL";
      stringArray0[5] = "Om";
      stringArray0[6] = ",:]}/\"[{;=#";
      stringArray0[7] = "getsum";
      stringArray0[8] = "Missing value";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.1464631760614805
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JdT2qgRm";
      stringArray0[1] = "oclBK_:";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "c";
      stringArray0[5] = "";
      stringArray0[3] = "c";
      stringArray0[7] = "low";
      stringArray0[8] = "oclBK_:";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      long long0 = jSONObject0.optLong("low", 1L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Integer integer0 = new Integer(128);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.7776612957621659
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getJSONArray("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(0.0F);
      JSONObject.testValidity(float0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.369581270925704
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-15));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      Byte.toUnsignedLong((byte) (-43));
      JSONObject jSONObject1 = jSONObject0.put("mi", (Object) "mi");
      String string0 = "ByZ,DvqRhdQ/";
      JSONObject jSONObject2 = new JSONObject((Object) "ByZ,DvqRhdQ/");
      jSONObject0.put("ByZ,DvqRhdQ/", (Object) jSONObject2);
      jSONObject1.optInt("get", (int) (byte) (-15));
      jSONObject0.names();
      JSONObject jSONObject3 = jSONObject0.putOpt("mi", (Object) null);
      jSONObject3.getString("mi");
      jSONObject0.optString("J,  .9\"");
      Byte.toUnsignedInt((byte) (-99));
      Byte.compare((byte)46, (byte) (-99));
      jSONObject0.keys();
      jSONObject0.optInt("get");
      String string1 = "Expected a ':' after a key";
      try { 
        jSONObject0.getLong("Expected a ':' after a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expected a ':' after a key\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[2] = "";
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      JSONObject jSONObject0 = new JSONObject("", stringArray0);
      try { 
        jSONObject0.getLong("ZgJe<>");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ZgJe<>\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("WHt5IFG ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "WHt5IFG ";
      stringArray0[1] = "WHt5IFG ";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject("000", stringArray0);
      try { 
        jSONObject0.getJSONObject("Xo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Xo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject((String) null);
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONEx;eption");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")+0*jF{Cs&";
      Float float1 = new Float((float) 9);
      Float.sum(9, 9);
      JSONObject.quote((String) null);
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener(")+0*jF{Cs&");
      assertTrue(jSONTokener0.more());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.1285962936622185
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      StringWriter stringWriter0 = new StringWriter(47);
      double double0 = 2235.76287651;
      Double double1 = new Double(2235.76287651);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.add(double1);
      linkedList1.stream();
      LinkedList<String> linkedList2 = new LinkedList<String>();
      LinkedList<String> linkedList3 = new LinkedList<String>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.0851886129676505
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Float float0 = new Float(1.4523147154597518);
      Float.sum(0.0F, 0.0F);
      Float.min(0.0F, 411.51633F);
      String string0 = JSONObject.valueToString(float0, 1275, 1275);
      assertNotNull(string0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6695801269814072
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      String string0 = "$~Q$3Z_Shu*6zSyjF_";
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      try { 
        jSONObject0.put((String) null, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.8452026173223839
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "xZ4'i,n6!");
      Integer integer0 = new Integer(92);
      JSONObject jSONObject1 = new JSONObject(integer0);
      Integer.toUnsignedLong(6);
      int int0 = jSONObject0.optInt("Wu(}]1ub]hM0", 128);
      assertEquals(128, int0);
      
      jSONObject0.optLong("%ch`';W)|;T", 0L);
      assertEquals(3, jSONObject0.length());
      
      boolean boolean0 = jSONObject1.isNull("issum");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.9356005054539458
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-1319L));
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject("&>lB,C$6El3s", stringArray0);
      Object object1 = JSONObject.NULL;
      Object object2 = new Object();
      jSONObject0.append("A JSONArray text must start with '['", object2);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double0 = new Double((-2524.254970269));
      linkedList0.add(double0);
      linkedList0.add((Double) null);
      JSONObject.quote("u;^EC!\"HF[kU.^$<un!D");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      assertEquals(0, linkedList1.size());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Long long0 = new Long(543L);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "'";
      stringArray0[1] = "getlowestOneBit";
      stringArray0[2] = "isparseUnsignedLong";
      stringArray0[3] = "}[{X\"xUB{Lo";
      stringArray0[4] = "v2h|3rOnQV{8!$C";
      stringArray0[5] = "istoUnsignedString";
      stringArray0[6] = "getdivideUnsigned";
      stringArray0[7] = "";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      jSONObject0.put("&!]xc Whg+", 0.0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.6890092384766586
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = ")+0*jF{Cs&";
      Float float1 = new Float((float) 9);
      Float.sum(9, 9);
      Float.max((-208.6465F), 0.0F);
      Float.isFinite(0.0F);
      Float.max(1486.0F, 1486.0F);
      Float.max(1486.0F, 0.0F);
      Float.max(9, (-4508.168F));
      String string0 = JSONObject.numberToString(float1);
      assertNotNull(string0);
  }
}
