/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 21:28:26 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.9909330601945814
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("$fYU-<.", 2);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("wheel.json.JSONException", (Collection) linkedList0);
      JSONObject jSONObject3 = jSONObject2.put("$fYU-<.", (-2095L));
      Boolean boolean0 = new Boolean("wheel.json.JSONException");
      jSONObject0.toString((-50462699), (-50462699));
      jSONObject3.optJSONArray((String) null);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject3.optJSONArray("wheel.json.JSONException");
      jSONObject0.optJSONObject("JSON does not allow non-finite numbers.");
      jSONObject2.accumulate("t0QK,>z:XR~}1T", "JSON does not allow non-finite numbers.");
      Boolean boolean1 = new Boolean("Null pointer");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject4 = new JSONObject(boolean0, stringArray0);
      jSONObject1.accumulate("wheel.json.JSONException", jSONObject4);
      jSONObject3.put("to", (Map) hashMap0);
      jSONObject0.put("EP`g}=YI4&`nGWjB", (Map) hashMap0);
      jSONObject2.put("isvalueOf", true);
      Long long0 = new Long(2);
      try { 
        jSONObject3.accumulate((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8543061378791363
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, (-5859.06F));
      Short.toUnsignedInt((short)2949);
      Double double0 = new Double(0.0F);
      Double.min(3544.0F, Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ishashCode", 0.0);
      JSONObject jSONObject1 = jSONObject0.put("1X(oR&'xH}5wh", (long) (short)2949);
      jSONObject1.optDouble("S# #+", 0.0);
      jSONObject1.getDouble("1X(oR&'xH}5wh");
      jSONObject1.getInt("1X(oR&'xH}5wh");
      Boolean boolean0 = new Boolean("1X(oR&'xH}5wh");
      jSONObject1.optInt("ishashCode");
      jSONObject0.optDouble("ha");
      jSONObject0.accumulate("ha", "java.lang.Long@0000000004.");
      jSONObject0.getLong("ishashCode");
      jSONObject0.optLong("java.lang.Long@0000000004.");
      try { 
        jSONObject0.getBoolean("ha");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ha\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0766775063014427
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf("@'");
      Boolean.logicalXor(true, false);
      Boolean.compare(false, false);
      Boolean.compare(false, false);
      Boolean.logicalXor(false, false);
      Boolean boolean1 = new Boolean("B\"{ep");
      Boolean.logicalOr(false, true);
      Boolean.logicalAnd(true, true);
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(true, false);
      Boolean.logicalOr(true, true);
      Boolean.logicalXor(true, true);
      Boolean boolean2 = new Boolean(",\n");
      JSONObject.getNames((Object) boolean0);
      Double double0 = new Double(0.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getLong("</YWr]:$?$2Tx8FMo*");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"<\\/YWr]:$?$2Tx8FMo*\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.671524944694397
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Float float0 = new Float((-1.0F));
      Float.isFinite((-262.7F));
      String[] stringArray0 = JSONObject.getNames((Object) float0);
      assertNotNull(stringArray0);
      
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("", "");
      JSONObject.quote("");
      HashMap<Float, Object> hashMap0 = new HashMap<Float, Object>();
      jSONObject0.optDouble("s jt!RZ2", 1.0);
      Float float1 = new Float((-262.7F));
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      hashMap0.computeIfAbsent(float1, function0);
      JSONObject jSONObject2 = jSONObject1.put("\"\"", (Map) hashMap0);
      JSONObject.numberToString(float0);
      jSONObject2.put("isfloatToRawIntBits", 0.0);
      assertEquals(11, jSONObject2.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.636103711397223
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, (-5859.06F));
      Short.toUnsignedInt((short)2949);
      Double double0 = new Double(0.0F);
      Double.min(3544.0F, Double.NaN);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ishashCode", 0.0);
      JSONObject jSONObject1 = jSONObject0.put("1X(oR&'xH}5wh", (long) (short)2949);
      jSONObject1.optDouble("S# #+", 0.0);
      jSONObject1.getDouble("1X(oR&'xH}5wh");
      jSONObject1.getInt("1X(oR&'xH}5wh");
      Boolean boolean0 = new Boolean("1X(oR&'xH}5wh");
      String string0 = "java.lang.Long@0000000004.";
      String string1 = "ha";
      jSONObject1.optInt("ishashCode");
      jSONObject0.optDouble("ha");
      jSONObject0.accumulate("ha", "java.lang.Long@0000000004.");
      try { 
        jSONObject0.getLong("!u$^4p");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!u$^4p\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.923938448922021
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Double.sum(0.0, Double.NaN);
      Double.max(2852.37798792, 2852.37798792);
      Float float0 = new Float(Double.NaN);
      hashMap0.put("JSONObject[", float0);
      Double.max((-1883.897), (-89.40274));
      Double.min(2852.37798792, (-888.36025346));
      String string0 = JSONObject.valueToString(hashMap0);
      assertNull(string0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5220007715112454
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(0.0F, 3544.0F);
      Float.max(3544.0F, (-5859.06F));
      Short.valueOf((short)15);
      Short.toUnsignedInt((short)2949);
      Double double0 = new Double(0.0F);
      Double.min(3544.0F, Double.NaN);
      Double.min(0.0, 0.0);
      Double.sum(0.0, Double.NaN);
      Double.max(3544.0F, Double.NaN);
      Double.min((-89.40274), Double.NaN);
      JSONObject.valueToString(double0);
      Double double1 = new Double(Double.NaN);
      Double.min(Double.NaN, 3544.0F);
      try { 
        JSONObject.testValidity(double1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.328883043854535
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate0.negate();
      predicate0.negate();
      predicate0.negate();
      predicate2.negate();
      predicate0.negate();
      Double double0 = new Double(0.0);
      Short short0 = new Short((short) (-1676));
      Short.toUnsignedLong((short)2421);
      Float float2 = new Float((double) (short)0);
      JSONObject.doubleToString((short)2421);
      Float float3 = new Float(27.745002526450794);
      JSONObject jSONObject1 = jSONObject0.put("2421", (Object) float3);
      jSONObject0.optDouble("2421");
      Long long0 = new Long((short)2421);
      JSONObject jSONObject2 = jSONObject1.accumulate("2421", long0);
      jSONObject2.optJSONArray("2421");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0552573179404616
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      JSONArray jSONArray0 = new JSONArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONArray0);
      Object object1 = JSONObject.NULL;
      Predicate<Object> predicate1 = Predicate.isEqual(object1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate1.and(predicate3);
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      predicate5.and(predicate3);
      predicate3.and(predicate4);
      predicate1.or(predicate5);
      linkedList0.removeIf(predicate7);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      String string0 = "|L>|^ $?A$F@Mx.";
      jSONObject0.put("|L>|^ $?A$F@Mx.", (-2808L));
      try { 
        jSONObject0.getInt("{}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.693969084952793
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object0);
      jSONObject0.optDouble("] is not a JSONObject.");
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 8);
      jSONObject0.optDouble((String) null, (-196.589613));
      jSONObject0.optBoolean("![_P&K[EFd");
      JSONObject jSONObject2 = jSONObject0.put("![_P&K[EFd", 0L);
      jSONObject0.put(")9t[V|Lx'Wi<^[NGP", 0L);
      jSONObject0.optDouble("![_P&K[EFd");
      JSONObject.valueToString(jSONObject1);
      Integer integer0 = new Integer(2087);
      JSONObject jSONObject3 = new JSONObject(integer0);
      jSONObject2.putOpt("![_P&K[EFd", jSONObject3);
      assertEquals(4, jSONObject2.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3474235693122503
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.toString();
      assertEquals(2, jSONObject0.length());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.negate();
      predicate1.and(predicate0);
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.negate();
      predicate3.or(predicate1);
      predicate0.negate();
      linkedList1.removeIf(predicate0);
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add((Integer) null);
      Integer.divideUnsigned((-1396), 46);
      Integer integer0 = new Integer(36);
      Integer integer1 = new Integer(8192);
      linkedList2.add(integer1);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Short> linkedList5 = new LinkedList<Short>();
      LinkedList<Byte> linkedList6 = new LinkedList<Byte>();
      String string0 = JSONObject.valueToString(linkedList6, 42, 909);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6966915680861616
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      String string0 = "getsum";
      jSONObject0.toString((-118545668), 13);
      Boolean.logicalAnd(true, false);
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedInt((byte)46);
      JSONObject jSONObject1 = jSONObject0.putOpt("getsum", byte0);
      jSONObject1.putOpt("getsum", byte0);
      JSONObject.testValidity(jSONObject0);
      jSONObject1.optLong("getsum");
      String string1 = "^A~X";
      Byte.toUnsignedLong((byte)59);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("^A~X");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ^A~X
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.8356145089434976
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      Float float1 = new Float(895.4511F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      jSONObject0.optBoolean("ev$[;dn&~G|S");
      jSONObject0.optLong("ev$[;dn&~G|S");
      jSONObject0.optDouble("Unclosed comment", 27.745002526450794);
      Float.min(1.0F, (-806.25F));
      jSONObject0.optInt("Null pointer");
      JSONObject jSONObject1 = jSONObject0.put("Unclosed comment", 59);
      jSONObject1.getLong("Unclosed comment");
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      jSONObject1.put("Unclosed comment", (Map) hashMap0);
      jSONObject0.put("Null pointer", (Collection) linkedList0);
      jSONObject1.optBoolean("wb (I7O|-");
      JSONTokener jSONTokener0 = new JSONTokener("Null pointer");
      jSONObject0.opt("wJN");
      long long0 = jSONObject0.optLong("ev$[;dn&~G|S");
      assertEquals(5, jSONObject0.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.3719198209004677
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      Integer.compare(12, 12);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(12);
      Integer.getInteger("tcJ>J|,k 6;Wfvv", 12);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Short.toUnsignedInt((short)88);
      Double double0 = new Double(12);
      Double.min(2448.25967, 12);
      Double.min((-990.6), 1468.1035);
      Double.sum((-1124.3253217135375), 1468.1035);
      Double.max(532.0919335516148, 12);
      Double.min(Double.NaN, 0.0);
      Float float1 = new Float(Double.NaN);
      try { 
        JSONObject.valueToString(float1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3935343515788563
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      Float.max(54.9097F, 0.0F);
      Float.max(0.0F, 0.0F);
      Float.max((-994.21F), (-5859.06F));
      Short.valueOf((short)15);
      Short.toUnsignedInt((short)15);
      Double double0 = new Double(Double.NaN);
      Double.isFinite(54.9097F);
      Double.max(Double.NaN, Double.NaN);
      Double.min((-994.21F), (-5859.06F));
      try { 
        JSONObject.valueToString(double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Float, Byte> hashMap1 = new HashMap<Float, Byte>();
      HashMap<JSONObject, Byte> hashMap2 = new HashMap<JSONObject, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap2);
      HashMap<Short, Double> hashMap3 = new HashMap<Short, Double>();
      Short.toUnsignedInt((short)44);
      Double.valueOf((-524.90924374));
      Double.isFinite(0.0);
      Short short0 = new Short((short)44);
      Double double0 = new Double(0.0);
      Double double1 = new Double(Double.NaN);
      Double.isFinite(Double.NaN);
      String string0 = "*~zsoKj4";
      jSONObject0.put("*~zsoKj4", 1826L);
      jSONObject0.getInt("*~zsoKj4");
      Boolean boolean0 = new Boolean("'kg+qndT)*UVC");
      try { 
        Short.valueOf("'kg+qndT)*UVC", 59);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 59 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1589730110632956
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(0.0F, 3544.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put(": ", true);
      jSONObject0.isNull("A JSONObject text must end with '}'");
      JSONObject jSONObject1 = new JSONObject((Object) ": ");
      Byte byte0 = new Byte((byte)39);
      jSONObject0.append("gRtmKx", byte0);
      JSONObject jSONObject2 = jSONObject0.append("gRtmKx", ": ");
      assertSame(jSONObject2, jSONObject0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.453460321332158
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      Float float1 = new Float(895.4511F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer((-14522065));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.getInteger("JL\"za", 12);
      Integer.getInteger("pus", (-14522065));
      linkedList0.add(integer1);
      Integer integer2 = new Integer(1224);
      linkedList0.add(integer0);
      StringWriter stringWriter0 = new StringWriter(1224);
      stringWriter0.close();
      Float.isFinite(54.0F);
      stringWriter0.write(1224);
      jSONObject0.write(stringWriter0);
      String string0 = JSONObject.doubleToString((-14522065));
      assertEquals("-1.4522065E7", string0);
      
      JSONArray jSONArray0 = jSONObject0.names();
      assertNotNull(jSONArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5601507502065712
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      short short0 = (short) (-970);
      Short short1 = new Short((short) (-970));
      Double.sum((short) (-970), (short) (-970));
      HashMap<Short, Double> hashMap1 = new HashMap<Short, Double>();
      Short.toUnsignedInt((short)120);
      Double double0 = new Double(27.7);
      Double.valueOf((double) (short)120);
      Double.isFinite((-1940.0));
      Short short2 = new Short((short)44);
      Short.compare((short)120, (short)44);
      Double double1 = new Double((-1.0));
      Double double2 = new Double((-2140.710238585));
      hashMap1.replace(short2, double1, double2);
      String string0 = "getlistIterator";
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getlistIterator";
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.valueToString(hashMap1, (short) (-970), 10);
      HashMap<Boolean, Integer> hashMap2 = new HashMap<Boolean, Integer>();
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((short) (-970));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8171007229427194
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-3080));
      Integer.min(43, (-3080));
      JSONObject jSONObject1 = jSONObject0.append("sxwk", integer0);
      jSONObject1.getJSONArray("sxwk");
      jSONObject0.getJSONArray("sxwk");
      jSONObject0.toString(101, 101);
      jSONObject0.optLong("{\"java.lang.String@0000000003\": [java.lang.Integer@0000000004]}");
      JSONObject.quote("{\"java.lang.String@0000000003\": [java.lang.Integer@0000000004]}");
      jSONObject0.optDouble("Bad value from toJSONString: ", 0.0);
      JSONObject jSONObject2 = jSONObject0.put("iswait", 2158);
      jSONObject2.remove("getput");
      String string0 = "eq";
      try { 
        jSONObject0.getLong("eq");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"eq\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0763051918207056
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("4xzHxm70ALR", false);
      jSONObject0.optLong("#v)Z", (-1L));
      JSONObject jSONObject2 = jSONObject1.put(": ", true);
      jSONObject2.put("4xzHxm70ALR", 1.0);
      jSONObject0.isNull("4xzHxm70ALR");
      JSONObject jSONObject3 = jSONObject2.put("4xzHxm70ALR", (-3816.28958175093));
      jSONObject3.toString();
      jSONObject0.toString((-2178), 12);
      jSONObject0.append("#v)Z", "4xzHxm70ALR");
      try { 
        jSONObject3.getDouble("#v)Z");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#v)Z\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.9688960674459826
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optBoolean("");
      jSONObject1.optLong("");
      jSONObject1.optDouble("", 2126.8913663916574);
      jSONObject1.optInt("");
      JSONObject jSONObject2 = jSONObject0.put("wb (I7O|-", 123);
      JSONObject jSONObject3 = new JSONObject();
      Float.isFinite((-1.0F));
      Float.isFinite(123);
      Float.sum((-1.0F), 2189.2778F);
      Long long0 = new Long(0);
      Float.sum(0L, (-1.0F));
      Float.isFinite(1507.0F);
      Float.sum(2189.2778F, (-2826.49F));
      String string0 = JSONObject.numberToString(long0);
      jSONObject2.optBoolean("p2$Hgu");
      Double double0 = new Double(0);
      String string1 = JSONObject.valueToString(double0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.5445032723638805
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = ".";
      jSONObject0.optDouble(".");
      String[] stringArray0 = new String[12];
      stringArray0[1] = ".";
      stringArray0[2] = ".";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong(stringArray0[0]);
      JSONObject jSONObject2 = new JSONObject(jSONObject0);
      String string1 = ";7s5=/&\"P}OiY6 N^";
      String string2 = "cy!m";
      Boolean boolean0 = new Boolean("cy!m");
      jSONObject1.optLong(".");
      String string3 = "isvalueOf";
      jSONObject0.put("v:3jys=e68D3dx(", 37L);
      Long long0 = new Long(2079L);
      JSONObject.valueToString(long0, 59, 59);
      try { 
        jSONObject0.getLong(";7s5=/&\"P}OiY6 N^");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\";7s5=/&\\\"P}OiY6 N^\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.201684025007616
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject.getNames(jSONObject0);
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Long long0 = new Long((-257L));
      Long.toUnsignedString((-257L));
      Byte byte0 = new Byte((byte)10);
      hashMap0.put(long0, byte0);
      Long.getLong("#");
      Short short0 = new Short((short) (-28887));
      hashMap0.put((Long) null, short0);
      jSONObject0.put("z^j4=0J,Xl:O;e", 0L);
      jSONObject0.getInt("z^j4=0J,Xl:O;e");
      try { 
        jSONObject0.getBoolean("#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Float float0 = new Float(28.034323859261747);
      Float float1 = new Float((-1813.7211F));
      Long.sum(0L, 0L);
      Float.isFinite((-784.3F));
      Float.isFinite(0.0F);
      Float.isFinite(0L);
      Float.isFinite(2318.0F);
      Float.isFinite(2318.0F);
      Float.sum((-1813.7211F), (-1813.7211F));
      Long long0 = new Long(0L);
      Float.sum((-2826.49F), 0L);
      Float.max(2927.2185F, (-1.0F));
      Float.isFinite((-0.8171169F));
      Float.isFinite(2318.0F);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0733877317771823
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-941L));
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+*?@=";
      stringArray0[1] = "+*?@=";
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      jSONObject0.toString();
      Object object1 = new Object();
      jSONObject0.isNull("h>F");
      jSONObject0.putOpt("+*?@=", object0);
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      JSONObject jSONObject1 = jSONObject0.put("Iw+TuLI4*<<MnNu", (Map) hashMap0);
      jSONObject0.toString(22, 22);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject2 = jSONObject0.put("{\n                                            \"java.lang.String@0000000002\": null,\n                                            \"java.lang.String@0000000004\": {}\n                      }", (Collection) linkedList0);
      Long.getLong("gettoLowerCase", long1);
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      Byte byte0 = new Byte((byte)28);
      JSONObject jSONObject3 = jSONObject0.accumulate("$aJ7LRw[8", linkedList0);
      JSONObject jSONObject4 = new JSONObject((Map) null);
      jSONObject0.isNull("+*?@=");
      JSONObject jSONObject5 = jSONObject3.append("] is not a JSONArray.", jSONObject2);
      jSONObject4.optDouble("54gXy", (double) (byte)28);
      jSONObject5.append("{}", jSONObject1);
      long long2 = jSONObject0.optLong("#3vK;i7.??PW'c");
      assertEquals(6, jSONObject0.length());
      assertEquals(0L, long2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.386562440240475
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      Float.sum((-1855L), (-1855L));
      Float.sum((-1855L), (-1855L));
      Float.max(3544.0F, 0.0F);
      Float.max(0.0F, (-3710.0F));
      Short.toUnsignedInt((short)50);
      JSONObject.valueToString(float0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "java.lang.Float@0000000001";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0);
      JSONObject jSONObject2 = jSONObject1.put("y:;/trpS$F<", 2132);
      double double0 = jSONObject2.optDouble("y:;/trpS$F<", (-1295.8417084230068));
      assertEquals(2, jSONObject1.length());
      assertEquals(2132.0, double0, 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.301335306598665
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float float0 = new Float(3544.0F);
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.and(predicate1);
      Predicate<Object> predicate5 = predicate3.negate();
      predicate5.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate4);
      predicate6.and(predicate5);
      linkedList0.removeIf(predicate4);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("o", (-1820L));
      jSONObject1.getInt("o");
      Boolean boolean0 = new Boolean("o");
      jSONObject1.optDouble("o");
      try { 
        jSONObject0.getLong("toA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toA\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-970));
      HashMap<Short, Double> hashMap1 = new HashMap<Short, Double>();
      Long long0 = new Long(0L);
      hashMap0.putIfAbsent(long0, long0);
      Long long1 = new Long(0L);
      Object object0 = new Object();
      hashMap0.put(long1, object0);
      Short.toUnsignedInt((short)44);
      Double double0 = new Double((short) (-970));
      Double double1 = Double.valueOf(0.0);
      Double.isFinite(0.0);
      hashMap1.replace(short0, double0, double1);
      jSONObject0.isNull("js");
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-1.0));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.228760408971926
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float float0 = new Float(3544.0F);
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate6.negate();
      Predicate<Object> predicate7 = predicate6.and(predicate6);
      predicate2.negate();
      Float float2 = new Float(3544.0F);
      predicate5.test(float2);
      predicate7.and(predicate6);
      predicate3.negate();
      linkedList0.removeIf(predicate5);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      String string0 = "S";
      JSONObject jSONObject1 = jSONObject0.put("S", (-1820L));
      jSONObject1.remove("S");
      try { 
        jSONObject1.getInt("S");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"S\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.271512871834892
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(object0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(160);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("3\"r 4_%j@ mS-S/4W< ");
      jSONObject1.optJSONObject("flo");
      jSONObject0.optString("flo", "");
      String string0 = jSONObject1.optString("UI_LQ'|");
      assertEquals("", string0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9913740596968106
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("]g}2lEH;6ln1$H#T#A9", 0.0);
      try { 
        jSONObject0.append("]g}2lEH;6ln1$H#T#A9", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[]g}2lEH;6ln1$H#T#A9] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      BiFunction<Long, Object, Integer> biFunction0 = (BiFunction<Long, Object, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Long long0 = new Long(0L);
      BiFunction<Object, Object, Byte> biFunction1 = (BiFunction<Object, Object, Byte>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , any());
      Long long1 = new Long(2690L);
      hashMap0.put(long1, long0);
      hashMap0.getOrDefault(long1, long0);
      hashMap0.compute(long0, biFunction1);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames(jSONObject0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Long cannot be cast to java.lang.String
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.815062529505342
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      Float float1 = new Float(27.745002526450794);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(384);
      linkedList0.add(integer1);
      linkedList1.add(integer0);
      linkedList0.add((Integer) null);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[1] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      Integer.getInteger("tcJ>J|,k 6;Wfvv", 12);
      Short.valueOf((short)15);
      Short.toUnsignedInt((short)110);
      Double double0 = new Double((-1855L));
      Double.min(597.031301, 0.0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedList0.removeAll(linkedList1);
      Double.min(489.2418838052, 489.2418838052);
      Double.max(0.0, Double.NaN);
      Double.min(Double.NaN, 12);
      String string0 = JSONObject.valueToString(linkedList0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.549249028479651
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$?h";
      stringArray0[0] = "^d$?h";
      JSONObject jSONObject0 = new JSONObject("^d$?h", stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("^d$?h", false);
      JSONObject jSONObject2 = jSONObject1.put("Fo4WqEQ;s)~n.Y\" H:9", false);
      jSONObject1.isNull("^d$?h");
      jSONObject0.put(":8&n}lQn|", 0.0);
      JSONObject jSONObject3 = jSONObject0.append("!'pwnK*", ": ");
      assertSame(jSONObject3, jSONObject2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.8181400699601555
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optLong("");
      jSONObject1.optDouble("isformat", 2126.8913663916574);
      jSONObject1.optInt("");
      Float float0 = new Float((double) 0.0F);
      JSONObject jSONObject2 = jSONObject0.put("wb (I7O|-", 123);
      jSONObject2.optInt("wb (I7O|-");
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject3.put("Zv^lrt hL", (Collection) null);
      jSONObject4.put("Zv^lrt hL", (long) 123);
      Object object0 = new Object();
      JSONObject jSONObject5 = jSONObject4.accumulate("wb (I7O|-", object0);
      jSONObject1.optJSONArray("isformat");
      try { 
        jSONObject5.get("islongValue");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"islongValue\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6656066941065517
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      JSONObject jSONObject0 = new JSONObject((Object) "");
      jSONObject0.optBoolean("getspliterator");
      jSONObject0.optLong(",\n");
      jSONObject0.optDouble("|scI#", 1526.84557701);
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.put("getspliterator", 46);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("wb (I7O|i", (Collection) linkedList0);
      jSONObject0.optBoolean("false");
      Boolean boolean0 = new Boolean("|scI#");
      linkedList0.add("Expected a ',' or ']'");
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      jSONObject1.opt((String) null);
      Long long0 = new Long((-169L));
      try { 
        jSONObject0.getLong("getadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getadd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Float float0 = new Float(1609.782811);
      Float.sum((-2111.8403F), 2517.39F);
      Float.sum(3544.0F, (-2111.8403F));
      Float.max(0.0F, 1.0F);
      Float.max(0.0F, 405.54956F);
      Short.toUnsignedInt((short)644);
      LinkedList<Short> linkedList0 = new LinkedList<Short>();
      Short short0 = new Short((short)644);
      linkedList0.add(short0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String string0 = JSONObject.valueToString(jSONArray0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5729899170928667
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Expcteda ':' afer a key", false);
      jSONObject0.optBoolean("Expcteda ':' afer a key", false);
      jSONObject0.optJSONObject("hREB#:KIEjSH$*4rQBc");
      JSONObject jSONObject1 = new JSONObject();
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.021569481260394
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      Float float1 = new Float(895.4511F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1275);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.accumulate("] not found.", jSONArray0);
      jSONObject0.optJSONArray("] not found.");
      jSONObject0.get("] not found.");
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      predicate3.and(predicate5);
      Double double0 = new Double(0.0F);
      predicate2.test(double0);
      predicate2.test(predicate1);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      predicate3.or(predicate0);
      Predicate<Object> predicate8 = predicate7.or(predicate1);
      predicate6.negate();
      Long long1 = new Long(2284L);
      predicate7.test(predicate6);
      Predicate<Object> predicate9 = predicate0.and(predicate2);
      Predicate<Object> predicate10 = predicate0.and(predicate9);
      Predicate<Object> predicate11 = predicate10.and(predicate2);
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate2);
      predicate11.negate();
      Predicate<Object> predicate13 = predicate11.or(predicate12);
      predicate13.negate();
      predicate10.and(predicate2);
      predicate8.negate();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      StringWriter stringWriter0 = new StringWriter(3873);
      stringWriter0.write(3873);
      jSONObject0.write(stringWriter0);
      String string0 = jSONObject0.optString((String) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.5764475485419895
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optLong("");
      jSONObject1.optLong("Cjo", 0L);
      jSONObject1.optDouble("isformat", 2126.8913663916574);
      jSONObject1.optInt("");
      Float.max(2514.0F, 2514.0F);
      String string0 = "isintValue";
      jSONObject1.put(" at character ", (Collection) null);
      String string1 = "rAV&LSLYd";
      Double double0 = new Double(0.0F);
      JSONObject jSONObject2 = jSONObject0.put("rAV&LSLYd", (Object) double0);
      String string2 = ".Vc&";
      jSONObject2.optInt("", 0);
      try { 
        jSONObject0.getJSONObject("get");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"get\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3491692666583344
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float float0 = new Float(3544.0F);
      Float float1 = new Float(3544.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      Long long0 = new Long((-2053L));
      predicate0.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      predicate4.or(predicate7);
      predicate6.and(predicate5);
      predicate2.negate();
      Float float2 = new Float(Double.NaN);
      predicate5.test(float2);
      Double double0 = new Double(3544.0F);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      Short short0 = new Short((short)47);
      Short short1 = new Short((short)4909);
      hashMap0.replace(short1, double0, (Double) null);
      // Undeclared exception!
      jSONObject0.toString((int) (short)4909, (int) (short)47);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 2326.9443F);
      Integer integer0 = new Integer((-1534));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1534));
      Integer.compare((-3525), (-3525));
      Integer integer2 = new Integer((-1534));
      Integer integer3 = Integer.getInteger((String) null, integer2);
      Integer.remainderUnsigned(4, (-1534));
      Integer.getInteger((String) null, (-3525));
      linkedList0.offerLast(integer3);
      Integer.getInteger("Unclosed comment");
      linkedList0.add((Integer) null);
      Integer.getInteger("isreplaceAll");
      Integer integer4 = new Integer((-3525));
      linkedList0.add(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer5 = new Integer(8192);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(8192);
      Double.max(2326.9443F, 0.0);
      Double.min(2326.9443F, 0.0);
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2744085455602483
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Long long0 = new Long((-941L));
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "+*?@=";
      stringArray0[1] = "GJf:";
      JSONObject jSONObject0 = new JSONObject(long1, stringArray0);
      jSONObject0.optInt(":|;]>+o.", (-92));
      Float.max((-628.457F), (-941L));
      Short.toUnsignedInt((short)28);
      JSONObject.valueToString(long1);
      StringWriter stringWriter0 = new StringWriter();
      try { 
        jSONObject0.getDouble("] is not a JSONArray.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONArray.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.6998126029737586
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optLong("");
      jSONObject1.optLong("Cjo", 0L);
      String string0 = "8+s Y?UyCZYN$=X,";
      jSONObject0.putOpt("A JSONArray text must start with '['", "Cjo");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.put("", (Map) hashMap0);
      Boolean.valueOf("#xz_q-6i+t");
      jSONObject1.accumulate("", (Object) null);
      JSONObject jSONObject3 = new JSONObject();
      Boolean.valueOf("");
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject("^Qa&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ^Qa&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6383104235973596
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optLong("");
      jSONObject1.optDouble("isformat", 2126.8913663916574);
      jSONObject1.optInt("");
      Float float0 = new Float((double) 0.0F);
      JSONObject jSONObject2 = jSONObject0.put("wb (I7O|-", 123);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject3.put("Zv^lrt hL", (Collection) null);
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ':' after a key");
      jSONObject2.opt("");
      try { 
        jSONObject4.getString("&x2~+FJn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&x2~+FJn\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.435317356093501
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "\\xZ4'i,n6!";
      JSONObject jSONObject0 = new JSONObject((Object) "xZ4'i,n6!");
      // Undeclared exception!
      jSONObject0.toString(723);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Float.min(0.0F, 609.6F);
      Short short0 = new Short((short)15);
      Float float0 = new Float(2733.46796769769);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) float0);
      Boolean.valueOf("iscompare");
      Double double0 = new Double(1328.4432);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      predicate3.and(predicate4);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      predicate3.test("iscompare");
      predicate0.and(predicate1);
      predicate5.test(predicate3);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate5);
      Predicate<Object> predicate9 = predicate8.or(predicate5);
      predicate5.or(predicate7);
      predicate0.or(predicate8);
      predicate0.and(predicate6);
      predicate5.and(predicate6);
      predicate7.or(predicate3);
      predicate6.and(predicate9);
      predicate2.negate();
      JSONObject jSONObject0 = new JSONObject();
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2675632284814613
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "^d$";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      stringArray0[4] = "dZM4^e835d0+'e_";
      stringArray0[5] = "^d$";
      String string0 = "{";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.5469180261486493
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      Float.sum(3963.5F, 1677.0F);
      JSONObject jSONObject0 = new JSONObject();
      Double double1 = new Double((-2866.1311412621603));
      jSONObject0.putOpt("", double1);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      jSONObject0.put("", (Map) hashMap0);
      Boolean boolean0 = Boolean.valueOf("");
      jSONObject0.accumulate("R*#__RXHip`|7,p", boolean0);
      JSONObject jSONObject1 = new JSONObject();
      String string0 = "{5l^>I bD3luo";
      Boolean boolean1 = new Boolean("R*#__RXHip`|7,p");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("(y2*cnsdA!Q|H9h");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of (y2*cnsdA!Q|H9h
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.4739205977479104
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add((Integer) null);
      Integer integer0 = new Integer(92);
      Short short0 = new Short((short)92);
      Double double0 = new Double(92);
      Double.isFinite(0.0);
      Double double1 = new Double(1796.991);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      Short short1 = new Short((short)92);
      hashMap0.replace(short1, (Double) null, (Double) null);
      jSONObject0.toString((int) (short)44, (int) (short)44);
      JSONObject jSONObject1 = new JSONObject("{\n                                                                                        \"java.lang.String@0000000004\": \"java.lang.Class@0000000005\",\n                                                                                        \"java.lang.String@0000000002\": java.lang.Boolean@0000000003\n                                            }");
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9683434794855148
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer(614);
      linkedList2.push(integer0);
      linkedList3.add((Integer) null);
      Integer integer1 = new Integer(92);
      linkedList2.add(integer1);
      linkedList0.pollFirst();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Short> linkedList5 = new LinkedList<Short>();
      StringWriter stringWriter0 = new StringWriter(33);
      stringWriter0.close();
      JSONObject jSONObject1 = new JSONObject();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(2, jSONObject0.length());
      assertNotNull(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer(39);
      Integer.getInteger("] is not a Boolean.", integer1);
      Integer.compare(12, 39);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      Integer integer2 = new Integer(12);
      Integer.getInteger("tcJ>J|nk 6;Wfvv", 12);
      linkedList0.spliterator();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer.divideUnsigned(12, (-3662));
      Double.min((-2807.97), (-144.6161951115409));
      Double.sum(453.16307723, Double.NaN);
      Double.max(Double.NaN, 39);
      Integer.remainderUnsigned((-3662), 18);
      Integer.valueOf((-257));
      Short short0 = new Short((short)32);
      Short.toUnsignedInt((short)930);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.3106853410377286
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject((Object) "W");
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add((Integer) null);
      Integer integer0 = new Integer(92);
      linkedList3.add((Integer) null);
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Short> linkedList5 = new LinkedList<Short>();
      StringWriter stringWriter0 = new StringWriter(115);
      stringWriter0.close();
      stringWriter0.write(115);
      StringWriter stringWriter1 = new StringWriter();
      jSONObject0.write(stringWriter0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.914795913898946
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      Integer integer0 = new Integer(2);
      JSONObject jSONObject0 = new JSONObject(integer0);
      Double double0 = new Double(0.0);
      try { 
        jSONObject0.accumulate((String) null, double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.749948482305991
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      jSONObject0.optLong("");
      jSONObject0.optDouble("", 2126.8913663916574);
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.put("wb (I7O|i", 123);
      JSONObject jSONObject2 = jSONObject0.put("Zv^lkt hL", (Collection) null);
      jSONObject2.optBoolean("Zv^lkt hL");
      jSONObject1.optBoolean("4WKw2l'PC2T&=H");
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ':' after a key");
      jSONObject0.opt("wJN");
      long long0 = new Long(0L);
      try { 
        jSONObject0.getLong("wJN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wJN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7059001019044
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optBoolean("");
      jSONObject1.optLong("");
      jSONObject1.optDouble("", 2126.8913663916574);
      Integer integer0 = new Integer(2530);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer(2530);
      linkedList0.add(integer1);
      Integer integer2 = new Integer(2530);
      Integer.remainderUnsigned((-425), (-425));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.getInteger(",", 2530);
      Integer.getInteger(",", (-482));
      linkedList1.add(integer1);
      Integer integer3 = new Integer(2530);
      linkedList0.add((Integer) null);
      StringWriter stringWriter0 = new StringWriter(316);
      stringWriter0.close();
      StringWriter stringWriter1 = stringWriter0.append('G');
      stringWriter1.write(2530);
      Writer writer0 = jSONObject1.write(stringWriter1);
      assertSame(stringWriter0, writer0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.322230210050763
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Float float0 = new Float(0.0F);
      Long long0 = new Long(0L);
      Short short0 = new Short((short)544);
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      Long long1 = new Long((-3393L));
      hashMap0.put(long1, short0);
      JSONObject jSONObject1 = jSONObject0.putOpt("GS``fXHQX>", "to");
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      jSONObject1.put(": ", (Map) hashMap0);
      Boolean.valueOf("ij -K{@U3l");
      Long long2 = new Long(1996L);
      Long long3 = Long.valueOf((-1927L));
      hashMap0.put(long3, (Object) null);
      Byte byte0 = new Byte((byte)78);
      Float float1 = new Float(0.0);
      jSONObject0.accumulate("GS``fXHQX>", float1);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1761689797087618
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      Float float1 = new Float((double) 895.4511F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer((-14522076));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.getInteger("pus", (-14522076));
      linkedList0.add(integer1);
      Integer integer2 = new Integer(1224);
      linkedList0.add(integer0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toString();
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1356219397587948
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      StringWriter stringWriter0 = new StringWriter(121);
      stringWriter0.close();
      stringWriter0.write(121);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{x$}WA");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 4 of {x$}WA
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0426322117102855
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HashMap<Float, Byte> hashMap0 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-970));
      Double double0 = new Double((short) (-970));
      Double.sum((short) (-970), (short) (-970));
      HashMap<Short, Double> hashMap1 = new HashMap<Short, Double>();
      Short.toUnsignedInt((short)120);
      Double double1 = new Double(27.7);
      Double.valueOf((double) (short)120);
      Double.isFinite(Double.NaN);
      Short short1 = new Short((short)44);
      Double double2 = new Double((-1.0));
      Double double3 = new Double((-2140.710238585));
      hashMap1.replace(short1, double2, double3);
      jSONObject0.toString(512, (int) (short)44);
      JSONObject jSONObject1 = new JSONObject("{}");
      HashMap<Float, Float> hashMap2 = new HashMap<Float, Float>();
      assertEquals(0, hashMap2.size());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.823524499999698
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Collection<Byte> collection0 = null;
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.putOpt("", (Object) null);
      jSONObject1.optBoolean("");
      jSONObject1.optLong("");
      jSONObject1.optDouble("", 2126.8913663916574);
      jSONObject1.optInt("");
      int int0 = 123;
      jSONObject0.put("wb (I7O|-", 123);
      JSONObject jSONObject2 = new JSONObject();
      String string0 = "Zv^lkt hL";
      try { 
        jSONObject2.getLong("!%5%Cf\".+ ZBmNJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"!%5%Cf\\\".+ ZBmNJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.580485277278434
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "^d$";
      stringArray0[2] = "";
      stringArray0[3] = ")+0*jF{Cs&";
      Float.sum(2100.28F, 2100.28F);
      JSONObject jSONObject0 = new JSONObject("^d$", stringArray0);
      JSONObject jSONObject1 = jSONObject0.putOpt("' and instead saw '", "");
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject2 = jSONObject1.put("' and instead saw '", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter();
      jSONObject2.write(stringWriter0);
      String string0 = ".";
      Boolean.valueOf(".");
      jSONObject0.accumulate("", "^d$");
      JSONObject jSONObject3 = new JSONObject();
      Boolean.valueOf((String) null);
      JSONObject jSONObject4 = null;
      try {
        jSONObject4 = new JSONObject(")+0*jF{Cs&");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of )+0*jF{Cs&
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.736822124840271
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Float float0 = new Float(0.0);
      int int0 = 1770;
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 45, 45);
      String string0 = "rep";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nhtzif";
      stringArray0[1] = "null";
      stringArray0[2] = "rep";
      stringArray0[3] = "rep";
      stringArray0[4] = "null";
      stringArray0[5] = "null";
      stringArray0[6] = "M";
      stringArray0[7] = "null";
      JSONObject jSONObject0 = new JSONObject("null", stringArray0);
      try { 
        jSONObject0.getInt("Us\"Zm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Us\\\"Zm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.153435755195053
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      Float float1 = new Float(895.4511F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer1 = new Integer(418);
      linkedList0.add(integer1);
      linkedList1.add(integer0);
      JSONObject jSONObject1 = jSONObject0.put("ha", (-1334.671959889));
      jSONObject0.append("/(#a*K4r'Z6", float1);
      jSONObject0.accumulate("getsubList", (Object) null);
      Long long0 = new Long(0L);
      try { 
        jSONObject1.put((String) null, (Object) long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, (-5859.06F));
      Short.toUnsignedInt((short)2949);
      Double double0 = new Double(0.0F);
      Double.min(3544.0F, Double.NaN);
      Double.min(0.0, 0.0);
      Double.sum(0.0, Double.NaN);
      Double.max(3544.0F, Double.NaN);
      Integer integer0 = new Integer(4);
      Integer integer1 = new Integer(2949);
      String string0 = JSONObject.quote("F#xDd\")?MoM;%/9");
      assertEquals("\"F#xDd\\\")?MoM;%/9\"", string0);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.9955921311891074
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      Long long0 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject jSONObject1 = new JSONObject((Object) "M8$D2|VIYy");
      boolean boolean0 = jSONObject1.isNull(",\n");
      assertTrue(boolean0);
      
      double double1 = jSONObject1.optDouble("M8$D2|VIYy", (double) 0L);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = jSONObject1.optDouble("&>lB,C$6El3s");
      assertEquals(Double.NaN, double2, 0.01);
      
      long long1 = jSONObject1.optLong((String) null, (-996L));
      assertEquals(3, jSONObject1.length());
      assertEquals((-996L), long1);
      
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      
      JSONObject jSONObject2 = jSONObject0.accumulate(",\n", (Object) null);
      assertEquals(0, jSONObject2.length());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.066278442414676
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Float.max(0.0F, (-2530.9426F));
      Short.toUnsignedInt((short) (-26636));
      JSONObject.valueToString("dZM4^e835d0+'e_");
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.108401378854188
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Float.min(999.1737F, 999.1737F);
      Float.max(0.0F, (-567.0F));
      Float.max(0.0F, 2333.164F);
      Integer integer0 = new Integer((-1534));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1534));
      Integer.getInteger("'?QVG-f6(:)");
      linkedList0.add(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer2 = new Integer(8192);
      Integer integer3 = new Integer(0);
      Double.max((-1534), (-46615936));
      Integer integer4 = new Integer((-46615936));
      Integer integer5 = new Integer(192);
      Integer.compareUnsigned((-628), (-1973));
      linkedList0.add(integer1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add(integer5);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "'?QVG-f6(:)";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("A JSONObject text must end with '}'", (Object) null);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.6401934578801076
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = 97;
      JSONObject.valueToString(hashMap0, 97, 97);
      JSONObject.getNames((Object) hashMap0);
      Boolean.getBoolean("{}");
      HashMap<Boolean, Integer> hashMap1 = new HashMap<Boolean, Integer>();
      Boolean boolean0 = new Boolean(false);
      try { 
        Integer.decode("{}");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"{}\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0829081047004716
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Double double0 = new Double(0.0);
      Float.isFinite((-3611.2256F));
      Float.max((-1.0F), (-3611.2256F));
      Float.isFinite((-3611.2256F));
      Float.isFinite(2030.3921F);
      boolean boolean0 = new Boolean(true);
      Float.sum((-3177.7656F), (-1.0F));
      float float1 = new Float((-1.0F));
      Float.isFinite(1337.996F);
      Float.isFinite((-1.0F));
      Float.sum((-468.2244F), (-1.0F));
      String string0 = JSONObject.numberToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.808354334238794
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      jSONObject0.optLong("");
      jSONObject0.optDouble("", 2126.8913663916574);
      jSONObject0.optInt("");
      JSONObject jSONObject1 = jSONObject0.put("wb (I7O|i", 123);
      jSONObject1.getString("wb (I7O|i");
      JSONObject jSONObject2 = jSONObject0.put("Zv^lkt hL", (Collection) null);
      jSONObject2.optBoolean("Zv^lkt hL");
      Boolean boolean0 = new Boolean("Zv^lkt hL");
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ':' after a key");
      jSONObject0.opt("wJN");
      Long long0 = new Long(0L);
      try { 
        jSONObject0.getLong("wJN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wJN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.157280995708096
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("WHt5IFG ");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "WHt5IFG ";
      stringArray0[1] = "WHt5IFG ";
      stringArray0[2] = "JSON does not allow non-finite numbers.";
      JSONObject jSONObject0 = new JSONObject("000", stringArray0);
      Object object0 = JSONObject.NULL;
      jSONObject0.put("Hb\"Qgd", object0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.8775357291974197
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("08ZE#,bN9d[", (Object) null);
      jSONObject1.toString();
      Object object0 = new Object();
      jSONObject0.isNull("{}");
      jSONObject1.putOpt("[O(\"", "08ZE#,bN9d[");
      HashMap<Integer, Float> hashMap0 = new HashMap<Integer, Float>();
      HashMap<JSONArray, Short> hashMap1 = new HashMap<JSONArray, Short>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject3 = jSONObject2.put("!s|l_xXL", (Map) hashMap0);
      jSONObject2.toString(22, 22);
      jSONObject1.optDouble("{\"java.lang.String@0000000006\": {}}", (double) 22);
      jSONObject3.optDouble("Bad value from toJSONString: ", (double) 22);
      try { 
        jSONObject3.getJSONObject("Ij");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Ij\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.915962313208159
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Float float0 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject0.length());
      
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Short short0 = new Short((short)57);
      Short.toUnsignedLong((short) (-1216));
      String string0 = JSONObject.doubleToString(0.0);
      assertEquals("0", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.1439856770137404
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Float float0 = new Float(0.0);
      Float.sum(894.8F, 894.8F);
      JSONObject.valueToString(float0, 1275, 1275);
      Long long0 = new Long((-1L));
      JSONObject jSONObject0 = new JSONObject(long0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Float@0000000001", (Collection) linkedList0);
      jSONObject0.optString("java.lang.Float@0000000001", "vc)j");
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      hashMap0.clear();
      JSONObject jSONObject2 = jSONObject1.append(" of ", " of ");
      JSONObject jSONObject3 = jSONObject2.put("isrotateRight", (Map) hashMap0);
      jSONObject2.toString(1345);
      JSONObject jSONObject4 = jSONObject1.put("isrotateRight", true);
      jSONObject1.keys();
      JSONObject jSONObject5 = jSONObject3.putOpt("java.lang.Float@0000000001", linkedList0);
      JSONObject jSONObject6 = jSONObject5.put("#-,7:4sm-Zg'Fhym@2", (Map) hashMap0);
      jSONObject6.optDouble("java.lang.Float@0000000001", (-3263.198051374353));
      jSONObject0.optDouble("vc)j");
      jSONObject4.optLong("wheel.json.JSONArray@0000000005", 465L);
      int int0 = jSONObject5.optInt("C?hMFs4E'B6&E+.3");
      assertEquals(5, jSONObject3.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.4260657885513965
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Float float0 = new Float(27.7);
      Float.sum((-1813.7211F), (-1813.7211F));
      Long.sum(0L, 0L);
      Float.isFinite((-4761.6255F));
      Float.max((-1.0F), (-1.0F));
      Float.isFinite(0.0F);
      Float.isFinite(0L);
      Float.isFinite(2318.0F);
      Double double0 = new Double(0.0);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      Short short0 = new Short((short)2535);
      Double double1 = new Double((-2044.0607818));
      Double.isFinite((-4761.6255F));
      Double double2 = new Double(0L);
      Short short1 = new Short((short) (-848));
      Double double3 = new Double((short)2535);
      Double double4 = new Double(0.0);
      hashMap0.replace(short1, double3, double4);
      Short short2 = new Short((short)46);
      JSONObject jSONObject0 = new JSONObject(short2);
      jSONObject0.toString(94, (int) (short)46);
      JSONObject jSONObject1 = new JSONObject("{\"java.lang.String@0000000002\": \"java.lang.Class@0000000003\"}");
      HashMap<Float, Float> hashMap1 = new HashMap<Float, Float>();
      assertEquals(0, hashMap1.size());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7592385036834224
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add((Integer) null);
      Integer integer0 = new Integer(92);
      linkedList2.add(integer0);
      linkedList0.pollFirst();
      LinkedList<Float> linkedList4 = new LinkedList<Float>();
      LinkedList<Short> linkedList5 = new LinkedList<Short>();
      StringWriter stringWriter0 = new StringWriter(33);
      stringWriter0.close();
      Double.min(1417.0611989908, Double.NaN);
      JSONObject.valueToString(jSONObject0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float.min((-701.9F), (-701.9F));
      Float.max(0.0F, 0.0F);
      Float.max(0.0F, (-1.0F));
      Float.max(1.0F, 0.0F);
      Short.valueOf((short) (-225));
      Short.toUnsignedInt((short)2949);
      Double double0 = new Double((-1.0F));
      Double.max(2949, 0.0F);
      Double.min((-701.9F), 2289.3098);
      Boolean boolean0 = Boolean.valueOf(",:-&CK6");
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer0 = new Integer(3939);
      linkedList0.add((Integer) null);
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      StringWriter stringWriter0 = new StringWriter(3939);
      stringWriter0.close();
      stringWriter0.write(4);
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.198417560166987
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString(97, 97);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      jSONObject0.put("$(fr+dE", (Collection) linkedList0);
      hashMap0.clear();
      JSONObject jSONObject1 = jSONObject0.append("{}", "$(fr+dE");
      jSONObject1.put("{}", (Map) hashMap0);
      jSONObject0.toString(1345);
      JSONObject jSONObject2 = jSONObject0.putOpt("{}", hashMap0);
      jSONObject2.toJSONArray(jSONArray0);
      JSONObject jSONObject3 = jSONObject0.put("#-,7:4sm-Zg'Fhym@2", (Map) hashMap0);
      jSONObject3.optInt("{}");
      jSONObject1.optDouble("].DoJB", 0.0);
      jSONObject0.getJSONObject("#-,7:4sm-Zg'Fhym@2");
      jSONObject0.optString("{}");
      JSONArray jSONArray1 = jSONObject0.names();
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.1110942732940394
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("ma", (Map) hashMap0);
      Boolean.valueOf("ma");
      Long long0 = new Long(2251L);
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>();
      Long long1 = new Long(1L);
      HashMap<Long, Object> hashMap2 = new HashMap<Long, Object>();
      hashMap2.put(long1, jSONObject1);
      byte byte0 = (byte)28;
      Byte byte1 = new Byte((byte)28);
      JSONObject jSONObject2 = jSONObject0.accumulate("*y|QU3a;k'", byte1);
      try { 
        jSONObject2.getJSONObject("*y|QU3a;k'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"*y|QU3a;k'\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.7667977184901456
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Float.min(0.0F, 0.0F);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("cDMM", false);
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optLong("");
      jSONObject1.optDouble("isformat", 2126.8913663916574);
      jSONObject1.optInt("");
      Float float0 = new Float((double) 0.0F);
      jSONObject0.put("wb (I7O|-", 123);
      JSONObject jSONObject2 = new JSONObject();
      JSONObject jSONObject3 = jSONObject2.put("Zv^lrt hL", (Collection) null);
      jSONObject3.put("\"\"", true);
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ':' after a key");
      Object object0 = jSONObject2.opt("wJN");
      assertNull(object0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.766121242927825
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Collection<Byte> collection0 = null;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("(feT~$y", (Collection) null);
      jSONObject1.optBoolean("");
      jSONObject0.optLong("(feT~$y");
      jSONObject0.optDouble("", (-1231.0));
      jSONObject0.optInt("");
      JSONObject jSONObject2 = new JSONObject();
      String string1 = "_S1NkOv836";
      jSONObject2.put("_S1NkOv836", 52);
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject0.getLong("wb (I7O|-");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wb (I7O|-\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short short1 = new Short((short)0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JdT2qgRm";
      stringArray0[1] = "oclBK_:";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "oclBK_:";
      stringArray0[5] = "";
      stringArray0[7] = "low";
      stringArray0[8] = "oclBK_:";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      long long0 = jSONObject0.optLong("low", (-29L));
      assertEquals((-29L), long0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9590960964240387
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(0.0F, 3544.0F);
      Short short0 = Short.valueOf((short)15);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short0);
      Boolean boolean0 = Boolean.valueOf("iscompare");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) boolean0);
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate4);
      predicate4.test(predicate5);
      predicate4.test(predicate2);
      predicate4.negate();
      Double.min(0.0, Double.NaN);
      Double.min(Double.NaN, (-412.3320562));
      Double.sum((-2436.14), 0.0F);
      Double double0 = new Double(0.0);
      Double.max((-3196.0), Double.NaN);
      Integer.sum((-256), (-1701));
      Integer.remainderUnsigned((-1957), (-1701));
      Integer.valueOf((int) (short)15);
      JSONObject jSONObject0 = new JSONObject(predicate0);
      try { 
        jSONObject0.getString("o;j#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"o;j#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.2283784816598
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("-QY%zb|9b$zj!]]", (-1240.9));
      String string0 = "Expcteda ':' afer a key";
      boolean boolean0 = true;
      jSONObject0.put("Expcteda ':' afer a key", true);
      jSONObject0.optBoolean("Expcteda ':' afer a key", true);
      try { 
        jSONObject0.getJSONArray("Expcteda ':' afer a key");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expcteda ':' afer a key\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      predicate3.and(predicate4);
      Double double0 = new Double(0.0F);
      predicate2.test(double0);
      predicate2.test(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      predicate3.or(predicate0);
      Predicate<Object> predicate7 = predicate6.or(predicate1);
      predicate5.negate();
      Long long1 = new Long(2284L);
      predicate6.test(predicate5);
      Predicate<Object> predicate8 = predicate0.and(predicate2);
      Predicate<Object> predicate9 = predicate0.and(predicate8);
      Predicate<Object> predicate10 = predicate9.and(predicate2);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) predicate2);
      predicate10.negate();
      predicate10.or(predicate11);
      predicate7.or(predicate10);
      predicate9.and(predicate2);
      predicate7.negate();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray1);
      assertEquals(1, jSONArray1.length());
      assertNotSame(jSONArray1, jSONArray0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.6239343795441985
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<Long, Object> hashMap0 = new HashMap<Long, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Short short0 = new Short((short) (-970));
      HashMap<Short, Double> hashMap1 = new HashMap<Short, Double>();
      Long long0 = new Long(0L);
      hashMap0.putIfAbsent(long0, long0);
      Long long1 = new Long(0L);
      Long.min((short) (-970), (short)44);
      Object object0 = new Object();
      hashMap0.put(long1, object0);
      Short.toUnsignedInt((short)44);
      Double double0 = new Double((short) (-970));
      Double double1 = Double.valueOf(0.0);
      Double.min((-2787.34), (-1181.2602));
      Double.isFinite(0.0);
      hashMap1.replace(short0, double0, double1);
      jSONObject0.isNull("js");
      JSONObject jSONObject1 = jSONObject0.put("js", (-1.0));
      jSONObject0.getDouble("js");
      jSONObject0.put("Expected a ',' or ']'", false);
      JSONObject jSONObject2 = jSONObject1.putOpt("js", "Expected a ',' or ']'");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(0.0F, 0.0F);
      Short short0 = new Short((short)1);
      Double double0 = new Double(1.0);
      Double.min(1.0, 0.0);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      hashMap0.replace(short0, double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.getDouble("PE3y18,_MQ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"PE3y18,_MQ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.228707361613965
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float float0 = new Float(3544.0F);
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      Long long0 = new Long((-2053L));
      predicate0.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      predicate4.or(predicate7);
      Predicate<Object> predicate8 = predicate6.and(predicate5);
      predicate2.negate();
      Float float2 = new Float(Double.NaN);
      predicate5.test(float2);
      predicate8.and(predicate6);
      Float.min(0.0F, 3544.0F);
      linkedList0.removeIf(predicate5);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      JSONObject jSONObject1 = jSONObject0.put("S", (-1820L));
      jSONObject1.getInt("S");
      Boolean boolean0 = new Boolean("S");
      Boolean.logicalAnd(false, true);
      Boolean.logicalXor(false, false);
      StringWriter stringWriter0 = new StringWriter();
      long long1 = jSONObject0.getLong("S");
      assertEquals(4, jSONObject0.length());
      assertEquals((-1820L), long1);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      hashMap0.putAll(hashMap1);
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short short0 = new Short((short) (-1));
      Short short1 = new Short((short) (-1));
      Short.toUnsignedLong((short) (-1));
      Float float0 = new Float(496.0F);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.532184493130278
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("<t+q9?leoHkT");
      jSONTokener0.next(0);
      HashMap<Long, Byte> hashMap0 = new HashMap<Long, Byte>();
      HashMap<Long, Object> hashMap1 = new HashMap<Long, Object>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      double double0 = jSONObject0.optDouble("Wsn!*g<495foZb1(cp");
      assertEquals(Double.NaN, double0, 0.01);
      
      Byte byte0 = new Byte((byte) (-32));
      long long0 = jSONObject0.optLong("] is not a number.", (long) (byte) (-86));
      assertEquals((-86L), long0);
      
      Short short0 = new Short((short)34);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Wsn!*g<495foZb1(cp";
      stringArray0[2] = "";
      stringArray0[3] = "] is not a number.";
      stringArray0[4] = "";
      JSONObject jSONObject1 = new JSONObject(jSONTokener0, stringArray0);
      String string0 = JSONObject.valueToString(jSONObject1, 46, 34);
      assertEquals("{}", string0);
      
      boolean boolean0 = jSONObject0.isNull((String) null);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.3401308111988177
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Float float0 = new Float(28.034323859261747);
      Float float1 = new Float((-1813.7211F));
      Float.isFinite((-1813.7211F));
      Long.sum(0L, 0L);
      Float.isFinite((-4761.6255F));
      Float.isFinite((-1174.312F));
      Float.isFinite(0.0F);
      Float.isFinite(0L);
      Float.isFinite(2318.0F);
      Float.isFinite(2318.0F);
      Float.sum((-1813.7211F), (-1813.7211F));
      Long long0 = new Long(0L);
      Float.sum((-2826.49F), 0L);
      Float.max(2927.2185F, 0L);
      Float.isFinite(0.0F);
      Float.isFinite((-1174.312F));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("] not found.", (double) 2318.0F);
      try { 
        jSONObject0.getLong("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\t\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.7490729533405744
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("");
      jSONObject0.optLong("");
      jSONObject0.optDouble("", (double) 0L);
      jSONObject0.optInt("");
      jSONObject0.put("wb (I7O|i", 123);
      JSONObject jSONObject1 = jSONObject0.put("Zv^lkt hL", (Collection) null);
      jSONObject1.optBoolean("Zv^lkt hL");
      Boolean boolean0 = new Boolean("Zv^lkt hL");
      JSONTokener jSONTokener0 = new JSONTokener("Expected a ':' after a key");
      jSONObject0.opt("wJN");
      Long long0 = new Long(0L);
      try { 
        jSONObject0.getLong("wJN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wJN\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.900263624319056
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Collection<Byte> collection0 = null;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Collection) null);
      jSONObject1.optLong("");
      String string1 = "isformat";
      jSONObject0.toString(61);
      jSONObject1.optDouble("isformat", 2126.8913663916574);
      jSONObject1.optInt("");
      Float float1 = new Float((double) float0);
      String string2 = "wb (I7O|-";
      jSONObject0.put("wb (I7O|-", 123);
      try { 
        jSONObject0.getLong("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.1940490668121972
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      JSONObject.valueToString(jSONObject0, 8, 8);
      Long long1 = new Long(31L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$DZ|VIYy";
      Float float0 = new Float(1.0);
      assertEquals(1.0F, (float)float0, 0.01F);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "7.6";
      stringArray0[1] = "true";
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String string0 = jSONObject0.optString(">T|9bQ");
      assertEquals("", string0);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      Short.toUnsignedInt((short)1664);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Short short0 = new Short((short)1664);
      Double double0 = new Double((-1855L));
      Double.min((-2332.0), 1.0);
      Double.sum((-2332.0), 111.7645498701);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      hashMap0.replace(short0, double0, double0);
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.4753803290985497
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(0.0F, 3544.0F);
      Short short0 = Short.valueOf((short)15);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short0);
      Boolean boolean0 = Boolean.valueOf("iscompare");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) boolean0);
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate4);
      predicate4.test(predicate5);
      predicate4.test(predicate2);
      predicate4.negate();
      predicate5.or(predicate0);
      predicate4.or(predicate3);
      predicate4.and(predicate1);
      predicate5.or(predicate0);
      predicate5.and(predicate3);
      predicate0.negate();
      Float.isFinite(3544.0F);
      Float.isFinite((short)2949);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Missing value";
      stringArray0[1] = "w3`p";
      stringArray0[2] = "Missing value";
      stringArray0[3] = "Expected '";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      jSONObject0.put("q=[", (Map) hashMap0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.2151264569629228
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Float float0 = new Float(0.0);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "W7e#0~LQ~U#q";
      stringArray0[2] = "get";
      stringArray0[3] = "is";
      stringArray0[4] = "VO8MjMvJQ.8rmz*-#";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "W7e#0~LQ~U#q";
      stringArray1[1] = "is";
      stringArray1[2] = "get";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray1);
      long long0 = new Long(1866L);
      String string0 = jSONObject1.optString("W7e#0~LQ~U#q", "is");
      assertEquals("is", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.7152607734658951
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      Integer integer0 = new Integer(13);
      linkedList0.add(integer0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add((Integer) null);
      Integer integer1 = new Integer(92);
      Short short0 = new Short((short)92);
      Double double0 = new Double(92);
      Double double1 = new Double(0.0F);
      HashMap<Short, Double> hashMap0 = new HashMap<Short, Double>();
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalXor(true, false);
      boolean boolean0 = new Boolean(true);
      Boolean.logicalXor(false, false);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Integer integer0 = new Integer((-473));
      JSONObject jSONObject0 = new JSONObject(integer0);
      Byte byte0 = new Byte((byte)8);
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, byte0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 3873;
      StringWriter stringWriter0 = new StringWriter(3873);
      String string0 = null;
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, (Object) null);
      HashMap<JSONObject, Object> hashMap0 = new HashMap<JSONObject, Object>();
      try { 
        jSONObject1.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Short short0 = new Short((short)0);
      Short.toUnsignedInt((short)1985);
      Short.compare((short)0, (short)1664);
      Short.toUnsignedLong((short)210);
      Short.toUnsignedInt((short)1664);
      Short.compare((short)136, (short)32);
      Short.toUnsignedLong((short)97);
      Float float0 = new Float((-2456.8539));
      String string0 = JSONObject.doubleToString((-1536.8231584854432));
      assertEquals("-1536.8231584854432", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.568092840374097
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      Float float1 = new Float(895.4511F);
      JSONObject jSONObject0 = new JSONObject(float0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(12);
      Integer integer1 = new Integer((-14522065));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float.max(895.4511F, 1.0F);
      Integer.getInteger("pus", (-14522065));
      Boolean boolean0 = new Boolean("OZmB1ih#Vbk");
      Integer integer2 = new Integer(12);
      linkedList1.add(integer2);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      int int0 = jSONObject0.length();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Float.sum(894.8F, 894.8F);
      JSONArray jSONArray0 = new JSONArray();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-1886));
      linkedList0.add(integer0);
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject0 = new JSONObject();
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject.quote(",\n");
      Boolean.valueOf("@'");
      Boolean.compare(false, false);
      Boolean boolean0 = new Boolean("\",\n\"");
      Boolean.logicalXor(false, false);
      Boolean boolean1 = new Boolean("B\"{ep");
      Boolean.logicalOr(true, false);
      Boolean.logicalAnd(false, true);
      Boolean.logicalOr(false, false);
      Boolean.logicalXor(false, true);
      Boolean.logicalAnd(false, false);
      Boolean.logicalXor(true, true);
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.3697198184266455
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(0.0F, 3544.0F);
      Short short0 = Short.valueOf((short)15);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short0);
      Boolean boolean0 = Boolean.valueOf("iscompare");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) boolean0);
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      predicate0.and(predicate3);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate4);
      predicate4.test(predicate5);
      predicate4.test(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      predicate5.or(predicate0);
      predicate4.or(predicate3);
      predicate4.and(predicate1);
      predicate5.and(predicate6);
      predicate5.or(predicate0);
      predicate5.and(predicate3);
      predicate0.negate();
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Missing value";
      stringArray0[1] = "w3`p";
      stringArray0[2] = "Missing value";
      stringArray0[3] = "Expeced ";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Object object0 = new Object();
      jSONObject1.accumulate("Missing value", object0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"jA{jP9oWWV\"6iax-c";
      stringArray0[1] = "(SvcJKN";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-1L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.477115947281258
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HashMap<Boolean, Double> hashMap0 = new HashMap<Boolean, Double>();
      Byte byte0 = new Byte((byte)38);
      JSONObject jSONObject0 = new JSONObject((Object) "\t");
      jSONObject0.toString(9, 9);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("\t");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \t
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-118));
      String[] stringArray0 = new String[8];
      stringArray0[0] = "Expected a ',' or '}'";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "Z-X%2$Q@:w}$VFa\"0 ";
      stringArray0[4] = "%YAjq";
      stringArray0[5] = "000";
      stringArray0[7] = "";
      Boolean boolean0 = Boolean.valueOf(false);
      String string0 = JSONObject.valueToString(boolean0, 12, (byte) (-118));
      assertNotNull(string0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.2768244481694992
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      linkedList3.add((Integer) null);
      Integer.getInteger("getsum");
      Integer integer0 = new Integer(0);
      Integer.getInteger("isreplaceAll");
      Integer integer1 = new Integer((-1570));
      Integer integer2 = new Integer(0);
      Integer integer3 = new Integer((-1570));
      Integer integer4 = new Integer(8192);
      Integer integer5 = new Integer((-1));
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.toString(16, (-2280));
      HashMap<Boolean, Integer> hashMap0 = new HashMap<Boolean, Integer>();
      assertEquals(0, hashMap0.size());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.583141748207673
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      assertEquals(1, jSONObject0.length());
      
      Long long1 = new Long(0L);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "M8$D2|VIYy";
      stringArray0[1] = "";
      stringArray0[2] = "&>lB,C$6El3s";
      stringArray0[3] = "";
      stringArray0[4] = "u;^EC!\"HF[kU$<un!D";
      Float.sum(0L, 0.0F);
      String string0 = JSONObject.valueToString((Object) null, 102, 102);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float.sum(2520.0F, 0.0F);
      Long.sum(0L, 1106L);
      Float.isFinite(3572.4626F);
      Float.max((-1813.7211F), 1106L);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      Float.sum(0.0F, 0.0F);
      Float.min(0.0F, (-4761.6255F));
      Float.isFinite((-2826.49F));
      Float.isFinite((-1.0F));
      Float.sum(2119.885F, 3898.0479F);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.9494837273589989
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Float float0 = new Float(98.857160818);
      Float float1 = new Float(0.0F);
      Double double0 = new Double((-313.287616433));
      JSONObject jSONObject0 = new JSONObject(double0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((short)0);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Float float2 = new Float((-1430.7769922058));
      linkedList0.removeLastOccurrence(float2);
      Integer integer1 = new Integer(88);
      Integer.min(88, 93);
      Integer integer2 = new Integer(13);
      linkedList1.add(integer1);
      Integer integer3 = new Integer(2209);
      Integer integer4 = new Integer(1766);
      Double.max((-313.287616433), 0.0);
      try { 
        jSONObject0.getInt("getadd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getadd\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[9];
      String string0 = "^d$";
      stringArray0[0] = "^d$";
      stringArray0[0] = "^d$";
      stringArray0[6] = "CZ";
      stringArray0[3] = ")+0*jF{Cs&";
      Boolean.logicalAnd(false, false);
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, false);
      Boolean.logicalAnd(true, false);
      Boolean.logicalXor(false, true);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      try { 
        jSONObject0.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.346438608030655
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      float float0 = new Float(3544.0F);
      Short short0 = Short.valueOf((short)15);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short0);
      Boolean boolean0 = Boolean.valueOf("iscompare");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) boolean0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate4);
      predicate4.test(predicate5);
      predicate4.test(predicate3);
      predicate4.negate();
      predicate5.or(predicate0);
      predicate4.or(predicate2);
      predicate4.and(predicate1);
      predicate5.or(predicate0);
      predicate5.and(predicate0);
      predicate0.negate();
      Float.isFinite(3544.0F);
      Float.isFinite((short)2949);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "iscompare";
      stringArray0[1] = "w3`p";
      stringArray0[2] = "Missing value";
      stringArray0[3] = "Expected '";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject0.put("getappend", (Collection) linkedList0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.3464386080306556
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(0.0F, 3544.0F);
      Short short0 = Short.valueOf((short)15);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short0);
      Boolean boolean0 = Boolean.valueOf("iscompare");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) boolean0);
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate4);
      predicate4.test(predicate5);
      predicate4.test(predicate2);
      predicate4.negate();
      predicate5.or(predicate0);
      predicate4.or(predicate3);
      predicate4.and(predicate1);
      predicate5.or(predicate0);
      predicate5.and(predicate3);
      predicate0.negate();
      Float.isFinite(3544.0F);
      Float.isFinite((short)2949);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Missing value";
      stringArray0[1] = "w3`p";
      stringArray0[2] = "Missing value";
      stringArray0[3] = "Expected '";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject1.put("vn_W$`'8NmHa!\"\"bMwp", (long) (short)15);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.340309272251605
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "^d$";
      stringArray0[1] = "^d$";
      stringArray0[2] = "";
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("[]", (Collection) linkedList0);
      jSONObject0.optDouble("isformat", 2126.8913663916574);
      jSONObject0.optInt("isformat");
      Float.max(0.0F, 1191.106F);
      JSONObject jSONObject2 = jSONObject1.put("isformat", 20);
      JSONObject jSONObject3 = new JSONObject();
      JSONObject jSONObject4 = jSONObject0.put(")0jF{Cs&", 60);
      jSONObject2.opt("hig");
      jSONObject4.has("^d$");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7099284913365564
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Float float0 = new Float(28.034323859261747);
      Float float1 = new Float((-1813.7211F));
      Long.sum(0L, 0L);
      Float.isFinite((-4761.6255F));
      Float.isFinite(0.0F);
      Float.isFinite(0L);
      Float.isFinite(2318.0F);
      Float.isFinite(2318.0F);
      Float.sum((-1813.7211F), (-1813.7211F));
      Long long0 = new Long(0L);
      Float.sum((-2826.49F), 0L);
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(false, true);
      Boolean.logicalXor(true, false);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.optJSONArray("cle");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<String, Float> hashMap1 = new HashMap<String, Float>();
      hashMap0.putAll(hashMap1);
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Float.max(0.0F, 2333.164F);
      Integer integer0 = new Integer((-1534));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1534));
      Integer.remainderUnsigned((-1534), 128);
      linkedList0.add(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Double, Integer> function0 = (Function<Double, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Boolean> function1 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends Boolean>) function1);
      Function<Integer, LinkedList<String>> function2 = (Function<Integer, LinkedList<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends LinkedList<String>>) function2);
      unaryOperator0.compose((Function<? super Double, ? extends Integer>) function0);
      Integer integer2 = new Integer(57);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer((-46615936));
      Integer integer6 = new Integer(192);
      Integer integer7 = new Integer(57);
      Integer.getInteger("gO", 192);
      Integer integer8 = new Integer(13);
      Integer.sum(13, 2121);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "gO";
      JSONObject jSONObject0 = new JSONObject("gO", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.787359462961205
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "&>lB,C$6El3s";
      Double.max(244.6999922, 244.6999922);
      stringArray0[2] = "m=,;";
      stringArray0[3] = "S,On{uD'i [T]1`.";
      stringArray0[4] = "M8$D2|VIYy";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Double.sum((-2866.1311412621603), 0.0);
      jSONObject0.isNull("");
      JSONObject jSONObject1 = jSONObject0.append("su", "S,On{uD'i [T]1`.");
      HashMap<Byte, Long> hashMap0 = new HashMap<Byte, Long>();
      JSONObject jSONObject2 = jSONObject1.put("m=,;", (Map) hashMap0);
      boolean boolean0 = jSONObject2.has("m=,;");
      assertEquals(2, jSONObject0.length());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "\"jA{jP9oWWV\"6iax-c";
      stringArray0[1] = "(SvcJKN";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.3300185960211162
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      Boolean boolean0 = new Boolean(false);
      Boolean.logicalXor(false, false);
      Double.sum((-741.5629), (-49.297673818));
      Double.max(0.0, 0.0);
      Double.max(Double.NaN, 0.0);
      Double.min(Double.NaN, (-1534.4811895295006));
      String string0 = JSONObject.valueToString(hashMap0);
      assertNotNull(string0);
      assertEquals("{}", string0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      predicate3.and(predicate5);
      Double double0 = new Double(0.0F);
      predicate2.test(double0);
      predicate2.test(predicate1);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      predicate3.or(predicate0);
      Predicate<Object> predicate8 = predicate7.or(predicate1);
      predicate6.negate();
      Long long1 = new Long(2284L);
      predicate7.test(predicate6);
      Predicate<Object> predicate9 = predicate0.and(predicate2);
      Predicate<Object> predicate10 = predicate0.and(predicate9);
      Predicate<Object> predicate11 = predicate10.and(predicate2);
      predicate8.or(predicate11);
      predicate10.and(predicate2);
      predicate8.negate();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Double double1 = new Double(0.0);
      linkedList0.add(double1);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("JSON does not allow non-finite numbers.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSON does not allow non-finite numbers.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=2.1137111279039225
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Float float0 = new Float(27.745002526450794);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Float float1 = new Float(0.0F);
      JSONObject jSONObject0 = new JSONObject(linkedList0);
      jSONObject0.optLong((String) null, 0L);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      predicate1.negate();
      predicate1.and(predicate0);
      predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      predicate2.or(predicate1);
      Boolean.logicalAnd(false, false);
      Boolean.logicalXor(false, true);
      Boolean boolean0 = new Boolean("Z< LKL61w}jMW)p");
      try { 
        Short.valueOf("000", 70);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 70 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Short short0 = new Short((short) (-363));
      Short short1 = new Short((short) (-363));
      Short.toUnsignedLong((short) (-363));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JdT2qgRm";
      stringArray0[1] = "oclBK_:";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "c";
      stringArray0[5] = "";
      stringArray0[3] = "c";
      stringArray0[7] = "low";
      Short.toUnsignedInt((short) (-363));
      Short.toUnsignedLong((short) (-363));
      stringArray0[8] = "oclBK_:";
      JSONObject jSONObject0 = new JSONObject(short1, stringArray0);
      long long0 = jSONObject0.optLong("low", 1L);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.476941678592489
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Float float0 = new Float(27.7);
      Long.sum(0L, 0L);
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      BiFunction<String, Float, Float> biFunction0 = (BiFunction<String, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.replaceAll(biFunction0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      long long0 = jSONObject0.optLong("ex|GbOg'm=>x&n");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.8090776470490244
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 2333.164F);
      Integer integer0 = new Integer((-1534));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1534));
      Integer.compare((-3525), (-3525));
      Integer integer2 = new Integer((-1534));
      Integer integer3 = Integer.getInteger((String) null, integer2);
      Integer.remainderUnsigned(4, (-1534));
      Integer.getInteger((String) null, (-3525));
      linkedList0.offerLast(integer3);
      Integer.getInteger("isreplaceAll");
      Integer integer4 = new Integer((-3525));
      linkedList0.add(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer5 = new Integer(8192);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(8192);
      Integer integer8 = new Integer((-1570));
      Integer integer9 = new Integer((-1534));
      Integer integer10 = new Integer(13);
      JSONObject.quote("L?/C5r._Ib");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.950089105224377
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject(boolean0);
      try { 
        jSONObject0.getJSONArray("A JSONArray text must start with '['");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONArray text must start with '['\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.8767895290278123
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float float0 = new Float(3544.0F);
      Float float1 = new Float(3544.0F);
      JSONObject jSONObject0 = new JSONObject(float1);
      assertEquals(3, jSONObject0.length());
      
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) linkedList0);
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate2);
      Predicate<Object> predicate6 = predicate4.negate();
      Long long0 = new Long((-2053L));
      predicate0.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      predicate4.or(predicate7);
      Predicate<Object> predicate8 = predicate6.and(predicate5);
      Predicate<Object> predicate9 = predicate2.negate();
      Float float2 = new Float(Double.NaN);
      predicate8.and(predicate9);
      boolean boolean0 = predicate5.test(float2);
      assertFalse(boolean0);
      
      predicate8.and(predicate6);
      Float.min(3544.0F, 3544.0F);
      Double.sum(3544.0F, (-2250.47));
      Double.max(0.0, Double.NaN);
      Double.max((-2250.47), (-264.0));
      Double.min((-134.5759909), 0.0);
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Long long0 = new Long(0L);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "_F+zqjX7}pCw!d^I\"";
      stringArray0[1] = "acjd5ShMLBiCN&e,v 1";
      stringArray0[2] = "A3B\"`g2,,BM9/";
      stringArray0[3] = "AhNt";
      stringArray0[4] = "t";
      stringArray0[5] = "isset";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      JSONObject.testValidity(jSONObject0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double((-2866.1311412621603));
      JSONObject.quote("woQcY(a0IZ)]`-W|o");
      Float float0 = new Float(21.185444516042338);
      try { 
        Short.valueOf("", 83);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 83 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=1.998587878542509
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Byte byte0 = Byte.valueOf((byte) (-12));
      String[] stringArray0 = JSONObject.getNames((Object) byte0);
      Long long0 = Long.valueOf((long) (byte) (-12));
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      String string0 = "";
      String string1 = "JSONArray[";
      try { 
        Long.parseUnsignedLong("JSONArray[");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"JSONArray[\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 141
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Float.min(3555.3123F, 3555.3123F);
      Float.max(3555.3123F, 3555.3123F);
      Float.max(0.0F, 3555.3123F);
      Float.max(3555.3123F, (-5859.06F));
      Short short0 = Short.valueOf((short)15);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Short.compare((short)123, (short)114);
      predicate2.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Short.toUnsignedLong((short)49);
      predicate3.or(predicate0);
      Long long0 = new Long((short)2949);
      Predicate.isEqual((Object) long0);
      predicate0.or(predicate3);
      predicate1.negate();
      predicate2.and(predicate0);
      predicate3.negate();
      Float.isFinite(2338.0872F);
      Float.isFinite((short)2949);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optJSONObject("] is not a JSONArray.");
      try { 
        jSONObject0.getJSONObject("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=1.7741057932992026
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float.max(0.0F, 2333.164F);
      Integer integer0 = new Integer((-1534));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1534));
      Integer.remainderUnsigned((-1534), 128);
      linkedList0.add(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Double, Integer> function0 = (Function<Double, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Boolean> function1 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends Boolean>) function1);
      Function<Integer, LinkedList<String>> function2 = (Function<Integer, LinkedList<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends LinkedList<String>>) function2);
      unaryOperator0.compose((Function<? super Double, ? extends Integer>) function0);
      Integer integer2 = new Integer(57);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer((-46615936));
      Integer integer6 = new Integer(192);
      Integer integer7 = new Integer(57);
      Integer.getInteger("gO", 192);
      Integer integer8 = new Integer(13);
      Integer.sum(13, 2121);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "gO";
      stringArray0[1] = "gO";
      JSONObject jSONObject0 = new JSONObject("gO", stringArray0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Float float0 = new Float(28.034323859261747);
      Float float1 = new Float((-1813.7211F));
      Float.isFinite((-4727.1836F));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate1.or(predicate0);
      predicate0.negate();
      predicate3.test(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate0.and(predicate5);
      predicate1.negate();
      Predicate<Object> predicate6 = predicate4.or(predicate1);
      boolean boolean0 = new Boolean(false);
      predicate1.or(predicate4);
      predicate3.or(predicate2);
      Float.sum((-4727.1836F), (-4727.1836F));
      JSONObject.numberToString(float1);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(predicate6, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=1.8595625334445338
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=1.8595625334445338
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, 31L);
      try { 
        jSONObject0.get("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 146
  /*Coverage entropy=1.9934029148078776
  */
  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.max(0.0F, 2333.164F);
      Integer integer0 = new Integer((-1534));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1534));
      Integer.compare((-3525), (-3525));
      Integer integer2 = new Integer((-1534));
      Integer integer3 = Integer.getInteger((String) null, integer2);
      Integer.remainderUnsigned(4, (-1534));
      Integer.getInteger((String) null, (-3525));
      linkedList0.offerLast(integer3);
      Integer.getInteger("isreplaceAll");
      Integer integer4 = new Integer((-3525));
      linkedList0.add(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      Integer integer5 = new Integer(8192);
      Integer integer6 = new Integer(0);
      Integer integer7 = new Integer(8192);
      Integer integer8 = new Integer((-1570));
      Integer integer9 = new Integer((-1534));
      Integer integer10 = new Integer(13);
      JSONObject jSONObject0 = new JSONObject(integer6);
      try { 
        jSONObject0.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 147
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Float float0 = new Float(28.034323859261747);
      Float float1 = new Float((-1813.7211F));
      Long.sum(0L, 0L);
      Boolean boolean0 = new Boolean("9?F`DA^Tk54#3F_U[");
      Boolean.logicalXor(false, false);
      Boolean boolean1 = new Boolean(" of ");
      Boolean.logicalOr(false, true);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(false, false);
      Boolean.logicalXor(false, true);
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 148
  /*Coverage entropy=1.6264113734398318
  */
  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-599));
      Integer integer1 = new Integer(39);
      Integer.getInteger("] is not a Boolean.", integer1);
      linkedList0.spliterator();
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      Integer integer2 = new Integer((-599));
      Integer.getInteger("tcJ>J|nk 6;Wfvv", (-599));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer3 = new Integer(39);
      Integer.toUnsignedString((-599));
      Integer.getInteger("c$'ma", 2185);
      Integer.toUnsignedString((-3662));
      Integer integer4 = new Integer((int) integer3);
      Integer.getInteger("I 8&E_~& zNdJQ", (-599));
      Integer.sum((-1366), (-3662));
      linkedList0.add((Integer) null);
      Integer.remainderUnsigned((-3662), (-46));
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONObject0, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 149
  /*Coverage entropy=1.8205511332333781
  */
  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      String[] stringArray0 = new String[9];
      Float.min(0.0F, 609.6F);
      Float.max(0.0F, (-2668.78F));
      Short short0 = new Short((short)15);
      Float float0 = new Float(2733.46796769769);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) float0);
      Boolean.valueOf("iscompare");
      Double double0 = new Double(1328.4432);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate1.or(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      predicate3.and(predicate4);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      predicate3.test("iscompare");
      predicate0.and(predicate1);
      predicate5.test(predicate3);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate3.or(predicate5);
      Predicate<Object> predicate9 = predicate8.or(predicate5);
      predicate5.or(predicate7);
      predicate0.or(predicate8);
      predicate0.and(predicate6);
      predicate5.and(predicate6);
      predicate7.or(predicate3);
      predicate6.and(predicate9);
      predicate2.negate();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(0, jSONObject1.length());
  }

  /**
  //Test case number: 150
  /*Coverage entropy=1.7305017813188235
  */
  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      HashMap<Float, Byte> hashMap1 = new HashMap<Float, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      HashMap<Short, Double> hashMap2 = new HashMap<Short, Double>();
      Short.toUnsignedInt((short) (-1478));
      Double double0 = Double.valueOf((double) (short) (-1478));
      Double.isFinite((short) (-1478));
      Short short0 = new Short((short) (-1478));
      Double double1 = new Double((-783.8897223));
      Double double2 = new Double(64058);
      Short short1 = new Short((short)1420);
      Double.isFinite((-783.8897223));
      Short short2 = new Short((short)1420);
      Double double3 = new Double(0.0);
      Double.sum(0.0, 0.0);
      hashMap2.replace(short2, double0, double3);
      JSONObject.valueToString(double1, (short)1420, (short) (-1478));
      HashMap<Boolean, Integer> hashMap3 = new HashMap<Boolean, Integer>();
      assertEquals(0, hashMap3.size());
  }

  /**
  //Test case number: 151
  /*Coverage entropy=2.4329546353040983
  */
  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Float float0 = new Float(38.5358433040541);
      Float.sum((-1813.7211F), 0.0F);
      Float float1 = new Float((double) (-1813.7211F));
      JSONObject jSONObject0 = new JSONObject(float1);
      String string0 = "app";
      jSONObject0.optDouble("app", (-1.0));
      String string1 = null;
      jSONObject0.optInt((String) null);
      JSONObject jSONObject1 = new JSONObject((Object) "wb (I7O|-");
      try { 
        jSONObject1.put((String) null, 0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 152
  /*Coverage entropy=2.1478409965466247
  */
  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Long long0 = new Long(31L);
      JSONObject jSONObject0 = new JSONObject(long0);
      Long.compare(31L, (-1L));
      jSONObject0.optInt("$~Q$3Z_Shu*6zSyjF_", 26);
      try { 
        jSONObject0.put((String) null, 45);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 153
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Float, Boolean> hashMap0 = new HashMap<Float, Boolean>();
      try { 
        jSONObject0.put((String) null, (Map) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 154
  /*Coverage entropy=1.066278442414676
  */
  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      BiFunction<Object, Float, Float> biFunction0 = (BiFunction<Object, Float, Float>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = JSONObject.valueToString(biFunction0, 46, 3708);
      assertNotNull(string0);
  }

  /**
  //Test case number: 155
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      JSONObject.quote("2(!d}=A/");
      Boolean[] booleanArray0 = new Boolean[3];
      Boolean boolean0 = Boolean.valueOf("@'");
      Boolean.compare(false, false);
      Boolean.logicalAnd(false, false);
      booleanArray0[0] = boolean0;
      Boolean.logicalXor(false, (boolean) boolean0);
      Boolean boolean1 = new Boolean("Z< LKL61w}jMW)p");
      Boolean.logicalAnd(false, true);
      Boolean.logicalOr(true, false);
      Boolean.logicalAnd(true, false);
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, false);
      Boolean.logicalXor(true, true);
      Boolean.logicalAnd(true, true);
      Boolean.logicalXor(true, true);
      booleanArray0[0] = boolean1;
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
  }

  /**
  //Test case number: 156
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Float.max(0.0F, 2333.164F);
      Integer integer0 = new Integer((-1534));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer1 = new Integer((-1534));
      Integer.remainderUnsigned((-1534), (-1534));
      linkedList0.add(integer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Double, Integer> function0 = (Function<Double, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Integer, Boolean> function1 = (Function<Integer, Boolean>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends Boolean>) function1);
      Function<Integer, LinkedList<String>> function2 = (Function<Integer, LinkedList<String>>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends LinkedList<String>>) function2);
      unaryOperator0.compose((Function<? super Double, ? extends Integer>) function0);
      Integer integer2 = new Integer(57);
      Integer integer3 = new Integer((-1));
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer((-46615936));
      Integer integer6 = new Integer(192);
      linkedList0.pollFirst();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      StringWriter stringWriter0 = new StringWriter(192);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.close();
      StringWriter stringWriter2 = new StringWriter();
      JSONTokener jSONTokener0 = new JSONTokener("istoArray");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of istoArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 157
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, (-5859.06F));
      Short.toUnsignedInt((short)2949);
      Double double0 = new Double(0.0F);
      Double.min(3544.0F, Double.NaN);
      Double.min((short)15, 0.0);
      Double.min(0.0, 0.0);
      Double.sum(0.0, Double.NaN);
      Double.max(3544.0F, Double.NaN);
      Double.max(Double.NaN, (-3196.0));
      Double.min((-89.40274), Double.NaN);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 158
  /*Coverage entropy=1.5186310872822124
  */
  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Float.min(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, 3544.0F);
      Float.max(3544.0F, (-5859.06F));
      Short.toUnsignedInt((short)2949);
      Double double0 = new Double(0.0F);
      Double.min(3544.0F, Double.NaN);
      Double.min((short)15, 0.0);
      Double.max(0.0, (-3243.773600188));
      Double.min(0.0, 0.0);
      Double.sum(0.0, Double.NaN);
      Double.max(3544.0F, Double.NaN);
      Double.max(Double.NaN, (-3196.0));
      Double.min((-89.40274), Double.NaN);
      String string0 = JSONObject.valueToString(double0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 159
  /*Coverage entropy=2.087928158553481
  */
  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Float float0 = new Float(28.034323859261747);
      Float float1 = new Float((-1814.0F));
      Float.isFinite((-4727.1836F));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      predicate1.or(predicate0);
      predicate0.negate();
      predicate3.test(predicate2);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate4.negate();
      predicate0.and(predicate5);
      predicate1.negate();
      predicate4.or(predicate1);
      predicate3.test(predicate4);
      Predicate<Object> predicate6 = predicate1.or(predicate4);
      predicate3.or(predicate2);
      Float.min((-1814.0F), (-1610.6763F));
      Float.isFinite((-0.25620124F));
      Float.isFinite((-1610.6763F));
      Float.sum((-1610.6763F), 2390.647F);
      JSONObject jSONObject0 = new JSONObject(predicate6);
      int int0 = jSONObject0.optInt("V %QMnx+Ij\"|Q\"%");
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 160
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Float float0 = new Float((double) (-1855L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer((-599));
      Integer.remainderUnsigned((-599), (-599));
      Integer integer1 = new Integer(39);
      Integer.compareUnsigned((-18603944), (-54696266));
      Integer.toUnsignedString(60);
      Integer.getInteger("] is not a Boolean.", integer1);
      linkedList0.spliterator();
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      Integer integer2 = new Integer((-599));
      Integer.getInteger("tcJ>J|nk 6;Wfvv", (-599));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      Integer integer3 = new Integer(39);
      Integer.toUnsignedString((-599));
      Integer.getInteger("c$'ma", 2185);
      Integer.toUnsignedString((-3662));
      Integer integer4 = new Integer((int) integer3);
      Integer.getInteger("I 8&E_~& zNdJQ", (-599));
      Integer.sum((-1366), (-3662));
      linkedList0.add((Integer) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("c$'ma");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of c$'ma
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }
}
