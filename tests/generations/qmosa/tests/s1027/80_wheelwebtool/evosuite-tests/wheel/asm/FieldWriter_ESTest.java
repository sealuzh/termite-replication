/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 20:09:58 GMT 2019
 */

package wheel.asm;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import wheel.asm.AnnotationVisitor;
import wheel.asm.Attribute;
import wheel.asm.ByteVector;
import wheel.asm.ClassWriter;
import wheel.asm.FieldWriter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FieldWriter_ESTest extends FieldWriter_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.517229042621043
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-83));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275714), "", "", (String) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      classWriter0.version = 16777265;
      fieldWriter0.visitAnnotation("AAAAAAAAAAAAAAAABCKLLDDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAADDDDDEEEEEEEEEEEEEEEEEEEEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAAAAAAAAAAAAAAIIIIIIIIIIIIIIIIDNOAAAAAAGGGGGGGHAFBFAAFFAAQPIIJJIIIIIIIIIIIIIIIIII", false);
      FieldWriter fieldWriter1 = new FieldWriter(classWriter0, 1, "{? ,dIw", "", (String) null, (Object) null);
      fieldWriter1.visitAnnotation("\"H7sdZ5h0^VN", false);
      fieldWriter1.getSize();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      byte[] byteArray0 = classWriter0.toByteArray();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.read(byteArray0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      ByteVector byteVector1 = byteVector0.put12((-83), (-2519));
      fieldWriter1.put(byteVector0);
      fieldWriter0.put(byteVector1);
      assertSame(byteVector1, byteVector0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.2525306450725109
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(431);
      ClassWriter classWriter0 = new ClassWriter(2915);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2370, "", "wheel.asm.Attribute", "", (Object) null);
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      fieldWriter0.visitAttribute(attribute0);
      // Undeclared exception!
      try { 
        fieldWriter0.getSize();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3044117254799494
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(3);
      classWriter0.index = (-2290);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 32, "Synthetic", "CW3+D|3WfCWc)*YVRj&", "Synthetic", "Synthetic");
      fieldWriter0.getSize();
      classWriter0.index = 1174;
      fieldWriter0.visitAnnotation("", false);
      fieldWriter0.visitAnnotation("RuntimeInvisibleAnnotations", false);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("Synthetic");
      ByteVector byteVector2 = byteVector1.put12(1472, 1472);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        byteVector2.putByteArray(byteArray0, 1176, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5015319732185752
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      String string0 = "pdV&[wB[*`lb";
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "pdV&[wB[*`lb", "Signature", "pdV&[wB[*`lb", "Signature");
      Attribute attribute0 = new Attribute("pdV&[wB[*`lb");
      fieldWriter0.visitAttribute(attribute0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-77);
      byteArray0[5] = (byte) (-65);
      sequenceInputStream1.read(byteArray0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.available();
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      sequenceInputStream2.read(byteArray0, (int) (byte) (-77), 108);
      sequenceInputStream0.read(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream2, 1830);
      // Undeclared exception!
      try { 
        classWriter0.toByteArray();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.Attribute", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9859526183035509
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-73));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275714), "", "", "", "dV2[wB[*mlb");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      classWriter0.version = 431;
      FieldWriter fieldWriter2 = classWriter0.firstField;
      FieldWriter fieldWriter3 = classWriter0.lastField;
      int int0 = fieldWriter1.getSize();
      assertEquals(30, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.8361623253853443
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-83));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275714), "", "", (String) null, "");
      classWriter0.version = (-83);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      ByteVector byteVector0 = new ByteVector();
      fieldWriter0.put(byteVector0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-83));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = null;
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275713), "", "", (String) null, "");
      Attribute attribute0 = new Attribute((String) null);
      Attribute attribute1 = attribute0.next;
      // Undeclared exception!
      try { 
        fieldWriter0.visitAttribute((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5087598483524394
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(431);
      ClassWriter classWriter0 = new ClassWriter(2915);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2370, "", "wheel.asm.Attribute", "", (Object) null);
      Attribute attribute0 = new Attribute("RuntimeVisibleAnnotations");
      ByteVector byteVector1 = byteVector0.putByte(2915);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte) (-89);
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)100;
      byteArray0[5] = (byte)4;
      byteArray0[6] = (byte)49;
      attribute0.value = byteArray0;
      fieldWriter0.visitAttribute(attribute0);
      fieldWriter0.getSize();
      fieldWriter0.put(byteVector0);
      assertSame(byteVector0, byteVector1);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5087598483524394
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(65535);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "pdV&[wB[*`lb", "pdV&[wB[*`lb", "pdV&[wB[*`lb", (Object) null);
      fieldWriter0.visitAnnotation("The wildcard must not be null", true);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Enumeration<BufferedInputStream> enumeration1 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration1);
      byte[] byteArray0 = new byte[24];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-21);
      sequenceInputStream1.read();
      byteArray0[3] = (byte) (-69);
      byteArray0[4] = (byte) (-72);
      byteArray0[5] = (byte) (-76);
      sequenceInputStream1.read(byteArray0);
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      Enumeration<InputStream> enumeration3 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration3).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration3);
      sequenceInputStream3.read(byteArray0, (int) (byte) (-69), 65535);
      sequenceInputStream3.read(byteArray0, (-1123), 982);
      sequenceInputStream3.read(byteArray0);
      Enumeration<InputStream> enumeration4 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration4).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration4);
      Enumeration<BufferedInputStream> enumeration5 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration5).hasMoreElements();
      SequenceInputStream sequenceInputStream5 = new SequenceInputStream(enumeration5);
      byte[] byteArray1 = classWriter0.toByteArray();
      assertEquals(139, byteArray1.length);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(431);
      ClassWriter classWriter0 = new ClassWriter((-889275714));
      byteVector0.putInt(2);
      ByteVector byteVector1 = byteVector0.putUTF8("]l:pnKTz#RvOIp~Y1");
      byteVector1.length = (-1164);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "]l:pnKTz#RvOIp~Y1", "X", "RuntimeVisibleAnnotations", "]l:pnKTz#RvOIp~Y1");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-58);
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)16;
      byteArray0[5] = (byte)0;
      byteVector1.data = byteArray0;
      // Undeclared exception!
      try { 
        fieldWriter0.put(byteVector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0049055563281784
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "J]D(A?D=i5 &", "J]D(A?D=i5 &", "J]D(A?D=i5 &", (Object) null);
      ByteVector byteVector0 = new ByteVector(183);
      ByteVector byteVector1 = byteVector0.put11(131053, 1);
      ByteVector byteVector2 = byteVector0.put12(131053, 131053);
      ByteVector byteVector3 = byteVector0.put11(183, 1);
      ByteVector byteVector4 = byteVector2.putShort(34);
      ByteVector byteVector5 = byteVector2.putLong(2);
      ByteVector byteVector6 = byteVector0.put11(34, 124);
      byteVector5.put12(131053, 34);
      byteVector6.put11(1, 183);
      ByteVector byteVector7 = byteVector4.putByte(1);
      byteVector4.putInt(33);
      byteVector1.length = 31;
      byteVector0.put11(24, 1);
      byteVector6.putUTF8("J]D(A?D=i5 &");
      byteVector3.putByte(187);
      byteVector0.putByte(49);
      byteVector7.putByte((-499));
      ByteVector byteVector8 = byteVector3.put11(40, 1);
      fieldWriter0.put(byteVector8);
      FieldWriter fieldWriter1 = null;
      try {
        fieldWriter1 = new FieldWriter(classWriter0, 131053, "TF94v/|U~D<9+wx/", "J]D(A?D=i5 &", "J]D(A?D=i5 &", byteVector4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // value wheel.asm.ByteVector@8
         //
         verifyException("wheel.asm.ClassWriter", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5087598483524394
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "J]D(Ae?D=i5 &", "J]D(Ae?D=i5 &", "J]D(Ae?D=i5 &", (Object) null);
      ByteVector byteVector0 = new ByteVector(183);
      ByteVector byteVector1 = byteVector0.putUTF8("J]D(Ae?D=i5 &");
      byteVector0.putByte(131018);
      byteVector1.put11(183, 2);
      byteVector0.putShort(131018);
      ByteVector byteVector2 = byteVector0.putLong(1261L);
      byteVector1.put11(124, 188);
      ByteVector byteVector3 = byteVector1.put12(4096, 131018);
      byteVector1.putLong((-2721L));
      ByteVector byteVector4 = byteVector3.put11((-1431), (-196));
      ByteVector byteVector5 = byteVector4.putInt((-196));
      byteVector4.putByte(183);
      byteVector5.putByte(1125);
      ByteVector byteVector6 = byteVector5.putInt((-1431));
      byteVector2.putInt((-1431));
      byteVector6.putInt(4096);
      byteVector5.put11(188, 1125);
      classWriter0.toByteArray();
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("wi3)EWevGk(O|94(&'n", true);
      assertNotNull(annotationVisitor0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0108643020548935
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Q)QTDJ{Hp", "Q)QTDJ{Hp", "Q)QTDJ{Hp", (Object) null);
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("Q)QTDJ{Hp");
      ByteVector byteVector2 = byteVector1.putByte(124);
      ByteVector byteVector3 = byteVector0.putInt(131053);
      ByteVector byteVector4 = byteVector1.putUTF8("Q)QTDJ{Hp");
      byteVector1.putByteArray((byte[]) null, 1360, 1357);
      ByteVector byteVector5 = byteVector2.putUTF8("Q)QTDJ{Hp");
      byteVector5.put11(183, 124);
      ByteVector byteVector6 = byteVector4.putUTF8("Q)QTDJ{Hp");
      ByteVector byteVector7 = byteVector6.putInt((-196));
      byteVector7.putByte(1125);
      ByteVector byteVector8 = byteVector7.putInt((-1431));
      ByteVector byteVector9 = byteVector1.putInt(70);
      byteVector8.put12((-1431), 839);
      byteVector3.putUTF8("Q)QTDJ{Hp");
      ByteVector byteVector10 = byteVector9.put12((-1543), 70);
      byteVector1.putShort((-1));
      ByteVector byteVector11 = byteVector1.putUTF8("Q)QTDJ{Hp");
      byteVector11.put11(183, (-1));
      byteVector10.putUTF8("Q)QTDJ{Hp");
      byteVector0.putLong(418L);
      int int0 = fieldWriter0.getSize();
      assertEquals(16, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8659992569610426
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "Q)3Q8GJ{Hv", "Q)3Q8GJ{Hv", "Q)3Q8GJ{Hv", "Q)3Q8GJ{Hv");
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("Q)3Q8GJ{Hv");
      ByteVector byteVector2 = byteVector0.putShort(131053);
      byteVector1.putByte(84);
      ByteVector byteVector3 = byteVector2.putInt(131053);
      ByteVector byteVector4 = byteVector1.putUTF8("Q)3Q8GJ{Hv");
      byteVector1.putByteArray((byte[]) null, 1360, 1357);
      ByteVector byteVector5 = byteVector1.put11(84, 131053);
      byteVector5.put11(183, 84);
      ByteVector byteVector6 = byteVector4.putUTF8("Q)3Q8GJ{Hv");
      ByteVector byteVector7 = byteVector6.putInt((-196));
      byteVector7.putByte(1125);
      ByteVector byteVector8 = byteVector7.putInt((-1431));
      ByteVector byteVector9 = byteVector2.putInt(70);
      byteVector8.put12((-1431), 839);
      byteVector3.putUTF8("Q)3Q8GJ{Hv");
      byteVector9.put12((-1543), 70);
      byteVector1.putShort((-1));
      ByteVector byteVector10 = byteVector1.putUTF8("Q)3Q8GJ{Hv");
      byteVector10.put11(183, (-1));
      byteVector8.putShort(70);
      byteVector2.putLong(418L);
      fieldWriter0.put(byteVector7);
      assertSame(byteVector6, byteVector7);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(431);
      byteVector0.length = 2;
      ClassWriter classWriter0 = new ClassWriter((-889275714));
      int int0 = 2;
      byteVector0.putInt(2);
      ByteVector byteVector1 = byteVector0.putUTF8("]l:pnKTz#RvOIp~Y1");
      byteVector1.put11(431, (-1754));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "]l:pnKTz#RvOIp~Y1", "X", "RuntimeVisibleAnnotations", "]l:pnKTz#RvOIp~Y1");
      // Undeclared exception!
      try { 
        fieldWriter0.put((ByteVector) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.49057893774639
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-73));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, (-889275714), "", "", (String) null, "");
      FieldWriter fieldWriter1 = classWriter0.lastField;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "M({)R;*4");
      classWriter0.version = 16777222;
      fieldWriter1.visitAnnotation("", false);
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      classWriter0.toByteArray();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        fieldWriter1.visitAnnotation((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter(183);
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 1, "J]D(A?D=i5 &", "J]D(A?D=i5 &", "J]D(A?D=i5 &", (Object) null);
      ByteVector byteVector0 = new ByteVector(183);
      ByteVector byteVector1 = byteVector0.putUTF8("J]D(A?D=i5 &");
      byteVector0.putByte(131053);
      ByteVector byteVector2 = byteVector0.putShort(131053);
      byteVector1.putByte(124);
      byteVector2.putInt(131053);
      byteVector1.put11(124, 188);
      ByteVector byteVector3 = byteVector1.put12(4096, 131053);
      ByteVector byteVector4 = byteVector3.put11((-1431), (-196));
      ByteVector byteVector5 = byteVector4.putInt((-196));
      ByteVector byteVector6 = byteVector5.putByte(4878);
      ByteVector byteVector7 = byteVector6.put12(1, (-196));
      ByteVector byteVector8 = byteVector2.putInt(70);
      byteVector8.put12((-1543), 70);
      byteVector1.putShort((-1));
      ByteVector byteVector9 = byteVector3.put11((-1), 70);
      byteVector9.put11(22, (-1));
      byteVector7.putShort(70);
      byteVector2.putLong(408L);
      AnnotationVisitor annotationVisitor0 = fieldWriter0.visitAnnotation("", false);
      assertNotNull(annotationVisitor0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ClassWriter classWriter0 = new ClassWriter((-2685));
      FieldWriter fieldWriter0 = new FieldWriter(classWriter0, 2, "8FQWqQiZtbM+1#qSN", "8FQWqQiZtbM+1#qSN", "8FQWqQiZtbM+1#qSN", "8FQWqQiZtbM+1#qSN");
      ByteVector byteVector0 = new ByteVector(1);
      fieldWriter0.visitEnd();
      ByteVector byteVector1 = byteVector0.putInt((-2685));
      ByteVector byteVector2 = byteVector1.putLong(0L);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      byteVector2.putLong(0L);
      PipedOutputStream pipedOutputStream0 = null;
      try {
        pipedOutputStream0 = new PipedOutputStream((PipedInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ClassWriter classWriter0 = null;
      String string0 = null;
      FieldWriter fieldWriter0 = null;
      try {
        fieldWriter0 = new FieldWriter((ClassWriter) null, (-1), (String) null, "sI-IBpq Ahs", "D=", "D=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.asm.FieldWriter", e);
      }
  }
}
