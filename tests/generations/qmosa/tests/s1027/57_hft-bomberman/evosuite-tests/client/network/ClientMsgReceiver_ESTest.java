/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:00:46 GMT 2019
 */

package client.network;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import client.BomberClient;
import client.network.ClientMsgReceiver;
import java.awt.HeadlessException;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.net.Proxy;
import java.net.Socket;
import java.sql.SQLFeatureNotSupportedException;
import java.sql.SQLTimeoutException;
import java.sql.SQLTransactionRollbackException;
import messages.Message;
import messages.global.GlobalStateMsg;
import messages.round.ClientQuitRunningSessionMsg;
import messages.round.CountdownMsg;
import messages.session.SessionParticipationMsg;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ClientMsgReceiver_ESTest extends ClientMsgReceiver_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      MockThread.getAllStackTraces();
      String string0 = "";
      MockThread.getDefaultUncaughtExceptionHandler();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      ClassLoader classLoader0 = clientMsgReceiver0.getContextClassLoader();
      boolean boolean0 = true;
      classLoader0.setDefaultAssertionStatus(boolean0);
      clientMsgReceiver0.setContextClassLoader(classLoader0);
      int int0 = 0;
      SessionParticipationMsg sessionParticipationMsg0 = new SessionParticipationMsg(boolean0, int0, string0);
      clientMsgReceiver0.processMsg(sessionParticipationMsg0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.displayErrorMessage();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 1);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      mockSocket0.setSoLinger(false, (-277));
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = 561;
      CountdownMsg countdownMsg0 = new CountdownMsg(int0);
      clientMsgReceiver0.processMsg(countdownMsg0);
      clientMsgReceiver0.processMsg(countdownMsg0);
      assertEquals(0, clientMsgReceiver0.countStackFrames());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fIaR-SA.5TjE.a", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "fIaR-SA.5TjE.a", 1905, sQLTimeoutException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("'RCs'o", "y", "vTbEh8{MoTdq", 1055);
      SQLTimeoutException sQLTimeoutException2 = new SQLTimeoutException("fIaR-SA.5TjE.a", "'RCs'o", 2466, sQLTimeoutException0);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[8];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("'RCs'o", "}G\",2NwwP3ab", "awc*]u", 320);
      stackTraceElementArray0[4] = stackTraceElement1;
      stackTraceElementArray0[5] = stackTraceElement0;
      stackTraceElementArray0[6] = stackTraceElement0;
      stackTraceElementArray0[7] = stackTraceElement0;
      sQLTimeoutException2.setStackTrace(stackTraceElementArray0);
      Message message0 = null;
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      MockThread.dumpStack();
      clientMsgReceiver0.processMsg(message0);
      assertEquals(0, clientMsgReceiver0.countStackFrames());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException("fIaR-SA.5TjE.a", sQLTimeoutException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException("Autowall ausf\u00FChren...", "fIaR-SA.5TjE.a", 3583, sQLTimeoutException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("Autowall ausf\u00FChren...", "Autowall ausf\u00FChren...", "y", 3583);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement0;
      sQLTimeoutException1.setStackTrace(stackTraceElementArray0);
      Message message0 = null;
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      MockThread.dumpStack();
      clientMsgReceiver0.processMsg(message0);
      assertEquals(0, clientMsgReceiver0.countStackFrames());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      int int0 = (-3475);
      GlobalStateMsg globalStateMsg0 = new GlobalStateMsg(int0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(globalStateMsg0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetAddress inetAddress0 = MockInetAddress.getByName("");
      MockInetSocketAddress mockInetSocketAddress0 = new MockInetSocketAddress(inetAddress0, 0);
      Proxy proxy0 = new Proxy(proxy_Type0, mockInetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      ClientQuitRunningSessionMsg clientQuitRunningSessionMsg0 = new ClientQuitRunningSessionMsg(65);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.processMsg(clientQuitRunningSessionMsg0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLFeatureNotSupportedException sQLFeatureNotSupportedException0 = new SQLFeatureNotSupportedException((String) null, sQLTimeoutException0);
      sQLTimeoutException0.setNextException(sQLFeatureNotSupportedException0);
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, "common.GameLoop", 30000, sQLTimeoutException0);
      StackTraceElement stackTraceElement0 = new StackTraceElement("!X%W4YL:O(XhqPQJ7", "f4},c\"ak|P#WMOEL=QR", "CONNECTION LOST", 30000);
      StackTraceElement stackTraceElement1 = new StackTraceElement("40K2xj Q*sYB", "", "common.GameLoop", 607);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement1;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement1;
      stackTraceElementArray0[5] = stackTraceElement1;
      stackTraceElementArray0[6] = stackTraceElement1;
      stackTraceElementArray0[7] = stackTraceElement1;
      stackTraceElementArray0[8] = stackTraceElement1;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLFeatureNotSupportedException0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)63;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)18;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)1;
      byteArray0[6] = (byte) (-75);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ClientMsgReceiver clientMsgReceiver0 = null;
      try {
        clientMsgReceiver0 = new ClientMsgReceiver((Socket) null, (BomberClient) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("common.network.MsgReceiver", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      BomberClient bomberClient0 = BomberClient.getInstance();
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, bomberClient0);
      MockThread.getAllStackTraces();
      // Undeclared exception!
      try { 
        clientMsgReceiver0.closeConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("client.network.ClientMsgReceiver", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Proxy.Type proxy_Type0 = Proxy.Type.SOCKS;
      InetSocketAddress inetSocketAddress0 = MockInetSocketAddress.createUnresolved("Couldn't close input stream", 2754);
      Proxy proxy0 = new Proxy(proxy_Type0, inetSocketAddress0);
      MockSocket mockSocket0 = new MockSocket(proxy0);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      SQLTransactionRollbackException sQLTransactionRollbackException0 = new SQLTransactionRollbackException();
      SQLTransactionRollbackException sQLTransactionRollbackException1 = new SQLTransactionRollbackException("Couldn't close input stream", "Couldn't close input stream", 2754, sQLTransactionRollbackException0);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLTransactionRollbackException1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockSocket mockSocket0 = new MockSocket();
      SQLTimeoutException sQLTimeoutException0 = new SQLTimeoutException();
      SQLTimeoutException sQLTimeoutException1 = new SQLTimeoutException((String) null, (String) null);
      StackTraceElement stackTraceElement0 = new StackTraceElement("huC%<<J8u6T5`L<R)d", "huC%<<J8u6T5`L<R)d", "CONNECTION LOST", 30000);
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[9];
      stackTraceElementArray0[0] = stackTraceElement0;
      stackTraceElementArray0[1] = stackTraceElement0;
      stackTraceElementArray0[2] = stackTraceElement0;
      stackTraceElementArray0[3] = stackTraceElement0;
      stackTraceElementArray0[4] = stackTraceElement0;
      stackTraceElementArray0[5] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "huC%<<J8u6T5`L<R)d", "", 30000);
      stackTraceElementArray0[6] = stackTraceElement1;
      stackTraceElementArray0[7] = stackTraceElement0;
      stackTraceElementArray0[8] = stackTraceElement0;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray0);
      StackTraceElement stackTraceElement2 = new StackTraceElement("huC%<<J8u6T5`L<R)d", "CONNECTION LOST", "Ks>", 614);
      StackTraceElement[] stackTraceElementArray1 = new StackTraceElement[8];
      stackTraceElementArray1[0] = stackTraceElement0;
      stackTraceElementArray1[1] = stackTraceElement2;
      stackTraceElementArray1[2] = stackTraceElement0;
      StackTraceElement stackTraceElement3 = new StackTraceElement("Ks>", "Ks>", "0uj{^s7h?", 1);
      StackTraceElement stackTraceElement4 = new StackTraceElement("nm1eRR|zg@ZT)3{EN41", "CONNECTION LOST", "huC%<<J8u6T5`L<R)d", 30000);
      StackTraceElement[] stackTraceElementArray2 = new StackTraceElement[8];
      stackTraceElementArray2[0] = stackTraceElement0;
      stackTraceElementArray2[1] = stackTraceElement2;
      stackTraceElementArray2[2] = stackTraceElement2;
      stackTraceElementArray2[3] = stackTraceElement2;
      stackTraceElementArray2[4] = stackTraceElement3;
      stackTraceElementArray2[5] = stackTraceElement0;
      stackTraceElementArray2[6] = stackTraceElement2;
      stackTraceElementArray2[7] = stackTraceElement0;
      sQLTimeoutException0.setStackTrace(stackTraceElementArray2);
      ClientMsgReceiver clientMsgReceiver0 = new ClientMsgReceiver(mockSocket0, (BomberClient) null);
      // Undeclared exception!
      try { 
        clientMsgReceiver0.handleConnectionLoss(sQLTimeoutException1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
