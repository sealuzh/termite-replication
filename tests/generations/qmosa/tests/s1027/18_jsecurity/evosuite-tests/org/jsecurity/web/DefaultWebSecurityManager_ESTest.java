/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 20:40:36 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.util.Collection;
import java.util.Enumeration;
import java.util.LinkedHashSet;
import java.util.function.Consumer;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.UsernamePasswordToken;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.subject.DelegatingSubject;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.RememberMeManager;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.jsecurity.web.WebRememberMeManager;
import org.jsecurity.web.session.DefaultWebSessionManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletRequestWrapper0.setRequest(servletRequestWrapper2);
      Session session0 = null;
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7133436025807014
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setPassword((char[]) null);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", "org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false", false);
      usernamePasswordToken0.clear();
      usernamePasswordToken1.toString();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("b>O,87i", (char[]) null);
      usernamePasswordToken1.clear();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.setUsername("Authorizer ar$mBntc!nnot be nul(");
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("LbM", (char[]) null);
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken();
      usernamePasswordToken4.setRememberMe(false);
      usernamePasswordToken3.setPassword((char[]) null);
      usernamePasswordToken1.setPassword((char[]) null);
      defaultWebSecurityManager0.isHttpSessionMode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1000L);
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.280212009358481
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setRememberMe(true);
      usernamePasswordToken0.setPassword((char[]) null);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.clear();
      usernamePasswordToken1.toString();
      usernamePasswordToken1.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("Authorizer ar$mBntc!nnot be nul(", (char[]) null);
      usernamePasswordToken2.clear();
      usernamePasswordToken1.setPassword((char[]) null);
      usernamePasswordToken1.setUsername("dtAF#$XXM");
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("Account ucessfulyauthenticated using realm of type [", (char[]) null);
      usernamePasswordToken2.clear();
      usernamePasswordToken3.setRememberMe(true);
      usernamePasswordToken3.setPassword((char[]) null);
      usernamePasswordToken3.setPassword((char[]) null);
      usernamePasswordToken2.setUsername("jsecurity");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken();
      usernamePasswordToken2.clear();
      MockInetAddress.getLocalHost();
      System.setCurrentTimeMillis((-2545L));
      defaultWebSecurityManager0.setSessionIdCookieName("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      defaultWebSecurityManager0.setSessionIdCookieSecure(true);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setPassword((char[]) null);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken1.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("i`", (char[]) null);
      usernamePasswordToken0.clear();
      usernamePasswordToken2.clear();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken1.setUsername("Authorizer ar$mBntc!nnot be nul(");
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("bQ@-!:DCmKT$uC", (char[]) null);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      usernamePasswordToken2.setInetAddress(inetAddress0);
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken();
      usernamePasswordToken1.setRememberMe(false);
      usernamePasswordToken1.setPassword((char[]) null);
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.setUsername("Wy5]8z'");
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.asList();
      simplePrincipalCollection0.iterator();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = null;
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.839277872916956
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      char[] charArray0 = new char[4];
      charArray0[0] = ')';
      charArray0[1] = '#';
      charArray0[2] = '3';
      charArray0[3] = 'F';
      usernamePasswordToken0.setPassword(charArray0);
      char[] charArray1 = new char[0];
      usernamePasswordToken0.setPassword(charArray1);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.clear();
      defaultWebSecurityManager0.getSessionMode();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", ":=g>(XCW5oip<V5Khb");
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("Attempted to reset the LoggerFactory without possessing the guard.", charArray1);
      usernamePasswordToken3.setPassword(charArray1);
      usernamePasswordToken3.clear();
      MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.614523535698504
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((Enumeration) null).when(servletRequest0).getLocales();
      doReturn((Enumeration) null).when(servletRequest0).getParameterNames();
      doReturn((String) null, (String) null, (String) null, (String) null).when(servletRequest0).getProtocol();
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper3);
      servletRequestWrapper1.getProtocol();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper4.getProtocol();
      servletRequestWrapper3.getProtocol();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.index");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection1, true, (Session) null, (ServletRequest) servletRequestWrapper6, (ServletResponse) servletResponseWrapper0);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper8 = new ServletRequestWrapper(servletRequestWrapper2);
      servletRequestWrapper3.setRequest(servletRequestWrapper8);
      servletRequestWrapper6.getParameterNames();
      ServletRequestWrapper servletRequestWrapper9 = new ServletRequestWrapper(servletRequestWrapper6);
      servletRequestWrapper4.getLocales();
      ServletRequestWrapper servletRequestWrapper10 = new ServletRequestWrapper(servletRequestWrapper8);
      servletRequestWrapper6.setRequest(servletRequestWrapper10);
      ServletRequestWrapper servletRequestWrapper11 = new ServletRequestWrapper(servletRequestWrapper4);
      ServletRequestWrapper servletRequestWrapper12 = new ServletRequestWrapper(servletRequestWrapper11);
      servletRequestWrapper1.getProtocol();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletRequestWrapper servletRequestWrapper13 = new ServletRequestWrapper(servletRequestWrapper10);
      assertFalse(servletRequestWrapper13.equals((Object)servletRequestWrapper6));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.614523535698504
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getProtocol();
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper3);
      servletRequestWrapper1.getProtocol();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper3.getProtocol();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection1, false, (Session) null, (ServletRequest) servletRequestWrapper6, (ServletResponse) servletResponseWrapper0);
      Boolean boolean0 = new Boolean("_IJckJ4J");
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      Boolean boolean1 = new Boolean("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper3);
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      assertTrue(linkedHashSet0.isEmpty());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.02213804256327
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)29;
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)48;
      byteArray0[5] = (byte)29;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-38);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http");
      defaultWebSecurityManager0.isHttpSessionMode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookieName((String) null);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getProtocol();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper6.getProtocol();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "<H5G{_sJTD'Gx%G{6M");
      defaultWebSecurityManager0.getPrincipals((Session) null);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequestWrapper6, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.726516755607659
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getProtocol();
      doReturn((String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper3);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper3);
      ServletRequestWrapper servletRequestWrapper7 = new ServletRequestWrapper(servletRequestWrapper3);
      servletRequestWrapper3.getProtocol();
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper3);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper3);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.createSubject((ServletRequest) servletRequestWrapper5, (ServletResponse) servletResponseWrapper1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8348931748336599
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken("jsecurity", "]V(K2BO");
      usernamePasswordToken0.clear();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager1.getRememberMeManager();
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      defaultWebSecurityManager1.getRememberMeManager();
      defaultWebSecurityManager0.setRememberMeManager((RememberMeManager) null);
      String string0 = "?wfx";
      defaultWebSecurityManager0.setSessionMode("http");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager2.setSessionMode("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-1);
      byteArray0[2] = (byte)29;
      byteArray0[3] = (byte)48;
      byteArray0[4] = (byte)59;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "qTVe4.;");
      byteArray0[5] = (byte)0;
      byteArray0[6] = (byte) (-74);
      byteArray0[7] = (byte) (-1);
      byteArray0[8] = (byte) (-38);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "!nOYJ\"ctX,tke\"a}X1");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("http");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletRequest0).getProtocol();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper2.getProtocol();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper0.getWriter();
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      defaultWebSecurityManager0.bind(delegatingSubject0, servletRequestWrapper2, servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      assertFalse(servletResponseWrapper4.equals((Object)servletResponseWrapper1));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.018703762168135
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setRememberMe(false);
      usernamePasswordToken0.setPassword((char[]) null);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken1.toString();
      usernamePasswordToken0.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("b>O,87i", (char[]) null);
      usernamePasswordToken1.clear();
      usernamePasswordToken1.clear();
      usernamePasswordToken0.setPassword((char[]) null);
      usernamePasswordToken0.setUsername("Authorizer ar$mBntc!nnot be nul(");
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("jKeaJRTz{", (char[]) null);
      InetAddress inetAddress0 = MockInetAddress.anyLocalAddress();
      usernamePasswordToken3.setInetAddress(inetAddress0);
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken();
      usernamePasswordToken4.setRememberMe(false);
      usernamePasswordToken3.setPassword((char[]) null);
      usernamePasswordToken1.setPassword((char[]) null);
      usernamePasswordToken1.setUsername("c,w`XK=Xcr=/VH\\");
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      defaultWebSecurityManager0.setSessionIdCookiePath("org.jsecurity.authc.UsernamePasswordToken - null, rememberMe=false");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.127692792574359
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", "org.jsecurity.authc.credential.Sha384CredentialsMatcher");
      char[] charArray0 = new char[0];
      usernamePasswordToken0.setPassword(charArray0);
      usernamePasswordToken0.clear();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "org.jsecurity.authc.credential.Sha384CredentialsMatcher");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      DefaultWebSessionManager defaultWebSessionManager0 = new DefaultWebSessionManager();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      defaultWebSecurityManager0.setSessionIdCookieMaxAge(425);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
      
      MockInetAddress.getLocalHost();
      defaultWebSecurityManager0.setSessionMode("http");
      defaultWebSecurityManager0.isHttpSessionMode();
      defaultWebSecurityManager0.newSessionManagerInstance();
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("http", string0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("W|o}ub<|}pV>");
      Permission permission0 = wildcardPermissionResolver1.resolvePermission("fJ");
      WildcardPermission wildcardPermission0 = new WildcardPermission("b\"@`%-F7NP<e*uA8E");
      permission0.implies(wildcardPermission0);
      WildcardPermission wildcardPermission1 = new WildcardPermission("b\"@`%-F7NP<e*uA8E", false);
      wildcardPermission1.implies(permission0);
      permission0.implies(wildcardPermission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission("oSfeaU+<vH|CD");
      permission0.implies(wildcardPermission2);
      Permission permission1 = wildcardPermissionResolver1.resolvePermission("fJ");
      Permission permission2 = wildcardPermissionResolver1.resolvePermission("fJ");
      WildcardPermission wildcardPermission3 = new WildcardPermission("b\"@`%-F7NP<e*uA8E");
      wildcardPermission3.implies(permission0);
      permission2.implies(wildcardPermission3);
      permission2.implies(wildcardPermission1);
      WildcardPermission wildcardPermission4 = new WildcardPermission("fJ", true);
      permission0.implies(permission1);
      wildcardPermission1.implies((Permission) null);
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver2.resolvePermission("i");
      wildcardPermissionResolver2.resolvePermission("oSfeaU+<vH|CD");
      Permission permission3 = wildcardPermissionResolver2.resolvePermission("i");
      permission1.implies(permission3);
      System.setCurrentTimeMillis(1615L);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("W|o}ub<|}pV>");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1077));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64(";NbfVo#");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.677224510844138
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken();
      usernamePasswordToken0.clear();
      usernamePasswordToken0.toString();
      usernamePasswordToken0.setPassword((char[]) null);
      UsernamePasswordToken usernamePasswordToken1 = new UsernamePasswordToken();
      usernamePasswordToken1.toString();
      usernamePasswordToken1.clear();
      UsernamePasswordToken usernamePasswordToken2 = new UsernamePasswordToken("jsecurity", "Authorizer argument cannot be null.");
      UsernamePasswordToken usernamePasswordToken3 = new UsernamePasswordToken("Authorizer argument cannot be null.", (char[]) null);
      usernamePasswordToken3.clear();
      usernamePasswordToken1.setUsername("dtAF#$XXM");
      UsernamePasswordToken usernamePasswordToken4 = new UsernamePasswordToken("Account successfully authenticated using realm of type [", (char[]) null);
      usernamePasswordToken4.setPassword((char[]) null);
      usernamePasswordToken4.setPassword((char[]) null);
      UsernamePasswordToken usernamePasswordToken5 = new UsernamePasswordToken();
      usernamePasswordToken3.clear();
      MockInetAddress.getLocalHost();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("InputStream ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [InputStream ].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookiePath("J(p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      defaultWebSecurityManager0.setPermissionResolver(wildcardPermissionResolver0);
      DelegatingSubject delegatingSubject0 = new DelegatingSubject(defaultWebSecurityManager0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind(delegatingSubject0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.6121021778309688
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      defaultWebSecurityManager1.setRememberMeCookiePath("~fOz");
      Session session0 = null;
      defaultWebSecurityManager1.getPrincipals((Session) null);
      defaultWebSecurityManager1.newSessionManagerInstance();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-1));
      Integer.getInteger("(^2[F*V(2j6W%4");
      defaultWebSecurityManager1.setRememberMeCookieMaxAge(integer1);
      defaultWebSecurityManager1.isAuthenticated((Session) null);
      defaultWebSecurityManager0.isHttpSessionMode();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setSessionIdCookiePath("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.8578432764245911
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      UsernamePasswordToken usernamePasswordToken0 = new UsernamePasswordToken("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY", "org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      usernamePasswordToken0.clear();
      DefaultWebSessionManager defaultWebSessionManager0 = new DefaultWebSessionManager();
      defaultWebSecurityManager0.setSessionMode("http");
      defaultWebSecurityManager0.isHttpSessionMode();
      Integer integer0 = new Integer(1863);
      Integer integer1 = new Integer(1863);
      Integer.getInteger("jsecurity");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(authenticationListener0);
      defaultWebSecurityManager0.setAuthenticationListeners(linkedHashSet0);
      EvoSuiteFile evoSuiteFile1 = null;
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedHashSet<AuthenticationListener> linkedHashSet0 = new LinkedHashSet<AuthenticationListener>();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      linkedHashSet0.add(authenticationListener0);
      AuthenticationListener authenticationListener1 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      defaultWebSecurityManager0.setAuthenticationListeners(linkedHashSet0);
      EvoSuiteFile evoSuiteFile1 = null;
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(false);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("W|o}ub<|}pV>");
      Permission permission0 = wildcardPermissionResolver1.resolvePermission("fJ");
      WildcardPermission wildcardPermission0 = new WildcardPermission("b\"@`%-F7NP<e*uA8E");
      permission0.implies(wildcardPermission0);
      WildcardPermission wildcardPermission1 = new WildcardPermission("b\"@`%-F7NP<e*uA8E", false);
      wildcardPermission1.implies(permission0);
      permission0.implies(wildcardPermission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission("oSfeaU+<vH|CD");
      permission0.implies(wildcardPermission2);
      Permission permission1 = wildcardPermissionResolver1.resolvePermission("fJ");
      Permission permission2 = wildcardPermissionResolver1.resolvePermission("fJ");
      WildcardPermission wildcardPermission3 = new WildcardPermission("b\"@`%-F7NP<e*uA8E");
      wildcardPermission3.implies(permission0);
      permission2.implies(wildcardPermission3);
      permission2.implies(wildcardPermission1);
      WildcardPermission wildcardPermission4 = new WildcardPermission("fJ", true);
      permission0.implies(permission1);
      wildcardPermission1.implies((Permission) null);
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver2.resolvePermission("i");
      wildcardPermissionResolver2.resolvePermission("oSfeaU+<vH|CD");
      Permission permission3 = wildcardPermissionResolver2.resolvePermission("i");
      permission1.implies(permission3);
      System.setCurrentTimeMillis(1595L);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("W|o}ub<|}pV>");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1077));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.asList();
      Class<Boolean> class0 = Boolean.class;
      simplePrincipalCollection0.byType(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.asList();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection1.iterator();
      Class<Integer> class1 = Integer.TYPE;
      Class<Object> class2 = Object.class;
      simplePrincipalCollection0.byType(class2);
      simplePrincipalCollection1.iterator();
      simplePrincipalCollection0.addAll((PrincipalCollection) simplePrincipalCollection1);
      simplePrincipalCollection1.oneByType((Class<Integer>) null);
      simplePrincipalCollection1.asList();
      Class<WebRememberMeManager> class3 = WebRememberMeManager.class;
      Class<SimplePrincipalCollection> class4 = SimplePrincipalCollection.class;
      simplePrincipalCollection1.oneByType(class4);
      simplePrincipalCollection1.asSet();
      simplePrincipalCollection1.byType(class3);
      simplePrincipalCollection0.clear();
      simplePrincipalCollection1.add(class0, "%w1VamBd;+guh");
      simplePrincipalCollection1.iterator();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      simplePrincipalCollection1.clear();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0, "W|o}ub<|}pV>");
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("Vwfn");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("Vwfn");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [Vwfn].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.asList();
      Class<Boolean> class0 = Boolean.class;
      simplePrincipalCollection0.byType((Class<Boolean>) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.forEach(consumer0);
      simplePrincipalCollection0.asList();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection1.iterator();
      Class<Integer> class1 = Integer.TYPE;
      simplePrincipalCollection1.oneByType((Class<Integer>) null);
      Class<WebRememberMeManager> class2 = WebRememberMeManager.class;
      simplePrincipalCollection1.asSet();
      simplePrincipalCollection1.byType(class2);
      simplePrincipalCollection1.add(class0, "%w1VamBd;+guh");
      Class<SimplePrincipalCollection> class3 = SimplePrincipalCollection.class;
      simplePrincipalCollection1.iterator();
      simplePrincipalCollection0.oneByType(class3);
      simplePrincipalCollection1.clear();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection0, "W|o}ub<|}pV>");
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("Vwfn");
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, (ServletRequest) null, servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver1.resolvePermission("f>;J");
      Permission permission1 = wildcardPermissionResolver1.resolvePermission("f>;J");
      WildcardPermission wildcardPermission0 = new WildcardPermission("oSfeaU+<vH|D");
      Boolean boolean0 = Boolean.TRUE;
      permission1.implies(wildcardPermission0);
      permission1.implies((Permission) null);
      Permission permission2 = wildcardPermissionResolver1.resolvePermission("f>;J");
      permission1.implies(wildcardPermission0);
      Permission permission3 = wildcardPermissionResolver0.resolvePermission("oSfeaU+<vH|D");
      permission2.implies(permission1);
      permission3.implies(wildcardPermission0);
      Permission permission4 = wildcardPermissionResolver1.resolvePermission("YYyt&CxI0,?1K_]7<");
      permission2.implies(permission3);
      permission2.implies(wildcardPermission0);
      Permission permission5 = wildcardPermissionResolver1.resolvePermission("f>;J");
      permission5.implies(permission2);
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission1 = new WildcardPermission("f>;J");
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      Permission permission6 = wildcardPermissionResolver4.resolvePermission("f>;J");
      Boolean boolean1 = Boolean.FALSE;
      WildcardPermission wildcardPermission2 = new WildcardPermission("oSfeaU+<vH|D");
      wildcardPermission0.implies(permission6);
      permission1.implies(permission4);
      permission0.implies(permission1);
      WildcardPermission wildcardPermission3 = new WildcardPermission("YYyt&CxI0,?1K_]7<", false);
      wildcardPermission0.implies(permission2);
      permission0.implies(permission5);
      WildcardPermission wildcardPermission4 = new WildcardPermission("YYyt&CxI0,?1K_]7<");
      Boolean.valueOf("oSfeaU+<vH|D");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("f>;J");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("");
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(simpleAccountRealm0, "@W&_5JQ[5Va[p");
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      Class<Realm> class0 = Realm.class;
      Collection<Realm> collection0 = simplePrincipalCollection1.byType(class0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(collection0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      simplePrincipalCollection0.asList();
      Class<Boolean> class0 = Boolean.class;
      simplePrincipalCollection0.byType(class0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      simplePrincipalCollection0.asList();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      simplePrincipalCollection1.iterator();
      Class<Integer> class1 = Integer.TYPE;
      simplePrincipalCollection1.iterator();
      simplePrincipalCollection0.addAll((PrincipalCollection) simplePrincipalCollection1);
      simplePrincipalCollection1.oneByType((Class<Integer>) null);
      simplePrincipalCollection1.asList();
      Class<WebRememberMeManager> class2 = WebRememberMeManager.class;
      Class<SimplePrincipalCollection> class3 = SimplePrincipalCollection.class;
      simplePrincipalCollection1.oneByType(class3);
      simplePrincipalCollection1.asSet();
      simplePrincipalCollection1.byType(class2);
      simplePrincipalCollection0.clear();
      simplePrincipalCollection1.add(class0, "%w1VamBd;+guh");
      simplePrincipalCollection1.iterator();
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection();
      simplePrincipalCollection1.clear();
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0, "W|o}ub<|}pV>");
      SimplePrincipalCollection simplePrincipalCollection4 = new SimplePrincipalCollection(simplePrincipalCollection0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be empty.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection(simplePrincipalCollection0);
      SimplePrincipalCollection simplePrincipalCollection2 = new SimplePrincipalCollection(simplePrincipalCollection1, "Wgy;mSdH");
      SimplePrincipalCollection simplePrincipalCollection3 = new SimplePrincipalCollection(simplePrincipalCollection0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      Permission permission0 = wildcardPermissionResolver1.resolvePermission("{");
      WildcardPermission wildcardPermission0 = new WildcardPermission("ib\"@`%-F7NP<e*uA8E");
      permission0.implies(wildcardPermission0);
      WildcardPermission wildcardPermission1 = new WildcardPermission("ib\"@`%-F7NP<e*uA8E", false);
      wildcardPermission1.implies(permission0);
      permission0.implies(wildcardPermission1);
      WildcardPermission wildcardPermission2 = new WildcardPermission("oSfeaU+<vH|CD");
      permission0.implies(wildcardPermission2);
      Permission permission1 = wildcardPermissionResolver1.resolvePermission("{");
      Permission permission2 = wildcardPermissionResolver1.resolvePermission("{");
      WildcardPermission wildcardPermission3 = new WildcardPermission("ib\"@`%-F7NP<e*uA8E");
      permission2.implies(wildcardPermission3);
      permission2.implies(wildcardPermission1);
      WildcardPermission wildcardPermission4 = new WildcardPermission("{", true);
      permission0.implies(permission1);
      wildcardPermission1.implies((Permission) null);
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      wildcardPermissionResolver2.resolvePermission("net.sf.ehcache.Element");
      wildcardPermissionResolver2.resolvePermission("oSfeaU+<vH|CD");
      Permission permission3 = wildcardPermissionResolver2.resolvePermission("net.sf.ehcache.Element");
      permission1.implies(permission3);
      WildcardPermission wildcardPermission5 = new WildcardPermission("?iZSG", false);
      wildcardPermission5.implies(wildcardPermission2);
      WildcardPermission wildcardPermission6 = new WildcardPermission("?iZSG");
      Boolean boolean0 = new Boolean(false);
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("ib\"@`%-F7NP<e*uA8E");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }
}
