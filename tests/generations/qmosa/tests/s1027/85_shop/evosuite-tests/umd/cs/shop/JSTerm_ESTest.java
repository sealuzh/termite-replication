/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 21:12:57 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.NoSuchElementException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.691671113509557
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm2 = jSTerm1.call();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "(<6FYwv[9}@.\"");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("<R>ju$)b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(619);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.skip(0L);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-277), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars((-4), 541);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer1);
      assertEquals(41, streamTokenizer1.ttype);
      assertEquals("[., [R>ju], [nil]]", jSTerm1.toString());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.853836432477923
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.listIterator(0);
      jSTerm4.clonePF();
      JSTerm jSTerm6 = (JSTerm)jSTerm2.clone();
      jSTerm5.isGround();
      JSTerm jSTerm7 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort((Comparator) null);
      jSTerm4.size();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.isGround();
      JSTerm jSTerm8 = jSTerm0.standardizerTerm();
      JSTerm jSTerm9 = jSTerm5.call();
      jSTerm8.equals(jSTerm4);
      JSTerm jSTerm10 = jSTerm3.call();
      jSTerm5.equals(jSTerm8);
      jSTerm6.equals(jSTerm9);
      jSTerm5.isGround();
      jSTerm6.equals(jSTerm1);
      jSTerm10.equals(jSTerm0);
      JSTerm jSTerm11 = new JSTerm();
      JSTerm jSTerm12 = jSTerm1.applySubstitutionT((JSSubstitution) null);
      assertTrue(jSTerm0.isFunction());
      assertFalse(jSTerm12.equals((Object)jSTerm4));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.086178588873779
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      jSTerm2.makeConstant();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm3.print();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm5);
      jSTerm5.makeEval(true);
      jSTerm1.matches(jSPredicateForm0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.matches((JSPredicateForm) jSTerm3, (JSSubstitution) null);
      jSTerm4.toStr();
      jSTerm5.call();
      jSTerm3.call();
      assertFalse(jSTerm0.isConstant());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.0495231473074913
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.setSize(41);
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm3.print();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.add((Object) jSTerm5);
      jSTerm5.makeEval(true);
      jSTerm1.matches(jSPredicateForm1);
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.9382823198400416
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isConstant();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      jSTerm0.call();
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSTerm3.print();
      jSTerm4.setSize(418);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      stringReader0.ready();
      jSTerm4.makeEval(true);
      jSTerm1.matches(jSPredicateForm0);
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.9690396722920593
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      jSTerm0.call();
      jSTerm3.setSize(418);
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm3.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2893023107252626
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.add((Object) null);
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.addElement("Hq/R]M:ky^jCn~/=X");
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm1, jSSubstitution2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.9520661150817404
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.listIterator(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm6 = (JSTerm)jSTerm0.clone();
      jSTerm4.equals(jSTerm0);
      JSTerm jSTerm7 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.toStr();
      JSTerm jSTerm8 = jSTerm1.standardizerTerm();
      JSTerm jSTerm9 = jSTerm5.standardizerTerm();
      jSTerm2.toStr();
      JSTerm jSTerm10 = (JSTerm)jSTerm8.clone();
      jSTerm8.equals(jSTerm4);
      jSTerm5.iterator();
      jSTerm10.size();
      jSTerm6.isGround();
      JSTerm jSTerm11 = jSTerm9.standardizerTerm();
      JSTerm jSTerm12 = jSTerm2.call();
      jSTerm9.equals(jSTerm1);
      JSTerm jSTerm13 = jSTerm5.call();
      jSTerm5.equals(jSTerm12);
      jSTerm13.equals(jSTerm7);
      jSTerm9.isGround();
      // Undeclared exception!
      try { 
        jSTerm11.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.880991186387084
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      jSTerm0.call();
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.9806032510543767
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.listIterator(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm6 = (JSTerm)jSTerm0.clone();
      jSTerm4.equals(jSTerm0);
      JSTerm jSTerm7 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm8 = jSTerm3.cloneT();
      jSTerm8.toStr();
      JSTerm jSTerm9 = jSTerm1.standardizerTerm();
      JSTerm jSTerm10 = jSTerm5.standardizerTerm();
      jSTerm8.toStr();
      jSTerm9.clone();
      jSTerm9.equals(jSTerm4);
      jSTerm5.size();
      jSTerm6.isGround();
      jSTerm10.standardizerTerm();
      JSTerm jSTerm11 = jSTerm2.call();
      jSTerm10.equals(jSTerm1);
      JSTerm jSTerm12 = jSTerm5.call();
      jSTerm5.equals(jSTerm11);
      jSTerm12.equals(jSTerm7);
      jSTerm10.isGround();
      jSTerm1.print();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6602162707648
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("DS?4`1C+Y<kS9A_--");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 38);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer2.ordinaryChar(38);
      streamTokenizer2.slashStarComments(false);
      StringReader stringReader1 = new StringReader("&[A1");
      stringReader1.close();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer3.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.1489434149107765
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      Object object1 = jSTerm0.lastElement();
      jSTerm0.add(object1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.518092871565745
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      jSTerm0.addElement((Object) null);
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.8385471879223743
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.isVariable();
      jSTerm1.removeAllElements();
      jSTerm2.makeFunction();
      jSTerm1.addElement("Hq/R]M:ky^jCn~/=X");
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm1.iterator();
      jSTerm0.cloneT();
      jSTerm0.isGround();
      jSTerm1.toStr();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertFalse(jSTerm0.isConstant());
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3930483904652777
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("k-0u");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-4), (-4));
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement("(WNt,3d,A*|n1`&*>");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm1.iterator();
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.addElement(streamTokenizer0);
      jSTerm0.iterator();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.441825541879805
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.add((Object) null);
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("Hq/R]M:ky^jCn~/=X");
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.4444444444444445
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<6FYwv[9}@.\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.9214925782418892
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm3.print();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm5);
      jSTerm1.matches(jSPredicateForm0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.toStr();
      jSTerm5.call();
      jSTerm2.call();
      // Undeclared exception!
      try { 
        jSTerm1.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.8528543190324975
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.addElement((Object) null);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm2.toStr();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(96);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8090750186713427
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "Hq/R]M:ky^jCn~/=X";
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "(,Yv[9}@l\"";
      StringReader stringReader0 = new StringReader("(,Yv[9}@l\"");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(|WNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.657686244632369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm2.cloneT();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm1;
      StringReader stringReader1 = new StringReader("5");
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4648231071394098
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("2.0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(39, 1966);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      stringReader0.read(charArray0);
      streamTokenizer3.whitespaceChars(46, 58);
      StringReader stringReader3 = new StringReader("A]^~7[&8`ooXVE");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.0297439693599655
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.listIterator(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm6 = (JSTerm)jSTerm0.clone();
      jSTerm5.isGround();
      JSTerm jSTerm7 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm8 = jSTerm3.cloneT();
      jSTerm8.toStr();
      JSTerm jSTerm9 = jSTerm1.standardizerTerm();
      JSTerm jSTerm10 = jSTerm5.standardizerTerm();
      jSTerm8.toStr();
      JSTerm jSTerm11 = (JSTerm)jSTerm9.clone();
      jSTerm9.equals(jSTerm4);
      jSTerm5.size();
      jSTerm6.isGround();
      jSTerm10.standardizerTerm();
      JSTerm jSTerm12 = jSTerm2.call();
      jSTerm10.equals(jSTerm1);
      JSTerm jSTerm13 = jSTerm5.call();
      jSTerm5.equals(jSTerm12);
      jSTerm13.equals(jSTerm7);
      jSTerm11.matches(jSTerm2);
      assertEquals("[%%%, [%%%]]", jSTerm1.toString());
      assertFalse(jSTerm0.equals((Object)jSTerm5));
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "u");
      jSSubstitution0.add((Object) jSSubstitution0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.add((Object) "u");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyInt() , anyInt());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.781610081063674
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.isFunction();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm2.cloneT();
      JSTerm jSTerm3 = jSTerm0.call();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm3;
      StringReader stringReader1 = new StringReader("5");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.8528543190324975
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm2.toStr();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.4312595041439566
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isGround();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4509513350945165
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      jSTerm1.equals(jSTerm0);
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6654093745944736
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      jSTerm1.removeElement(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      System.setCurrentTimeMillis((-4));
      streamTokenizer1.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer3.pushBack();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.310828779528491
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSJshopVars.semicolon = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.8875091660687167
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSSubstitution0.clone();
      jSTerm0.iterator();
      JSJshopVars.interrogation = 1499;
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm4.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      jSTerm3.iterator();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm5.print();
      jSTerm5.matches((JSPredicateForm) jSTerm4);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm2.call();
      stringReader0.read();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm6.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(372, (-3));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.657686244632369
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.addElement((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm2.cloneT();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm1;
      StringReader stringReader1 = new StringReader("5");
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.8160852951216837
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.removeAllElements();
      jSTerm3.iterator();
      // Undeclared exception!
      try { 
        jSTerm3.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.9327401138838285
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.listIterator(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm6 = (JSTerm)jSTerm0.clone();
      jSTerm5.isGround();
      JSTerm jSTerm7 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSJshopVars.whiteSpace = 0;
      jSTerm7.sort(comparator0);
      jSTerm4.size();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stringReader0.close();
      jSTerm2.isGround();
      JSTerm jSTerm8 = jSTerm0.standardizerTerm();
      JSTerm jSTerm9 = jSTerm5.call();
      jSTerm8.equals(jSTerm4);
      jSTerm3.call();
      jSTerm5.equals(jSTerm8);
      jSTerm6.equals(jSTerm9);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm8, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.962491115468694
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.listIterator(0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm6 = (JSTerm)jSTerm0.clone();
      jSTerm5.isGround();
      jSTerm2.matches(jSTerm3);
      JSTerm jSTerm7 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort((Comparator) null);
      jSTerm4.size();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.isGround();
      JSTerm jSTerm8 = jSTerm0.standardizerTerm();
      JSTerm jSTerm9 = jSTerm5.call();
      jSTerm8.equals(jSTerm4);
      jSTerm3.call();
      jSTerm9.addAll(0, (Collection) jSTerm8);
      jSTerm5.equals(jSTerm8);
      jSTerm6.equals(jSTerm9);
      boolean boolean0 = jSTerm5.isGround();
      assertFalse(jSTerm0.isConstant());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.61366781928996
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.slash = (-1720464977);
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = jSTerm1.clone();
      jSTerm1.isGround();
      jSTerm1.lastIndexOf(object0, (-1720464977));
      jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSTerm jSTerm3 = jSTerm2.call();
      jSTerm1.equals(jSTerm2);
      jSTerm3.call();
      // Undeclared exception!
      try { 
        jSTerm3.equals(jSTerm2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6122248178469585
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm2.isEval());
      
      JSTerm jSTerm3 = jSTerm2.call();
      assertTrue(jSTerm3.isFunction());
      assertEquals(10, jSTerm3.capacity());
      
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.equals(jSTerm2);
      boolean boolean0 = jSTerm4.equals(jSTerm1);
      boolean boolean1 = jSTerm4.equals(jSTerm2);
      assertTrue(jSTerm2.isFunction());
      assertFalse(boolean1);
      assertNotSame(jSTerm2, jSTerm3);
      
      boolean boolean2 = jSTerm1.isGround();
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7057296590254856
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xCu?LA)h-!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm1.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm2.equals(jSTerm0);
      jSTerm4.standardizerTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm3.equals(jSTerm0);
      jSSubstitution2.addElements(jSSubstitution1);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2309140779373315
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis(664L);
      JSTerm jSTerm1 = new JSTerm();
      int int0 = 35;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4574653869995418
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.9774542470743306
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm4.cloneT();
      jSTerm4.toStr();
      jSTerm5.standardizerTerm();
      jSTerm5.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.607966203832247
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "(<6FYwv[9}@.\"");
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.interrogation = (-4657);
      jSTerm0.add((Object) jSSubstitution2);
      Object object0 = new Object();
      jSSubstitution1.add(object0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.VarCounter = (-59);
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(664L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.4136125151570504
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      jSTerm1.removeElement(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      String string0 = "6OI3x-IhE[ynk!4-\\ ;";
      jSSubstitution2.add((Object) null);
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.addAll((Collection) jSPredicateForm0);
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.lastElement();
        fail("Expecting exception: NoSuchElementException");
      
      } catch(NoSuchElementException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = (-59);
      JSJshopVars.VarCounter = (-59);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.0204087829626323
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.isGround();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standarizerPredicateForm();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm3.print();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm5);
      jSTerm5.makeEval(true);
      jSTerm1.matches(jSPredicateForm0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.toStr();
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.7728084501374015
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "k(");
      stringReader0.read(charBuffer0);
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip(457L);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.clone();
      jSTerm0.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.04076543981964
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("member");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSTerm0.equals(jSPredicateForm0);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSJshopVars.leftPar = (-1);
      jSTerm1.print();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      System.setCurrentTimeMillis((-4));
      streamTokenizer1.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ttype = 1407;
      char[] charArray0 = new char[10];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.whitespaceChars(60, (-4));
      streamTokenizer5.whitespaceChars(92, 1407);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer6.resetSyntax();
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.eolIsSignificant(false);
      streamTokenizer6.ordinaryChars((-4), 1407);
      streamTokenizer8.quoteChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      System.setCurrentTimeMillis((-4));
      streamTokenizer1.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashSlashComments(true);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.ttype = 1407;
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = 'v';
      charArray0[2] = 'v';
      charArray0[3] = 'v';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.whitespaceChars(60, (-4));
      streamTokenizer5.whitespaceChars(92, 1407);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer6.resetSyntax();
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.eolIsSignificant(false);
      streamTokenizer6.ordinaryChars((-4), 1407);
      streamTokenizer8.quoteChar((-4));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("wnt3d");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertTrue(jSSubstitution1.fail());
      assertNotNull(jSSubstitution1);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.621553942215545
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("h&5gBv5<zA");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      JSJshopVars.whiteSpace = (-1);
      JSJshopVars.leftBrac = (-1);
      jSTerm0.isGround();
      jSTerm1.equals(jSTerm0);
      jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm1.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSTerm2);
      JSJshopVars.flagLevel = (-1);
      jSTerm0.matches(jSTerm2, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.4081667857757214
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      System.setCurrentTimeMillis((-640L));
      StringReader stringReader0 = new StringReader("QpRRsJ+;v@Q*BSn`A");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis((-1));
      jSSubstitution0.add((Object) stringReader0);
      jSTerm1.matches(jSTerm0);
      // Undeclared exception!
      try { 
        jSSubstitution0.listIterator((-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.0446324302033596
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader("m6oi3x-ihe[ynk4- ;");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm0.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("k-0u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 76);
      streamTokenizer0.resetSyntax();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.wordChars(76, (-1094509210));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(76, (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.slashStarComments(false);
      StringReader stringReader1 = new StringReader("u");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.resetSyntax();
      streamTokenizer4.nextToken();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer5);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertEquals("[-0.0]", jSTerm1.toString());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSJshopVars.verticalL = (-3);
      JSJshopVars.interrogation = 1499;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.whiteSpace = (-2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.7576378583071737
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%feL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "%feL";
      streamTokenizer0.sval = "%feL";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.cloneT();
      System.setCurrentTimeMillis((-1916L));
      System.setCurrentTimeMillis(941L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("w%(Wo");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 76);
      streamTokenizer0.wordChars(76, (-1094509210));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars(76, (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.slashStarComments(false);
      StringReader stringReader1 = new StringReader("u");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.resetSyntax();
      streamTokenizer4.resetSyntax();
      streamTokenizer4.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.579422531202379
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      jSTerm0.matches(jSTerm1);
      boolean boolean0 = true;
      streamTokenizer1.slashSlashComments(true);
      char char0 = '2';
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.6292819731270867
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      System.setCurrentTimeMillis(32);
      jSTerm0.call();
      long long0 = 0L;
      System.setCurrentTimeMillis(32);
      jSTerm1.equals(jSTerm0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.toStr();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.call();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("b?/Q<o\"?z");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.745553125052466
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      stringReader0.reset();
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      jSTerm1.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.274842682442605
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(658L);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.2296747293240762
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,7d,A*|n1`&*p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("(WNt,7d,A*|n1`&*p");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.nextToken();
      streamTokenizer2.wordChars((-1424), (-4972));
      streamTokenizer1.pushBack();
      streamTokenizer2.ordinaryChars(40, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.ordinaryChars((-4), 40);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar(40);
      streamTokenizer3.whitespaceChars(5799, (-62));
      streamTokenizer3.sval = "(WNt,7d,A*|n1`&*p";
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer5.pushBack();
      stringReader0.skip((-4));
      streamTokenizer5.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer5.parseNumbers();
      streamTokenizer5.slashStarComments(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      streamTokenizer5.ordinaryChars(5799, (-4));
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader1);
      streamTokenizer1.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.580906009824722
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSJshopVars.VarCounter = (-59);
      jSTerm0.isGround();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-59));
      long long0 = 664L;
      System.setCurrentTimeMillis(664L);
      JSJshopVars.semicolon = (-59);
      jSTerm0.call();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.602434850296928
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer1.ttype = (-1);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      jSTerm1.removeElement(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.3126328398468408
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis(664L);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.interrogation = (-347);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,7d,A*|1`&*p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.nextToken();
      streamTokenizer2.wordChars((-1446), 40);
      streamTokenizer1.pushBack();
      streamTokenizer2.ordinaryChars(40, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-4), 40);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-3640), 40);
      streamTokenizer3.ordinaryChar(40);
      streamTokenizer3.whitespaceChars(5799, (-4));
      streamTokenizer3.sval = null;
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.pushBack();
      stringReader0.skip((-4));
      streamTokenizer5.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer5.parseNumbers();
      streamTokenizer5.slashStarComments(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-4), (-4));
      streamTokenizer5.nextToken();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars(5799, (-4));
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5935954614673427
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,7d,A*|1`&*p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.nextToken();
      streamTokenizer1.wordChars((-1424), 40);
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars(40, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), 40);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-3640), 40);
      streamTokenizer2.ordinaryChar(40);
      streamTokenizer2.whitespaceChars(5799, (-62));
      streamTokenizer2.sval = null;
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      streamTokenizer4.slashSlashComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer4.parseNumbers();
      streamTokenizer4.slashStarComments(false);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer4.ordinaryChars(5799, (-4));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.905955623675349
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm3.listIterator(0);
      jSTerm4.clonePF();
      JSTerm jSTerm6 = (JSTerm)jSTerm2.clone();
      jSTerm5.isGround();
      JSTerm jSTerm7 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm3.sort((Comparator) null);
      jSTerm4.size();
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.isGround();
      JSTerm jSTerm8 = jSTerm0.standardizerTerm();
      JSTerm jSTerm9 = jSTerm5.call();
      jSTerm8.equals(jSTerm4);
      JSTerm jSTerm10 = jSTerm3.call();
      jSTerm5.equals(jSTerm8);
      jSTerm6.equals(jSTerm9);
      jSTerm5.isGround();
      jSTerm6.equals(jSTerm1);
      jSTerm10.equals(jSTerm0);
      jSTerm7.isEval();
      // Undeclared exception!
      try { 
        jSTerm9.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 18);
      streamTokenizer0.nval = (-2983.8);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.slashSlashComments(false);
      char[] charArray0 = new char[4];
      charArray0[0] = '*';
      streamTokenizer0.nextToken();
      streamTokenizer0.eolIsSignificant(false);
      charArray0[1] = '*';
      StringReader stringReader1 = new StringReader("()M%a?(ue8]aOd");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer3.sval = null;
      streamTokenizer1.ttype = 40;
      streamTokenizer3.nval = 0.0;
      streamTokenizer0.ordinaryChars((-4), 10);
      streamTokenizer3.wordChars(40, 40);
      streamTokenizer3.ordinaryChars((-4), 40);
      streamTokenizer3.slashStarComments(false);
      streamTokenizer3.eolIsSignificant(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      String string0 = "(<,6FY6v[9}@l\"";
      StringReader stringReader0 = new StringReader("(<,6FY6v[9}@l\"");
      System.setCurrentTimeMillis(0L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(|WNT,3d,A*|nw1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.0675636642741912
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,7d,A*|n1`&*p");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("k0u");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      stringReader1.reset();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      String string0 = "-:x)E',7Dx;";
      StringReader stringReader0 = new StringReader("-:x)E',7Dx;");
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.print();
      jSSubstitution0.iterator();
      jSSubstitution0.add((Object) null);
      Object[] objectArray0 = new Object[8];
      objectArray0[2] = null;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[5] = (Object) comparator0;
      StringReader stringReader0 = new StringReader("5");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (-2983.8);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      char[] charArray0 = new char[4];
      charArray0[0] = '2';
      charArray0[1] = '2';
      StringReader stringReader1 = new StringReader("()M%a?(rue8]aOd");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      streamTokenizer3.ordinaryChars(961, (-2));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer3.ordinaryChars(40, 961);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      stringReader1.read();
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      streamTokenizer3.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer5);
      assertEquals("[nil]", jSTerm1.toString());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
  }
}
