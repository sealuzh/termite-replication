/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 07:38:20 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.ListIterator;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5706218405569405
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm5.matches(jSTerm0);
      jSTerm3.print();
      jSTerm5.makeEval(true);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.matches((JSPredicateForm) jSTerm6);
      jSTerm5.cloneT();
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.3893373413629084
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      jSTerm0.call();
      streamTokenizer0.ordinaryChars(0, 42);
      stringReader0.ready();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.whiteSpace = (-2);
      JSJshopVars.equalT = (-2);
      ListIterator listIterator0 = jSTerm2.listIterator();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.isGround();
      jSTerm2.isGround();
      jSTerm3.indexOf((Object) listIterator0, 0);
      jSTerm1.equals(jSTerm0);
      jSTerm2.applySubstitutionT((JSSubstitution) null);
      assertFalse(jSTerm0.isConstant());
      
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm3.equals(jSTerm4);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1380398790424184
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.add((Object) null);
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("Hq/R]M:ky^jCn~/=X");
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm0.iterator();
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm2.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.419500631817432
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      assertEquals(2, jSTerm1.size());
      
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      streamTokenizer0.ordinaryChars(418, 418);
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm3.print();
      jSTerm5.makeEval(true);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.matches((JSPredicateForm) jSTerm6);
      jSTerm5.call();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm1, (JSSubstitution) null);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2833714613480693
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm2 = jSTerm0.call();
      streamTokenizer0.ordinaryChars(0, 42);
      stringReader0.ready();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSJshopVars.whiteSpace = (-2);
      jSTerm3.listIterator();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.isGround();
      jSTerm2.call();
      JSTerm jSTerm5 = new JSTerm();
      Predicate<JSTerm> predicate0 = Predicate.isEqual((Object) jSTerm5);
      predicate0.negate();
      jSTerm0.isGround();
      jSTerm1.iterator();
      JSTerm jSTerm6 = jSTerm1.standardizerTerm();
      jSTerm6.call();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.0316063850792587
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      jSTerm0.isVariable();
      stringReader0.ready();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.add((Object) null);
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("Hq/R]M:ky^jCn~/=X");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.3191349480976013
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(56);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.iterator();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      jSTerm1.iterator();
      jSTerm3.toStr();
      jSTerm1.call();
      jSTerm3.cloneT();
      jSTerm2.print();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm1.makeEval(false);
      jSTerm3.matches((JSPredicateForm) jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.3217531600329626
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm2 = jSTerm0.call();
      int int0 = 42;
      streamTokenizer0.ordinaryChars(0, 42);
      stringReader0.ready();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSJshopVars.whiteSpace = (-2);
      JSJshopVars.equalT = (-2);
      jSTerm3.listIterator();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.isGround();
      jSTerm3.isGround();
      JSTerm jSTerm5 = jSTerm2.call();
      jSTerm5.setSize(33);
      JSTerm jSTerm6 = new JSTerm();
      Predicate.isEqual((Object) jSTerm6);
      jSTerm1.print();
      // Undeclared exception!
      try { 
        jSTerm5.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.388033439908211
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      jSTerm0.call();
      jSTerm2.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.154817423577181
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?q/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm2.cloneT();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "?%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      jSTerm2.toString();
      objectArray0[4] = (Object) "[?%%%]";
      objectArray0[5] = (Object) iterator0;
      objectArray0[2] = (Object) jSSubstitution1;
      objectArray0[7] = (Object) jSSubstitution1;
      jSSubstitution1.toArray(objectArray0);
      jSTerm0.indexOf(objectArray0[0], 0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm1;
      jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.3827346205527666
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(434);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Iterator iterator0 = jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) stringReader0;
      jSTerm3.lastElement();
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm4;
      StringReader stringReader1 = new StringReader("5");
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0316063850792587
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) null);
      jSTerm0.addElement((Object) null);
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3455894414435012
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.isVariable();
      jSTerm1.removeAllElements();
      jSTerm2.makeFunction();
      jSTerm1.addElement("Hq/R]M:ky^jCn~/=X");
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm1.iterator();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm0.isGround();
      jSTerm1.toStr();
      assertTrue(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm3);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8130821353869817
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm0.isVariable();
      jSTerm0.makeFunction();
      Object object0 = null;
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.iterator();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.233321065424197
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution0 = null;
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm2 = jSTerm0.call();
      int int0 = 42;
      streamTokenizer0.ordinaryChars(0, 42);
      stringReader0.ready();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      JSJshopVars.whiteSpace = (-2);
      jSTerm3.listIterator();
      jSTerm3.addAll((Collection) jSTerm2);
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isGround();
      jSSubstitution0.add((Object) "JSTerm");
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.559708451667335
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      jSTerm4.toStr();
      jSTerm4.equals((JSPredicateForm) jSTerm0);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.equals(jSTerm0);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      jSTerm2.toStr();
      System.setCurrentTimeMillis(418);
      jSTerm5.matches(jSTerm2);
      jSTerm2.setSize(534);
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        jSTerm2.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3779866744948435
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      streamTokenizer0.parseNumbers();
      jSTerm0.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      jSTerm1.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm1.makeFunction();
      jSTerm1.addElement(jSTerm0);
      jSTerm0.iterator();
      JSTerm jSTerm2 = jSTerm0.call();
      streamTokenizer0.ordinaryChars(0, 42);
      stringReader0.ready();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      streamTokenizer0.ordinaryChar(2190);
      JSJshopVars.whiteSpace = (-2);
      JSJshopVars.equalT = (-2);
      jSTerm3.listIterator();
      jSTerm2.parallelStream();
      JSTerm jSTerm4 = new JSTerm();
      JSJshopVars.semicolon = 1;
      jSTerm4.isGround();
      jSTerm3.isGround();
      jSTerm2.call();
      JSTerm jSTerm5 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.264499490622469
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      stringReader0.mark(0);
      int int1 = 418;
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm2.iterator();
      jSTerm2.cloneT();
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.257220269049449
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      Iterator iterator0 = jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) stringReader0;
      jSTerm3.lastElement();
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm3;
      StringReader stringReader1 = new StringReader("5");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9911388966130941
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("2.0");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader(" Expected (");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(39, 1966);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      char[] charArray0 = new char[2];
      charArray0[0] = 'l';
      charArray0[1] = 'l';
      stringReader0.read(charArray0);
      streamTokenizer3.whitespaceChars(46, 58);
      StringReader stringReader3 = new StringReader("A]^~7[&8`ooXVE");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader2);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer7);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2601829009944425
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.isVariable();
      jSTerm2.makeFunction();
      jSTerm1.addElement("Hq/R]M:ky^jCn~/=X");
      jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      jSTerm1.iterator();
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9061547465398496
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String string0 = "Hq/R]M:ky^jCn~/=X";
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(425);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isFunction();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6357434952314973
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.setSize(2340);
      System.setCurrentTimeMillis(0);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.434463489806211
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xCu?LA)h-!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm1.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm2.equals(jSTerm0);
      jSTerm4.standardizerTerm();
      assertFalse(jSTerm1.isConstant());
      
      stringReader0.ready();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars(41, 2292);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm5 = jSTerm0.parseList(streamTokenizer0);
      assertEquals("[nil]", jSTerm5.toString());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      System.setCurrentTimeMillis(664L);
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      String string0 = "call";
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.ready();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.822456686505235
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSJshopVars.semicolon = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.392559671119222
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.equals(jSTerm0);
      jSTerm0.isVariable();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      JSJshopVars.verticalL = (-3);
      jSTerm2.isVariable();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = jSTerm2.matches(jSTerm3, (JSSubstitution) null);
      jSSubstitution0.clone();
      jSTerm0.iterator();
      JSJshopVars.interrogation = 1499;
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm4.makeFunction();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.matches(jSTerm4, jSSubstitution0);
      jSTerm3.iterator();
      JSTerm jSTerm5 = jSTerm1.cloneT();
      jSTerm5.print();
      jSTerm5.matches((JSPredicateForm) jSTerm4);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm2.call();
      stringReader0.read();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm6.isGround();
      // Undeclared exception!
      try { 
        jSTerm4.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(372, (-3));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8080457195839967
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.2732123023195623
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(434);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Iterator iterator0 = jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) stringReader0;
      jSTerm3.lastElement();
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm4;
      StringReader stringReader1 = new StringReader("5");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.106577333232116
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.3535586011554015
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      Iterator iterator0 = jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) stringReader0;
      jSTerm3.lastElement();
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[6] = (Object) jSTerm4;
      StringReader stringReader1 = new StringReader("5");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      jSTerm1.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm0.isFunction());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9803317612376334
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm0.isGround();
      jSTerm1.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = null;
      jSSubstitution0.add((Object) null);
      jSTerm0.addElement("M6OI3x-IhE[ynk4- ;");
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7949173105176275
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xCu?LA)h-!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.098147389135067
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.isVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0791512728828505
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      long long0 = 664L;
      System.setCurrentTimeMillis(664L);
      jSTerm0.call();
      int int0 = 44;
      jSTerm0.setSize(44);
      System.setCurrentTimeMillis(0L);
      jSTerm0.standardizerTerm();
      String string0 = "call";
      jSSubstitution0.clear();
      jSTerm0.toStr();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0027182645175161
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StringReader stringReader1 = new StringReader("P^ee:\"c 4BPVE}");
      StringReader stringReader2 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm0 = new JSTerm();
      stringReader1.ready();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSJshopVars.whiteSpace = 33;
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0989972655448166
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|s&*>");
      StringReader stringReader1 = new StringReader("(MWNT,3d,A*|s&*>");
      StringReader stringReader2 = new StringReader("floFEor");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "wnt3d");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.5175635418553513
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm1.matches((JSPredicateForm) jSTerm3);
      JSTerm jSTerm4 = jSTerm0.call();
      Object[] objectArray0 = new Object[8];
      jSTerm0.isGround();
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[2] = null;
      JSTerm jSTerm5 = jSTerm2.call();
      Object object0 = jSTerm4.clone();
      Predicate<JSTerm> predicate0 = Predicate.isEqual(object0);
      Predicate<JSTerm> predicate1 = predicate0.negate();
      Predicate<JSTerm> predicate2 = predicate1.or(predicate0);
      jSTerm4.removeIf(predicate2);
      jSTerm3.equals(jSTerm5);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSTerm3.replaceAll(unaryOperator0);
      jSTerm2.toArray(objectArray0);
      jSTerm1.matches(jSTerm3);
      jSTerm4.isGround();
      jSTerm5.iterator();
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.951848439223888
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("k-0u");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-4), (-4));
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm2);
      assertTrue(jSSubstitution1.fail());
      assertFalse(jSTerm2.isConstant());
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis(664L);
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.224228946236883
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      jSTerm1.removeElement(streamTokenizer1);
      jSTerm1.cloneT();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(642L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2342015981279912
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xCu?LA)h-!");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm1);
      jSTerm0.removeElement(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm0, jSSubstitution0);
      jSTerm1.iterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution1);
      JSJshopVars.leftBrac = 41;
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      jSTerm2.equals(jSTerm0);
      jSTerm4.matches((JSPredicateForm) jSTerm2);
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2815803799619627
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.ttype = 0;
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm0.makeEval(true);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "k(");
      charBuffer0.duplicate();
      stringReader0.read(charBuffer0);
      JSTerm jSTerm2 = jSTerm0.call();
      JSJshopVars.verticalL = 0;
      stringReader0.reset();
      jSTerm2.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      stringReader0.skip(457L);
      jSTerm0.matches(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm2.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.587510632654319
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      jSTerm0.parallelStream();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm5.makeVariable();
      jSTerm3.print();
      jSTerm5.makeEval(true);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      assertEquals(2, jSTerm1.size());
      
      JSTerm jSTerm6 = new JSTerm();
      stringReader0.read();
      jSTerm4.matches((JSPredicateForm) jSTerm6);
      jSTerm5.call();
      assertTrue(jSTerm2.isFunction());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.0577223167610805
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|s&*>");
      StringReader stringReader1 = new StringReader("(MWNT,3d,A*|s&*>");
      StringReader stringReader2 = new StringReader("floFEor");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "wnt3d");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) stringReader1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals(32, stringBuffer0.length());
      
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm1.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm0, jSTerm1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("k-0u");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChars((-4), (-4));
      stringReader1.reset();
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, (JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.094889682042817
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm2.cloneT();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      jSTerm2.toString();
      objectArray0[4] = (Object) "[%%%]";
      objectArray0[5] = (Object) iterator0;
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      objectArray0[6] = (Object) jSSubstitution0;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      jSTerm0.indexOf(objectArray0[0], 0);
      Comparator<String> comparator1 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.isConstant();
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator1;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator1;
      objectArray1[6] = (Object) jSTerm1;
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.5041269826075627
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(streamTokenizer0);
      jSTerm0.isVariable();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.isConstant();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm3.iterator();
      jSTerm3.toStr();
      JSTerm jSTerm4 = jSTerm0.call();
      JSTerm jSTerm5 = jSTerm2.cloneT();
      jSTerm3.print();
      jSTerm5.makeEval(true);
      jSTerm1.matches((JSPredicateForm) jSTerm0);
      JSTerm jSTerm6 = new JSTerm();
      jSTerm4.matches((JSPredicateForm) jSTerm6);
      // Undeclared exception!
      try { 
        jSTerm5.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("o)");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      Integer integer0 = new Integer((-4));
      Integer integer1 = new Integer((-405));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer1);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) stringReader0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate1.negate();
      Predicate<Object> predicate5 = predicate2.and(predicate4);
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) predicate5);
      predicate0.negate();
      Predicate<Integer> predicate7 = predicate0.or(predicate6);
      predicate1.and(predicate4);
      predicate7.and(predicate3);
      predicate6.negate();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4287691203187398
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      stringReader0.mark(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.110016553375461
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = "-0.0";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar(1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-4), 33);
      streamTokenizer4.ordinaryChar((-8));
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      StringReader stringReader1 = new StringReader(",|gz9Gcj33oID{YP;Le");
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm3.isEval());
      assertFalse(jSTerm3.isVariable());
      assertTrue(jSTerm3.isConstant());
      assertEquals("[%%%]", jSTerm1.toString());
      assertNotSame(jSTerm3, jSTerm1);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-194), (-194));
      StringReader stringReader1 = new StringReader("(MWNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer0.quoteChar((-194));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer2.sval = "-0.0";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar(1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-2601));
      streamTokenizer1.nextToken();
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-194), (-105));
      streamTokenizer1.ordinaryChar((-1135));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader1);
      streamTokenizer3.ordinaryChars(37, (-1792));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nextToken();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeEval(false);
      jSTerm0.clear();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.172279987989589
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.makeVariable();
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      jSTerm0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1);
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.025230300149618
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.add((Object) comparator0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "HB/R]M}ky^jCn~/=X");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm0.call();
      assertTrue(jSTerm2.isFunction());
      
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSSubstitution1.fail());
      assertEquals(0, jSSubstitution1.size());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.25279950186406
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K-0U 2:'Cb");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeVariable();
      jSTerm0.isFunction();
      JSTerm jSTerm1 = jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.call();
      stringReader0.reset();
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.isEval();
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm3.matches(jSTerm0, jSSubstitution0);
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      jSTerm1.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm4.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7986522062521288
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.isEmpty();
      JSTerm jSTerm1 = jSTerm0.call();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(664L);
      jSTerm1.call();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8343719702816235
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      long long0 = 664L;
      System.setCurrentTimeMillis(664L);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.1269287948006759
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(WNt,3d,A*|n1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.nextToken();
      streamTokenizer1.pushBack();
      streamTokenizer2.ordinaryChars(40, (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-4), 40);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer2.pushBack();
      streamTokenizer3.ordinaryChar(40);
      streamTokenizer3.whitespaceChars(5799, (-62));
      streamTokenizer3.sval = "k-0u";
      streamTokenizer1.ordinaryChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.pushBack();
      stringReader0.skip((-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer5.parseNumbers();
      streamTokenizer5.slashStarComments(false);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars((-4), (-4));
      streamTokenizer5.ordinaryChar((-4));
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars(5799, (-4));
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer8);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.3779866744948435
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Hq/R]M:ky^jCn~/=X");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.mark(0);
      streamTokenizer0.ordinaryChar(418);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.makeFunction();
      jSTerm0.isEval();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.isVariable();
      jSTerm2.makeFunction();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      jSTerm1.addElement("M6OI3x-IhE[ynk4- ;");
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      Iterator iterator0 = jSTerm0.iterator();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = jSTerm0.call();
      Object[] objectArray0 = new Object[8];
      jSTerm0.lastElement();
      objectArray0[0] = (Object) "%%%";
      objectArray0[1] = (Object) streamTokenizer0;
      objectArray0[2] = null;
      objectArray0[3] = (Object) stringReader0;
      jSTerm3.lastElement();
      objectArray0[4] = (Object) "%%%";
      objectArray0[5] = (Object) iterator0;
      objectArray0[6] = (Object) jSSubstitution1;
      objectArray0[7] = (Object) jSSubstitution0;
      jSSubstitution0.toArray(objectArray0);
      stringReader0.read();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm4.equals(jSTerm0);
      Object[] objectArray1 = new Object[7];
      objectArray1[0] = (Object) comparator0;
      objectArray1[1] = (Object) iterator0;
      objectArray1[2] = (Object) streamTokenizer0;
      objectArray1[5] = (Object) comparator0;
      objectArray1[6] = (Object) jSTerm4;
      StringReader stringReader1 = new StringReader("5");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = "-0.0";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar(1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer1.ordinaryChars((-4), 33);
      streamTokenizer4.ordinaryChar((-8));
      streamTokenizer2.sval = null;
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.commentChar(62);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-2323), (-4));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(|WNT,3d,A*|nw1`&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.303092403761719
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%feL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "%feL";
      streamTokenizer0.sval = "%feL";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.cloneT();
      System.setCurrentTimeMillis((-1916L));
      System.setCurrentTimeMillis(941L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-194), (-194));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-194));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer2.sval = "-0.0";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-3003), (-3003));
      streamTokenizer0.ordinaryChar(1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      streamTokenizer3.nextToken();
      streamTokenizer1.lowerCaseMode(false);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      StringReader stringReader1 = new StringReader("yx4L4vB h9^t;q=");
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer4);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<6FYwv[9}@.\"");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.resetSyntax();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) "(<6FYwv[9}@.\"");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate1.or(predicate3);
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate3);
      predicate0.or(predicate2);
      Predicate<Object> predicate6 = predicate1.or(predicate5);
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) predicate4;
      objectArray0[1] = (Object) predicate0;
      objectArray0[2] = (Object) predicate6;
      objectArray0[3] = (Object) predicate6;
      objectArray0[4] = (Object) predicate0;
      objectArray0[5] = (Object) predicate3;
      objectArray0[6] = (Object) stringReader0;
      objectArray0[7] = (Object) predicate4;
      objectArray0[8] = (Object) streamTokenizer0;
      jSSubstitution1.toArray(objectArray0);
      Integer integer0 = new Integer(124);
      jSTerm0.indexOf((Object) integer0, 124);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%feL");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      streamTokenizer0.sval = "%feL";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertEquals((-3), streamTokenizer0.ttype);
      assertEquals("[%feL]", jSTerm0.toString());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.0793872341927924
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = "-0.0";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-6));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "-0.0");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      assertFalse(jSTerm1.isEval());
      
      JSJshopVars.rightBrac = (-6);
      JSTerm jSTerm2 = jSTerm1.call();
      assertTrue(jSTerm2.isFunction());
      assertEquals(10, jSTerm2.capacity());
      
      jSTerm1.print();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      assertNotSame(jSTerm1, jSTerm2);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(<6FYwv[9}@.\"");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|w&*>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.sval = "-0.0";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = 0.0;
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer2.whitespaceChars((-2599), (-4));
      streamTokenizer3.nextToken();
      streamTokenizer3.nextToken();
      streamTokenizer2.parseNumbers();
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer2.ordinaryChars((-4), (-3));
      streamTokenizer3.whitespaceChars((-4), (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.pushBack();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(MWNT,3d,A*|s&*>");
      StringReader stringReader1 = new StringReader("(MWNT,3d,A*|s&*>");
      StringReader stringReader2 = new StringReader("floFEor");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashStarComments(true);
      Integer integer0 = new Integer((-4));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "(MWNT,3d,A*|s&*>");
      Predicate<Object> predicate2 = predicate1.or(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Integer> predicate5 = predicate0.or(predicate4);
      Predicate<Object> predicate6 = predicate3.and(predicate4);
      Predicate<Integer> predicate7 = predicate5.and(predicate6);
      predicate7.negate();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeIf(predicate5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      char[] charArray0 = new char[3];
      charArray0[2] = '$';
      charArray0[1] = '*';
      charArray0[2] = '*';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
  }
}
