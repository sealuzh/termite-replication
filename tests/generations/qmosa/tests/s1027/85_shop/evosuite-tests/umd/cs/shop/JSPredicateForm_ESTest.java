/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 07:56:13 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9730014063936125
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("38|#3s5=w\"/t$*^");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm1);
      jSTerm1.equals((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.ordinaryChar(2674);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSJshopVars.backquote = 2444;
      JSPredicateForm jSPredicateForm3 = jSTerm0.clonePF();
      jSPredicateForm0.add((Object) jSTerm1);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm1.clonePF();
      jSPredicateForm3.equals(jSPredicateForm2);
      jSTerm1.matches(jSPredicateForm2);
      jSPredicateForm3.equals(jSPredicateForm1);
      StringBuffer stringBuffer0 = jSPredicateForm4.toStr();
      assertEquals("[not, [38.0]]", jSTerm0.toString());
      assertEquals("(not(38.0))", stringBuffer0.toString());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "ot");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.removeAllElements();
      jSTerm0.add((Object) "ot");
      jSTerm0.ensureCapacity((-1441336615));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.clear();
      jSTerm0.add((Object) "not");
      jSTerm0.makeEval(true);
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.makeVariable();
      long long0 = (-2492L);
      System.setCurrentTimeMillis((-2492L));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.37677016125643675
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Spliterator spliterator0 = jSTerm0.spliterator();
      jSTerm0.add((Object) "(wt");
      jSTerm0.clear();
      jSTerm0.add((Object) "(wt");
      jSTerm0.makeEval(false);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.makeVariable();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      SystemInUtil.addInputLine("#");
      jSTerm0.add((Object) spliterator0);
      // Undeclared exception!
      try { 
        jSTerm0.sort((Comparator) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSTerm cannot be cast to java.lang.Comparable
         //
         verifyException("java.util.ComparableTimSort", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      stringReader0.reset();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1249);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0L);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis((-3152L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2382L));
      System.setCurrentTimeMillis(3242L);
      System.setCurrentTimeMillis((-91L));
      System.setCurrentTimeMillis((-91L));
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("lgo");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qtn");
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine(" Expected (");
      SystemInUtil.addInputLine("TRQ'kRQYPnK");
      SystemInUtil.addInputLine("qot");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      SystemInUtil.addInputLine("qtn");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2730283365896258
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nGt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.listIterator();
      jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.clonePF();
      jSTerm0.lastElement();
      jSPredicateForm2.add((Object) "nGt");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSTerm0);
      jSPredicateForm0.toStr();
      // Undeclared exception!
      try { 
        jSPredicateForm2.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(". ");
      SystemInUtil.addInputLine("qtn");
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine(". ");
      jSTerm0.add((Object) null);
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) function0);
      function3.compose((Function<? super Integer, ?>) function2);
      UnaryOperator<JSTerm> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, JSTerm> function4 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, JSTerm> function5 = unaryOperator1.compose((Function<? super Object, ? extends JSTerm>) function4);
      unaryOperator1.compose((Function<? super Object, ? extends JSTerm>) function5);
      unaryOperator2.compose((Function<? super Integer, ?>) function5);
      Integer integer0 = new Integer((-3));
      Function<Object, String> function6 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      Integer integer1 = new Integer(3);
      function6.apply(integer1);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function7 = unaryOperator0.compose((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function8 = unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      function2.andThen((Function<? super String, ? extends String>) function8);
      Function.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7242420937997174
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nGt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.listIterator();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      jSTerm0.lastElement();
      jSPredicateForm3.add((Object) "nGt");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSTerm0);
      jSPredicateForm0.toStr();
      jSPredicateForm0.toStr();
      jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSTerm0.clonePF();
      jSPredicateForm4.clonePF();
      jSPredicateForm0.removeAll(jSPredicateForm2);
      jSTerm0.applySubstitutionPF(jSSubstitution1);
      JSPredicateForm jSPredicateForm5 = null;
      try {
        jSPredicateForm5 = new JSPredicateForm("(:dibdg ");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.add((Object) "not");
      jSTerm0.clear();
      jSTerm0.add((Object) "not");
      jSTerm0.makeEval(true);
      jSTerm0.add((Object) jSTerm0);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer((-4191));
      Integer integer2 = new Integer(61);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(1540);
      Integer integer5 = new Integer((-1597));
      Integer integer6 = new Integer((-1982585444));
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer7 = new Integer((-1084518693));
      unaryOperator0.apply(integer7);
      Integer integer8 = new Integer((-1611522464));
      Integer integer9 = new Integer((-1597));
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      jSTerm1.add((Object) jSTerm0);
      long long0 = (-1L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-1L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.forEach(consumer0);
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7rt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.ensureCapacity((-1));
      JSSubstitution jSSubstitution2 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.spliterator();
      jSSubstitution3.add((Object) jSSubstitution2);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.sval = null;
      streamTokenizer0.parseNumbers();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      stringReader0.read();
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      stringReader0.skip((-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-1433728624));
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.whitespaceChars((-4), (-724));
      streamTokenizer1.quoteChar((-1));
      streamTokenizer1.ordinaryChars((-4), (-1));
      jSTerm0.add((Object) null);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.resetSyntax();
      System.setCurrentTimeMillis((-1433728624));
      streamTokenizer2.nval = (double) (-4);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "not");
      Object object0 = jSTerm1.clone();
      jSTerm1.add(object0);
      jSTerm1.removeElement((Object) null);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) jSTerm0);
      jSTerm1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(". ");
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.add((Object) "qot");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine("ft");
      SystemInUtil.addInputLine("}f_A)cfhkb)g>T?");
      SystemInUtil.addInputLine(";AE,");
      jSTerm0.makeVariable();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.parseNumbers();
      stringReader0.read();
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer0.ttype = (-1);
      streamTokenizer0.quoteChar((-1));
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.makeVariable();
      JSTerm jSTerm1 = jSTerm0.call();
      jSTerm1.makeVariable();
      jSTerm0.add((Object) null);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.4293230219306162
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-366172147));
      Function.identity();
      Integer integer2 = new Integer((-366172147));
      Integer integer3 = new Integer((-366172147));
      Integer integer4 = new Integer((-122));
      Integer integer5 = new Integer((-244));
      Integer integer6 = new Integer(2197);
      Integer integer7 = new Integer(836);
      Integer integer8 = new Integer(285);
      Integer integer9 = new Integer(285);
      Integer integer10 = new Integer(2197);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(yV_4kp%_");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("lgo");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("lgo");
      SystemInUtil.addInputLine("qtn");
      jSTerm0.add((Object) "lgo");
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qtn");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine(". ");
      jSTerm0.removeAll(jSTerm0);
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine(". ");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine("}f_A)cfhkb)g>T?");
      SystemInUtil.addInputLine(";AE,");
      jSTerm0.makeVariable();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0114042647073516
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "\"nr");
      StringReader stringReader0 = new StringReader("D<VY|c_u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.clear();
      jSTerm0.add((Object) "D<VY|c_u");
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.stream();
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      SystemInUtil.addInputLine("\"nr");
      jSTerm0.add((Object) jSTerm1);
      jSTerm1.makeVariable();
      jSTerm0.clonePF();
      jSTerm1.applySubstitutionPF((JSSubstitution) null);
      System.setCurrentTimeMillis((-1));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.removeElement((Object) null);
      jSTerm0.isGround();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = null;
      objectArray0[2] = null;
      jSTerm0.add((Object) "3.0");
      objectArray0[3] = (Object) "3.0";
      jSTerm0.add(objectArray0[2]);
      objectArray0[4] = (Object) "3.0";
      jSTerm0.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBqN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.ordinaryChar(6);
      stringReader0.reset();
      SystemInUtil.addInputLine(">=");
      streamTokenizer1.sval = null;
      streamTokenizer1.nextToken();
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer2.ordinaryChars((-4), (-3));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.sval = null;
      streamTokenizer1.sval = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) null);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBqN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer1.ordinaryChar((-4));
      stringReader0.reset();
      streamTokenizer1.sval = null;
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.sval = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) streamTokenizer1);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "<oS";
      jSTerm0.add((Object) "<oS");
      jSTerm0.add((Object) "<oS");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "qot");
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine("FwHls8H");
      StringReader stringReader0 = new StringReader("xVxT1Ub");
      System.setCurrentTimeMillis((-14L));
      jSTerm0.makeFunction();
      SystemInUtil.addInputLine("qot");
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      jSTerm0.clone();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V@Tf J8");
      stringReader0.close();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.astherisk = 0;
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSJshopVars.astherisk = 2510;
      jSPredicateForm0.spliterator();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-2101));
      Integer integer1 = new Integer((-1));
      Function.identity();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer((-366172147));
      Integer integer5 = new Integer(59);
      Integer integer6 = new Integer(47);
      Integer integer7 = new Integer((-366172147));
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer((-1083012063));
      Integer integer10 = new Integer((-2101));
      Integer integer11 = new Integer(2517);
      Integer integer12 = new Integer(47);
      Integer integer13 = new Integer((-3));
      Integer integer14 = new Integer(0);
      Integer integer15 = new Integer(42);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.sval = null;
      streamTokenizer0.parseNumbers();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      stringReader0.read();
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      stringReader0.skip((-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-1433728624));
      streamTokenizer1.ttype = (-1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine("!");
      StringReader stringReader0 = new StringReader("xVxT1Ub");
      System.setCurrentTimeMillis((-14L));
      jSTerm0.makeFunction();
      SystemInUtil.addInputLine("E-&:V:V");
      SystemInUtil.addInputLine("qot");
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QBtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChar(3);
      stringReader0.reset();
      streamTokenizer1.sval = null;
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) 0L;
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.sval = null;
      jSTerm0.add((Object) streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBqN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.sval = "Reading Predicate";
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.ordinaryChar(6);
      stringReader0.reset();
      SystemInUtil.addInputLine("u#");
      streamTokenizer1.sval = "nT[Nj-N}t=";
      streamTokenizer1.nextToken();
      streamTokenizer1.sval = "Reading Predicate";
      streamTokenizer2.ttype = (-3);
      streamTokenizer1.commentChar((-3));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer2.ordinaryChars((-4), (-3));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) 0L;
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.sval = null;
      streamTokenizer1.sval = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) streamTokenizer1);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2101));
      Integer integer1 = new Integer((-1));
      Function.identity();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer((-366172147));
      Integer integer5 = new Integer(59);
      Integer integer6 = new Integer(2197);
      Integer integer7 = new Integer((-3));
      Integer integer8 = new Integer((-780));
      Integer integer9 = new Integer(1952);
      Integer integer10 = new Integer(1528);
      Integer integer11 = new Integer((-1221));
      Integer integer12 = new Integer(88);
      Integer integer13 = new Integer(1490);
      unaryOperator0.apply(integer13);
      Integer integer14 = new Integer(2197);
      SystemInUtil.addInputLine("+G,{C7rwy=j=TUs");
      StringReader stringReader0 = new StringReader("wU!Iw$^2qXv2-P2CB6");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5571130980576458
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "qot");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.listIterator();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.clonePF();
      jSPredicateForm3.toStr();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm1.toStr();
      jSPredicateForm2.toStr();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm2.clonePF();
      jSPredicateForm2.clonePF();
      jSPredicateForm4.removeAll(jSTerm0);
      jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm0.toStr();
      jSPredicateForm5.ensureCapacity(2936);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.clonePF();
      jSPredicateForm5.clonePF();
      jSPredicateForm6.listIterator();
      // Undeclared exception!
      try { 
        jSPredicateForm4.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBqN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer1.ordinaryChar(6);
      stringReader0.reset();
      streamTokenizer1.sval = null;
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) 0L;
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.sval = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) streamTokenizer1);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.sval = null;
      streamTokenizer0.parseNumbers();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      stringReader0.read();
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      stringReader0.skip((-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-1433728624));
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.whitespaceChars((-4), (-709));
      streamTokenizer1.quoteChar((-1));
      streamTokenizer1.ordinaryChars((-4), (-1));
      jSTerm0.add((Object) null);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.nval = (double) (-1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.sval = null;
      streamTokenizer0.parseNumbers();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      stringReader0.read();
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      stringReader0.skip((-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-1433728624));
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.whitespaceChars((-4), (-709));
      streamTokenizer1.quoteChar((-1));
      streamTokenizer1.ordinaryChars((-4), (-1));
      jSTerm0.add((Object) null);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer2.resetSyntax();
      stringReader0.read();
      streamTokenizer2.nval = (double) (-1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("BtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StringReader stringReader1 = new StringReader(",.MD*V9|9fp");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = new StringReader("BtN");
      char[] charArray0 = new char[2];
      charArray0[0] = 'L';
      charArray0[1] = ',';
      int int0 = new Integer((-4));
      stringReader0.close();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBqN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer1.ordinaryChar(6);
      stringReader0.reset();
      streamTokenizer1.sval = null;
      streamTokenizer1.nextToken();
      streamTokenizer1.sval = null;
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer2.ordinaryChars((-4), (-3));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer2.commentChar(6);
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer1.sval = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) null);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-366172147));
      Function.identity();
      Integer integer2 = new Integer(2197);
      Integer integer3 = new Integer(59);
      Integer integer4 = new Integer(0);
      Integer integer5 = new Integer((-1));
      Integer integer6 = new Integer(59);
      Integer integer7 = new Integer(0);
      Integer integer8 = new Integer(2938);
      Integer integer9 = new Integer(2965);
      Integer integer10 = new Integer(2197);
      Integer integer11 = new Integer(59);
      Integer integer12 = new Integer((-366172147));
      unaryOperator0.apply(integer12);
      Integer integer13 = new Integer(0);
      Integer integer14 = new Integer(104);
      UnaryOperator.identity();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      stringReader0.read();
      streamTokenizer2.ordinaryChars((-4967), 1);
      streamTokenizer0.pushBack();
      stringReader0.skip((-4));
      streamTokenizer2.slashSlashComments(false);
      stringReader0.skip((-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.resetSyntax();
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-1433728624));
      streamTokenizer1.ttype = (-1);
      streamTokenizer1.whitespaceChars((-4), (-1));
      streamTokenizer1.quoteChar((-1));
      streamTokenizer1.ordinaryChars((-4), (-1));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution2 = jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-2101));
      Integer integer1 = new Integer((-1));
      Function.identity();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer((-366172147));
      Integer integer5 = new Integer(59);
      Integer integer6 = new Integer(47);
      Integer integer7 = new Integer((-366172147));
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer((-1083012063));
      Integer integer10 = new Integer((-2101));
      Integer integer11 = new Integer(2517);
      Integer integer12 = new Integer(47);
      Integer integer13 = new Integer((-3));
      Integer integer14 = new Integer(43);
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals(0, jSPredicateForm0.size());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SystemInUtil.addInputLine("lgo");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qtn");
      SystemInUtil.addInputLine("qot");
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("qtn");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "\"nr");
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-548L));
      System.setCurrentTimeMillis((-548L));
      System.setCurrentTimeMillis(1128L);
      System.setCurrentTimeMillis((-47L));
      System.setCurrentTimeMillis(259L);
      StringReader stringReader0 = new StringReader("t&IlR><FF|WzeTI/");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis((-4393L));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "<oS");
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      Function.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function5 = function4.compose((Function<? super String, ?>) function3);
      Function.identity();
      Function<Object, Object> function6 = unaryOperator2.andThen((Function<? super Object, ?>) function2);
      function2.compose((Function<? super String, ?>) function6);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function7 = function2.andThen((Function<? super String, ? extends String>) function3);
      Function.identity();
      function3.andThen((Function<? super String, ? extends String>) function0);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = function2.andThen((Function<? super String, ? extends String>) function5);
      function4.compose((Function<? super Integer, ?>) function8);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function8);
      function2.apply("<oS");
      Function<Object, String> function9 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      function9.andThen((Function<? super String, ? extends String>) function7);
      Function.identity();
      Function<String, String> function10 = Function.identity();
      assertFalse(function10.equals((Object)function5));
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nnt");
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(1249);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      System.setCurrentTimeMillis(0);
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      JSJshopVars.greaterT = 0;
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(2750L);
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(1249);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBqN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.sval = "Reading Predicate";
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.ordinaryChar(6);
      stringReader0.reset();
      SystemInUtil.addInputLine("u#");
      streamTokenizer1.sval = "nT[Nj-N}t=";
      streamTokenizer1.nextToken();
      streamTokenizer1.sval = "Reading Predicate";
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer2.ordinaryChars((-4), (-3));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) 0L;
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.sval = null;
      streamTokenizer1.sval = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addAll((Collection) jSTerm0);
      jSPredicateForm0.print();
      assertEquals("[%%%]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("NBqN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.sval = null;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.ordinaryChars((-4), (-1));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer1.ordinaryChar(6);
      stringReader0.reset();
      SystemInUtil.addInputLine("u#");
      streamTokenizer1.sval = null;
      streamTokenizer1.nextToken();
      streamTokenizer1.sval = null;
      streamTokenizer1.commentChar((-1));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer2.ordinaryChars((-4), (-3));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.resetSyntax();
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.ordinaryChars((-3), (-3));
      streamTokenizer0.sval = null;
      streamTokenizer1.sval = null;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) streamTokenizer1);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-2101));
      Integer integer1 = new Integer((-1));
      Function.identity();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer((-366172147));
      Integer integer5 = new Integer(59);
      Integer integer6 = new Integer(47);
      Integer integer7 = new Integer((-366172147));
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer((-1083012063));
      Integer integer10 = new Integer((-2101));
      Integer integer11 = new Integer(2517);
      Integer integer12 = new Integer(47);
      Integer integer13 = new Integer((-3));
      Integer integer14 = new Integer(43);
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertEquals(0, jSPredicateForm0.size());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2101));
      Integer integer1 = new Integer((-1));
      Function.identity();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer((-366172147));
      Integer integer5 = new Integer(59);
      Integer integer6 = new Integer(1372);
      unaryOperator0.apply(integer6);
      Integer integer7 = new Integer(47);
      Integer integer8 = new Integer((-366172147));
      Integer integer9 = new Integer((-1));
      Integer integer10 = new Integer((-1083012063));
      Integer integer11 = new Integer((-2101));
      Integer integer12 = new Integer((-2101));
      Integer integer13 = new Integer((-1611522464));
      Integer integer14 = new Integer(88);
      Integer integer15 = new Integer((-2101));
      unaryOperator0.apply(integer15);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer16 = new Integer((-1));
      jSTerm0.add((Object) integer16);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qtn");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<String, String> function2 = unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<String, Object> function3 = unaryOperator0.andThen((Function<? super String, ?>) function2);
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<String, String> function5 = function1.compose((Function<? super String, ?>) function3);
      function3.andThen((Function<? super Object, ?>) function1);
      function2.andThen((Function<? super String, ?>) function1);
      Function<String, String> function6 = function1.compose((Function<? super String, ?>) function4);
      Function.identity();
      Function<Object, String> function7 = function4.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      Function.identity();
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      function4.compose((Function<? super Integer, ?>) function7);
      function2.compose((Function<? super String, ? extends String>) function6);
      function7.apply(function5);
      function2.apply("<v>%cdf");
      SystemInUtil.addInputLine("4+%]!b l5>wv%");
      Integer integer0 = new Integer(2773);
      function1.apply(integer0);
      UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      Function<Object, String> function8 = unaryOperator0.compose((Function<? super Object, ? extends String>) function4);
      function8.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function.identity();
      Function.identity();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "<oS");
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      Function.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function5 = function4.compose((Function<? super String, ?>) function3);
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator3.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, Object> function7 = unaryOperator2.andThen((Function<? super Object, ?>) function6);
      function6.compose((Function<? super String, ?>) function7);
      Function.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = function2.andThen((Function<? super String, ? extends String>) function6);
      Function.identity();
      Function.identity();
      function6.andThen((Function<? super String, ? extends String>) function0);
      Function.identity();
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function9 = function2.andThen((Function<? super String, ? extends String>) function5);
      function4.compose((Function<? super Integer, ?>) function9);
      UnaryOperator.identity();
      Function.identity();
      Function<String, String> function10 = Function.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function9);
      function2.apply("<oS");
      Function<Object, String> function11 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function12 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function12);
      function11.andThen((Function<? super String, ? extends String>) function8);
      Function.identity();
      Function<String, String> function13 = Function.identity();
      assertSame(function13, function10);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V@Tf J8");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = (-1836);
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm1.containsAll(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      streamTokenizer0.ordinaryChar((-1879791106));
      JSJshopVars.astherisk = 0;
      jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.flagLevel = 2255;
      jSPredicateForm3.lastElement();
      jSSubstitution0.removeElement("VTf");
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm2.spliterator();
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm3.toStr();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm5.standarizerPredicateForm();
      jSPredicateForm6.clonePF();
      // Undeclared exception!
      try { 
        jSPredicateForm6.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("ngt");
      SystemInUtil.addInputLine("lgo");
      SystemInUtil.addInputLine("qot");
      Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) function2);
      Function.identity();
      Function.identity();
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function5 = function1.andThen((Function<? super String, ? extends String>) function4);
      Function.identity();
      unaryOperator0.compose((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function6 = function5.andThen((Function<? super String, ? extends String>) function2);
      function6.compose((Function<? super Integer, ?>) function3);
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ?>) function4);
      Object object0 = new Object();
      function1.apply(object0);
      Function<Object, String> function7 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      Function<Object, String> function8 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function8);
      Function<Object, String> function9 = unaryOperator0.compose((Function<? super Object, ? extends String>) function6);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function9);
      function5.andThen((Function<? super String, ? extends String>) function3);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("qot");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      UnaryOperator.identity();
      Integer integer0 = new Integer((-2101));
      Integer integer1 = new Integer((-1));
      Function.identity();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer((-366172147));
      Integer integer5 = new Integer(59);
      Integer integer6 = new Integer(2197);
      Integer integer7 = new Integer(2197);
      Integer integer8 = new Integer(33);
      Integer integer9 = new Integer((-2101));
      Integer integer10 = new Integer((-3));
      Integer integer11 = new Integer((-3));
      Integer integer12 = new Integer((-1724488857));
      StringReader stringReader0 = new StringReader("(");
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1686);
      Function<Integer, String> function0 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function0);
      Integer integer2 = new Integer(2197);
      unaryOperator0.apply(integer0);
      Integer integer3 = new Integer(1686);
      Integer integer4 = new Integer(1871);
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super Integer, ? extends Integer>) unaryOperator1);
      Integer integer5 = new Integer(1871);
      Integer integer6 = new Integer(486);
      Integer integer7 = new Integer((-613));
      Integer integer8 = new Integer((-28825318));
      unaryOperator0.apply(integer8);
      Integer integer9 = new Integer(2921);
      Integer integer10 = new Integer((-251));
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-2101));
      Integer integer1 = new Integer((-1));
      Function.identity();
      Integer integer2 = new Integer((-1));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer((-1));
      Integer integer5 = new Integer(59);
      Integer integer6 = new Integer(2197);
      Integer integer7 = new Integer((-3));
      Integer integer8 = new Integer((-780));
      Integer integer9 = new Integer(1952);
      Integer integer10 = new Integer(1528);
      Integer integer11 = new Integer((-1221));
      Integer integer12 = new Integer(88);
      Integer integer13 = new Integer(1490);
      unaryOperator0.apply(integer13);
      Integer integer14 = new Integer(2197);
      Integer integer15 = new Integer((-780));
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Function.identity();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<String> predicate1 = predicate0.or(predicate0);
      Predicate<String> predicate2 = predicate1.and(predicate0);
      Predicate<String> predicate3 = predicate2.negate();
      predicate3.and(predicate0);
      jSTerm0.removeIf(predicate3);
      jSTerm0.makeVariable();
      System.setCurrentTimeMillis((-1033L));
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      SystemInUtil.addInputLine("lgo");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qtn");
      jSTerm0.add((Object) "qot");
      SystemInUtil.addInputLine("qot");
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      SystemInUtil.addInputLine("qot");
      SystemInUtil.addInputLine("qot");
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Function.identity();
      Function<String, String> function0 = Function.identity();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<String, String> function5 = function4.compose((Function<? super String, ?>) function3);
      Function.identity();
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator3.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, Object> function7 = unaryOperator2.andThen((Function<? super Object, ?>) function6);
      function6.compose((Function<? super String, ?>) function7);
      Function.identity();
      unaryOperator3.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function8 = function2.andThen((Function<? super String, ? extends String>) function6);
      Function.identity();
      Function.identity();
      function6.andThen((Function<? super String, ? extends String>) function0);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function9 = function2.andThen((Function<? super String, ? extends String>) function5);
      function4.compose((Function<? super Integer, ?>) function9);
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      unaryOperator2.compose((Function<? super Integer, ?>) function9);
      function2.apply("<FYVS");
      Function<Object, String> function10 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function11 = unaryOperator3.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function11);
      function10.andThen((Function<? super String, ? extends String>) function8);
      Function.identity();
      Function.identity();
      StringReader stringReader0 = new StringReader("i|s");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      StringBuffer stringBuffer1 = jSPredicateForm0.toStr();
      assertFalse(stringBuffer1.equals((Object)stringBuffer0));
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.5783252866601273
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer((-1));
      Integer integer1 = new Integer((-366172147));
      Function.identity();
      Integer integer2 = new Integer(2197);
      unaryOperator0.apply(integer0);
      Integer integer3 = new Integer((-366172147));
      Integer integer4 = new Integer(2197);
      Integer integer5 = new Integer((-366172147));
      Integer integer6 = new Integer(486);
      Integer integer7 = new Integer(486);
      Integer integer8 = new Integer((-1357));
      Integer integer9 = new Integer((-28825318));
      unaryOperator0.apply(integer4);
      Integer integer10 = new Integer(1);
      Integer integer11 = new Integer((-449));
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(j XGSwP9sYv1t|}w");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("Nd0Eg8!q");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.5783252866601273
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Integer integer0 = new Integer(1315);
      Integer integer1 = new Integer((-366172147));
      Function.identity();
      Integer integer2 = new Integer((-2101));
      Integer integer3 = new Integer((-122));
      Integer integer4 = new Integer(59);
      Integer integer5 = new Integer(1315);
      Integer integer6 = new Integer((-1));
      Integer integer7 = new Integer((-3558));
      Integer integer8 = new Integer((-1));
      Integer integer9 = new Integer(59);
      Integer integer10 = new Integer(1123);
      Integer integer11 = new Integer(4);
      Integer integer12 = new Integer((-1));
      Integer integer13 = new Integer(59);
      Integer integer14 = new Integer(93);
      Integer integer15 = new Integer((-2101));
      UnaryOperator.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(j XGSwP9sYv1t|}w");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
