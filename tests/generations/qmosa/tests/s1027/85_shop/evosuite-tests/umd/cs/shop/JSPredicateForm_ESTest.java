/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 20:51:38 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nmx");
      SystemInUtil.addInputLine("kz#{f;RF#G,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm0);
      SystemInUtil.addInputLine("kz#{f;RF#G,");
      jSTerm0.makeConstant();
      stringReader0.close();
      Object[] objectArray0 = new Object[7];
      jSTerm0.add((Object) "nmx");
      SystemInUtil.addInputLine("N:|m+ho");
      Consumer<JSTerm> consumer1 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "nmx";
      jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      Object[] objectArray1 = new Object[2];
      Object object1 = new Object();
      jSTerm0.makeFunction();
      jSTerm0.add(object1);
      jSTerm0.forEach(consumer0);
      objectArray1[0] = (Object) "nmx";
      objectArray1[1] = (Object) jSTerm0;
      jSTerm0.add(object0);
      streamTokenizer0.whitespaceChars((-1433728613), (-1433728613));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iBj`");
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = '>';
      charArray0[2] = 'p';
      charArray0[3] = 'r';
      charArray0[4] = 'L';
      charArray0[5] = ';';
      charArray0[6] = 'N';
      charArray0[7] = '*';
      stringReader0.read(charArray0);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.setSize(4);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSJshopVars.interrogation = 47;
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(}oR<|)");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0475124679331866
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("StvEi)2,/Wy5]8z'#g,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm0.standarizerPredicateForm();
      streamTokenizer0.quoteChar(105);
      SystemInUtil.addInputLine("!");
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = (JSTerm)jSTerm3.clone();
      jSTerm2.add((Object) jSTerm3);
      jSTerm3.add((Object) jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution1);
      assertEquals(2, jSPredicateForm0.size());
      
      jSTerm3.spliterator();
      jSTerm2.spliterator();
      jSTerm0.spliterator();
      streamTokenizer0.nextToken();
      jSTerm2.matches((JSPredicateForm) jSTerm4);
      JSPredicateForm jSPredicateForm1 = jSTerm2.clonePF();
      assertEquals(2, jSPredicateForm1.size());
      
      JSSubstitution jSSubstitution2 = jSTerm1.matches((JSPredicateForm) jSTerm2, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8047593108912576
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("StvEi)2,/Wy5]8z'#g,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm0.standarizerPredicateForm();
      streamTokenizer0.quoteChar(105);
      JSTerm jSTerm3 = (JSTerm)jSTerm0.clone();
      jSTerm2.add((Object) jSTerm0);
      jSTerm1.add((Object) jSTerm2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm0.spliterator();
      jSTerm2.spliterator();
      jSTerm0.spliterator();
      jSTerm1.matches(jSPredicateForm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm2.matches((JSPredicateForm) jSTerm3);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0980526298332742
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("c0`+0ZP%9^%s`OG^~N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.wordChars((-4), (-4));
      stringReader0.close();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.pushBack();
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer2.pushBack();
      streamTokenizer2.parseNumbers();
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.quoteChar(58);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.parseNumbers();
      jSTerm0.makeVariable();
      streamTokenizer1.pushBack();
      streamTokenizer2.pushBack();
      jSTerm0.add((Object) "not");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      streamTokenizer1.slashStarComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<String, Integer> function1 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      function1.apply(":>");
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function4 = function3.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      function5.compose((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      Function<String, String> function6 = function5.compose((Function<? super String, ? extends String>) function3);
      Function<Integer, Integer> function7 = Function.identity();
      Function<String, String> function8 = Function.identity();
      Function.identity();
      Function<String, Integer> function9 = function6.andThen((Function<? super String, ? extends Integer>) function4);
      Function.identity();
      function4.apply(function3);
      Function<Object, Integer> function10 = function4.andThen((Function<? super Integer, ? extends Integer>) function7);
      Function<Object, String> function11 = unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends String>) function3);
      function9.andThen((Function<? super Integer, ?>) function3);
      Function<String, Integer> function12 = unaryOperator1.andThen((Function<? super String, ? extends Integer>) function9);
      function12.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, String> function13 = function10.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      function1.compose((Function<? super Integer, ? extends String>) function13);
      function3.andThen((Function<? super String, ?>) function8);
      function11.compose((Function<? super Integer, ?>) function4);
      function11.apply(function13);
      function9.andThen((Function<? super Integer, ? extends String>) function13);
      function9.apply((String) null);
      Function.identity();
      function9.apply(":>");
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      Function.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(xIGhwP9sYt|,p");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "not";
      objectArray0[1] = (Object) "not";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) "not";
      objectArray0[6] = (Object) jSTerm0;
      objectArray0[7] = (Object) "not";
      objectArray0[8] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.0990410695344712
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nmx");
      SystemInUtil.addInputLine("kz#{f;RF#G,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm0);
      SystemInUtil.addInputLine("kz#{f;RF#G,");
      jSTerm0.makeConstant();
      jSTerm0.parallelStream();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm1.standarizerPredicateForm();
      jSTerm0.equals(jSPredicateForm0);
      jSTerm0.isEmpty();
      jSPredicateForm1.toStr();
      JSPredicateForm jSPredicateForm2 = null;
      try {
        jSPredicateForm2 = new JSPredicateForm("kz#{f;RF#G,");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SystemInUtil.addInputLine("ij^");
      SystemInUtil.addInputLine("ij^");
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "npt");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.add((Object) unaryOperator0);
      jSSubstitution0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.UnaryOperator$$Lambda$44/246700338 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.270976329380663
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QPBt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm1.equals((JSPredicateForm) jSTerm2);
      jSSubstitution0.parallelStream();
      boolean boolean0 = jSTerm0.equals((JSPredicateForm) jSTerm2);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeAll(jSTerm0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.addElements(jSSubstitution3);
      JSTerm jSTerm3 = new JSTerm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = jSPredicateForm1.matches((JSPredicateForm) jSTerm1, jSSubstitution2);
      assertFalse(jSSubstitution7.fail());
      assertEquals("[%%%, [%%%]]", jSPredicateForm1.toString());
      
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      System.setCurrentTimeMillis((-1767L));
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.applySubstitutionPF(jSSubstitution8);
      assertNotSame(jSPredicateForm2, jSPredicateForm0);
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.092024677984824
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QBtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm1.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      streamTokenizer0.quoteChar(105);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.print();
      jSPredicateForm1.print();
      // Undeclared exception!
      try { 
        jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.809925179858232
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QPBt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      jSTerm1.addAll((Collection) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer((-1));
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSJshopVars.verticalL = (int) integer0;
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm3 = jSSubstitution4.instance(jSTerm1);
      jSTerm0.equals(jSPredicateForm0);
      jSSubstitution2.parallelStream();
      jSTerm3.isEmpty();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.removeAll(jSSubstitution1);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.clonePF();
      jSTerm4.removeAll(jSSubstitution1);
      System.setCurrentTimeMillis((-1));
      System.setCurrentTimeMillis((-4115L));
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution4.stream();
      System.setCurrentTimeMillis((-1));
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm4.applySubstitutionPF(jSSubstitution8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nmx");
      SystemInUtil.addInputLine("kz#{f;RF#G,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.makeConstant();
      stringReader0.close();
      Object[] objectArray0 = new Object[7];
      jSTerm0.add((Object) "nmx");
      Integer integer0 = new Integer((-1433728613));
      SystemInUtil.addInputLine("N:|m+ho");
      jSTerm0.add((Object) jSTerm0);
      Consumer<JSTerm> consumer1 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer1);
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "nmx";
      SystemInUtil.addInputLine(";RSJg6b+[!?o+Kw");
      jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      Object[] objectArray1 = new Object[2];
      Object object1 = new Object();
      jSTerm0.add(object1);
      jSTerm0.forEach(consumer0);
      objectArray1[0] = (Object) "nmx";
      objectArray1[1] = (Object) jSTerm0;
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "#");
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) "nmt";
      objectArray0[4] = (Object) "nmt";
      jSTerm0.add((Object) null);
      jSTerm0.setSize(1203);
      Object object0 = new Object();
      objectArray0[3] = objectArray0[1];
      objectArray0[4] = (Object) "nmt";
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) "nmt");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0349758376817864
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QBtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm2);
      jSTerm1.addAll((Collection) jSTerm0);
      jSTerm1.add((Object) jSTerm2);
      jSTerm0.matches((JSPredicateForm) jSTerm1);
      jSTerm1.makeEval(true);
      jSTerm0.standarizerPredicateForm();
      streamTokenizer0.quoteChar(105);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = (JSTerm)jSTerm3.clone();
      jSTerm2.add((Object) jSTerm3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      System.setCurrentTimeMillis(0L);
      jSTerm0.spliterator();
      jSTerm1.matches(jSPredicateForm0, jSSubstitution0);
      jSTerm2.matches((JSPredicateForm) jSTerm4);
      // Undeclared exception!
      try { 
        jSTerm2.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Qt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-1828));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ordinaryChars((-4), 1031);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.nextToken();
      streamTokenizer0.nval = (double) 81;
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis((-1));
      streamTokenizer1.pushBack();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.makeVariable();
      jSTerm0.add((Object) "not");
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 45;
      StringReader stringReader0 = new StringReader("Line ");
      stringReader0.read();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "ca");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution3.spliterator();
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.addAll((Collection) jSSubstitution0);
      jSSubstitution6.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution8 = jSSubstitution5.standarizerSubs();
      jSSubstitution8.listIterator();
      jSSubstitution1.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSSubstitution9.addElements(jSSubstitution2);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 45;
      StringReader stringReader0 = new StringReader("Line ");
      stringReader0.read();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "ca");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSSubstitution1.parallelStream();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.spliterator();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution6.addElements(jSSubstitution9);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution10);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      assertTrue(jSSubstitution11.equals((Object)jSSubstitution0));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("yinu ");
      stringReader0.read();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      Spliterator spliterator0 = jSSubstitution2.spliterator();
      jSSubstitution3.ensureCapacity(121);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      jSSubstitution3.add((Object) spliterator0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution3.spliterator();
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.addAll((Collection) jSSubstitution0);
      jSSubstitution6.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution6.spliterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.trimToSize();
      jSSubstitution11.add((Object) jSSubstitution1);
      jSSubstitution8.addElements(jSSubstitution11);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSSubstitution jSSubstitution15 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution15.fail());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nmxt");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.removeElement(stringReader0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.addAll((Collection) jSTerm0);
      jSTerm0.add((Object) stringReader0);
      stringReader0.close();
      SystemInUtil.addInputLine("N:|m+ho");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object[] objectArray0 = new Object[7];
      jSTerm0.add((Object) "nmxt");
      Integer integer0 = new Integer((-1433728613));
      jSTerm0.add((Object) integer0);
      jSTerm1.add((Object) jSTerm0);
      jSTerm0.standardizerTerm();
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) "nmxt";
      SystemInUtil.addInputLine("?w");
      jSTerm0.toArray(objectArray0);
      Object object0 = new Object();
      Object[] objectArray1 = new Object[2];
      Object object1 = new Object();
      jSTerm0.add(object1);
      objectArray1[0] = (Object) "N:|m+ho";
      objectArray1[1] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray1);
      jSTerm0.add(object0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("Line ");
      stringReader0.read();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "ca");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.spliterator();
      jSSubstitution3.ensureCapacity(76);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution3.spliterator();
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.addAll((Collection) jSSubstitution0);
      jSSubstitution6.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.spliterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.add((Object) jSSubstitution1);
      jSSubstitution8.addElements(jSSubstitution11);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ch|_hfpv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.nextToken();
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer1.pushBack();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z*tjlMo!H1K<&}Jfm=b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = null;
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis((-4));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VJ@'?%0AHtBcN|q;I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(false);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars((-4), 1498);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      Object object0 = new Object();
      jSTerm0.add((Object) streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm0.add((Object) jSTerm1);
      boolean boolean0 = jSTerm1.equals((JSPredicateForm) jSTerm0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nmx");
      SystemInUtil.addInputLine("kz#{f;RF#G,");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) jSTerm0);
      SystemInUtil.addInputLine("kz#{f;RF#G,");
      stringReader0.close();
      Object[] objectArray0 = new Object[7];
      jSTerm0.add((Object) "nmx");
      SystemInUtil.addInputLine("N:|m+ho");
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) "nmx";
      Object object0 = new Object();
      Object[] objectArray1 = new Object[2];
      Object object1 = new Object();
      objectArray1[0] = (Object) "nmx";
      objectArray1[1] = (Object) jSTerm0;
      Integer integer0 = new Integer((-1));
      jSTerm0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      char[] charArray0 = new char[8];
      charArray0[0] = ']';
      charArray0[1] = '>';
      charArray0[2] = 'p';
      charArray0[3] = 'r';
      charArray0[4] = ']';
      charArray0[5] = ';';
      charArray0[6] = 'N';
      charArray0[7] = '*';
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("iBj`");
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("bXys%QFa");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer1.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.eolIsSignificant(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-1432), 0);
      streamTokenizer2.pushBack();
      streamTokenizer0.nval = 0.0;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.quoteChar(58);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), 1025);
      streamTokenizer0.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      streamTokenizer1.parseNumbers();
      jSTerm0.makeVariable();
      streamTokenizer1.pushBack();
      streamTokenizer2.pushBack();
      jSTerm0.add((Object) null);
      streamTokenizer1.slashStarComments(true);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "not";
      objectArray0[1] = (Object) "not";
      jSTerm0.add((Object) "<lN*OIMF");
      objectArray0[2] = (Object) "not";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "not";
      objectArray0[5] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add(objectArray0[0]);
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("^p.K^)`");
      stringReader0.markSupported();
      jSTerm0.add((Object) stringReader0);
      System.setCurrentTimeMillis(1L);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.156071048481391
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nHoo");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm1.lastElement();
      jSPredicateForm4.equals(jSPredicateForm1);
      jSPredicateForm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 45;
      StringReader stringReader0 = new StringReader("Line ");
      stringReader0.read();
      jSSubstitution0.add((Object) "ca");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      jSSubstitution1.spliterator();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.addElements(jSSubstitution2);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution0.spliterator();
      jSSubstitution2.retainAll(jSSubstitution1);
      jSSubstitution1.spliterator();
      JSTerm jSTerm1 = new JSTerm();
      jSSubstitution0.parallelStream();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.removeElements(jSSubstitution3);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution1.addElements(jSSubstitution8);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution0);
      Spliterator spliterator0 = jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      jSSubstitution3.add((Object) spliterator0);
      jSSubstitution3.spliterator();
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.addAll((Collection) jSSubstitution0);
      jSSubstitution6.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution6.spliterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.add((Object) jSSubstitution1);
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution13);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 45;
      StringReader stringReader0 = new StringReader("Line ");
      stringReader0.read();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "ca");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution3.spliterator();
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.addAll((Collection) jSSubstitution0);
      jSSubstitution6.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.spliterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.add((Object) jSSubstitution1);
      jSSubstitution8.addElements(jSSubstitution11);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution12);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      assertFalse(jSSubstitution13.equals((Object)jSSubstitution8));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = "QBtN";
      StringReader stringReader0 = new StringReader("QBtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.stream();
      Object object0 = jSTerm0.clone();
      jSTerm0.add(object0);
      jSTerm0.add(object0);
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 45;
      StringReader stringReader0 = new StringReader("Line ");
      stringReader0.read();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSSubstitution3.spliterator();
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.addAll((Collection) jSSubstitution0);
      jSSubstitution6.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.spliterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.add((Object) jSSubstitution1);
      jSSubstitution8.addElements(jSSubstitution11);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      jSTerm1.matches((JSPredicateForm) jSTerm0, jSSubstitution12);
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      assertTrue(jSSubstitution13.equals((Object)jSSubstitution6));
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<String, Integer> function1 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      function1.apply(":iZx");
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function4 = function3.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      Function.identity();
      Function.identity();
      Function<String, String> function6 = Function.identity();
      function4.apply(function6);
      Function<Object, Integer> function7 = function4.andThen((Function<? super Integer, ? extends Integer>) function4);
      Function<Object, String> function8 = function3.compose((Function<? super Object, ?>) function7);
      Function<Object, String> function9 = unaryOperator0.compose((Function<? super Object, ? extends String>) function8);
      function7.andThen((Function<? super Integer, ? extends String>) function9);
      Function<Object, Integer> function10 = function4.andThen((Function<? super Integer, ? extends Integer>) function4);
      function1.andThen((Function<? super Integer, ?>) function10);
      Function<String, Integer> function11 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, String> function12 = function4.andThen((Function<? super Integer, ? extends String>) function3);
      function7.andThen((Function<? super Integer, ? extends Integer>) function7);
      function11.compose((Function<? super Integer, ? extends String>) function3);
      function8.compose((Function<? super String, ?>) function4);
      Function<Object, Object> function13 = function12.andThen((Function<? super String, ?>) function5);
      function12.andThen((Function<? super String, ? extends Integer>) function11);
      function3.compose((Function<? super Integer, ?>) function7);
      function8.apply(":iZx");
      SystemInUtil.addInputLine(")");
      Object object0 = new Object();
      Function.identity();
      Object object1 = new Object();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) function13);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.function.Function$$Lambda$46/1835861305 cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VJ@'?%0AHtBcN|q;I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ordinaryChars((-4), 1498);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = null;
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis((-4));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "VpXu*");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.compose((Function<? super Object, ? extends String>) function0);
      Integer integer0 = new Integer(682);
      function1.apply(integer0);
      Function<Object, Integer> function2 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function2).apply(any());
      Function<String, Integer> function3 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function2);
      Function<String, String> function4 = function3.andThen((Function<? super Integer, ? extends String>) function1);
      function4.apply((String) null);
      Integer integer1 = new Integer(682);
      Function<String, Object> function5 = function4.andThen((Function<? super String, ?>) function1);
      Function<Object, Integer> function6 = function3.compose((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function7 = function1.andThen((Function<? super String, ?>) function3);
      Function<Integer, String> function8 = function1.compose((Function<? super Integer, ?>) function6);
      function4.andThen((Function<? super String, ? extends String>) unaryOperator0);
      function1.apply(function5);
      unaryOperator0.andThen((Function<? super String, ?>) function7);
      function3.andThen((Function<? super Integer, ? extends String>) function8);
      function3.andThen((Function<? super Integer, ? extends String>) function8);
      function3.apply("z+7jK]^C:4Y");
      unaryOperator0.andThen((Function<? super String, ?>) function3);
      Function.identity();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(7, stringBuffer0.length());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[6];
      objectArray0[0] = (Object) "Avt";
      objectArray0[1] = (Object) "Avt";
      objectArray0[2] = (Object) "Avt";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) "Avt";
      objectArray0[5] = (Object) jSTerm0;
      jSTerm0.toArray(objectArray0);
      jSTerm0.add((Object) "Avt");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      assertEquals(1, jSPredicateForm0.size());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      StringReader stringReader0 = new StringReader("k\"Gpe0$");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.nextToken();
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.commentChar((-3));
      streamTokenizer1.sval = "k\"Gpe0$";
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.sval = "k\"Gpe0$";
      streamTokenizer1.whitespaceChars((-3), (-4));
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), 1021);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.ordinaryChars((-3), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      streamTokenizer1.pushBack();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QLtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.close();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer0.wordChars((-4), 4298);
      streamTokenizer0.nval = 0.0;
      streamTokenizer0.ordinaryChars((-1433955981), (-1433955981));
      streamTokenizer0.ordinaryChars((-4), 1025);
      streamTokenizer1.pushBack();
      streamTokenizer2.pushBack();
      stringReader0.markSupported();
      UnaryOperator.identity();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("iBj`");
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = '>';
      charArray0[2] = 'p';
      charArray0[3] = 'r';
      charArray0[4] = 'L';
      charArray0[5] = ';';
      charArray0[6] = 'N';
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) stringReader0);
      long long0 = (-2318L);
      long long1 = 162L;
      System.setCurrentTimeMillis(162L);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("&:=tA");
      String string0 = "Zw\\";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Zw");
      jSTerm0.clonePF();
      StringReader stringReader1 = new StringReader("&:=tA");
      int int0 = 2;
      stringReader1.markSupported();
      Integer integer0 = new Integer(2);
      stringReader0.read();
      StringReader stringReader2 = new StringReader("Zw");
      stringReader2.ready();
      StringReader stringReader3 = new StringReader("%%%");
      StringReader stringReader4 = new StringReader("MD)l\"3*)0@r");
      // Undeclared exception!
      try { 
        stringReader2.mark((-274));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      String string0 = "iBj`";
      StringReader stringReader0 = new StringReader("iBj`");
      String string1 = "not";
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      JSJshopVars.minus = 58;
      // Undeclared exception!
      try { 
        jSPredicateForm0.removeElementAt((-1980));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: -1980
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSJshopVars.interrogation = 47;
      Consumer<JSPredicateForm> consumer0 = (Consumer<JSPredicateForm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSJshopVars.rightPar = 47;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.setSize(47);
      jSPredicateForm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QBtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.nval = 0.0;
      streamTokenizer1.ordinaryChars((-1), 1921);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) "QBtN");
      jSTerm1.add((Object) null);
      jSTerm1.add((Object) streamTokenizer1);
      jSPredicateForm0.addAll((Collection) jSTerm1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4659497192528061
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("QBtN");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      streamTokenizer1.resetSyntax();
      JSSubstitution jSSubstitution0 = null;
      streamTokenizer1.ordinaryChars((-1), 1921);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF((JSSubstitution) null);
      streamTokenizer1.parseNumbers();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) "QBtN");
      jSTerm1.add((Object) streamTokenizer1);
      jSPredicateForm0.addAll((Collection) jSTerm1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("QBtN");
      stringReader0.ready();
      stringReader0.markSupported();
      String string0 = " Term expected";
      StringReader stringReader1 = new StringReader(" Term expected");
      StringReader stringReader2 = new StringReader("?%%%");
      StringReader stringReader3 = new StringReader("?%%%");
      StringReader stringReader4 = new StringReader("d9~U@Zs.FAx");
      String string1 = "qltn";
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.560150750206571
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 45;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "noo");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      jSSubstitution0.retainAll(jSSubstitution4);
      jSSubstitution3.parallelStream();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution0);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      jSSubstitution10.addElements(jSSubstitution2);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution13 = jSTerm0.matches(jSPredicateForm0);
      assertTrue(jSSubstitution13.fail());
      
      JSSubstitution jSSubstitution14 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0);
      assertTrue(jSSubstitution14.fail());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "noo");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSJshopVars.flagLevel = 45;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) "ca");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.spliterator();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution4);
      jSSubstitution3.spliterator();
      jSSubstitution4.retainAll(jSSubstitution3);
      jSSubstitution4.spliterator();
      JSSubstitution jSSubstitution5 = (JSSubstitution)jSSubstitution4.clone();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution6.addAll((Collection) jSSubstitution0);
      jSSubstitution6.removeElements(jSSubstitution5);
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.spliterator();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution1);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      jSSubstitution11.add((Object) jSSubstitution1);
      jSSubstitution8.addElements(jSSubstitution11);
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution10);
      assertEquals(1, jSPredicateForm0.size());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.applySubstitutionPF(jSSubstitution3);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<String, Integer> function1 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      function1.apply(":>");
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function4 = function3.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      function5.compose((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      function5.compose((Function<? super String, ? extends String>) function3);
      Function<String, String> function6 = Function.identity();
      Function<String, String> function7 = Function.identity();
      function7.andThen((Function<? super String, ? extends Integer>) function1);
      function7.apply(":>");
      Function<String, String> function8 = Function.identity();
      function4.apply(function8);
      Function<Object, Integer> function9 = function4.andThen((Function<? super Integer, ? extends Integer>) function4);
      Function.identity();
      Function<String, Integer> function10 = function4.compose((Function<? super String, ?>) function5);
      function7.compose((Function<? super Integer, ? extends String>) function3);
      function1.andThen((Function<? super Integer, ?>) function9);
      Function<String, Integer> function11 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      Function<Object, Object> function12 = function3.andThen((Function<? super String, ?>) function10);
      function6.apply(":>");
      Function<Object, String> function13 = function4.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      function11.compose((Function<? super Integer, ? extends String>) function3);
      function6.andThen((Function<? super String, ?>) function1);
      function13.compose((Function<? super Integer, ?>) function12);
      function3.apply(function6);
      function11.compose((Function<? super Object, ? extends String>) function13);
      function5.andThen((Function<? super String, ?>) function13);
      function11.andThen((Function<? super Integer, ? extends String>) function13);
      function1.apply((String) null);
      unaryOperator0.andThen((Function<? super String, ?>) function5);
      Function.identity();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cohhfpv");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.eolIsSignificant(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.commentChar((-4));
      streamTokenizer1.sval = streamTokenizer1.sval;
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.sval = null;
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.pushBack();
      streamTokenizer1.pushBack();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1162167708521267
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z#j+v1[#jt8-nGx(h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.close();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      jSTerm0.iterator();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSPredicateForm jSPredicateForm3 = jSPredicateForm1.clonePF();
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      jSPredicateForm4.lastElement();
      jSPredicateForm3.equals(jSPredicateForm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm6 = jSPredicateForm5.standarizerPredicateForm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      streamTokenizer0.slashSlashComments(false);
      jSPredicateForm6.applySubstitutionPF(jSSubstitution5);
      jSPredicateForm3.trimToSize();
      JSPredicateForm jSPredicateForm7 = jSPredicateForm4.clonePF();
      jSPredicateForm7.standarizerPredicateForm();
      jSPredicateForm7.standarizerPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VJ@'?%0AHtBcN|q;I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars((-4), 1498);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = null;
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis(1498);
      // Undeclared exception!
      try { 
        jSTerm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0068967152315558
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      UnaryOperator.identity();
      Function<String, Integer> function1 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      String string0 = "uo";
      function1.apply("uo");
      Function.identity();
      function1.apply("uo");
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      Function.identity();
      Function.identity();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(x XGhwP9sYt|,p");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<String, Integer> function1 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      function1.apply(":iZx");
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function4 = function3.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      Function.identity();
      Function.identity();
      Function<String, String> function6 = Function.identity();
      function4.apply(function6);
      Function<Object, Integer> function7 = function4.andThen((Function<? super Integer, ? extends Integer>) function4);
      Function<Object, String> function8 = function3.compose((Function<? super Object, ?>) function7);
      Function<Object, String> function9 = unaryOperator0.compose((Function<? super Object, ? extends String>) function8);
      function7.andThen((Function<? super Integer, ? extends String>) function9);
      function1.andThen((Function<? super Integer, ?>) function7);
      Function<String, Integer> function10 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ? extends String>) function3);
      Function<Object, String> function11 = function4.andThen((Function<? super Integer, ? extends String>) function3);
      function7.andThen((Function<? super Integer, ? extends Integer>) function7);
      function10.compose((Function<? super Integer, ? extends String>) function3);
      function8.compose((Function<? super String, ?>) function4);
      function11.andThen((Function<? super String, ?>) function5);
      function3.compose((Function<? super Integer, ?>) function7);
      function8.apply(":iZx");
      function1.andThen((Function<? super Integer, ? extends String>) function11);
      function10.apply("%%%");
      Function.identity();
      function10.apply(":iZx");
      Function.identity();
      Function.identity();
      unaryOperator0.apply("JSb)rm");
      StringReader stringReader0 = new StringReader("(cO~h@pV'K6vP68");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SystemInUtil.addInputLine("W5=@ dX=$M6a");
      SystemInUtil.addInputLine("W5=@ dX=$M6a");
      SystemInUtil.addInputLine("W5=@ dX=$M6a");
      System.setCurrentTimeMillis(802L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("z*tjlMo!H1K<&}Jfm=b");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = null;
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis((-4));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("VJ@'?%0AHtBcN|q;I");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ttype = (-4);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.slashStarComments(false);
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.pushBack();
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      streamTokenizer0.ordinaryChars((-4), 1498);
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.ttype = (-4);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.parseNumbers();
      streamTokenizer1.sval = null;
      streamTokenizer0.pushBack();
      System.setCurrentTimeMillis((-4));
      jSTerm0.add((Object) "not");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      SystemInUtil.addInputLine("W5=@ dX=$M6a");
      SystemInUtil.addInputLine("W5=@ dX=$M6a");
      SystemInUtil.addInputLine((String) null);
      System.setCurrentTimeMillis(802L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.equals((JSPredicateForm) null);
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function0).apply(any());
      Function<String, Integer> function1 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      function1.apply(":>");
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator0.compose((Function<? super Object, ? extends String>) function2);
      Function<Object, Integer> function4 = function3.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, String> function5 = function1.andThen((Function<? super Integer, ? extends String>) function3);
      function5.compose((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      function5.compose((Function<? super String, ? extends String>) function3);
      Function<String, String> function6 = Function.identity();
      Function<String, String> function7 = Function.identity();
      function7.andThen((Function<? super String, ? extends Integer>) function1);
      Function<String, String> function8 = Function.identity();
      function4.apply(function8);
      Function<Object, Integer> function9 = function4.andThen((Function<? super Integer, ? extends Integer>) function4);
      Function<String, Integer> function10 = function4.compose((Function<? super String, ?>) function5);
      function9.compose((Function<? super Object, ?>) function4);
      function7.compose((Function<? super Integer, ? extends String>) function3);
      function1.andThen((Function<? super Integer, ?>) function9);
      Function<String, Integer> function11 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      function1.andThen((Function<? super Integer, ? extends String>) function3);
      function3.andThen((Function<? super String, ?>) function10);
      Function<Object, String> function12 = function4.andThen((Function<? super Integer, ? extends String>) function3);
      Function.identity();
      function11.compose((Function<? super Integer, ? extends String>) function3);
      function6.andThen((Function<? super String, ?>) function1);
      Function<Object, Object> function13 = function12.andThen((Function<? super String, ?>) function8);
      function12.compose((Function<? super Integer, ?>) function13);
      function3.apply(function6);
      function11.compose((Function<? super Object, ? extends String>) function12);
      function5.andThen((Function<? super String, ?>) function12);
      function11.andThen((Function<? super Integer, ? extends String>) function12);
      function1.apply((String) null);
      StringReader stringReader0 = new StringReader(":>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
