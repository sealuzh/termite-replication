/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:58:40 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.dom.DOMElement;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.DefaultProcessingInstruction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5402095130751898
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://xml.org/sax/features/namespace-prefixes");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("*HtS?98<rJ,L4 ");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.dom.DOMText", ":&VHSo@7t:");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/TP/4k==(TP^`zeP'c/4k==(TP^`zeP'c/4k==(TP^`zeP'c04k==(TP^`zeP'c", "*HtS?98<rJ,L4 ");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/TP/4k==(TP^`zeP'c/4k==(TP^`zeP'c/4k==(TP^`zeP'c04k==(TP^`zeP'c", " of document ");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.isStringInternEnabled();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (-302));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("WgI]L,P.+l");
      sAXReader0.setEntityResolver(entityResolver0);
      sAXReader0.getErrorHandler();
      InputSource inputSource0 = new InputSource("");
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          String string0 = "";
          InputSource inputSource0 = new InputSource("");
          inputSource0.getByteStream();
          sAXReader0.setEncoding("");
          PipedInputStream pipedInputStream0 = new PipedInputStream();
          URL uRL0 = MockURL.getFileExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor239.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor239.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.3868214863623547
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          byte[] byteArray0 = new byte[3];
          byteArray0[0] = (byte)15;
          byteArray0[2] = (byte)64;
          ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)64, (byte)64);
          ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)64, 18);
          byte[] byteArray1 = new byte[8];
          byteArray1[0] = (byte)15;
          byteArray1[1] = (byte)15;
          byteArray1[2] = (byte)15;
          byteArray1[3] = (byte)15;
          byteArrayInputStream1.read(byteArray1);
          byteArrayInputStream1.markSupported();
          byteArrayInputStream0.read(byteArray0);
          byteArrayInputStream0.read();
          ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
          ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray1, 76, (byte)15);
          byteArrayInputStream2.markSupported();
          ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1);
          byteArrayInputStream2.mark((byte)15);
          byteArrayInputStream0.reset();
          ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray1, 1, 3160);
          byteArrayInputStream1.skip(0L);
          ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray1);
          SAXReader sAXReader0 = new SAXReader(true);
          SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream3);
          sAXReader0.setFeature("http://xml.org/sax/features/namespaces", true);
          URI uRI0 = MockURI.create("http://xml.org/sax/features/namespaces");
          URL uRL0 = MockURI.toURL(uRI0);
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor239.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"xml.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor239.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "a%W\"NiN{wU~j:hgzo!j";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("a%W\"NiN{wU~j:hgzo!j");
      StringReader stringReader0 = new StringReader("Yuj:[&vZAN)0b!GZ");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      sAXReader0.setEncoding("");
      InputSource inputSource0 = new InputSource();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y?");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl1.setErrorHandler(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      StringReader stringReader0 = new StringReader("y?");
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupporD");
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      InputSource inputSource0 = new InputSource("");
      inputSource0.setEncoding("");
      inputSource0.getCharacterStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXParseException sAXParseException0 = new SAXParseException("}", "http://xml.org/sax/features/use-locator2", "This should never happen. Caught: ", 0, 0);
      Object object0 = new Object();
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/home/ubuntu/termite/projects/62_dom4j/G/4k==(TP`ze{Pec04k==(TP`ze{Pec0|", "org.dom4j.dom.DOMCDATA", "//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec", 2651, 2651);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.420295386033961
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("org.jaxen.function.SubstringFunction");
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream0, "/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      String string0 = "}\"J`d1i4t`";
      int int0 = 102;
      String string1 = "%Kc}~Jf&`h=tif)";
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("ofUP2S", "}\"J`d1i4t`", 102, "%Kc}~Jf&`h=tif)", uRLStreamHandler0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("org.dom4j.InvalidXPathException");
      defaultDocumentFactory0.createDocument();
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader1 = new SAXReader((String) null);
      sAXReader1.setXMLReader(xMLFilterImpl0);
      xMLFilterImpl0.getContentHandler();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-97);
      byteArray0[1] = (byte)25;
      byteArray0[2] = (byte)53;
      byteArray0[3] = (byte) (-85);
      byteArray0[4] = (byte)58;
      byteArray0[5] = (byte) (-1);
      byteArray0[6] = (byte)92;
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader1.configureReader(xMLFilterImpl0, defaultHandler0);
      byteArray0[7] = (byte)27;
      byteArray0[8] = (byte)106;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XMLFilterImpl xMLFilterImpl1 = (XMLFilterImpl)sAXReader0.getXMLFilter();
      xMLFilterImpl1.endDocument();
      sAXReader1.createContentHandler(xMLFilterImpl1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("4k==(TP`ze{Pec04k==(TP`ze{Pec");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setEntityResolver(defaultHandler2_0);
      sAXReader0.removeHandler("");
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      File file0 = MockFile.createTempFile("4k==(TP`ze{Pec", "4k==(TP`ze{Pec", (File) mockFile1);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3863046904967216
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      String string0 = "org.dom4j.InvalidXPathException";
      StringReader stringReader0 = new StringReader("org.dom4j.InvalidXPathException");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4440977644767417
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getSystemId();
      locator2Impl0.setColumnNumber(0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endElement("x&NJc-/aU6_s3C7;", "oC--GR6B<>^FL`m", "wLD^M*");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_0.elementDecl("wLD^M*", "oC--GR6B<>^FL`m");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_5 = new DefaultHandler2();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.getErrorHandler();
      sAXReader0.setErrorHandler(defaultHandler2_4);
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      defaultDocumentFactory0.createXPathFilter("org.jaxen.pattern.Pattern", (VariableContext) simpleVariableContext1);
      MockFile mockFile0 = new MockFile((String) null, "wLD^M*");
      mockFile0.mkdirs();
      mockFile0.setWritable(true, false);
      MockFile mockFile1 = new MockFile("//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec");
      mockFile1.setExecutable(false, true);
      File file0 = mockFile0.getAbsoluteFile();
      MockFile mockFile2 = new MockFile(file0, "org.jaxen.pattern.Pattern");
      mockFile1.toURL();
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jaxen.function.SubstringFunction");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)72;
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getURI((byte)72);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      attributes2Impl1.setAttributes(attributes2Impl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributes2Impl1);
      SAXParseException sAXParseException0 = new SAXParseException("//home/ubuntu/termite/projects/62_dom4j/j;U+z0i$Uvz7/4k==(TP`ze{Pec04k==(TP`ze{Pec", "!:,jFF+YbkXF>!Kb/N", "//home/ubuntu/termite/projects/62_dom4j/j;U+z0i$Uvz7/4k==(TP`ze{Pec04k==(TP`ze{Pec", Integer.MAX_VALUE, 1476);
      Object object0 = new Object();
      Namespace namespace0 = Namespace.get("1AkNy]G", "http://xml.org/sax/features/namespaces");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      namespace0.hasContent();
      QName qName0 = defaultDocumentFactory0.createQName("3mL|i]bw ", namespace0);
      defaultDocumentFactory0.createElement(qName0);
      SAXParseException sAXParseException1 = new SAXParseException("//home/ubuntu/termite/projects/62_dom4j/gy/4k=p(TV`zePec/4k=p(TV`zePec/4k=p(TV`zePec04k=p(TV`zePec", "u$AT{_55NEgBM", "1AkNy]G", (byte)72, 2651);
      Object object1 = new Object();
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.3354344115016032
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.isMergeAdjacentText();
      sAXReader0.isValidating();
      sAXReader0.createDefaultEntityResolver("f&H1BoEhXNU:");
      try { 
        sAXReader0.read((InputStream) null, "f&H1BoEhXNU:");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // no protocol: f&H1BoEhXNU: Nested exception: no protocol: f&H1BoEhXNU:
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setStringInternEnabled(true);
      sAXReader0.isStringInternEnabled();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.354534430557915
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.setSystemId("3J/?8");
      locatorImpl0.getSystemId();
      SAXParseException sAXParseException0 = new SAXParseException("3J/?8", locatorImpl0);
      xMLFilterImpl0.warning(sAXParseException0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.removeHandler("file://");
      XMLReader xMLReader0 = sAXReader0.installXMLFilter(xMLFilterImpl0);
      xMLReader0.getEntityResolver();
      sAXReader0.getXMLReader();
      StringReader stringReader0 = new StringReader("3J/?8");
      try { 
        sAXReader0.read((Reader) stringReader0, "!Eu F}GyAkguQC+");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@11b1165c Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@11b1165c Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.getIndex("`4@)!?T^ss}8");
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl3.getXMLVersion();
      locator2Impl3.setColumnNumber(0);
      locator2Impl1.getLineNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      locator2Impl3.getSystemId();
      locator2Impl1.setColumnNumber((-1));
      LocatorImpl locatorImpl0 = new LocatorImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/validation", "//4k==(T1`z\"Pec/4k==(T1`z\"Pec04k==(T1`z\"Pec");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Namespace namespace0 = Namespace.get("org.dom4j.xpath.XPathPattern");
      defaultDocumentFactory0.createQName("FW-", namespace0);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1, true);
      try { 
        sAXReader0.setXMLReaderClassName("ovjuP-");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class ovjuP- not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      locatorImpl3.setLineNumber(2187);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl1);
      locatorImpl1.getColumnNumber();
      locator2Impl1.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl5);
      locator2Impl2.getColumnNumber();
      locator2Impl0.getColumnNumber();
      locator2Impl1.getLineNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl6 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl4);
      locator2Impl1.getLineNumber();
      locator2Impl6.getSystemId();
      locator2Impl5.getXMLVersion();
      locator2Impl1.setColumnNumber(0);
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl2);
      locator2Impl1.setColumnNumber(2140);
      LocatorImpl locatorImpl7 = new LocatorImpl();
      locator2Impl1.getColumnNumber();
      LocatorImpl locatorImpl8 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertNotNull(xMLReader0);
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.673415053526696
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.getXMLFilter();
      sAXReader0.setXMLReader((XMLReader) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getLineNumber();
      locator2Impl1.getSystemId();
      String string0 = "@\\dq";
      SAXReader sAXReader1 = new SAXReader(true);
      try { 
        sAXReader0.setFeature("org.dom4j.io.SAXReader$SAXEntityResolver", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'org.dom4j.io.SAXReader$SAXEntityResolver' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ";&z3?17]-=@|kXa=");
      MockFile mockFile0 = new MockFile((String) null, "#9");
      URL uRL0 = MockURL.getFtpExample();
      MockURL.toURI(uRL0);
      File file0 = MockFile.createTempFile(";&z3?17]-=@|kXa=", "9Nlyk7?D3i8)mG)9:", (File) mockFile0);
      assertTrue(file0.exists());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      sAXReader0.setMergeAdjacentText(true);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDefaultHandler(dispatchHandler0);
      sAXReader0.getEncoding();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, (DefaultHandler) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//home/ubuntu/termite/projects/62_dom4j/4p/Q/Gf'4JHM/836+0");
      String string0 = "Yd~O{NU5pJ%VfP";
      sAXReader_SAXEntityResolver0.resolveEntity("gL$", (String) null);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Locator locator0 = null;
      LocatorImpl locatorImpl0 = null;
      try {
        locatorImpl0 = new LocatorImpl((Locator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("9y/4k==(TP^`zeP'c");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9");
      MockFile mockFile0 = new MockFile("9");
      MockFile mockFile1 = new MockFile(mockFile0, "4k==(TP^`zeP'c");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "4k==(TP^`zeP'c");
      mockFile1.mkdirs();
      MockFile.createTempFile("4k==(TP^`zeP'c", "4k==(TP^`zeP'c", (File) mockFile1);
      mockFile1.renameTo(mockFile0);
      mockFile0.toPath();
      mockFile1.getCanonicalPath();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[7] = (byte)3;
      byteArray0[4] = (byte) (-64);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1773, 58);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, Integer.MAX_VALUE, 58);
      byteArrayInputStream1.skip((-185L));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      SAXReader sAXReader1 = new SAXReader(false);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "4k==(TP^`zeP'c";
      stringArray0[1] = "4k==(TP^`zeP'c";
      stringArray0[2] = "/home/ubuntu/termite/projects/62_dom4j/9/4k==(TP^`zeP'c";
      stringArray0[3] = "4k==(TP^`zeP'c";
      stringArray0[4] = "/home/ubuntu/termite/projects/62_dom4j/9/4k==(TP^`zeP'c";
      stringArray0[5] = "9";
      stringArray0[6] = "org.jaxen.XPathFunctionContext";
      stringArray0[7] = "9";
      stringArray0[8] = "//home/ubuntu/termite/projects/62_dom4j/4k==(TP`zePec/4k==(TP`zePec04k==(TP`zePec";
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.getHandler("org.dom4j.io.SAXReader");
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, (ElementHandler) null);
      pruningElementStack0.getDispatchHandler();
      sAXReader1.setDispatchHandler((DispatchHandler) null);
      assertFalse(sAXReader1.isStripWhitespaceText());
      
      sAXReader1.setStripWhitespaceText(true);
      assertTrue(sAXReader1.isStripWhitespaceText());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5350813079469847
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" of document ");
      sAXReader_SAXEntityResolver0.resolveEntity(";&z3?17]-=@|kXa=", "");
      sAXReader_SAXEntityResolver0.resolveEntity("//home/ubuntu/termite/projects/62_dom4j/j;U+z0i$Uvz7/4k==(TP`ze{Pec04k==(TP`ze{Pec", " : ");
      sAXReader_SAXEntityResolver0.resolveEntity(" of document ", "s9M4Ywsxx:&fd ");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl3.getXMLVersion();
      locator2Impl1.getLineNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl4);
      locator2Impl1.getSystemId();
      locator2Impl5.setColumnNumber(0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endElement("//home/ubuntu/termite/projects/62_dom4j/a}=2n[U7:K}a/Bad surrogate pair in string /a}=2n[U7:K}a0substring", "79", "s9M4Ywsxx:&fd ");
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      defaultHandler2_2.setDocumentLocator(locator2Impl5);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setXMLReaderClassName("%!p(u:y+ZY8z;En");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class %!p(u:y+ZY8z;En not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("9y/4k==(TP^`zeP'c");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9");
      MockFile mockFile0 = new MockFile("9");
      MockFile mockFile1 = new MockFile(mockFile0, "4k==(TP^`zeP'c");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "4k==(TP^`zeP'c");
      mockFile1.mkdirs();
      mockFile1.renameTo(mockFile0);
      mockFile0.toPath();
      mockFile1.getCanonicalPath();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[7] = (byte)3;
      byteArray0[4] = (byte) (-64);
      byteArray0[6] = (byte) (-61);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      mockFile1.getAbsolutePath();
      mockFile1.getAbsolutePath();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "4k==(TP^`zeP'c");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)60;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/home/ubuntu/termite/projects/62_dom4j/9/4k==(TP^`zeP'c");
      byteArray1[6] = (byte) (-72);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/home/ubuntu/termite/projects/62_dom4j/9/4k==(TP^`zeP'c");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory1.createCDATA("HGd5Rxw-O;U:{pfSe");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory1);
      defaultDocumentFactory1.createCDATA("O?%ZC");
      sAXReader0.removeHandler("LD");
      sAXReader0.getDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("HGd5Rxw-O;U:{pfSe");
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      QName qName0 = QName.get("//home/ubuntu/termite/projects/62_dom4j/4k==(TP^`zeP'c/4k==(TP^`zeP'c/4k==(TP^`zeP'c04k==(TP^`zeP'c", "//home/ubuntu/termite/projects/62_dom4j/4k==(TP^`zeP'c/4k==(TP^`zeP'c/4k==(TP^`zeP'c04k==(TP^`zeP'c");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIgnoreComments());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("R ");
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.removeHandler("file://");
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/a~dVJg\\nB2s?!>/org.dom4j.tree.FlyweightEntity0org.dom4j.util.NonLazyElement";
      sAXReader0.setValidation(false);
      Locator locator0 = null;
      LocatorImpl locatorImpl0 = null;
      try {
        locatorImpl0 = new LocatorImpl((Locator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("9y/4k==(TP^`zeP'c");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader(true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.addHandler("//tmp/home/ubuntu/termite/projects/62_dom4j/G/4k==(TP`ze{Pec04k==(TP`ze{Pec0|", dispatchHandler0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      FileSystemHandling.createFolder(evoSuiteFile0);
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.resolveEntity("9y", " : ", "", "");
      try { 
        MockURL.URL((URL) null, "HRc2=J7|ktM0d$yZ8(");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no protocol: HRc2=J7|ktM0d$yZ8(
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)64, (byte)64);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)64, 18);
      byte[] byteArray1 = new byte[8];
      byteArray1[0] = (byte)15;
      byteArray1[1] = (byte)15;
      byteArray1[2] = (byte)15;
      byteArray1[3] = (byte)15;
      byteArrayInputStream1.markSupported();
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.read();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray1, 76, (byte)15);
      byteArrayInputStream2.markSupported();
      ByteArrayInputStream byteArrayInputStream4 = new ByteArrayInputStream(byteArray1);
      ByteArrayInputStream byteArrayInputStream5 = new ByteArrayInputStream(byteArray0, (byte)15, (-1));
      ByteArrayInputStream byteArrayInputStream6 = new ByteArrayInputStream(byteArray1, 1, 3160);
      byteArrayInputStream1.skip(0L);
      ByteArrayInputStream byteArrayInputStream7 = new ByteArrayInputStream(byteArray1);
      SAXReader sAXReader0 = new SAXReader(true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(byteArrayInputStream0, byteArrayInputStream3);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream2, "GQ9K,dsD@");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/GQ9K,dsD@ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.setSystemId((String) null);
      locatorImpl0.getSystemId();
      SAXParseException sAXParseException0 = new SAXParseException("3J/?8", locatorImpl0);
      xMLFilterImpl0.warning(sAXParseException0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.removeHandler("file://");
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.getEncoding();
      ElementStack elementStack0 = new ElementStack(62);
      Element[] elementArray0 = new Element[0];
      elementStack0.stack = elementArray0;
      elementStack0.getDispatchHandler();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.notationDecl("Y", "<!--", (String) null);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      xMLFilterImpl0.endDocument();
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, defaultHandler2_0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@fb4531f Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.221751559072405
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(false);
      InputSource inputSource0 = new InputSource("'4(");
      sAXReader0.isStringInternEnabled();
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      xMLFilterImpl0.startDocument();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.configureReader(xMLFilterImpl0, defaultHandler0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.4539045821453955
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "a%S\"NiN{wB~j:hgzo!j";
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.isIncludeExternalDTDDeclarations();
      try { 
        sAXReader0.read((Reader) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      String string0 = "a%S\"NiN{w~j:hgz_Ej";
      MockFile mockFile0 = new MockFile("~v1U'~");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      mockFile1.toURL();
      URI uRI0 = MockURI.aFTPURI;
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.isStripWhitespaceText();
      // Undeclared exception!
      try { 
        MockURI.create("a%S\"NiN{w~j:hgz_Ej");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal character in scheme name at index 1: a%S\"NiN{w~j:hgz_Ej
         //
         verifyException("java.net.URI", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jaxen.SimpleFunctionContext");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.resetHandlers();
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      
      sAXReader0.getErrorHandler();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      int int0 = 1;
      byte[] byteArray0 = new byte[2];
      StringReader stringReader0 = new StringReader("j6vw:y/:#[aD");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.218655583840207
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("R ");
      sAXReader_SAXEntityResolver0.resolveEntity("R ", "R ");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("R ", "R ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      locator2Impl2.getXMLVersion();
      locator2Impl1.getColumnNumber();
      locator2Impl6.getLineNumber();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl0);
      locator2Impl8.getSystemId();
      locator2Impl7.setColumnNumber(0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setProperty("^d$", inputSource0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '^d$' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(" oKf document ");
      sAXReader_SAXEntityResolver0.resolveEntity(";&z3?17]-=@|kXa=", "");
      InputSource inputSource0 = new InputSource();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      locator2Impl0.getColumnNumber();
      locator2Impl0.getLineNumber();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl0.getColumnNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl3);
      locator2Impl7.getLineNumber();
      locator2Impl2.getSystemId();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl8.getXMLVersion();
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl1);
      locator2Impl7.setColumnNumber(0);
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl5);
      locator2Impl10.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl9);
      locator2Impl11.getColumnNumber();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(false);
      defaultDocumentFactory0.createElement("$#u|1a$HozN+_ w}P", "$#u|1a$HozN+_ w}P");
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory0);
      sAXReader1.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      String string0 = "//home/ubuntu/termite/projects/62_dom4j/H+s/true() requires no arguments.0true() requires no arguments.";
      documentFactory0.createProcessingInstruction("//home/ubuntu/termite/projects/62_dom4j/H+s/true() requires no arguments.0true() requires no arguments.", "//home/ubuntu/termite/projects/62_dom4j/H+s/true() requires no arguments.0true() requires no arguments.");
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.isValidating();
      sAXReader0.getXMLFilter();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler((XMLReader) null);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl0.setLineNumber((-1769));
      LocatorImpl locatorImpl2 = new LocatorImpl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      locator2Impl0.getColumnNumber();
      locator2Impl0.getLineNumber();
      locator2Impl0.getColumnNumber();
      locatorImpl3.getColumnNumber();
      locator2Impl1.getLineNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl3);
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl5);
      locator2Impl5.getSystemId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl3);
      locator2Impl2.setColumnNumber(0);
      locator2Impl0.getColumnNumber();
      LocatorImpl locatorImpl6 = new LocatorImpl();
      locator2Impl0.getColumnNumber();
      LocatorImpl locatorImpl7 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      Object object0 = new Object();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, locatorImpl2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("R ");
      InputSource inputSource0 = new InputSource();
      sAXReader_SAXEntityResolver0.resolveEntity("R ", "R ");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getLocalName(1942);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      locator2Impl0.getLineNumber();
      locator2Impl0.getSystemId();
      defaultHandler2_0.endElement("R ", (String) null, "");
      defaultHandler2_0.setDocumentLocator(locator2Impl0);
      defaultHandler2_0.skippedEntity("");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3122935330266907
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("9y/4k==(TP^`zeP'c");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9");
      MockFile mockFile0 = new MockFile("9", "4k==(TP^`zeP'c");
      FileSystemHandling.createFolder(evoSuiteFile0);
      mockFile0.mkdirs();
      File file0 = MockFile.createTempFile("4k==(TP^`zeP'c", "4k==(TP^`zeP'c", (File) mockFile0);
      mockFile0.renameTo(mockFile0);
      mockFile0.toPath();
      mockFile0.getCanonicalPath();
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-64);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)3;
      byteArray0[4] = (byte)74;
      byteArray0[5] = (byte)27;
      byteArray0[6] = (byte) (-61);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      file0.getAbsolutePath();
      file0.getAbsolutePath();
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte) (-64);
      byteArray1[1] = (byte)5;
      byteArray1[2] = (byte) (-64);
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)60;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/home/ubuntu/termite/projects/62_dom4j/9/4k==(TP^`zeP'c/4k==(TP^`zeP'c04k==(TP^`zeP'c");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.3660231847196305
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXParseException sAXParseException0 = new SAXParseException("}", "http://xml.org/sax/features/use-locator2", "This should never happen. Caught: ", 0, 0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte) (-43);
      byteArray0[1] = (byte)36;
      byteArray0[2] = (byte)36;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-43), 150);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)36, (byte)36);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream2, (byte)36);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0, 752, 1729);
      byteArrayInputStream2.read();
      BufferedInputStream bufferedInputStream1 = new BufferedInputStream(byteArrayInputStream3, 141);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // -43 Nested exception: -43
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.createDefaultEntityResolver("7*^^wJLi*3v(^xv/");
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("_");
      try { 
        sAXReader0.read((Reader) stringReader0, "_");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/_ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("R ", "R ");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributes2Impl1);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getLineNumber();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl1.getXMLVersion();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl1);
      locator2Impl4.getSystemId();
      locator2Impl4.setColumnNumber(2298);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endElement("R ", (String) null, (String) null);
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      LocatorImpl locatorImpl0 = new LocatorImpl();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      defaultHandler2_0.setDocumentLocator(locator2Impl4);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("9y/4k==(TP^`zeP'c");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      SAXReader sAXReader0 = new SAXReader(true);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "9");
      MockFile mockFile0 = new MockFile("9");
      MockFile mockFile1 = new MockFile(mockFile0, "4k==(TP^`zeP'c");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "4k==(TP^`zeP'c");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "9");
      File file0 = MockFile.createTempFile("4k==(TP^`zeP'c", "4k==(TP^`zeP'c", (File) mockFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "4k==(TP^`zeP'c");
      mockFile0.toPath();
      mockFile1.getCanonicalPath();
      byte[] byteArray0 = new byte[8];
      byteArray0[4] = (byte) (-64);
      byteArray0[2] = (byte) (-64);
      byteArray0[7] = (byte) (-42);
      byteArray0[4] = (byte) (-64);
      byteArray0[6] = (byte) (-64);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      file0.getAbsolutePath();
      file0.getAbsolutePath();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "4k==(TP^`zeP'c");
      byte[] byteArray1 = new byte[7];
      byteArray1[0] = (byte)0;
      byteArray1[1] = (byte) (-11);
      byteArray1[2] = (byte) (-44);
      byteArray1[3] = (byte) (-44);
      byteArray1[4] = (byte)81;
      byteArray1[5] = (byte)60;
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/home/ubuntu/termite/projects/62_dom4j/9/4k==(TP^`zeP'c/4k==(TP^`zeP'c04k==(TP^`zeP'c");
      byteArray1[6] = (byte) (-72);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray1);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "/home/ubuntu/termite/projects/62_dom4j/9/4k==(TP^`zeP'c/4k==(TP^`zeP'c04k==(TP^`zeP'c");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.56217973279757
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.getEncoding();
      defaultDocumentFactory0.createDocType((String) null, (String) null, (String) null);
      sAXReader0.setIgnoreComments(true);
      sAXReader0.setEncoding("sn|xfN\"");
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      sAXReader0.getEncoding();
      Namespace namespace0 = Namespace.get("Wej#", "rB8E72}xHHYk]axHe@<");
      defaultDocumentFactory0.createQName("_]92Yh,]w", namespace0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http://xml.org/sax/handlers/LexicalHandler");
      SAXReader sAXReader1 = new SAXReader();
      StringReader stringReader0 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader0, "//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec04k==(TP`ze{Pec");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[2] = (byte)72;
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getURI((byte)72);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.setAttributes(attributesImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.getLineNumber();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl2 = new AttributesImpl();
      attributesImpl2.getLocalName((byte)72);
      AttributesImpl attributesImpl3 = new AttributesImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      SAXReader sAXReader0 = new SAXReader(true);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      locatorImpl1.setLineNumber(58);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locatorImpl3.setColumnNumber(58);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl3);
      locator2Impl2.getColumnNumber();
      locator2Impl0.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl5.getColumnNumber();
      Locator2Impl locator2Impl6 = new Locator2Impl();
      locator2Impl6.getLineNumber();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl();
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl1);
      locator2Impl9.getLineNumber();
      locator2Impl2.getSystemId();
      locator2Impl4.getXMLVersion();
      locator2Impl10.setColumnNumber(0);
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl12 = new Locator2Impl(locator2Impl1);
      locator2Impl12.setColumnNumber(0);
      LocatorImpl locatorImpl6 = new LocatorImpl();
      locator2Impl6.getColumnNumber();
      LocatorImpl locatorImpl7 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      InputSource inputSource0 = new InputSource();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/namespaces");
      sAXReader_SAXEntityResolver0.resolveEntity("http://xml.org/sax/features/namespaces", "//home/ubuntu/termite/projects/62_dom4j/org.dom4j.VisitorSupport0org.dom4j.VisitorSupport");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      locator2Impl1.getXMLVersion();
      AttributesImpl attributesImpl1 = new AttributesImpl(attributesImpl0);
      locator2Impl1.getLineNumber();
      locator2Impl0.getSystemId();
      StringReader stringReader0 = new StringReader("//home/ubuntu/termite/projects/62_dom4j/a~dVJg\nB2s?!>/org.dom4j.tree.FlyweightEntity0org.dom4j.util.NonLazyElement");
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.setEncoding("//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec04k==(TP`ze{Pec");
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Object object0 = new Object();
      Namespace namespace0 = Namespace.get(":\"XWEF", "http://xml.org/sax/features/use-locator2");
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/G/4k==(TP`ze{Pec04k==(TP`ze{Pec0|0/home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec", namespace0);
      DOMElement dOMElement0 = new DOMElement(qName0);
      SAXParseException sAXParseException0 = new SAXParseException("This should never happen. Caught: ", "file://", "Invalid path of length: ", 44, 2651);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.7787755691845217
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      dispatchHandler0.setDefaultHandler(sAXModifyElementHandler0);
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.setDocumentFactory((DocumentFactory) null);
      sAXReader0.getDocumentFactory();
      sAXReader0.setIgnoreComments(false);
      String string0 = "|}/";
      try { 
        sAXReader0.setProperty("|}/", "|}/");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '|}/' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      InputSource inputSource0 = new InputSource();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.275805525146526
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "";
      InputSource inputSource0 = new InputSource("");
      inputSource0.getCharacterStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultProcessingInstruction defaultProcessingInstruction0 = new DefaultProcessingInstruction("R ", "//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec04k==(TP`ze{Pec");
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getURI(18);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl0.getSystemId();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endElement("GK", "R ", (String) null);
      defaultHandler2_0.elementDecl("//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec04k==(TP`ze{Pec", (String) null);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      defaultHandler2_0.setDocumentLocator(locatorImpl0);
      DefaultHandler2 defaultHandler2_3 = new DefaultHandler2();
      DefaultHandler2 defaultHandler2_4 = new DefaultHandler2();
      defaultHandler2_0.skippedEntity("R ");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.skippedEntity("TA,K&o~gF+");
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty("R ", attributesImpl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: R 
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-84);
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte)112;
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      URL uRL0 = MockURL.URL("<&mR3U'A<8", "<&mR3U'A<8", (int) (byte)112, "//home/ubuntu/termite/projects/62_dom4j/5:30xcm1FN0a;J_f#ry/4k==(TP`zePec/4k==(TP`zePec04k==(TP`zePec", uRLStreamHandler0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, true);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@4af1c559 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@4af1c559 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.removeHandler("");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      
      MockFile mockFile0 = new MockFile("");
      MockFile mockFile1 = new MockFile(mockFile0, "");
      MockFile.createTempFile("4k==(TP`ze{Pec", "4k==(TP`ze{Pec", (File) mockFile1);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      mockFile1.toURL();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      SAXReader sAXReader1 = new SAXReader();
      assertFalse(sAXReader1.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader1.isStripWhitespaceText());
      assertFalse(sAXReader1.isIgnoreComments());
      assertTrue(sAXReader1.isStringInternEnabled());
      assertFalse(sAXReader1.isMergeAdjacentText());
      assertFalse(sAXReader1.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read("rR_*1.rZ3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/rR_*1.rZ3 (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/rR_*1.rZ3 (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0, false);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isValidating());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      locatorImpl1.setLineNumber(58);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locatorImpl1.setColumnNumber(81);
      AttributesImpl attributesImpl0 = new AttributesImpl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl1);
      locatorImpl3.getColumnNumber();
      locator2Impl0.getLineNumber();
      locator2Impl0.setColumnNumber(47);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.getExternalSubset((String) null, (String) null);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl3.getSystemId();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      locator2Impl3.getSystemId();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      LocatorImpl locatorImpl6 = new LocatorImpl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl7);
      locator2Impl4.getColumnNumber();
      LocatorImpl locatorImpl7 = new LocatorImpl();
      SAXReader sAXReader0 = new SAXReader();
      locatorImpl0.getColumnNumber();
      Object object0 = new Object();
      locatorImpl2.getColumnNumber();
      Object object1 = new Object();
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)15;
      byteArray0[1] = (byte)117;
      byteArray0[2] = (byte)64;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)15, 9);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 3370, (byte)15);
      byteArrayInputStream1.markSupported();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream3 = new ByteArrayInputStream(byteArray0);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      Object object0 = new Object();
      Namespace namespace0 = Namespace.get(":\"XWEF", "http://xml.org/sax/features/use-locator2");
      QName qName0 = defaultDocumentFactory0.createQName("//tmp/tmp/home/ubuntu/termite/projects/62_dom4j/G/4k==(TP`ze{Pec04k==(TP`ze{Pec0|0/home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec", namespace0);
      defaultDocumentFactory0.createElement(qName0);
      SAXParseException sAXParseException0 = new SAXParseException("This should never happen. Caught: ", "file://", "Invalid path of length: ", 44, 2651);
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      try { 
        sAXReader0.setFeature("//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature '//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)36;
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl1.setLineNumber((byte)36);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl();
      locator2Impl3.getColumnNumber();
      locator2Impl1.getLineNumber();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl4);
      locator2Impl5.getSystemId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl3);
      locator2Impl6.setColumnNumber((byte)36);
      LocatorImpl locatorImpl5 = new LocatorImpl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl7.getColumnNumber();
      LocatorImpl locatorImpl6 = new LocatorImpl();
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = false;
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "";
      stringArray0[6] = "";
      PruningElementStack pruningElementStack0 = new PruningElementStack(stringArray0, dispatchHandler0);
      pruningElementStack0.getDispatchHandler();
      dispatchHandler0.addHandler("", (ElementHandler) null);
      ElementStack elementStack0 = new ElementStack();
      dispatchHandler0.resetHandlers();
      elementStack0.popElement();
      // Undeclared exception!
      try { 
        dispatchHandler0.onEnd(elementStack0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SAXParseException sAXParseException0 = new SAXParseException("}", "http://xml.org/sax/features/use-locator2", "This should never happen. Caught: ", 0, 0);
      Object object0 = new Object();
      Namespace.get("R ", "}");
      SAXParseException sAXParseException1 = new SAXParseException("//tmp/home/ubuntu/termite/projects/62_dom4j/G/4k==(TP`ze{Pec04k==(TP`ze{Pec0|", "org.dom4j.dom.DOMCDATA", "//home/ubuntu/termite/projects/62_dom4j/4k==(TP`ze{Pec/4k==(TP`ze{Pec04k==(TP`ze{Pec", 0, 0);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("//tmp/home/ubuntu/termite/projects/62_dom4j/G/4k==(TP`ze{Pec04k==(TP`ze{Pec0|");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class //tmp/home/ubuntu/termite/projects/62_dom4j/G/4k==(TP`ze{Pec04k==(TP`ze{Pec0| not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)46;
      byteArray0[2] = (byte)72;
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getURI((byte)72);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.setAttributes(attributesImpl0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributes2Impl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributesImpl0);
      locator2Impl0.getSystemId();
      AttributesImpl attributesImpl2 = new AttributesImpl();
      attributesImpl2.getLocalName((byte)72);
      AttributesImpl attributesImpl3 = new AttributesImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endElement("?KLz3?>}a$FXHJ", "W", (String) null);
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.startPrefixMapping("?KLz3?>}a$FXHJ", ",;");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      defaultHandler2_0.setDocumentLocator(locator2Impl0);
      defaultHandler2_0.skippedEntity("W");
      attributesImpl2.getLocalName((byte)72);
      SAXReader sAXReader0 = new SAXReader((String) null);
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      AttributesImpl attributesImpl0 = new AttributesImpl();
      attributesImpl0.getURI((byte)72);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      attributes2Impl0.setAttributes(attributesImpl0);
      Attributes2Impl attributes2Impl1 = new Attributes2Impl(attributesImpl0);
      AttributesImpl attributesImpl1 = new AttributesImpl(attributes2Impl0);
      Attributes2Impl attributes2Impl2 = new Attributes2Impl();
      Attributes2Impl attributes2Impl3 = new Attributes2Impl(attributes2Impl1);
      AttributesImpl attributesImpl2 = new AttributesImpl();
      attributes2Impl0.getLocalName((byte)72);
      AttributesImpl attributesImpl3 = new AttributesImpl();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.endElement("?KLz3?>}a$FXHJ", "W", (String) null);
      DefaultHandler2 defaultHandler2_1 = new DefaultHandler2();
      defaultHandler2_1.startPrefixMapping(",;", "W");
      DefaultHandler2 defaultHandler2_2 = new DefaultHandler2();
      defaultHandler2_2.skippedEntity("//home/ubuntu/termite/projects/62_dom4j/H+s/true() requires no arguments.0true() requires no arguments.");
      attributesImpl1.getLocalName(329);
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class  not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }
}
