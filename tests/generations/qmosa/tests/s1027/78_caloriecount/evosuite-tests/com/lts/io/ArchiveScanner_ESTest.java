/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:35:24 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.File;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "V(AR";
      ImprovedFile improvedFile0 = new ImprovedFile("V(AR", "V(AR");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector0 = new Vector<String>();
      boolean boolean0 = vector0.add(string0);
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, Object> function0 = (Function<String, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<String, Integer> function2 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      UnaryOperator<PushbackInputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, PushbackInputStream> function3 = (Function<Object, PushbackInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super InputStream, ? extends PushbackInputStream>) function3);
      Function<Object, PushbackInputStream> function4 = (Function<Object, PushbackInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function5 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function5);
      Function<Integer, PushbackInputStream> function6 = unaryOperator1.compose((Function<? super Integer, ? extends PushbackInputStream>) function4);
      function2.andThen((Function<? super Integer, ? extends InputStream>) function6);
      function2.apply(string0);
      String string1 = null;
      function2.apply(string1);
      improvedFile0.setReadOnly();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.compose((Function<? super Object, ? extends String>) function7);
      Vector<String> vector1 = new Vector<String>();
      vector0.replaceAll(unaryOperator0);
      Vector<String> vector2 = new Vector<String>();
      String string2 = "`|/in\"*8";
      boolean boolean1 = true;
      archiveScanner0.processDirectory(improvedFile0, string2, boolean1);
      archiveScanner0.processDirectory(improvedFile0, string2, boolean0);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      String string3 = ".Z0P";
      boolean boolean2 = false;
      try { 
        archiveScanner0.processDirectory(improvedFile0, string3, boolean2);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/V(AR/V(AR
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5551393240053732
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      FileSystemHandling.createFolder(evoSuiteFile2);
      ImprovedFile improvedFile0 = new ImprovedFile("V(AR", "V(AR");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile3 = null;
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "V(AR");
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      improvedFile0.getCanonicalPath();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling4 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile3);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      String string0 = "^^7=\\tE";
      archiveScanner0.scandir(improvedFile0, string0, boolean0);
      System.setCurrentTimeMillis(archiveScanner1.FILE);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.8950056533107491
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = "V(AR";
      ImprovedFile improvedFile0 = new ImprovedFile("V(AR", "V(AR");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector0 = new Vector<String>();
      boolean boolean0 = vector0.add(string0);
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, Object> function0 = (Function<String, Object>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super String, ?>) function0);
      Function<String, String> function1 = Function.identity();
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function3).apply(any());
      Function<String, Integer> function4 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function3);
      UnaryOperator<PushbackInputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, PushbackInputStream> function5 = (Function<Object, PushbackInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super InputStream, ? extends PushbackInputStream>) function5);
      Function<Object, PushbackInputStream> function6 = (Function<Object, PushbackInputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Object, ? extends String>) function7);
      Function<Integer, PushbackInputStream> function8 = unaryOperator1.compose((Function<? super Integer, ? extends PushbackInputStream>) function6);
      function4.andThen((Function<? super Integer, ? extends InputStream>) function8);
      function4.apply(string0);
      String string1 = null;
      function4.apply(string1);
      improvedFile0.setReadOnly();
      Function<Object, String> function9 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.compose((Function<? super Object, ? extends String>) function9);
      unaryOperator0.andThen((Function<? super String, ?>) function2);
      Vector<String> vector1 = new Vector<String>();
      vector0.replaceAll(unaryOperator0);
      Vector<String> vector2 = new Vector<String>();
      String string2 = "`|/in\"*8";
      boolean boolean1 = true;
      archiveScanner0.processDirectory(improvedFile0, string2, boolean1);
      archiveScanner0.processDirectory(improvedFile0, string2, boolean0);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      String string3 = ".ZIP";
      boolean boolean2 = false;
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, string3, boolean2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5642836843057943
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      FileSystemHandling.createFolder(evoSuiteFile2);
      String string0 = "V(AR";
      ImprovedFile improvedFile0 = new ImprovedFile("V(AR", "V(AR");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      archiveScanner0.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<String> vector0 = new Vector<String>();
      archiveScanner0.dirsNotIncluded = vector0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder(evoSuiteFile2);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      boolean boolean0 = true;
      archiveScanner0.scandir(improvedFile0, string0, boolean0);
      assertTrue(improvedFile0.canWrite());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "rP^>";
      archiveScanner0.includes = stringArray0;
      stringArray0[2] = "rP^>";
      archiveScanner0.addDefaultExcludes();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, Integer> function0 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      archiveScanner0.setBasedir("rP^>");
      Function.identity();
      Function<Locale, String> function3 = (Function<Locale, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Locale.LanguageRange> function4 = (Function<String, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends Locale.LanguageRange>) function4);
      Function.identity();
      String string0 = function2.apply("rP^>");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      function2.compose((Function<? super String, ? extends String>) unaryOperator0);
      function2.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      Function<Integer, InputStream> function6 = (Function<Integer, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.compose((Function<? super Object, ? extends String>) function7);
      vector0.removeElement("rP^>");
      unaryOperator0.andThen((Function<? super String, ?>) function5);
      unaryOperator0.andThen((Function<? super String, ?>) function5);
      Vector<String> vector1 = new Vector<String>();
      vector1.add(string0);
      vector1.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "rP^>", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[10];
      archiveScanner0.filesNotIncluded = null;
      MockFile mockFile0 = new MockFile((File) null, "Niu");
      archiveScanner0.setBasedir((File) mockFile0);
      stringArray0[0] = "PB";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "PB";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.filesIncluded = null;
      stringArray1[1] = "4.|Cp";
      archiveScanner0.isExcluded("PB");
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector0;
      archiveScanner0.haveSlowResults = true;
      String[] stringArray2 = new String[2];
      stringArray2[0] = "PB";
      stringArray2[1] = "C]P/`z9RF";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.setExcludes(stringArray2);
      System.setCurrentTimeMillis(1);
      archiveScanner0.isExcluded("PB");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "rP^>";
      archiveScanner0.includes = stringArray0;
      stringArray0[2] = "";
      archiveScanner0.addDefaultExcludes();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, Integer> function0 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function.identity();
      Function<Locale, String> function3 = (Function<Locale, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Locale.LanguageRange> function4 = (Function<String, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.andThen((Function<? super String, ? extends Locale.LanguageRange>) function4);
      Function.identity();
      String string0 = function2.apply("rP^>");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      function2.compose((Function<? super String, ? extends String>) unaryOperator0);
      function2.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) function2);
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      Function<Integer, InputStream> function6 = (Function<Integer, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      archiveScanner0.setBasedir("com.lts.pest.swing.PestTree");
      function5.andThen((Function<? super Integer, ? extends InputStream>) function6);
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.compose((Function<? super Object, ? extends String>) function7);
      vector0.removeElement("rP^>");
      unaryOperator0.apply("rP^>");
      unaryOperator0.andThen((Function<? super String, ?>) function5);
      Vector<String> vector1 = new Vector<String>();
      vector1.add(string0);
      vector1.replaceAll(unaryOperator0);
      Vector<String> vector2 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "rP^>", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("V(AR/V(AR");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      FileSystemHandling.createFolder(evoSuiteFile2);
      ImprovedFile improvedFile0 = new ImprovedFile("V(AR", "V(AR");
      improvedFile0.toPath();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "Q.JAR");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      EvoSuiteFile evoSuiteFile3 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      FileSystemHandling.appendDataToFile(evoSuiteFile3, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile3, "-{I&G7");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[0];
      Vector<Locale> vector0 = new Vector<Locale>();
      archiveScanner0.filesIncluded = vector0;
      archiveScanner0.setIncludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "!a).", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesExcluded = vector1;
      archiveScanner0.addDefaultExcludes();
      stringArray0[0] = "q";
      Vector<PushbackInputStream> vector2 = new Vector<PushbackInputStream>();
      archiveScanner0.dirsNotIncluded = vector2;
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "q";
      DirectoryScanner.matchPath("f i", "^QNaV5");
      vector1.add("xsF'FRK ]j8RRJWY)z");
      stringArray0[2] = "q";
      stringArray0[3] = "fY@Fow9L";
      stringArray0[4] = "&-{@ii=Zo|MvT.jar";
      stringArray0[5] = "H~^){]]";
      stringArray0[6] = "$S<g(8C^?prZ{6g19.jar";
      stringArray0[7] = "5SG7e'i";
      stringArray0[8] = "C]P/`z9RF";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.processFile("C]P/`z9RF");
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("$S<g(8C^?prZ{6g19.jar.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale0.getDisplayScript();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getDisplayScript();
      locale0.getUnicodeLocaleAttributes();
      stringArray0[0] = "w$ZZo";
      Object object0 = new Object();
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "w$ZZo";
      stringArray0[2] = "w$ZZo";
      stringArray0[3] = "fZY^ow9L";
      stringArray0[4] = "w$ZZo";
      stringArray0[5] = "H~^){]]";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector1;
      stringArray0[6] = "$S<g(8C^?prZ{6g19.jar";
      locale0.getDisplayLanguage();
      stringArray0[7] = "S9K.8vyE,j6";
      stringArray0[8] = "fZY^ow9L";
      archiveScanner0.setExcludes(stringArray0);
      Vector<String> vector2 = new Vector<String>();
      vector2.removeAll(list0);
      archiveScanner0.processFile("");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "S9K.8vyE,j6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[1];
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.dirsIncluded = vector0;
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      locale0.getDisplayScript();
      Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) set0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      stringArray0[0] = "";
      archiveScanner0.includes = stringArray0;
      Locale locale1 = new Locale("`Ai*%=Sxa!L{L", "yqmr", ".ear");
      locale1.getUnicodeLocaleAttributes();
      vector0.clone();
      locale0.getDisplayScript(locale1);
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile(".JAR");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[10];
      archiveScanner0.filesNotIncluded = null;
      stringArray0[4] = ".war";
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      stringArray0[1] = "w";
      stringArray0[2] = "w";
      String[] stringArray1 = new String[2];
      stringArray1[0] = ".war";
      archiveScanner0.addDefaultExcludes();
      archiveScanner0.filesIncluded = null;
      stringArray1[1] = "4.|Cp";
      archiveScanner0.isExcluded(".war");
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector0;
      String[] stringArray2 = new String[2];
      stringArray2[0] = ".war";
      stringArray2[1] = "C]P/`z9RF";
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      archiveScanner0.setExcludes(stringArray2);
      System.setCurrentTimeMillis(1L);
      archiveScanner0.isExcluded("eZ_");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q";
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      stringArray0[1] = "q";
      stringArray0[2] = "!";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "q";
      stringArray1[1] = "93O";
      stringArray0[3] = "93O";
      stringArray0[4] = "&-{@ii=Zo|MvT.jar";
      Vector<String> vector0 = new Vector<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("q", (Map<String, List<String>>) hashMap0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>(list0);
      hashMap0.put("!", vector0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) vector0);
      vector0.addAll((Collection<? extends String>) list1);
      List<Locale.LanguageRange>[] listArray0 = (List<Locale.LanguageRange>[]) Array.newInstance(List.class, 16);
      listArray0[0] = list0;
      listArray0[1] = list0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      listArray0[2] = (List<Locale.LanguageRange>) linkedList0;
      listArray0[3] = (List<Locale.LanguageRange>) vector1;
      listArray0[4] = (List<Locale.LanguageRange>) vector1;
      listArray0[5] = list0;
      listArray0[6] = (List<Locale.LanguageRange>) vector1;
      listArray0[7] = (List<Locale.LanguageRange>) vector1;
      listArray0[8] = (List<Locale.LanguageRange>) vector1;
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("&-{@ii=Zo|MvT.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale0.getDisplayScript();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      locale0.getDisplayScript();
      locale0.getUnicodeLocaleAttributes();
      stringArray0[0] = "w$ZZo";
      Object object0 = new Object();
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "w$ZZo";
      stringArray0[2] = "w$ZZo";
      stringArray0[3] = "fZY^ow9L";
      stringArray0[4] = "w$ZZo";
      stringArray0[5] = "H~^){]]";
      Vector<Integer> vector1 = new Vector<Integer>();
      archiveScanner0.filesNotIncluded = vector1;
      stringArray0[6] = "$S<g(8C^?prZ{6g19.jar";
      locale0.getDisplayLanguage();
      stringArray0[7] = "Korean";
      stringArray0[8] = "fZY^ow9L";
      archiveScanner0.setExcludes(stringArray0);
      Vector<String> vector2 = new Vector<String>();
      vector2.removeAll(list0);
      archiveScanner0.processFile("");
      archiveScanner0.processArchive((File) null, "S9K.8vyE,j6");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "q";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "q";
      stringArray0[2] = "!";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "q";
      stringArray1[1] = "93O";
      archiveScanner0.excludes = stringArray1;
      stringArray0[3] = "93O";
      archiveScanner0.excludes = stringArray0;
      stringArray0[4] = "&-{@ii=Zo|MvT.jar";
      Vector<String> vector0 = new Vector<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("q", (Map<String, List<String>>) hashMap0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>(list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) vector0);
      vector0.addAll((Collection<? extends String>) list1);
      List<Locale.LanguageRange>[] listArray0 = (List<Locale.LanguageRange>[]) Array.newInstance(List.class, 9);
      listArray0[0] = list0;
      listArray0[1] = list0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      listArray0[2] = (List<Locale.LanguageRange>) linkedList0;
      listArray0[3] = (List<Locale.LanguageRange>) vector1;
      listArray0[4] = list0;
      listArray0[5] = list0;
      listArray0[6] = (List<Locale.LanguageRange>) vector1;
      listArray0[7] = (List<Locale.LanguageRange>) vector1;
      listArray0[8] = (List<Locale.LanguageRange>) vector1;
      vector0.toArray(listArray0);
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.processDirectory((File) null, "!", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Locale locale0 = Locale.JAPANESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale locale1 = Locale.CANADA;
      locale0.getDisplayLanguage(locale1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      locale0.getDisplayScript();
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0, locale_FilteringMode0);
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) set0);
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) list0);
      Vector<String> vector1 = new Vector<String>();
      archiveScanner0.filesExcluded = vector1;
      stringArray0[0] = "q";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "q";
      stringArray0[2] = "q";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[3] = "fY@Fow9L";
      stringArray0[4] = "&-{@ii=Zo|MvT.jar";
      stringArray0[5] = "H~^){]]";
      stringArray0[6] = "$S<g(8C^?prZ{6g19.jar";
      stringArray0[7] = "5SG7e'i";
      stringArray0[8] = "C]P/`z9RF";
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.isExcluded("tmp1backup.jar");
      archiveScanner0.processArchive((File) null, "H~^){]]");
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "?m&C7JnOea0(D6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "q";
      stringArray0[2] = "!";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "q";
      stringArray1[1] = "93O";
      stringArray0[3] = "93O";
      stringArray0[4] = "&-{@ii=Zo|MvT.jar";
      Vector<String> vector0 = new Vector<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("q", (Map<String, List<String>>) hashMap0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>(list0);
      hashMap0.put("!", vector0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) vector0);
      vector0.addAll((Collection<? extends String>) list1);
      List<Locale.LanguageRange>[] listArray0 = (List<Locale.LanguageRange>[]) Array.newInstance(List.class, 16);
      listArray0[0] = list0;
      listArray0[1] = list0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      listArray0[2] = (List<Locale.LanguageRange>) linkedList0;
      listArray0[3] = (List<Locale.LanguageRange>) vector1;
      listArray0[4] = (List<Locale.LanguageRange>) vector1;
      listArray0[5] = list0;
      listArray0[6] = (List<Locale.LanguageRange>) vector1;
      Vector<Integer> vector2 = new Vector<Integer>();
      archiveScanner0.filesIncluded = vector2;
      listArray0[7] = (List<Locale.LanguageRange>) vector1;
      listArray0[8] = (List<Locale.LanguageRange>) vector1;
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setExcludes(stringArray1);
      archiveScanner0.processFile("&-{@ii=Zo|MvT.jar");
      assertEquals(0, ArchiveScanner.FILE);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "q";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "q";
      stringArray0[2] = "!";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "q";
      stringArray1[1] = "93O";
      archiveScanner0.excludes = stringArray1;
      stringArray0[3] = "93O";
      archiveScanner0.excludes = stringArray0;
      stringArray0[4] = "&-{@ii=Zo|MvT.jar";
      Vector<String> vector0 = new Vector<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("q", (Map<String, List<String>>) hashMap0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>(list0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) vector0);
      vector0.addAll((Collection<? extends String>) list1);
      List<Locale.LanguageRange>[] listArray0 = (List<Locale.LanguageRange>[]) Array.newInstance(List.class, 9);
      listArray0[0] = list0;
      listArray0[1] = list0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      listArray0[2] = (List<Locale.LanguageRange>) linkedList0;
      listArray0[3] = (List<Locale.LanguageRange>) vector1;
      listArray0[4] = list0;
      listArray0[8] = list0;
      listArray0[6] = (List<Locale.LanguageRange>) vector1;
      listArray0[7] = (List<Locale.LanguageRange>) vector1;
      listArray0[8] = (List<Locale.LanguageRange>) vector1;
      vector0.toArray(listArray0);
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.processDirectory((File) null, "!", true);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "G|-Se";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = ".war";
      stringArray0[2] = "!";
      String[] stringArray1 = new String[21];
      stringArray1[0] = "G|-Se";
      stringArray1[1] = ".zNip";
      DirectoryScanner.matchPath("<", ".zip");
      archiveScanner0.excludes = stringArray1;
      stringArray0[3] = ".zNip";
      Vector<String> vector0 = new Vector<String>();
      vector0.add("<");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, String> function0 = Function.identity();
      Function<String, String> function1 = unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      Function.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super Locale, ? extends String>) function2);
      Function<String, Object> function3 = function1.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) function3);
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<String, Integer> function4 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function4);
      UnaryOperator<InputStream> unaryOperator1 = UnaryOperator.identity();
      Function<Object, InputStream> function6 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, InputStream> function7 = unaryOperator1.compose((Function<? super Object, ? extends InputStream>) function6);
      function5.andThen((Function<? super Integer, ? extends InputStream>) function7);
      unaryOperator0.andThen((Function<? super String, ?>) function1);
      Vector<String> vector1 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory((File) null, "G|-Se", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "q";
      archiveScanner0.includes = stringArray0;
      stringArray0[1] = "q";
      stringArray0[2] = "!";
      String[] stringArray1 = new String[2];
      stringArray1[0] = "q";
      stringArray1[1] = "93O";
      stringArray0[3] = "93O";
      stringArray0[4] = "&-{@ii=Zo|MvT.jar";
      Vector<String> vector0 = new Vector<String>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      List<Locale.LanguageRange> list0 = Locale.LanguageRange.parse("q", (Map<String, List<String>>) hashMap0);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>(list0);
      hashMap0.put("!", vector0);
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) vector1, (Collection<String>) vector0);
      vector0.addAll((Collection<? extends String>) list1);
      List<Locale.LanguageRange>[] listArray0 = (List<Locale.LanguageRange>[]) Array.newInstance(List.class, 16);
      listArray0[0] = list0;
      listArray0[1] = list0;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      listArray0[2] = (List<Locale.LanguageRange>) linkedList0;
      listArray0[3] = (List<Locale.LanguageRange>) vector1;
      listArray0[4] = (List<Locale.LanguageRange>) vector1;
      listArray0[5] = list0;
      listArray0[6] = (List<Locale.LanguageRange>) vector1;
      listArray0[7] = (List<Locale.LanguageRange>) vector1;
      listArray0[8] = (List<Locale.LanguageRange>) vector1;
      archiveScanner0.dirsExcluded = vector0;
      archiveScanner0.setExcludes(stringArray1);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("&-{@ii=Zo|MvT.jar");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "rP^>";
      archiveScanner0.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      stringArray0[2] = "";
      archiveScanner0.addDefaultExcludes();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      Function<String, Integer> function0 = (Function<String, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(anyString());
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<String, String> function2 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function.identity();
      Function<Locale, String> function3 = (Function<Locale, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<String, Locale.LanguageRange> function4 = (Function<String, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      function2.apply("");
      function2.andThen((Function<? super String, ? extends Locale.LanguageRange>) function4);
      Function.identity();
      function2.apply("rP^>");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner0.dirsIncluded = vector0;
      function2.compose((Function<? super String, ? extends String>) unaryOperator0);
      function2.andThen((Function<? super String, ?>) unaryOperator0);
      unaryOperator0.andThen((Function<? super String, ?>) function2);
      unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      Function<String, Integer> function5 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function0);
      Function<Integer, InputStream> function6 = (Function<Integer, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.apply("rP^>");
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.compose((Function<? super Object, ? extends String>) function7);
      unaryOperator0.apply("xwj/");
      Vector<String> vector1 = new Vector<String>();
      vector1.replaceAll(unaryOperator0);
      Vector<String> vector2 = new Vector<String>();
      File file0 = archiveScanner0.basedir;
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive((File) null, "xwj/");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("U");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1393);
      linkedList1.add((Integer) null);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1393);
      Integer integer2 = new Integer(1393);
      linkedList1.push(integer2);
      Integer integer3 = new Integer(1393);
      Integer integer4 = new Integer((-14));
      linkedList0.add(integer4);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer(142);
      Integer integer6 = new Integer(142);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      Integer integer7 = new Integer(142);
      linkedList2.add((Integer) null);
      linkedList1.add((Integer) null);
      Integer integer8 = new Integer(142);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer5;
      Integer integer9 = new Integer((int) integerArray0[0]);
      linkedList2.add(integer0);
      linkedList2.toArray(integerArray0);
      Integer integer10 = new Integer((int) integerArray0[0]);
      Integer integer11 = new Integer(1393);
      Integer integer12 = new Integer(1393);
      Integer integer13 = new Integer(1393);
      linkedList0.offerFirst(integer6);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<List<String>> vector0 = new Vector<List<String>>();
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      archiveScanner0.addDefaultExcludes();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function0 = unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      Function<String, Locale.LanguageRange> function1 = (Function<String, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends Locale.LanguageRange>) function1);
      Function.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function3 = unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      function0.apply("vz[h:xL)ZE^;^");
      unaryOperator1.compose((Function<? super String, ? extends String>) function3);
      Function<String, Object> function4 = unaryOperator1.andThen((Function<? super String, ?>) unaryOperator2);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super String, ?>) unaryOperator2);
      unaryOperator0.compose((Function<? super String, ? extends String>) function0);
      unaryOperator3.compose((Function<? super InputStream, ? extends String>) function3);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function5).apply(any());
      Function<String, Integer> function6 = unaryOperator3.andThen((Function<? super String, ? extends Integer>) function5);
      function6.apply("vz[h:xL)ZE^;^");
      function6.apply("I*M.6@F");
      UnaryOperator.identity();
      function6.apply("vz[h:xL)ZE^;^");
      function6.compose((Function<? super Object, ? extends String>) function3);
      unaryOperator1.andThen((Function<? super String, ?>) function4);
      Vector<String> vector0 = new Vector<String>();
      vector0.replaceAll(unaryOperator3);
      Vector<String> vector1 = new Vector<String>();
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive((File) null, "4CrP^>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("sD?c*qaci=$!Ji%G5");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<String> vector1 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) vector0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate7);
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      Predicate<Object> predicate10 = predicate9.negate();
      Predicate<Object> predicate11 = predicate3.or(predicate6);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate9.or(predicate6);
      Predicate<Object> predicate14 = predicate13.or(predicate3);
      Predicate<Object> predicate15 = predicate13.and(predicate11);
      Predicate<Object> predicate16 = predicate10.negate();
      predicate9.and(predicate4);
      Predicate<Object> predicate17 = predicate4.or(predicate7);
      Predicate<Object> predicate18 = predicate17.and(predicate0);
      Predicate<Object> predicate19 = predicate16.negate();
      Predicate<Object> predicate20 = predicate3.and(predicate18);
      Predicate<Object> predicate21 = predicate5.or(predicate12);
      Predicate<Object> predicate22 = predicate4.negate();
      predicate21.and(predicate11);
      Predicate<Object> predicate23 = predicate12.negate();
      predicate1.and(predicate23);
      predicate15.and(predicate17);
      Predicate<Object> predicate24 = predicate9.negate();
      predicate22.or(predicate15);
      predicate23.and(predicate24);
      predicate14.or(predicate12);
      predicate8.or(predicate22);
      predicate19.and(predicate20);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("V(AR.jar");
      Vector<String> vector0 = new Vector<String>();
      vector0.add((String) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1393);
      linkedList0.add((Integer) null);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1393);
      linkedList0.push(integer1);
      Integer integer2 = new Integer(1393);
      Integer integer3 = new Integer((-14));
      linkedList0.add(integer3);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer4 = new Integer(142);
      linkedList2.add(integer0);
      linkedList1.add(integer2);
      Integer integer5 = new Integer(142);
      linkedList2.add((Integer) null);
      Integer integer6 = new Integer(142);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer4;
      Integer integer7 = new Integer((int) integerArray0[0]);
      linkedList2.add(integer0);
      linkedList2.toArray(integerArray0);
      Integer integer8 = new Integer((int) integerArray0[0]);
      Integer integer9 = new Integer(1393);
      Integer integer10 = new Integer(1393);
      Integer integer11 = new Integer(1393);
      linkedList0.offerFirst(integer4);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<List<String>> vector1 = new Vector<List<String>>();
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("sD?c*qaci=$!Ji%G5");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<String> vector1 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) vector0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate7);
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      Predicate<Object> predicate10 = predicate3.or(predicate9);
      Predicate<Object> predicate11 = predicate2.or(predicate5);
      Predicate<Object> predicate12 = predicate3.or(predicate11);
      Predicate<Object> predicate13 = predicate9.negate();
      Predicate<Object> predicate14 = predicate9.or(predicate6);
      Predicate<Object> predicate15 = predicate8.negate();
      Predicate<Object> predicate16 = predicate10.negate();
      Predicate<Object> predicate17 = predicate9.and(predicate4);
      Predicate<Object> predicate18 = predicate4.or(predicate7);
      Predicate<Object> predicate19 = predicate18.and(predicate0);
      Predicate<Object> predicate20 = predicate16.negate();
      predicate9.test(predicate20);
      predicate3.and(predicate19);
      Predicate<Object> predicate21 = predicate8.negate();
      predicate4.negate();
      predicate21.and(predicate12);
      Predicate<Object> predicate22 = predicate13.negate();
      predicate1.and(predicate22);
      Predicate<Object> predicate23 = predicate12.negate();
      predicate12.and(predicate23);
      predicate14.negate();
      predicate15.and(predicate12);
      predicate17.or(predicate19);
      predicate21.or(predicate8);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("93O", "93O");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("93O", "93O", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Enumeration<PushbackInputStream> enumeration0 = (Enumeration<PushbackInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      Integer integer0 = new Integer(2);
      pushbackInputStream0.read();
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 1862);
      pushbackInputStream1.read();
      improvedFile1.copyFrom((InputStream) pushbackInputStream1);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      DirectoryScanner.matchPath("wAPk/hE0c", "wAPk/hE0c");
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "AtH{{", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("eUO\"(g.!a).");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<String> vector1 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) vector0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.test("eUO\"(g.!a).");
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate0);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate5);
      Predicate<Object> predicate7 = predicate1.or(predicate6);
      Predicate<Object> predicate8 = predicate4.and(predicate0);
      Predicate<Object> predicate9 = predicate3.or(predicate8);
      Predicate<Object> predicate10 = predicate2.or(predicate1);
      predicate3.or(predicate10);
      predicate8.test(predicate10);
      predicate4.negate();
      Predicate<Object> predicate11 = predicate7.and(predicate0);
      Predicate<Object> predicate12 = predicate9.negate();
      Predicate<Object> predicate13 = predicate7.negate();
      Predicate<Object> predicate14 = predicate6.or(predicate13);
      Predicate<Object> predicate15 = predicate4.negate();
      Predicate<Object> predicate16 = predicate15.and(predicate4);
      Predicate<Object> predicate17 = predicate6.or(predicate4);
      Predicate<Object> predicate18 = predicate11.or(predicate0);
      Predicate.isEqual((Object) predicate16);
      predicate12.negate();
      predicate1.and(predicate17);
      Predicate<Object> predicate19 = predicate8.negate();
      predicate18.or(predicate14);
      Predicate<Object> predicate20 = predicate4.and(predicate1);
      predicate2.or(predicate19);
      Predicate<Object> predicate21 = predicate20.or(predicate2);
      predicate21.and(predicate18);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("I");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1393);
      linkedList1.add((Integer) null);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1393);
      Integer integer2 = new Integer(1393);
      linkedList1.push(integer2);
      Integer integer3 = new Integer(1393);
      Integer integer4 = new Integer((-14));
      linkedList0.add(integer4);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer5 = new Integer(142);
      Integer integer6 = new Integer(142);
      linkedList0.add((Integer) null);
      linkedList0.add((Integer) null);
      Integer integer7 = new Integer(142);
      linkedList2.add((Integer) null);
      linkedList1.add((Integer) null);
      Integer integer8 = new Integer(142);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer5;
      Integer integer9 = new Integer((int) integerArray0[0]);
      linkedList2.add(integer0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(".zi5");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<String> vector1 = new Vector<String>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) vector0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.test(".zi5");
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate8 = predicate1.or(predicate7);
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      predicate3.or(predicate9);
      predicate5.or(predicate3);
      Predicate<Object> predicate10 = predicate8.and(predicate1);
      predicate4.and(predicate10);
      Predicate<Object> predicate11 = predicate7.or(predicate0);
      predicate1.and(predicate0);
      Predicate<Object> predicate12 = predicate11.negate();
      Vector<String> vector2 = new Vector<String>();
      vector2.removeIf(predicate12);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.isArchive(improvedFile0);
      long long0 = (-1L);
      System.setCurrentTimeMillis(long0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("I*M.6@F");
      Vector<String> vector0 = new Vector<String>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1393);
      linkedList1.add((Integer) null);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1393);
      linkedList0.push(integer1);
      Integer integer2 = new Integer(1393);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer(142);
      Integer integer4 = new Integer(142);
      linkedList2.add(integer0);
      linkedList2.add(integer4);
      linkedList1.add(integer3);
      Integer integer5 = new Integer(142);
      Integer integer6 = new Integer(142);
      linkedList1.add(integer6);
      Integer integer7 = new Integer(142);
      Integer[] integerArray0 = new Integer[2];
      integerArray0[0] = integer3;
      Integer integer8 = new Integer((int) integerArray0[0]);
      linkedList1.add(integer8);
      Integer integer9 = new Integer((int) integerArray0[0]);
      linkedList2.add(integer0);
      linkedList2.toArray(integerArray0);
      Integer integer10 = new Integer(9);
      Integer integer11 = new Integer(1393);
      Integer integer12 = new Integer((int) integerArray0[0]);
      improvedFile0.createTempDir("I*M.6@F", "I*M.6@F");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("eUO\"(g.!a).");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Vector<String> vector1 = new Vector<String>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) vector0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.test("eUO\"(g.!a).");
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.and(predicate0);
      Predicate<Object> predicate5 = predicate4.negate();
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate6);
      Predicate<Object> predicate8 = predicate1.or(predicate7);
      Predicate<Object> predicate9 = predicate4.and(predicate0);
      Predicate<Object> predicate10 = predicate3.or(predicate9);
      Predicate<Object> predicate11 = predicate2.or(predicate5);
      Predicate<Object> predicate12 = predicate3.or(predicate11);
      Predicate<Object> predicate13 = predicate12.negate();
      predicate9.test(predicate11);
      predicate5.negate();
      predicate13.and(predicate0);
      Predicate<Object> predicate14 = predicate10.negate();
      Predicate<Object> predicate15 = predicate8.negate();
      Predicate<Object> predicate16 = predicate7.or(predicate15);
      Predicate<Object> predicate17 = predicate4.negate();
      Predicate<Object> predicate18 = predicate17.and(predicate5);
      Predicate<Object> predicate19 = predicate7.or(predicate4);
      Predicate<Object> predicate20 = predicate14.negate();
      Predicate.isEqual((Object) predicate18);
      predicate14.negate();
      predicate1.and(predicate19);
      Predicate<Object> predicate21 = predicate9.negate();
      predicate20.or(predicate16);
      Predicate<Object> predicate22 = predicate4.and(predicate1);
      predicate2.or(predicate21);
      Predicate<Object> predicate23 = predicate22.or(predicate5);
      predicate23.and(predicate20);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8323649625844873
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("V(AR/V(AR/V(AR093O");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "f*)V");
      ImprovedFile improvedFile0 = new ImprovedFile("V(AR", "V(AR");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("V(AR", "93O", improvedFile0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("V(AR/V(AR/V(AR0.zi5");
      DirectoryScanner.match("1=#`aTX.jar", "93O");
      ImprovedFile improvedFile2 = new ImprovedFile(improvedFile1);
      FileSystemHandling.setPermissions(evoSuiteFile1, false, true, true);
      MockFile mockFile0 = new MockFile("xE smD7Pi!Ng>FiI&", "93O");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "com.lts.application.fatal.createTempArea");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile2);
      ImprovedFile.copyFromToDir(improvedFile1, improvedFile0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("V(AR/V(AR");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "93O");
      DirectoryScanner.matchPath("V(AR", "x'.#u");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "XU@GS", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("@+MQE<");
      Vector<String> vector0 = new Vector<String>();
      vector0.add("@+MQE<");
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      Function.identity();
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      UnaryOperator.identity();
      unaryOperator1.apply("@+MQE<");
      Function<String, String> function0 = unaryOperator0.compose((Function<? super String, ? extends String>) unaryOperator1);
      unaryOperator1.compose((Function<? super String, ? extends String>) function0);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function1).apply(any());
      Function<String, Integer> function2 = unaryOperator0.andThen((Function<? super String, ? extends Integer>) function1);
      function2.apply("@+MQE<");
      UnaryOperator.identity();
      Function.identity();
      Function.identity();
      function2.apply("k+MQE<");
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super String, ?>) unaryOperator0);
      vector0.replaceAll(unaryOperator1);
      Vector<String> vector1 = new Vector<String>();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, "w=k9AAc0P*An");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, @+MQE<
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("critical.question.quit.title");
      Vector<String> vector0 = new Vector<String>();
      vector0.add("critical.question.quit.title");
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer integer0 = new Integer(1393);
      linkedList0.add(integer0);
      linkedList0.add(integer0);
      Integer integer1 = new Integer(1393);
      linkedList0.push(integer1);
      Integer integer2 = new Integer(1393);
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      Integer integer3 = new Integer(1393);
      linkedList1.add(integer3);
      Integer integer4 = new Integer(142);
      Integer integer5 = new Integer(142);
      linkedList2.add(integer0);
      linkedList2.add(integer5);
      linkedList1.add(integer2);
      Integer integer6 = new Integer(1393);
      Integer integer7 = new Integer(142);
      linkedList0.add(integer4);
      linkedList1.add(integer7);
      Integer integer8 = new Integer(142);
      Integer[] integerArray0 = new Integer[1];
      integerArray0[0] = integer4;
      Integer integer9 = new Integer((int) integerArray0[0]);
      linkedList2.add(integer0);
      linkedList2.toArray(integerArray0);
      Integer integer10 = new Integer((int) integerArray0[0]);
      Integer integer11 = new Integer(1393);
      Integer integer12 = new Integer(1393);
      Integer integer13 = new Integer((int) integerArray0[0]);
      linkedList0.offerFirst(integer6);
      improvedFile0.createTempDir("&<2+", "critical.question.quit.title");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, "critical.question.quit.title", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("2wnWG*Tp)~0`", "2wnWG*Tp)~0`");
      ImprovedFile improvedFile1 = new ImprovedFile(improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0);
      Integer integer0 = new Integer(1322);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(sequenceInputStream0, 1);
      PushbackInputStream pushbackInputStream2 = new PushbackInputStream(sequenceInputStream0, 1862);
      PushbackInputStream pushbackInputStream3 = new PushbackInputStream(pushbackInputStream0);
      pushbackInputStream3.read();
      improvedFile1.copyFrom((InputStream) pushbackInputStream0);
      boolean boolean0 = archiveScanner0.haveSlowResults;
      DirectoryScanner.matchPath("2wnWG*Tp)~0`", ".jar");
      try { 
        archiveScanner0.scandir(improvedFile0, "OHx mmoCa", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/2wnWG*Tp)~0`/2wnWG*Tp)~0`
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }
}
