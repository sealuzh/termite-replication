/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 07:20:09 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.controller.StructuredMenuHolder;
import freemind.modes.mindmapmode.MindMapController;
import freemind.modes.mindmapmode.MindMapMode;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.Rectangle;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelListener;
import java.awt.geom.Rectangle2D;
import java.io.IOException;
import java.text.ParsePosition;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Locale;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JMenu;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButton;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.basic.BasicPanelUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.css.parser.DefaultSelectorFactory;
import org.apache.batik.css.parser.Parser;
import org.apache.batik.gvt.CompositeGraphicsNode;
import org.apache.batik.svggen.SVGGeneratorContext;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.fop.pdf.PDFInfo;
import org.apache.xalan.templates.ElemWithParam;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.w3c.css.sac.Selector;
import org.w3c.css.sac.SimpleSelector;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.8303221333141075
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[1] = (byte)54;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)94;
      byteArray0[7] = (byte) (-57);
      byteArray0[8] = (byte) (-21);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.requestFocusInWindow();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setEnabled(true);
      jDayChooser0.setMonth(10);
      jDayChooser1.getSelectedDay();
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.701765291241601
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 47, 47, 47, 'l');
      keyEvent0.setKeyChar('p');
      InputEvent.getModifiersExText(1232);
      keyEvent0.setKeyCode(1232);
      keyEvent0.setSource("Ctrl+Shift+Button1");
      keyEvent0.setSource("Ctrl+Shift+Button1");
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1232);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 47, "Ctrl+Shift+Button1", 47, 1232);
      actionEvent0.paramString();
      jDayChooser0.setDay(10159);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 35, "Ctrl+Shift+Button1", 1L, (-32));
      jDayChooser0.setMonth(10159);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      DebugGraphics debugGraphics0 = new DebugGraphics((Graphics) null);
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.getSelectedDay();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.772914105211107
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-2244));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "day");
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setWeekOfYearVisible(true);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-89);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)20;
      byteArray0[3] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(38);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.852798435239931
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.decorationBackgroundColor;
      jDayChooser0.setDecorationBackgroundColor(color0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay((-792));
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jDayChooser0.removeMouseWheelListener((MouseWheelListener) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "16");
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 9990, (-792), 9990, 37, '`', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMaxDayCharacters(3255);
      jDayChooser2.drawWeeks();
      jDayChooser0.setMonth((-792));
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h-bo?!{G+r%^>C}o.");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay(5);
      jDayChooser0.getInputVerifier();
      jDayChooser0.setDayBordersVisible(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getDay();
      jDayChooser0.setYear(10171);
      jDayChooser0.setYear(5);
      jDayChooser0.setMaxSelectableDate((Date) null);
      jDayChooser0.drawWeeks();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(5, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser0.yearChooser;
      jDayChooser0.weekPanel = (JPanel) null;
      // Undeclared exception!
      try { 
        jDayChooser0.setWeekOfYearVisible(true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 0L, 47, (-3075), '0');
      int int0 = 1232;
      keyEvent0.setKeyChar('3');
      InputEvent.getModifiersExText(47);
      keyEvent0.setKeyCode((-3075));
      keyEvent0.setSource(jDayChooser0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Rectangle2D.Double rectangle2D_Double0 = new Rectangle2D.Double(0L, 1454, 0.0, (-3075));
      Rectangle rectangle0 = rectangle2D_Double0.getBounds();
      jDayChooser0.paintImmediately(rectangle0);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 39, (-68L), 173, 1454, '{');
      keyEvent1.setSource(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      KeyEvent.getKeyModifiersText(1470);
      jDayChooser0.isWeekOfYearVisible();
      keyEvent0.consume();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.689879131122063
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.scrollbar;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.2F;
      floatArray0[1] = 0.2F;
      floatArray0[2] = 1505.0F;
      floatArray0[3] = 0.0F;
      systemColor0.getComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((-10));
      jDayChooser0.weekPanel = (JPanel) jDayChooser1;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, (-10), (-3055), (-1694), 11, 'b', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2186, (-2593L), (-1694), (-10), 'C');
      JButton jButton0 = new JButton();
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 1021, "day");
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8330090921801947
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.scrollbar;
      float[] floatArray0 = new float[4];
      floatArray0[3] = 0.2F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1505.0F;
      floatArray0[3] = 0.0F;
      systemColor0.getComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((-10));
      JComponent.getDefaultLocale();
      jDayChooser0.weekPanel = (JPanel) jDayChooser0;
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      jDayChooser1.isOpaque();
      menuSelectionManager0.isComponentPartOfCurrentMenu(jDayChooser1);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, (-10), (-3055), (-1694), 11, 'b', (MenuElement[]) null, menuSelectionManager0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 2186, (-2593L), (-1694), (-10), 'C');
      MenuKeyEvent menuKeyEvent1 = new MenuKeyEvent(jDayChooser1, 957, 2186, 11, 2186, 'C', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent1);
      jDayChooser1.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser1.getMaxDayCharacters());
      
      jDayChooser0.setMonth((-1694));
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.904160518944306
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.transferFocusBackward();
      jDayChooser0.getMaxSelectableDate();
      jDayChooser0.isDecorationBordersVisible();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      jDayChooser0.setMaxDayCharacters(0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay(46);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser0.setMonth((-3051));
      Color color0 = jDayChooser2.getWeekdayForeground();
      jDayChooser1.setDecorationBackgroundColor(color0);
      jDayChooser1.getMaxSelectableDate();
      jDayChooser1.setFocus();
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6477744711335873
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 47, 47, 47, 'l');
      keyEvent0.setKeyChar('{');
      InputEvent.getModifiersExText(1232);
      keyEvent0.setKeyCode(1232);
      keyEvent0.setSource("Ctrl+Shift+Button1");
      keyEvent0.setSource("Ctrl+Shift+Button1");
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1232);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 47, "Ctrl+Shift+Button1", 47, 1232);
      actionEvent0.paramString();
      jDayChooser0.setDay(10159);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 35, "Ctrl+Shift+Button1", 1L, (-32));
      jDayChooser0.setMonth(10159);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      assertEquals(31, jDayChooser0.getDay());
      
      jDayChooser2.setMonth((-202));
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textText;
      float[] floatArray0 = new float[9];
      floatArray0[0] = (-479.18F);
      floatArray0[1] = (-479.18F);
      floatArray0[2] = (-479.18F);
      floatArray0[3] = (-479.18F);
      floatArray0[4] = (-479.18F);
      floatArray0[5] = (-479.18F);
      floatArray0[6] = (-479.18F);
      floatArray0[7] = (-479.18F);
      floatArray0[8] = (-479.18F);
      systemColor0.getComponents(floatArray0);
      jDayChooser0.setForeground(systemColor0);
      Locale locale0 = Locale.CHINA;
      jDayChooser0.setLocale(locale0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9629971851285157
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.grabFocus();
      jDayChooser0.setDebugGraphicsOptions(218);
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setMaxDayCharacters(218);
      boolean boolean0 = jDayChooser0.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser0.getDay();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, date0);
      jDayChooser0.drawDays();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isWeekOfYearVisible();
      KeyEvent keyEvent0 = new KeyEvent(jYearChooser0, 218, 2147483647L, 14, 218, '?');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.getMaxSelectableDate();
      Date date1 = jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertSame(date1, date0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 47, 47, 47, 'l');
      keyEvent0.setKeyChar('{');
      InputEvent.getModifiersExText(1232);
      keyEvent0.setKeyCode(1232);
      keyEvent0.setSource("Ctrl+Shift+Button1");
      keyEvent0.setSource("Ctrl+Shift+Button1");
      jDayChooser0.keyReleased(keyEvent0);
      keyEvent0.consume();
      jDayChooser0.getDaysInMonth();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      keyEvent0.consume();
      KeyEvent.getKeyModifiersText(1232);
      jDayChooser0.keyTyped(keyEvent0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(7, (-1437625606), 47);
      jDayChooser0.drawDays();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(2880);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.619994235517992
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 47, 47, 47, 'l');
      keyEvent0.setKeyChar('l');
      InputEvent.getModifiersExText(1232);
      keyEvent0.setKeyCode(1232);
      keyEvent0.setSource("Ctrl+Shift+Button1");
      keyEvent0.setSource("Ctrl+Shift+Button1");
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1232);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 47, "Ctrl+Shift+Button1", 47, 1232);
      actionEvent0.paramString();
      jDayChooser0.setDay(10139);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getColorModel();
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 35, "Ctrl+Shift+Button1", 1L, (-32));
      jDayChooser0.setMonth(10111);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      SystemColor systemColor0 = SystemColor.controlLtHighlight;
      jDayChooser0.decorationBackgroundColor = (Color) systemColor0;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 0L, 47, (-3075), '0');
      int int0 = 1232;
      keyEvent0.setKeyChar('3');
      InputEvent.getModifiersExText(47);
      keyEvent0.setKeyCode((-3075));
      keyEvent0.setSource(jDayChooser0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      KeyEvent keyEvent1 = new KeyEvent(jDayChooser0, 39, (-68L), 173, 1454, '{');
      keyEvent1.setSource(keyEvent0);
      jDayChooser0.keyReleased(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6885063804586076
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentX((-479.18F));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setMaxDayCharacters((-172));
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, 47, "{;", 47, (-172));
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 47, 47, 47, 'l');
      keyEvent0.setKeyChar('{');
      InputEvent.getModifiersExText(1232);
      keyEvent0.setKeyCode(1232);
      keyEvent0.setSource("Ctrl+Shift+Button1");
      keyEvent0.setSource("Ctrl+Shift+Button1");
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1232);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 47, "Ctrl+Shift+Button1", 47, 1232);
      StructuredMenuHolder structuredMenuHolder0 = new StructuredMenuHolder();
      structuredMenuHolder0.addMenu((JMenu) null, "day");
      JMenu jMenu0 = new JMenu();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1232, 47, 16);
      jDayChooser0.getDaysInMonth();
      KeyEvent.getKeyModifiersText(3);
      jDayChooser0.isFocusable();
      jDayChooser0.setDay(28);
      jDayChooser0.setMonth(1237);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.706697613279902
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 0L, 47, (-3075), '0');
      jDayChooser0.drawDays();
      keyEvent0.paramString();
      jDayChooser0.setDay(1232);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "30");
      jDayChooser0.setMonth((-3075));
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Can not build FormatterListener in Redirect extension!");
      jDayChooser0.setFont((Font) null);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.683281366426669
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      jDayChooser0.setMaxDayCharacters((-172));
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3051));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setMonth((-172));
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Parser parser0 = new Parser();
      DefaultSelectorFactory defaultSelectorFactory0 = (DefaultSelectorFactory)DefaultSelectorFactory.INSTANCE;
      parser0.setSelectorFactory(defaultSelectorFactory0);
      DefaultSelectorFactory defaultSelectorFactory1 = (DefaultSelectorFactory)DefaultSelectorFactory.INSTANCE;
      SimpleSelector simpleSelector0 = mock(SimpleSelector.class, new ViolatedAssumptionAnswer());
      defaultSelectorFactory1.createDirectAdjacentSelector((short)33, (Selector) null, simpleSelector0);
      parser0.setSelectorFactory(defaultSelectorFactory1);
      parser0.getLocale();
      CompositeGraphicsNode compositeGraphicsNode0 = new CompositeGraphicsNode();
      Locale.filterTags((List<Locale.LanguageRange>) compositeGraphicsNode0, (Collection<String>) compositeGraphicsNode0);
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(true);
      jDayChooser0.setMonth(100);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setDebugGraphicsOptions(100);
      jDayChooser0.createToolTip();
      jDayChooser0.init();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDecorationBackgroundColor();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 100);
      MindMapMode mindMapMode0 = new MindMapMode();
      boolean boolean0 = false;
      jDayChooser0.setDoubleBuffered(false);
      jDayChooser0.setDecorationBackgroundVisible(false);
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.799517964535027
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.grabFocus();
      jDayChooser0.setDebugGraphicsOptions(218);
      jDayChooser0.getMaxSelectableDate();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser0.setSize(218, 218);
      jDayChooser1.setDoubleBuffered(true);
      jDayChooser0.setMaxDayCharacters(218);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDay();
      jDayChooser1.getRootPane();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 11);
      MindMapMode mindMapMode0 = new MindMapMode();
      jDayChooser0.isDayBordersVisible();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.5775687103478937
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 47, 47, 47, 'l');
      keyEvent0.setKeyChar('{');
      InputEvent.getModifiersExText(1232);
      keyEvent0.setKeyCode(1232);
      keyEvent0.setSource("Ctrl+Shift+Button1");
      keyEvent0.setSource("Ctrl+Shift+Button1");
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1232);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 47, "Ctrl+Shift+Button1", 47, 1232);
      actionEvent0.paramString();
      jDayChooser0.setDay(10159);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser(true);
      ActionEvent actionEvent1 = new ActionEvent(jDayChooser0, 35, "Ctrl+Shift+Button1", 1L, (-32));
      jDayChooser1.setDay((-32));
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.enableInputMethods(true);
      jDayChooser0.setComponentPopupMenu((JPopupMenu) null);
      jDayChooser0.setIgnoreRepaint(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1742, 1742, (-2077), 1742, 'M');
      InputEvent.getModifiersExText(1742);
      keyEvent0.setKeyCode(1742);
      jDayChooser0.setAlignmentX(1742);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.requestFocusInWindow();
      jDayChooser0.setEnabled(true);
      jDayChooser0.getSundayForeground();
      jDayChooser0.setDay(13);
      JMonthChooser jMonthChooser0 = jDayChooser0.monthChooser;
      jDayChooser0.setMonthChooser((JMonthChooser) null);
      assertEquals(13, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.831968267048591
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      MenuSelectionManager.defaultManager();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      PDFInfo pDFInfo0 = new PDFInfo();
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setSelectableDateRange(date0, date0);
      jDayChooser0.drawDays();
      jDayChooser0.setAlwaysFireDayProperty(false);
      jDayChooser0.isWeekOfYearVisible();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Date date1 = jDayChooser0.getMaxSelectableDate();
      HsqlProperties hsqlProperties0 = new HsqlProperties();
      jDayChooser0.drawDays();
      HsqlProperties hsqlProperties1 = HsqlProperties.delimitedArgPairsToProps("Windows", "14", "Windows", "ySVM{bTF1aq");
      hsqlProperties0.addProperties(hsqlProperties1);
      jDayChooser0.setMaxSelectableDate(date0);
      assertSame(date0, date1);
      
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(boolean0);
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.8531463577378435
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      MenuElement[] menuElementArray0 = new MenuElement[0];
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-839), (-839), (-839), 10, '', menuElementArray0, menuSelectionManager0);
      menuKeyEvent0.getPath();
      menuKeyEvent0.getPath();
      jDayChooser0.keyPressed(menuKeyEvent0);
      PDFInfo pDFInfo0 = new PDFInfo();
      pDFInfo0.getCreationDate();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.drawDays();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.keyPressed(menuKeyEvent0);
      jDayChooser0.getMaxSelectableDate();
      // Undeclared exception!
      try { 
        HsqlProperties.argArrayToProps((String[]) null, "Windows");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.persist.HsqlProperties", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.770581544706131
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.scrollbar;
      float[] floatArray0 = new float[4];
      floatArray0[0] = 0.2F;
      floatArray0[1] = 0.0F;
      floatArray0[2] = 1505.0F;
      floatArray0[3] = 0.0F;
      systemColor0.getComponents(floatArray0);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", locale0);
      jDayChooser0.getToolkit();
      ParsePosition parsePosition0 = new ParsePosition(41);
      parsePosition0.setErrorIndex((-3006));
      mockSimpleDateFormat0.parse("day", parsePosition0);
      Date date0 = jDayChooser0.setMinSelectableDate((Date) null);
      jDayChooser0.getSelectedDay();
      jDayChooser0.drawDays();
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getDecorationBackgroundColor();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ElemWithParam elemWithParam0 = new ElemWithParam();
      SVGGeneratorContext sVGGeneratorContext0 = SVGGeneratorContext.createDefault(elemWithParam0);
      SVGGraphics2D sVGGraphics2D0 = null;
      try {
        sVGGraphics2D0 = new SVGGraphics2D(sVGGeneratorContext0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // ElemTemplateElement error: Function not supported!
         //
         verifyException("org.apache.xalan.templates.ElemTemplateElement", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.7072400880413086
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "RTsmr7kr8:Z=>@;=M");
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getDaysInMonth();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)113;
      byteArray0[2] = (byte)24;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)6;
      byteArray0[6] = (byte)41;
      byteArray0[8] = (byte)0;
      JMenu jMenu0 = new JMenu();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      jDayChooser0.updateUI();
      jDayChooser0.getDecorationBackgroundColor();
      Color color0 = Color.darkGray;
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      Color color0 = Color.darkGray;
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer();
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.6832813664266695
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.revalidate();
      int int0 = (-172);
      jDayChooser0.setMaxDayCharacters((-172));
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser0, (-1521), "day", (-9223372036854775808L), (-839));
      actionEvent0.paramString();
      jDayChooser0.setDay((-3051));
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getUIClassID();
      jDayChooser1.drawWeeks();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // accessories.plugins.time.JDayChooser cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.662701752014223
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Parser parser0 = new Parser();
      DefaultSelectorFactory defaultSelectorFactory0 = (DefaultSelectorFactory)DefaultSelectorFactory.INSTANCE;
      defaultSelectorFactory0.createElementSelector("org.apache.batik.css.parser.resources.Messages", "org.apache.batik.css.parser.resources.Messages");
      Color color0 = Color.pink;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1199), 27, 14);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(27);
      MenuSelectionManager.defaultManager();
      jDayChooser0.setMaxDayCharacters(27);
      assertEquals(27, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "jpegImage";
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.isDecorationBordersVisible();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 0);
      MindMapMode mindMapMode0 = new MindMapMode();
      MindMapController mindMapController0 = null;
      try {
        mindMapController0 = new MindMapController(mindMapMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "%Q";
      stringArray0[1] = "jpegImage";
      stringArray0[2] = "day";
      stringArray0[3] = "jpegImage";
      stringArray0[4] = "jpegImage";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      jDayChooser_DecoratorButton0.getInsets();
      jDayChooser_DecoratorButton0.isFocusable();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      // Undeclared exception!
      try { 
        defaultTreeCellRenderer0.setVerticalTextPosition(979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // verticalTextPosition
         //
         verifyException("javax.swing.JLabel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      int int0 = (-1538);
      jDayChooser0.drawDays();
      int int1 = 0;
      jDayChooser0.repaint((-1538), 2216, 0, 0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      int int0 = 2;
      jDayChooser0.addListeners(2);
      int int1 = (-1977);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1977));
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      int int2 = 9660;
      Color color0 = new Color(9660);
      int int3 = (-3001);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      color0.getRGBComponents(floatArray0);
      floatArray0[1] = (-178.878F);
      try { 
        ICC_Profile.getInstance("org.apache.xpath.functions.FuncStartsWith");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file org.apache.xpath.functions.FuncStartsWith
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.transferFocusBackward();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      BasicPanelUI basicPanelUI0 = new BasicPanelUI();
      jDayChooser0.setUI(basicPanelUI0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.createToolTip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "W";
      stringArray0[1] = "Metal";
      stringArray0[2] = "day";
      stringArray0[3] = "T";
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringArray0[4] = "";
      stringArray0[5] = "day";
      stringArray0[6] = "";
      stringArray0[7] = "2c\"xO&)=g;t";
      stringArray0[8] = "";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = jDayChooser0.getForeground();
      float[] floatArray0 = new float[4];
      floatArray0[0] = (-893.312F);
      floatArray0[1] = 0.0F;
      floatArray0[2] = (-1702.274F);
      floatArray0[3] = 0.0F;
      color0.getRGBComponents(floatArray0);
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.getLocale();
      JPanel jPanel0 = jDayChooser0.getDayPanel();
      jPanel0.doLayout();
      FocusEvent focusEvent0 = new FocusEvent(jPanel0, 8596);
      focusEvent0.paramString();
      // Undeclared exception!
      try { 
        jPanel0.setComponentZOrder(jDayChooser0, 8596);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // illegal component position
         //
         verifyException("java.awt.Container", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 47, 0L, 47, (-3075), '0');
      jDayChooser0.drawDays();
      jDayChooser0.setDay(1232);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "30");
      jDayChooser0.setMonth((-3075));
      jDayChooser0.setFont((Font) null);
      jDayChooser0.getDay();
      jDayChooser0.getDay();
      jDayChooser0.getDayPanel();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.619994235517992
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      InputEvent.getModifiersExText(1210);
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(1210, '\u0085');
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 47, "Ctrl+Button1", 47, 1210);
      actionEvent0.paramString();
      jDayChooser0.setDay(10139);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getColorModel();
      // Undeclared exception!
      try { 
        jDayChooser1.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.swing.table.DefaultTableModel cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7385791605222836
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-112);
      byteArray0[1] = (byte)100;
      ImageIcon imageIcon0 = new ImageIcon(byteArray0);
      JRadioButton jRadioButton0 = new JRadioButton("B}c4)%O/Php;Fg:", imageIcon0, false);
      KeyEvent keyEvent0 = new KeyEvent(jRadioButton0, 302, (byte) (-112), (-3075), (byte) (-112), ',');
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawDays();
      jDayChooser0.setDay((-217));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "zu]}");
      jDayChooser0.setMonth(302);
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      SystemColor systemColor0 = SystemColor.textText;
      float[] floatArray0 = new float[5];
      floatArray0[0] = 200.0F;
      floatArray0[1] = 1005.9561F;
      floatArray0[2] = (-2376.0F);
      floatArray0[3] = (-2172.2F);
      systemColor0.getColorComponents(floatArray0);
      floatArray0[4] = 0.25F;
      jDayChooser0.getVisibleRect();
      systemColor0.getComponents(floatArray0);
      jDayChooser0.setForeground(systemColor0);
      jDayChooser0.updateUI();
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.7329045285804874
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser0 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3127, 3127, 3127, 3127, 'l');
      keyEvent0.setKeyChar('\u0085');
      InputEvent.getModifiersExText(1243);
      keyEvent0.setKeyCode(1243);
      keyEvent0.setSource("Ctrl+Shift+Button1");
      keyEvent0.setSource("Ctrl+Shift+Button1");
      Object[] objectArray0 = new Object[0];
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, 1243);
      ActionEvent actionEvent0 = new ActionEvent(defaultTableModel0, 3127, "Ctrl+Shift+Button1", 3127, 1243);
      actionEvent0.paramString();
      jDayChooser0.setDay(10139);
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.requestFocusInWindow();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setMonth(22);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser1.setYearChooser(jYearChooser0);
      KeyEvent keyEvent1 = null;
      try {
        keyEvent1 = new KeyEvent(jDayChooser1, 25, 25, 3127, 10139, 'l', 1243);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }
}
