/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 21:29:58 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.common.plugins.MapNodePositionHolderBase;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.HeadlessException;
import java.awt.LayoutManager;
import java.awt.SystemColor;
import java.awt.color.ICC_Profile;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.KeyListener;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.net.MalformedURLException;
import java.sql.Time;
import java.text.AttributedCharacterIterator;
import java.text.ParsePosition;
import java.util.Date;
import java.util.Hashtable;
import java.util.Locale;
import java.util.Map;
import java.util.SimpleTimeZone;
import java.util.TimeZone;
import java.util.function.BiConsumer;
import javax.help.HelpSet;
import javax.help.JHelpContentViewer;
import javax.help.plaf.basic.BasicContentViewerUI;
import javax.swing.DebugGraphics;
import javax.swing.ImageIcon;
import javax.swing.InputVerifier;
import javax.swing.JButton;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JDesktopPane;
import javax.swing.JDialog;
import javax.swing.JMenuItem;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextPane;
import javax.swing.JToolTip;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.AncestorListener;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.plaf.metal.MetalComboBoxUI;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.GapContent;
import javax.swing.text.StyleContext;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.renderer.StrokingTextPainter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.MemoryTileCache;
import org.openstreetmap.gui.jmapviewer.Tile;
import org.openstreetmap.gui.jmapviewer.interfaces.TileCache;
import org.openstreetmap.gui.jmapviewer.tilesources.OsmTileSource;
import org.openstreetmap.gui.jmapviewer.tilesources.TMSTileSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2083377530546424
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      hashtable0.clear();
      BiConsumer<AttributedCharacterIterator.Attribute, Object> biConsumer0 = (BiConsumer<AttributedCharacterIterator.Attribute, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)90;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)90;
      byteArray0[4] = (byte)90;
      byteArray0[5] = (byte)90;
      byteArray0[6] = (byte)90;
      byteArray0[7] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      memoryTileCache0.clear();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, (byte)90);
      KeyEvent keyEvent0 = new KeyEvent(jMapViewer0, 11, 8847, (-1265), (byte)90, 'N');
      KeyEvent keyEvent1 = new KeyEvent(jMapViewer0, 4569, (-1265), 34, 42, '9');
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.377421649677302
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Boolean boolean0 = new Boolean(true);
      jDayChooser0.setMonth(100);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setDebugGraphicsOptions(100);
      jDayChooser0.createToolTip();
      jDayChooser0.updateUI();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      sVGColorProfileElementBridge0.cache.request((String) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = jDayChooser0.weekdayForeground;
      SVGColorProfileElementBridge sVGColorProfileElementBridge1 = new SVGColorProfileElementBridge();
      SVGColorProfileElementBridge sVGColorProfileElementBridge2 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache1 = sVGColorProfileElementBridge2.cache;
      sVGColorProfileElementBridge1.cache.request("28");
      Color color1 = Color.DARK_GRAY;
      namedProfileCache0.request("Center");
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setForeground(color0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.initDecorations();
      sVGColorProfileElementBridge1.getInstance();
      jDayChooser0.setEnabled(true);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser2.setDay(0);
      jDayChooser1.setDecorationBackgroundColor(colorUIResource0);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser3.getDecorationBackgroundColor();
      jDayChooser3.updateUI();
      Date date0 = jDayChooser0.getMinSelectableDate();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("28");
      ParsePosition parsePosition0 = new ParsePosition(4);
      mockSimpleDateFormat0.parse("28", parsePosition0);
      jDayChooser2.setSelectableDateRange((Date) null, date0);
      assertEquals(1, jDayChooser2.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.3075457997932856
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(38);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("");
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Color color1 = jDayChooser0.weekdayForeground;
      SVGColorProfileElementBridge sVGColorProfileElementBridge1 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache1 = sVGColorProfileElementBridge0.cache;
      sVGColorProfileElementBridge1.cache.request("day");
      Color color2 = Color.DARK_GRAY;
      sVGColorProfileElementBridge0.cache.request("Center");
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.setForeground(color0);
      jDayChooser0.initDecorations();
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDay(2);
      jDayChooser0.setFocus();
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(2, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.240161993746947
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getPropertyChangeListeners();
      jDayChooser0.setFocus();
      jDayChooser0.getDay();
      jDayChooser0.isDecorationBordersVisible();
      ImageIcon imageIcon0 = MapNodePositionHolderBase.getMapLocationIcon();
      JButton jButton0 = new JButton("day", imageIcon0);
      imageIcon0.setDescription("Frame.title");
      ActionEvent actionEvent0 = new ActionEvent(jButton0, 289, "0", 0L, 289);
      KeyStroke.getKeyStroke("%`Z5gl");
      actionEvent0.setSource((Object) null);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1337055042791775
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getInputMethodListeners();
      jDayChooser0.grabFocus();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Center");
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.DefaultEditor jSpinner_DefaultEditor0 = new JSpinner.DefaultEditor(jSpinner0);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      jDayChooser0.setLayout(metalComboBoxUI_MetalComboBoxLayoutManager0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser0.getInputVerifier();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.setInputVerifier((InputVerifier) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1866881986404256
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.transferFocusBackward();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      jDesktopPane0.getSelectedFrame();
      ActionEvent actionEvent0 = new ActionEvent(jDesktopPane0, 34, "day", 90);
      JToolTip jToolTip0 = new JToolTip();
      TimeZone.getTimeZone(", mMapCenter=");
      jDayChooser0.getFont();
      KeyEvent keyEvent0 = new KeyEvent(jDesktopPane0, 90, 2147483647L, 2, 2369, 'i', 1);
      jDayChooser0.keyTyped(keyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2316628703320616
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createToolTip();
      jDayChooser0.createToolTip();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.FLOW_REGIONS;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, 1014, "x");
      jDayChooser0.setDoubleBuffered(true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)43;
      byteArray0[1] = (byte) (-82);
      byteArray0[2] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      java.sql.Date date0 = new java.sql.Date(900L);
      Date date1 = jDayChooser0.getMinSelectableDate();
      date0.after(date1);
      Time time0 = new Time((-1186L));
      jDayChooser0.setSelectableDateRange(date1, date0);
      JDayChooser jDayChooser1 = new JDayChooser((boolean) gVTAttributedCharacterIterator_TextAttribute0.OVERLINE_ON);
      Time time1 = new Time((long) gVTAttributedCharacterIterator_TextAttribute0.SMALL_CAPS);
      jDayChooser0.setMaxSelectableDate(time1);
      jDayChooser1.getMaxSelectableDate();
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.240976988208987
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1));
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      defaultTreeCellRenderer0.setComponentOrientation(componentOrientation0);
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setMaxDayCharacters((-1));
      defaultTreeCellRenderer0.resetKeyboardActions();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      SystemColor systemColor0 = SystemColor.menu;
      defaultTreeCellRenderer1.setTextSelectionColor(color0);
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer2.getTextNonSelectionColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      sVGColorProfileElementBridge0.getInstance();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("{}S0:Mwb (");
      Color color1 = Color.DARK_GRAY;
      namedProfileCache0.request("day");
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.setForeground(color1);
      jDayChooser0.initDecorations();
      jDayChooser0.setAlwaysFireDayProperty(true);
      jDayChooser0.setEnabled(false);
      jDayChooser0.setDay(262152);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.221703399175059
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1));
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      defaultTreeCellRenderer0.setComponentOrientation(componentOrientation0);
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      sVGColorProfileElementBridge0.getInstance();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      byte byte0 = (byte) (-31);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-31);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.254491685688934
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      defaultTreeCellRenderer0.setComponentOrientation(componentOrientation0);
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      sVGColorProfileElementBridge0.getInstance();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 4;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      Boolean.valueOf("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      java.sql.Date date0 = new java.sql.Date(2824L);
      Date date1 = jDayChooser0.getMinSelectableDate();
      date0.after(date1);
      Time time0 = new Time((-4725L));
      jDayChooser0.setSelectableDateRange(time0, date0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      Time time1 = new Time((-1L));
      jDayChooser1.setMaxSelectableDate(time1);
      jDayChooser1.getMaxSelectableDate();
      System.setCurrentTimeMillis(0);
      MockDate mockDate0 = new MockDate(0, (byte)100, (byte)100, (byte)100, (byte)100);
      Hashtable<AttributedCharacterIterator.Attribute, Object> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font("", 0, (byte) (-31));
      jDayChooser1.setFont(font0);
      assertEquals(14, jDayChooser1.getDay());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.206342421973086
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.enableInputMethods(true);
      InputEvent.getModifiersExText(1738);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2077), 1738, (-2077), 1738, 1738);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      jDayChooser0.setDecorationBordersVisible(true);
      Color color0 = defaultTreeCellRenderer0.getTextNonSelectionColor();
      jDayChooser0.setWeekdayForeground(color0);
      jDayChooser0.isDayBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.getMinSelectableDate();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuElement[] menuElementArray0 = new MenuElement[7];
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      menuElementArray0[1] = (MenuElement) null;
      menuElementArray0[2] = (MenuElement) null;
      menuElementArray0[3] = (MenuElement) null;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem("day", true);
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      menuElementArray0[5] = (MenuElement) null;
      menuElementArray0[6] = (MenuElement) null;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(defaultTreeCellRenderer0, 1738, (-2077), 90, 309, '<', menuElementArray0, menuSelectionManager0);
      assertTrue(menuKeyEvent0.isAltDown());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1286651860090515
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      jDayChooser0.getFont();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext styleContext1 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getInputAttributes();
      GapContent gapContent0 = new GapContent(3);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext1);
      Color color0 = Color.PINK;
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      JButton jButton0 = new JButton("day");
      jDayChooser0.setDay((-1620));
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      jDayChooser0.getFont();
      StyleContext styleContext0 = StyleContext.getDefaultStyleContext();
      StyleContext styleContext1 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      defaultStyledDocument0.setAsynchronousLoadPriority(3439);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getInputAttributes();
      GapContent gapContent0 = new GapContent(3);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext1);
      Color color0 = Color.PINK;
      jDayChooser0.setFocus();
      JButton jButton0 = new JButton("day");
      jDayChooser0.setDay(3);
      assertEquals(3, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay(37);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.286866085231869
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-1));
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      defaultTreeCellRenderer0.setComponentOrientation(componentOrientation0);
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      sVGColorProfileElementBridge0.getInstance();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("");
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) (-1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      byteArray0[1] = (byte) (-31);
      byteArray0[3] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      OsmTileSource.Maplint osmTileSource_Maplint0 = new OsmTileSource.Maplint();
      Tile tile0 = new Tile(osmTileSource_Maplint0, (-1145), 1193, 2215);
      memoryTileCache0.addTile(tile0);
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, (-1));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (byte) (-31), 3, 8847, (-1593), '9');
      KeyEvent keyEvent1 = new KeyEvent(defaultTreeCellRenderer0, 36, (byte)100, (byte) (-31), 36, 't');
      jDayChooser0.keyPressed(keyEvent1);
      boolean boolean0 = jDayChooser0.isDayBordersVisible();
      assertEquals(1, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = (-1);
      jDayChooser0.createToolTip();
      jDayChooser0.setDoubleBuffered(true);
      int int1 = 9;
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.3555604505235967
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      jDayChooser0.setDebugGraphicsOptions(1977);
      jDayChooser0.setMaxDayCharacters(100);
      boolean boolean0 = new Boolean("day");
      jDayChooser0.getDay();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      TMSTileSource tMSTileSource0 = new TMSTileSource("day", "accessories.plugins.time.JDayChooser", 398, 398);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      memoryTileCache0.getTile(tMSTileSource0, 3, 100, 3);
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 1355);
      jMapViewer0.getY();
      jMapViewer0.getHierarchyListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 22, 22, 40, '9');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSundayForeground();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.2412733785871195
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(true);
      jDayChooser0.setMonth(100);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setDebugGraphicsOptions(100);
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      ActionEvent actionEvent0 = new ActionEvent(jToolTip0, 100, "", 11);
      JDayChooser jDayChooser1 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser1.removeAncestorListener(ancestorListener0);
      TimeZone.getTimeZone("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 11);
      KeyEvent keyEvent0 = new KeyEvent(jMapViewer0, (-1593), 11, 8847, 8847, '9');
      KeyEvent keyEvent1 = new KeyEvent(jToolTip0, 4, 100, 148, 36, 'f');
      jDayChooser1.keyPressed(keyEvent1);
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.3259200978914443
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      jDayChooser0.setDebugGraphicsOptions(1977);
      jDayChooser0.setMaxDayCharacters(100);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDay();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      TMSTileSource tMSTileSource0 = new TMSTileSource("day", "accessories.plugins.time.JDayChooser", 398, 398);
      tMSTileSource0.getBaseUrl();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      memoryTileCache0.getTile(tMSTileSource0, 3, 100, 3);
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 430);
      jMapViewer0.getY();
      jMapViewer0.getHierarchyListeners();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 0, 22, 22, 40, '9');
      jDayChooser0.keyPressed(keyEvent0);
      assertEquals(21, jDayChooser0.getDay());
      
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1700419077878936
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      boolean boolean0 = false;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "jpegImage";
      stringArray0[4] = "day";
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.getMaxSelectableDate();
      int int0 = (-1132);
      jDayChooser0.setYear((-1132));
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      File file0 = MockFile.createTempFile("X|!DzI\"=", "m3g7V4`Lt7@'");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(file0, "day");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // day
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Graphics graphics0 = null;
      jDayChooser0.print((Graphics) null);
      int int0 = (-1538);
      jDayChooser0.drawDays();
      int int1 = 0;
      jDayChooser0.repaint((-1538), 2216, 0, 0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getMaxDayCharacters();
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(2216);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MockDate mockDate0 = new MockDate(41, 40, 2437, 1, 2);
      mockDate0.getTime();
      mockDate0.clone();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.241257433438431
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      jSpinner_NumberEditor0.getMouseMotionListeners();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      jDayChooser0.setLayout((LayoutManager) null);
      Locale locale0 = Locale.GERMAN;
      KeyEvent keyEvent0 = new KeyEvent(jSpinner_NumberEditor0, 29, (-1181L), 29, 29, 'L');
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.keyPressed(keyEvent0);
      // Undeclared exception!
      try { 
        jDayChooser1.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.205701626502847
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      boolean boolean0 = true;
      jDayChooser0.requestFocus(true);
      jDayChooser0.setMonth(100);
      jDayChooser0.getAncestorListeners();
      jDayChooser0.setDebugGraphicsOptions(100);
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      jDayChooser0.init();
      jDayChooser0.updateUI();
      jDayChooser0.setFocus();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.drawWeeks();
      jToolTip0.getComponent();
      jDayChooser0.initDecorations();
      JComponent.getDefaultLocale();
      jDayChooser0.setFocus();
      char char0 = 'h';
      int int0 = (-2817);
      KeyEvent keyEvent0 = null;
      try {
        keyEvent0 = new KeyEvent(jToolTip0, 100, (-1L), 1068, 7, 'h', (-2817));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // invalid keyLocation
         //
         verifyException("java.awt.event.KeyEvent", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0867876009366073
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFont();
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      jDayChooser0.createToolTip();
      jDayChooser0.updateUI();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(11, 797, 11, (-1760), 797, (-1760));
      mockGregorianCalendar0.roll(5, (-964));
      ActionEvent actionEvent0 = new ActionEvent(mockGregorianCalendar0, 11, "(IS.*a^~lv_x[Ud2D", 797);
      JDayChooser jDayChooser1 = new JDayChooser();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      
      jDayChooser0.createToolTip();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      TimeZone.getTimeZone("day");
      jDayChooser0.getFont();
      StyleContext.getDefaultStyleContext();
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getInputAttributes();
      TimeZone.getTimeZone("+");
      jDayChooser0.getFont();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      hashtable0.clear();
      BiConsumer<AttributedCharacterIterator.Attribute, Object> biConsumer0 = (BiConsumer<AttributedCharacterIterator.Attribute, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      JTextPane jTextPane0 = new JTextPane(defaultStyledDocument0);
      jTextPane0.getInputAttributes();
      GapContent gapContent0 = new GapContent(238);
      DefaultStyledDocument defaultStyledDocument1 = new DefaultStyledDocument(gapContent0, styleContext0);
      Color color0 = Color.PINK;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocus();
      JButton jButton0 = new JButton("day");
      assertFalse(jButton0.getIgnoreRepaint());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.firePropertyChange(")T^X/C#", (-5862.034F), (-5862.034F));
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.1070155606793213
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(2);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("");
      Color color0 = Color.DARK_GRAY;
      namedProfileCache0.request("day");
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 3;
      floatArray0[1] = (float) 1;
      floatArray0[2] = (float) 2;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)55;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.HORIZONTAL_ORIENTATION_ANGLE;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute0, (-2723), (String) null, (int) gVTAttributedCharacterIterator_TextAttribute0.UNDERLINE_ON);
      JToolTip jToolTip0 = new JToolTip();
      TimeZone timeZone0 = null;
      try {
        timeZone0 = new SimpleTimeZone(1, "day", (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_ISOLATED, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL, (-2723), 1, (byte)55, (byte)55, 1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start time -2723
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.169980761415707
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.grabFocus();
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.getDay();
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      TMSTileSource tMSTileSource0 = new TMSTileSource("21", "accessories.plugins.time.JDayChooser", (-1165), (-159));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      memoryTileCache0.getTile(tMSTileSource0, (-159), 20, (-2069));
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 46);
      jDayChooser0.setDecorationBackgroundVisible(false);
      jDayChooser0.setDayBordersVisible(true);
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      hashtable0.clear();
      BiConsumer<AttributedCharacterIterator.Attribute, Object> biConsumer0 = (BiConsumer<AttributedCharacterIterator.Attribute, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      hashtable0.forEach(biConsumer0);
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 238, 238, 0, 63741, 0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setMinSelectableDate(mockDate0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      int int0 = 1018;
      JHelpContentViewer jHelpContentViewer0 = new JHelpContentViewer();
      BasicContentViewerUI basicContentViewerUI0 = new BasicContentViewerUI(jHelpContentViewer0);
      basicContentViewerUI0.getPreferredSize(jHelpContentViewer0);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "%v");
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 1018, "", 1018);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getRolloverIcon();
      jDayChooser_DecoratorButton0.getInsets();
      jDayChooser_DecoratorButton0.isFocusable();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      // Undeclared exception!
      try { 
        defaultTreeCellRenderer0.setVerticalTextPosition(979);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // verticalTextPosition
         //
         verifyException("javax.swing.JLabel", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.169980761415708
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockGregorianCalendar mockGregorianCalendar0 = (MockGregorianCalendar)jDayChooser0.calendar;
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      int int0 = 2;
      jDayChooser0.addListeners(2);
      int int1 = (-1977);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-1977));
      focusEvent0.getOppositeComponent();
      focusEvent0.paramString();
      jDayChooser0.focusLost(focusEvent0);
      int int2 = 9660;
      Color color0 = new Color(9660);
      int int3 = (-3001);
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) 2;
      color0.getRGBComponents(floatArray0);
      floatArray0[1] = (-178.878F);
      try { 
        ICC_Profile.getInstance("org.apache.xpath.functions.FuncStartsWith");
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Cannot open file org.apache.xpath.functions.FuncStartsWith
         //
         verifyException("java.awt.color.ICC_Profile", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getFont();
      Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar> hashtable0 = new Hashtable<AttributedCharacterIterator.Attribute, MockGregorianCalendar>();
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      Font.getFont("day");
      Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashtable0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 238, 238, 0, 63741, 0);
      MenuSelectionManager menuSelectionManager0 = MenuSelectionManager.defaultManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 63741, 0, 0, 0, 'y', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyReleased(menuKeyEvent0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(false);
      HelpSet helpSet0 = null;
      String string0 = "[CompositeRule: LIGHTEN]";
      String string1 = "LIR#o ,KU2#S";
      try { 
        MockURL.URL("?= call ", "ca", 90, "LIR#o ,KU2#S");
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // unknown protocol: ?= call 
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.170887520497273
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus(true);
      jDayChooser0.setMonth(100);
      jDayChooser0.getAncestorListeners();
      JToolTip jToolTip0 = jDayChooser0.createToolTip();
      ActionEvent actionEvent0 = new ActionEvent(jToolTip0, 100, "", 11);
      JDayChooser jDayChooser1 = new JDayChooser();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser1.removeAncestorListener(ancestorListener0);
      TimeZone.getTimeZone("");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-51);
      byteArray0[1] = (byte)90;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MemoryTileCache memoryTileCache0 = new MemoryTileCache();
      JTable jTable0 = new JTable();
      Color color0 = jTable0.getSelectionForeground();
      jDayChooser0.setWeekdayForeground(color0);
      JMapViewer jMapViewer0 = new JMapViewer(memoryTileCache0, 11);
      KeyEvent keyEvent0 = new KeyEvent(jMapViewer0, (-1593), 11, 8847, 8847, '9');
      KeyEvent keyEvent1 = new KeyEvent(jToolTip0, 4, 100, 148, 36, 'f');
      jDayChooser1.setMonth(890);
      assertFalse(jDayChooser1.isWeekOfYearVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.24047483265583
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      defaultTreeCellRenderer0.setComponentOrientation(componentOrientation0);
      defaultTreeCellRenderer0.getTextNonSelectionColor();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      sVGColorProfileElementBridge0.getInstance();
      NamedProfileCache namedProfileCache0 = sVGColorProfileElementBridge0.cache;
      namedProfileCache0.request("");
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) (-1);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)100;
      JMapViewer jMapViewer0 = new JMapViewer((TileCache) null, 0);
      jMapViewer0.getY();
      JMapViewer jMapViewer1 = new JMapViewer();
      jMapViewer1.getHierarchyListeners();
      KeyEvent keyEvent0 = new KeyEvent(defaultTreeCellRenderer0, (-1211), (-2143L), 22, 0, 'q');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.getDayPanel();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2054857020763965
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.isRequestFocusEnabled();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      MetalComboBoxUI metalComboBoxUI0 = new MetalComboBoxUI();
      jSpinner_NumberEditor0.getMouseMotionListeners();
      MetalComboBoxUI.MetalComboBoxLayoutManager metalComboBoxUI_MetalComboBoxLayoutManager0 = metalComboBoxUI0.new MetalComboBoxLayoutManager();
      jDayChooser0.setLayout((LayoutManager) null);
      Locale locale0 = Locale.GERMAN;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.getLocale();
      jDayChooser0.isDecorationBordersVisible();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.createToolTip();
      AncestorListener ancestorListener0 = mock(AncestorListener.class, new ViolatedAssumptionAnswer());
      jDayChooser0.removeAncestorListener(ancestorListener0);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)StrokingTextPainter.FLOW_REGIONS;
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute1 = GVTAttributedCharacterIterator.TextAttribute.LINE_HEIGHT;
      ActionEvent actionEvent0 = new ActionEvent(gVTAttributedCharacterIterator_TextAttribute1, 1669, "");
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.batik.gvt.text.GVTAttributedCharacterIterator$TextAttribute cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.2316972201064456
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHierarchyListeners();
      jDayChooser0.updateUI();
      byte[] byteArray0 = new byte[5];
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(canvasGraphicsNode0, canvasGraphicsNode0);
      JComponent.setDefaultLocale((Locale) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      java.sql.Date date0 = new java.sql.Date(3861L);
      Date date1 = jDayChooser0.getMinSelectableDate();
      date0.after(date1);
      Time time0 = new Time(500L);
      jDayChooser0.setSelectableDateRange(time0, date0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      Time time1 = new Time((-1662L));
      jDayChooser0.setMaxSelectableDate(date0);
      jDayChooser0.getMaxSelectableDate();
      jDayChooser1.initDecorations();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.202177847398577
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setWeekOfYearVisible(true);
      jDayChooser0.transferFocusBackward();
      JDesktopPane jDesktopPane0 = new JDesktopPane();
      jDayChooser0.getVisibleRect();
      KeyEvent.getKeyModifiersText(37);
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setDayBordersVisible(false);
      assertFalse(jDayChooser0.isDayBordersVisible());
      
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setEnabled(true);
      Color color0 = Color.DARK_GRAY;
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3292389636837934
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyListener keyListener0 = AWTEventMulticaster.add((KeyListener) jDayChooser0, (KeyListener) jDayChooser0);
      jDayChooser0.addKeyListener(keyListener0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser0.setYearChooser((JYearChooser) null);
      jDayChooser0.getGraphics();
      jDayChooser0.maxSelectableDate = null;
      jDayChooser0.getWeekdayForeground();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getDecorationBackgroundColor();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMaxSelectableDate((Date) null);
      boolean boolean0 = jDayChooser1.isDecorationBordersVisible();
      assertFalse(boolean0);
      
      jDayChooser1.setMaxSelectableDate((Date) null);
      jDayChooser1.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
      assertEquals(14, jDayChooser1.getDay());
  }
}
