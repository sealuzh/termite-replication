/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 20:14:50 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.FilterOutputStream;
import java.io.PipedReader;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Properties;
import java.util.Vector;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.DynamicByteArrayOutputStream;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.iapi.util.JBitSet;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.BinaryRelationalOperatorNode;
import org.apache.derby.impl.sql.compile.FromList;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.GroupByList;
import org.apache.derby.impl.sql.compile.HalfOuterJoinNode;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.compile.IsNullNode;
import org.apache.derby.impl.sql.compile.PredicateList;
import org.apache.derby.impl.sql.compile.QueryTreeNode;
import org.apache.derby.impl.sql.compile.SelectNode;
import org.apache.derby.impl.sql.compile.SubqueryNode;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.Database;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.impl.jni.LocalGDSImpl;
import org.h2.engine.ConnectionInfo;
import org.h2.expression.Parameter;
import org.h2.jdbcx.JdbcDataSource;
import org.h2.value.ValueLong;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;
import org.postgresql.core.BaseConnection;
import org.postgresql.jdbc4.Jdbc4Clob;
import org.postgresql.jdbc4.Jdbc4Connection;
import org.postgresql.util.PSQLException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.026148876011415
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) null);
      constraintDescriptorList0.spliterator();
      Integer integer0 = RawTransaction.ABORT;
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema(")^e");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(")^e");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "X";
      stringArray0[1] = ")^e";
      stringArray0[2] = ")^e";
      stringArray0[3] = ")^e";
      stringArray0[4] = ".qOVb;'";
      stringArray0[5] = ")^e";
      stringArray0[6] = ")^e";
      stringArray0[7] = ")^e";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(")^e", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      defaultDBTable0.removeForeignKeyConstraint(dBForeignKeyConstraint0);
      DBDataType dBDataType0 = DBDataType.getInstance((-1784), ")^e");
      dBCatalog0.setDoc(")^e");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")^e", defaultDBTable0, dBDataType0, integer0);
      SQLUtil.substituteMarkers(")^e", ")^e", defaultDBTable0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(")^e");
      mockPrintWriter0.print('9');
      mockPrintWriter0.write(757);
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dBCatalog0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) dBCatalog0;
      mockPrintWriter0.format(")^e", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("X(9|Ts[Qzgq+R>", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      SQLUtil.mutatesDataOrStructure(")^e");
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("d4}9/HUCqqYf]\".");
      SelectNode selectNode0 = new SelectNode();
      FromVTI fromVTI0 = new FromVTI();
      assertEquals(0.0F, fromVTI0.loadFactor(), 0.01F);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, (String) null, basicUUID0, true);
      BasicUUID basicUUID1 = new BasicUUID("c013800d-00fb-2642-07ec-000000134f30");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DBCatalog dBCatalog0 = new DBCatalog("SYSFUN");
      dBCatalog0.getSchema("c013800d-00fb-2644-07ec-000000134f30");
      dBCatalog0.isIdentical((DBObject) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("80000000-00d2-b38f-4cda-000a0a412c00");
      dBCatalog0.toString();
      basicUUID0.toANSIidentifier();
      schemaDescriptor0.getDependableFinder(501);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "APP";
      schemaDescriptor0.setAuthorizationId("APP");
      stringArray0[1] = "";
      stringArray0[2] = "SYSCS_DIAG";
      stringArray0[0] = "SESSION";
      stringArray0[4] = "SESSION";
      basicUUID0.toANSIidentifier();
      dBCatalog0.setDoc("SYSPROC");
      schemaDescriptor0.getDependableFinder();
      stringArray0[5] = "c013800d-00fb-2646-07ec-000000134f30";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "SYSFUN", true, stringArray0);
      schemaDescriptor0.getDependableFinder();
      dBPrimaryKeyConstraint0.addColumnName("SYSCAT");
      dBPrimaryKeyConstraint0.setName("SYSPROC");
      dBPrimaryKeyConstraint0.setDoc("APP");
      schemaDescriptor0.setUUID(basicUUID1);
      dBPrimaryKeyConstraint0.toString();
      SQLUtil.isDDL("c013800d-00fb-2646-07ec-000000134f30");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(501);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dynamicByteArrayOutputStream0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      assertEquals("table", defaultDBTable0.getObjectType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.734566798128087
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+u.Q[;");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute8/j", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer.getInteger("");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("+u.Q[;", defaultDBTable0, 0, "execute8/j");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, 451, "");
      dBColumnArray0[5] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("*+e+*", defaultDBTable0, 0, "+u.Q[;");
      defaultDBColumn3.setVersionColumn(false);
      dBColumnArray0[6] = (DBColumn) defaultDBColumn3;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setNullable(false);
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      dBColumnArray0[7] = (DBColumn) defaultDBColumn4;
      DBColumn dBColumn0 = defaultDBTable0.getColumn((String) null);
      dBColumnArray0[8] = dBColumn0;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("execute8/j, execute8/j, execute8/j, execute8/j, +u.Q[;, null, *+e+*, , null", string0);
      
      String string1 = SQLUtil.renderColumn(dBColumnArray0[0]);
      assertEquals("execute8/j +U.Q[;(2) NOT NULL", string1);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType.getInstance(0, "+u.Q[;");
      Integer.getInteger("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+u.Q[;", defaultDBTable0, 0, "execute8/j");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, 451, "");
      dBColumnArray0[5] = (DBColumn) defaultDBColumn1;
      DBNotNullConstraint dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "execute8/j", true, "+u.Q[;");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBNotNullConstraint0, nameSpec0);
      assertEquals("+u.Q[; NOT NULL", string0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1375916250043898
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(742, ".,?");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XJ082.U", defaultDBTable0, dBDataType0, integer1);
      Integer.getInteger("setBlob(String, InputSream, long)");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("XuFJQ/xS=Kq7", defaultDBTable0, dBDataType0, (Integer) null);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("CREATIONTIMESTAMP", defaultDBTable0, (-480), "Unknown GDS type ");
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("SN5lhNDRX;OMVd", defaultDBTable0, 451, "XuFJQ/xS=Kq7");
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("", defaultDBTable0, 451, "bTHU");
      defaultDBColumn1.setVersionColumn(false);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      defaultDBColumn0.setNullable(false);
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("CREATIONTIMESTAMP", defaultDBTable0, dBDataType0, integer3, (Integer) null);
      defaultDBTable0.getColumn("CREATIONTIMESTAMP");
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn4;
      String string0 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StringReader stringReader0 = new StringReader("cannot ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-1165), (-4));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "- 0";
      stringArray0[1] = "cannot ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.typeAndName(dBPrimaryKeyConstraint0);
      InsertNode insertNode0 = new InsertNode();
      BinaryRelationalOperatorNode binaryRelationalOperatorNode0 = new BinaryRelationalOperatorNode();
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.4459311899497576
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", false, stringArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", dBTable0, 567, "");
      defaultDBColumn0.setTable(dBTable0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.mutatesDataOrStructure("create materialized viewselect");
      Random.setNextRandom(567);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0424194324533116
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      String string0 = "Unexpected code path";
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string1 = "*/";
      SQLUtil.normalize("*/", true);
      SQLUtil.mutatesDataOrStructure("~(dIt2F:ke&*&QWo:9");
      SQLUtil.isDML("*/");
      SQLUtil.normalize("alter indexdelete", false);
      SQLUtil.isQuery("*/");
      SQLUtil.mutatesStructure("alter indexdelete");
      SQLUtil.isQuery("alter indexdelete");
      Boolean.valueOf("alter indexdelete");
      SQLUtil.isDML("~(dIt2F:ke&*&QWo:9");
      Vector<Object> vector0 = new Vector<Object>();
      VersionNumber versionNumber0 = new VersionNumber(vector0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("+fx\"hO6HrI9$hOQ", "alter indexdelete", versionNumber0);
      String string2 = "j%T'GU2$I_h";
      defaultDatabase0.getTable("j%T'GU2$I_h", false);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("/*");
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      BasicUUID basicUUID0 = new BasicUUID((-38L), (-173L), 237);
      // Undeclared exception!
      SQLUtil.isDML("A~13gWK!~/*");
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer("execute>hw+#.eqz");
      SQLUtil.mutatesDataOrStructure("alter sessiontmqda~~?%un");
      PredicateList predicateList0 = new PredicateList();
      FromList fromList0 = new FromList();
      BinaryRelationalOperatorNode binaryRelationalOperatorNode0 = new BinaryRelationalOperatorNode();
      SubqueryNode subqueryNode0 = new SubqueryNode();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      assertFalse(genericDescriptorList0.getScanned());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.459562444957137
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.mutatesDataOrStructure("tmqda~~?%un");
      PredicateList predicateList0 = new PredicateList();
      FromList fromList0 = new FromList();
      PredicateList predicateList1 = new PredicateList();
      FormatableProperties formatableProperties0 = new FormatableProperties();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("tmqda~~?%un", dBCatalog0);
      dBSchema0.getTable("tmqda~~?%un");
      DBDataType dBDataType0 = DBDataType.getInstance(3, "1EuUfus2(]fa.JO7J6W");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("tmqda~~?%un", (DBTable) null, dBDataType0, integer0, (Integer) 3);
      StringBuilder stringBuilder0 = new StringBuilder(" ADD ");
      char[] charArray0 = new char[9];
      charArray0[0] = '<';
      charArray0[1] = '>';
      charArray0[2] = 'c';
      Integer.min((-2176), 1765);
      charArray0[3] = 'i';
      charArray0[4] = 'T';
      charArray0[5] = 'w';
      charArray0[6] = '+';
      charArray0[7] = 'm';
      charArray0[8] = '+';
      StringBuilder stringBuilder1 = stringBuilder0.insert(1, charArray0, 0, 1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder1);
      assertEquals(" <ADD 1EUUFUS2(]FA.JO7J6W(2,3)", stringBuilder0.toString());
      assertEquals(" <ADD 1EUUFUS2(]FA.JO7J6W(2,3)", stringBuilder1.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "S)Ya*YmYV4<";
      DBSequence dBSequence0 = new DBSequence("S)Ya*YmYV4<", "e(|cd", "S)Ya*YmYV4<");
      Boolean boolean0 = new Boolean(";");
      dBSequence0.isCycle();
      Boolean.logicalAnd(false, true);
      dBSequence0.setCycle((Boolean) null);
      StringBuilder stringBuilder0 = new StringBuilder(173);
      DBDataType dBDataType0 = DBDataType.getInstance((-1860), "|JlU<7");
      Integer integer0 = new Integer(173);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";", defaultDBTable0, dBDataType0, integer0);
      Integer.getInteger("S)Ya*YmYV4<", 20000);
      defaultDBColumn0.isIdentical(dBSequence0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.4662665178647387
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("UNIQUE ", 4);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("tmqda~~?%un");
      assertNull(boolean0);
      
      PredicateList predicateList0 = new PredicateList();
      GroupByList groupByList0 = new GroupByList();
      FromList fromList0 = new FromList();
      BinaryRelationalOperatorNode binaryRelationalOperatorNode0 = new BinaryRelationalOperatorNode();
      PredicateList predicateList1 = new PredicateList();
      SubqueryNode subqueryNode0 = new SubqueryNode();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      String string0 = SQLUtil.renderValue(groupByList0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.7046360973492382
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      String string0 = "\"}dq";
      SQLUtil.normalize("\"}dq", false);
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.6152204716648386
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBSchema0.toString();
      ArrayList<DBSchema> arrayList0 = new ArrayList<DBSchema>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename", dBSchema0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      TableContainer tableContainer0 = new TableContainer((String) null);
      DBSchema dBSchema1 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema1);
      Integer integer1 = RawTransaction.ABORT;
      SQLUtil.mutatesDataOrStructure("ALTkR TigBLE ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kove ";
      dBSchema0.toString();
      SQLUtil.join((String) null, "kove ", stringArray0, "rename", "rename", stringArray0);
      SQLUtil.isQuery("select into");
      SQLUtil.mutatesStructure("drop tablenclob");
      SQLUtil.isProcedureCall("ALTkR TigBLE ");
      String string0 = SQLUtil.renderValue(defaultDBTable1);
      assertNull(string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.217276179487171
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "org.apache.derby.impl.store.raw.data.CompressSpacePageOperation";
      stringArray0[1] = "alter session";
      stringArray0[3] = "alter session";
      stringArray0[4] = "alter session";
      stringArray0[5] = "org.apache.derby.impl.store.raw.data.CompressSpacePageOperation";
      stringArray0[6] = "alter session";
      stringArray0[7] = "alter session";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "org.apache.derby.impl.store.raw.data.CompressSpacePageOperation", false, stringArray0);
      dBUniqueConstraint0.setName("org.apache.derby.impl.store.raw.data.CompressSpacePageOperation");
      dBUniqueConstraint0.setDoc("alter session");
      dBUniqueConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("alter session");
      defaultDBTable0.getIndexes();
      SQLUtil.normalize("org.apache.derby.impl.store.raw.data.CompressSpacePageOperation", true);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "org.apache.derby.impl.store.raw.data.CompressSpacePageOperation");
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[2], true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBPrimaryKeyConstraint0.setName("org.apache.derby.impl.store.raw.data.CompressSpacePageOperation");
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("org.apache.derby.impl.store.raw.data.CompressSpacePageOperationCONSTRAINT org.apache.derby.impl.store.raw.data.CompressSpacePageOperation ", stringBuilder0.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.trimToSize();
      StringBuffer stringBuffer1 = new StringBuffer();
      stringBuffer0.ensureCapacity(403);
      stringBuffer0.trimToSize();
      SQLUtil.addOptionalCondition("LTP$", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("- (mc],X");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "LTP$";
      stringArray0[1] = "LTP$";
      stringArray0[2] = "LTP$";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) "- (mc],X";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(defaultDBTable0, stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.3487381637164724
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      dBSchema0.toString();
      dBCatalog0.getComponents();
      dBSchema0.getTriggers();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rename", dBSchema0);
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBSchema dBSchema1 = new DBSchema((String) null);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null, dBSchema1);
      Integer integer1 = RawTransaction.ABORT;
      String string0 = SQLUtil.normalize("ALTER TABLE ", true);
      assertEquals("ALTER TABLE", string0);
      
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("~(dIt2F:ke&*&QWo:9");
      assertNull(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "kove ";
      String string1 = SQLUtil.join((String) null, "kove ", stringArray0, "~(dIt2F:ke&*&QWo:9", "rename", stringArray0);
      assertEquals("~(dIt2F:ke&*&QWo:9 as rename on kove .kove  = rename.kove ", string1);
      
      boolean boolean1 = SQLUtil.isQuery("select into");
      Boolean boolean2 = SQLUtil.mutatesStructure("drop tablenclob");
      assertTrue(boolean2);
      
      boolean boolean3 = SQLUtil.isProcedureCall("ALTER TABLE ");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.355785150714608
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Predicate<String> predicate0 = Predicate.isEqual((Object) pipedReader0);
      Predicate<String> predicate1 = predicate0.negate();
      predicate1.negate();
      predicate0.test("setYlob(String, In|tSrea[, l$ng)");
      Predicate<String> predicate2 = predicate1.negate();
      predicate0.negate();
      predicate0.or(predicate1);
      Predicate<String> predicate3 = predicate0.and(predicate2);
      Predicate<String> predicate4 = predicate3.negate();
      Predicate<String> predicate5 = predicate0.or(predicate4);
      predicate5.negate();
      predicate2.or(predicate5);
      Predicate<String> predicate6 = predicate2.negate();
      predicate6.test("J$T<1:1]+e%");
      predicate0.negate();
      predicate2.negate();
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      Boolean boolean1 = new Boolean("Y$h8QDP4U5kLP72)s");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.wordChars(232, 232);
      Parameter parameter0 = new Parameter(232);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) parameter0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      predicate3.and(predicate1);
      Parameter parameter1 = new Parameter(4);
      Predicate<String> predicate4 = Predicate.isEqual((Object) parameter1);
      Predicate<String> predicate5 = predicate4.negate();
      Predicate<String> predicate6 = predicate5.or(predicate1);
      Predicate<String> predicate7 = Predicate.isEqual((Object) "alter materialized view");
      predicate4.test("alter materialized view");
      Predicate<String> predicate8 = predicate6.or(predicate4);
      predicate6.test("beginNestedTransaction");
      predicate8.or(predicate0);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) ":Q%vf@]*?a");
      predicate7.or(predicate9);
      predicate6.or(predicate5);
      Object object0 = new Object();
      predicate7.test("String is supposed to case-insensitively end with '");
      Predicate<String> predicate10 = Predicate.isEqual(object0);
      Predicate<String> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = Predicate.isEqual((Object) predicate11);
      Predicate<String> predicate13 = predicate6.or(predicate12);
      predicate13.negate();
      predicate13.or(predicate2);
      Predicate<String> predicate14 = predicate11.negate();
      predicate7.or(predicate14);
      boolean boolean0 = SQLUtil.isQuery("select");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSequence dBSequence0 = new DBSequence("S)Ya*YmYV4<", "e(|cd", "S)Ya*YmYV4<");
      Boolean boolean0 = new Boolean(";");
      dBSequence0.isCycle();
      Boolean.logicalAnd(false, true);
      dBSequence0.setCycle((Boolean) null);
      StringBuilder stringBuilder0 = new StringBuilder(173);
      DBDataType dBDataType0 = DBDataType.getInstance((-1860), "|JlU<7");
      Integer integer0 = new Integer(173);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(";", defaultDBTable0, dBDataType0, integer0);
      Integer.getInteger("S)Ya*YmYV4<", 20000);
      defaultDBColumn0.isIdentical(dBSequence0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      SQLUtil.renderColumn(defaultDBColumn0);
      SQLUtil.addRequiredCondition("S)Ya*YmYV4<", stringBuilder0);
      GroupByList groupByList0 = new GroupByList();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.832920911191322
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSequences();
      DBSchema dBSchema0 = new DBSchema("create materialized view.l92d`]s`b", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[5] = "gRA`}\"";
      stringArray0[1] = "7f00[:Yr";
      stringArray0[2] = "gRA`}\"";
      stringArray0[3] = "create materialized view.l92d`]s`b";
      stringArray0[4] = "7f00[:Yr";
      stringArray0[5] = "7f00[:Yr";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "alter session", false, stringArray0);
      dBUniqueConstraint0.setDoc("7f00[:Yr");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, 7f00[:Yr, gRA`}\", create materialized view.l92d`]s`b, 7f00[:Yr, 7f00[:Yr, )", string0);
      
      dBUniqueConstraint0.setDoc("alter session");
      dBCatalog0.getTables();
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string1 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE (, 7f00[:Yr, gRA`}\", create materialized view.l92d`]s`b, 7f00[:Yr, 7f00[:Yr, )", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.832503992791514
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "cannot ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "cannot ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesStructure("Not all parameters set.");
      SQLUtil.isQuery("**i@awe6.pPa/wN");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("unable ");
      assertNull(boolean0);
      
      ErrorMessages errorMessages0 = new ErrorMessages();
      MockURL.getFileExample();
      GroupByList groupByList0 = new GroupByList();
      SQLUtil.mutatesStructure("cannot ");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("unable ", true, "wTc,", "cannot ");
      CompositeDBObject<DBUniqueConstraint> compositeDBObject0 = (CompositeDBObject<DBUniqueConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBCheckConstraint0.setOwner(compositeDBObject0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"unable \" CHECK cannot ", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7598542258336674
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";=a=c*yxbr$";
      stringArray0[1] = ";=a=c*yxbr$";
      stringArray0[2] = ";=a=c*yxbr$";
      stringArray0[3] = ";=a=c*yxbr$";
      stringArray0[6] = ";=a=c*yxbr$";
      stringArray0[8] = ";=a=c*yxbr$";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("call~(dit2f:ke&*&qwo:9");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: call~(dit2f:ke&*&qwo:9
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[3];
      String string0 = "eecdely6e/te";
      stringArray0[0] = "eecdely6e/te";
      stringArray0[1] = "null +u.q[j;(0) nul";
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.apache.derby.impl.sql.execute.SetRoleConstantAction", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      stringArray0[2] = "null +u.q[j;(0) nul";
      SQLUtil.renderColumnNames(stringArray0);
      SQLUtil.parseColumnTypeAndSize("null +u.q[j;(0) nul");
      IsNullNode isNullNode0 = new IsNullNode();
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      JBitSet jBitSet0 = new JBitSet(6);
      JBitSet jBitSet1 = null;
      HalfOuterJoinNode halfOuterJoinNode1 = new HalfOuterJoinNode();
      // Undeclared exception!
      try { 
        halfOuterJoinNode1.modifyAccessPath((JBitSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.TableOperatorNode", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      String string0 = "delete";
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)123;
      byteArray0[1] = (byte)61;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[3] = (byte)58;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte) (-120);
      String string1 = "/org/apache/derby/loc/m";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("delete", (String[]) null, "delete", "/org/apache/derby/loc/m", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSequences();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("alter materialized viewalter matrilizbd vewtqda~~?%na!`b", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DBSchema dBSchema0 = new DBSchema("create materialized view.l92d`]s`b", dBCatalog0);
      TimeUnit timeUnit0 = TimeUnit.MICROSECONDS;
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll((-1346L), timeUnit0);
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.spliterator();
      Boolean boolean0 = SQLUtil.mutatesStructure("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7911998103932196
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+u.Q[J;");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")Gku&4-h[Q>rl", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("+u.Q[J;", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer.getInteger("UNION JOIN");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", defaultDBTable0, 0, "u}OZ:-j>/)V{5R");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn((String) null, defaultDBTable0, 451, "");
      dBColumnArray0[5] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("*+e+*", defaultDBTable0, 0, "+u.Q[J;");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn5;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      dBColumnArray0[7] = (DBColumn) defaultDBColumn6;
      DBColumn dBColumn0 = defaultDBTable0.getColumn((String) null);
      dBColumnArray0[8] = dBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "+u.Q[J;", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(451);
      StringBuilder stringBuilder1 = stringBuilder0.append((double) 451);
      StringBuilder stringBuilder2 = stringBuilder1.append((CharSequence) stringBuilder0);
      StringBuilder stringBuilder3 = stringBuilder2.insert(0, "-N6@~5H]Y92q");
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder3);
      assertEquals("-N6@~5H]Y92q451.0451.0CONSTRAINT +u.Q[J; ", stringBuilder3.toString());
      assertEquals("-N6@~5H]Y92q451.0451.0CONSTRAINT +u.Q[J; ", stringBuilder0.toString());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) null);
      constraintDescriptorList0.spliterator();
      UnaryOperator<DBNotNullConstraint> unaryOperator0 = UnaryOperator.identity();
      constraintDescriptorList0.replaceAll(unaryOperator0);
      constraintDescriptorList0.setScanned(false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "getRowLocationTemplate";
      stringArray0[1] = "getRowLocationTemplate";
      stringArray0[2] = "alter table";
      stringArray0[3] = "getRowLocationTemplate";
      stringArray0[4] = "getRowLocationTemplate";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "getRowLocationTemplate", false, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder(47);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("", stringBuilder0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder2.insert(47, 47);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 47
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.833377718721871
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) null);
      constraintDescriptorList0.spliterator();
      UnaryOperator.identity();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.compareUnsigned(7, (-1841582983));
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("Y)^e ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Y)^e ");
      DBDataType.getInstance((-1784), "Y)^e ");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Y)^e ", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint1, nameSpec0);
      dBPrimaryKeyConstraint0.setName("ApkJH");
      StringBuilder stringBuilder0 = null;
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      boolean boolean0 = new Boolean("36ZLOB");
      dBCatalog0.toString();
      List<DBSequence> list0 = new Vector<DBSequence>();
      dBCatalog0.getTables();
      dBCatalog0.getSchema("defaul");
      dBCatalog0.equals((Object) null);
      Random.setNextRandom(90);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("defaul", (DBSchema) null);
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = "36ZLOB";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "36ZLOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      DBNotNullConstraint dBNotNullConstraint0 = null;
      try {
        dBNotNullConstraint0 = new DBNotNullConstraint(defaultDBTable0, "", true, " = ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column ' = ' not found in table 'defaul'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.1183595136789246
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "'q0yO+2b ]%ZBE9A";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'q0yO+2b ]%ZBE9A";
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.append('Q');
      SQLUtil.addOptionalCondition("'q0yO+2b ]%ZBE9A", stringBuilder0);
      String string1 = "Amz/:f u|{@zJUM&(,7";
      SQLUtil.renderColumnListWithTableName("Amz/:f u|{@zJUM&(,7", stringArray0);
      SQLUtil.normalize("Amz/:f u|{@zJUM&(,7", true);
      SQLUtil.addRequiredCondition("Amz / : f u | { @ zJUM & (, 7", stringBuilder0);
      FromVTI fromVTI0 = new FromVTI();
      fromVTI0.getProperties();
      String string2 = "Index does not cover query - cost including base row fetch is: ";
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("Amz/:f u|{@zJUM&(,7.'q0yO+2b ]%ZBE9A, Amz/:f u|{@zJUM&(,7.null, Amz/:f u|{@zJUM&(,7.null, Amz/:f u|{@zJUM&(,7.null", 24, "Index does not cover query - cost including base row fetch is: ", "truncatedelete", (Properties) null, "Amz/:f u|{@zJUM&(,7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.postgresql.jdbc2.AbstractJdbc2Connection", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.7154069282827336
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+u.Q[J;");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")Gku&4-h[Q>rl", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer.getInteger("+u.Q[J;");
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("create unique index", defaultDBTable0, dBDataType0, (Integer) null);
      String string0 = SQLUtil.renderColumn(defaultDBColumn1);
      assertEquals("null +U.Q[J;(0) NULL", string0);
      
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(");
      PrintWriter printWriter0 = mockPrintWriter0.printf("execn_76{1yc2&rb9>bqg", (Object[]) dBColumnArray0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("null +U.Q[J;(0) NULL");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = null;
      stringArray0[1] = "+u.Q[J;";
      stringArray0[2] = "";
      stringArray0[3] = "+u.Q[J;";
      stringArray0[4] = "";
      stringArray0[5] = "null +U.Q[J;(0) NULL";
      String string1 = SQLUtil.join("execn_76{1yc2&rb9>bqg", ")Gku&4-h[Q>rl", stringArray0, "Zg[x:mxPV9i", "", stringArray0);
      assertEquals("execn_76{1yc2&rb9>bqg join Zg[x:mxPV9i as  on )Gku&4-h[Q>rl.null = .null and )Gku&4-h[Q>rl.+u.Q[J; = .+u.Q[J; and )Gku&4-h[Q>rl. = . and )Gku&4-h[Q>rl.+u.Q[J; = .+u.Q[J; and )Gku&4-h[Q>rl. = . and )Gku&4-h[Q>rl.null +U.Q[J;(0) NULL = .null +U.Q[J;(0) NULL", string1);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7465208925003344
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesStructure("xy|)cmG4o{.L");
      assertFalse(boolean0);
      
      boolean boolean1 = SQLUtil.isProcedureCall("execute");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.toString();
      dBCatalog0.setDoc("MD'");
      dBCatalog0.getTables();
      dBCatalog0.getSchema(">ffUcf8'nhGj#");
      dBCatalog0.equals("MD'");
      String string0 = SQLUtil.normalize(";*{yJc[\"2^g=3UGgDq)", false);
      assertEquals("; * { yJc [ \"2^g=3UGgDq)\"", string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog(")Gku&4-h[Q>rl");
      Object object0 = new Object();
      dBCatalog0.equals((Object) null);
      dBCatalog0.getSchemas();
      DBSchema dBSchema0 = new DBSchema(")Gku&4-h[Q>rl", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("update", dBSchema0);
      SQLUtil.ownerDotComponent(defaultDBTable0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      System.setCurrentTimeMillis(20L);
      System.setCurrentTimeMillis(20L);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      SQLUtil.normalize(".t", false);
      String string0 = "d[~elete";
      ConnectionInfo connectionInfo0 = new ConnectionInfo("d[~elete");
      connectionInfo0.setBaseDir(".t");
      Charset charset0 = Charset.defaultCharset();
      // Undeclared exception!
      try { 
        charset0.encode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String string0 = "(_pJx";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("(_pJx", defaultDBTable0, (-1971805720), "(_pJx");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (_pJx
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String string0 = "(_hpp7x";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(_hpp7x");
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("|WM:ZDed2G(~}D&`T", defaultDBTable0, (-1971805759), "setBlob(String, InputSream, long)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"String\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8225297609179347
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "}4zKZ'U0B";
      stringArray0[2] = "}4zKZ'U0B";
      SQLUtil.join("}4zKZ'U0B", "}4zKZ'U0B", stringArray0, "}4zKZ'U0B", "}4zKZ'U0B", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnNames(stringArray0);
      DBCatalog dBCatalog0 = new DBCatalog((String) null, (Database) null);
      DBSchema dBSchema0 = new DBSchema((String) null, dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      defaultDBTable0.getIndex((String) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      Object object0 = new Object();
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.mutatesDataOrStructure("}4zKZ'U0B join }4zKZ'U0B as }4zKZ'U0B on }4zKZ'U0B.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and }4zKZ'U0B.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and }4zKZ'U0B.}4zKZ'U0B = }4zKZ'U0B.}4zKZ'U0B and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null and }4zKZ'U0B.null = }4zKZ'U0B.null");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "");
      StringBuilder stringBuilder1 = stringBuilder0.append(0.0);
      stringBuilder1.reverse();
      char[] charArray0 = new char[3];
      char char0 = 'c';
      // Undeclared exception!
      try { 
        stringBuilder1.insert((-1985933388), charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1985933388
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      String string0 = "exec";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("exec", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.3522309097786613
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("SELECT * FROM ");
      byte[] byteArray0 = new byte[3];
      byteArray0[1] = (byte)0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "drop indexc013800d-00fb-2646-07ec-000000134f30");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "execute");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Boolean.valueOf("cannot ");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "**i@awe6.pPa/wN");
      SQLUtil.mutatesDataOrStructure("execute");
      ErrorMessages errorMessages0 = new ErrorMessages();
      MockURL.getFileExample();
      GroupByList groupByList0 = new GroupByList();
      assertEquals(2, QueryTreeNode.AUTOINCREMENT_IS_AUTOINCREMENT_INDEX);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID((-173L), 1L, (-1840700267));
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, "Py03U,", "TRANSACTION_REPEATABLE_READ", basicUUID0, true);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "SYSSTAT", schemaDescriptor0, (-1840700267), true, true);
      ConstraintDescriptorList constraintDescriptorList0 = tableDescriptor0.getConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      DataDictionaryImpl dataDictionaryImpl1 = new DataDictionaryImpl();
      ConstraintDescriptorList constraintDescriptorList2 = dataDictionaryImpl1.getActiveConstraintDescriptors(constraintDescriptorList1);
      constraintDescriptorList0.add((Object) null);
      constraintDescriptorList2.setScanned(false);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("");
      dBCatalog0.removeSchema(dBSchema0);
      dBCatalog0.getSequences();
      DBSchema dBSchema1 = new DBSchema("gRA`}\"", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray1 = new String[6];
      stringArray1[0] = "";
      stringArray1[1] = "42X84";
      stringArray1[2] = "gRA`}\"";
      stringArray1[3] = "";
      stringArray1[4] = "{KAK+%n'B\"_VxB-=";
      SQLUtil.innerJoin("", stringArray1, "token 132", "#2|8QR@,,{GW=", stringArray1);
      DBCatalog dBCatalog1 = new DBCatalog();
      DBSequence dBSequence0 = new DBSequence("42X84", (String) null, "3G($cW3gg@IWg1l&");
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin(" ", stringArray1, "", "42X84", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "}4zKZ'U0B";
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.wordChars((-555248365), (-555248365));
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.809237584055547
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete");
      VersionNumber.valueOf("delete");
      String string0 = "NHo,B(M3o";
      StringReader stringReader0 = new StringReader("NHo,B(M3o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("delete");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      dBPrimaryKeyConstraint0.setName(" hq&G`V;MNQ~");
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null, nameSpec1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.5732733133661547
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(_hpp7x");
      Predicate<String> predicate0 = Predicate.isEqual((Object) "(_hpp7x");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) predicate0);
      predicate0.and(predicate1);
      Predicate<String> predicate2 = predicate0.negate();
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = predicate1.negate();
      predicate5.or(predicate1);
      Predicate<String> predicate6 = predicate4.and(predicate5);
      Predicate<String> predicate7 = predicate0.or(predicate6);
      predicate7.and(predicate5);
      Predicate<String> predicate8 = predicate4.negate();
      predicate1.negate();
      predicate8.test("--");
      predicate7.negate();
      predicate3.negate();
      predicate0.negate();
      predicate3.negate();
      SQLUtil.mutatesStructure("\u0001\u00F1");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Cannot set transaction parameters when transaction is already started.");
      assertNull(boolean0);
      
      SQLUtil.isDML("\u0001\u00F1");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Q];", false, (String[]) null);
      String string0 = SQLUtil.constraintName(dBUniqueConstraint0);
      assertEquals("CONSTRAINT Q]; ", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "br;hfhG0K_crnC?)|";
      stringArray0[1] = "alter materialized view";
      stringArray0[2] = "alter table";
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(br;hfhG0K_crnC?)|, alter materialized view, alter table)", string0);
      
      TableContainer tableContainer0 = new TableContainer("SYSCS_BULK_INSERT");
      tableContainer0.getTable("alter materialized view");
      DBDataType dBDataType0 = DBDataType.getInstance(668, "(br;hfhG0K_crnC?)|, alter materialized view, alter table)");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized view", (DBTable) null, dBDataType0, integer0, integer1);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("(BR;HFHG0K_CRNC?)|, ALTER MATERIALIZED VIEW, ALTER TABLE)(2,0)", string1);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "PageCache");
      DBDataType dBDataType0 = DBDataType.getInstance(4, "C0i05");
      dBDataType0.isNumber();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xy|).cmG4o{.L", (DBTable) null, dBDataType0, integer0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("8Z4c^Cj>Ee(S i3}!", (DBTable) null, (-200706568), "C0i05");
      DBSequence dBSequence0 = new DBSequence("create unique index", "NCLOB", "alter indexalter materialized viewtmqda~~?%una!`bg");
      DBSchema dBSchema0 = new DBSchema("create unique index");
      dBSchema0.addSequence(dBSequence0);
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn1);
      assertEquals("C0I05", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchemas();
      dBCatalog0.getSequences();
      dBCatalog0.toString();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.289514255849282
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "}4zKZ'U0B";
      stringArray0[2] = "}4zKZ'U0B";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("}4zKZ'U0B");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("}4zKZ'U0B", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.columnReferencedBy("}4zKZ'U0B", true);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) defaultDBTable0;
      objectArray0[1] = (Object) "}4zKZ'U0B";
      objectArray0[2] = (Object) "}4zKZ'U0B";
      objectArray0[3] = (Object) nameSpec0;
      objectArray0[4] = (Object) "CONSTRAINT }4zKZ'U0B FOREIGN KEY (}4zKZ'U0B, }4zKZ'U0B, }4zKZ'U0B, , , , , , , , , , , , ) REFERENCES }4zKZ'U0B(}4zKZ'U0B, }4zKZ'U0B, }4zKZ'U0B, , , , , , , , , , , , )";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.6297682098224366
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLUtil.isQuery("");
      Object object0 = new Object();
      String string0 = SQLUtil.substituteMarkers("", "SELECT * FROM ", "");
      assertEquals("", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SELECT * FROM ");
      PrintWriter printWriter0 = mockPrintWriter0.printf("n/a", (Object[]) null);
      DBSchema dBSchema0 = new DBSchema("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("12azi2z1,:n", dBSchema0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure(" (");
      assertNull(boolean0);
      
      Boolean boolean1 = new Boolean("alter indexselect * from");
      SQLUtil.isQuery("12azi2z1,:n");
      Boolean boolean2 = new Boolean(false);
      boolean boolean3 = SQLUtil.isProcedureCall(" g8%C{,bS");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.794666776242871
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) null);
      constraintDescriptorList0.spliterator();
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      Integer.compareUnsigned(7, (-1841582983));
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.getSchema("Y)^e ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Y)^e ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1784), "Y)^e ");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y)^e ", defaultDBTable0, dBDataType0, integer0);
      String string0 = SQLUtil.substituteMarkers("Y)^e ", "Y)^e ", defaultDBTable0);
      assertEquals("Y)^e ", string0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Y)^e ");
      mockPrintWriter0.print('9');
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) dBCatalog0;
      Object object0 = new Object();
      objectArray0[1] = object0;
      objectArray0[2] = (Object) dBCatalog0;
      mockPrintWriter0.format("Y)^e ", objectArray0);
      PrintWriter printWriter0 = mockPrintWriter0.printf("X(9|Ts[Qzgq+R>", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, printWriter0);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("Y)^e ");
      assertNull(boolean0);
      
      String[] stringArray0 = new String[6];
      stringArray0[1] = "Y)^e ";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean1 = SQLUtil.isProcedureCall("Y)^e ");
      SQLUtil.mutatesStructure("X(9|Ts[Qzgq+R>");
      SQLUtil.isQuery("alter index");
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("create table");
      assertFalse(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      SQLUtil.isDDL("Y)^e ");
      boolean boolean3 = SQLUtil.isDML("Y)^e ");
      assertFalse(boolean3);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      System.setCurrentTimeMillis((-4062L));
      Object object0 = new Object();
      SQLUtil.substituteMarkers("", "}4zKZ'U0B", object0);
      DBSequence dBSequence0 = new DBSequence("Ch0[", "}4zKZ'U0B", "}4zKZ'U0B");
      System.setCurrentTimeMillis((-1968526675));
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1663838187821938
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSequence dBSequence0 = new DBSequence("S)Ya*YmYV4<", "e(|cd", "S)Ya*YmYV4<");
      Boolean boolean0 = new Boolean(";");
      dBSequence0.isCycle();
      Boolean.logicalAnd(false, true);
      dBSequence0.setCycle((Boolean) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique indexdelete", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBPrimaryKeyConstraint1.toString();
      dBPrimaryKeyConstraint1.setName("S)Ya*YmYV4<");
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null, nameSpec1);
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec2);
      NameSpec nameSpec3 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec3);
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID((-38L), (-173L), 185);
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, (String) null, basicUUID0, true);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "SESSION", schemaDescriptor0, 185, true, false);
      ConstraintDescriptorList constraintDescriptorList0 = tableDescriptor0.getConstraintDescriptorList();
      constraintDescriptorList0.setScanned(false);
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      ConstraintDescriptorList constraintDescriptorList2 = new ConstraintDescriptorList();
      constraintDescriptorList2.retainAll(constraintDescriptorList1);
      constraintDescriptorList0.add((Object) schemaDescriptor0);
      constraintDescriptorList2.setScanned(true);
      constraintDescriptorList1.containsAll(constraintDescriptorList2);
      basicUUID0.toHexString();
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, (String) null, basicUUID0, true);
      TableDescriptor tableDescriptor0 = new TableDescriptor(dataDictionaryImpl0, "SESSION", schemaDescriptor0, 185, false, false);
      basicUUID0.toString();
      ConstraintDescriptorList constraintDescriptorList0 = tableDescriptor0.getConstraintDescriptorList();
      constraintDescriptorList0.add((Object) schemaDescriptor0);
      constraintDescriptorList0.add((Object) tableDescriptor0);
      constraintDescriptorList0.setScanned(false);
      ConstraintDescriptorList constraintDescriptorList1 = dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      constraintDescriptorList1.stream();
      ConstraintDescriptorList constraintDescriptorList2 = new ConstraintDescriptorList();
      constraintDescriptorList1.add((Object) tableDescriptor0);
      constraintDescriptorList2.retainAll(constraintDescriptorList1);
      constraintDescriptorList2.addAll((Collection) constraintDescriptorList0);
      constraintDescriptorList0.add((Object) schemaDescriptor0);
      schemaDescriptor0.getDependableFinder();
      constraintDescriptorList2.stream();
      constraintDescriptorList2.setScanned(true);
      constraintDescriptorList1.containsAll(constraintDescriptorList2);
      basicUUID0.toHexString();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.derby.iapi.sql.dictionary.SchemaDescriptor cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID(16L, (-1021L), 393216);
      basicUUID0.toHexString();
      BasicUUID basicUUID1 = new BasicUUID("alter table");
      basicUUID0.toANSIidentifier();
      basicUUID1.toString();
      basicUUID1.cloneMe();
      basicUUID0.toANSIidentifier();
      basicUUID1.toANSIidentifier();
      basicUUID1.toString();
      basicUUID1.toANSIidentifier();
      basicUUID1.toHexString();
      basicUUID1.cloneMe();
      basicUUID1.toString();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("alter table", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("CLfeFb&i");
      String string0 = null;
      SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      VersionNumber.valueOf("CLfeFb&i");
      Jdbc4Clob jdbc4Clob0 = null;
      try {
        jdbc4Clob0 = new Jdbc4Clob((BaseConnection) null, 0L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.postgresql.jdbc2.AbstractJdbc2BlobClob", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.0876987819993174
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSequence dBSequence0 = new DBSequence("S)Ya*YmYV4<", "e(|cd", "S)Ya*YmYV4<");
      Boolean boolean0 = new Boolean(";");
      dBSequence0.isCycle();
      dBSequence0.setCycle((Boolean) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, ";", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBPrimaryKeyConstraint1.toString();
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      dBPrimaryKeyConstraint1.setName("S)Ya*YmYV4<");
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("*/");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+u.Q[;");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn((String) null, defaultDBTable0, 451, "*/");
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("*+e+*", defaultDBTable0, 0, "+u.Q[;");
      defaultDBColumn1.setVersionColumn(false);
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("*/", defaultDBTable0, dBDataType0, integer0, integer0);
      dBColumnArray0[7] = (DBColumn) defaultDBColumn2;
      DBColumn dBColumn0 = defaultDBTable0.getColumn((String) null);
      dBColumn0.isUnique();
      dBColumnArray0[8] = dBColumn0;
      StringBuilder stringBuilder0 = new StringBuilder(45);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3208163994808633
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      PredicateList predicateList0 = new PredicateList();
      FromList fromList0 = new FromList();
      InsertNode insertNode0 = new InsertNode();
      Properties properties0 = insertNode0.targetProperties;
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("");
      assertNull(boolean0);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isQuery("rT+BCvK/C}IkfOKjQF:");
      SQLUtil.mutatesStructure("kove ");
      SQLUtil.isQuery("truncate8/j");
      SQLUtil.isDDL("");
      boolean boolean1 = SQLUtil.isDML("updatedefaultu");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = ";=sQa=~*yxbrn";
      String[] stringArray1 = new String[2];
      stringArray1[0] = ";=sQa=~*yxbrn";
      stringArray1[1] = "jVfA-IovKgC.B";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("n", stringArray0, "jVfA-IovKgC.B", "Lock mode set to MODE_TABLE because no start or stop position", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.wordChars(4725, 4725);
      streamTokenizer0.slashSlashComments(true);
      int int0 = (-2434);
      streamTokenizer0.ordinaryChar((-2434));
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID(1L, 0L, 185);
      basicUUID0.toHexString();
      basicUUID0.toANSIidentifier();
      basicUUID0.toString();
      String string0 = basicUUID0.toANSIidentifier();
      basicUUID0.toHexString();
      basicUUID0.cloneMe();
      basicUUID0.toString();
      String[] stringArray0 = new String[0];
      String string1 = SQLUtil.renderColumnListWithTableName("U000000b9X0000X0000X0000X000000000001", stringArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0547779606981393
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+u.Q[;");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute8/j", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer.getInteger("");
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("+u.Q[;", defaultDBTable0, 0, "execute8/j");
      SQLUtil.removeComments("");
      Boolean boolean0 = new Boolean(true);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.mutatesStructure("create unique indexcall0cmwn@n8nfy^bbr");
      SQLUtil.isDDL("+u.Q[;");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.3558258304206885
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SQLUtil.isQuery("");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("renamer6as!4*k");
      defaultDBTable0.getReferrers();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "org.postgresql.jdbc4.Jdbc4Array";
      stringArray0[1] = "='doTVY+ T";
      stringArray0[2] = "org.postgresql.jdbc4.Jdbc4Array";
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)10;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      stringArray0[3] = null;
      stringArray0[4] = "renamer6as!4*k";
      stringArray0[5] = "'q0yO+2b ]%ZBE9A";
      stringArray0[6] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "\"MW8q0@n?8G^]LZ8?", false, stringArray0);
      dBPrimaryKeyConstraint0.setDoc("select");
      dBPrimaryKeyConstraint0.setName("null +");
      dBPrimaryKeyConstraint0.toString();
      System.setCurrentTimeMillis(1396L);
      System.setCurrentTimeMillis(1396L);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.9565577925361763
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" r", (DBSchema) null);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " r";
      stringArray0[1] = " r";
      stringArray0[2] = " r";
      stringArray0[3] = " r";
      stringArray0[4] = " r";
      stringArray0[5] = null;
      stringArray0[6] = " r";
      defaultDBTable0.isIdentical((DBObject) null);
      stringArray0[7] = "drop materialized view{ohku[ s17";
      stringArray0[8] = " r";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setDeleteRule(fKChangeRule0);
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+u.Q[J;");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute8/j", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("+u.Q[J;", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer.getInteger("UNION JOIN");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", defaultDBTable0, 0, "u}OZ:-j>/)V{5R");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn((String) null, defaultDBTable0, 451, "");
      defaultDBColumn2.toString();
      dBColumnArray0[5] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("*+e+*", defaultDBTable0, 0, "+u.Q[J;");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn5;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      dBColumnArray0[7] = (DBColumn) defaultDBColumn6;
      DBColumn dBColumn0 = defaultDBTable0.getColumn((String) null);
      dBColumnArray0[8] = dBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p68]]' 7N";
      stringArray0[1] = "p68]]' 7N";
      stringArray0[2] = "p68]]' 7N";
      stringArray0[3] = "p68]]' 7N";
      stringArray0[4] = "p68]]' 7N";
      stringArray0[5] = "p68]]' 7N";
      String[] stringArray1 = new String[4];
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "c3bfk");
      stringArray1[1] = "p68]]' 7N";
      stringArray1[2] = "p68]]' 7N";
      stringArray1[3] = "p68]]' 7N";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p68]]' 7N", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string0 = SQLUtil.leftJoin((String) null, stringArray1, "p68]]' 7N", "p68]]' 7N", stringArray0);
      assertEquals("left join p68]]' 7N as p68]]' 7N on null.null = p68]]' 7N.p68]]' 7N and null.p68]]' 7N = p68]]' 7N.p68]]' 7N and null.p68]]' 7N = p68]]' 7N.p68]]' 7N and null.p68]]' 7N = p68]]' 7N.p68]]' 7N", string0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("bg|{2X0\"!=Nx", "e^&+8e^U#~Cf", "bg|{2X0\"!=Nx");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Rp'2WcY*Y";
      stringArray0[1] = "org.firebirdsql.gds.impl.jni.ServiceParameterBufferImp";
      stringArray0[2] = ")Gku&4-h[Q>rl";
      stringArray0[3] = "FqY<'%?";
      stringArray0[4] = ":Y2Y;XE";
      // Undeclared exception!
      try { 
        SQLUtil.join(".java", "FqY<'%?", stringArray0, "sele", ")Gku&4-h[Q>rl", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("UNIQUE ", 4);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte) (-104);
      byteArray0[4] = (byte) (-20);
      DynamicByteArrayOutputStream dynamicByteArrayOutputStream0 = new DynamicByteArrayOutputStream(byteArray0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dynamicByteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      String string0 = ">1r5;P(q)p(ya";
      PrintWriter printWriter0 = mockPrintWriter1.printf(">1r5;P(q)p(ya", (Object[]) null);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, printWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[0];
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      BasicUUID basicUUID0 = new BasicUUID();
      basicUUID0.cloneMe();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      int int0 = 523;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "";
      basicUUID0.toANSIidentifier();
      // Undeclared exception!
      try { 
        SQLUtil.isDDL(stringArray0[5]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "{+";
      stringArray0[1] = "truncate";
      stringArray0[2] = "selectsllect * from";
      stringArray0[3] = "alter table";
      stringArray0[4] = "select intosllect * from";
      stringArray0[5] = " NOT NULL";
      stringArray0[6] = "&xPbN~rE7E";
      stringArray0[7] = "truncatesllect * from";
      stringArray0[8] = "D|[+:M@";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.9722624138662666
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBSequence dBSequence0 = new DBSequence("S)Ya*YmYV4<", "e(|cd", "S)Ya*YmYV4<");
      Boolean boolean0 = new Boolean(";");
      dBSequence0.isCycle();
      Boolean.logicalAnd(false, true);
      dBSequence0.setCycle((Boolean) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique indexdelete", false, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      dBPrimaryKeyConstraint1.toString();
      NameSpec nameSpec1 = NameSpec.NEVER;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      dBPrimaryKeyConstraint1.setName("S)Ya*YmYV4<");
      NameSpec nameSpec2 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint1, (StringBuilder) null, nameSpec2);
      defaultDBTable0.getForeignKeyConstraints();
      SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec3 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec3);
      NameSpec nameSpec4 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, (StringBuilder) null, nameSpec4);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = new ConstraintDescriptorList();
      constraintDescriptorList1.add((Object) null);
      UnaryOperator<DBNotNullConstraint> unaryOperator0 = UnaryOperator.identity();
      constraintDescriptorList1.replaceAll(unaryOperator0);
      constraintDescriptorList1.setScanned(true);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      String string0 = SQLUtil.renderValue("NCLOB");
      assertEquals("'NCLOB'", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.normalize("!n)`V`Clj[`V',Ueb", false);
      DBSchema dBSchema0 = null;
      String string0 = "delete";
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("'q0yO+2b ]%ZBE9A", "! n) ` V ` Clj [ ` V ',Ueb'", versionNumber0);
      // Undeclared exception!
      try { 
        defaultDatabase0.getSchema("! n) ` V ` Clj [ ` V ',Ueb'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table ''q0yO+2b ]%ZBE9A'
         //
         verifyException("org.databene.jdbacl.model.DefaultDatabase", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance((-22), "+u.Q[J;");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("execute8/j", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("+u.Q[J;", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      Integer.getInteger("");
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", defaultDBTable0, (-22), "execute8/j");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn((String) null, defaultDBTable0, 451, "");
      defaultDBColumn4.setTable(defaultDBTable0);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn("*+e+*", defaultDBTable0, (-22), "+u.Q[J;");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn5;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      dBColumnArray0[7] = (DBColumn) defaultDBColumn6;
      DBColumn dBColumn0 = defaultDBTable0.getColumn((String) null);
      dBColumnArray0[8] = dBColumn0;
      String string0 = SQLUtil.renderColumn(dBColumnArray0[8]);
      assertEquals("null  NULL", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.023525415182033
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "create unique indexalter materialized viewtmqda~~?%una!`bg");
      DBSequence dBSequence0 = new DBSequence("S);+<+YV4<", "e(|cd", "S);+<+YV4<");
      Boolean boolean0 = new Boolean(";");
      dBSequence0.isCycle();
      dBSequence0.setCycle((Boolean) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "create unique indexdelete", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint1 = defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \"create unique indexdelete\" UNIQUE ()", string0);
      
      dBPrimaryKeyConstraint1.setName("S);+<+YV4<");
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT S);+<+YV4< PRIMARY KEY ()", string1);
      
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      String string2 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec2);
      assertEquals("CONSTRAINT S);+<+YV4< UNIQUE ()", string2);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "'";
      stringArray0[1] = "'";
      stringArray0[2] = "'";
      stringArray0[3] = "'";
      stringArray0[4] = "'";
      stringArray0[5] = "'";
      stringArray0[6] = "'";
      stringArray0[7] = "'";
      stringArray0[8] = "'";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "'", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT ' PRIMARY KEY (', ', ', ', ', ', ', ', ')", string0);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      ConstraintDescriptorList constraintDescriptorList1 = new ConstraintDescriptorList();
      constraintDescriptorList0.spliterator();
      UnaryOperator.identity();
      UnaryOperator.identity();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.9314830515574797
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.wordChars(4719, 4719);
      streamTokenizer0.slashSlashComments(false);
      SQLUtil.isQuery("tmqDa~~?%uNA!`bG");
      SQLUtil.isDDL("tmqDa~~?%uNA!`bG");
      SQLUtil.isProcedureCall("creat- uniqFe lndex");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer();
      stringBuffer0.trimToSize();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("X8%h+aDtSe", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy1 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1925, threadFactory0, threadPoolExecutor_DiscardPolicy1);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "ALTER");
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread1 = new MockThread(threadGroup1, mockThread0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      threadPoolExecutor_DiscardPolicy1.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ClassLoader classLoader1 = classLoader0.getParent();
      mockThread1.setContextClassLoader(classLoader1);
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, 0L, timeUnit0);
      delayQueue0.add((Delayed) scheduledFuture0);
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      delayQueue0.poll(0L, timeUnit1);
      Character character0 = Character.valueOf('!');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'!'", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cannot ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("create unique indexc013800d-00fb-2646-07ec-000000134f30");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("create unique indexc013800d-00fb-2646-07ec-000000134f30", "create unique indexc013800d-00fb-2646-07ec-000000134f30", versionNumber0);
      SQLUtil.typeAndName(defaultDatabase0);
      ValueLong.get(17979222801250304L);
      Boolean boolean0 = new Boolean(" join ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DBDataType.getInstance(0, "+u.Q[;");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("");
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("less", 160);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      ArrayList<DBSequence> arrayList0 = new ArrayList<DBSequence>();
      DBSchema dBSchema0 = new DBSchema("create materialized view.l92d`]s`b", dBCatalog0);
      DBSchema dBSchema1 = new DBSchema("7f00[:Yr");
      DBSchema dBSchema2 = new DBSchema("gRA`}\"", dBCatalog0);
      DBSchema dBSchema3 = new DBSchema("izw0ZY", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("gRA`}\"", dBSchema3);
      DBSequence dBSequence0 = new DBSequence(":w YK \"DM`", "create materialized view.l92d`]s`b", "DEFERRABILITY SMALLINT");
      dBSchema0.addSequence(dBSequence0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("(ma0nP@wL39`\"", dBSchema3);
      dBCatalog0.getTables();
      defaultDBTable1.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, (String[]) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      String string0 = dBPrimaryKeyConstraint0.toString();
      assertEquals("PRIMARY KEY ()", string0);
      
      boolean boolean0 = SQLUtil.isDDL("exec");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      DBCatalog dBCatalog0 = new DBCatalog("YF");
      Object object0 = new Object();
      dBCatalog0.equals((Object) null);
      SQLUtil.ownerDotComponent(dBCatalog0);
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis((-520482107));
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("lzj.");
      tableContainer0.getTable("lzj.");
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      StringReader stringReader0 = new StringReader("cannot ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-1165), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      Random.setNextRandom(1165);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SQLUtil.normalize("create tablesllect * from", false);
          ConnectionInfo connectionInfo0 = new ConnectionInfo("execute8/j");
          byte[] byteArray0 = new byte[5];
          byteArray0[0] = (byte) (-84);
          byteArray0[1] = (byte)15;
          byteArray0[2] = (byte)15;
          byteArray0[3] = (byte)90;
          byteArray0[4] = (byte)34;
          connectionInfo0.setUserPasswordHash(byteArray0);
          org.h2.engine.Database database0 = null;
          try {
            database0 = new org.h2.engine.Database(connectionInfo0, "create tablesllect * from");
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // General error: \"java.lang.NullPointerException\" [50000-136]
             //
             verifyException("org.h2.message.DbException", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      BasicUUID basicUUID0 = new BasicUUID();
      SchemaDescriptor schemaDescriptor0 = new SchemaDescriptor(dataDictionaryImpl0, (String) null, (String) null, basicUUID0, true);
      BasicUUID basicUUID1 = new BasicUUID();
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      dataDictionaryImpl0.getActiveConstraintDescriptors(constraintDescriptorList0);
      DBCatalog dBCatalog0 = new DBCatalog("SYSFUN");
      dBCatalog0.getSchema("c013800d-00fb-2644-07ec-000000134f30");
      dBCatalog0.toString();
      basicUUID0.toANSIidentifier();
      schemaDescriptor0.getDependableFinder(501);
      dBCatalog0.getTables();
      Charset.defaultCharset();
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("DBA");
      charset0.aliases();
      charset0.encode("c013800d-00fb-2646-07ec-000000134f30");
      SelectNode selectNode0 = new SelectNode();
      FromVTI fromVTI0 = new FromVTI();
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      String string0 = "SLLECT * FROM ";
      Charset charset0 = Charset.defaultCharset();
      String string1 = "izG/4w$#";
      SQLUtil.removeComments("SLLECT * FROM ");
      charset0.encode("izG/4w$#");
      String string2 = "UNIQUE ";
      // Undeclared exception!
      try { 
        Charset.isSupported("UNIQUE ");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // UNIQUE 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.9348066056828754
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[9];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      DBDataType dBDataType0 = DBDataType.getInstance(0, "+u.Q[J;");
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, ".java");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(")Gku&4-h[Q>rl", defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn((String) null, defaultDBTable0, dBDataType0, integer0);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      Integer.getInteger("UNION JOIN");
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, (Integer) null);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("", defaultDBTable0, 0, "u}OZ:-j>/)V{5R");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn4;
      DefaultDBColumn defaultDBColumn5 = new DefaultDBColumn((String) null, defaultDBTable0, 451, "");
      dBColumnArray0[5] = (DBColumn) defaultDBColumn5;
      DefaultDBColumn defaultDBColumn6 = new DefaultDBColumn("*+e+*", defaultDBTable0, 0, "+u.Q[J;");
      dBColumnArray0[6] = (DBColumn) defaultDBColumn6;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      DefaultDBColumn defaultDBColumn7 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer1, integer0);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "u}OZ:-j>/)V{5R";
      String string0 = SQLUtil.renderQuery(defaultDBTable1, stringArray0, dBColumnArray0);
      assertEquals("SELECT * FROM null WHERE u}OZ:-j>/)V{5R = )Gku&4-h[Q>rl : +U.Q[J;(0)", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      VersionNumber versionNumber0 = VersionNumber.valueOf((String) null);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("@XM[pz$I", "setLength", versionNumber0);
      defaultDatabase0.getTable("=PXX*", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "setLength";
      stringArray0[1] = "@XM[pz$I";
      stringArray0[2] = "setLength";
      stringArray0[3] = null;
      stringArray0[4] = "@XM[pz$I";
      stringArray0[5] = "=PXX*";
      stringArray0[6] = "=PXX*";
      stringArray0[7] = "=PXX*";
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "=PXX*";
      objectArray0[1] = (Object) "setLength";
      objectArray0[2] = (Object) "@XM[pz$I";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      SQLUtil.isQuery(" = ");
      SQLUtil sQLUtil0 = new SQLUtil();
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "FKTABLE_CAT";
      stringArray0[1] = "create materialized viewxy|)cmg4o{.l";
      stringArray0[2] = "create materialized viewxy|)cmg4o{.l";
      stringArray0[3] = "FKTABLE_CAT";
      stringArray0[4] = "FKTABLE_CAT";
      stringArray0[5] = "FKTABLE_CAT";
      stringArray0[6] = "create materialized viewxy|)cmg4o{.l";
      stringArray0[7] = "FKTABLE_CAT";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "create materialized viewxy|)cmg4o{.l";
      stringArray1[1] = ">~.`(";
      stringArray1[2] = "org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics";
      // Undeclared exception!
      try { 
        SQLUtil.join("create materialized viewxy|)cmg4o{.l", "FKTABLE_CAT", stringArray0, "xy|)cmg", "LCJ+#X9Jak&6;{ex\"", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("+k");
      tableContainer0.getTable("+k");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("+k", (DBTable) null, (DBDataType) null);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLUtil.isDML(" DEFAULTu");
      Properties properties0 = new Properties();
      String string0 = null;
      Jdbc4Connection jdbc4Connection0 = null;
      try {
        jdbc4Connection0 = new Jdbc4Connection("", 541, "exec8f7+~qq<", (String) null, properties0, "");
        fail("Expecting exception: PSQLException");
      
      } catch(Throwable e) {
         //
         // The connection attempt failed.
         //
         verifyException("org.postgresql.core.v3.ConnectionFactoryImpl", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      dBCatalog0.toString();
      dBCatalog0.setDoc("NZLOB");
      dBCatalog0.getSequences();
      dBCatalog0.getTables();
      dBCatalog0.getSchema("defaul");
      dBCatalog0.equals((Object) null);
      SQLUtil.typeAndName(dBCatalog0);
      LocalGDSImpl localGDSImpl0 = null;
      try {
        localGDSImpl0 = new LocalGDSImpl();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String string0 = "alter matrilizbd vewtqda~~?%na!`b";
      SQLUtil.mutatesDataOrStructure("alter matrilizbd vewtqda~~?%na!`b");
      Charset charset0 = Charset.defaultCharset();
      charset0.encode("alter matrilizbd vewtqda~~?%na!`b");
      // Undeclared exception!
      try { 
        charset0.encode((CharBuffer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.charset.CharsetEncoder", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      SQLUtil.normalize("", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "L7a*T";
      stringArray0[1] = "";
      stringArray0[2] = "L7a*T";
      stringArray0[3] = "k";
      stringArray0[4] = "d(]jU{YxU@;";
      stringArray0[5] = "k";
      SQLUtil.normalize("d(]jU{YxU@;", false);
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSequence dBSequence0 = new DBSequence("bXm?c|D-XFR:R", "insert", "WI4CE-dE)!Ji!wGb");
      assertNull(dBSequence0.isOrder());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      String string0 = SQLUtil.normalize("Xjn{1Gc9A#iC:/", true);
      assertEquals("Xjn { 1Gc9A # iC : /", string0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
          SQLUtil.normalize("|r#vz==///AO0YlK?Z", false);
          ConnectionInfo connectionInfo0 = new ConnectionInfo("|r#vz==///AO0YlK?Z");
          org.h2.engine.Database database0 = null;
          try {
            database0 = new org.h2.engine.Database(connectionInfo0, "d[~elete");
            fail("Expecting exception: RuntimeException");
          
          } catch(RuntimeException e) {
             //
             // General error: \"java.lang.NullPointerException\" [50000-136]
             //
             verifyException("org.h2.message.DbException", e);
          }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      SQLUtil.normalize(")Gku&4-h[Q>rl", true);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1239, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "ALTER");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule((Runnable) mockThread1, (-3820L), timeUnit0);
      delayQueue0.add((Delayed) scheduledFuture0);
      TimeUnit timeUnit1 = TimeUnit.MILLISECONDS;
      delayQueue0.poll(1L, timeUnit1);
      String string0 = SQLUtil.renderValue((Object) null);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = SQLUtil.substituteMarkers("create tablealter materialized viewtmqda~~?%una!`bg", "E;lhAM", "E;lhAM");
      assertEquals("create tablealter materialized viewtmqda~~?%una!`bg", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "8XQ-+p4X";
      stringArray0[2] = "~AE!%Kx3A";
      SQLUtil.leftJoin("~AE!%Kx3A", stringArray0, "", "l'=_L3j`R", stringArray0);
      StringBuilder stringBuilder0 = new StringBuilder();
      Object object0 = new Object();
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) "l'=_L3j`R");
      assertEquals("l'=_L3j`R", stringBuilder1.toString());
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " 0-:<8/5");
      String[] stringArray0 = new String[5];
      stringArray0[0] = " 0-:<8/5";
      stringArray0[1] = null;
      stringArray0[2] = "!+";
      stringArray0[3] = null;
      stringArray0[4] = "drop indexjr";
      String string0 = SQLUtil.join((String) null, "!+", stringArray0, "GE", stringArray0[1], stringArray0);
      assertEquals("GE as null on !+. 0-:<8/5 = null. 0-:<8/5 and !+.null = null.null and !+.!+ = null.!+ and !+.null = null.null and !+.drop indexjr = null.drop indexjr", string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "FKTABLE_CAT";
      stringArray0[1] = "create materialized viewxy|)cmg4o{.l";
      stringArray0[2] = "create materialized viewxy|)cmg4o{.l";
      stringArray0[3] = "FKTABLE_CAT";
      stringArray0[4] = "FKTABLE_CAT";
      stringArray0[5] = "FKTABLE_CAT";
      stringArray0[6] = "create materialized viewxy|)cmg4o{.l";
      stringArray0[7] = "FKTABLE_CAT";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "create materialized viewxy|)cmg4o{.l";
      stringArray1[1] = "~.`(";
      stringArray1[2] = "org.apache.derby.impl.sql.execute.rts.RealScalarAggregateStatistics";
      // Undeclared exception!
      try { 
        SQLUtil.join("create materialized viewxy|)cmg4o{.l", "FKTABLE_CAT", stringArray0, "xy|)cmg", "LCJ+#X9Jak&6;{ex\"", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      PipedReader pipedReader0 = new PipedReader(4);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(pipedReader0);
      streamTokenizer0.ordinaryChars(4, (-3709));
      streamTokenizer0.sval = "V`@n";
      Random.setNextRandom((-1850289736));
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("`/", (String[]) null, " WHERE ", (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, (NameSpec) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("less", 160);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      boolean boolean0 = SQLUtil.isDDL("create unique indexdelete");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "p68]]' 7N";
      stringArray0[1] = "p68]]' 7N";
      stringArray0[2] = "p68]]' 7N";
      stringArray0[3] = "p68]]' 7N";
      stringArray0[4] = "p68]]' 7N";
      stringArray0[5] = "p68]]' 7N";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "p68]]' 7N";
      stringArray1[1] = "p68]]' 7N";
      stringArray1[2] = "p68]]' 7N";
      stringArray1[3] = "p68]]' 7N";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("p68]]' 7N", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(rowOutputBinary0, false);
      PrintWriter printWriter0 = mockPrintWriter0.format("CONSTANT_SCHEMA", (Object[]) stringArray1);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[15];
      stringArray0[0] = "}4zKZ'U0B";
      stringArray0[1] = "}4zKZ'U0B";
      stringArray0[2] = "}4zKZ'U0B";
      System.setCurrentTimeMillis((-4062L));
      System.setCurrentTimeMillis(415L);
      System.setCurrentTimeMillis(415L);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("tVnYK&S5lw#u].+\"b#");
      assertEquals(1, objectArray0.length);
  }
}
