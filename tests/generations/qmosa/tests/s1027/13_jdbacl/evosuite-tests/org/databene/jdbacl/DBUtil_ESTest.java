/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:04:09 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.io.UnsupportedEncodingException;
import java.lang.reflect.Proxy;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.SQLWarning;
import java.sql.Statement;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.regex.PatternSyntaxException;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.FormatableHashtable;
import org.apache.derby.iapi.sql.compile.TypeCompilerFactory;
import org.apache.derby.iapi.sql.conn.LanguageConnectionContext;
import org.apache.derby.iapi.sql.depend.ProviderList;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.sql.dictionary.IndexRowGenerator;
import org.apache.derby.impl.sql.compile.CompilerContextImpl;
import org.apache.derby.impl.sql.compile.InsertNode;
import org.apache.derby.impl.sql.compile.TypeCompilerFactoryImpl;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.sql.execute.DeleteConstantAction;
import org.apache.derby.impl.store.access.btree.BTreeCostController;
import org.databene.commons.ErrorHandler;
import org.databene.commons.Level;
import org.databene.jdbacl.DBExecutionResult;
import org.databene.jdbacl.DBUtil;
import org.databene.jdbacl.JDBCConnectData;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.TableContainer;
import org.databene.jdbacl.model.TableHolder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.GDSException;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.isc_db_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBArray;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.h2.Driver;
import org.h2.engine.SessionRemote;
import org.h2.tools.Csv;
import org.h2.tools.Recover;
import org.h2.tools.SimpleResultSet;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcConnection;
import org.hsqldb.jdbc.jdbcPreparedStatement;
import org.hsqldb.jdbcDriver;
import org.hsqldb.persist.HsqlProperties;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      boolean boolean0 = false;
      Proxy proxy0 = (Proxy)DBUtil.wrapWithPooledConnection((Connection) null, false);
      // Undeclared exception!
      try { 
        DBUtil.close((Connection) proxy0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.proxy.PooledConnectionHandler", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 8);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D";
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.equals("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", false, stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/--or.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      List<DBTable> list0 = new GenericDescriptorList();
      String string1 = "listFiles ";
      try { 
        DBUtil.getMetaData("--or", true, false, false, true, "listFiles ", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 8);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D";
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", false, stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/--or.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.getTables(true);
      String string1 = "listFiles ";
      try { 
        DBUtil.getMetaData("--or", true, true, true, false, "listFiles ", false, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("MS");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "MS");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("wlt<", level0);
      DBExecutionResult dBExecutionResult0 = DBUtil.runScript("--select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE", '', (Connection) null, false, errorHandler0);
      errorHandler0.handleError("LXvvU|DSk1hGg|]ja");
      errorHandler0.setLoggingStackTrace((boolean) dBExecutionResult0.changedStructure);
      try { 
        DBUtil.runScript("MS", "u-zY\"", '0', (Connection) null, true, errorHandler0);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(UnsupportedEncodingException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Csv.getInstance();
      Csv.getInstance();
      Csv csv1 = Csv.getInstance();
      csv1.readRow();
      Random.setNextRandom((-256415180));
      Object[] objectArray0 = DBUtil.currentLine(simpleResultSet0);
      Object[] objectArray1 = DBUtil.parseResultRow(simpleResultSet0);
      assertFalse(objectArray1.equals((Object)objectArray0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      FormatableHashtable formatableHashtable0 = new FormatableHashtable();
      DBSchema dBSchema0 = new DBSchema("6o<");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("8=Yl+gs-0f}F)C[$m>", dBSchema0);
      defaultDBTable0.getCatalog();
      dBSchema0.setCatalog((DBCatalog) null);
      dBSchema0.toString();
      DBUtil.dependencyOrderedTables(dBSchema0);
      // Undeclared exception!
      try { 
        DBUtil.getConnectData("6o<");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '6o<.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "";
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.executeUpdate("", jdbcConnection0);
      String string1 = "9M<f:\"ef";
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) jdbcConnection0, "9M<f:\"ef", "", true, false, true, true, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcDatabaseMetaData", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FormatableHashtable formatableHashtable0 = new FormatableHashtable();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile(".env.properties");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "");
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBUtil.existsEnvironment("");
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.2318864047123042
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "nD.rjy`#N9b`Pvg");
      ErrorHandler errorHandler0 = new ErrorHandler("10.1");
      // Undeclared exception!
      try { 
        DBUtil.runScript("nD.rjy`#N9b`Pvg", 'g', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      boolean boolean0 = false;
      DBUtil.wrapWithPooledConnection((Connection) null, false);
      DBUtil.getOpenConnectionCount();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.queryLong(" prepared statement(s)", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Csv.getInstance();
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        DBUtil.getStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      int int0 = DBUtil.getOpenResultSetCount();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("pdate\\Clob(.env.properties");
      String string0 = "dM'y`x";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "dM'y`x");
      // Undeclared exception!
      try { 
        DBUtil.connect("pdateClob(", true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'pdateClob(.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("rule retval", 304);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.equals("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      String[] stringArray0 = new String[1];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Statement statement0 = jdbcConnection0.createStatement();
      Proxy proxy0 = (Proxy)DBUtil.createLoggingResultSet((ResultSet) null, statement0);
      assertNotNull(proxy0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 8);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      String string0 = "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D";
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.equals("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", false, stringArray0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/--or.env.properties");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.getTables(true);
      String string1 = "listFiles ";
      try { 
        DBUtil.getMetaData("--or", true, false, false, false, "listFiles ", false, false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Csv.getInstance();
      Csv csv1 = Csv.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Csv csv2 = Csv.getInstance();
      SimpleResultSet simpleResultSet1 = new SimpleResultSet(csv2);
      Recover recover0 = new Recover();
      recover0.getTempFileDeleter();
      Csv.getInstance();
      Csv.getInstance();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      String string0 = "--m";
      csv1.setFieldSeparatorWrite("--m");
      DBUtil.format(simpleResultSet1);
      DBUtil.nextLine(simpleResultSet1);
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator();
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      DBCatalog dBCatalog0 = new DBCatalog("Vv}y;)Vg@p,a<K");
      DBSchema dBSchema0 = new DBSchema("-(I4n9;u9;Gr6I64", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("ih,p", dBSchema0);
      String[] stringArray0 = new String[6];
      dBCatalog0.getComponents();
      stringArray0[0] = "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ";
      stringArray0[1] = "Vv}y;)Vg@p,a<K";
      stringArray0[2] = "Vv}y;)Vg@p,a<K";
      stringArray0[3] = "Vv}y;)Vg@p,a<K";
      stringArray0[4] = "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ";
      stringArray0[5] = "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "Vv}y;)Vg@p,a<K", true, stringArray0);
      dBUniqueConstraint0.setOwner(dBCatalog0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBUniqueConstraint0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.DBCatalog cannot be cast to org.databene.jdbacl.model.DBTable
         //
         verifyException("org.databene.jdbacl.model.DBConstraint", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      Level level0 = Level.fatal;
      ErrorHandler.setDefaultLevel(level0);
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.trace;
      ErrorHandler.setDefaultLevel(level1);
      DBSchema dBSchema0 = new DBSchema("");
      dBSchema0.getTables(true);
      DBUtil.dependencyOrderedTables(dBSchema0);
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet((-1074L), 58);
      // Undeclared exception!
      try { 
        DBUtil.getStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      errorHandler0.handleError("ALL ");
      SQLWarning sQLWarning0 = new SQLWarning("", "ALL ");
      File file0 = MockFile.createTempFile("y[86Qr", "y[86Qr");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) "(jDJg`";
      objectArray0[1] = (Object) file0;
      objectArray0[2] = (Object) sQLWarning0;
      objectArray0[3] = (Object) "";
      PrintWriter printWriter0 = mockPrintWriter0.printf(">", objectArray0);
      sQLWarning0.printStackTrace(printWriter0);
      MockThrowable mockThrowable0 = new MockThrowable("(jDJg`", sQLWarning0);
      sQLWarning0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "m", "ALL ", 22);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "+V\"L4al).,3;]Im'zyp", (-1745));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("PfZV.C\"GX9SI", "", "PfZV.C\"GX9SI", (-1557));
      DBUtil.close((Statement) null);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData((Connection) jdbcConnection0, "ALL ", "I_#TD", true, true, true, false, "+V\"L4al).,3;]Im'zyp", false);
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Dangling meta character '+' near index 0
         // +V\"L4al).,3;]Im'zyp
         // ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'-W2kT|f[oR?y");
      Level level0 = Level.trace;
      ErrorHandler errorHandler0 = new ErrorHandler("'-W2kT|f[oR?y", level0);
      String string0 = "=HdNX~,[G";
      Object[] objectArray0 = new Object[1];
      try { 
        DBUtil.parseAndSimplifyResultSet(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.equals("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      String[] stringArray0 = new String[0];
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", false, stringArray0);
      boolean boolean0 = DBUtil.containsMandatoryColumn(dBPrimaryKeyConstraint0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.parseResultSet(simpleResultSet0);
      Statement statement0 = DBUtil.getStatement(simpleResultSet0);
      assertNull(statement0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUtil.parseAndSimplifyResultSet(simpleResultSet0);
      DBUtil.parseResultSet(simpleResultSet0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      LanguageConnectionContext languageConnectionContext0 = null;
      TypeCompilerFactoryImpl typeCompilerFactoryImpl0 = new TypeCompilerFactoryImpl();
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      DBUtil.getOpenStatementCount();
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      Csv.getInstance();
      Csv csv0 = Csv.getInstance();
      Csv.getInstance();
      csv0.readRow();
      Random.setNextRandom(23);
      try { 
        DBUtil.currentLine(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.3634541894442356
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Csv.getInstance();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-26);
      byteArray0[1] = (byte) (-26);
      byteArray0[2] = (byte) (-26);
      byteArray0[3] = (byte) (-26);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-26);
      byteArray0[6] = (byte) (-26);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", 19);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 3 result set(s), 5 statement(s)
         //
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      int[] intArray0 = new int[7];
      intArray0[0] = 7;
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-87);
      byteArray0[2] = (byte)4;
      byteArray0[3] = (byte)36;
      byteArray0[4] = (byte)36;
      byteArray0[5] = (byte)36;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      jdbcConnection jdbcConnection0 = new jdbcConnection((Session) null);
      Statement statement0 = jdbcConnection0.createStatement();
      Proxy proxy0 = (Proxy)DBUtil.createLoggingStatementHandler(statement0, true);
      assertNotNull(proxy0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("org.apache.derby.iapi.types.SQLBit", 203);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet();
      DBUtil.closeResultSetAndStatement(simpleResultSet0);
      assertEquals(1003, simpleResultSet0.getType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/=$TKytZnQF]LkLm>e.env.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF", level0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)111;
      byteArray0[2] = (byte)107;
      byteArray0[3] = (byte) (-36);
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte)11;
      byteArray0[6] = (byte)46;
      byteArray0[7] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      DBUtil.getOpenPreparedStatementCount();
      DBUtil.existsEnvironment((String) null);
      Driver driver0 = Driver.load();
      driver0.connect("----F1Q7$n&g&", (Properties) null);
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "----F1Q7$n&g&", 'w', (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.queryString((PreparedStatement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      InternalTransactionCoordinator.MetaDataTransactionCoordinator internalTransactionCoordinator_MetaDataTransactionCoordinator0 = new InternalTransactionCoordinator.MetaDataTransactionCoordinator();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator(internalTransactionCoordinator_MetaDataTransactionCoordinator0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.executeUpdate((String) null, jdbcConnection0);
      Class<jdbcDriver> class0 = jdbcDriver.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray((String) null, class0, (Connection) jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "\u0001\u0121", "", true, true, false, true, "", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      Class<String> class0 = String.class;
      ErrorHandler errorHandler0 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, (Connection) jdbcConnection0, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF.env.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        DBUtil.connect("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error reading environment data for '\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D
         // %\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF'
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/kFj[dSk%S2H.env.properties");
      byte[] byteArray0 = new byte[5];
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)11;
      byteArray0[3] = (byte)4;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      JDBCConnectData jDBCConnectData0 = DBUtil.getConnectData("kFj[dSk%S2H");
      assertNotNull(jDBCConnectData0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      String string0 = "--.egYc[3%";
      TableContainer tableContainer0 = new TableContainer("--.egYc[3%");
      TableContainer tableContainer1 = new TableContainer("DW/Jq+eaIm9,+^jCH_0");
      String string1 = "=u";
      DBUtil.available("se", "=u", "DW/Jq+eaIm9,+^jCH_0", "nAW/\"EFqnlL~%=fqCDx.");
      DBCatalog dBCatalog0 = new DBCatalog("--]NW(");
      String string2 = "(]2;-";
      dBCatalog0.getSchema("(]2;-");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("){t2 km2{Q%jv", (DBSchema) null);
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        DBUtil.equivalent((DBUniqueConstraint) null, (DBPrimaryKeyConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("--<Ga2sM__3`$ G)m");
      Level level0 = Level.trace;
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.debug;
      ErrorHandler.setDefaultLevel(level1);
      Level level2 = Level.ignore;
      ErrorHandler.setDefaultLevel(level2);
      DBUtil.close((Connection) null);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      TableContainer tableContainer0 = new TableContainer("--<Ga2sM__3`$ G)m");
      tableContainer0.toString();
      DBSchema dBSchema1 = tableContainer0.getSchema();
      assertNull(dBSchema1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      DBUtil.close((Connection) jdbcConnection0);
      int int0 = 7;
      boolean boolean0 = true;
      boolean boolean1 = false;
      String string0 = "UarOj=04aD.$Z";
      int[] intArray0 = null;
      boolean[] booleanArray0 = new boolean[0];
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator("UarOj=04aD.$Z", true, (int[]) null, booleanArray0, 59);
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      BTreeCostController bTreeCostController0 = new BTreeCostController();
      try { 
        bTreeCostController0.newRowLocationTemplate();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Unimplemented feature.
         //
         verifyException("org.apache.derby.iapi.error.StandardException", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery("----hsqldb.nio_data_file", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      ErrorMessages errorMessages0 = new ErrorMessages();
      // Undeclared exception!
      try { 
        DBUtil.closeResultSetAndStatement(errorMessages0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Error getting statement from result set
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      Level level1 = Level.ignore;
      ErrorHandler.setDefaultLevel(level1);
      errorHandler0.handleError("INNER");
      ErrorHandler errorHandler1 = new ErrorHandler("INNER", level0);
      errorHandler1.handleError((String) null);
      errorHandler1.setLoggingStackTrace(false);
      errorHandler1.handleError("QS");
      DBUtil.runScript("", ')', (Connection) null, true, errorHandler0);
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      isc_db_handle_impl isc_db_handle_impl0 = new isc_db_handle_impl();
      databaseParameterBufferImp0.addArgument(4, "JAVACLASSNAME");
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBufferImp0, isc_db_handle_impl0, (GDSHelper.GDSHelperErrorListener) null);
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, 'k', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      String string0 = "43X87.U";
      // Undeclared exception!
      try { 
        DBUtil.queryScalar("CompiledStatementExecutor.executeImpl()", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("--.egCc[3`");
      HsqlProperties hsqlProperties0 = new HsqlProperties("");
      TableContainer tableContainer1 = new TableContainer("DW/Jq+eaIm9+^jCH_0");
      TableContainer tableContainer2 = new TableContainer("--.egCc[3`");
      TableContainer tableContainer3 = new TableContainer("--~INNER", tableContainer2);
      tableContainer3.toString();
      tableContainer3.setName("^#HUw{yA:S|y2Y");
      Class<jdbcPreparedStatement> class0 = jdbcPreparedStatement.class;
      // Undeclared exception!
      try { 
        DBUtil.queryScalarArray("", class0, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Recover recover0 = new Recover();
      Level level0 = Level.info;
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.ignore;
      ErrorHandler.setDefaultLevel(level1);
      Level level2 = Level.ignore;
      ErrorHandler.setDefaultLevel(level2);
      ErrorHandler.setDefaultLevel(level1);
      // Undeclared exception!
      try { 
        DBUtil.querySingleRow("joinOrder", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String string0 = "\u0001\u0121";
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("\u0001\u0121", compositeDBObject0);
      String string1 = "org.apache.derby.impl.sql.compile.ResultSetNode";
      DBUtil.available("Failed to fetch metadata from connection ", "org.apache.derby.impl.sql.compile.ResultSetNode", "Failed to fetch metadata from connection ", "--");
      InsertNode insertNode0 = new InsertNode();
      // Undeclared exception!
      try { 
        insertNode0.makeConstantAction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.370146355566411
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("E", level0);
      GDSException gDSException0 = GDSException.createWithXAErrorCode("W6t.k>Z", 626);
      gDSException0.getCause();
      gDSException0.getNext();
      errorHandler0.handleError("INNER", (Throwable) null);
      errorHandler0.handleError("INNER");
      errorHandler0.handleError("INNER");
      // Undeclared exception!
      try { 
        DBUtil.runScript("E", (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Level level0 = Level.info;
      ErrorHandler.setDefaultLevel(level0);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(")", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "\u0001\u0121", "", true, true, false, true, "--", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte) (-32);
      byteArray0[2] = (byte)92;
      byteArray0[3] = (byte)5;
      byteArray0[4] = (byte)28;
      byteArray0[5] = (byte)59;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)52;
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      try { 
        DBUtil.getMetaData((Connection) null, "\u0001\u0121", "", false, true, false, true, "sK-", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      try { 
        DBUtil.getMetaData((Connection) null, "\u0001\u0121", "", true, false, false, true, "sK-", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting null failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String string0 = "";
      // Undeclared exception!
      try { 
        DBUtil.queryAndSimplify("eY", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.700433991370831
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 8);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.equals("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      String[] stringArray0 = new String[0];
      defaultDBTable0.getUniqueConstraint(stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", false, stringArray0);
      DBUtil.assertAllDbResourcesClosed(false);
      Driver driver0 = Driver.load();
      driver0.connect("Ff[FmZokJQ!", (Properties) null);
      ErrorHandler errorHandler0 = ErrorHandler.getDefault();
      // Undeclared exception!
      try { 
        DBUtil.runScript((String) null, "--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1584143480520632
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/databene/=$TKytZnQF]LkLm>e.env.properties");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Level level0 = Level.warn;
      ErrorHandler.setDefaultLevel(level0);
      Level level1 = Level.debug;
      ErrorHandler errorHandler0 = new ErrorHandler("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF", level1);
      errorHandler0.setLoggingStackTrace(false);
      errorHandler0.handleError("cQUi");
      Connection connection0 = null;
      ErrorHandler.setDefaultLevel(level0);
      Class<Driver> class0 = Driver.class;
      ErrorHandler errorHandler1 = new ErrorHandler(class0);
      // Undeclared exception!
      try { 
        DBUtil.runScript("\u0002\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D\n%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF", '$', (Connection) null, false, errorHandler1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate("x4]8H.#WKh", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.h2.engine.UserAggregate";
      stringArray0[1] = "1[";
      stringArray0[2] = "org.h2.engine.UserAggregate";
      stringArray0[3] = "org.h2.engine.UserAggregate";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "org.h2.engine.UserAggregate", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("org.h2.engine.UserAggregate", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(dBTable0, "xT<", false, stringArray0);
      boolean boolean0 = DBUtil.equivalent(dBUniqueConstraint0, dBPrimaryKeyConstraint0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = true;
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.query((String) null, (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.nextLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Level level0 = Level.ignore;
      ErrorHandler.setDefaultLevel(level0);
      String string0 = "No JDBC URL specified";
      ErrorHandler errorHandler0 = new ErrorHandler("No JDBC URL specified");
      try { 
        DBUtil.runScript("", "%", (Connection) null, false, errorHandler0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Recover recover0 = new Recover();
      FBArray fBArray0 = new FBArray();
      fBArray0.getResultSet();
      DBUtil.close((ResultSet) null);
      DBUtil.close((Statement) null);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Csv csv0 = Csv.getInstance();
      csv0.setFieldSeparatorWrite("selec null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      // Undeclared exception!
      try { 
        DBUtil.format((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.6650517089974617
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "F1Q7$n&g&";
      // Undeclared exception!
      try { 
        DBUtil.connect((JDBCConnectData) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      Level level0 = Level.error;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      errorHandler0.handleError("INe");
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "INe", "", "INe", "", "");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC driver class name specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      ErrorHandler.setDefaultLevel((Level) null);
      Level level0 = Level.debug;
      ErrorHandler.setDefaultLevel(level0);
      // Undeclared exception!
      try { 
        DBUtil.logMetaData((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("Expected exactly one row, found more.");
      tableContainer0.equals("Expected exactly one row, found more.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Expected exactly one row, found more.");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "Expected exactly one row, found more.";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String[] stringArray1 = new String[3];
      stringArray1[0] = "C";
      stringArray1[1] = "Expected exactly one row, found more.";
      stringArray1[2] = "--nD.rjy`#N9b`Pvg";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "C", false, stringArray1);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      dBPrimaryKeyConstraint0.toString();
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      errorHandler0.handleError("ALL ");
      SQLWarning sQLWarning0 = new SQLWarning("", "ALL ");
      MockThrowable mockThrowable0 = new MockThrowable("(jDJg`", sQLWarning0);
      sQLWarning0.fillInStackTrace();
      StackTraceElement[] stackTraceElementArray0 = new StackTraceElement[6];
      StackTraceElement stackTraceElement0 = new StackTraceElement("", "m", "ALL ", 22);
      stackTraceElementArray0[0] = stackTraceElement0;
      StackTraceElement stackTraceElement1 = new StackTraceElement("", "", "+V\"L4al).,3;]Im'zyp", (-1745));
      stackTraceElementArray0[1] = stackTraceElement1;
      StackTraceElement stackTraceElement2 = new StackTraceElement("PfZV.C\"GX9SI", "", "PfZV.C\"GX9SI", (-1557));
      stackTraceElementArray0[2] = stackTraceElement2;
      StackTraceElement stackTraceElement3 = new StackTraceElement("ATTACHED:", "PfZV.C\"GX9SI", "m", 22);
      stackTraceElementArray0[3] = stackTraceElement3;
      StackTraceElement stackTraceElement4 = new StackTraceElement("There are unclosed database resources", "ATTACHED:", "m", (-1));
      stackTraceElementArray0[4] = stackTraceElement4;
      StackTraceElement stackTraceElement5 = new StackTraceElement("h= B4;{LlQ]rBF+'", ">j", "5UG.=M]`<", (-139548627));
      stackTraceElementArray0[5] = stackTraceElement5;
      mockThrowable0.setStackTrace(stackTraceElementArray0);
      mockThrowable0.addSuppressed(sQLWarning0);
      SQLException sQLException0 = new SQLException("ALL ", "ALL ", mockThrowable0);
      sQLException0.addSuppressed(sQLWarning0);
      sQLException0.spliterator();
      errorHandler0.handleError("", (Throwable) sQLException0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("'Z#1nH+rjb](B");
      String[] stringArray0 = new String[23];
      stringArray0[0] = "Er";
      stringArray0[1] = "ALL ";
      stringArray0[2] = "--E";
      stringArray0[3] = "ALL ";
      stringArray0[5] = "`EW<";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "Er", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      // Undeclared exception!
      try { 
        DBUtil.containsMandatoryColumn(dBPrimaryKeyConstraint0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Column 'Er' not found in table ''Z#1nH+rjb](B'
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.2667097817732322
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      String string0 = "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ";
      ErrorHandler.getDefault();
      ErrorHandler errorHandler0 = new ErrorHandler("Yi~v;:5sUZWWJ:D0rM");
      // Undeclared exception!
      try { 
        DBUtil.runScript("select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ", 'n', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Recover recover0 = new Recover();
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcConnection0.getHoldability();
      String string0 = "<Ga2sM__3`$ G)m";
      String string1 = "42Z19";
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, "42Z19", false, 1, (-1985), 339);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // java.lang.String@0000000003
         //
         verifyException("org.hsqldb.jdbc.Util", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("--.egCc[3`");
      HsqlProperties hsqlProperties0 = new HsqlProperties("");
      TableContainer tableContainer1 = new TableContainer("DW/Jq+eaIm9+^jCH_0");
      TableContainer tableContainer2 = new TableContainer("--.egCc[3`");
      tableContainer2.toString();
      TableContainer tableContainer3 = new TableContainer("eY");
      TableContainer tableContainer4 = new TableContainer("--.egCc[3`", tableContainer1);
      tableContainer4.setName("--.egCc[3`");
      tableContainer2.setDoc("--.egCc[3`");
      tableContainer4.getSchema();
      // Undeclared exception!
      try { 
        DBUtil.countRows("", (Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("wlt<", level0);
      DBUtil.runScript("--select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE", '', (Connection) null, false, errorHandler0);
      errorHandler0.handleError("LXvvU|DSk1hGg|]ja");
      // Undeclared exception!
      try { 
        DBUtil.runScript("MS", "u-zY\"", '0', (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: MS
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("wlt<", level0);
      DBUtil.runScript("--select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK  ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$INDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE", '', (Connection) null, false, errorHandler0);
      errorHandler0.handleError("LXvvU|DSk1hGg|]ja");
      // Undeclared exception!
      try { 
        DBUtil.runScript("wlt<", "LXvvU|DSk1hGg|]ja", (Connection) null, true, errorHandler0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Resource not found: wlt<
         //
         verifyException("org.databene.commons.IOUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      ErrorHandler errorHandler0 = new ErrorHandler("Error rolling bck prepared transaction");
      DBUtil.runScript("--Dv", (Connection) null, false, errorHandler0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InsertNode insertNode0 = new InsertNode();
      InsertNode insertNode1 = new InsertNode();
      insertNode1.setNodeType(0);
      // Undeclared exception!
      try { 
        insertNode0.makeConstantAction();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "";
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("");
      DBUtil.escape("}");
      FBArray fBArray0 = new FBArray();
      ProviderList providerList0 = new ProviderList();
      fBArray0.getResultSet((Map) providerList0);
      Connection connection0 = null;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.9060618009193138
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      DBUtil.assertAllDbResourcesClosed(false);
      Properties properties0 = new Properties();
      jdbcDriver.getConnection("|&/jmbAE~A%", properties0);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "--Empty SQL string in executeUpdate()", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: --Empty SQL string in executeUpdate()
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("", compositeDBObject0);
      String string0 = DBUtil.escape("");
      assertEquals("", string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.currentLine((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("--", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        DBUtil.parseAndSimplifyResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("UB[-(GbJFlmL");
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("--\uFFFF\u0003%\u0003\uFFFF\u0011%\u0001\uFFFF\u0001%\u0002\uFFFF\u0001c\u0001e\u0001\uFFFF\u0001g\u0001\uFFFF\u0001h\u0007\uFFFF\u0012%\u0001\u0086\u0002%\u0001\u008B\u0001\u008C\u0003%\u0001\u0092\u0001\u0093\u0013%\u0001\u00AC\u0007%\b\uFFFF\u0016%\u0001\u00CC\u0006%\u0001\uFFFF\u0002%\u0001\u00D5\u0001%\u0002\uFFFF\u0005%\u0002\uFFFF\u0005%\u0001\u00E7\u000F%\u0001\u00F7\u0002%\u0001\uFFFF\u0001%\u0001\u00FB\u0001\u00FC\u0003%\u0001\u0100\u0001%\u0001\u0102\b%\u0001\u010C\u0003%\u0001\u0110\u0004%\u0001\u0115\u0004%\u0001\uFFFF\u0001\u011A\u0002%\u0001\u011D\u0001%\u0001\u011F\u0002%\u0001\uFFFF\u000F%\u0001\u0132\u0001%\u0001\uFFFF\u0006%\u0001\u013A\u0001\u013B\u0003%\u0001\u0140\u0001\u0141\u0001\u0142\u0001%\u0001\uFFFF\u0003%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001%\u0001\uFFFF\u0005%\u0001\u0150\u0001%\u0001\u0152\u0001\u0153\u0001\uFFFF\u0002%\u0001\u0157\u0001\uFFFF\u0003%\u0001\u015B\u0001\uFFFF\u0004%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001%\u0001\uFFFF\u000B%\u0001\u016F\u0006%\u0001\uFFFF\u0001\u0176\u0001\u0177\u0005%\u0002\uFFFF\u0001%\u0001\u017E\u0002%\u0003\uFFFF\u0003%\u0001\u0184\u0001\u0185\u0002%\u0001\u0188\u0002%\u0001\u018B\u0001%\u0001\u018D\u0001\uFFFF\u0001%\u0002\uFFFF\u0001\u018F\u0002%\u0001\uFFFF\u0002%\u0001\u0194\u0001\uFFFF\u0004%\u0001\u0199\u0003%\u0001\u019D");
      tableContainer0.equals("createNewFile called in a read-only file system.");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("createNewFile called in a read-only file system.");
      SessionRemote sessionRemote0 = new SessionRemote();
      sessionRemote0.getLobConnection();
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) null, "UB[-(GbJFlmL", false, 2573, (-54), 100000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.prepareStatement((Connection) jdbcConnection0, "<Ga2sM__3`$ G)m", true, (-107753753), (-107753753), (-1985));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: <Ga2sM__3`$ G)m
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.399891585838211
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Level level0 = Level.ignore;
      ErrorHandler errorHandler0 = new ErrorHandler("E", level0);
      GDSException gDSException0 = GDSException.createWithXAErrorCode("W6t.k>Z", 626);
      gDSException0.getCause();
      GDSException gDSException1 = new GDSException("user");
      gDSException0.setNext(gDSException1);
      GDSException gDSException2 = gDSException0.getNext();
      SQLException sQLException0 = new SQLException("W6t.k>Z", "'P", 626, gDSException2);
      errorHandler0.handleError("E", (Throwable) sQLException0);
      errorHandler0.handleError("INNER", (Throwable) gDSException2);
      errorHandler0.handleError("INNER");
      errorHandler0.handleError("INNER");
      // Undeclared exception!
      try { 
        DBUtil.runScript("E", (Connection) null, false, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.1815461113373171
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("--}r~v_p8$Egt@KY.XkG", level0);
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) ";\f}W$$ls^";
      objectArray0[1] = (Object) "--}r~v_p8$Egt@KY.XkG";
      objectArray0[2] = (Object) "No JDBC URL specified";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) ";\f}W$$ls^";
      objectArray0[5] = (Object) "_k`~{tyYLmu/%|sRGl+";
      objectArray0[6] = (Object) "--}r~v_p8$Egt@KY.XkG";
      errorHandler0.handleError("u-zY\"");
      // Undeclared exception!
      try { 
        DBUtil.runScript("-7M'aAW}#{w_xe", '7', (Connection) null, true, errorHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema("");
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("", "", "", "", "", "");
      // Undeclared exception!
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No JDBC URL specified
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.connect("+!0-lI>$(G^pSt", false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition '+!0-lI>$(G^pSt.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      DBUtil.checkReadOnly(";\"\f}W$ls^", false);
      boolean[] booleanArray0 = new boolean[0];
      IndexRowGenerator indexRowGenerator0 = new IndexRowGenerator("UarOj=04aD.$Z", false, (int[]) null, booleanArray0, 2147483645);
      IndexRowGenerator indexRowGenerator1 = new IndexRowGenerator(indexRowGenerator0);
      IndexRowGenerator indexRowGenerator2 = new IndexRowGenerator("EO)$QIm5h59DgK?n", true, true, (int[]) null, booleanArray0, 10);
      IndexRowGenerator indexRowGenerator3 = new IndexRowGenerator(indexRowGenerator1);
      // Undeclared exception!
      try { 
        indexRowGenerator3.getIndexRowTemplate();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      String string0 = ";\\f}W$$ls^";
      // Undeclared exception!
      try { 
        DBUtil.checkReadOnly(";\f}W$$ls^", true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Tried to mutate a database with read-only settings: ;\f}W$$ls^
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("}m=D[h) #TI?F", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      byte[] byteArray0 = new byte[1];
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      // Undeclared exception!
      try { 
        DBUtil.queryWithMetadata("U", jdbcConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcStatement", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      DBUtil.close((ResultSet) errorMessages0);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      try { 
        DBUtil.connect("q%6M1Jy)b_[O", (String) null, (String) null, (String) null, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting q%6M1Jy)b_[O failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Csv csv0 = Csv.getInstance();
      csv0.setLineSeparator((String) null);
      SimpleResultSet simpleResultSet0 = new SimpleResultSet(csv0);
      Csv.getInstance();
      Csv.getInstance();
      DBUtil.available((String) null, (String) null, (String) null, (String) null);
      Csv csv1 = Csv.getInstance();
      SimpleResultSet simpleResultSet1 = new SimpleResultSet(csv1);
      Recover recover0 = new Recover();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory0.getTypeCompilerFactory();
      CompilerContextImpl compilerContextImpl0 = null;
      try {
        compilerContextImpl0 = new CompilerContextImpl((ContextManager) null, (LanguageConnectionContext) null, (TypeCompilerFactory) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.context.ContextImpl", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DeleteConstantAction deleteConstantAction0 = new DeleteConstantAction();
      DBUtil.getOpenConnectionCount();
      Csv csv0 = Csv.getInstance();
      csv0.setNullString("S W=)D8Q,a?");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "--%\u0001\uFFFF\u0005%\u0001\u01AD\u0002\uFFFF\u0003%\u0001\u01B1\u0002%\u0001\uFFFF\u0003%\u0001\u01B7\u0001%\u0002\uFFFF\u0001\u01B9\u0001%\u0001\uFFFF\u0002%\u0001\uFFFF\u0001\u01BD\u0001\uFFFF\u0001\u01BE\u0001\uFFFF\u0002%\u0001\u01C1\u0001%\u0001\uFFFF\u0002%\u0001\u01C5\u0001%\u0001\uFFFF\u0002%\u0001\u01C9\u0001\uFFFF\u0001%\u0001\u01CB\u0001\u01CC\u0003%\u0001\u01D0\u0001%\u0001\u01D2\u0006%\u0001\uFFFF\u0002%\u0001\u01DB\u0001\uFFFF\u0001\u01DC\u0001\u01DD\u0002%\u0001\u01E0\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01E2\u0001%\u0001\u01E4\u0002\uFFFF\u0002%\u0001\uFFFF\u0003%\u0001\uFFFF\u0003%\u0001\uFFFF\u0001%\u0002\uFFFF\u0003%\u0001\uFFFF\u0001\u01F1\u0001\uFFFF\u0001%\u0001\u01F3\u0001%\u0001\u01F5\u0004%\u0003\uFFFF\u0001%\u0001\u01FB\u0001\uFFFF\u0001\u01FC\u0001\uFFFF\u0001%\u0001\uFFFF\u0001\u01FE\u0001%\u0001\u0200\u0001\u0201\u0002%\u0001\u0204\u0004%\u0001\u020A\u0001\uFFFF\u0001\u020B\u0001\uFFFF\u0001%\u0001\uFFFF\u0002%\u0001\u020F\u0002%\u0002\uFFFF\u0001\u0213\u0001\uFFFF\u0001\u0214\u0002\uFFFF\u0001\u0215\u0001\u0216\u0001\uFFFF\u0003%\u0001\u021A\u0001\u021B\u0002\uFFFF\u0001\u021C\u0001\u021D\u0001\u021E\u0001\uFFFF\u0001\u021F\u0001%\u0001\u0221\u0004\uFFFF\u0001\u0222\u0001%\u0001\u0224\u0006\uFFFF\u0001%\u0002\uFFFF\u0001\u0226\u0001\uFFFF\u0001\u0228\u0001\uFFFF\u0001\u0229\u0002\uFFFF");
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      assertEquals("localhost", pGConnectionPoolDataSource0.getServerName());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JDBCConnectData jDBCConnectData0 = new JDBCConnectData("o0Pu2FT18", "o0Pu2FT18", "o0Pu2FT18", "o0Pu2FT18");
      try { 
        DBUtil.connect(jDBCConnectData0, true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting o0Pu2FT18 failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte) (-30);
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte) (-26);
      byteArray0[5] = (byte) (-62);
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-94);
      // Undeclared exception!
      try { 
        DBUtil.getMetaData("ZatyRBDuK", true, false, true, true, (String) null, false, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // No environment definition 'ZatyRBDuK.env.properties' found
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CompositeDBObject<DefaultDBTable> compositeDBObject0 = (CompositeDBObject<DefaultDBTable>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        DBUtil.escape((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.3634541894442356
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      FormatableHashtable formatableHashtable0 = new FormatableHashtable();
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 3 result set(s), 6 statement(s)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseResultRow((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.parseResultSet((ResultSet) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6650517089974617
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Level level0 = Level.warn;
      ErrorHandler errorHandler0 = new ErrorHandler("", level0);
      errorHandler0.handleError("ALL ");
      SQLWarning sQLWarning0 = new SQLWarning("", "ALL ");
      MockThrowable mockThrowable0 = new MockThrowable("(jDJg`", sQLWarning0);
      sQLWarning0.fillInStackTrace();
      mockThrowable0.addSuppressed(sQLWarning0);
      SQLException sQLException0 = new SQLException("ALL ", "ALL ", mockThrowable0);
      sQLException0.addSuppressed(sQLWarning0);
      sQLException0.spliterator();
      errorHandler0.handleError("", (Throwable) sQLException0);
      Recover.execute("hppY ^<n<ex4", "!'");
      Csv csv0 = Csv.getInstance();
      csv0.setFieldSeparatorWrite("!'");
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        DBUtil.format(errorMessages0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getObject
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "select null as PKTABLE_CAT  ,null as PKTABLE_SCHEM  ,PK.RDB$RELATION_NAME as PKTABLE_NAME  ,ISP.RDB$FIELD_NAME as PKCOLUMN_NAME  ,null as FKTABLE_CAT  ,null as FKTABLE_SCHEM  ,FK.RDB$RELATION_NAME as FKTABLE_NAME  ,ISF.RDB$FIELD_NAME as FKCOLUMN_NAME  ,CAST ((ISP.RDB$FIELD_POSITION + 1) as SMALLINT) as KEY_SEQ  ,RC.RDB$UPDATE_RULE as UPDATE_RULE  ,RC.RDB$DELETE_RULE as DELETE_RULE  ,PK.RDB$CONSTRAINT_NAME as PK_NAME  ,FK.RDB$CONSTRAINT_NAME as FK_NAME  ,null as DEFERRABILITY  from  RDB$RELATION_CONSTRAINTS PK{ ,RDB$RELATION_CONSTRAINTS FK  ,RDB$REF_CONSTRAINTS RC  ,RDB$NDEX_SEGMENTS ISP  ,RDB$INDEX_SEGMENTS ISF  WHERE ");
      // Undeclared exception!
      try { 
        DBUtil.dependencyOrderedTables((TableHolder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      ErrorMessages errorMessages1 = new ErrorMessages();
      try { 
        DBUtil.connect("+gP", "---7M'aAW}#{w_xe", "+gP", "---7M'aAW}#{w_xe", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Connecting +gP failed: 
         //
         verifyException("org.databene.jdbacl.DBUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.6141342688540803
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        DBUtil.assertAllDbResourcesClosed(true);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // There are unclosed database resources: 3 result set(s), 6 statement(s)
         //
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.3634541894442356
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HsqlProperties hsqlProperties0 = new HsqlProperties("");
      TableContainer tableContainer0 = new TableContainer("DW/Jq+eaIm9+^jCH_0");
      TableContainer tableContainer1 = new TableContainer("--.egCc[3`");
      tableContainer1.toString();
      TableContainer tableContainer2 = new TableContainer("--~INNER", tableContainer1);
      tableContainer2.getSchema();
      tableContainer2.toString();
      tableContainer2.getTables(true);
      tableContainer2.setName("^#HUw{yA:S|y2Y");
      DBUtil.assertAllDbResourcesClosed(false);
  }
}
