/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 19:13:14 GMT 2019
 */


import org.junit.Test;
import static org.junit.Assert.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Services_ESTest extends Services_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("http://j>jpn7VhuOew)HH6Ml:1395");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Services$HTTP_Result");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("j>jpn7VhuOew)HH6Ml", 1395);
      assertTrue(services_HTTP_Result0.works);
      assertEquals(21, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.3502705392332346
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      System.setCurrentTimeMillis(0);
      System.setCurrentTimeMillis(1026);
      EvoSuiteURL evoSuiteURL0 = new EvoSuiteURL("https://cMg<Vi|u~0,m:1026");
      NetworkHandling.createRemoteTextFile(evoSuiteURL0, "Services");
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("cMg<Vi|u~0,m", 1026);
      assertEquals(9, services_HTTP_Result0.page_weight);
      assertTrue(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("200.42.42.0", 1675);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("('Rk*v3&(Q", 1675);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("127.0.0.1", 3000);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(12L);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(12L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("", 3000);
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS((String) null, 1);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP((String) null, (-3503));
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis(44L);
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis(44L);
      System.setCurrentTimeMillis(44L);
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis(1711L);
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-47L));
      System.setCurrentTimeMillis(992L);
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-47L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-47L));
      System.setCurrentTimeMillis(992L);
      System.setCurrentTimeMillis(35L);
      System.setCurrentTimeMillis((-47L));
      System.setCurrentTimeMillis(1711L);
      System.setCurrentTimeMillis(44L);
      System.setCurrentTimeMillis(1711L);
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      services_HTTP_Result0.reset();
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP("", (-692));
      assertFalse(services_SIMPLE_Result0.works);
      assertEquals(0L, services_SIMPLE_Result0.time);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis(1909);
      System.setCurrentTimeMillis(1909);
      System.setCurrentTimeMillis(1909);
      System.setCurrentTimeMillis((-27L));
      System.setCurrentTimeMillis(1909);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("G~bSgY:n~-&Ao", 1909);
      services_SIMPLE_Result0.reset();
      System.setCurrentTimeMillis(1L);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = new Services.HTTP_Result();
      assertEquals(0, services_HTTP_Result0.code);
      
      services_HTTP_Result0.code = 142;
      services_HTTP_Result0.works = services_HTTP_Result0.works;
      services_HTTP_Result0.toString();
      System.setCurrentTimeMillis(142);
      services_HTTP_Result0.Error = "**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 142\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****";
      services_HTTP_Result0.works = true;
      Services.HTTP_Result services_HTTP_Result1 = new Services.HTTP_Result();
      assertFalse(services_HTTP_Result1.works);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1093L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-3881L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-24L));
      System.setCurrentTimeMillis((-11L));
      System.setCurrentTimeMillis(20L);
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testSMTP(">Oa[EYm'-<+Qp~(H;", 0);
      System.setCurrentTimeMillis(0L);
      services_SIMPLE_Result0.toString();
      System.setCurrentTimeMillis(1711L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1093L);
      System.setCurrentTimeMillis((-904L));
      System.setCurrentTimeMillis(20L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTPS("fJv=T*4XNpvOrtHJb", (-2361));
      Services.testHTTPS("", 0);
      String string0 = services_HTTP_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Poid de la page : 0 octets\n** Code de page : 0\n** Erreur g\u00E9n\u00E9r\u00E9e : **URL Mal Form\u00E9** (java.net.MalformedURLException: Invalid port number :-2361) **.\n****", string0);
      
      Services.SIMPLE_Result services_SIMPLE_Result0 = new Services.SIMPLE_Result();
      String string1 = services_SIMPLE_Result0.toString();
      assertEquals("**** Resultat : \n** Fonctionnement : false\n** Temps : 0 ms\n** Erreur g\u00E9n\u00E9r\u00E9e : .\n****", string1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Services.SIMPLE_Result services_SIMPLE_Result0 = Services.testPOP3("** Erreur g\u00E9n\u00E9r\u00E9e : ", (-3850));
      assertEquals(0L, services_SIMPLE_Result0.time);
      assertFalse(services_SIMPLE_Result0.works);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("|vV DB~Bui>;cs", (-1772));
      assertEquals(0, services_HTTP_Result0.code);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP("#lj^E0<I'>S|{xn]FN", 1387);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0L, services_HTTP_Result0.time);
      assertFalse(services_HTTP_Result0.works);
      assertEquals(0, services_HTTP_Result0.code);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Services.HTTP_Result services_HTTP_Result0 = Services.testHTTP(",x3ROId", 0);
      assertEquals(0L, services_HTTP_Result0.time);
      assertEquals(0, services_HTTP_Result0.page_weight);
      assertEquals(0, services_HTTP_Result0.code);
      assertFalse(services_HTTP_Result0.works);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Services services0 = new Services();
  }
}
