/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 19 21:44:44 GMT 2019
 */

package state;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.EOFException;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.util.Enumeration;
import java.util.LinkedList;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import state.Packable;
import state.Party;
import state.Player;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Player_ESTest extends Player_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.5594415416798357
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Player player0 = new Player(2926);
      player0.id = 159;
      player0.getSubparty();
      player0.setMoney((-1.0F));
      player0.pack();
      player0.setZ(2926);
      player0.getMoney();
      player0.reset(false);
      player0.type();
      player0.pack();
      player0.getMoney();
      player0.getMoney();
      System.setCurrentTimeMillis(159);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Player player0 = new Player(787, "", 787);
      System.setCurrentTimeMillis(1392409281320L);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.915376834087468
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Player player0 = new Player();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player1.setZ((-116.984F));
      player0.setJoinOK(player1, false);
      player0.setJoinOK(player1, false);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte)14;
      byteArray0[2] = (byte) (-81);
      byteArray0[3] = (byte)3;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      player1.setConnected(false);
      player0.setY(0.0F);
      player0.setY(0.1F);
      player0.isJoinOK(player1, true);
      player0.pack();
      player0.getZ();
      player1.getZ();
      player0.getMoney();
      player1.isJoinOK(player0, true);
      System.setCurrentTimeMillis((short)4919);
      player1.type();
      System.setCurrentTimeMillis((-411L));
      boolean boolean0 = player1.isJoinOK(player0, false);
      assertEquals(0.1F, player0.getY(), 0.01F);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      System.setCurrentTimeMillis((-1232L));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Player player0 = new Player(252, "state.Party", 4);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)0;
      player0.setMoney(252);
      byteArray0[2] = (byte) (-53);
      byteArray0[3] = (byte)16;
      player0.unpack(byteArray0);
      player0.getZ();
      player0.getMoney();
      float float0 = player0.getX();
      assertEquals(252.0F, player0.getMoney(), 0.01F);
      assertEquals(10.0F, float0, 0.01F);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.052128844641025
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Player player0 = new Player(27203);
      player0.next = null;
      player0.pack();
      player0.setConnected(false);
      byte[] byteArray0 = player0.pack();
      player0.unpack(byteArray0);
      player0.type();
      player0.pack();
      player0.isConnected();
      Player player1 = new Player((short)4919, "", "", 311, 1683);
      player0.isJoinOK(player1, false);
      assertFalse(player0.isConnected());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.784066574475527
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1321L);
      Player player0 = new Player((-427), "", "mI>l<Jf`8BJd#G#", (-1599));
      player0.setX(0L);
      Player player1 = new Player(329, "yLk}Fr<QTI2e;Z6@g", "", (-427), (-29696));
      player0.setJoinOK(player1, true);
      player0.getX();
      player1.setY(1321L);
      player0.getSubparty();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mI>l<Jf`8BJd#G#");
      player0.isBoss();
      float float0 = player1.getZ();
      assertEquals(1321.0F, player1.getY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Player player0 = new Player((-1166), (String) null, (String) null, (-683), (-683));
      player0.setConnected(true);
      Player player1 = new Player((short)4919, "<<", (-683));
      player0.remove(player1);
      player0.getIP();
      EvoSuiteFile evoSuiteFile0 = null;
      MockFile mockFile0 = new MockFile((String) null, "<<");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // charsetName
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.369743730399664
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Player player0 = new Player((-264), "", "", (-264), (-264));
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
      
      player0.pack();
      player0.setY(0.0F);
      int int0 = player0.getPictureId();
      Player player2 = new Player((-264), "", (short)4919);
      player2.next = (Party) player1;
      player0.setConnected(true);
      int int1 = player0.gangStrength();
      assertTrue(int1 == int0);
      
      player0.setJoinOK(player1, true);
      player1.getStrength();
      player0.getTimeOfDeath();
      Player player3 = new Player(1, "", (-3398));
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertTrue(boolean0);
      
      player3.getTimeOfDeath();
      assertEquals((-3398), player3.getPictureId());
      
      int int2 = player1.getStrength();
      assertEquals("Player-1", player1.toString());
      assertEquals(1, int2);
      
      int int3 = player0.getStrength();
      assertTrue(player0.isConnected());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals((-264), int3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.7914234446919735
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Player player0 = new Player(1443);
      player0.setDead();
      player0.id = 1443;
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.setZ(1443);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Player.unpack(): *** WARNING *** data is not of proper type!");
      player0.getIP();
      player0.getZ();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      DataInputStream dataInputStream0 = new DataInputStream(mockFileInputStream0);
      int int0 = Packable.TEXT_MESSAGE;
      player0.isJoinOK(player1, false);
      System.setCurrentTimeMillis(1443);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7896843142571908
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.skip((-3019L));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)36;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream1 = new DataInputStream((InputStream) null);
      Player player0 = new Player((byte) (-56), "", "", (byte)114, (byte)114);
      player0.setX(1377);
      player0.setJoinOK(player0, false);
      player0.getX();
      player0.setY(0.0F);
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.isJoinOK(player0, true);
      float float0 = player0.getZ();
      assertEquals(1377.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.054403796163291
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.reset(true);
      player0.setDead((-1L), true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player1 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player0.boss = (Party) player1;
      player1.next = (Party) player0;
      player0.remove(player1);
      player0.getTimeOfDeath();
      Player player2 = new Player((short)4919, "G\"H)z", 4);
      player0.isJoinOK(player0, true);
      player0.pack();
      assertEquals((-1L), player0.getTimeOfDeath());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Player player0 = new Player((-266), "", (-266));
      player0.setY((-1267.0F));
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getY();
      Player player1 = new Player();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)55;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)55;
      byteArray0[3] = (byte)10;
      System.setCurrentTimeMillis((-3522L));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.skip((-3019L));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)31;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      System.setCurrentTimeMillis((byte)31);
      System.setCurrentTimeMillis((-1L));
      Player player0 = new Player();
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream2);
      assertEquals(0, player0.getPictureId());
      assertFalse(boolean0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertEquals("Player-1", player0.getName());
      assertFalse(player0.isDead());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Player player0 = new Player(859);
      int int0 = 7720;
      // Undeclared exception!
      try { 
        player0.setJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.5531257522061517
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Player player0 = new Player((-1089), "jNPmGhrEaBN;9EM", 767);
      player0.add(player0);
      player0.getX();
      byte[] byteArray0 = player0.pack();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 0, 252);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      player0.unpack(dataInputStream0);
      float float0 = player0.getY();
      assertEquals((-65), player0.getId());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1321L);
      System.setCurrentTimeMillis(0L);
      Player player0 = new Player((-3495));
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-122);
      byteArray0[1] = (byte) (-53);
      byteArray0[2] = (byte)65;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)3;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-3495), (byte)9);
      byteArrayInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      // Undeclared exception!
      try { 
        player0.unpack(dataInputStream0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Player player0 = new Player(1616, "~;i3FZ1:mPFuMg", "~;i3FZ1:mPFuMg", 4919, (-2960));
      FileSystemHandling.shouldAllThrowIOExceptions();
      DataOutputStream dataOutputStream0 = new DataOutputStream((OutputStream) null);
      // Undeclared exception!
      try { 
        player0.pack(dataOutputStream0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataOutputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.688514447186191
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1321L);
      Player player0 = new Player((-1));
      player0.setX(0L);
      Player player1 = new Player(1, "module.ModuleBrowserDialog$ModuleFilter", "module.ModuleBrowserDialog$ModuleFilter", 879);
      player0.setJoinOK(player1, true);
      player0.getX();
      player0.setY(1.0F);
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.isJoinOK(player1, true);
      float float0 = player0.getZ();
      assertEquals(1.0F, player0.getY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedOutputStream0.flush();
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.skip((-3019L));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)31;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      Player player0 = new Player(1377, "", "", 239);
      player0.setX(1377);
      player0.setJoinOK(player0, true);
      player0.getX();
      player0.setY(0.0F);
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.isJoinOK(player0, true);
      float float0 = player0.getZ();
      assertEquals(1377.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1282294761213207
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      float float0 = player0.getX();
      assertEquals(10.0F, float0, 0.01F);
      
      player0.pack();
      player0.setY(0.0F);
      int int0 = player0.getPictureId();
      assertEquals((-264), int0);
      
      player0.next = (Party) player1;
      Player player2 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player0.boss = (Party) player2;
      player2.next = (Party) player0;
      Party party0 = player1.prev;
      player1.remove(player2);
      long long0 = player0.getTimeOfDeath();
      assertEquals(0L, long0);
      
      Player player3 = new Player((short)4919, "G\"H)z", (short)4919);
      boolean boolean0 = player0.isJoinOK(player1, true);
      assertTrue(boolean0);
      
      player1.pack();
      assertEquals("Player-1", player1.toString());
      
      System.setCurrentTimeMillis((short)4919);
      player0.toString();
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.4030604410669003
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Player player0 = new Player();
      player0.reset(false);
      player0.remove((Party) null);
      player0.getTimeOfDeath();
      player0.getTimeOfDeath();
      player0.getTimeOfDeath();
      player0.getZ();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Player player1 = new Player((-1234), "", (String) null, 2, 6);
      player0.setY(2143.9915F);
      player1.setDead((-1980L));
      player1.gangStrength();
      player1.add((Party) null);
      Player player2 = new Player();
      player2.setJoinOK(player1, false);
      player0.reset(true);
      player1.isJoinOK(player2, true);
      player0.getTimeOfDeath();
      player0.getX();
      player1.getIP();
      assertEquals((-1980L), player1.getTimeOfDeath());
      
      System.setCurrentTimeMillis(6);
      player2.pack();
      assertEquals("Player-1", player2.getName());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Player player0 = new Player(2771, "", 2771);
      player0.setY(1.0F);
      player0.getY();
      player0.getSubparty();
      player0.isConnected();
      player0.type();
      player0.getY();
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream0 = new DataInputStream(sequenceInputStream0);
      player0.unpack(dataInputStream0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte) (-4);
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)51;
      byteArray0[5] = (byte) (-6);
      byteArray0[6] = (byte)4;
      byteArray0[7] = (byte) (-76);
      try { 
        dataInputStream0.readFully(byteArray0);
        fail("Expecting exception: EOFException");
      
      } catch(EOFException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.DataInputStream", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.5845489468648077
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.getX();
      byte[] byteArray0 = player0.pack();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player2 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player0.head = (Party) player2;
      player2.next = (Party) player1;
      player0.getMoney();
      player0.setDead();
      player2.pack();
      player0.unpack(byteArray0);
      player0.setMoney((-264));
      player0.getZ();
      player2.setDead();
      player2.setMoney(0.0F);
      player0.isJoinOK(player2, false);
      player1.setDead((long) (short)4919);
      player1.setJoinOK(player0, false);
      player2.getTimeOfDeath();
      boolean boolean0 = player2.isJoinOK(player0, true);
      assertEquals(1392409281320L, player2.getTimeOfDeath());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.672435852819856
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player1.getX();
      byte[] byteArray0 = player0.pack();
      player1.setY(0.0F);
      player0.getPictureId();
      Player player2 = new Player((-723), "", (-264));
      player2.getMoney();
      player1.setDead();
      byte[] byteArray1 = player0.pack();
      player0.unpack(byteArray1);
      player1.unpack(byteArray0);
      player1.setMoney(2556.1968F);
      player2.getZ();
      player0.prev = (Party) player2;
      player2.setDead();
      player0.setMoney(0.1F);
      player0.isJoinOK(player2, true);
      player2.type();
      Player player3 = new Player((-3), "gui.ModuleBrowserDialog$ModuleFilter", (-264));
      Player player4 = new Player((-264), "gui.ModuleBrowserDialog$ModuleFilter", "0.0.0.0", 0);
      player4.setJoinOK(player1, false);
      player2.getName();
      player1.type();
      assertEquals(2556.1968F, player1.getMoney(), 0.01F);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.3486282611708154
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Player player0 = new Player(823, "joIzD}}h 8F]4", "itu[]vCbAK#_", 823, 0);
      byte[] byteArray0 = player0.pack();
      player0.gangStrength();
      Player player1 = new Player(823, "qzVXe", "qzVXe", (-580), 1148);
      player1.setDead(0L);
      player1.gangStrength();
      player1.setMoney(0);
      player0.add(player1);
      player0.setY((-1370.4F));
      player1.setX(10.0F);
      player0.unpack(byteArray0);
      Player player2 = new Player(1148, "qzVXe", 4);
      player2.pack();
      player0.add(player2);
      player0.isDead();
      player1.isDead();
      player0.getPictureId();
      player1.getTimeOfDeath();
      assertTrue(player1.isDead());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Player player0 = new Player((-3584));
      player0.toString();
      String string0 = player0.toString();
      assertEquals(0, player0.getPictureId());
      assertEquals(1, player0.getStrength());
      assertEquals("Player-3584", string0);
      assertEquals("0.0.0.0", player0.getIP());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Player player0 = new Player(2, (String) null, 1);
      player0.toString();
      assertEquals(1, player0.getStrength());
      assertEquals(1, player0.getPictureId());
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write((-1744));
      pipedOutputStream0.flush();
      bufferedInputStream0.markSupported();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      pipedOutputStream0.flush();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream0.flush();
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-15360));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      pipedInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.read();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      DataInputStream dataInputStream4 = new DataInputStream(pipedInputStream1);
      Player player0 = new Player(1, "E>B'*2Z9|&qPPO", "gui.Module+rowserDialog$ModuleFilter", (-15360));
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Player player0 = new Player(0, (String) null, (String) null, 0);
      player0.setDead();
      player0.getName();
      player0.getX();
      player0.gangStrength();
      Party party0 = player0.gangBoss();
      Party party1 = player0.gangBoss();
      party0.remove(party1);
      player0.add(party0);
      player0.getPictureId();
      // Undeclared exception!
      try { 
        player0.unpack((DataInputStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4700338442560503
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Player player0 = new Player(823, "joJzD}}ho78F]4", "itu[]vCbAK#_", 823, 0);
      player0.pack();
      player0.gangStrength();
      Player player1 = new Player(823, "qzVXe", "qzVXe", (-580), 1148);
      player1.setDead(0L);
      player1.gangStrength();
      player1.setMoney(0);
      player0.add(player1);
      player0.setY((-1370.4F));
      player1.setX(10.0F);
      player1.id = 1;
      player0.id = 1;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Player");
      player1.setConnected(false);
      player1.gangStrength();
      player0.setJoinOK(player1, false);
      player0.getStrength();
      player0.getTimeOfDeath();
      player1.head = (Party) player0;
      player1.setDead(2967L, true);
      player1.isJoinOK(player0, false);
      player0.reset(false);
      assertEquals((-1370.4F), player0.getY(), 0.01F);
      
      player1.setZ(1);
      player1.setDead((long) 0);
      assertTrue(player1.isDead());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.417645625673435
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Player player0 = new Player(0, (String) null, 0);
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.getX();
      player1.pack();
      player1.setY(0.0F);
      player1.getPictureId();
      Player player2 = new Player((short)4919, "", 0);
      assertEquals(10.0F, player2.getX(), 0.01F);
      
      player2.setX(0.1F);
      player0.setConnected(true);
      player0.gangStrength();
      player1.setJoinOK(player0, false);
      Player player3 = new Player((short)4919, "", "", 0, 10);
      player3.getStrength();
      Player player4 = new Player(1, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0);
      boolean boolean0 = player4.isJoinOK(player1, false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9720861369674885
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Player player0 = new Player(1842, "", "", 10);
      Player player1 = new Player();
      player1.setJoinOK(player0, false);
      player0.getX();
      player0.pack();
      player0.setY(3052.0342F);
      player1.getPictureId();
      Player player2 = new Player(2557, "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 2557);
      Party party0 = player0.prev;
      player0.remove((Party) null);
      assertEquals(3052.0342F, player0.getY(), 0.01F);
      
      Player player3 = new Player(5, (String) null, 3410);
      player3.isJoinOK(player2, false);
      player1.pack();
      assertEquals("Player-1", player1.getName());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.1279462185041473
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.reset(true);
      player0.getY();
      player0.setJoinOK(player0, true);
      player0.getX();
      player0.setY(0.0F);
      player0.getPictureId();
      Player player1 = new Player((-264), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", (-723));
      player1.setX((-29696));
      Player player2 = new Player(720, "U", "U", (short)4919, (-264));
      player1.setJoinOK(player0, true);
      player0.getX();
      player0.setY((-723));
      LinkedList<Party> linkedList0 = new LinkedList<Party>();
      player0.isJoinOK(player2, true);
      float float0 = player0.getZ();
      assertEquals((-723.0F), player0.getY(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      System.setCurrentTimeMillis(4219L);
      Player player0 = new Player(253, "", 1106);
      String string0 = player0.getIP();
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(1106, player0.getPictureId());
      assertEquals("0.0.0.0", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write((-1744));
      pipedOutputStream0.flush();
      bufferedInputStream0.markSupported();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      pipedOutputStream0.flush();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-15360));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      pipedInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      sequenceInputStream0.read();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration2);
      DataInputStream dataInputStream4 = new DataInputStream(pipedInputStream1);
      Player player0 = new Player(1, "E>B'*2Z9|&qPPO", "gui.Module+rowserDialog$ModuleFilter", (-15360));
      player0.setConnected(false);
      System.setCurrentTimeMillis((-15360));
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.759673390745343
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Player player0 = new Player(12333);
      player0.gangStrength();
      Player player1 = new Player((-1));
      player0.setZ((short)4919);
      player0.setY(0.1F);
      player0.add(player1);
      player1.gangStrength();
      player0.next = (Party) player1;
      player0.type();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      player1.setZ(0.2F);
      player0.setX((-1));
      player0.getMoney();
      player1.prev = (Party) player0;
      player1.type();
      player1.remove(player0);
      player0.pack();
      player1.getMoney();
      player0.getMoney();
      player0.isJoinOK(player1, true);
      player0.getMoney();
      player0.type();
      System.setCurrentTimeMillis(0L);
      player0.pack();
      assertEquals(0.1F, player0.getY(), 0.01F);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write((-1744));
      pipedOutputStream0.flush();
      bufferedInputStream0.markSupported();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      pipedOutputStream0.flush();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream0.flush();
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-15360));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      pipedInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.read();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      DataInputStream dataInputStream4 = new DataInputStream(pipedInputStream1);
      Player player0 = new Player(1, "E>B'*2Z9|&qPPO", "gui.Module+rowserDialog$ModuleFilter", (-15360));
      DataInputStream dataInputStream5 = new DataInputStream(sequenceInputStream2);
      boolean boolean0 = player0.unpack(dataInputStream5);
      assertEquals("E>B'*2Z9|&qPPO", player0.getIP());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals((-15360), player0.getPictureId());
      assertFalse(player0.isDead());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1262368167947456
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C4q&/&Dq^PC");
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      player0.getX();
      player0.pack();
      player0.setY((-2920.398F));
      player0.getSubparty();
      int int0 = Packable.GAME_EVENT;
      Player player2 = new Player(3, "C4q&/&Dq^PC", (-717));
      player1.prev = (Party) player2;
      player2.setX(2262.531F);
      Player player3 = new Player(3, "KL5IT/HE`", "C4q&/&Dq^PC", 4919, 4919);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        player3.unpack((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedOutputStream0.write((-1744));
      pipedOutputStream0.flush();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      pipedOutputStream0.flush();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-15360));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      pipedInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.read();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      DataInputStream dataInputStream4 = new DataInputStream((InputStream) null);
      Player player0 = new Player(6, "E>B'*2Z9|&qPPO", "gui.ModuleBrowserDialog$ModuleFilter", 6);
      DataOutputStream dataOutputStream0 = new DataOutputStream(pipedOutputStream0);
      player0.pack(dataOutputStream0);
      player0.pack();
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("E>B'*2Z9|&qPPO", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      assertEquals(6, player0.getPictureId());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Player player0 = new Player((-264), "", (-264));
      player0.reset(false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      player0.reset(true);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getMoney(), 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals((-264), player0.getPictureId());
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertFalse(player0.isDead());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Player player0 = new Player((-264), "", (-264));
      player0.setZ((-264));
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)102;
      byteArray0[1] = (byte)5;
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedOutputStream0.write((-1744));
      pipedOutputStream0.flush();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      pipedOutputStream0.flush();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-15360));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(dataInputStream1, pipedInputStream0);
      sequenceInputStream0.read();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream1);
      Enumeration<ObjectInputStream> enumeration1 = (Enumeration<ObjectInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      DataInputStream dataInputStream4 = new DataInputStream(dataInputStream2);
      Player player0 = new Player((-3795), (String) null, (String) null, 1337);
      // Undeclared exception!
      try { 
        player0.pack();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Player player0 = new Player();
      player0.setDead(0L, true);
      player0.setX((-1.0F));
      assertEquals(0.0F, player0.getY(), 0.01F);
      
      player0.setY(1.0F);
      player0.type();
      Party party0 = player0.head;
      player0.next = null;
      player0.type();
      int int0 = player0.type();
      assertEquals(5, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      float float0 = Player.TOLERANCE;
      Player player0 = new Player();
      Party party0 = player0.prev;
      Player player1 = new Player((short)4919, "G\"H)z", 4);
      assertEquals(4, player1.getPictureId());
      
      boolean boolean0 = player0.isConnected();
      assertEquals(1, player0.getStrength());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(boolean0);
      assertFalse(player0.isDead());
      assertEquals("Player-1", player0.toString());
      assertEquals(0, player0.getPictureId());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Player player0 = new Player(3);
      String string0 = player0.getName();
      assertEquals("Player3", string0);
      
      float float0 = player0.getMoney();
      assertEquals(0.0F, float0, 0.01F);
      
      float float1 = player0.getZ();
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertFalse(player0.isDead());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float1, 0.01F);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals(float1, float0, 0.01F);
      assertEquals(0, player0.getPictureId());
      assertEquals("0.0.0.0", player0.getIP());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.skip((-3019L));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-56);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)59;
      pipedOutputStream0.write(byteArray0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      DataInputStream dataInputStream1 = new DataInputStream(pipedInputStream0);
      Player player0 = new Player(1377, "", "", 239);
      player0.setX(1377);
      Player player1 = new Player((-1599), "", "I>l<Jc`8BJd#G#", 286, (-29696));
      player0.setJoinOK(player1, true);
      player1.getX();
      player0.setY(0.0F);
      player0.getSubparty();
      FileSystemHandling.shouldAllThrowIOExceptions();
      player1.isDead();
      float float0 = player0.getZ();
      assertEquals(1377.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write((-1744));
      pipedOutputStream0.flush();
      bufferedInputStream0.markSupported();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      pipedOutputStream0.flush();
      DataInputStream dataInputStream1 = new DataInputStream(bufferedInputStream0);
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream0.flush();
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-15360));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      pipedInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.read();
      DataInputStream dataInputStream3 = new DataInputStream(dataInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      DataInputStream dataInputStream4 = new DataInputStream(pipedInputStream1);
      Player player0 = new Player(1, "E>B'*2Z9|&qPPO", "gui.Module+rowserDialog$ModuleFilter", (-15360));
      // Undeclared exception!
      try { 
        player0.isJoinOK((Player) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("state.Player", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.41794297922681
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Player player0 = new Player(0, "", "gui.ModuleBrowserDialog$ModuleFilter", 5, 0);
      player0.reset(true);
      player0.getY();
      Player player1 = new Player();
      player0.setJoinOK(player1, true);
      assertEquals(0.0F, player0.getY(), 0.01F);
      
      player1.getX();
      player1.pack();
      player0.setY((-1.0F));
      player0.getPictureId();
      Player player2 = new Player((-1714), "Player.unpack(): *** WARNING *** [EOF] data was incomplete: ", 0);
      player0.setConnected(true);
      player0.gangStrength();
      player2.setJoinOK(player1, true);
      player1.getStrength();
      player1.getTimeOfDeath();
      Player player3 = new Player((short)4919, "", 5);
      player3.setConnected(false);
      player1.isJoinOK(player2, true);
      player1.pack();
      assertEquals(0, player1.getPictureId());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Player player0 = new Player(0, "9e", "9e", 0);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-52);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)8;
      byteArray0[3] = (byte)114;
      byteArray0[4] = (byte)29;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)114;
      byteArray0[7] = (byte)114;
      byteArray0[8] = (byte) (-70);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0, (byte)114);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      boolean boolean0 = player0.unpack(dataInputStream0);
      assertTrue(player0.isConnected());
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertEquals(0, player0.getPictureId());
      assertFalse(player0.isDead());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.852140740384332
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-56);
      byteArray0[1] = (byte) (-67);
      byteArray0[2] = (byte)114;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)31;
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      Player player0 = new Player(1377, "", "", 239);
      player0.setX(1377);
      Player player1 = new Player((-1599), "", "mI>l<Jf`8BJd#G#", 286, (-29696));
      player1.gangStrength();
      player0.setJoinOK(player1, true);
      player1.getX();
      player0.setY(0.0F);
      player0.getSubparty();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "mI>l<Jf`8BJd#G#");
      float float0 = player0.getZ();
      assertEquals(1377.0F, player0.getX(), 0.01F);
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1321L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(1321L);
      Player player0 = new Player(1147, "CGX!^Wz", "CGX!^Wz", 1147, (-2118));
      float float0 = player0.getMoney();
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertTrue(player0.isConnected());
      assertFalse(player0.isDead());
      assertEquals(1147, player0.getPictureId());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertEquals((-2118), player0.getStrength());
      assertEquals(0.0F, float0, 0.01F);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Player player0 = new Player(0, "`S|p=S7.62S_%FknE", "H", (-691), (-3051));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)106;
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)34;
      byteArray0[3] = (byte) (-107);
      byteArray0[4] = (byte) (-44);
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte)55;
      byteArray0[7] = (byte)98;
      byteArray0[8] = (byte)1;
      player0.unpack(byteArray0);
      assertEquals((-691), player0.getPictureId());
      assertFalse(player0.isDead());
      assertEquals((-3051), player0.getStrength());
      assertEquals("`S|p=S7.62S_%FknE", player0.getIP());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertTrue(player0.isConnected());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.markSupported();
      pipedOutputStream0.write((-1744));
      pipedOutputStream0.flush();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-3795));
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      pipedOutputStream0.flush();
      pipedInputStream0.markSupported();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream0.flush();
      pipedInputStream0.skip((-1744));
      pipedOutputStream0.write((-15360));
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      pipedInputStream0.read();
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream0.flush();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(pipedInputStream0, pipedInputStream0);
      sequenceInputStream0.read();
      DataInputStream dataInputStream2 = new DataInputStream(dataInputStream0);
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration2);
      DataInputStream dataInputStream3 = new DataInputStream(pipedInputStream1);
      Player player0 = new Player();
      boolean boolean0 = player0.unpack(dataInputStream3);
      assertEquals(1, player0.getStrength());
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertTrue(player0.isConnected());
      assertEquals("0.0.0.0", player0.getIP());
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(boolean0);
      assertFalse(player0.isDead());
      assertEquals(0, player0.getPictureId());
      assertEquals("Player-1", player0.getName());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Player player0 = new Player(1, "", "l#+9$)", 1);
      Party party0 = new Party(1);
      player0.prev = party0;
      party0.id = 5;
      int int0 = player0.getPictureId();
      assertEquals(1, int0);
      assertEquals(0.0F, player0.getY(), 0.01F);
      assertEquals(10.0F, player0.getX(), 0.01F);
      assertEquals(0L, player0.getTimeOfDeath());
      assertFalse(player0.isDead());
      assertEquals("", player0.getIP());
      assertEquals(1, player0.getStrength());
      assertTrue(player0.isConnected());
      
      float float0 = Player.MOVE_DISTANCE;
      int int1 = Packable.ACTION;
      assertFalse(int1 == int0);
  }
}
