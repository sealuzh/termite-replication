/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 13:35:21 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1013448627418367
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesConnectionTime((-1));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize((-8));
      advancedSettings0.setClientIdentifier("]D_%S.<h#i2!");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.setClientSocketTrafficClass("`g");
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientIdentifier();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals("]D_%S.<h#i2!", advancedSettings0.getClientIdentifier());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.6401084104265653
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(1078);
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      AdvancedSettings advancedSettings1 = new AdvancedSettings();
      advancedSettings1.setClientSocketReceiveBufferSize(1);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings1.setBacklog(1370);
      advancedSettings0.setClientSocketTrafficClass("|4[[&4FA~EJ$[Q}");
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings1.toXML("");
      advancedSettings1.getSocketLinger();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings1.getUseDirectByteBuffer();
      advancedSettings1.setCharset("");
      assertEquals(1370, advancedSettings1.getBacklog());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.009697439439378
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("g!");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(156);
      advancedSettings0.setMaxThreadsForNioWrite(2240);
      advancedSettings0.setPerformancePreferencesLatency(0);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setMaxThreadsForNioWrite((-1));
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth((-1));
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(2126);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(2126, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2261289670319746
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(21);
      advancedSettings0.setClientSocketReceiveBufferSize(21);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(156);
      advancedSettings0.setClientIdentifier("\t<qsobject-pool-maker>");
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketSendBufferSize(21);
      advancedSettings0.setClientSocketSendBufferSize(156);
      advancedSettings0.setClientIdentifier("\t<client-socket-receive-buffer-size>");
      assertEquals("\t<client-socket-receive-buffer-size>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setMaxThreadsForNioWrite((-826));
      advancedSettings0.getMaxThreadsForNioWrite();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals((-826), advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.581032360214905
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1345));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(1078);
      advancedSettings0.setClientIdentifier("jg!");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-39));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(1078);
      advancedSettings0.setClientIdentifier("A}ujr6");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals("A}ujr6", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      
      advancedSettings0.setMaxThreadsForNioWrite(0);
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.278498493717339
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency((-9));
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.toXML("|E");
      advancedSettings0.setPerformancePreferencesLatency((-3518));
      advancedSettings0.toXML((String) null);
      assertEquals((-3518), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2874021458321834
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize(21);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass((String) null);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setPerformancePreferencesConnectionTime(1);
      advancedSettings0.setClientSocketSendBufferSize(156);
      advancedSettings0.setClientIdentifier("\t<qsobject-pool-maker>");
      advancedSettings0.setPerformancePreferencesConnectionTime(21);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("\t<qsobject-pool-maker>");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setMaxThreadsForNioWrite(156);
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getClientIdentifier();
      assertEquals("\t<qsobject-pool-maker>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(1960);
      advancedSettings0.setSocketLinger(1216);
      int int0 = advancedSettings0.getSocketLinger();
      assertEquals(1960, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(1216, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-599));
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(false);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(283);
      int int0 = advancedSettings0.getBacklog();
      assertEquals(283, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize((-1));
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.508991312519329
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1));
      advancedSettings0.setClientSocketSendBufferSize((-1345));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientSocketSendBufferSize(1078);
      advancedSettings0.setClientIdentifier("jg!");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketReceiveBufferSize((-39));
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(1078);
      advancedSettings0.setClientIdentifier("A}ujr6");
      advancedSettings0.toXML("jg!");
      assertEquals(1078, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.5821447072671853
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setClientSocketTrafficClass("jg!");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(156);
      advancedSettings0.setClientIdentifier("]D_%S.<h#i2!");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(156, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.791105871307158
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(14);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientSocketSendBufferSize(156);
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("]D_%S.<h#i2!");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientIdentifier("wa3M{iY'");
      assertEquals("wa3M{iY'", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.getSocketLinger();
      advancedSettings0.getCharset();
      assertEquals(0, advancedSettings0.getSocketLinger());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9740866340645037
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("GD;A[1ytw|");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("zbxQ5|iHKbFi\"qfJED");
      advancedSettings0.setClientIdentifier("GD;A[1ytw|");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      assertEquals("GD;A[1ytw|", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(182);
      assertEquals(182, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(20);
      assertEquals(20, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize(3947);
      advancedSettings0.setClientSocketReceiveBufferSize(3947);
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals(3947, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesLatency();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.util.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.util.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0910596228402674
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertNotNull(string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setPerformancePreferencesLatency((-3518));
      assertEquals((-3518), advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      boolean boolean0 = advancedSettings0.getDebugNonBlockingMode();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      advancedSettings0.setCharset("");
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9549478780836425
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset((String) null);
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("\t<charset>");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // \t<charset>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }
}
