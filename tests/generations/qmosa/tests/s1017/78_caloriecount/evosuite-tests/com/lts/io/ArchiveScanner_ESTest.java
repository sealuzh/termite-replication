/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 13:33:01 GMT 2019
 */

package com.lts.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lts.io.ArchiveScanner;
import com.lts.io.DirectoryScanner;
import com.lts.io.ImprovedFile;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.SequenceInputStream;
import java.io.UnsupportedEncodingException;
import java.net.URI;
import java.util.Collection;
import java.util.Locale;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ArchiveScanner_ESTest extends ArchiveScanner_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.5458484551923064
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6$HB8;]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "(6$HB8;]aU";
      Vector<Integer> vector1 = new Vector<Integer>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add(pipedInputStream0);
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      vector1.add(integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      vector1.stream();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.read(byteArray0);
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      vector0.addAll((Collection<? extends PipedInputStream>) vector2);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      vector0.add(pipedInputStream2);
      improvedFile0.createTempDir("QjZE", "QjZE");
      Integer integer1 = new Integer((-21));
      vector1.removeElement(integer1);
      Integer integer2 = new Integer((-21));
      pipedInputStream0.markSupported();
      archiveScanner0.processDirectory(improvedFile0, "", true);
      PipedInputStream pipedInputStream3 = null;
      try {
        pipedInputStream3 = new PipedInputStream(pipedOutputStream0, 3);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6$HB8;]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DirectoryScanner.matchPath("(6$HB8;]aU", "(6$HB8;]aU");
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "(6$HB8;]aU";
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      vector0.add(pipedInputStream1);
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      pipedOutputStream1.close();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      vector1.listIterator();
      vector0.addAll((Collection<? extends PipedInputStream>) vector1);
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream3.close();
      pipedInputStream1.markSupported();
      vector0.add(pipedInputStream3);
      Integer integer1 = new Integer((-21));
      vector0.add(pipedInputStream1);
      Vector<Object> vector2 = new Vector<Object>(vector1);
      archiveScanner0.dirsExcluded = vector2;
      Integer integer2 = new Integer((-21));
      pipedInputStream1.markSupported();
      archiveScanner0.setExcludes(stringArray0);
      archiveScanner0.processDirectory(improvedFile0, "(6$HB8;]aU", true);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("(6$HB8;]aU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6$HB8;]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "(6$HB8;]aU";
      Vector<Integer> vector1 = new Vector<Integer>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add(pipedInputStream0);
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      vector1.add(integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      vector1.stream();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.read(byteArray0);
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      vector0.addAll((Collection<? extends PipedInputStream>) vector2);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      pipedInputStream0.mark(1);
      pipedInputStream1.skip(0);
      pipedInputStream1.skip(0);
      pipedInputStream1.read(byteArray0);
      pipedInputStream2.markSupported();
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("(6$HB8;]aU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6ah<8B&$8A]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      stringArray0[0] = "(6ah<8B&$8A]aU";
      pipedOutputStream0.flush();
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesIncluded = vector0;
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedInputStream1.markSupported();
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      pipedOutputStream1.close();
      Consumer<InputStream> consumer0 = (Consumer<InputStream>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      archiveScanner0.setIncludes(stringArray0);
      pipedInputStream3.mark(35);
      pipedInputStream3.mark(654);
      pipedInputStream3.skip((-1L));
      Integer integer0 = new Integer((-189798631));
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      pipedInputStream2.markSupported();
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("(6ah<8B&$8A]aU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6$HB8;]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "(6$HB8;]aU";
      Vector<Integer> vector1 = new Vector<Integer>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add(pipedInputStream0);
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      vector1.add(integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      vector1.stream();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.read(byteArray0);
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      vector0.addAll((Collection<? extends PipedInputStream>) vector2);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.read(byteArray0);
      vector2.add(pipedInputStream1);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      vector0.addElement(pipedInputStream0);
      pipedInputStream1.mark((-752));
      pipedInputStream1.mark(654);
      pipedInputStream1.skip((-6L));
      vector2.add(pipedInputStream0);
      pipedInputStream0.read(byteArray0);
      vector2.add(pipedInputStream2);
      pipedInputStream0.markSupported();
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processDirectory(improvedFile0, "(6$HB8;]aU", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5629442020541537
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = "";
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      MockURI.URI("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.haveSlowResults = true;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.includes = stringArray0;
      boolean boolean0 = false;
      archiveScanner0.scandir(improvedFile0, "", false);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(improvedFile0, "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6$HB8;]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "(6$HB8;]aU";
      Vector<Integer> vector1 = new Vector<Integer>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add(pipedInputStream0);
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      vector1.add(integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      vector1.stream();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.read(byteArray0);
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      vector0.addAll((Collection<? extends PipedInputStream>) vector2);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      vector0.add(pipedInputStream2);
      Integer integer1 = new Integer((-21));
      vector1.removeElement(integer1);
      Integer integer2 = new Integer((-21));
      pipedInputStream0.markSupported();
      try { 
        archiveScanner0.processDirectory(improvedFile0, "l+DYygR", false);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/(6$HB8;]aU
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "";
      Vector<Integer> vector1 = new Vector<Integer>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(1);
      vector0.add(pipedInputStream0);
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      vector1.add(integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      vector1.stream();
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      vector0.addAll((Collection<? extends PipedInputStream>) vector2);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      Integer integer1 = new Integer((-21));
      vector1.removeElement(integer1);
      Integer integer2 = new Integer((-21));
      vector1.add(integer2);
      pipedInputStream0.markSupported();
      archiveScanner0.processDirectory(improvedFile0, "tU^+p", true);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, pipedInputStream1);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      System.setCurrentTimeMillis(1000000L);
      System.setCurrentTimeMillis(1000000L);
      System.setCurrentTimeMillis(1000000L);
      System.setCurrentTimeMillis((-21));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.55213793531794
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = "";
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      MockURI.create("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Vector<Integer> vector0 = new Vector<Integer>();
      Integer integer0 = new Integer((-167873487));
      vector0.add(integer0);
      archiveScanner0.dirsNotIncluded = vector0;
      archiveScanner0.includes = stringArray0;
      boolean boolean0 = true;
      archiveScanner0.scandir(improvedFile0, "", true);
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedFile improvedFile0 = null;
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner0.setBasedir((File) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = ".zip";
      String string0 = "IO eror scanning directory .jar";
      vector0.add((Object) null);
      stringArray0[1] = "IO eror scanning directory .jar";
      String string1 = "com.lts.LTSException";
      vector0.ensureCapacity(69);
      stringArray0[2] = "com.lts.LTSException";
      stringArray0[3] = "T";
      stringArray0[4] = ".tmp.jar";
      String string2 = "c4`4U3(V";
      stringArray0[5] = "c4`4U3(V";
      archiveScanner0.includes = stringArray0;
      archiveScanner0.filesExcluded = vector0;
      System.setCurrentTimeMillis(2);
      String string3 = "MFh01V#M?s`";
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("MFh01V#M?s`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.7862097648384696
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      ImprovedFile improvedFile0 = new ImprovedFile("Xrxg_O(?r;");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("Xrxg_O(?r;", (String) null, improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Xrxg_O(?r;";
      Vector<InputStream> vector0 = new Vector<InputStream>();
      archiveScanner0.filesNotIncluded = vector0;
      stringArray0[1] = "Xrxg_O(?r;";
      stringArray0[2] = "Xrxg_O(?r;";
      stringArray0[3] = "Xrxg_O(?r;";
      archiveScanner0.setIncludes(stringArray0);
      MockFile.createTempFile("Xrxg_O(?r;", "Xrxg_O(?r;");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      improvedFile0.setReadOnly();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=LVD.o@QD<`iGxb+");
      ImprovedFile improvedFile2 = new ImprovedFile("Xrxg_O(?r;");
      archiveScanner0.setIncludes(stringArray0);
      archiveScanner0.scandir(improvedFile0, ".JAR", false);
      long long0 = 1684L;
      System.setCurrentTimeMillis(long0);
      long long1 = 977L;
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      assertEquals(1, ArchiveScanner.DIRECTORY);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.892246898188396
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Xrxg_O(?r;/Xrxg_O(?r;0.tmp");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-103);
      byteArray0[1] = (byte)7;
      byteArray0[2] = (byte) (-55);
      byteArray0[3] = (byte) (-100);
      byteArray0[4] = (byte)6;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ImprovedFile improvedFile0 = new ImprovedFile("Xrxg_O(?r;");
      ImprovedFile improvedFile1 = ImprovedFile.createTempImprovedFile("Xrxg_O(?r;", (String) null, improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile1);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "Xrxg_O(?r;";
      stringArray0[1] = "Xrxg_O(?r;";
      stringArray0[2] = "Xrxg_O(?r;";
      stringArray0[3] = "Xrxg_O(?r;";
      archiveScanner0.setIncludes(stringArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      improvedFile0.setReadOnly();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=LVD.o@QD<`iGxb+");
      ImprovedFile improvedFile2 = new ImprovedFile("Xrxg_O(?r;");
      Vector<Integer> vector0 = new Vector<Integer>();
      archiveScanner0.filesExcluded = vector0;
      System.setCurrentTimeMillis((byte) (-100));
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, ".JAR", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7723221396381754
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "?[";
      ImprovedFile improvedFile0 = new ImprovedFile("?[", "?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      improvedFile0.setReadOnly();
      ArchiveScanner archiveScanner2 = new ArchiveScanner(improvedFile0);
      archiveScanner1.toFileType(improvedFile0);
      Vector<Object> vector0 = new Vector<Object>();
      archiveScanner1.dirsExcluded = vector0;
      System.setCurrentTimeMillis(archiveScanner1.DIRECTORY);
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      archiveScanner1.includes = archiveScanner2.DEFAULT_ARCHIVE_EXTENSIONS;
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(dataOutputStream0);
      // Undeclared exception!
      try { 
        archiveScanner1.processFile(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "?[";
      ImprovedFile improvedFile0 = new ImprovedFile("?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner1.myTempdir = improvedFile0;
      archiveScanner1.filesIncluded = vector0;
      String string1 = ".jar";
      DirectoryScanner.matchPath(".jar", ".jar");
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      archiveScanner1.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner1.processFile("?[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      String string0 = "?[";
      ImprovedFile improvedFile0 = new ImprovedFile("?[", "?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<String> vector0 = new Vector<String>();
      archiveScanner1.filesExcluded = vector0;
      String string1 = ".jar";
      DirectoryScanner.matchPath(".jar", ".jar");
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      archiveScanner1.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      archiveScanner1.filesExcluded = vector2;
      Vector<Integer> vector3 = null;
      archiveScanner1.filesIncluded = vector3;
      archiveScanner1.addDefaultExcludes();
      archiveScanner1.processArchive(improvedFile0, string1);
      ImprovedFile.createTempImprovedFile(string1, string0, improvedFile0);
      String string2 = ".WAR";
      String string3 = ".ZIP";
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(string2, string3);
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // .ZIP
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      String string0 = "?[";
      ImprovedFile improvedFile0 = new ImprovedFile("?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner1.filesIncluded = vector0;
      String string1 = ".jar";
      DirectoryScanner.matchPath(".jar", ".jar");
      archiveScanner1.setExcludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      archiveScanner1.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner1.processArchive(improvedFile0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      String string0 = "?[";
      ImprovedFile improvedFile0 = new ImprovedFile("?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner1.filesIncluded = vector0;
      String string1 = ".jar";
      DirectoryScanner.matchPath(".jar", ".jar");
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      archiveScanner1.addDefaultExcludes();
      try { 
        archiveScanner1.processArchive(improvedFile0, ".jar");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, ?[
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6ah<8B&$8A]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      DirectoryScanner.matchPath("(6ah<8B&$8A]aU", "(6ah<8B&$8A]aU");
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "(6ah<8B&$8A]aU";
      pipedOutputStream0.flush();
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      pipedOutputStream0.write(3);
      vector0.add(pipedInputStream1);
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream();
      pipedOutputStream1.flush();
      pipedOutputStream1.close();
      Vector<PipedInputStream> vector1 = new Vector<PipedInputStream>();
      vector1.add(pipedInputStream0);
      vector1.add(pipedInputStream1);
      vector1.add(pipedInputStream1);
      vector1.listIterator();
      vector0.addAll((Collection<? extends PipedInputStream>) vector1);
      PipedInputStream pipedInputStream2 = new PipedInputStream(pipedOutputStream1);
      PipedInputStream pipedInputStream3 = new PipedInputStream();
      pipedInputStream3.mark(654);
      pipedInputStream3.close();
      vector0.add(pipedInputStream3);
      Integer integer1 = new Integer(2);
      byte[] byteArray0 = new byte[0];
      pipedInputStream1.read(byteArray0);
      vector0.add(pipedInputStream1);
      pipedInputStream1.markSupported();
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processArchive(improvedFile0, "(6ah<8B&$8A]aU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("(6$HB8;]aU");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      String[] stringArray0 = new String[1];
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner0.dirsIncluded = vector0;
      stringArray0[0] = "(6$HB8;]aU";
      Vector<Integer> vector1 = new Vector<Integer>();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      vector0.add(pipedInputStream0);
      archiveScanner0.dirsNotIncluded = vector1;
      archiveScanner0.includes = stringArray0;
      Integer integer0 = new Integer(3);
      vector1.add(integer0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedOutputStream0.flush();
      vector1.stream();
      byte[] byteArray0 = new byte[0];
      pipedInputStream0.read(byteArray0);
      pipedOutputStream0.close();
      Vector<PipedInputStream> vector2 = new Vector<PipedInputStream>();
      vector0.addAll((Collection<? extends PipedInputStream>) vector2);
      PipedInputStream pipedInputStream1 = new PipedInputStream(pipedOutputStream0);
      pipedInputStream0.read(byteArray0);
      PipedInputStream pipedInputStream2 = new PipedInputStream();
      vector0.add(pipedInputStream2);
      improvedFile0.createTempDir("QjZE", "QjZE");
      Integer integer1 = new Integer((-21));
      vector1.removeElement(integer1);
      Integer integer2 = new Integer((-21));
      vector2.add(pipedInputStream2);
      pipedInputStream0.read(byteArray0);
      vector0.add(pipedInputStream2);
      pipedInputStream2.markSupported();
      archiveScanner0.setExcludes(stringArray0);
      // Undeclared exception!
      try { 
        archiveScanner0.processFile("(l\"!rp>9H1f$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "?[";
      ImprovedFile improvedFile0 = new ImprovedFile("?[", "?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      archiveScanner1.setIncludes(archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS);
      archiveScanner1.dirsIncluded = vector0;
      Vector<Object> vector1 = new Vector<Object>();
      vector0.stream();
      archiveScanner0.filesNotIncluded = vector1;
      // Undeclared exception!
      try { 
        archiveScanner1.processArchive(improvedFile0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8548720307766426
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("?[", "?[");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      System.setCurrentTimeMillis(1L);
      ImprovedFile improvedFile1 = new ImprovedFile("?[");
      ImprovedFile.createTempImprovedFile("JEMq~a{\"", "OMZ}H=dfL", improvedFile0);
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      improvedFile1.setReadOnly();
      long long0 = (-2945L);
      ImprovedFile.buildName("=/iJT{-wmhi$^", (-2945L), "Q:op", improvedFile0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "C{4pq\"VNE{:,");
      ImprovedFile improvedFile2 = new ImprovedFile("%c1sj[4`PK:+u?$zr");
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.DirectoryScanner", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      String string0 = "?[";
      ImprovedFile improvedFile0 = new ImprovedFile("?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<PipedInputStream> vector0 = new Vector<PipedInputStream>();
      archiveScanner1.filesIncluded = vector0;
      DirectoryScanner.matchPath("?[", "?[");
      Vector<Locale.LanguageRange> vector1 = new Vector<Locale.LanguageRange>();
      archiveScanner1.addDefaultExcludes();
      // Undeclared exception!
      try { 
        archiveScanner1.processArchive(improvedFile0, "?[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("?[", "?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Integer integer0 = new Integer(1);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      predicate0.test(vector0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate0.negate();
      predicate3.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate0);
      Predicate<Object> predicate8 = predicate5.negate();
      predicate2.test("h)N-OMc#]z");
      Predicate<Object> predicate9 = predicate1.negate();
      predicate8.or(predicate3);
      predicate1.or(predicate7);
      Predicate<Object> predicate10 = predicate3.and(predicate9);
      predicate5.and(predicate10);
      Predicate<Object> predicate11 = predicate1.negate();
      predicate0.or(predicate11);
      Predicate.isEqual((Object) predicate8);
      Predicate<Object> predicate12 = predicate6.or(predicate3);
      predicate12.or(predicate8);
      Object object1 = new Object();
      predicate12.or(predicate3);
      Predicate<Object> predicate13 = predicate8.negate();
      predicate2.and(predicate5);
      predicate0.or(predicate4);
      predicate13.negate();
      // Undeclared exception!
      try { 
        archiveScanner1.processDirectory(improvedFile0, "h)N-OMc#]z", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("ory ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner((ImprovedFile) null);
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Object object1 = new Object();
      Object object2 = new Object();
      vector2.add((Object) "ory ");
      vector1.add(object2);
      vector2.add(object0);
      Object object3 = new Object();
      Object object4 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Object object5 = new Object();
      vector0.add(object0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Vector<Object> vector5 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      vector4.replaceAll(unaryOperator1);
      Object object6 = new Object();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function2.apply((Object) null);
      unaryOperator3.compose((Function<? super Object, ?>) function2);
      vector2.replaceAll(unaryOperator3);
      Object object7 = new Object();
      Object object8 = new Object();
      // Undeclared exception!
      try { 
        archiveScanner0.scanArchive(improvedFile0, "JfWaAyR?~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      URI uRI0 = MockURI.URI("");
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) uRI0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.test("");
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate0.or(predicate1);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate0);
      Predicate<Object> predicate6 = predicate2.or(predicate5);
      Predicate<Object> predicate7 = predicate4.and(predicate0);
      predicate1.or(predicate3);
      DirectoryScanner.matchPath("", "");
      Predicate<Object> predicate8 = Predicate.isEqual((Object) "");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      vector0.listIterator();
      predicate2.negate();
      Predicate<Object> predicate9 = predicate7.or(predicate6);
      Predicate<Object> predicate10 = predicate9.or(predicate3);
      predicate7.test(predicate10);
      predicate0.or(predicate5);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate7.negate();
      predicate11.and(predicate12);
      Predicate<Object> predicate13 = predicate4.negate();
      predicate6.and(predicate0);
      predicate7.or(predicate2);
      predicate11.negate();
      predicate9.negate();
      predicate13.negate();
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      assertEquals(1, int0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = "8 46^Qp&852yZ<[";
      ImprovedFile improvedFile0 = new ImprovedFile("8 46^Qp&852yZ<[", "8 46^Qp&852yZ<[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      DirectoryScanner.matchPath("8 46^Qp&852yZ<[", "8 46^Qp&852yZ<[");
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      String string1 = "Z{ECT|jQpW&1*2~g.";
      archiveScanner1.isIncluded("Z{ECT|jQpW&1*2~g.");
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate0.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate3);
      Predicate.isEqual((Object) string1);
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      predicate6.or(predicate1);
      predicate5.test(string0);
      Predicate<Object> predicate7 = predicate2.or(predicate1);
      predicate6.test(archiveScanner0.DIRECTORY);
      predicate3.test(vector0);
      predicate4.or(predicate7);
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      Predicate<Object> predicate9 = predicate1.negate();
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      predicate6.or(predicate10);
      Predicate<Object> predicate11 = predicate6.and(predicate8);
      predicate7.and(predicate11);
      Predicate<Object> predicate12 = predicate1.negate();
      Predicate<Object> predicate13 = predicate12.or(predicate2);
      predicate5.or(predicate7);
      predicate13.negate();
      Object object1 = new Object();
      Object object2 = new Object();
      predicate1.negate();
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      archiveScanner1.toFileType(improvedFile0);
      long long1 = 3391L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("", "");
      URI uRI0 = MockURI.URI("");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) uRI0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate3);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate0);
      Predicate<Object> predicate7 = predicate2.or(predicate6);
      Predicate<Object> predicate8 = predicate1.and(predicate0);
      Predicate<Object> predicate9 = predicate1.or(predicate4);
      predicate2.test("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "";
      archiveScanner0.includes = stringArray0;
      Predicate<Object> predicate10 = predicate1.or(predicate5);
      Predicate<Object> predicate11 = predicate8.negate();
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate8.or(predicate7);
      Predicate<Object> predicate14 = predicate13.or(predicate4);
      predicate8.test(predicate14);
      Predicate<Object> predicate15 = predicate14.and(predicate11);
      predicate5.or(predicate2);
      Predicate<Object> predicate16 = predicate0.or(predicate9);
      Predicate<Object> predicate17 = predicate10.and(predicate0);
      predicate16.or(predicate17);
      Predicate<Object> predicate18 = predicate16.or(predicate14);
      predicate9.and(predicate18);
      predicate16.or(predicate12);
      predicate15.and(predicate16);
      Predicate<Object> predicate19 = predicate4.negate();
      predicate8.or(predicate2);
      predicate12.negate();
      predicate13.negate();
      predicate19.negate();
      // Undeclared exception!
      try { 
        archiveScanner0.scandir(improvedFile0, (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("?[", "?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      ArchiveScanner archiveScanner1 = new ArchiveScanner(improvedFile0);
      archiveScanner1.includes = archiveScanner0.DEFAULT_ARCHIVE_EXTENSIONS;
      archiveScanner1.isIncluded("?[");
      long long0 = (-444L);
      System.setCurrentTimeMillis(archiveScanner1.FILE);
      long long1 = (-4817L);
      archiveScanner1.isArchive(improvedFile0);
      System.setCurrentTimeMillis(long1);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(archiveScanner1.DIRECTORY);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      System.setCurrentTimeMillis(archiveScanner1.ARCHIVE);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.4399756932787802
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      vector1.clear();
      Object object1 = new Object();
      Object object2 = new Object();
      vector2.add((Object) ",cX. ");
      vector1.add(object2);
      vector2.add(object0);
      Object object3 = new Object();
      Object object4 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Object object5 = new Object();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Vector<Object> vector5 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      vector4.replaceAll(unaryOperator1);
      Object object6 = new Object();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      unaryOperator0.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      function2.apply(unaryOperator1);
      unaryOperator2.compose((Function<? super Object, ?>) function2);
      vector2.replaceAll(unaryOperator2);
      Object object7 = new Object();
      Object object8 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile(" 82=F8WijoKP");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      int int0 = archiveScanner0.toFileType(improvedFile0);
      //  // Unstable assertion: assertEquals(2, int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ?>) function0);
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      function2.apply(function4);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      Function.identity();
      Function<Object, Locale.LanguageRange> function5 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function5);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function7);
      function1.andThen((Function<? super Object, ? extends String>) function8);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator.identity();
      Function<Locale.LanguageRange, String> function10 = (Function<Locale.LanguageRange, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Locale.LanguageRange, String> function11 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends String>) function10);
      Function<Locale.LanguageRange, String> function12 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends String>) function11);
      Function<Object, String> function13 = function6.andThen((Function<? super Locale.LanguageRange, ? extends String>) function12);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function14 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function15 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function14);
      Function<Object, Integer> function16 = function9.andThen((Function<? super Integer, ? extends Integer>) function15);
      Function<Object, Locale.LanguageRange> function17 = unaryOperator2.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function6);
      unaryOperator2.compose((Function<? super Object, ?>) function17);
      UnaryOperator.identity();
      unaryOperator2.andThen((Function<? super Object, ?>) function4);
      function2.andThen((Function<? super Object, ?>) function16);
      unaryOperator2.apply(function1);
      unaryOperator0.compose((Function<? super Object, ?>) function13);
      ImprovedFile improvedFile0 = new ImprovedFile("T) b7", "T) b7");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      System.setCurrentTimeMillis(1);
      try { 
        archiveScanner0.scandir(improvedFile0, "uZ\"xh}>A+(I_!x>-~w", true);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // IO error scanning directory /home/ubuntu/termite/projects/78_caloriecount/T) b7/T) b7
         //
         verifyException("com.lts.io.ArchiveScanner", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ?>) function0);
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      function2.apply(function4);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      Function.identity();
      Function.identity();
      Function<Object, Locale.LanguageRange> function5 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function5);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function7 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function8 = unaryOperator1.compose((Function<? super Object, ? extends String>) function7);
      function1.andThen((Function<? super Object, ? extends String>) function8);
      Function<Object, Integer> function9 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Locale.LanguageRange, String> function10 = (Function<Locale.LanguageRange, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Locale.LanguageRange, String> function11 = unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends String>) function10);
      Function<Locale.LanguageRange, String> function12 = unaryOperator2.compose((Function<? super Locale.LanguageRange, ? extends String>) function11);
      Function<Object, String> function13 = function6.andThen((Function<? super Locale.LanguageRange, ? extends String>) function12);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Integer> function14 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function<Object, Integer> function15 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function14);
      function9.andThen((Function<? super Integer, ? extends Integer>) function15);
      Function<Object, Locale.LanguageRange> function16 = unaryOperator3.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function6);
      unaryOperator3.compose((Function<? super Object, ?>) function16);
      UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ?>) function4);
      function2.andThen((Function<? super Object, ?>) function9);
      unaryOperator3.apply(function1);
      unaryOperator0.compose((Function<? super Object, ?>) function13);
      Object object0 = new Object();
      ImprovedFile improvedFile0 = new ImprovedFile(".JAR", ".JAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      try { 
        archiveScanner0.scanArchive(improvedFile0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error trying to list archive, /home/ubuntu/termite/projects/78_caloriecount/.JAR/.JAR
         //
         verifyException("com.lts.io.archive.AbstractNestedArchive", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Locale.LanguageRange> function0 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.compose((Function<? super String, ?>) function0);
      Function<Object, Object> function1 = Function.identity();
      Function<Object, Object> function2 = unaryOperator0.andThen((Function<? super Object, ?>) function1);
      Function.identity();
      Function<Object, Integer> function3 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function4 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function3);
      function2.apply(function4);
      unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      Function.identity();
      Function.identity();
      Function<Object, Locale.LanguageRange> function5 = (Function<Object, Locale.LanguageRange>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Locale.LanguageRange> function6 = unaryOperator0.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function5);
      Function<Object, Integer> function7 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function.identity();
      Function<Locale.LanguageRange, String> function8 = (Function<Locale.LanguageRange, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      Function<Locale.LanguageRange, String> function9 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends String>) function8);
      Function<Locale.LanguageRange, String> function10 = unaryOperator1.compose((Function<? super Locale.LanguageRange, ? extends String>) function9);
      Function<Object, String> function11 = function6.andThen((Function<? super Locale.LanguageRange, ? extends String>) function10);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function12 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function4);
      function11.andThen((Function<? super String, ? extends Locale.LanguageRange>) function6);
      Function<Object, Integer> function13 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function12);
      function13.andThen((Function<? super Integer, ?>) function6);
      function7.andThen((Function<? super Integer, ? extends Integer>) function13);
      Function<Object, Locale.LanguageRange> function14 = unaryOperator2.andThen((Function<? super Object, ? extends Locale.LanguageRange>) function6);
      function14.andThen((Function<? super Locale.LanguageRange, ?>) function9);
      unaryOperator2.compose((Function<? super Object, ?>) function14);
      unaryOperator2.andThen((Function<? super Object, ?>) function4);
      function2.andThen((Function<? super Object, ?>) function7);
      unaryOperator2.apply(function1);
      unaryOperator0.compose((Function<? super Object, ?>) function11);
      ImprovedFile improvedFile0 = new ImprovedFile(".JAR", ".JAR");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertFalse(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = "?[";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string1 = "b~&+]g4 .jar.jar";
      ImprovedFile improvedFile0 = new ImprovedFile("?[", "?[");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      archiveScanner0.toFileType(improvedFile0);
      long long0 = 1L;
      System.setCurrentTimeMillis(long0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(string0);
      DataOutputStream dataOutputStream0 = new DataOutputStream(mockPrintStream0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0);
      char char0 = 'Y';
      char[] charArray0 = new char[8];
      charArray0[0] = char0;
      charArray0[1] = char0;
      charArray0[2] = char0;
      charArray0[3] = char0;
      charArray0[4] = char0;
      charArray0[5] = char0;
      charArray0[6] = char0;
      charArray0[7] = char0;
      String string2 = "`kH(AaPU(XC^)";
      MockPrintStream mockPrintStream2 = null;
      try {
        mockPrintStream2 = new MockPrintStream(improvedFile0, string2);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile("f#Y2lZ*.(tS:_~0.jar");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      Object object0 = new Object();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Vector<Object> vector3 = new Vector<Object>();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3819);
      Object object1 = new Object();
      Vector<Object> vector4 = new Vector<Object>();
      vector3.add(object1);
      Vector<Object> vector5 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      vector4.add(object0);
      vector1.replaceAll(unaryOperator0);
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      vector1.add(object5);
      Object object6 = new Object();
      vector5.add(object6);
      Object object7 = new Object();
      Object object8 = new Object();
      Object object9 = new Object();
      vector4.add(object5);
      Object object10 = new Object();
      vector5.add(object3);
      MockFile mockFile0 = new MockFile("g<kv_^]c+b8a:C", "f#Y2lZ*.(tS:_~0.jar");
      archiveScanner0.isArchive(mockFile0);
      System.setCurrentTimeMillis(archiveScanner0.ARCHIVE);
      assertEquals(2, ArchiveScanner.ARCHIVE);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedFile improvedFile0 = new ImprovedFile(",cX. ");
      ArchiveScanner archiveScanner0 = new ArchiveScanner(improvedFile0);
      Object object0 = new Object();
      Vector<Object> vector0 = new Vector<Object>();
      Vector<Object> vector1 = new Vector<Object>();
      Vector<Object> vector2 = new Vector<Object>();
      Object object1 = new Object();
      Object object2 = new Object();
      vector2.add((Object) ",cX. ");
      vector1.add(object2);
      vector2.add(object0);
      Object object3 = new Object();
      Object object4 = new Object();
      Object object5 = new Object();
      Vector<Object> vector3 = new Vector<Object>();
      Vector<Object> vector4 = new Vector<Object>();
      Object object6 = new Object();
      vector4.add(object6);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      vector4.remove((Object) vector4);
      UnaryOperator.identity();
      Vector<Object> vector5 = new Vector<Object>();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      vector4.replaceAll(unaryOperator1);
      Object object7 = new Object();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function1 = unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function0);
      unaryOperator1.andThen((Function<? super Object, ? extends Integer>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super Object, ?>) unaryOperator0);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Object> function2 = unaryOperator1.andThen((Function<? super Object, ?>) function1);
      unaryOperator3.compose((Function<? super Object, ?>) function2);
      vector2.replaceAll(unaryOperator3);
      Object object8 = new Object();
      Object object9 = new Object();
      boolean boolean0 = archiveScanner0.isArchive(improvedFile0);
      //  // Unstable assertion: assertTrue(boolean0);
  }
}
