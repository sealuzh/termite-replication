/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 14:43:31 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.FilterOutputStream;
import java.io.PrintWriter;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.io.StringWriter;
import java.math.BigInteger;
import java.security.ProtectionDomain;
import java.sql.SQLException;
import java.util.List;
import java.util.Locale;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.io.FormatableProperties;
import org.apache.derby.iapi.sql.dictionary.ColumnDescriptorList;
import org.apache.derby.iapi.sql.dictionary.DataDescriptorGenerator;
import org.apache.derby.iapi.sql.dictionary.DataDictionary;
import org.apache.derby.iapi.sql.dictionary.SchemaDescriptor;
import org.apache.derby.iapi.sql.dictionary.TableDescriptor;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.services.monitor.FileMonitor;
import org.apache.derby.impl.services.uuid.BasicUUID;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.GenericStorablePreparedStatement;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CursorNode;
import org.apache.derby.impl.sql.compile.ExecSPSNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.raw.xact.ConcurrentXactFactory;
import org.databene.commons.version.VersionNumber;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.command.ddl.CreateTableData;
import org.h2.command.dml.RunScriptCommand;
import org.h2.engine.Session;
import org.h2.tools.Recover;
import org.h2.value.ValueLong;
import org.h2.value.ValueNull;
import org.hsqldb.jdbc.jdbcClob;
import org.hsqldb.rowio.RowOutputBinary;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.199325386865874
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)22);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor((byte)22);
      Boolean boolean0 = Boolean.FALSE;
      boolean boolean1 = SQLUtil.isQuery("SEQECTW* FROM ");
      assertFalse(boolean1);
      
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("drop indexcahlcnitraint", false, (String) null, "SEQECTW* FROM ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop indexcahlcnitraint\" CHECK SEQECTW* FROM ", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7842068034002128
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vOw|H\"<W3gD%]<YTL_";
      stringArray0[1] = "&p/LcQqNAc";
      stringArray0[2] = "&p/LcQqNAc";
      Integer integer0 = new Integer((-3342));
      Integer.getInteger("vOw|H\"<W3gD%]<YTL_");
      Integer.compareUnsigned((-1457554008), 134217727);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kWkKx*f");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kWkKx*f", defaultDBTable0, (DBDataType) null, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(";JZ;#a1u=laHJXu;)=", defaultDBTable0, 1, "kWkKx*f");
      defaultDBColumn0.equals(defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("create materialized viewobjectid", defaultDBTable0, (-1133190397), "&p/LcQqNAc");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn2;
      defaultDBTable0.getPrimaryKeyConstraint();
      defaultDBColumn2.addUkConstraint((DBUniqueConstraint) null);
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderValue(dBColumnArray0[6]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.199325386865874
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=?");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=?";
      SQLUtil.join("=?", "=?", stringArray0, "d81U5f%/\"w{[ Cv", "d81U5f%/\"w{[ Cv", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      Integer.compareUnsigned(1858, 1858);
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("=?");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("m,(EFI9n'7KjayA", defaultDBTable0, (DBDataType) null, integer0);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("");
      defaultDBColumn0.equals(jMXPrincipal0);
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("=?", defaultDBTable0, 0, "=?");
      DBColumn[] dBColumnArray0 = new DBColumn[3];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.renderValue(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1362, "CLOB");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zi");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zi";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "zi";
      stringArray0[3] = "select into";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select into", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CLOB", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      dBPrimaryKeyConstraint0.setDoc("select into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", dBTable0, dBDataType0, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      StringBuilder stringBuilder0 = new StringBuilder();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      DBSequence dBSequence0 = new DBSequence(" ADD ", "select into", "/*");
      dBSequence0.getStartIfNotDefault();
      Random.setNextRandom(336789539);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)42;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "colPMperms: grantee=";
      stringArray0[1] = "colPMperms: grantee=";
      stringArray0[2] = "colPMperms: grantee=";
      stringArray0[3] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[4] = "colPMperms: grantee=";
      stringArray0[6] = "K0 szS=>F-M\"?|I5/V";
      jdbcClob jdbcClob0 = new jdbcClob("colPMperms: grantee=");
      jdbcClob0.truncate(16L);
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.resetSyntax();
      reader0.skip((-94L));
      jdbcClob0.getCharacterStream();
      streamTokenizer0.pushBack();
      streamTokenizer0.nextToken();
      streamTokenizer0.nval = (double) (byte) (-94);
      jdbcClob0.getAsciiStream();
      streamTokenizer0.commentChar(6688);
      streamTokenizer0.nval = 2905.5225262054155;
      SQLUtil.renderNumber(streamTokenizer0);
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence((String) null, (String) null, (String) null);
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(1, "exec");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer(1362);
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("constraint", defaultDBTable0, dBDataType0, integer1);
      String string0 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals("EXEC(1)", string0);
      
      boolean boolean1 = SQLUtil.isDDL("constraint");
      boolean boolean2 = SQLUtil.isQuery("select into");
      assertFalse(boolean2);
      
      boolean boolean3 = SQLUtil.isDML("wz[K!>@Z%{;Q");
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.360448974670294
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("cahlcoIItraiqt");
      Random.setNextRandom(4);
      // Undeclared exception!
      SQLUtil.isDDL("/*");
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.069252406429449
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("&p/LcQqNAc");
      MockFile mockFile0 = new MockFile("exec", "exec");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Object object0 = new Object();
      Object object1 = new Object();
      SQLUtil.mutatesDataOrStructure("428EK");
      DBCatalog dBCatalog0 = new DBCatalog("43X03.U");
      SQLUtil.normalize("alter materialized viewalter materialized viewavvz|-zy}", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter1);
      SQLUtil.isQuery("1}uc*pV");
      SQLUtil.normalize(";Jfk{OtI;]bvB$*/bh", false);
      SQLUtil.mutatesStructure("; Jfk { OtI ; ] bvB $ */ bh");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "; Jfk { OtI ; ] bvB $ */ bh";
      stringArray0[1] = "alter materialized viewalter materialized viewavvz|-zy}";
      stringArray0[2] = "428EK";
      stringArray0[3] = "1}uc*pV";
      stringArray0[4] = "alter materialized viewalter materialized viewavvz|-zy}";
      stringArray0[5] = "428EK";
      stringArray0[6] = "alter materialized viewalter materialized viewavvz | - zy }";
      stringArray0[7] = "-#^}J";
      // Undeclared exception!
      try { 
        defaultDBTable0.getForeignKeyConstraint(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Table '&p/LcQqNAc' has no foreign key with the columns (; Jfk { OtI ; ] bvB $ *_/ bh, alter materialized viewalter materialized viewavvz|-zy}, 428EK, 1}uc*pV, alter materialized viewalter materialized viewavvz|-zy}, 428EK, alter materialized viewalter materialized viewavvz | - zy }, -#^}J)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.305759267473653
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1362, "CLOB");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zi");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "zi";
      stringArray0[1] = "CLOB";
      stringArray0[2] = "zi";
      stringArray0[3] = "select into";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "select into", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("CLOB", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      dBPrimaryKeyConstraint0.setDoc("select into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", dBTable0, dBDataType0, integer1);
      StringWriter stringWriter0 = new StringWriter(1362);
      StringWriter stringWriter1 = stringWriter0.append('Z');
      dBTable0.getIndexes();
      stringWriter1.append('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(dBTable0, false, nameSpec0, printWriter0);
      System.setCurrentTimeMillis(1000000000L);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.083122122960416
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = stringArray0[0];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      stringWriter0.flush();
      mockPrintWriter0.print((double) (byte)50);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|D/_HlH.b]7K");
      mockPrintWriter0.println(charArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "yu7V@iTczMU", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "yu7V@iTczMU", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) (byte)50);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder1);
      assertEquals("CONSTRAINT yu7V@iTczMU 50.0CONSTRAINT yu7V@iTczMU ", stringBuilder1.toString());
      
      NameSpec nameSpec1 = NameSpec.NEVER;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec1);
      assertEquals("UNIQUE (, , , , , , , )", string0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.0978015811537687
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "delete";
      String string0 = SQLUtil.join("delete", "delete", stringArray0, "delete", "delete", stringArray0);
      assertEquals("delete join delete as delete on delete.delete = delete.delete", string0);
      
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6}7~vwLd", (DBSchema) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "delete join delete as delete on delete.delete = delete.delete", false, stringArray0);
      String string1 = dBPrimaryKeyConstraint0.toString();
      assertEquals("CONSTRAINT \"delete join delete as delete on delete.delete = delete.delete\" PRIMARY KEY (delete)", string1);
      
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Boolean boolean1 = SQLUtil.mutatesDataOrStructure("YlR\"i8n>J`=");
      assertNull(boolean1);
      
      Object object0 = new Object();
      Character character0 = Character.valueOf('N');
      String string2 = SQLUtil.substituteMarkers("Y=|8?eZSw^m", "delete", character0);
      assertEquals("Y=|8?eZSw^m", string2);
      
      Character.valueOf('Q');
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.constraintSpec(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7734260100690569
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)42;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("), ");
      DBDataType dBDataType0 = DBDataType.getInstance((int) (byte)42, "), ");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("), ", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      defaultDBColumn0.toString();
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer1 = new Integer((-1984265022));
      defaultDBColumn0.setType(dBDataType0);
      Integer integer2 = RawTransaction.ABORT;
      Integer.getInteger("x('");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("),  : ), (1)", defaultDBTable0, dBDataType0, (Integer) null, integer0);
      Integer.compareUnsigned((-1106), (byte)42);
      jdbcClob jdbcClob0 = new jdbcClob("alter materialized view");
      Reader reader0 = jdbcClob0.getCharacterStream();
      StringReader stringReader0 = new StringReader("alter materialized view");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      SQLUtil.renderNumber(streamTokenizer0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockFile mockFile0 = new MockFile("51Y", "x('");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, mockPrintWriter0);
      assertNull(defaultDBTable0.getDoc());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.3881862224834778
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1362, "CLOB");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zi");
      Integer integer1 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, dBDataType0, integer1);
      StringWriter stringWriter0 = new StringWriter(1362);
      StringWriter stringWriter1 = stringWriter0.append('Z');
      defaultDBTable0.getIndexes();
      stringWriter1.append('g');
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter1, true);
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("drop materivlized vrewalter mtrialized viewavvz|-zy}");
      defaultDBTable0.getForeignKeyConstraints();
      mockPrintWriter0.print((Object) jMXPrincipal0);
      PrintWriter printWriter0 = mockPrintWriter0.append('Z');
      printWriter0.write("CLOB");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      System.setCurrentTimeMillis(1000000000L);
      System.setCurrentTimeMillis((-2888L));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.4558487091517962
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      DBDataType.getInstance(335544512, "Server name/address is required for pure Java implementation.");
      Integer integer0 = RawTransaction.COMMIT;
      SQLUtil.isDML("Server name/address is required for pure Java implementation.");
      // Undeclared exception!
      SQLUtil.mutatesDataOrStructure("1o'i>/*yPvKq");
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.stream();
      columnDescriptorList0.listIterator();
      columnDescriptorList0.getColumnNames();
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DBDataType dBDataType0 = DBDataType.getInstance(1362, "CLOB");
      DBDataType.getInstance(97, "CLOB");
      dBDataType0.isAlpha();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("zi");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-xt 2yrj59%b+6^Ctt";
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("-xt 2yrj59%b+6^Ctt = '-xt 2yrj59%b+6^Ctt'", string0);
      
      Character character0 = Character.valueOf('C');
      Character.lowSurrogate(4);
      String string1 = SQLUtil.renderValue(character0);
      assertEquals("'C'", string1);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1288470716724794
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-2169), "N[tu");
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.COMMIT;
      Integer integer3 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("null = null AND null = null", defaultDBTable0, dBDataType0, integer2, integer3);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      defaultDBColumn0.toString();
      SQLUtil.renderColumnNames(stringArray0);
      defaultDBColumn0.setDefaultValue("rename,8:");
      System.setCurrentTimeMillis((-2169));
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType.getInstance((-2050344062), "<[(6;Z");
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(") ", defaultDBTable0, dBDataType0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=?");
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "=?");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      defaultDBColumn0.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer1 = new Integer(32);
      defaultDBColumn0.setType(dBDataType0);
      Integer integer2 = new Integer((-2));
      Integer integer3 = RawTransaction.ABORT;
      Integer.getInteger(" : =?(1)", integer3);
      Integer.getInteger("kWkKx*f");
      Integer.compareUnsigned((-1984265022), 32);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[6] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      StringBuilder stringBuilder1 = stringBuilder0.append((Object) null);
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[7], stringBuilder1);
      assertEquals("null=?(1)", stringBuilder0.toString());
      assertEquals("null=?(1)", stringBuilder1.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("ylr\"i8no");
      tableContainer0.getTable("ylr\"i8no");
      DBDataType dBDataType0 = DBDataType.getInstance(2298, "ylr\"i8no");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("ylr\"i8no", (DBTable) null, dBDataType0);
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      Integer integer0 = new Integer(151);
      defaultDBColumn0.setType(dBDataType0);
      Integer integer1 = RawTransaction.ABORT;
      Integer.getInteger("ylr\"i8no");
      Integer.sum(97, 336330780);
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.getInteger("org.h2.engine.Setting");
      DBDataType.getInstance((-1437820719), "ylr\"i8");
      Integer integer3 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("org.h2.engine.Setting", (DBTable) null, dBDataType0, integer1, integer3);
      Integer.compareUnsigned(62, (-1393));
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("executecahlconitraint", (DBTable) null, 151, "ylr\"");
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, stringBuilder0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("bE0?* `eoQr+;YPHm", stringArray0);
      Random.setNextRandom(39);
      Random.setNextRandom(39);
      Random.setNextRandom(527);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.3428723925801633
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      SQLUtil.isQuery("CACHE_TYPE");
      StringBuilder stringBuilder0 = new StringBuilder("CACHE_TYPE");
      SQLUtil.isDDL("CACHE_TYPE");
      String string0 = "r]6X./j~G";
      SQLUtil.isProcedureCall("r]6X./j~G");
      SQLUtil.normalize("create tablejn`*|lk5d&\"q", true);
      char[] charArray0 = new char[4];
      charArray0[0] = 'C';
      charArray0[1] = 'm';
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      int int0 = 1581;
      FileMonitor fileMonitor0 = new FileMonitor();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      Thread thread0 = MockThread.currentThread();
      MockThread mockThread0 = new MockThread(threadGroup0, thread0);
      fileMonitor0.getDaemonThread(mockThread0, "RADIX SMALLINT", false);
      long long0 = 65535L;
      TimeUnit timeUnit0 = TimeUnit.NANOSECONDS;
      Subject subject0 = new Subject();
      Class<Runnable> class0 = Runnable.class;
      fileMonitor0.getEngineVersion();
      ProtectionDomain[] protectionDomainArray0 = new ProtectionDomain[5];
      ErrorMessages errorMessages0 = new ErrorMessages();
      String string1 = "$2`FnBluMV~4?B1Mu";
      try { 
        errorMessages0.getURL("$2`FnBluMV~4?B1Mu");
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getURL
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "insertalter materialized viewylr\"i8n>j`=";
      SQLUtil.normalize("insertalter materialized viewylr\"i8n>j`=", false);
      System.setCurrentTimeMillis(20L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.3632385668636764
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = new Boolean(" w");
      boolean boolean1 = SQLUtil.isDML("SELECT proname,oid FROM pg_proc WHEE ");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)22);
      Boolean boolean2 = SQLUtil.mutatesDataOrStructure("SELECT proname,oid FROM pg_proc WHEE ");
      assertTrue(boolean2.equals((Object)boolean1));
      assertNotNull(boolean2);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)22;
      byteArray0[0] = (byte)22;
      byteArray0[2] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor((byte)0);
      Boolean boolean3 = SQLUtil.mutatesDataOrStructure("alter session");
      assertNotNull(boolean3);
      assertFalse(boolean3);
      
      SQLUtil.isDDL(" w");
      boolean boolean4 = SQLUtil.isQuery("SELECT * FROM ");
      assertTrue(boolean4);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.957373352822584
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = stringArray0[0];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      stringWriter0.flush();
      mockPrintWriter0.print((double) (byte)50);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|D/_HlH.b]7K");
      mockPrintWriter0.println(charArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "yu7V@iTczMU", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "yu7V@iTczMU", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1.0F));
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      dBPrimaryKeyConstraint0.setOwner(defaultDBTable0);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder2 = SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec2);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder2, nameSpec0);
      assertEquals("CONSTRAINT yu7V@iTczMU -1.0CONSTRAINT yu7V@iTczMU CONSTRAINT yu7V@iTczMU CONSTRAINT yu7V@iTczMU ", stringBuilder2.toString());
      assertEquals("CONSTRAINT yu7V@iTczMU -1.0CONSTRAINT yu7V@iTczMU CONSTRAINT yu7V@iTczMU CONSTRAINT yu7V@iTczMU ", stringBuilder0.toString());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      System.setCurrentTimeMillis(657L);
      DBCatalog dBCatalog0 = new DBCatalog("DIFFERENCE");
      DBSchema dBSchema0 = new DBSchema("\u0001\u01B4", dBCatalog0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "DIFFERENCE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint((String) null, false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.setDoc("84*1(");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (DIFFERENCE) REFERENCES null(DIFFERENCE)", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.4445595606837074
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = stringArray0[0];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      stringWriter0.flush();
      mockPrintWriter0.println(1195L);
      mockPrintWriter0.print((double) (byte)50);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|D/_HlH.b]7K");
      mockPrintWriter0.println(charArray0);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "yu7V@iTczMU", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "yu7V@iTczMU", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((float) (byte)50);
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec1);
      NameSpec nameSpec2 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1, nameSpec2);
      SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec1);
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, (String) null, stringBuilder1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "colPMperms: grantee=";
      stringArray0[1] = "colPMperms: grantee=";
      stringArray0[2] = "colPMperms: grantee=";
      stringArray0[3] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[4] = "colPMperms: grantee=";
      stringArray0[6] = "colPMperms: grantee=";
      jdbcClob jdbcClob0 = new jdbcClob("colPMperms: grantee=");
      jdbcClob0.truncate(16L);
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.resetSyntax();
      jdbcClob0.getCharacterStream();
      streamTokenizer0.pushBack();
      streamTokenizer0.nextToken();
      streamTokenizer0.nval = (double) (byte) (-94);
      jdbcClob0.getAsciiStream();
      streamTokenizer0.commentChar(6688);
      SQLUtil.renderNumber(streamTokenizer0);
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.3128868859883
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("b");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      DBDataType dBDataType0 = DBDataType.getInstance((-180528769), "postConstructor");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Truncation of large objects is only implemented in 8.3 and later servers.", defaultDBTable0, dBDataType0);
      defaultDBColumn0.setNullable(false);
      SQLUtil.renderColumn(defaultDBColumn0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBColumn[] dBColumnArray0 = new DBColumn[2];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      SQLUtil.isDML("create tableylr\"i8n>j`=");
      Random.setNextRandom((-935));
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "b");
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition((String) null, stringBuilder0);
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("Truncation of large objects is only implemented in 8.3 and later servers. POSTCONSTRUCTOR NOT NULL", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.insert((-935), (float) (-180528769));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -935
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.chars();
      StringBuilder stringBuilder1 = new StringBuilder();
      StringBuilder stringBuilder2 = stringBuilder0.append((CharSequence) stringBuilder1);
      stringBuilder1.append((CharSequence) stringBuilder2);
      int int0 = 335544473;
      stringBuilder1.append((int) (byte)22);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("alter session", stringBuilder2);
      StringBuilder stringBuilder4 = new StringBuilder("S{{m,[rVYcj~");
      stringBuilder3.codePoints();
      int int1 = 194;
      // Undeclared exception!
      try { 
        stringBuilder1.replace((-1448), (-773), "x^mLza4eyUSt");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1448
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3348389639764657
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Integer integer0 = RawTransaction.COMMIT;
      Integer integer1 = RawTransaction.COMMIT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      String string0 = "2rR%";
      SQLUtil.mutatesDataOrStructure("SELECT proname,oid FROM pg_proc WHEE ");
      SQLUtil.mutatesDataOrStructure("updatenczjx,rlaf[m#(");
      String string1 = "}s;)'I;j?d/7?XUN&e8";
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-53);
      byteArray0[1] = (byte) (-11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.listIterator();
      String[] stringArray0 = columnDescriptorList0.getColumnNames();
      String string0 = SQLUtil.renderWhereClause(stringArray0, stringArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ValueNull valueNull0 = ValueNull.DELETED;
      valueNull0.getBoolean();
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean((String) null);
      Boolean.compare(false, true);
      DBSequence dBSequence0 = new DBSequence((String) null, "org.firebirdsql.jdbc.field.FBShortField", "org.firebirdsql.jdbc.field.FBShortField");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ValueLong.MAX;
      bigInteger0.not();
      bigInteger1.doubleValue();
      bigInteger0.longValue();
      Boolean.logicalAnd(true, false);
      bigInteger1.longValueExact();
      bigInteger1.signum();
      bigInteger1.min(bigInteger0);
      dBSequence0.setCycle(boolean0);
      dBSequence0.getIncrementIfNotDefault();
      BigInteger bigInteger2 = BigInteger.ONE;
      Boolean boolean2 = Boolean.TRUE;
      Boolean.logicalOr(false, false);
      Boolean.logicalAnd(true, true);
      dBSequence0.setCycle(boolean2);
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence null", string0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.459487892880099
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("delete");
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.isDDL("delete");
      SQLUtil.isQuery("^_2&=t$399Wu;_z7");
      SQLUtil.isDML("lhFQt&=LJl");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("$N(@[#x*R1CJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: $N(@[#x*R1CJ
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=?");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=?";
      SQLUtil.join("=?", "=?", stringArray0, "d81U5f%/\"w{[ Cv", "d81U5f%/\"w{[ Cv", stringArray0);
      TableContainer tableContainer0 = new TableContainer("");
      tableContainer0.getTables(true);
      tableContainer0.getTable("=?");
      tableContainer0.getComponents();
      tableContainer0.getTables();
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("BIGGER ", (DBTable) null, (-498635884), "(lvxZg4EFu?+RPoic;");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: (lvxZg4EFu?+RPoic;
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vOw|H\"<W3gD%]<YTL_";
      stringArray0[1] = "&p/LcQqNAc";
      stringArray0[2] = "&p/LcQqNAc";
      Integer integer0 = new Integer((-3353));
      Integer.getInteger("vOw|H\"<W3gD%]<YTL_");
      Integer integer1 = new Integer((-1457554008));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("kWkKx*f");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("kWkKx*f", defaultDBTable0, (DBDataType) null, integer0);
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(";JZ;#a1u=laHJXu;)=", defaultDBTable0, (int) integer1, "kWkKx*f");
      defaultDBColumn0.equals(defaultDBColumn1);
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("create materialized viewobjectid", defaultDBTable0, (-1133190397), "&p/LcQqNAc");
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("selectupdateblob(string,blob)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"string\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.6911943992897385
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      String[] stringArray0 = new String[2];
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.isDDL("null = null AND null = null");
      SQLUtil.isQuery("drop indexorg.apache.derby.iapi.services.context.contextservice");
      SQLUtil.normalize("/*", false);
      StringBuilder stringBuilder0 = new StringBuilder("CACHE_TYPE");
      StringBuffer stringBuffer0 = null;
      try {
        stringBuffer0 = new StringBuffer((-273));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.079253457075761
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Boolean boolean0 = new Boolean("=?");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=?";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6}7~vwLd", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=?", false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SQLUtil.mutatesDataOrStructure("YlR\"i8n>J`=");
      Object object0 = new Object();
      Character character0 = Character.valueOf('N');
      SQLUtil.substituteMarkers("Y=|8?eZSw^m", "=?", character0);
      Random.setNextRandom((-85666180));
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("4|P(oNgs", defaultDBTable0, (-2440), "CONSTRAINT =? PRIMARY KEY (=?)");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"=?\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.4595624449571374
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      SQLUtil.mutatesDataOrStructure("select into");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" DEFAULT ", defaultDBTable0, 1, "org.apache.derby.impl.sql.compile.UntypedNullConstantNode");
      DBDataType dBDataType0 = DBDataType.getInstance(1, "\"C.O|'<D|^!0cT!6Ru)");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable((String) null);
      Integer integer1 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("}B:5C4X@", defaultDBTable1, dBDataType0, integer1);
      defaultDBColumn0.isEquivalent(defaultDBColumn1);
      DefaultDBTable defaultDBTable2 = new DefaultDBTable("g?mk");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider((-334951280));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence((String) null, (String) null, (String) null);
      ValueNull valueNull0 = ValueNull.DELETED;
      valueNull0.getBoolean();
      dBSequence0.setCycle((Boolean) null);
      Boolean boolean0 = Boolean.FALSE;
      Boolean boolean1 = new Boolean((String) null);
      Boolean.compare(false, true);
      DBSequence dBSequence1 = new DBSequence((String) null, "org.firebirdsql.jdbc.field.FBShortField", "org.firebirdsql.jdbc.field.FBShortField");
      dBSequence0.setOrder((Boolean) null);
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ValueLong.MAX;
      bigInteger0.not();
      bigInteger0.longValue();
      Boolean.logicalAnd(true, false);
      bigInteger1.longValueExact();
      bigInteger1.signum();
      bigInteger1.min(bigInteger0);
      dBSequence0.setMinValue(bigInteger1);
      dBSequence1.setCycle(boolean0);
      dBSequence1.getIncrementIfNotDefault();
      BigInteger bigInteger2 = BigInteger.ONE;
      dBSequence0.dropDDL();
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence("RQng1J=AxF]ffVx", "=?", "/*");
      Boolean boolean0 = Boolean.FALSE;
      dBSequence0.setCycle(boolean0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3842713196839629
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("drop materialized view");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "drop materialized view";
      stringArray0[1] = "drop materialized view";
      stringArray0[2] = "drop materialized view";
      stringArray0[3] = "drop materialized view";
      stringArray0[4] = "drop materialized view";
      stringArray0[5] = "drop materialized view";
      stringArray0[6] = "drop materialized view";
      stringArray0[7] = "drop materialized view";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "drop materialized view", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"drop materialized view\" ", stringBuilder0.toString());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(")");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.getColumnNames();
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers((String) null, "em)6Dj.T_%#(oaEYW", object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.7465208925003344
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      boolean boolean0 = SQLUtil.isDDL("drop tablecahlcnitraint");
      Boolean boolean1 = SQLUtil.mutatesStructure(".Cr&aX.GQ-H>z^9");
      assertFalse(boolean1.equals((Object)boolean0));
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)5;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[1] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[2] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[3] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[4] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[6] = "K0 szS=>F-M\"?|I5/V";
      jdbcClob jdbcClob0 = new jdbcClob("K0 szS=>F-M\"?|I5/V");
      StringReader stringReader0 = new StringReader("K0 szS=>F-M\"?|I5/V");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashSlashComments(true);
      jdbcClob0.getCharacterStream();
      streamTokenizer0.pushBack();
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '_';
      stringReader0.read(charArray0);
      streamTokenizer0.nextToken();
      stringReader0.close();
      streamTokenizer0.nval = (double) (byte) (-94);
      streamTokenizer0.commentChar(6688);
      streamTokenizer0.parseNumbers();
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.6603631172353484
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      DBDataType dBDataType0 = DBDataType.getInstance(0, "alter materialized viewavvz|-zy}");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewavvz|-zy}", (DBTable) null, dBDataType0);
      String string0 = defaultDBColumn0.toString();
      defaultDBColumn0.getNotNullConstraint();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C$(U");
      SQLUtil.mutatesDataOrStructure("C$(U");
      Object object0 = new Object();
      String string1 = SQLUtil.substituteMarkers("", "alter materialized viewavvz|-zy} : ALTER MATERIALIZED VIEWAVVZ|-ZY}", object0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DBDataType.getInstance(0, "alter materialized viewavvz|-zy}");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewavvz|-zy}", (DBTable) null, 0, "alter materialized viewavvz|-zy}");
      defaultDBColumn0.toString();
      defaultDBColumn0.getNotNullConstraint();
      StringBuilder stringBuilder0 = new StringBuilder();
      Object object0 = new Object();
      Object object1 = new Object();
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Object[] objectArray0 = new Object[0];
      PrintWriter printWriter0 = mockPrintWriter0.format("alter materialized viewavvz|-zy} : ALTER MATERIALIZED VIEWAVVZ|-ZY}", objectArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0, false);
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, false, nameSpec0, mockPrintWriter1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)5;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[1] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[2] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[3] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[4] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[6] = "K0 szS=>F-M\"?|I5/V";
      jdbcClob jdbcClob0 = new jdbcClob("K0 szS=>F-M\"?|I5/V");
      StringReader stringReader0 = new StringReader("K0 szS=>F-M\"?|I5/V");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.slashSlashComments(true);
      jdbcClob0.getCharacterStream();
      streamTokenizer0.pushBack();
      char[] charArray0 = new char[2];
      charArray0[0] = 'K';
      charArray0[1] = '_';
      stringReader0.read(charArray0);
      streamTokenizer0.nextToken();
      stringReader0.close();
      streamTokenizer0.nval = (double) (byte) (-94);
      streamTokenizer0.commentChar(6688);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = (double) (byte)5;
      SQLUtil.renderNumber(streamTokenizer0);
      Character character0 = Character.valueOf('b');
      assertEquals('b', (char)character0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      DBSequence dBSequence0 = new DBSequence((String) null, (String) null, (String) null);
      Boolean boolean0 = Boolean.FALSE;
      Boolean.logicalXor(false, true);
      Boolean.compare(false, true);
      DBSequence dBSequence1 = new DBSequence((String) null, "org.firebirdsql.jdbc.field.FBShortField", "org.firebirdsql.jdbc.field.FBShortField");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ValueLong.MAX;
      bigInteger0.min(bigInteger1);
      dBSequence1.setMinValue(bigInteger0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint((String) null, true, (String) null, "execute");
      dBCheckConstraint0.setDoc("org.apache.derby.impl.sql.execute.OnceResultSet");
      String string0 = SQLUtil.constraintName(dBCheckConstraint0);
      assertEquals("", string0);
      
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBCheckConstraint0, nameSpec0);
      assertEquals("", stringBuilder0.toString());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.3691591637540217
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = stringArray0[0];
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      char[] charArray0 = new char[0];
      stringWriter0.write(charArray0);
      stringWriter0.flush();
      mockPrintWriter0.print((double) (byte)50);
      Locale locale0 = Locale.PRC;
      mockPrintWriter0.printf(locale0, "1F", (Object[]) stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|D/_HlH.b]7K");
      mockPrintWriter0.println(charArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "yu7V@iTczMU", true, stringArray0);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "yu7V@iTczMU", false, stringArray0);
      dBPrimaryKeyConstraint0.isIdentical(dBUniqueConstraint0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBPrimaryKeyConstraint0, nameSpec0);
      stringBuilder0.append((-1.0F));
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0);
      assertEquals("CONSTRAINT yu7V@iTczMU -1.0CONSTRAINT yu7V@iTczMU ", stringBuilder0.toString());
      
      SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec0);
      String string0 = SQLUtil.constraintName(dBPrimaryKeyConstraint0);
      assertEquals("CONSTRAINT yu7V@iTczMU ", string0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.509252017411721
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "=?");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "=?";
      SQLUtil.join("=?", "=?", stringArray0, "d81U5f%/\"w{[ Cv", "d81U5f%/\"w{[ Cv", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("6}7~vwLd", (DBSchema) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "=? join d81U5f%/\"w{[ Cv as d81U5f%/\"w{[ Cv on =?.=? = d81U5f%/\"w{[ Cv.=?", false, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "alter tablecallconstraint");
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder2 = SQLUtil.addRequiredCondition("-- page count: ", stringBuilder1);
      StringBuilder stringBuilder3 = SQLUtil.addOptionalCondition("d81U5f%/\"w{[ Cv", stringBuilder2);
      StringBuilder stringBuilder4 = stringBuilder3.insert(6, (-85718132));
      StringBuilder stringBuilder5 = stringBuilder4.append((Object) "6}7~vwLd");
      SQLUtil.addOptionalCondition("create unique index`yj-;qt^y^%l=mz~", stringBuilder5);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("-- page count: ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      RowOutputBinary rowOutputBinary0 = new RowOutputBinary();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(rowOutputBinary0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0);
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertEquals(FKChangeRule.NO_ACTION, dBForeignKeyConstraint0.getUpdateRule());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, (DBSchema) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "[,heV}5dZ.nc1$<g+1";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, true, stringArray0);
      dBPrimaryKeyConstraint0.toString();
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      SQLUtil.appendConstraintName((DBConstraint) dBPrimaryKeyConstraint0, stringBuilder0, nameSpec0);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("execwvt<`75%/~3z", stringBuilder0);
      SQLUtil.addOptionalCondition(stringArray0[6], stringBuilder0);
      // Undeclared exception!
      try { 
        stringBuilder1.insert((int) (byte) (-94), (-85718132));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -94
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DBSchema dBSchema0 = new DBSchema(" on ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null, dBSchema0);
      String[] stringArray0 = new String[9];
      stringArray0[0] = " on ";
      stringArray0[1] = "deleteserver name/address is.requiredfor pure java implementation";
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = " on ";
      stringArray0[5] = null;
      stringArray0[6] = null;
      stringArray0[7] = null;
      stringArray0[8] = " on ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, (String) null, false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY ( on , deleteserver name/address is.requiredfor pure java implementation, , ,  on , , , ,  on )", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[7];
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("raparen", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure(stringArray0[0]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vOw|H\"<W3gD%]<YTL_";
      stringArray0[1] = "&p/LcQqNAc";
      stringArray0[2] = "&p/LcQqNAc";
      Integer integer0 = new Integer((-3353));
      Integer.getInteger("vOw|H\"<W3gD%]<YTL_");
      Integer integer1 = new Integer((-1457554008));
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("autoServer && serverList != null", 290);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "vOw|H\"<W3gD%]<YTL_");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "&p/LcQqNAc";
      stringArray1[1] = "vOw|H\"<W3gD%]<YTL_";
      stringArray1[2] = "vOw|H\"<W3gD%]<YTL_";
      stringArray1[3] = "vOw|H\"<W3gD%]<YTL_";
      stringArray1[4] = "vOw|H\"<W3gD%]<YTL_";
      // Undeclared exception!
      try { 
        SQLUtil.join(" = ", "&p/LcQqNAc", stringArray0, "zyiY5wum3_Zw0", "HASH", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 5
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Integer.compareUnsigned((-2208), (-2208));
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1531782505128936
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0, true);
      StringWriter stringWriter1 = new StringWriter();
      stringWriter1.flush();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("q(~6e(fsK");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("alter session");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "&p/LcQqNAc", true, (String[]) null);
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable1, " (not found)", true, (String[]) null);
      dBPrimaryKeyConstraint0.isIdentical(defaultDBTable0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBUniqueConstraint0, nameSpec0);
      StringBuilder stringBuilder1 = stringBuilder0.append((-1.0F));
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, stringBuilder1);
      assertEquals("CONSTRAINT &p/LcQqNAc -1.0CONSTRAINT &p/LcQqNAc ", stringBuilder1.toString());
      
      NameSpec nameSpec1 = NameSpec.ALWAYS;
      String string0 = SQLUtil.ukSpec(dBPrimaryKeyConstraint0, nameSpec1);
      assertEquals("CONSTRAINT \" (not found)\" UNIQUE ()", string0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Boolean boolean0 = new Boolean("$8.ngVT*@");
      String string0 = "alter index";
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("alter index", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.1374535592459263
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(252);
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[6];
      stringArray0[0] = " /*--hide--*/";
      stringArray0[1] = " /*--hide--*/";
      stringArray0[2] = "&#Qr~X[Ntz_RffH";
      stringArray0[3] = " /*--hide--*/";
      stringArray0[4] = " /*--hide--*/";
      stringArray0[5] = " /*--hide--*/";
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) " /*--hide--*/";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9714549503478573
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      String[] stringArray0 = new String[0];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Z`hh");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("rename");
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Character.valueOf('N');
      Random.setNextRandom(4);
      boolean boolean1 = SQLUtil.isProcedureCall("exec");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.7754337976947765
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(948);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "call;q`0)yidr4l,zom+;");
      MockThread mockThread1 = new MockThread("pLo=O3dtR");
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(378, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      Boolean boolean0 = SQLUtil.mutatesStructure("call;q`0)yidr4l,zom+;");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)47;
      byteArray0[1] = (byte)47;
      byteArray0[2] = (byte)19;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      String string0 = "r,7Ya(>S";
      TableContainer tableContainer0 = new TableContainer("r,7Ya(>S");
      ColumnDescriptorList columnDescriptorList0 = new ColumnDescriptorList();
      columnDescriptorList0.add((Object) tableContainer0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.databene.jdbacl.model.TableContainer cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0113645074166633
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("execcahlcnitraint");
      String[] stringArray0 = new String[0];
      String[] stringArray1 = new String[2];
      stringArray1[0] = "execcahlcnitraint";
      stringArray1[1] = "execcahlcnitraint";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("execcahlcnitraint", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT execcahlcnitraint FOREIGN KEY () REFERENCES execcahlcnitraint(execcahlcnitraint, execcahlcnitraint)", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLUtil.normalize("org.h2.jdbc.JdbcResultSet", false);
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      int[] intArray0 = null;
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      constantActionActivation0.getLanguageConnectionContext();
      GenericStorablePreparedStatement genericStorablePreparedStatement0 = null;
      try {
        genericStorablePreparedStatement0 = new GenericStorablePreparedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.GenericPreparedStatement", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      DBColumn[] dBColumnArray0 = new DBColumn[6];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(42, "CLOB");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = new Integer(42);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("Y@@yo&+^=e1m+s", defaultDBTable0, dBDataType0, integer0, integer1);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("Y@@yo&+^=e1m+s", defaultDBTable1, dBDataType0);
      dBColumnArray0[1] = (DBColumn) defaultDBColumn1;
      Integer integer2 = new Integer((-643));
      DefaultDBColumn defaultDBColumn2 = new DefaultDBColumn("drop indexmtykakk.^zwmyqhv", defaultDBTable0, dBDataType0, integer0, integer2);
      dBColumnArray0[2] = (DBColumn) defaultDBColumn2;
      DefaultDBColumn defaultDBColumn3 = new DefaultDBColumn("create materialized viewmtykakk.^zwmyqhv", defaultDBTable0, dBDataType0);
      dBColumnArray0[3] = (DBColumn) defaultDBColumn3;
      DefaultDBColumn defaultDBColumn4 = new DefaultDBColumn("CLOB", defaultDBTable1, dBDataType0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "&";
      stringArray0[1] = "drop indexmtykakk.^zwmyqhv";
      stringArray0[2] = "os";
      stringArray0[3] = "create materialized viewmtykakk.^zwmyqhv";
      stringArray0[4] = "os";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "create materialized viewmtykakk.^zwmyqhv";
      stringArray1[1] = "1oN@<[.s0cR=vVxdv";
      stringArray1[2] = "alter table";
      stringArray1[3] = "Zw";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("&", stringArray0, "alter table", "Zw", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.3120464163852703
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      SQLUtil.mutatesStructure("cahlcnItraint");
      SQLUtil.isDDL("cahlcnItraint");
      SQLUtil.isQuery("Q%d}`MP}n{jw");
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("rename", (String[]) null, "(", "<NlY;%+&A_Hkz+", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(3363);
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "alter materialized view");
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread0, scheduledThreadPoolExecutor0);
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(3363, threadFactory0, threadPoolExecutor_DiscardPolicy0);
      Boolean boolean0 = SQLUtil.mutatesStructure("alter materialized view");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      byte byte0 = (byte)42;
      byte byte1 = (byte)47;
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[2] = (byte)42;
      byteArray0[4] = (byte)47;
      String string0 = "alter materialized viewavvz|-zy}";
      SQLUtil.mutatesDataOrStructure("alter materialized viewavvz|-zy}");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2), 'L');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      String string0 = SQLUtil.normalize("+1U(X`9)I}r;P", false);
      assertEquals("+ 1U (X ` 9) I } r ; P", string0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("insertwop`~%|k1q)qfjmu");
      String[] stringArray0 = new String[0];
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "insertwop`~%|k1q)qfjmu", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("insertwop`~%|k1q)qfjmu", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(dBTable0, "vOw|H\"<W3gD%]<YTL_", false, stringArray0);
      SQLUtil.ownerDotComponent(dBPrimaryKeyConstraint0);
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop indexcahlcnitraint", true, dBTable0, stringArray0, dBTable0, stringArray0);
      defaultDBTable0.addForeignKey(dBForeignKeyConstraint0);
      defaultDBTable0.getColumns();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("drop indexcahlcnitraint", dBTable0, 5, ">8]+7");
      assertNull(defaultDBColumn0.getFractionDigits());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      String[] stringArray1 = new String[1];
      stringArray1[0] = "3HRY>{0]Nc_/HBF&";
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin((String) null, stringArray0, "COMMENT ON ", "3HRY>{0]Nc_/HBF&", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "dg#SyzU 2):Fpo";
      stringArray0[1] = "create unique index";
      stringArray0[2] = "LAST_MODIFICATION BIGINT";
      stringArray0[3] = "<\"Xit";
      stringArray0[4] = "Unknown constraint type: ";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      DBDataType.getInstance(0, "alter materialized viewavvz|-zy}");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("alter materialized viewavvz|-zy}", (DBTable) null, 0, "alter materialized viewavvz|-zy}");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)22;
      byteArray0[3] = (byte)22;
      byteArray0[4] = (byte)22;
      byteArray0[5] = (byte)22;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jdbcClob jdbcClob0 = new jdbcClob("");
      jdbcClob jdbcClob1 = new jdbcClob("");
      jdbcClob0.getCharacterStream();
      Reader reader0 = jdbcClob0.getCharacterStream();
      StringReader stringReader0 = new StringReader("alter materialized viewavvz|-zy}");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader0);
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      SQLUtil.normalize("executewvt<`75%/~3z", false);
      TableContainer tableContainer0 = new TableContainer("drop materialized view");
      tableContainer0.getTable("executewvt<`75%/~3z");
      DBDataType.getInstance((-568641203), "5Y5u[FEKV");
      Integer integer0 = RawTransaction.LOCK_ESCALATE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("`ia,S&i?22");
      // Undeclared exception!
      try { 
        defaultDBTable0.getProvider(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("=?");
      DBDataType dBDataType0 = DBDataType.getInstance((-2), "=?");
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.toString();
      String string0 = defaultDBColumn0.toString();
      assertEquals(" : =?(1)", string0);
      
      Integer integer1 = new Integer((-2));
      defaultDBColumn0.setType(dBDataType0);
      Integer integer2 = new Integer(2033);
      Integer.getInteger("kWkKx*f");
      Integer.compareUnsigned((-421089718), 242);
      DBColumn[] dBColumnArray0 = new DBColumn[8];
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[1] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[2] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[3] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[4] = (DBColumn) defaultDBColumn0;
      dBColumnArray0[5] = (DBColumn) defaultDBColumn0;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn(" : =?(1)", defaultDBTable0, dBDataType0, integer2);
      dBColumnArray0[6] = (DBColumn) defaultDBColumn1;
      dBColumnArray0[7] = (DBColumn) defaultDBColumn0;
      String string1 = SQLUtil.renderColumnNames(dBColumnArray0);
      assertEquals(", , , , , ,  : =?(1), ", string1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)22);
      Boolean boolean0 = Boolean.TRUE;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor((byte)22);
      Integer.getInteger("*.{aQaC\"[fR^;q0XG6q");
      Integer.compareUnsigned(48, 335544573);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((DBColumn[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.201793123629589
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      DBDataType.getInstance(335544512, "Server name/address is required for pure Java implementation.");
      Integer integer0 = RawTransaction.COMMIT;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(8);
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      scheduledThreadPoolExecutor0.submit(callable0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      scheduledThreadPoolExecutor0.schedule(callable1, (long) 8, timeUnit0);
      Object object0 = new Object();
      DBSchema dBSchema0 = new DBSchema("|NL`ebZ8`)xB");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("|NL`ebZ8`)xB", dBSchema0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "|NL`ebZ8`)xB";
      stringArray0[1] = "Server name/address is required for pure Java implementation.";
      stringArray0[2] = "drop table";
      stringArray0[3] = "Server name/address is required for pure Java implementation.";
      stringArray0[4] = "|NL`ebZ8`)xB";
      stringArray0[5] = "Server name/address is required for pure Java implementation.";
      String[] stringArray1 = new String[0];
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("Server name/address is required for pure Java implementation.", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      String string0 = SQLUtil.renderValue(dBForeignKeyConstraint0);
      assertEquals("CONSTRAINT \"Server name/address is required for pure Java implementation.\" FOREIGN KEY (|NL`ebZ8`)xB, Server name/address is required for pure Java implementation., drop table, Server name/address is required for pure Java implementation., |NL`ebZ8`)xB, Server name/address is required for pure Java implementation.) REFERENCES |NL`ebZ8`)xB()", string0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Random.setNextRandom((-608));
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "}";
      stringArray0[1] = "}";
      stringArray0[2] = "}";
      stringArray0[3] = "}";
      stringArray0[4] = "}";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "}", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("CONSTRAINT } PRIMARY KEY (}, }, }, }, })", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("=?", 33);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("hll)4");
      defaultDBTable0.getPrimaryKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)42;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "colPerms: grantee=";
      stringArray0[1] = "colPerms: grantee=";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jdbcClob jdbcClob0 = new jdbcClob("colPerms: grantee=");
      jdbcClob jdbcClob1 = new jdbcClob("colPerms: grantee=");
      Reader reader0 = jdbcClob1.getCharacterStream();
      Reader reader1 = jdbcClob1.getCharacterStream();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(reader1);
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "updatecahlconitraint", (VersionNumber) null);
      defaultDatabase0.getTable("select", false);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("inner", (DBTable) null, (byte) (-94), "colPerms: grantee=");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("inner COLPERMS: GRANTEE= NULL", string0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.8578432764245911
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "org.apache.derby.impl.store.raw.data.MemByteHolder";
      stringArray0[1] = "callwvt<`75%/~3z";
      stringArray0[2] = "!XsnH$.\"Js3R";
      stringArray0[3] = "drop index";
      stringArray0[4] = "getURL(String)";
      stringArray0[5] = "drop tabledrop index";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      SQLUtil.renderColumnListWithTableName("DV", stringArray0);
      SQLUtil.join("drop index", "SQL_DATETIME_SUB", stringArray0, "drop index", "rename( i", stringArray0);
      String[] stringArray1 = new String[8];
      stringArray1[0] = "DV";
      stringArray1[1] = "rename'lti#q";
      stringArray1[2] = "drop table'lti#q";
      stringArray1[3] = "rename( i";
      stringArray1[4] = "rename( i";
      stringArray1[5] = "rename( i";
      stringArray1[6] = "DV.org.apache.derby.impl.store.raw.data.MemByteHolder, DV.callwvt<`75%/~3z, DV.!XsnH$.\"Js3R, DV.drop index, DV.getURL(String), DV.drop tabledrop index";
      stringArray1[7] = "DV.org.apache.derby.impl.store.raw.data.MemByteHolder, DV.callwvt<`75%/~3z, DV.!XsnH$.\"Js3R, DV.drop index, DV.getURL(String), DV.drop tabledrop index";
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("drop table'lti#q", (String[]) null, "rename( i", "callwvt<`75%/~3z", stringArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.join("fj5f\"", "~5&neiQq3", (String[]) null, "A=!qtN>s8c[<Q9}", "UFyU{v}G$kQ", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLUtil.normalize("call;q`0)yidr4l,zom+;", true);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "call ; q ` 0) yidr4l, zom + ;";
      stringArray0[1] = "call;q`0)yidr4l,zom+;";
      stringArray0[2] = "call ; q ` 0) yidr4l, zom + ;";
      stringArray0[3] = "call ; q ` 0) yidr4l, zom + ;";
      stringArray0[5] = "call ; q ` 0) yidr4l, zom + ;";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^nh1M.*=\",3:k=A{h");
      stringArray0[7] = "call ; q ` 0) yidr4l, zom + ;";
      stringArray0[8] = "call;q`0)yidr4l,zom+;";
      Recover recover0 = new Recover();
      // Undeclared exception!
      try { 
        recover0.getMaxLengthInplaceLob();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unexpected code path
         //
         verifyException("org.h2.message.DbException", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Vector<DBColumn> vector0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) vector0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(2~2q 4)ye!S'~ ena";
      stringArray0[1] = "";
      stringArray0[2] = "F09H";
      SQLUtil sQLUtil0 = new SQLUtil();
      StringBuilder stringBuilder0 = new StringBuilder(90015);
      StringBuilder stringBuilder1 = SQLUtil.addRequiredCondition("(2~2q 4)ye!S'~ ena", stringBuilder0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "k&~VyijnyKo~", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("(2~2q 4)ye!S'~ ena", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F09H", true, dBTable0, stringArray0, dBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(dBTable0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder1, nameSpec0);
      // Undeclared exception!
      try { 
        stringBuilder1.replace(853, 336, "");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > length()
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) null, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.724563606455945
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("uCf=^");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "uCf=^";
      stringArray0[1] = "~jvL3)+8_38`o5yLE";
      stringArray0[2] = "~jvL3)+8_38`o5yLE";
      stringArray0[3] = "~jvL3)+8_38`o5yLE";
      stringArray0[4] = "uCf=^";
      stringArray0[5] = "~jvL3)+8_38`o5yLE";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "~jvL3)+8_38`o5yLE", false, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("uCf=^", false, dBUniqueConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("~jvL3)+8_38`o5yLE");
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) mockPrintWriter0;
      objectArray0[1] = (Object) dBUniqueConstraint0;
      PrintWriter printWriter0 = mockPrintWriter0.format("~jvL3)+8_38`o5yLE", objectArray0);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(printWriter0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      PrintWriter printWriter1 = mockPrintWriter1.format(locale0, "uCf=^", objectArray0);
      SQLUtil.renderCreateTable(dBTable0, true, nameSpec0, printWriter1);
      assertNotSame(printWriter1, printWriter0);
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      dataDictionaryImpl0.getSystemSchemaDescriptor();
      TableDescriptor tableDescriptor0 = dataDescriptorGenerator0.newTableDescriptor("vOw|H\"<W3gD%]<YTL_", (SchemaDescriptor) null, 9, false, false);
      ColumnDescriptorList columnDescriptorList0 = tableDescriptor0.getColumnDescriptorList();
      dataDescriptorGenerator0.newTableDescriptor("APP", (SchemaDescriptor) null, 5, 'R');
      columnDescriptorList0.getColumnNames();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) columnDescriptorList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      SQLUtil.removeComments("");
      Character character0 = Character.valueOf('|');
      assertEquals('|', (char)character0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      String string0 = null;
      String[] stringArray0 = new String[8];
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[2] = (byte)42;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = SQLUtil.normalize("'L(i#q", false);
      assertEquals("'L(i#q'", string0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)42;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "colPMperms: grantee=";
      stringArray0[1] = "colPMperms: grantee=";
      stringArray0[2] = "colPMperms: grantee=";
      stringArray0[4] = "colPMperms: grantee=";
      stringArray0[5] = "colPMperms: grantee=";
      stringArray0[6] = "colPMperms: grantee=";
      jdbcClob jdbcClob0 = new jdbcClob("colPMperms: grantee=");
      jdbcClob0.truncate(16L);
      SQLUtil.isDML("updatecahlcoiitraiqt");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&p/LcQqNAc";
      stringArray0[1] = "&p/LcQqNAc";
      stringArray0[2] = "&p/LcQqNAc";
      stringArray0[3] = "vOw|H\"<W3gD%]<YTL_";
      stringArray0[4] = "insertwop`~%|k1q)qfjmu";
      stringArray0[5] = "vOw|H\"<W3gD%]<YTL_";
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(335544354, "PRIMARY KEY ");
      dBDataType0.isAlpha();
      Integer integer0 = new Integer(116);
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.sum((-534026206), 116);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("CLOB", defaultDBTable0, (DBDataType) null, integer1);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(335544392);
      Callable<String> callable0 = (Callable<String>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable0).call();
      scheduledThreadPoolExecutor0.submit(callable0);
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      Callable<Object> callable1 = (Callable<Object>) mock(Callable.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(callable1).call();
      scheduledThreadPoolExecutor0.schedule(callable1, 1L, timeUnit0);
      Object object0 = new Object();
      String string0 = SQLUtil.renderValue("alter materialized view,abwg");
      assertEquals("'alter materialized view,abwg'", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      TableContainer tableContainer0 = new TableContainer("SELECT * FROM ");
      tableContainer0.getSchema();
      String string0 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("SELECT * FROM ", string0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter table\u01D8");
      tableContainer0.getTable("alter table\u01D8");
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator((DataDictionary) null);
      ConcurrentXactFactory concurrentXactFactory0 = new ConcurrentXactFactory();
      BasicUUID basicUUID0 = new BasicUUID();
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition("alter table\u01D8", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      stringBuilder0.chars();
      StringBuilder stringBuilder1 = stringBuilder0.append((CharSequence) null);
      StringBuilder stringBuilder2 = new StringBuilder(stringBuilder1);
      SQLUtil.addOptionalCondition("[,heV}5dZ.nc1$<g+1", stringBuilder2);
      int int0 = (-182);
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-182), "[,heV}5dZ.nc1$<g+1");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -182
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      DataDescriptorGenerator dataDescriptorGenerator0 = new DataDescriptorGenerator(dataDictionaryImpl0);
      dataDictionaryImpl0.getSystemSchemaDescriptor();
      TableDescriptor tableDescriptor0 = dataDescriptorGenerator0.newTableDescriptor("vOw|H\"<W3gD%]<YTL_", (SchemaDescriptor) null, 9, false, false);
      ColumnDescriptorList columnDescriptorList0 = tableDescriptor0.getColumnDescriptorList();
      columnDescriptorList0.getColumnNames();
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("80000000-00d2-b38f-4cda-000a0a412c00");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)22);
      Boolean boolean0 = Boolean.TRUE;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor((byte)22);
      Boolean boolean1 = Boolean.FALSE;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.4479989633956651
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "vOw|H\"<W3gD%]<YTL_";
      StringReader stringReader0 = new StringReader("alter index");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      Random.setNextRandom((-4));
      Random.setNextRandom((-275));
      DBSchema dBSchema0 = new DBSchema("vOw|H\"<W3gD%]<YTL_");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("alter index", dBSchema0);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM alter index WHERE vOw|H\"<W3gD%]<YTL_ = 'vOw|H\"<W3gD%]<YTL_' AND null = null AND null = null AND null = null AND null = null AND null = null AND null = null", string0);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "n(v|oW~\\GlE3:Xts";
      String[] stringArray0 = new String[8];
      stringArray0[0] = "n(v|oW~GlE3:Xts";
      stringArray0[1] = "n(v|oW~GlE3:Xts";
      stringArray0[2] = "n(v|oW~GlE3:Xts";
      stringArray0[3] = "n(v|oW~GlE3:Xts";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "n(v|oW~GlE3:Xts");
      stringArray0[5] = "n(v|oW~GlE3:Xts";
      stringArray0[6] = "alter materialized view";
      stringArray0[7] = "n(v|oW~GlE3:Xts";
      SQLUtil.innerJoin("n(v|oW~GlE3:Xts", stringArray0, "", ".p2", stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray1 = new String[4];
      CreateTableData createTableData0 = new CreateTableData();
      Session session0 = createTableData0.session;
      RunScriptCommand runScriptCommand0 = null;
      try {
        runScriptCommand0 = new RunScriptCommand((Session) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.h2.command.Prepared", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "truncate";
      stringArray0[1] = "os";
      stringArray0[2] = "'LTi#q";
      String[] stringArray1 = new String[8];
      stringArray1[0] = "truncate";
      stringArray1[1] = "'LTi#q";
      stringArray1[3] = "'LTi#q";
      stringArray1[4] = "os";
      stringArray1[5] = "'LTi#q";
      stringArray1[6] = "y4-jb]DaFE&2T8f";
      stringArray1[7] = "&";
      String string0 = SQLUtil.innerJoin("truncate", stringArray0, "y4-jb]DaFE&2T8f", "truncate", stringArray1);
      assertEquals("y4-jb]DaFE&2T8f as truncate on truncate.truncate = truncate.truncate and truncate.os = truncate.'LTi#q and truncate.'LTi#q = truncate.null", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)42;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "colPMperms: grantee=";
      stringArray0[1] = "colPMperms: grantee=";
      stringArray0[2] = "colPMperms: grantee=";
      stringArray0[3] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[4] = "colPMperms: grantee=";
      stringArray0[6] = "colPMperms: grantee=";
      jdbcClob jdbcClob0 = new jdbcClob("colPMperms: grantee=");
      jdbcClob0.truncate(16L);
      Reader reader0 = jdbcClob0.getCharacterStream();
      reader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(reader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.pushBack();
      streamTokenizer0.nextToken();
      streamTokenizer0.nval = (double) (byte) (-94);
      jdbcClob0.getAsciiStream();
      reader0.markSupported();
      streamTokenizer0.commentChar(6688);
      streamTokenizer0.nval = (-1277.90894);
      SQLUtil.renderNumber(streamTokenizer0);
      Character.valueOf('b');
      String string0 = SQLUtil.normalize("", true);
      assertEquals("", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      SQLUtil.normalize("al;er tableyj-;t^y^%~=mz~", false);
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      GenericLanguageFactory genericLanguageFactory1 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation2 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation2.getMethod("al ; er tableyj - ; t ^ y ^ % ~ = mz ~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      SQLUtil.normalize("alter table`yj-;t^y^%l=mz~", true);
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      GenericStorablePreparedStatement genericStorablePreparedStatement0 = null;
      try {
        genericStorablePreparedStatement0 = new GenericStorablePreparedStatement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.GenericPreparedStatement", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "(2~2q 4)ye!S'~ ena";
      stringArray0[2] = "F09H";
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "k&~VyijnyKo~", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("(2~2q 4)ye!S'~ ena", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("F09H", true, dBTable0, stringArray0, dBTable0, stringArray0);
      dBForeignKeyConstraint0.isIdentical(dBTable0);
      Random.setNextRandom(471);
      SQLUtil.ownerDotComponent(dBUniqueIndex0);
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor((byte)22);
      Boolean boolean0 = Boolean.TRUE;
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor((byte)22);
      Boolean boolean1 = Boolean.FALSE;
      String string0 = SQLUtil.substituteMarkers(":Oz[D_=>veWVvQO ", "", boolean1);
      assertEquals("false:falseOfalsezfalse[falseDfalse_false=false>falsevfalseefalseWfalsefalseVfalsevfalseQfalseOfalse false", string0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "G";
      stringArray0[1] = "G";
      stringArray0[3] = "G";
      stringArray0[3] = "G";
      int int0 = (-256);
      char char0 = 'N';
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.325342919442848
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      Integer integer0 = RawTransaction.COMMIT;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Integer integer1 = RawTransaction.COMMIT;
      Boolean boolean1 = Boolean.TRUE;
      Integer integer2 = RawTransaction.ABORT;
      SQLUtil.mutatesDataOrStructure("delete");
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)124;
      SQLUtil.mutatesDataOrStructure("alter matrialized viewavvz|-zy}");
      ExecSPSNode execSPSNode0 = new ExecSPSNode();
      execSPSNode0.setEndOffset((-1517));
      // Undeclared exception!
      try { 
        execSPSNode0.orReliability(3100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      SQLUtil.removeComments("alter sabl5yj-;$^y^%~=mz~");
      FormatableProperties formatableProperties0 = new FormatableProperties();
      CursorNode cursorNode0 = new CursorNode();
      CursorNode cursorNode1 = new CursorNode();
      // Undeclared exception!
      try { 
        cursorNode1.makeResultDescription();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.DMLStatementNode", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)22;
      byteArray0[2] = (byte)42;
      String[] stringArray0 = new String[8];
      stringArray0[0] = "colPMperms: grantee=";
      stringArray0[1] = "colPMperms: grantee=";
      stringArray0[2] = "colPMperms: grantee=";
      stringArray0[3] = "K0 szS=>F-M\"?|I5/V";
      stringArray0[4] = "colPMperms: grantee=";
      stringArray0[6] = "colPMperms: grantee=";
      jdbcClob jdbcClob0 = new jdbcClob("colPMperms: grantee=");
      DBSequence dBSequence0 = new DBSequence("colPMperms: grantee=", "K0 szS=>F-M\"?|I5/V", "-3{<;h6Hi|e#|y#");
      BigInteger bigInteger0 = BigInteger.TEN;
      BigInteger bigInteger1 = ValueLong.MAX;
      BigInteger bigInteger2 = BigInteger.TEN;
      bigInteger2.longValueExact();
      BigInteger bigInteger3 = bigInteger0.min(bigInteger2);
      dBSequence0.setMinValue(bigInteger3);
      BigInteger bigInteger4 = BigInteger.ONE;
      dBSequence0.dropDDL();
      dBSequence0.isCycle();
      dBSequence0.setCycle((Boolean) null);
      String string0 = SQLUtil.typeAndName(dBSequence0);
      assertEquals("sequence colPMperms: grantee=", string0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      String[] stringArray0 = new String[23];
      stringArray0[1] = null;
      stringArray0[0] = "";
      stringArray0[3] = null;
      stringArray0[4] = null;
      SQLUtil.join((String) null, "", stringArray0, "|v'&Y", stringArray0[3], stringArray0);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "insert@%&gjl");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte) (-41);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "ub DA";
      stringArray0[1] = "insert@%&gjl";
      stringArray0[2] = "insert@%&gjl";
      stringArray0[3] = "insert@%&gjl";
      String string0 = SQLUtil.leftJoin("insert@%&gjl", stringArray0, "ub DA", "http://", stringArray0);
      assertEquals("left join ub DA as http:// on insert@%&gjl.ub DA = http://.ub DA and insert@%&gjl.insert@%&gjl = http://.insert@%&gjl and insert@%&gjl.insert@%&gjl = http://.insert@%&gjl and insert@%&gjl.insert@%&gjl = http://.insert@%&gjl", string0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      byte byte0 = (byte) (-94);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-94);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("A", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.1495747713671385
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[2] = "px>?V ??|!5x";
      stringArray0[3] = "g s";
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) "g s";
      objectArray0[1] = (Object) "g s";
      objectArray0[2] = (Object) "-xt 2yrj59%b+6^Ctt";
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[5] = (Object) "_.WLuO";
      Object object1 = new Object();
      objectArray0[6] = object1;
      objectArray0[7] = (Object) "g s";
      objectArray0[8] = (Object) "-xt 2yrj59%b+6^Ctt";
      String string0 = SQLUtil.renderWhereClause(stringArray0, objectArray0);
      assertNotNull(string0);
  }
}
