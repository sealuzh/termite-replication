/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 10:27:16 GMT 2020
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.8869588877140164
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(4294967295L);
      Range range2 = Range.of(4294967295L, 9223372036854775807L);
      range2.getLength();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-128L), 65535L);
      range4.equals((Object) null);
      Object object1 = new Object();
      range4.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder((-128L), 9223372032559808513L);
      Range.of((-2838L));
      range2.intersection(range4);
      range_Builder0.contractEnd((-915L));
      List<Range> list0 = range3.complement(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, (-915L), 9223372032559808513L);
      range1.complement(range2);
      Range.ofLength(301L);
      List<Range> list1 = range0.complement(range1);
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7596532626767805
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 7189775252084L, 9223372036854775807L);
      range0.equals(range1);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandBegin(9223372036854775447L);
      Range range2 = Range.of(range_CoordinateSystem0, (-697L), (-387L));
      range_Builder0.contractEnd((-128L));
      range1.isSubRangeOf(range2);
      range_Builder1.contractBegin(255L);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder0.copy();
      Range range3 = Range.of(9223364842784556428L);
      range0.intersection(range3);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range_Builder3.contractEnd(23L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5665655573441635
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range range0 = Range.of((-413L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 361L);
      range0.spliterator();
      Range range1 = Range.of((-1L), 361L);
      Object object0 = new Object();
      range1.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      UnaryOperator<Range> unaryOperator0 = UnaryOperator.identity();
      linkedList0.replaceAll(unaryOperator0);
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      Range.of(range_CoordinateSystem0, (-413L), (-1L));
      Range.Builder range_Builder1 = new Range.Builder();
      Range range2 = range_Builder0.build();
      range0.equals(range2);
      long long0 = 6442450944L;
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, 2661L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.729558364886558
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), 7189775252084L);
      range0.equals("xJ\"t=E`#FJ\"4 w|ge'");
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2167L);
      range0.equals(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      List<Range> list0 = range1.split(7189775252084L);
      range1.complementFrom(list0);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      // Undeclared exception!
      try { 
        Range.ofLength((-413L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.5586151908404706
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.of((-128L));
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 9223372036854775807L);
      range1.getLength();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 65535L;
      Range range3 = Range.of(range_CoordinateSystem0, (-128L), 65535L);
      range3.equals(range2);
      Object object1 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372032559808513L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.734296155368244
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      long long0 = (-128L);
      Range.of((-128L));
      long long1 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 9223372036854775807L);
      range1.getLength();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      long long2 = 1L;
      Range range2 = Range.of((-2147483648L), 1L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, (-128L), 65535L);
      range2.equals(range3);
      Object object1 = new Object();
      range2.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder((-2838L), 1021L);
      Range range4 = Range.of(9223372036854775807L);
      range4.intersection(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(9223372032559808513L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.976544516702746
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(1483L, 9223372036854775807L);
      Long long0 = new Long((-128L));
      Long.getLong((String) null, (Long) null);
      Long.compare(9223372036854775807L, 9223372036854775807L);
      range0.equals(long0);
      long long1 = (-9223372036854775808L);
      Range.Builder range_Builder0 = new Range.Builder((-9223372036854775808L), 9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.2995842284179835
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-128L), 7189775252084L);
      range0.equals("xJ\"t=E`#FJ\"4 w|ge'");
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin(2167L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-128L), 7189775252084L);
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(7189775252084L, 2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.942734887715744
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = 3380L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3380L, 3380L);
      range0.intersects(range0);
      Range range1 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.9728457116721216
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4294967295L, 9223372032559808513L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.of(96711L, 9223372032559808513L);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.029806733435126
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of((-2721L), 96711L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf(";:1 *77\"1$$vw_z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.;:1 *77\"1$$vw_z
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.5078031097399562
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.startsBefore(range1);
      range1.endsBefore(range0);
      range1.equals((Object) null);
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-2334L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(object1);
      Range.Builder range_Builder3 = new Range.Builder(2875L, 9223372036854775807L);
      Object object2 = new Object();
      Range range2 = Range.of(9223372036854775569L);
      range1.equals(range2);
      Range range3 = Range.of(9223372036854775569L, 9223372036854775807L);
      range3.intersection(range2);
      range_Builder1.contractEnd((-2334L));
      List<Range> list0 = range0.complement(range3);
      // Undeclared exception!
      try { 
        range1.complementFrom(list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2311562953024398
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 1 .. 0 ]/RB");
      range1.spliterator();
      Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.equals(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5645012309444555
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 857L, 857L);
      Range range0 = Range.ofLength(857L);
      range0.getBegin(range_CoordinateSystem0);
      range0.getEnd();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-517L), (-517L));
      Range range2 = range0.intersection(range1);
      range2.toString();
      Range range3 = Range.of((-517L), 856L);
      range3.getBegin();
      Range.of(0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range1.equals(range2);
      Range.of(range_CoordinateSystem2, 3683L, 3683L);
      Range.of(range_CoordinateSystem0, (-3243L), (-517L));
      range1.getBegin(range_CoordinateSystem0);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.parseRange("[ -517 .. -518 ]/0B", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse [ -517 .. -518 ]/0B into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.872327462020019
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      long long0 = 3384L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3384L, 3384L);
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-1981L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 3384L, (-1981L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.953006930977294
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.ofLength(363L);
      range1.complement(range0);
      range0.intersection(range1);
      Range range2 = Range.ofLength(2147483647L);
      range0.equals((Object) null);
      List<Range> list0 = range0.complement(range2);
      List<Range> list1 = range0.complementFrom(list0);
      range1.complementFrom(list1);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-868L), 2147483647L);
      Range range3 = Range.of(376L);
      Range range4 = Range.of((-1030L), 2147483647L);
      Range range5 = Range.ofLength(376L);
      range0.complement(range5);
      Range.of((-2748L), (-2748L));
      range4.complement(range2);
      Range range6 = range3.asRange();
      assertSame(range3, range6);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.4226493654550905
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(198L);
      range_Builder0.expandBegin(255L);
      range_Builder0.expandBegin(198L);
      range_Builder0.copy();
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.iterator();
      range0.toString(range_CoordinateSystem0);
      range0.getLength();
      range0.equals("[ -453 .. 197 ]/0B");
      Range range1 = Range.of(range_CoordinateSystem0, 651L, 651L);
      range0.getLength();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range1.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("[ -453 .. 197 ]/0B", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.24652982222868
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = (-3452L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3452L), (-3452L));
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-3452L));
      long long1 = 1323L;
      Range.of((-5372L), 1323L);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.6484046489079267
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-413L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 361L);
      range0.spliterator();
      Range range1 = Range.of((-1L), 9223364859964425608L);
      Object object0 = new Object();
      range1.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complementFrom(linkedList0);
      Range range2 = Range.of(range_CoordinateSystem0, 361L, 361L);
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder();
      Range range3 = range_Builder0.build();
      range_Builder0.shift((-27L));
      range_Builder0.expandEnd((-22L));
      Range range4 = Range.of((-22L));
      List<Range> list0 = range3.complement(range4);
      assertTrue(list0.contains(range3));
      
      range4.asRange();
      Range range5 = range3.intersection(range1);
      assertSame(range3, range5);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.016167410457118
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder();
      Object object1 = new Object();
      Range range0 = Range.of((-207L));
      Long.getLong("", 0L);
      range0.equals((Object) null);
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(128L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.533377665048877
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(1353L);
      List<Range> list0 = range1.complement(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(376L);
      range1.equals(range3);
      List<Range> list1 = range2.complementFrom(list0);
      range1.complementFrom(list1);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      long long0 = 2147483606L;
      Range.ofLength(376L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.4166012654453493
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of((-128L), (-128L));
      range0.endsBefore(range1);
      String string0 = null;
      range0.equals(range1);
      range1.toString();
      Range.Builder range_Builder0 = new Range.Builder(0L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      range1.equals(object2);
      Range.Builder range_Builder2 = new Range.Builder(0L, 4294967295L);
      Object object3 = new Object();
      Range.of(32767L);
      Object object4 = new Object();
      range0.equals(object4);
      Range.of(9223372036854679097L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 902L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.710514740610358
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-44L), (-44L));
      Range range1 = Range.of(range_CoordinateSystem0, (-44L), 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range3 = Range.ofLength(846L);
      range2.complement(range1);
      Range.of(range_CoordinateSystem0, (-44L), 255L);
      range1.intersection(range2);
      Range range4 = Range.of(range_CoordinateSystem1, (-2411L), 2147483647L);
      range4.isSubRangeOf(range0);
      Range.of(1284L, 4294967295L);
      Range.of(255L);
      Range.of((-2411L), 2124L);
      range3.asRange();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      String string0 = range_CoordinateSystem2.getAbbreviatedName();
      assertEquals("0B", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.2915844883716994
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3452L), (-3452L));
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long0 = new Long(96711L);
      range0.equals(long0);
      Range range1 = Range.of((-3452L), 408L);
      range1.intersection(range0);
      Range.Comparators.values();
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      assertEquals(Range.CoordinateSystem.ZERO_BASED, range_CoordinateSystem1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.4110928227825785
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = (-786L);
      Range range0 = Range.of(range_CoordinateSystem0, (-786L), 775L);
      Range range1 = Range.of((-128L));
      range1.complement(range0);
      Long long1 = new Long((-786L));
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of((-158L), (-382L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.664541820703705
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      range2.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = new Long((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range3 = Range.of((-815L), (-128L));
      Range range4 = Range.of(range_CoordinateSystem0, (-26L), 1354L);
      Range range5 = range4.intersection(range1);
      range5.intersects(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-127L), (-3037L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6164981273409467
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.complement(range3);
      Range range4 = Range.of(509L, 2147483647L);
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range range5 = Range.of((-10L), (-1L));
      range5.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complement(range4);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-10L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -11 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.4719487473203228
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      range0.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range2.equals(list0);
      range0.getLength();
      Range.Builder range_Builder0 = new Range.Builder();
      long long0 = (-756L);
      Range.of(2147483647L);
      range2.intersection(range2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer1);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.044404464687264
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder0.contractEnd((-2334L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      // Undeclared exception!
      try { 
        Range.of(2875L, (-1134L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.572588123811884
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(1318L);
      Range range1 = Range.ofLength(65535L);
      range1.startsBefore(range0);
      range0.intersection(range1);
      Range range2 = Range.of((-3452L), (-3452L));
      Range.of((-32768L), 32767L);
      range0.startsBefore(range1);
      Range range3 = range2.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range3.getEnd(range_CoordinateSystem0);
      range2.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.0501472437474773
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of((-413L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 361L;
      Range.Builder range_Builder0 = new Range.Builder();
      range0.spliterator();
      range0.getBegin();
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        Range.ofLength((-1959L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.8184119474979377
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      long long0 = (-32768L);
      Range.of((-32768L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.407841061985104
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.ofLength(2147483647L);
      range0.endsBefore(range1);
      range0.equals("DKx%BeE^");
      range0.toString();
      Range.Builder range_Builder0 = new Range.Builder(2147483647L, 2147483647L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Object object0 = new Object();
      range2.equals(list0);
      long long0 = 2875L;
      Range.Builder range_Builder2 = new Range.Builder(2875L, 2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range1);
      // Undeclared exception!
      range2.split(long0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      long long0 = 3380L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 3380L, 3380L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.5139155890607436
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of((-413L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 2029L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.shift(2029L);
      Range range1 = Range.of(978L);
      range0.complement(range1);
      range1.asRange();
      range0.intersects(range1);
      Range.Builder range_Builder2 = new Range.Builder();
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(4060L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.6552263331100816
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-786L), 775L);
      Range range1 = Range.of((-128L));
      List<Range> list0 = range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, (-128L), 1099L);
      List<Range> list1 = range2.complement(range0);
      Range.of((-1L), 252L);
      range1.complementFrom(list0);
      assertTrue(list0.isEmpty());
      
      Range range3 = Range.of((-2147483648L));
      List<Range> list2 = new LinkedList<Range>();
      assertFalse(list2.equals((Object)list1));
      
      range0.asRange();
      Range range4 = range3.intersection(range1);
      assertFalse(range3.isEmpty());
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.382921979057259
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, (-128L));
      range_Builder0.copy();
      Object object0 = new Object();
      range1.equals((Object) null);
      long long0 = 2875L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(9223372036854775807L, 2875L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.288456098126682
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      Range range1 = Range.parseRange("[ 1 .. 1 ]/RB");
      range1.spliterator();
      Range.of(0L, 0L);
      range1.equals(range0);
      // Undeclared exception!
      try { 
        range1.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.45418952595282
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(254L, 1096L);
      range0.getLength();
      Range range1 = Range.ofLength(773L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      Range range2 = range0.intersection(range1);
      Object object0 = new Object();
      range2.equals(range0);
      range1.getLength();
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of(773L);
      range0.intersection(range2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1086L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.3681741168218116
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.getLength();
      range0.complement(range1);
      Range range2 = Range.ofLength(0L);
      Range range3 = Range.ofLength(4272L);
      range2.intersects(range3);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 2702L, 2702L);
      Range range5 = Range.ofLength(1L);
      range5.isSubRangeOf(range4);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1393L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1393 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.098078165782356
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      Object object0 = new Object();
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$Comparators");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$Comparators
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.8165277423549644
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.complement(range3);
      Range range4 = Range.of(509L, 2147483647L);
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      List<Range> list1 = range2.complementFrom(list0);
      assertEquals(0, list1.size());
      
      range0.complementFrom(list0);
      Range range5 = Range.of((-1L), (-1L));
      range5.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list2 = range1.complement(range4);
      assertTrue(list2.contains(range1));
      
      Range range6 = Range.of(776L, 9223372034707292160L);
      Range.ofLength(3240L);
      List<Range> list3 = range6.complement(range4);
      assertEquals(1, list3.size());
      assertFalse(list3.contains(range6));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.807375073706309
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range1.complement(range2);
      Range.of(509L, 2147483647L);
      List<Range> list0 = range1.complement(range2);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range range3 = Range.of((-1L), 2147483647L);
      List<Range> list1 = range3.complement(range1);
      assertFalse(list1.contains(range3));
      assertEquals(1, list1.size());
      
      range2.complement(range1);
      range0.asRange();
      Range range4 = range0.intersection(range3);
      assertSame(range4, range2);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.1191623125197534
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-128L);
      long long1 = 255L;
      Range range0 = Range.of(255L, 255L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      long long2 = 247L;
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(247L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.371096027880093
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.complement(range1);
      Range range2 = Range.of(0L, 0L);
      Range range3 = Range.of(0L, 0L);
      boolean boolean0 = range3.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range4 = range0.intersection(range3);
      Range.Builder range_Builder0 = new Range.Builder(1525L);
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 1525L);
      Range range5 = Range.ofLength(0L);
      Range range6 = Range.ofLength(0L);
      range4.equals(range5);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 1L, 0L);
      Range range7 = range_Builder1.build();
      range1.complement(range6);
      Range.Comparators.values();
      List<Range> list0 = range2.complement(range6);
      assertTrue(list0.contains(range1));
      assertFalse(range6.equals((Object)range2));
      
      Range.Comparators.values();
      long long0 = range1.getBegin();
      assertFalse(range1.isEmpty());
      assertNotSame(range1, range7);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.4922802587696533
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(376L);
      Object object0 = new Object();
      range0.equals(object0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range range2 = Range.ofLength(2507L);
      Range range3 = Range.ofLength(255L);
      Range range4 = Range.of((-3161L), 538L);
      range2.complement(range3);
      // Undeclared exception!
      try { 
        range4.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.850252988737933
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range range0 = Range.of(1318L);
      Range range1 = Range.ofLength(65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.spliterator();
      Range range2 = Range.of(1318L, 65535L);
      Range range3 = Range.of(range_CoordinateSystem0, 65535L, 4294967295L);
      range1.complement(range0);
      Range range4 = Range.of((-2147483648L), 4294967295L);
      Range range5 = Range.of(4294967295L);
      range4.complement(range5);
      range3.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      long long0 = 65535L;
      Range.of(65535L);
      // Undeclared exception!
      try { 
        range1.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.694477436485169
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.complement(range3);
      range2.intersects(range0);
      Range range4 = Range.of(509L, 2147483647L);
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      range0.complementFrom(list0);
      Range range5 = Range.of((-1L), (-1L));
      range5.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complement(range4);
      Range.of(776L, 9223372034707292160L);
      Range range6 = Range.of(509L, 9223372036854775807L);
      assertFalse(range6.equals((Object)range4));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.0470742228559295
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2919L), (-10L));
      Range range1 = Range.of((-2884L), (-2884L));
      range1.isSubRangeOf(range0);
      String string0 = "";
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.8341258765552606
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      long long0 = (-3452L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3452L), (-3452L));
      long long1 = (-927L);
      Collection<Range> collection0 = null;
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.470810517473703
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(376L);
      range1.equals(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range2);
      range1.complementFrom(linkedList0);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.ofLength(376L);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.2624480552614785
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      long long0 = (-128L);
      Range.of((-128L));
      Range range0 = Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.split(9223372036854775807L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.002697432380181
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-2147483648L), 96711L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem1);
      assertEquals(96711L, long0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.1580761939495963
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3452L), (-3452L));
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Long long0 = new Long(96711L);
      long long1 = (-2147482231L);
      Range.of(range_CoordinateSystem0, (-2147482231L), (-3452L));
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.JillionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.JillionUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.9251973297727805
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(96711L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(96711L, (-2721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.5557304063589066
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.of((-143L));
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.split(9223372036854775807L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(376L);
      range1.equals(range3);
      range2.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range2);
      range1.complementFrom(linkedList0);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.ofLength(376L);
      range1.getEnd();
      // Undeclared exception!
      try { 
        Range.ofLength((-143L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.3228325151590434
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(1318L);
      long long0 = 65535L;
      Range range1 = Range.ofLength(65535L);
      range1.startsBefore(range0);
      Range range2 = range0.intersection(range1);
      Range.of(127L, 1318L);
      range2.equals(range0);
      // Undeclared exception!
      try { 
        range2.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.9530375303326304
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1375L, 1375L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(1375L, (-2721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.4064540653524187
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1375L, 96711L);
      Range range1 = Range.ofLength(4294967295L);
      range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      range1.complement(range0);
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.7117383329392224
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 254L, 96711L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, (-478L), (-478L));
      List<Range> list0 = range0.complement(range1);
      Range range2 = Range.of((-142L), 254L);
      range1.complementFrom(list0);
      Range range3 = Range.of(96711L);
      Range range4 = Range.of(254L, 254L);
      List<Range> list1 = range4.complement(range3);
      assertFalse(list1.contains(range0));
      
      range2.asRange();
      Range range5 = range0.intersection(range4);
      assertSame(range5, range4);
      assertFalse(range5.isEmpty());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.608680817984215
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = (-128L);
      Range range0 = Range.of((-128L));
      Range range1 = Range.ofLength(9223372036854775807L);
      List<Range> list0 = range1.complement(range0);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.ofLength(376L);
      range1.equals(range3);
      List<Range> list1 = range2.complementFrom(list0);
      range1.complementFrom(list1);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Object object0 = new Object();
      range0.equals(object0);
      long long1 = 2875L;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(9223372036854775807L, 9223364812719785363L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.9761388013384353
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.9977665653806165
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.ofLength(2024L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.51202925966096
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-124L), 775L);
      Range range1 = Range.of(range_CoordinateSystem0, (-124L), 335L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("#Ekv?:!EE-L%<]2(K");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.#Ekv?:!EE-L%<]2(K
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.432284419993769
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-6009L), 254L);
      Range range1 = Range.of((-6009L));
      boolean boolean0 = range0.intersects(range0);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1319L, 2147483647L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, 254L, 9223364778360047003L);
      Range range3 = range2.intersection(range1);
      boolean boolean1 = range1.intersects(range3);
      assertFalse(boolean1 == boolean0);
      assertTrue(range3.isEmpty());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.38337753151599
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder0.contractEnd((-2334L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder2 = new Range.Builder(2875L, 9223372036854775807L);
      Object object2 = new Object();
      Range range1 = Range.of((-3622L));
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -3622 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.9690137448276874
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-6009L), 254L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, (-10L), 1007L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.of(1007L, 592L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.8866098941009533
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range.of(1535L, 96711L);
      Range.Comparators.values();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      assertEquals("0B", range_CoordinateSystem0.getAbbreviatedName());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.886967583599305
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), 32767L);
      range_Builder0.build();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("4Kt4>'6k53eH.#)V$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 4Kt4>'6k53eH.#)V$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.877585910557535
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      assertFalse(range0.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(255L, 3903L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.2391737324834824
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3452L), (-3452L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.expandBegin((-3452L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem1, 1196L, 1196L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem2, (-2310L), (-413L));
      range1.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(1196L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.343345991534444
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getLength();
      Range.ofLength(34L);
      Long long0 = new Long(0L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-3962L), 34L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("I;I?a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.I;I?a
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.1225491433837704
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-2334L));
      range_Builder1.contractBegin(1368L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder3 = new Range.Builder(2875L, 9223372036854775807L);
      Object object2 = new Object();
      Range range1 = Range.of(9223372036854775569L);
      range0.equals(range1);
      Range.Builder range_Builder4 = new Range.Builder();
      range_Builder4.contractEnd((-2334L));
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.3096811598127185
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = (-816L);
      Range.of(range_CoordinateSystem2, (-816L), (-128L));
      range1.equals(range2);
      // Undeclared exception!
      try { 
        Range.of(0L, (-816L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.2035414916849403
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-511L), 0L);
      range0.getLength();
      Range.ofLength(0L);
      // Undeclared exception!
      try { 
        Range.of(506L, (-511L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.5807017309791918
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-413L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 361L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      long long0 = 897L;
      Range range1 = Range.ofLength(897L);
      range1.equals(spliterator0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.ofLength(361L);
      // Undeclared exception!
      try { 
        Range.ofLength((-413L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.388811611972125
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.split(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(2147483647L, 2147483647L);
      range2.getLength();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range0.intersection(range2);
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        range2.split((-1260L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.4392888029075133
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 254L, 96711L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-6008L), (-6008L));
      Range range2 = range0.intersection(range1);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      range0.complement(range2);
      Range.Comparators[] range_ComparatorsArray1 = Range.Comparators.values();
      assertNotSame(range_ComparatorsArray1, range_ComparatorsArray0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.2452324781809123
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(65535L);
      range_Builder0.copy();
      range_Builder0.expandEnd(65535L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandBegin(2167L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 473L;
      Range range1 = Range.of(range_CoordinateSystem0, 473L, 65535L);
      long long1 = (-697L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 473L, (-661L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.5194464745023435
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2720L), 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 3380L, 3380L);
      Range range1 = Range.ofLength(127L);
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-414L), (-1L));
      range2.intersection(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 9223372036854774612L, (-993L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.8152049266199466
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Comparators.values();
      Range range0 = Range.ofLength(127L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.459662502895178
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2L, 255L);
      Range range1 = Range.of(730L);
      range0.endsBefore(range1);
      Range.ofLength(730L);
      range0.isSubRangeOf(range1);
      Range.of((-3080L), 725L);
      Range.of(730L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-3080L), 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.939099261288858
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(96711L);
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(96711L, (-2721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.206929430018759
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 2L, 255L);
      Range range1 = Range.of(730L);
      range0.endsBefore(range1);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.246485869818788
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range range0 = Range.of(2163L);
      Range range1 = Range.ofLength(2147483647L);
      range0.startsBefore(range1);
      range1.intersection(range0);
      Range.ofLength(2163L);
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2163L, (-1993L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.6348034879509097
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.ofLength(65535L);
      range0.spliterator();
      Range.of(1318L, 65535L);
      long long1 = 4294967295L;
      long long2 = (-2147483648L);
      Range range1 = Range.of((-2147483648L), 4294967295L);
      Range range2 = Range.of(4294967295L);
      range1.complement(range2);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("9wgfC!QV9W28");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.9wgfC!QV9W28
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.4005625290197785
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      long long0 = 0L;
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range1.toString();
      Range range2 = Range.of(0L, 0L);
      range2.startsBefore(range0);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.getEnd(range_CoordinateSystem1);
      range3.toString(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range_CoordinateSystem2.toString();
      // Undeclared exception!
      try { 
        Range.parseRange("file can not be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse file can not be null into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.239173732483482
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of((-413L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1L), 361L);
      range0.spliterator();
      Range.of((-1L), 9223364859964425608L);
      Object object0 = new Object();
      Range.of((-1L), 361L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.JillionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.JillionUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.1041248519656817
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.equals((Object) null);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L, 9223372036854775807L);
      range_Builder0.contractEnd((-2334L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder0.copy();
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Range.Builder range_Builder2 = new Range.Builder(2875L, 9223372036854775807L);
      Object object2 = new Object();
      Range range1 = Range.of(9223372036854775569L);
      range0.equals(range1);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.contractEnd((-2334L));
      range1.asRange();
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -9223372036854773475 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.1846345041014326
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 254L;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-6009L), 254L);
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      long long1 = 2147483647L;
      range0.split(2147483647L);
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 2147483647L, 2147483647L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder3.copy();
      long long2 = 1497L;
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.555802798502318
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-135L));
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-5305L), (-1L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder((-5305L), 661L);
      Range.Builder range_Builder3 = range_Builder0.expandEnd((-3173L));
      range_Builder1.copy();
      range_Builder1.shift((-9223372036854775808L));
      // Undeclared exception!
      try { 
        range_Builder3.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.491081266307864
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.of((-423L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3457L), (-3457L));
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder((-423L), 661L);
      range_Builder2.expandEnd(661L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder0.shift((-613L));
      Range range1 = range_Builder1.build();
      range_Builder3.expandBegin(1L);
      long long0 = range1.getEnd(range_CoordinateSystem0);
      assertTrue(range1.isEmpty());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5643234863961677
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), (-1L));
      Range range1 = Range.of((-1L));
      range1.isEmpty();
      Range range2 = Range.of((-6008L), (-2567L));
      boolean boolean0 = range2.startsBefore(range0);
      //  // Unstable assertion: assertTrue(boolean0);
      
      Range range3 = range0.intersection(range1);
      Range.Comparators.values();
      List<Range> list0 = range0.complement(range3);
      //  // Unstable assertion: assertFalse(list0.contains(range0));
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      range1.endsBefore(range0);
      Range.Comparators.values();
      long long0 = range3.getBegin(range_CoordinateSystem0);
      //  // Unstable assertion: assertSame(range3, range1);
      //  // Unstable assertion: assertEquals((-1L), long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.3039723809285833
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(1L, 263L);
      range1.getBegin();
      range0.intersection(range1);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.326351274497064
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      long long0 = new Long(3380L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range0.split(1015L);
      range_Builder0.copy();
      range_Builder1.expandEnd(3380L);
      range_Builder0.copy();
      range_Builder1.shift(1178L);
      range0.getBegin();
      Range range1 = Range.ofLength(1015L);
      range0.isSubRangeOf(range1);
      long long1 = 0L;
      // Undeclared exception!
      try { 
        Range.of(3380L, 1015L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.6282721941417253
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range range0 = Range.of((-135L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.complement(range3);
      Range range4 = Range.of((-135L));
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      range2.complementFrom(list0);
      range0.complementFrom(list0);
      Range range5 = Range.of((-1L), (-1L));
      range5.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range1.complement(range4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -135 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.95303753033263
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Object object1 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, (-1L), 775L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) range_CoordinateSystem0;
      objectArray0[1] = object1;
      objectArray0[2] = (Object) range0;
      objectArray0[3] = (Object) linkedList0;
      objectArray0[4] = (Object) range_CoordinateSystem0;
      objectArray0[5] = object0;
      objectArray0[6] = (Object) range_CoordinateSystem0;
      linkedList0.toArray(objectArray0);
      range0.complementFrom(linkedList0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.core.Range$Comparators");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.core.Range$Comparators
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.7092803057585937
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-44L), (-44L));
      Range range1 = Range.of(range_CoordinateSystem0, (-44L), 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range3 = Range.ofLength(846L);
      range2.complement(range1);
      Range.of(range_CoordinateSystem0, (-44L), 255L);
      range1.intersection(range2);
      Range range4 = Range.of(range_CoordinateSystem1, (-2411L), 2147483647L);
      range4.isSubRangeOf(range0);
      Range.of(2147483647L);
      range3.intersection(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3379L, (-1377L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.9481019188839808
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1375L, 1375L);
      range0.intersects(range0);
      // Undeclared exception!
      try { 
        Range.of(1375L, (-2721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.343510261338235
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(228L, 228L);
      Range range1 = Range.ofLength(1375L);
      Range range2 = range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range2.complement(range0);
      long long0 = 255L;
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.6205150805950788
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(65535L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift(65535L);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range range2 = Range.of((-1L), 65535L);
      Range range3 = range1.intersection(range2);
      Range.Comparators.values();
      range2.complement(range3);
      Range.Comparators.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("`e&G1uKbS=zk#)tg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.`e&G1uKbS=zk#)tg
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.4210992298230964
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 254L, 96711L);
      range0.intersects(range0);
      Range range1 = Range.of((-6008L), (-6008L));
      Range range2 = range0.intersection(range1);
      Range.Comparators.values();
      range0.complement(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      assertEquals("0B", range_CoordinateSystem1.getAbbreviatedName());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.9768269466692363
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-6009L), 254L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem1, (-10L), 1007L);
      range0.isSubRangeOf(range0);
      // Undeclared exception!
      try { 
        Range.of(1007L, 592L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.114963717591474
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Object object0 = new Object();
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-128L), 1099L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 775L, (-529L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.4264851779347167
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 254L, 96711L);
      range0.equals(range_CoordinateSystem0);
      Range range1 = Range.of((-6008L), (-6008L));
      Range range2 = range0.intersection(range1);
      Range.Comparators.values();
      List<Range> list0 = range0.complement(range2);
      assertTrue(list0.contains(range0));
      
      range2.intersection(range0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.393613251354295
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range1.toString();
      Range range2 = Range.of(0L, 0L);
      Range.ofLength(0L);
      range2.startsBefore(range0);
      Range range3 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range2.toString(range_CoordinateSystem0);
      range0.endsBefore(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range3.getEnd(range_CoordinateSystem1);
      range2.startsBefore(range1);
      range0.isEmpty();
      Range.of(0L);
      range2.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem2, 845L, (-1078L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=3.5561890388124433
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = 9223372036854775807L;
      Range range1 = Range.ofLength(9223372036854775807L);
      range1.complement(range0);
      Range range2 = range1.intersection(range0);
      range1.isSubRangeOf(range2);
      long long1 = 255L;
      range2.toString();
      Range.ofLength(255L);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.shift(2028L);
      long long2 = (-3622L);
      Range range3 = Range.of((-3622L));
      Range range4 = Range.ofLength(823L);
      List<Range> list0 = range4.complement(range0);
      range3.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.3722696518809903
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-786L), 775L);
      Range range1 = Range.of((-128L));
      range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.toString(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.1400868309623355
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1364L, 96711L);
      range0.equals(range_CoordinateSystem0);
      Range.of(range_CoordinateSystem0, (-2721L), 96711L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.JillionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.JillionUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.6794893024964055
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of((-135L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      List<Range> list0 = range2.complement(range3);
      assertTrue(range3.isEmpty());
      assertFalse(list0.contains(range3));
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, (-127L), (-127L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range4.getEnd(range_CoordinateSystem1);
      assertEquals((-127L), long0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 3380L, 3380L);
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals(3380L, long0);
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1375L, 1375L);
      range0.startsBefore(range0);
      // Undeclared exception!
      try { 
        Range.of(1375L, (-2721L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.135762112506553
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem1, 16L, 16L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      long long0 = 96711L;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, (-128L), (-1207L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.258157558756781
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of((-128L));
      long long0 = 9223372036854775807L;
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      range0.startsBefore(range1);
      // Undeclared exception!
      try { 
        Range.ofLength((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.669192673052926
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range range0 = Range.of((-135L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.complement(range3);
      Range range4 = Range.of(509L, 2147483647L);
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      range2.complementFrom(list0);
      range0.complementFrom(list0);
      Range range5 = Range.of((-1L), (-1L));
      range5.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complement(range4);
      Range.Comparators.values();
      range3.complement(range2);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.53896773637273
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(65535L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift((-4107L));
      Range.Builder range_Builder3 = new Range.Builder();
      Range range1 = range_Builder2.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(65535L, 65535L);
      range_Builder5.shift(65535L);
      Range.Builder range_Builder6 = new Range.Builder();
      range0.intersection(range1);
      Range.Comparators.values();
      Range range2 = Range.of(127L, 127L);
      range2.complement(range0);
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.4919554108197377
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.of((-423L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-3457L), (-3457L));
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder((-423L), 661L);
      range_Builder2.expandEnd(661L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder0.shift((-613L));
      range_Builder1.build();
      range_Builder3.expandBegin(1L);
      long long0 = 2055L;
      // Undeclared exception!
      try { 
        Range.of(4294967295L, 0L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.9977665653806165
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = 0L;
      Range.Builder range_Builder0 = new Range.Builder(0L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Sp&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Sp&
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.205953188271386
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(34L);
      range0.getBegin(range_CoordinateSystem0);
      long long0 = 263L;
      // Undeclared exception!
      try { 
        Range.of(1354L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.55385228192121
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = (-135L);
      Range range0 = Range.of((-135L));
      Range.of(9223372036854775807L, 9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = range1.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.copy();
      // Undeclared exception!
      try { 
        range2.split((-135L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.3684511884225317
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.getLength();
      Range range1 = Range.ofLength(34L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(1354L, 34L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.967867468534036
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.of((-6009L));
      Range.Builder range_Builder0 = new Range.Builder();
      Object object0 = new Object();
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-6009L));
      assertSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.087603047312437
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1375L, 96711L);
      assertFalse(range0.isEmpty());
      
      Range range1 = Range.of(96711L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = range1.getEnd(range_CoordinateSystem1);
      assertEquals(96711L, long0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.8456384931342567
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.ofLength(2147483647L);
      Object object0 = new Object();
      Range.Builder range_Builder0 = new Range.Builder(2463L);
      Range.Builder range_Builder1 = new Range.Builder(4786L);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(4786L);
      assertSame(range_Builder1, range_Builder2);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.6842894404569226
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range range0 = Range.of((-135L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.complement(range3);
      Range.Builder range_Builder0 = new Range.Builder(range1);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.expandEnd((-1L));
      range_Builder1.copy();
      Range.Builder range_Builder3 = new Range.Builder(7L, 9223372036854775807L);
      Range.Builder range_Builder4 = range_Builder3.shift(3L);
      Range.Builder range_Builder5 = new Range.Builder();
      range_Builder1.build();
      range_Builder2.shift(96710L);
      range_Builder4.expandEnd(3068L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder6 = new Range.Builder(range_CoordinateSystem0, (-135L), (-135L));
      range_Builder6.build();
      Range.Builder range_Builder7 = null;
      try {
        range_Builder7 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.990911208006388
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      long long0 = (-2721L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-2721L), 96711L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range.Builder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.490428054708021
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(3380L);
      long long0 = range0.getEnd();
      assertEquals(3379L, long0);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      List<Range> list0 = range0.split(1015L);
      assertFalse(list0.contains(range0));
      assertEquals(4, list0.size());
      
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder0.copy();
      Object object0 = new Object();
      Long long1 = new Long(1015L);
      Range.Builder range_Builder3 = range_Builder2.shift(3379L);
      Range range1 = range_Builder1.build();
      range_Builder0.expandBegin((-2808L));
      Range.of((-2808L), (-2808L));
      Range.Builder range_Builder4 = new Range.Builder(3379L);
      range_Builder2.contractEnd((-1490L));
      range_Builder3.build();
      assertSame(range0, range1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.0431376047494725
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      range0.split(2147483647L);
      Range.Builder range_Builder0 = new Range.Builder(2147483647L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("]|%YP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.]|%YP
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      long long0 = 254L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-32768L), (-32768L));
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.copy();
      range_Builder0.copy();
      range_Builder1.expandEnd((-32768L));
      // Undeclared exception!
      try { 
        range_Builder1.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.336211784675557
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      long long0 = 65535L;
      Range range0 = Range.of(65535L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.expandEnd(65535L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder1.shift((-4107L));
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder2.build();
      Range.Builder range_Builder4 = new Range.Builder();
      Range.Builder range_Builder5 = new Range.Builder(65535L, 65535L);
      range_Builder5.shift(65535L);
      Range.Builder range_Builder6 = new Range.Builder();
      range_Builder6.expandEnd((-1L));
      range_Builder1.build();
      // Undeclared exception!
      try { 
        Range.of((-4107L), (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.1639556568820564
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      long long0 = (-3068L);
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder();
      // Undeclared exception!
      try { 
        Range.of((-369L), (-3822L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.4964673217717706
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of((-423L));
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-3457L), (-3457L));
      assertTrue(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder((-423L), 661L);
      range_Builder2.expandEnd(661L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder0.shift((-613L));
      Range range2 = range_Builder1.build();
      assertTrue(range2.isEmpty());
      
      range_Builder3.expandBegin(1L);
      Range range3 = range_Builder3.build();
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=2.7519159690311215
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-128L), (-128L));
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("4Kt4>'6k53eH.#)V$", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 4Kt4>'6k53eH.#)V$ into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.9559804761473534
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1375L, 96711L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 1375L, 1375L);
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.91704765594493
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.of((-128L));
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(3377L, (-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.165672166849039
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.of(1L);
      Range.Builder range_Builder0 = new Range.Builder(3659L, 264040L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-445L));
      Range.Builder range_Builder2 = range_Builder1.copy();
      assertNotSame(range_Builder2, range_Builder1);
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3452L), (-413L));
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(2147483647L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=2.867922460395077
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-756L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.350155458312829
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of(1318L);
      Range range1 = Range.ofLength(7005091658399L);
      range1.startsBefore(range0);
      range1.intersection(range0);
      long long0 = 96823L;
      Range.ofLength(7005091658399L);
      Range.of(7005091658399L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 32767L, 7005091658399L);
      String string0 = null;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=2.755549790664179
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=2.9381824546861237
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.of(254L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = (-1437L);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 765L, (-1437L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.044901827613184
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.of(65535L, 65535L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 1375L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.267851696322144
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Long long0 = new Long((-128L));
      Long.getLong((String) null, (Long) null);
      Object object0 = new Object();
      Object object1 = new Object();
      Range.Builder range_Builder0 = new Range.Builder((-3810L), 1021L);
      Range range0 = Range.of((-9223372036854775808L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.7694570109221024
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range range0 = Range.of((-128L));
      Range range1 = Range.of(9223372036854775807L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.intersection(range0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.complement(range3);
      Range range4 = Range.of(509L, 2147483647L);
      List<Range> list0 = range2.complement(range3);
      range0.complementFrom(list0);
      range2.complementFrom(list0);
      range0.complementFrom(list0);
      Range range5 = Range.of((-1L), (-1L));
      range5.complement(range2);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.complement(range4);
      Range.of(776L, 9223372034707292160L);
      Range.ofLength(3240L);
      // Undeclared exception!
      try { 
        Range.parseRange("9(+lYWDzu\"7Yu@ot");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse 9(+lYWDzu\"7Yu@ot into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
