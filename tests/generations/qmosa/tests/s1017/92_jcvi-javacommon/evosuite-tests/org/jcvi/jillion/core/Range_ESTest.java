/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 15:26:40 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Spliterator;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=4.202026669911383
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), (-1380L));
      range0.split(3207L);
      range0.equals(range_Builder0);
      Range.Builder range_Builder1 = range_Builder0.contractEnd((-1380L));
      Range range1 = Range.of((-1380L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.of(0L);
      range0.complement(range1);
      range2.equals((Object) null);
      range3.equals((Object) null);
      Long long0 = new Long(380L);
      Range.ofLength(32766L);
      range2.intersection(range3);
      Range range4 = Range.of((-947L));
      Range.of((-33062L));
      range4.complement(range1);
      range_Builder0.build();
      range_Builder1.build();
      Range.Comparators[] range_ComparatorsArray0 = Range.Comparators.values();
      assertEquals(4, range_ComparatorsArray0.length);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.5080492997252835
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.equals(range_Builder0);
      long long0 = 5177583072917L;
      long long1 = 9223366876451572067L;
      Range.of(range_CoordinateSystem0, 5177583072917L, 9223366876451572067L);
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.5949143719407823
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.of(32767L, 32767L);
      Range.of(88L);
      Range range0 = Range.ofLength(88L);
      Long long0 = new Long((-1277L));
      Long long1 = new Long(9981L);
      Range.of(132L, 132L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        range0.getBegin((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2608411829266424
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 127L;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=4.049275383127881
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      long long0 = (-1380L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), (-1380L));
      range0.split(3207L);
      range0.equals(range_Builder0);
      range_Builder0.contractEnd((-1380L));
      Range range1 = Range.of((-1380L));
      range0.intersection(range1);
      long long1 = 380L;
      Range.of(0L);
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(164L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=4.091259371200129
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 4430L, 4294967295L);
      Range range1 = Range.ofLength(127L);
      range0.complement(range1);
      boolean boolean0 = range0.equals(range1);
      assertFalse(boolean0);
      
      range1.equals(range0);
      Long long0 = new Long(2147483647L);
      Range.of((-1694L));
      range1.intersection(range0);
      Range range2 = range1.intersection(range0);
      assertFalse(range0.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
      
      Range range3 = Range.of(2147483647L);
      assertFalse(range3.isEmpty());
      
      Range range4 = Range.of(331L);
      Range range5 = Range.of(2090L);
      assertNotSame(range5, range4);
      
      Range range6 = Range.of(2389L, 2147483647L);
      assertFalse(range6.equals((Object)range0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3192259012996375
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range range0 = Range.of(69L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-128L));
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.692138395144671
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of(69L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range_Builder0.copy();
      Range range2 = Range.ofLength(9223372036854775807L);
      range_Builder0.build();
      range1.equals(range2);
      Long long0 = new Long(529L);
      range0.spliterator();
      Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.of(386L, (-1133L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.9472038940170533
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808513L, 9223372032559808513L);
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      Range range1 = Range.of(9223372032559808513L, 9223372032559808513L);
      Range range2 = Range.of(265L, 265L);
      boolean boolean0 = range1.isSubRangeOf(range2);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372032559808513L);
      Range range4 = Range.of(65535L);
      Object object0 = new Object();
      range4.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      List<Range> list0 = range3.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range3));
      
      boolean boolean1 = range1.intersects(range0);
      //  // Unstable assertion: assertTrue(boolean1);
      
      range0.complement(range3);
      Range range5 = Range.of(range_CoordinateSystem1, 9223372032559808513L, 9223372032559808513L);
      Range range6 = Range.ofLength(65535L);
      range5.startsBefore(range6);
      //  // Unstable assertion: assertFalse(range6.isEmpty());
      
      List<Range> list1 = range5.complement(range0);
      //  // Unstable assertion: assertFalse(list1.contains(range3));
      //  // Unstable assertion: assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 9
  /*Coverage entropy=4.022964098955097
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808513L, 9223372032559808513L);
      Range range0 = range_Builder0.build();
      boolean boolean0 = range0.equals(range_Builder0);
      Range range1 = Range.of(9223372032559808513L, 9223372032559808513L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 2147483647L, 9223372032559808513L);
      range2.split(9223372032559808513L);
      boolean boolean1 = range1.intersects(range2);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range range3 = Range.of(265L, 265L);
      range1.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem1, 2147483647L, 9223372032559808513L);
      range4.equals(range_Builder0);
      range4.equals(range_CoordinateSystem1);
      //  // Unstable assertion: assertTrue(range4.equals((Object)range2));
      
      Long long0 = new Long(0L);
      Range range5 = Range.ofLength(1933L);
      Range range6 = range2.intersection(range5);
      Range range7 = Range.of(0L);
      //  // Unstable assertion: assertFalse(range7.isEmpty());
      
      Range.of(1933L);
      range6.complement(range1);
      Range range8 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range8.equals((Object)range2));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.66527989457915
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(69L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range range1 = range_Builder0.build();
      Object object0 = new Object();
      range1.equals(object0);
      Long long0 = new Long(69L);
      range1.spliterator();
      Range.of(529L);
      // Undeclared exception!
      try { 
        Range.of(529L, 55L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.8714990987449855
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32782L, 32782L);
      range0.split(32782L);
      range0.equals(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(32782L);
      Range range2 = range0.intersection(range1);
      long long0 = 380L;
      Range.of(380L);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(32782L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.798207292295842
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808513L, 9223372032559808513L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range range1 = Range.ofLength(9223372032559808513L);
      Range range2 = range_Builder0.build();
      Range range3 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1791L, 1791L);
      List<Range> list0 = range3.complement(range2);
      range_Builder0.contractEnd((-85L));
      range1.complementFrom(list0);
      long long0 = (-2507L);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2507L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.3404630968646387
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range range0 = Range.of((-68L), 127L);
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      String string0 = range0.toString(range_CoordinateSystem0);
      assertEquals("[ -68 .. 128 ]/SB", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3869076156406215
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 255L);
      Range.ofLength(255L);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775807L, (-1326L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1326 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=4.02136678092637
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = Range.ofLength(9223372036854775806L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 9223372036854775806L, 9223372036854775806L);
      range0.complement(range1);
      Range range2 = Range.of(9223372036854775806L);
      Range range3 = Range.of(1L);
      long long0 = (-5372L);
      range3.intersection(range1);
      Range.of((-5372L), 1323L);
      range2.intersects(range3);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals((Object) null);
      range0.complement(range1);
      Range.ofLength(9223372036854775806L);
      // Undeclared exception!
      try { 
        range1.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=4.259097123056967
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Object object0 = new Object();
      Range range0 = Range.of(454L, 4294967298L);
      Range range1 = Range.ofLength(454L);
      range0.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Long long0 = new Long(4294968706L);
      Range range2 = Range.of(1791L);
      Range range3 = Range.of(range_CoordinateSystem0, 454L, 454L);
      range3.endsBefore(range1);
      Range range4 = Range.of((-904L));
      range4.complement(range1);
      range2.intersection(range4);
      Range.ofLength(9223372036854743042L);
      Range range5 = Range.of(1642L);
      range5.getBegin();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range.of(1791L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, 1642L, 4294967306L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range4.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        range6.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.8781618060702954
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      long long0 = 1263L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1263L, 1263L);
      range0.split(1263L);
      range0.equals(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(1263L);
      Range range2 = range0.intersection(range1);
      long long1 = 368L;
      Range.of(368L);
      range0.complement(range2);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(1263L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.512043819446688
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Range.Builder range_Builder2 = null;
      try {
        range_Builder2 = new Range.Builder((Range.CoordinateSystem) null, 32767L, 32767L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.767055738671038
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range range0 = Range.of(1033L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      range0.equals(object1);
      Long long0 = new Long((-11L));
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Long long1 = new Long(1033L);
      Range range1 = Range.of(362L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, (-11L), 32767L);
      Range.of((-11L));
      Range range2 = Range.of(4294967294L);
      assertFalse(range2.isEmpty());
      
      Range.of(30935L);
      Range range3 = Range.of(32767L, 32767L);
      assertFalse(range3.isEmpty());
      assertNotSame(range3, range1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.8876969422490704
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32782L, 32782L);
      range0.split(32782L);
      range0.equals(range_Builder0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = Range.of(32782L);
      Range range2 = range0.intersection(range1);
      Long long0 = new Long((-698L));
      Range range3 = Range.of(380L);
      range3.intersects(range0);
      range2.intersection(range1);
      range0.intersection(range1);
      Range.of(380L);
      Range.of(1727L);
      range0.intersection(range2);
      // Undeclared exception!
      try { 
        Range.of(2389L, 127L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=4.021728869458761
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(32767L, 32767L);
      Range range0 = Range.of(32767L, 32767L);
      Long long0 = new Long((-1346L));
      Range range1 = Range.of((-2147483648L), (-2119L));
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-366L), 861L);
      range1.equals((Object) null);
      boolean boolean0 = range2.intersects(range0);
      assertFalse(boolean0);
      
      List<Range> list0 = range2.complement(range1);
      range1.startsBefore(range0);
      List<Range> list1 = range1.complement(range0);
      assertFalse(range0.isEmpty());
      assertFalse(list1.equals((Object)list0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=4.220701524411784
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range0);
      Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of((-128L), 2147483647L);
      boolean boolean0 = range1.equals(list0);
      long long0 = range0.getEnd();
      assertEquals(2147483646L, long0);
      
      Range range3 = Range.ofLength(2147483646L);
      Range range4 = range2.intersection(range1);
      List<Range> list1 = range4.split(1L);
      range3.complementFrom(list1);
      range1.complementFrom(list0);
      boolean boolean1 = range3.equals(range4);
      assertTrue(boolean1 == boolean0);
      
      range4.intersects(range2);
      List<Range> list2 = range1.complement(range3);
      assertTrue(list2.equals((Object)list1));
      
      range4.startsBefore(range2);
      List<Range> list3 = range1.complement(range2);
      assertTrue(list3.isEmpty());
      assertFalse(list3.equals((Object)list2));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.581466226839767
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range range0 = Range.ofLength(69L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = Range.ofLength(9223372036854775807L);
      Long long0 = new Long(9981L);
      Range range2 = Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = range1.intersection(range0);
      assertFalse(range3.isEmpty());
      
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      assertSame(range0, range3);
      
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer2);
      Range range4 = Range.ofLength(9223372036854775807L);
      assertFalse(range4.equals((Object)range2));
  }

  /**
  //Test case number: 24
  /*Coverage entropy=4.107505765470742
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.of((-128L), 2147483647L);
      range1.equals(list0);
      range0.equals(list0);
      Long long0 = new Long(2147483647L);
      Range range2 = Range.of(362L);
      Range range3 = range0.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range4 = Range.of(2147483647L);
      range0.intersects(range4);
      range2.intersection(range2);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.intersection(range4);
      Range range5 = Range.of(2147483647L);
      assertFalse(range5.equals((Object)range3));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.964874034795176
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of(69L, 32767L);
      long long0 = 9223372036854775807L;
      long long1 = (-2442L);
      range0.spliterator();
      Range range1 = Range.of((-2442L));
      Spliterator<Long> spliterator0 = range1.spliterator();
      long long2 = (-1874L);
      Range.of((-1874L), (-1874L));
      range1.complement(range0);
      range1.equals(spliterator0);
      Long long3 = new Long(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L);
      range1.intersection(range0);
      // Undeclared exception!
      try { 
        range2.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2442 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6072418906654
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      range_Builder0.copy();
      Range range0 = Range.of(32767L, 9223372036854775063L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.build();
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(32767L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.6938580031862647
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range range0 = Range.of(69L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      Range range2 = Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range3 = range1.intersection(range2);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      List<Range> list0 = range1.complement(range2);
      assertNotSame(range2, range3);
      assertEquals(1, list0.size());
      assertFalse(list0.contains(range0));
      
      range_Builder0.build();
      Range range4 = range_Builder0.build();
      assertNotSame(range4, range3);
      assertSame(range4, range0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=4.045403522413504
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range range0 = Range.of(69L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range1 = Range.ofLength(9223372036854775807L);
      Range range2 = Range.of(9223372036854775807L);
      Range range3 = range1.intersection(range2);
      Range range4 = Range.of(380L);
      List<Range> list0 = range0.complement(range4);
      Range.Builder range_Builder2 = range_Builder1.contractEnd(380L);
      range3.complementFrom(list0);
      Range.Builder range_Builder3 = new Range.Builder(380L);
      long long0 = 3135L;
      range_Builder2.contractEnd(3135L);
      Range.Builder range_Builder4 = new Range.Builder(255L);
      Range.Builder range_Builder5 = new Range.Builder(9223372036854775807L);
      // Undeclared exception!
      try { 
        range_Builder2.contractEnd(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.880752824958469
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.ofLength(69L);
      Range range1 = Range.of(69L, 69L);
      range0.complement(range1);
      range0.equals(range1);
      long long0 = (-1797L);
      Range range2 = Range.of((-1797L));
      range1.equals(range2);
      long long1 = 822L;
      // Undeclared exception!
      try { 
        Range.of(822L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.9765169361722705
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.ofLength(88L);
      Range range1 = Range.of(88L);
      Range range2 = Range.of((-128L), (-128L));
      range1.equals(range0);
      Long long0 = new Long((-1277L));
      range1.equals(long0);
      Range range3 = range1.intersection(range0);
      range3.spliterator();
      assertTrue(range3.isEmpty());
      
      range1.complement(range2);
      Range range4 = Range.of((-1277L), (-128L));
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.638958568300582
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808513L, 9223372032559808513L);
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      Range.of(9223372032559808513L, 9223372032559808513L);
      long long0 = (-93L);
      Range range1 = Range.of((-93L));
      range0.equals(range1);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(12L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.891492529084133
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808513L);
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = Range.ofLength(9223372032559808513L);
      Range range3 = Range.of(9223372032559808513L, 9223372032559808513L);
      Range range4 = range0.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, 1791L, 1791L);
      //  // Unstable assertion: assertTrue(range5.isEmpty());
      
      List<Range> list0 = range4.complement(range3);
      //  // Unstable assertion: assertEquals(1, list0.size());
      
      Range range6 = range1.intersection(range0);
      List<Range> list1 = range1.complement(range2);
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertEquals(1, list1.size());
      //  // Unstable assertion: assertSame(range2, range6);
      
      range_Builder0.build();
      Range range7 = range_Builder0.build();
      //  // Unstable assertion: assertFalse(range7.equals((Object)range5));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range range0 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=4.053423285910435
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range0.complement(range0);
      long long1 = (-128L);
      Range range1 = Range.of((-128L));
      range1.equals(list0);
      range1.equals(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-128L), 2147483647L);
      Range range3 = Range.of((-128L));
      Object object0 = new Object();
      range3.equals(range0);
      range2.complement(range3);
      range3.intersects(range0);
      Range range4 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range4.complement(range3);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -128 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 127L;
      Long long1 = new Long((-514L));
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-514L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -515 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.462099883704253
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range.of(2147483647L);
      Range.of(295L, 4294967295L);
      Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.4604825404479804
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range range0 = Range.of((-32768L));
      range0.getLength();
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(295L, (-49L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=4.102745218544785
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of(69L, 32767L);
      Range range1 = Range.of(69L, 9223372036854775807L);
      Range range2 = Range.ofLength(9223372036854775807L);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      
      Range.of(4294967294L);
      List<Range> list0 = range1.complement(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 32767L, 4294967294L);
      List<Range> list1 = range3.complementFrom(list0);
      //  // Unstable assertion: assertFalse(list1.equals((Object)list0));
      //  // Unstable assertion: assertEquals(2, list1.size());
      //  // Unstable assertion: assertEquals(2, list0.size());
      
      Range.Builder range_Builder0 = new Range.Builder(32767L);
      Range.Builder range_Builder1 = new Range.Builder(0L);
      Range.Builder range_Builder2 = new Range.Builder(2147483647L);
      Range range4 = Range.ofLength(2147483647L);
      //  // Unstable assertion: assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.4254821091257512
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 1765L;
      range0.complement(range0);
      range0.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.of(1765L, (-1084L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.77132259589427
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = 4294967295L;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), 4294967295L);
      Range range1 = Range.of((-128L));
      Long long1 = new Long(9984L);
      Range range2 = Range.of(4294967295L);
      range2.getBegin();
      range1.intersection(range0);
      Range.of(4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        range2.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1794904813212725
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.110114794994357
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range range0 = Range.of((-1896L));
      Range range1 = Range.of((-1896L), (-1896L));
      range1.equals(range0);
      Long long0 = new Long((-1896L));
      Range range2 = Range.of(4294967295L);
      range2.intersection(range0);
      range1.split(125L);
      Range.ofLength(125L);
      Range range3 = Range.of(125L);
      Range.of(1267L);
      Range range4 = Range.of(1267L);
      range4.complement(range3);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-3888L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.941026803749954
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      long long0 = (-9223372036854775776L);
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      range0.isSubRangeOf(range0);
      range1.toString();
      range1.startsBefore(range0);
      range0.endsBefore(range0);
      range0.toString(range_CoordinateSystem0);
      range_CoordinateSystem0.toString();
      range0.toString();
      List<Range> list0 = range1.complement(range0);
      List<Range> list1 = range1.complementFrom(list0);
      Range range2 = Range.of(2139L, 2139L);
      // Undeclared exception!
      try { 
        range2.complementFrom(list1);
       //  fail("Expecting exception: IllegalArgumentException");
       // Unstable assertion
      } catch(IllegalArgumentException e) {
         //
         // Range coordinates 2139, -9223372036854775776 are not valid Zero Based coordinates
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=4.007288193497335
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(1033L);
      Object object0 = new Object();
      Range range1 = Range.of(1033L, 1033L);
      range0.equals(range1);
      Object object1 = new Object();
      range0.equals(range1);
      Long long0 = new Long(367L);
      Long long1 = new Long(1033L);
      Range range2 = Range.of(0L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Range range3 = Range.of((-1081L), 0L);
      Range range4 = range0.intersection(range3);
      // Undeclared exception!
      try { 
        range4.forEach((Consumer<? super Long>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.7712762776042252
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Range range0 = Range.of(1033L);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      Range range1 = Range.of(1033L);
      Range range2 = Range.of(1033L, 1033L);
      range1.equals(object0);
      Long long0 = new Long(1033L);
      Long long1 = new Long(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      range2.intersection(range0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Range.of(255L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=4.168668791306438
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), 4294967295L);
      range0.spliterator();
      Range range1 = Range.of(255L);
      Range range2 = Range.of(range_CoordinateSystem0, (-1380L), 65535L);
      range2.spliterator();
      Range range3 = Range.of(65535L, 65535L);
      range0.complement(range2);
      range0.equals(range1);
      Long long0 = new Long((-634L));
      Range range4 = Range.of(65535L);
      range2.intersection(range3);
      range4.intersection(range0);
      Range.of(4294967295L);
      Range.of(4294967295L);
      Range.of(0L);
      // Undeclared exception!
      try { 
        Range.of(1L, (-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8143838474063587
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.copy();
      range_Builder1.build();
      Range.of(32767L);
      Range.of((-4074L), 32767L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.6872027702667265
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      long long0 = 1033L;
      Range range0 = Range.of((-1887L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      range0.equals(object1);
      Long long1 = new Long(9223372034707292161L);
      Long long2 = new Long((-1L));
      Range range1 = Range.of(2187L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(1033L, (-11L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.7400400724140157
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range.of((-1896L));
      Range range0 = Range.of((-1896L), (-1896L));
      Long long0 = new Long((-1L));
      Range range1 = Range.of((-4130L), (-1896L));
      range1.getBegin();
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 811L, 1221L);
      Range range3 = null;
      // Undeclared exception!
      try { 
        range2.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.9146490662944786
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range0.split(2147483647L);
      assertTrue(list0.contains(range0));
      
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
      
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range3 = range2.intersection(range1);
      assertTrue(range3.isEmpty());
      
      range0.forEach(consumer0);
      Range.of(2147483647L);
      List<Range> list1 = range2.complement(range0);
      assertFalse(list1.contains(range3));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.056270464245155
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of((-128L), 2147483647L);
      Range range3 = Range.of((-128L), 2147483647L);
      range2.equals(list0);
      Long long0 = new Long((-128L));
      Range range4 = Range.of((-128L), 2147483647L);
      range2.intersection(range0);
      range4.intersection(range3);
      Range.of(2459L);
      Range.of(2L);
      Range.of(2L);
      Range range5 = Range.of(49L, 51L);
      assertFalse(range5.equals((Object)range1));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.9639473508339207
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775776L), (-9223372036854775776L));
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Range range3 = Range.ofLength(1066L);
      range1.isSubRangeOf(range3);
      List<Range> list0 = new LinkedList<Range>();
      range2.complementFrom(list0);
      range2.intersection(range0);
      range0.complement(range2);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1567L), (-5253L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=4.074241855053739
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      long long0 = (-9223372036854775776L);
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775776L), (-9223372036854775776L));
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Range range3 = Range.ofLength(1066L);
      range1.isSubRangeOf(range3);
      List<Range> list0 = range0.complement(range3);
      List<Range> list1 = range2.complementFrom(list0);
      range1.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(1662L, (-364L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.9832437284447044
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      range0.isSubRangeOf(range0);
      range1.toString(range_CoordinateSystem0);
      range1.startsBefore(range0);
      range0.endsBefore(range0);
      range0.toString(range_CoordinateSystem0);
      range_CoordinateSystem0.toString();
      range0.toString();
      List<Range> list0 = range1.complement(range0);
      range1.complementFrom(list0);
      long long0 = 2139L;
      Range range2 = Range.of(2139L, 2139L);
      range2.startsBefore(range0);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-9223372036854775776L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=4.02909416342456
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.of((-128L));
      range1.equals(list0);
      range1.equals(list0);
      Long long0 = new Long(2147483647L);
      Range range2 = Range.ofLength(2147483647L);
      range2.intersection(range0);
      Range.of(4294967295L);
      Range.CoordinateSystem.values();
      Range.Comparators.values();
      Range range3 = Range.of((-1748L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.8534395390823533
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 32767L;
      Range range1 = Range.of(32767L, 32767L);
      Range range2 = range0.intersection(range1);
      List<Range> list0 = range2.split(1L);
      Range.ofLength(1L);
      range1.complement(range2);
      range0.complementFrom(list0);
      range1.complementFrom(list0);
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-700L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.30152092893078
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range.of((-128L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of((-9223372036854775808L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.5645309129343503
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-2781L), 2147483647L);
      Range range0 = range_Builder0.build();
      Range.ofLength(9223372036854775807L);
      Range range1 = range_Builder0.build();
      assertSame(range1, range0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.6174340135263057
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      range0.equals(range0);
      Range.of(2147483647L, 2147483647L);
      Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.6973582553795774
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.intersects(range0);
      Long long0 = new Long((-514L));
      Range range1 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      range1.getEnd(range_CoordinateSystem2);
      Range.of(9223372036854775807L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.323100447758692
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range range0 = Range.of(454L, 4294967298L);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.5726621669271768
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      long long0 = (-1380L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), (-1380L));
      range0.equals(range_CoordinateSystem0);
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1380L), (-1380L));
      long long1 = (-2160L);
      range_Builder0.contractEnd((-2160L));
      Range.of((-2160L));
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.901939045628905
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      range0.equals(range_Builder0);
      Range range1 = Range.of(2147483647L, 2147483647L);
      range_Builder0.build();
      Range range2 = Range.ofLength(2147483647L);
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.intersects(range2);
      long long0 = 254L;
      range3.getLength();
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 2147483647L, 254L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.823367052495103
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      long long0 = 2147483647L;
      Range range0 = Range.ofLength(2147483647L);
      range0.split(2147483647L);
      range0.equals((Object) null);
      Range range1 = Range.of(2147483647L, 2147483647L);
      Range range2 = Range.ofLength(2147483647L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.intersection(range1);
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.075995404450349
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range0);
      range0.equals(list0);
      Long long0 = new Long(2147483647L);
      Range.of((-128L));
      Range range1 = Range.of((-128L));
      Range range2 = range1.intersection(range0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(2147483647L);
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer2);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.4334205499242185
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range range0 = range_Builder1.build();
      range_Builder1.copy();
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertTrue(range0.isEmpty());
      assertSame(range0, range1);
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.8854507278424717
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775776L), (-9223372036854775776L));
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Range range3 = Range.ofLength(1066L);
      range3.isSubRangeOf(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("org.jcvi.jillion.core.Range$RangeIterator", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse org.jcvi.jillion.core.Range$RangeIterator into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.841954384001439
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      long long0 = 4294967295L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), (-1380L));
      Long long1 = new Long((-1063L));
      Range range1 = Range.of((-128L));
      Range range2 = Range.of(2147483647L);
      range1.endsBefore(range2);
      range1.intersection(range0);
      Range.of(4294967295L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-128L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=4.001127662644765
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = range0.asRange();
      Range range2 = range1.intersection(range0);
      range1.endsBefore(range0);
      range2.endsBefore(range0);
      Range range3 = Range.of(1L);
      List<Range> list0 = range1.complement(range3);
      range1.complementFrom(list0);
      Range.ofLength(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=4.120925665615731
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-9223372036854775776L), (-9223372036854775776L));
      Object object0 = new Object();
      Range range1 = Range.ofLength(1066L);
      Long long0 = new Long((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 1066L, 1143L);
      range2.spliterator();
      Range.of((-806L));
      Range.of(3L, 244L);
      Range range3 = range0.intersection(range1);
      assertTrue(range3.isEmpty());
      
      Range.of(65535L);
      range2.complement(range3);
      assertFalse(range1.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder((-1393L), 1143L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range4 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range4);
      Range range5 = range_Builder2.build();
      assertSame(range4, range5);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.134152620260597
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(4766L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.5722968652157774
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 4294967295L;
      Range.of(range_CoordinateSystem0, 4430L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem1, 4430L, 2147483647L);
      Range range0 = Range.of(4430L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem2);
      // Undeclared exception!
      try { 
        Range.of(65535L, 255L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.961179091120864
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-56L), (-56L));
      Range range1 = Range.of(range_CoordinateSystem0, (-56L), 0L);
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range range3 = Range.ofLength(846L);
      range2.complement(range1);
      range1.startsBefore(range3);
      Range range4 = range3.intersection(range2);
      Long long0 = new Long(1L);
      range4.isSubRangeOf(range1);
      range1.equals(range_CoordinateSystem1);
      range4.getEnd();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("@\u0007bmm 8)AFo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.@\u0007bmm 8)AFo
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=4.068362785695237
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range range0 = Range.of(69L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-1410L), 4294967295L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      assertTrue(boolean0);
      
      Object object0 = new Object();
      Range range2 = Range.of((-99L), 87L);
      List<Range> list0 = range2.complement(range0);
      assertFalse(list0.contains(range0));
      assertEquals(1, list0.size());
      
      Range range3 = range1.intersection(range2);
      assertSame(range3, range2);
      
      Range range4 = Range.ofLength(87L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range4.forEach(consumer0);
      Range range5 = Range.of(69L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range6 = Range.of(range_CoordinateSystem1, 87L, 87L);
      assertNotSame(range6, range5);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.3223893309770642
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 255L);
      Range range0 = Range.of(255L, 255L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=4.2039909608669825
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      List<Range> list0 = range0.complement(range0);
      Range range1 = Range.of(2147483647L);
      Range range2 = Range.of(2147483647L);
      Range range3 = Range.of((-128L), 2147483647L);
      boolean boolean0 = range2.equals(list0);
      assertFalse(boolean0);
      
      Long long0 = new Long((-128L));
      Range.of(2147483647L);
      Range range4 = range3.intersection(range2);
      range3.equals(range1);
      boolean boolean1 = range1.intersects(range0);
      Range.ofLength(2147483647L);
      List<Range> list1 = range2.complement(range4);
      assertTrue(list1.equals((Object)list0));
      
      Range range5 = Range.of((-2206L), (-128L));
      Range range6 = Range.ofLength(4294967295L);
      boolean boolean2 = range6.startsBefore(range4);
      assertFalse(boolean2 == boolean1);
      assertNotSame(range6, range0);
      
      List<Range> list2 = range5.complement(range2);
      assertTrue(list2.contains(range5));
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.8287391805387445
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.ofLength(0L);
      Range range1 = Range.of(0L, 0L);
      range1.toString();
      Range range2 = Range.of(255L, 934L);
      range0.startsBefore(range2);
      range1.intersection(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range3 = Range.parseRange("[ 0 .. 0 ]/0B", range_CoordinateSystem0);
      range3.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.toString(range_CoordinateSystem1);
      range0.isSubRangeOf(range1);
      // Undeclared exception!
      try { 
        Range.of(32767L, (-1267L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.743675859084816
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(9223372036854775806L);
      Range range0 = Range.of(9223372036854775806L);
      Range range1 = Range.of(1L);
      Range range2 = Range.of(1L, 1323L);
      Range range3 = range2.intersection(range1);
      assertFalse(range3.isEmpty());
      
      boolean boolean0 = range0.intersects(range1);
      assertFalse(boolean0);
      assertSame(range1, range3);
      assertNotSame(range1, range2);
      
      Range range4 = Range.of(1323L);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.744502284915779
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range range0 = Range.ofLength(0L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(range_CoordinateSystem0, 0L, 0L);
      range0.startsBefore(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range1.getEnd(range_CoordinateSystem1);
      range1.isEmpty();
      range_CoordinateSystem1.getAbbreviatedName();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, (-3770L), (-3793L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.1923864226209515
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.of((-32768L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-2306L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.416748105957088
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.731180234311372
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.ofLength(9223372036854775807L);
      range0.startsBefore(range1);
      Range range2 = Range.ofLength(9223372036854775807L);
      Range range3 = range2.asRange();
      range3.intersection(range1);
      Range range4 = Range.of(9223372036854775807L);
      range0.endsBefore(range2);
      range2.endsBefore(range4);
      long long0 = (-1031L);
      Range.of((-1031L));
      // Undeclared exception!
      try { 
        Range.parseRange("A!*){DJB(n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse A!*){DJB(n into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      long long0 = 9223372032559808513L;
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808513L, 9223372032559808513L);
      range_Builder0.expandEnd((-128L));
      // Undeclared exception!
      try { 
        range_Builder0.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.66028427133201
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      assertTrue(range0.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder((-896L), 255L);
      range_Builder1.contractEnd((-2147483648L));
      Range range1 = range_Builder1.build();
      long long0 = range1.getLength();
      assertEquals(2147484800L, long0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.636356964575103
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Range range0 = Range.of(9223372036854775807L);
      Range range1 = Range.of(9223372036854775807L);
      Range range2 = range0.intersection(range1);
      range0.spliterator();
      Range range3 = Range.of(127L);
      Range range4 = range1.intersection(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range2.complementFrom(linkedList0);
      Range.Builder range_Builder0 = new Range.Builder(127L);
      List<Range> list0 = range0.complement(range3);
      //  // Unstable assertion: assertTrue(range3.isEmpty());
      //  // Unstable assertion: assertSame(range3, range4);
      //  // Unstable assertion: assertTrue(list0.contains(range2));
  }

  /**
  //Test case number: 86
  /*Coverage entropy=4.033213395987593
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 255L);
      Range range0 = Range.of((-1L), (-1L));
      range0.spliterator();
      Range range1 = Range.of((-1L), (-1L));
      range1.complement(range0);
      range1.equals(range0);
      Long long0 = new Long((-100L));
      Range range2 = Range.of((-1L));
      range1.intersection(range2);
      range0.intersection(range2);
      Range.of(2L);
      Range.of((-129L));
      Range.of((-1874L));
      Range.of((-1629L), 508L);
      Range.of((-184L));
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("uy)C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.uy)C
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=4.170933908005591
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range range0 = Range.of(69L, 32767L);
      Range range1 = Range.of(32767L);
      Range range2 = Range.of((-3073L));
      Range range3 = Range.of((-32768L), 32767L);
      Long long0 = new Long(32767L);
      Range range4 = Range.of(65535L);
      Range range5 = Range.of((-2682L));
      Range range6 = range2.intersection(range4);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      range6.getEnd(range_CoordinateSystem0);
      range3.complement(range1);
      List<Range> list0 = range0.split(373L);
      Range.ofLength(32767L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range5.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.ofLength((-2473L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=4.138972703793461
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      long long0 = 69L;
      Range range0 = Range.of(69L, 32767L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      List<Range> list0 = range0.split(255L);
      Range range1 = Range.of(range_CoordinateSystem0, (-1410L), 4294967295L);
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      long long1 = 69L;
      Range range2 = Range.of((-128L), 69L);
      range2.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range2.complement(range0);
      // Undeclared exception!
      try { 
        Range.parseRange(",2", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ,2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.9748073840446567
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(69L, 32767L);
      Spliterator<Long> spliterator0 = range0.spliterator();
      range0.equals((Object) null);
      range0.equals(spliterator0);
      Long long0 = new Long(1073L);
      Range range1 = Range.of((-2442L));
      Range range2 = Range.ofLength(193L);
      Range range3 = range0.intersection(range1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range3.forEach(consumer0);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.forEach(consumer1);
      Consumer<Object> consumer2 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer2);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.7776299138280574
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372032559808513L, 9223372032559808513L);
      Range range0 = range_Builder0.build();
      range_Builder0.build();
      Range range1 = Range.ofLength(9223372032559808513L);
      Range range2 = range_Builder0.build();
      Range range3 = range0.intersection(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 1791L, 1791L);
      range3.complement(range2);
      range_Builder0.contractEnd((-85L));
      // Undeclared exception!
      try { 
        range1.split(9223372032559808513L);
       //  fail("Expecting exception: IndexOutOfBoundsException");
       // Unstable assertion
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -8589934591 would make range [9223372032559808513 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.87005700931727
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      long long0 = 32767L;
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      range_Builder0.shift(32767L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range0 = Range.of(1007L);
      range0.split(1007L);
      range_Builder0.shift(32767L);
      Range.Builder range_Builder3 = range_Builder1.expandEnd(1007L);
      range_Builder2.copy();
      range_Builder2.build();
      Range.ofLength(13L);
      range_Builder3.contractBegin((-3450L));
      range_Builder0.copy();
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder((-1199L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.5382832358174325
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      long long0 = (-1L);
      Range range0 = Range.of((-1L), (-1L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem.values();
      Range.of((-1L), (-1L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.970065969293404
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range range0 = Range.ofLength(32767L);
      Range range1 = Range.of(32767L);
      Range range2 = range1.intersection(range0);
      range1.endsBefore(range0);
      boolean boolean0 = range2.endsBefore(range0);
      Range range3 = Range.of(0L);
      range1.complement(range3);
      Range range4 = Range.of(268L, 32767L);
      Range range5 = Range.of(9223372036854775807L, 9223372036854775807L);
      range2.complement(range3);
      assertTrue(range2.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Comparators.values();
      boolean boolean1 = range5.startsBefore(range1);
      assertTrue(boolean1 == boolean0);
      
      range0.getBegin();
      boolean boolean2 = range3.endsBefore(range4);
      assertNotSame(range4, range1);
      assertFalse(range3.isEmpty());
      assertTrue(boolean2);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.361416330660486
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range.of((-1511L), (-1511L));
      // Undeclared exception!
      try { 
        Range.of(295L, (-49L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=4.033927857180787
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = range_Builder0.copy();
      Range range0 = range_Builder2.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      range_Builder2.copy();
      List<Range> list0 = range1.split(32767L);
      assertTrue(list0.contains(range1));
      
      Range range2 = Range.ofLength(1779L);
      range2.intersection(range1);
      assertTrue(range1.isEmpty());
      
      Range.of((-1091L));
      Range range3 = range_Builder1.build();
      assertSame(range3, range0);
      assertTrue(range3.isEmpty());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.9224162626706858
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), (-1380L));
      Range range1 = Range.of((-128L));
      Range range2 = Range.ofLength(4294967295L);
      Range range3 = range2.intersection(range0);
      range1.complement(range3);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1380L), (-4294968674L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.4023222273605613
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 3355L, 3355L);
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(239L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.8844606952276024
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(69L, 9223372036854775807L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range range1 = range_Builder0.build();
      range1.intersection(range0);
      long long1 = (-16L);
      Range range2 = Range.of((-16L));
      List<Range> list0 = range2.complement(range0);
      range0.complementFrom(list0);
      long long2 = 1105L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-2080L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.9746150826407365
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = 0L;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.iterator();
      range1.iterator();
      range0.isSubRangeOf(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = 0L;
      Range range2 = Range.of(range_CoordinateSystem1, 0L, 0L);
      Range.ofLength(846L);
      range2.complement(range1);
      Range.of(range_CoordinateSystem0, (-240L), 0L);
      Range.Comparators.values();
      Range.ofLength(534L);
      String string0 = "n/{i\\h09M<E";
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.7648772939008093
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 255L);
      range_Builder0.shift(255L);
      range_Builder0.expandEnd((-1L));
      Range range0 = range_Builder0.build();
      Range range1 = Range.of((-1L));
      Range range2 = range0.intersection(range1);
      assertTrue(range2.isEmpty());
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.996766366633174
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), 4294967295L);
      Range range1 = Range.of(127L, 127L);
      Long long0 = new Long(127L);
      boolean boolean0 = range1.isSubRangeOf(range0);
      Range.of(range_CoordinateSystem0, (-2151L), (-845L));
      boolean boolean1 = range1.intersects(range0);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range.ofLength(375L);
      List<Range> list0 = new LinkedList<Range>();
      Range range2 = Range.of((-2206L), (-845L));
      boolean boolean2 = range0.startsBefore(range2);
      //  // Unstable assertion: assertFalse(boolean2);
      
      List<Range> list1 = range0.complement(range1);
      //  // Unstable assertion: assertTrue(list1.contains(range0));
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.648085763908251
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 125L, 125L);
      Range.of(4294967295L, 4294967295L);
      Range.of(4680L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("/EMNM(S<u?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators./EMNM(S<u?
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.410573296570037
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L);
      boolean boolean0 = range1.intersects(range0);
      assertTrue(boolean0);
      
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(2147483647L);
      Range range2 = Range.of(2147483647L);
      assertSame(range2, range1);
      
      Consumer<Long> consumer2 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range3 = Range.of((-1691L));
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.9812840966394423
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.complement(range0);
      Range.of(2147483647L);
      Range range1 = Range.of((-128L), 2147483647L);
      Range range2 = Range.of((-128L), 2147483647L);
      Range.of(2147483647L);
      range2.intersection(range1);
      Range range3 = Range.of((-128L));
      range3.complement(range2);
      Range.Builder range_Builder0 = new Range.Builder((-809L), (-128L));
      // Undeclared exception!
      try { 
        range_Builder0.contractEnd(1264L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.7807738837102365
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Range range0 = Range.of((-727L), 2599L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.build();
      Range range1 = Range.ofLength(1L);
      Range range2 = range0.intersection(range1);
      range0.complement(range2);
      range_Builder0.build();
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder((-1748L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=4.093542489217696
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775776L), (-9223372036854775776L));
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Range range3 = Range.ofLength(1066L);
      range1.isSubRangeOf(range3);
      range0.complement(range3);
      range2.intersection(range3);
      range1.intersection(range2);
      Range.of(2L);
      Range.of(9951L);
      Range.of(9953L);
      Range range4 = Range.of((-3621L), 2038L);
      assertFalse(range4.equals((Object)range3));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.596264536469271
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1380L), 4294967295L);
      Range.of(127L, 127L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.6523351165958258
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 32767L, 32767L);
      Range range1 = Range.ofLength(32767L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      //  // Unstable assertion: assertFalse(boolean0);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean1 = range0.isEmpty();
      //  // Unstable assertion: assertFalse(boolean1);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.332090058603887
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 255L);
      range_Builder0.expandBegin(0L);
      Range range0 = range_Builder0.build();
      String string0 = range0.toString();
      assertEquals("[ -1 .. 255 ]/0B", string0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.5968310031231336
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      long long0 = (-9223372036854775776L);
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      range0.isSubRangeOf(range0);
      range1.toString(range_CoordinateSystem0);
      range1.startsBefore(range0);
      range0.endsBefore(range0);
      // Undeclared exception!
      try { 
        range1.toString((Range.CoordinateSystem) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // coordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=4.039584692182448
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range range0 = Range.of(2147483647L, 2147483647L);
      range0.complement(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Object object3 = new Object();
      range0.equals(object3);
      Long long0 = new Long((-11L));
      Long long1 = new Long(2147483647L);
      Range range1 = Range.of((-2152L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range1.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(807L, (-1187L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.267453773652146
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = 127L;
      Range range0 = Range.of(range_CoordinateSystem0, 127L, 127L);
      range0.equals(range_CoordinateSystem0);
      long long1 = (-514L);
      Long long2 = new Long((-514L));
      long long3 = 9223372036854775681L;
      // Undeclared exception!
      try { 
        Range.of((-1874L), 9223372036854775681L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.7396645193622917
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of(2147483647L, 2147483647L);
      Long long0 = new Long(2147483647L);
      Range range2 = Range.of(362L);
      Range range3 = range1.intersection(range0);
      assertFalse(range3.isEmpty());
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range2.complement(range1);
      assertSame(range1, range3);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=4.110371673508859
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      long long0 = (-9223372036854775776L);
      Range range0 = Range.of((-9223372036854775776L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = range0.intersection(range0);
      range0.spliterator();
      Range range2 = Range.of(range_CoordinateSystem0, (-9223372036854775776L), (-9223372036854775776L));
      range0.isSubRangeOf(range1);
      Object object0 = new Object();
      Range range3 = Range.ofLength(1066L);
      range0.startsBefore(range0);
      List<Range> list0 = range0.complement(range3);
      List<Range> list1 = range2.complementFrom(list0);
      range1.complementFrom(list1);
      // Undeclared exception!
      try { 
        Range.of(1662L, (-364L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.807961679581417
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range range0 = Range.ofLength(2147483647L);
      Range range1 = Range.of(2147483647L);
      Long long0 = new Long(2147483647L);
      Range range2 = range1.intersection(range0);
      range2.intersection(range1);
      Range range3 = Range.of((-391L));
      range2.intersection(range3);
      Range.of((-391L));
      Range.of(2459L);
      Range.of((-391L));
      // Undeclared exception!
      try { 
        Range.of(49L, 2L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.5694356159967167
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1380L), (-1380L));
      Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      range0.getEnd(range_CoordinateSystem1);
      // Undeclared exception!
      try { 
        Range.of(4294967295L, (-1380L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.3978727387400776
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range range0 = Range.ofLength(2075L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      boolean boolean0 = range0.isEmpty();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.543917883258559
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range range0 = Range.ofLength(32767L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.ofLength(9223372036854775807L);
      Long long1 = new Long(9981L);
      Range.of(9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      range0.forEach(consumer0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=3.770804379054189
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.of(2147483647L, 2147483647L);
      Range.of(2147483647L);
      Range range0 = Range.of(2147483647L);
      Range range1 = Range.of((-128L), 2147483647L);
      Long long0 = new Long((-128L));
      Range.of(2147483647L);
      range1.intersection(range0);
      Range.of(2147483647L);
      Range.of(2090L);
      // Undeclared exception!
      try { 
        Range.of(2090L, (-118L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1111L), 40L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(65535L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.344980491477481
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 255L);
      Range range0 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range0.getBegin(range_CoordinateSystem0);
      range0.getBegin(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem1);
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.5002767629080385
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range.of(2147483647L);
      Range.of(295L, 295L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      Range.CoordinateSystem[] range_CoordinateSystemArray1 = Range.CoordinateSystem.values();
      assertNotSame(range_CoordinateSystemArray1, range_CoordinateSystemArray0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.2622243017037382
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(172L, 1482L);
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=3.61740193013514
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.build();
      long long0 = 32767L;
      Range.of(32767L, 32767L);
      Range.Builder range_Builder1 = new Range.Builder();
      range_Builder1.expandEnd(255L);
      range_Builder1.shift(2147483647L);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(1855L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=3.5529956027486076
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = range_Builder0.copy();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range0 = Range.of((-5677L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.522781243745221
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range range0 = Range.of((-1L), 3514L);
      range0.getEnd();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.CoordinateSystem.values();
      Range.of((-1L), (-1L));
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      Range.Builder range_Builder0 = new Range.Builder(3514L);
      range_Builder0.expandBegin(3514L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(3514L);
      assertSame(range_Builder1, range_Builder0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.7508815060949923
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range range0 = Range.ofLength(3390L);
      Long long0 = new Long(3390L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      range0.split(3390L);
      Range.Builder range_Builder2 = range_Builder0.copy();
      range_Builder2.expandEnd(13L);
      Range.Builder range_Builder3 = range_Builder0.copy();
      range_Builder3.shift(1007L);
      range_Builder3.build();
      Range range1 = Range.ofLength(1007L);
      assertNotSame(range1, range0);
      
      Range.Builder range_Builder4 = range_Builder1.contractBegin(3390L);
      range_Builder4.copy();
      Range.Builder range_Builder5 = new Range.Builder(3390L);
      range_Builder3.contractEnd(3390L);
      List<Range> list0 = range0.split(3390L);
      assertTrue(list0.contains(range0));
      assertEquals(1, list0.size());
      
      long long1 = range1.getLength();
      assertEquals(1007L, long1);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.3294535237639624
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 255L);
      Range range0 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range0.split((-1L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.3294535237639624
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-1L), 255L);
      range_Builder0.expandEnd((-1L));
      Range range0 = range_Builder0.build();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.778542283870461
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of((-1511L), (-1511L));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      range_Builder1.copy();
      Long long0 = new Long(2285L);
      Range.of((-2147483648L));
      Range.of(2114L);
      Range range1 = Range.of(2285L);
      Range range2 = Range.of((-2707L), 0L);
      assertFalse(range2.equals((Object)range1));
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.6406380013176016
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3452L), (-413L));
      range_Builder0.expandBegin(127L);
      range_Builder0.contractEnd(127L);
      range_Builder0.copy();
      range_Builder0.contractEnd(73L);
      range_Builder0.contractEnd((-9223372032559812597L));
      range_Builder0.contractBegin((-3452L));
      range_Builder0.copy();
      Range range0 = Range.of(680L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.30273127777412
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-1495L), 0L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.7923134877447495
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder((-896L), (-896L));
      range_Builder1.contractEnd((-2147483648L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-896L), (-896L));
      Range range1 = Range.of((-294L));
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.3307093945877364
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Object object0 = new Object();
      Long long0 = new Long(663L);
      Range range0 = Range.of(3331L);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range range1 = Range.of(663L);
      assertNotSame(range1, range0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=2.6829388630505053
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-3452L), (-413L));
      range_Builder0.contractEnd(127L);
      range_Builder0.contractEnd(73L);
      range_Builder0.contractBegin(67L);
      Range.Builder range_Builder1 = range_Builder0.copy();
      assertNotSame(range_Builder0, range_Builder1);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.4762181642352785
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Long long0 = new Long((-3888L));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854743674L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=3.2856765921669226
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range.of(295L, 827L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(295L, 827L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.6312852725069362
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range.of(3L, 3L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-2306L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of((-2306L));
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.111534645219026
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range range0 = Range.ofLength(65535L);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.0864100560460868
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Range.ofLength(9223372036854775807L);
      // Undeclared exception!
      try { 
        Range.ofLength((-2281L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.4712577383937004
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1380L), (-128L));
      long long0 = 69L;
      Range.of((-128L), 69L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange(",2", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ,2 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
