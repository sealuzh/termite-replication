/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 13:35:51 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.sun.msv.datatype.xsd.XSDatatype;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.MalformedURLException;
import java.net.URI;
import java.net.URISyntaxException;
import java.net.URL;
import java.net.URLStreamHandler;
import java.util.Enumeration;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.ProcessingInstruction;
import org.dom4j.QName;
import org.dom4j.datatype.DatatypeAttribute;
import org.dom4j.dom.DOMDocument;
import org.dom4j.dom.DOMDocumentType;
import org.dom4j.dom.DOMElement;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.ElementModifier;
import org.dom4j.io.ElementStack;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.PruningElementStack;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXModifyElementHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.AbstractElement;
import org.dom4j.tree.DefaultElement;
import org.dom4j.tree.NamespaceStack;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.jaxen.SimpleVariableContext;
import org.jaxen.VariableContext;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.HandlerBase;
import org.xml.sax.InputSource;
import org.xml.sax.Locator;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.Attributes2Impl;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.AttributesImpl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.405338572524928
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createQName("", "?H");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      documentFactory0.createXPathFilter("B");
      Element element0 = defaultDocumentFactory0.createElement("(x M");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory7.createEntity("B", "B");
      defaultDocumentFactory7.createAttribute(element0, "org.dom4j.tree.FlyweightProcessingInstruction", "");
      File file0 = MockFile.createTempFile("=&1", "");
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("http://xml.org/sax/properties/declaration-handler");
      sAXReader0.setEncoding("=&1");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"=&1\". Nested exception: Invalid encoding name \"=&1\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.353627401079457
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "B");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl0.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl3);
      locatorImpl3.setPublicId((String) null);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl3);
      locatorImpl0.setSystemId("vcyZ!\"<ms6\"cBE");
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader sAXReader1 = new SAXReader(true);
      sAXReader1.setEntityResolver(sAXReader_SAXEntityResolver0);
      try { 
        sAXReader1.read("comment()");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/comment() (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/comment() (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 613);
      sAXReader0.setEncoding("X6~{v");
      pushbackInputStream0.mark((byte) (-88));
      byte[] byteArray0 = new byte[5];
      byteArray0[3] = (byte) (-88);
      pushbackInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      byteArrayInputStream0.skip(0L);
      byteArrayInputStream0.read(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      sequenceInputStream0.markSupported();
      sequenceInputStream0.close();
      sequenceInputStream0.read();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 5);
      try { 
        sAXReader0.read((InputStream) pushbackInputStream0, " />]");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"X6~{V\". Nested exception: Invalid encoding name \"X6~{V\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.2742746058724936
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      MockFile.createTempFile("7tVUr", "org.dom4j.io.SAXModifyException");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getPublicId();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      xMLFilterImpl0.unparsedEntityDecl("org.dom4j.io.SAXModifyException", "org.dom4j.tree.FlyweightProcessingInstruction", (String) null, (String) null);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.3808010871414376
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      MockFile.createTempFile("/tmp/wgv0.tmp", "7tVUr");
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl0.getPublicId();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl2);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      SAXParseException sAXParseException0 = new SAXParseException("ends-with", locator2Impl3);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXParseException sAXParseException1 = new SAXParseException("7tVUr", locator2Impl0, sAXParseException0);
      sAXParseException1.addSuppressed(sAXParseException0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXParseException0.getException();
      xMLFilterImpl1.startPrefixMapping((String) null, "7tVUr");
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl3 = new XMLFilterImpl(xMLFilterImpl2);
      xMLFilterImpl3.fatalError(sAXParseException0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      xMLFilterImpl1.unparsedEntityDecl(".Q4:0!aiM\"-vd,E", (String) null, "BY(?cVH#+4,", "7tVUr");
      sAXReader0.setXMLFilter(xMLFilterImpl3);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("[");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, ".Q4:0!aiM\"-vd,E");
      try { 
        sAXReader0.read("$assertionsDisabled");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/$assertionsDisabled (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/$assertionsDisabled (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.2849997434297804
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      MockException mockException0 = new MockException();
      SAXParseException sAXParseException0 = new SAXParseException("M~R,qE", "A_2TD", "", 14, 42, mockException0);
      sAXParseException0.getLocalizedMessage();
      sAXParseException0.getColumnNumber();
      SAXParseException sAXParseException1 = new SAXParseException("M~R,qE", "M~R,qE", "", (-4366), 42);
      sAXParseException0.addSuppressed(mockException0);
      sAXParseException1.initCause(sAXParseException0);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setColumnNumber(42);
      locator2Impl0.setPublicId("]PsQD");
      SAXParseException sAXParseException2 = new SAXParseException("2'y_'j`K*@!Cd.", locator2Impl0);
      sAXParseException2.toString();
      MockException mockException1 = new MockException((String) null);
      sAXParseException2.addSuppressed(mockException1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.startPrefixMapping("", "A_2TD");
      xMLFilterImpl0.fatalError(sAXParseException1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.getXMLFilter();
      // Undeclared exception!
      try { 
        sAXReader0.read("");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      MockURI.URI("org.jaxen.SimpleVariableContxT", "org.jaxen.SimpleVariableContxT", "org.jaxen.SimpleVariableContxT");
      MockFile mockFile0 = new MockFile("org.jaxen.SimpleVariableContxT");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockFile mockFile1 = new MockFile(mockFile0, "//home/ubuntu/termite/projects/62_dom4j/]Z5KF\"ST/]Z5KF\"ST/org.dom4j.DefaultDocumentFactory.singleton.strategy0]Z5KF\"ST");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jaxen.SimpleVariableContxT");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setEncoding("//tmp/kwg6v0kwg6v");
      String string0 = "http://xml.org/sax/features/namespace-prefixes";
      StringReader stringReader0 = new StringReader("http://xml.org/sax/features/namespace-prefixes");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("%,(4p_tm;c5");
      sAXReader_SAXEntityResolver0.resolveEntity(":xg.6oKH xXp;?", ":xg.6oKH xXp;?");
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl1);
      LocatorImpl locatorImpl1 = null;
      try {
        locatorImpl1 = new LocatorImpl((Locator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SAXReader sAXReader0 = new SAXReader();
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setEncoding("%,(4p_tm;c5");
      SAXParseException sAXParseException0 = new SAXParseException("%,(4p_tm;c5", locator2Impl0);
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("org.dom4j.tree.DefaultComment", locator2Impl0, sAXParseException0);
      sAXParseException1.getSuppressed();
      sAXParseException0.getColumnNumber();
      sAXParseException1.addSuppressed(sAXParseException0);
      sAXParseException0.toString();
      SAXParseException sAXParseException2 = new SAXParseException("{ybMfY8qw%", "%,(4p_tm;c5", "3", 2705, 2705, sAXParseException1);
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      ElementModifier elementModifier0 = mock(ElementModifier.class, new ViolatedAssumptionAnswer());
      SAXModifyElementHandler sAXModifyElementHandler0 = new SAXModifyElementHandler(elementModifier0);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/use-locator2", true);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // Feature 'http://xml.org/sax/features/use-locator2' is read only.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      String string0 = "//tmp/org.dom4j.tree.DefaultComment0file:";
      Namespace.get("//tmp/org.dom4j.tree.DefaultComment0file:", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("//tmp/org.dom4j.tree.DefaultComment0file:", "org.dom4j.util.UserDataElement", "C5@Spvk\"mdH3V~");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName0, xSDatatype0);
      datatypeAttribute0.getParent();
      defaultDocumentFactory3.createAttribute((Element) null, qName0, "org.dom4j.util.UserDataElement");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createXPathFilter("//tmp/org.dom4j.tree.DefaultComment0file:");
      Element element0 = defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      defaultDocumentFactory5.createNamespace("org.dom4j.util.UserDataElement", "yN\"b");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory5.createAttribute(element0, "org.dom4j.util.UserDataElement", "MI<tsy{n");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("CDATA_SECTION_NODE");
      sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      pipedInputStream0.connect(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0, 190);
      pipedInputStream0.markSupported();
      pushbackInputStream0.markSupported();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-108);
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-115);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)58;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-1), 2157);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, byteArrayInputStream0);
      sequenceInputStream0.markSupported();
      sequenceInputStream0.markSupported();
      sequenceInputStream0.close();
      sequenceInputStream0.read();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      InputSource inputSource0 = new InputSource();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.498914009883703
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      sAXReader0.setDispatchHandler((DispatchHandler) null);
      sAXReader0.isIncludeExternalDTDDeclarations();
      String string0 = "wg6v";
      File file0 = MockFile.createTempFile("wg6v", "wg6v");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = "";
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = false;
      sAXReader0.setFeature("http://xml.org/sax/features/namespace-prefixes", false);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      String string0 = "//tmp/wg6v0wg6v";
      sAXReader0.setEncoding("//tmp/wg6v0wg6v");
      sAXReader0.isValidating();
      sAXReader0.getDocumentFactory();
      sAXReader0.isIncludeExternalDTDDeclarations();
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.getDispatchHandler();
      XMLReaderAdapter xMLReaderAdapter0 = null;
      try {
        xMLReaderAdapter0 = new XMLReaderAdapter((XMLReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // XMLReader must not be null
         //
         verifyException("org.xml.sax.helpers.XMLReaderAdapter", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      Attributes2Impl attributes2Impl0 = new Attributes2Impl();
      AttributesImpl attributesImpl0 = new AttributesImpl(attributes2Impl0);
      xMLFilterImpl1.startElement("", "\" ", (String) null, attributesImpl0);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, true);
      sAXReader0.createXMLReader();
      sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      DefaultDocumentFactory.getInstance();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl2);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      MockFile.createTempFile("//tmp/ of document 0yqvH2S~", "//tmp/http:/xml.org/sax/features/namespaces0http:/xml.org/sax/features/namespaces");
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3326774197215174
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace.get("", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createProcessingInstruction((String) null, "");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      documentFactory0.createXPathFilter("B");
      defaultDocumentFactory0.createElement("(x M");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory8.createEntity("B", "MI<tsy{n");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DOMElement dOMElement0 = new DOMElement("C5@Spvk\"mdH3V~");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.getParent();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.2487663399462696
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      inputSource0.setEncoding("eW^f}@h87f{OVSuS^&");
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createProcessingInstruction((String) null, "");
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      documentFactory0.createXPathFilter("B");
      Element element0 = defaultDocumentFactory0.createElement("(x M");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory8.createEntity("B", "MI<tsy{n");
      defaultDocumentFactory8.createAttribute(element0, "org.dom4j.tree.FlyweightProcessingInstruction", "");
      namespace0.getPath(element0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader_SAXEntityResolver0.resolveEntity("LIq:ENRt0e/8", "v/bt_0?9");
      xMLFilterImpl0.getParent();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"EW^F}@H87F{OVSUS^&\". Nested exception: Invalid encoding name \"EW^F}@H87F{OVSUS^&\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)82;
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte) (-41);
      byteArray0[3] = (byte)92;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte) (-29);
      byteArray0[6] = (byte) (-31);
      byteArray0[7] = (byte)7;
      byteArray0[8] = (byte)62;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertSame(documentFactory0, defaultDocumentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2473399979120656
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setEncoding("%,(4p_tm;c5");
      SAXParseException sAXParseException0 = new SAXParseException("%,(4p_tm;c5", locator2Impl0);
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("org.dom4j.tree.DefaultComment", locator2Impl0, sAXParseException0);
      sAXParseException1.getSuppressed();
      sAXParseException0.getColumnNumber();
      String string0 = "{ybMfY\\8qw%";
      SAXParseException sAXParseException2 = new SAXParseException("{ybMfY8qw%", "%,(4p_tm;c5", "3", 2705, 2705, sAXParseException1);
      String string1 = null;
      SAXParseException sAXParseException3 = new SAXParseException("{ybMfY8qw%", "3", (String) null, 2705, 50, sAXParseException0);
      sAXParseException3.initCause(sAXParseException0);
      sAXParseException3.toString();
      sAXParseException2.addSuppressed(sAXParseException1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.fatalError(sAXParseException1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXParseException3.getCause();
      StringReader stringReader0 = new StringReader("%,(4p_tm;c5");
      // Undeclared exception!
      try { 
        sAXReader0.read((Reader) stringReader0, "8");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/org.dom4j.tree.DefaultComment0file:");
      sAXReader_SAXEntityResolver0.resolveEntity("\" because: ", "//tmp/org.dom4j.tree.DefaultComment0file:");
      DefaultDocumentFactory.getInstance();
      MockFile.createTempFile("//tmp/org.dom4j.tree.DefaultComment0file:", "\"kAF,bnP1BfB<");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl2);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      SAXReader sAXReader0 = new SAXReader((String) null);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      QName qName0 = QName.get("Yo<L", "Yo<L");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setEncoding((String) null);
      SAXParseException sAXParseException0 = new SAXParseException((String) null, locator2Impl0);
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("-", locator2Impl0, sAXParseException0);
      sAXParseException1.getSuppressed();
      sAXParseException0.getColumnNumber();
      SAXParseException sAXParseException2 = new SAXParseException("Yo<L", "org.dom4j.VisitorSupport", "Yo<L", (-790), (-790), sAXParseException1);
      sAXParseException0.toString();
      sAXParseException2.addSuppressed(sAXParseException1);
      xMLFilterImpl0.fatalError(sAXParseException2);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      StringReader stringReader0 = new StringReader("vF-");
      sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", (Object) null);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.9721987111105235
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      String string0 = "Yo<L";
      QName qName0 = QName.get("Yo<L", "Yo<L");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      sAXReader0.getEntityResolver();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getXMLReader();
      sAXReader0.isIncludeExternalDTDDeclarations();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("ka\"%M'u$|XqK>XFu");
      sAXReader_SAXEntityResolver0.resolveEntity("-", (String) null);
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      sAXReader0.setStripWhitespaceText(true);
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      sAXReader0.isIncludeInternalDTDDeclarations();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      try { 
        bufferedInputStream0.reset();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Resetting to invalid mark
         //
         verifyException("java.io.BufferedInputStream", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.494963113639332
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDispatchHandler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3240);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 3240);
      byte[] byteArray0 = new byte[5];
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-30);
      sAXReader0.removeHandler("]]>");
      InputSource inputSource0 = new InputSource();
      inputSource0.getEncoding();
      inputSource0.setEncoding((String) null);
      inputSource0.setPublicId("]]>");
      StringReader stringReader0 = new StringReader("on|;G[e_++c7(*_sU");
      InputSource inputSource1 = new InputSource(stringReader0);
      inputSource1.setPublicId("nEi!?F=");
      inputSource0.setPublicId("//tmp/wg6v0.tmp");
      inputSource1.getEncoding();
      sAXReader0.getDispatchHandler();
      sAXReader0.isStringInternEnabled();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.3886459900319466
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("oro.jaxen.functioE.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      Element element0 = defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      element0.elementText("O8aLl'!?u'7-");
      defaultDocumentFactory1.createXPathFilter("oro.jaxen.functioE.ext.EvaluateFunction");
      documentFactory0.createEntity("MI<tsy{n", ">.)^Z_sUv");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory8.createXPathFilter("position");
      defaultDocumentFactory8.createAttribute(element0, "//tmp/L2FZASkPe/@vi)y0-U5C=%#C|'{S_:p", "oro.jaxen.functioE.ext.EvaluateFunction");
      defaultDocumentFactory3.createEntity("MI<tsy{n", "STGh.EA9");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createAttribute(element0, "O8aLl'!?u'7-", "MI<tsy{n");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("DUYD#HZ'Yt2l");
      sAXReader_SAXEntityResolver0.resolveEntity("P6N9rs$tsQx", (String) null);
      try { 
        sAXReader0.read("STGh.EA9");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/STGh.EA9 (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/STGh.EA9 (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2801532702240896
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("@=,`8WUbu6~c~{", "@=,`8WUbu6~c~{");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/=&10>^]w'+1", "zABw!@Mt(vr:");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(parserAdapter0);
      try { 
        sAXReader0.configureReader(parserAdapter0, sAXContentHandler0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.ParserAdapter@3a283c2d Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.239095456210609
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("oro.jaxen.functioE.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      defaultDocumentFactory3.createXPathFilter("//tmp/org.dom4j.tree.DefaultComment0file:");
      DefaultElement defaultElement0 = new DefaultElement("//tmp/org.dom4j.tree.DefaultComment0file:");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory9.createEntity("Vzv~Sn/bF>", "!'");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext1 = new SimpleVariableContext();
      defaultDocumentFactory8.createXPath("//tmp/org.dom4j.tree.DefaultComment0file:", (VariableContext) simpleVariableContext1);
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createAttribute((Element) defaultElement0, "l", "MI<tsy{n");
      DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory13 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader0.read(",WL\"UQ");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@4cbbd218 Nested exception: Feature: http://xml.org/sax/features/validation Nested exception: Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@4cbbd218 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.367650236312253
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/Failed to parse document for URI: 0Failed to parse document for URI: ", "//tmp/Failed to parse document for URI: 0Failed to parse document for URI: ");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getPublicId();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl2.getPublicId();
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      locatorImpl3.setPublicId("//tmp/Failed to parse document for URI: 0Failed to parse document for URI: ");
      locator2Impl4.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl5);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl7);
      LocatorImpl locatorImpl7 = new LocatorImpl(locatorImpl5);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader sAXReader1 = new SAXReader(true);
      try { 
        sAXReader1.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4875624837479635
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setErrorHandler(defaultHandler0);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      sAXReader0.getDocumentFactory();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream((InputStream) null);
      bufferedInputStream0.mark(92);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "3&o<Xs@jd,|_|Qn");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Stream closed Nested exception: Stream closed
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.577943342623491
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("org.dom4j.NodeType");
      sAXReader0.addHandler("vMB,gJZvM;^}t_zVKgI", (ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.jaxen.UnsupportedAxisException";
      sAXReader0.getDispatchHandler();
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.DefaultCDATA", "BVA+NmKn>Ai{i6");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      sAXReader0.setEncoding("");
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Invalid encoding name \"\". Nested exception: Invalid encoding name \"\".
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      ElementStack elementStack0 = new ElementStack(47);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      DispatchHandler dispatchHandler1 = new DispatchHandler();
      DispatchHandler dispatchHandler2 = new DispatchHandler();
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler1);
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader();
          HandlerBase handlerBase0 = new HandlerBase();
          sAXReader0.setEncoding("PROCESSING_INSTRUCTION_NODE");
          handlerBase0.processingInstruction("//tmp/org.dom4j.util.UserDataElement0/tmp/T[<0#rv$7m2Cs39F%", "//tmp/org.dom4j.util.UserDataElement0/tmp/T[<0#rv$7m2Cs39F%");
          handlerBase0.resolveEntity("//home/ubunt/temite/rojecs/62_dom4j/http:/xml.org/sax/features/amespaces/%Ir:Wp0org.jaxen.saxpth.base.TokenTypes", "//home/ubunt/temite/rojecs/62_dom4j/http:/xml.org/sax/features/amespaces/%Ir:Wp0org.jaxen.saxpth.base.TokenTypes");
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.507949694759748
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setErrorHandler(xMLFilterImpl0);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      pruningDispatchHandler0.removeHandler("org.dom4j.NodeType");
      sAXReader0.addHandler("vMB,gJZvM;^}t_zVKgI", (ElementHandler) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "org.jaxen.UnsupportedAxisException";
      sAXReader0.getDispatchHandler();
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.tree.DefaultCDATA", "BVA+NmKn>Ai{i6");
      sAXReader0.setEncoding("");
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-3);
      byteArray0[3] = (byte)11;
      byteArray0[4] = (byte)11;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      sAXReader0.getErrorHandler();
      assertTrue(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("//tmp/org.dom4j.tree.DefaultComment0file:", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("org.jaxen.function.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      defaultDocumentFactory3.createXPathFilter("//tmp/org.dom4j.tree.DefaultComment0file:");
      defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      documentFactory0.createEntity("MI<tsy{n", ">.)^Z_sUv");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory9.createXPath("org.jaxen.function.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      QName.get("yqvH2S~", namespace0, "//tmp/L2FZASkPe/@vi)y0-U5C=%#C|'{S_:p");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory11, false);
      StringReader stringReader0 = new StringReader("//tmp/org.dom4j.tree.DefaultComment0file:");
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.5981863871455344
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory1.createQName("h", "C5@Spvk\"mdH3V~");
      defaultDocumentFactory1.createXPath("and", (VariableContext) simpleVariableContext0);
      defaultDocumentFactory1.createElement("and");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createQName("DwT$wY{injzf`", "", "Oa6ZurUZ.[fI");
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory4.getQNames();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      documentFactory0.createXPathFilter("and");
      defaultDocumentFactory2.createEntity("Invalid path of length: ", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      QName.get("{PS'?5Ma+,+06>", (Namespace) null, " with: ");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(false);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("')P");
      sAXReader_SAXEntityResolver0.resolveEntity("YS/_Ja=^Q)<&*Up30", "Invalid path of length: ");
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertTrue(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLReader(xMLFilterImpl0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("//tmp/>tq,xKn8,sh=:Cr`0", "");
      DefaultDocumentFactory.getInstance();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl2);
      locator2Impl3.getPublicId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl1);
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("CDATA_SECTION_NODE");
      sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.processingInstruction("6", "lX;VG ,wb_b");
      handlerBase0.resolveEntity("ancestor", ")Te#kNs(+^I");
      MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.setDocumentFactory(documentFactory0);
      try { 
        MockURI.URI(";RxW)NtR/|mp>", ")Te#kNs(+^I", (String) null, ")Te#kNs(+^I");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in path at index 9: ;RxW)NtR/|mp>://)Te#kNs(+^I#)Te%23kNs(+%5EI
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      try { 
        sAXReader0.read((InputStream) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      String string0 = null;
      SAXReader sAXReader0 = new SAXReader((String) null, true);
      sAXReader0.isValidating();
      sAXReader0.isValidating();
      sAXReader0.getDispatchHandler();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      sAXReader0.getDocumentFactory();
      try { 
        MockURL.URL((String) null);
        fail("Expecting exception: MalformedURLException");
      
      } catch(MalformedURLException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.net.URL", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 613);
      pushbackInputStream0.mark((byte) (-88));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 613);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.mark((-1013));
      byteArrayInputStream0.skip((byte) (-88));
      sequenceInputStream0.mark((byte) (-88));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(enumeration1);
      sequenceInputStream2.markSupported();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      MockURL.URL("ENTITY_REFERENCE_NODE", "UNKNOWN_NODE", 613, "UNKNOWN_NODE", uRLStreamHandler0);
      SAXReader sAXReader0 = new SAXReader(true);
      MockFile mockFile0 = new MockFile("ENTITY_REFERENCE_NODE");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("oro.jaxen.functioE.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      Element element0 = defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      defaultDocumentFactory1.getQNames();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      element0.elementText("O8aLl'!?u'7-");
      defaultDocumentFactory1.createXPathFilter("oro.jaxen.functioE.ext.EvaluateFunction");
      documentFactory0.createEntity("MI<tsy{n", ">.)^Z_sUv");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory8.createAttribute(element0, "//tmp/L2FZASkPe/@vi)y0-U5C=%#C|'{S_:p", "oro.jaxen.functioE.ext.EvaluateFunction");
      defaultDocumentFactory3.createEntity("MI<tsy{n", "STGh.EA9");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createAttribute(element0, "O8aLl'!?u'7-", "MI<tsy{n");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
      MockFile mockFile0 = new MockFile("O8aLl'!?u'7-", ">.)^Z_sUv");
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.addHandler("//tmp/wg6v0wg6v", dispatchHandler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockFile mockFile0 = new MockFile("SS6t");
      MockFile mockFile1 = new MockFile("Cannot convert: ", "org.jaxen.function.PositionFunction");
      try { 
        MockFile.createTempFile("[(DefaultNameStep): ", "//tmp/ SYSTEM0.tmp", (File) mockFile0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.4440977644767417
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl0.getPublicId();
      locator2Impl2.getSystemId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl4);
      locator2Impl3.getColumnNumber();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl4);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl1);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      dispatchHandler0.removeHandler((String) null);
      sAXReader0.setDefaultHandler((ElementHandler) null);
      StringReader stringReader0 = new StringReader("Error on line ");
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("http://xml.org/sax/features/namespaces");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      sAXReader0.getErrorHandler();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      assertFalse(defaultDocumentFactory1.equals((Object)documentFactory0));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setValidation(false);
      ParserAdapter parserAdapter0 = null;
      try {
        parserAdapter0 = new ParserAdapter();
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // System property org.xml.sax.parser not specified
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      sAXReader0.setStringInternEnabled(false);
      sAXReader0.createXMLReader();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Sn$[A");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = null;
      String string1 = "org.jaxenSimpleVariableContx";
      try { 
        sAXReader0.setXMLReaderClassName("org.jaxenSimpleVariableContx");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class org.jaxenSimpleVariableContx not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      MockFile.createTempFile("/tmp/wgv0.tmp", "7tVUr");
      Locator2Impl locator2Impl1 = new Locator2Impl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl1.getColumnNumber();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl5);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(true);
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)13;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, true);
      try { 
        sAXReader0.setFeature("Validation not supported for XMLReader: ", true);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'Validation not supported for XMLReader: ' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.369978708581614
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      sAXReader_SAXEntityResolver0.uriPrefix = null;
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/ so cannot add element: 0http:/xml.org/sax}features/namespaces");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
      SAXReader sAXReader1 = new SAXReader(false);
      sAXReader1.createXMLReader();
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, (String) null);
      DefaultDocumentFactory.getInstance();
      File file0 = null;
      try {
        file0 = new MockFile("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      ProcessingInstruction processingInstruction0 = defaultDocumentFactory0.createProcessingInstruction((String) null, "");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      documentFactory0.createXPathFilter("B");
      Element element0 = defaultDocumentFactory0.createElement("B");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      ((AbstractElement) element0).remove(processingInstruction0);
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory8.createEntity("B", "MI<tsy{n");
      defaultDocumentFactory8.createAttribute(element0, "org.dom4j.tree.FlyweightProcessingInstruction", "");
      namespace0.getPath(element0);
      QName.get("Y!w@F.waVoIaD", namespace0, "oOeg}^@V5%&t9sv");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, defaultHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      byteArrayInputStream0.skip((byte) (-75));
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration1);
      sequenceInputStream0.markSupported();
      URLStreamHandler uRLStreamHandler0 = mock(URLStreamHandler.class, new ViolatedAssumptionAnswer());
      SAXReader sAXReader0 = new SAXReader(true);
      MockFile mockFile0 = new MockFile("ENTITY_REFERENCE_NODE");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertNotNull(xMLReader0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("//tmp/org.dom4j.tree.DefaultComment0file:", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getDefaultNamespace();
      DefaultElement defaultElement0 = new DefaultElement("//tmp/org.dom4j.tree.DefaultComment0file:", (Namespace) null);
      documentFactory0.createDocument((Element) defaultElement0);
      QName qName0 = namespaceStack0.getAttributeQName("//tmp/org.dom4j.tree.DefaultComment0file:", "org.dom4j.util.UserDataElement", "C5@Spvk\"mdH3V~");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName0, xSDatatype0);
      datatypeAttribute0.getParent();
      defaultDocumentFactory2.createAttribute((Element) null, qName0, "org.dom4j.util.UserDataElement");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createXPathFilter("//tmp/org.dom4j.tree.DefaultComment0file:");
      defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      documentFactory0.createEntity("MI<tsy{n", ">.)^Z_sUv");
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      QName.get("yqvH2S~", namespace0, "MI<tsy{n");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      defaultDocumentFactory10.createNamespace("//tmp/tmp/9n9@*0/tmp/wg6v0wg6v1|o(Uq6yIw", "XML");
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory10, false);
      StringReader stringReader0 = new StringReader("//tmp/org.dom4j.tree.DefaultComment0file:");
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.4388082490291416
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getDispatchHandler();
      PipedInputStream pipedInputStream0 = new PipedInputStream(3240);
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(dataInputStream0, dataInputStream0);
      sequenceInputStream0.close();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 3240);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte) (-30);
      sAXReader0.removeHandler("]]>");
      InputSource inputSource0 = new InputSource();
      inputSource0.getEncoding();
      inputSource0.setEncoding((String) null);
      inputSource0.setPublicId("]]>");
      StringReader stringReader0 = new StringReader("on|;G[e_++c7(*_sU");
      InputSource inputSource1 = new InputSource(stringReader0);
      sAXReader0.isIncludeInternalDTDDeclarations();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0);
      try { 
        sAXReader0.read((InputStream) dataInputStream0, "=ELpk%P%j;!lkpL~3");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLReader0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      parserAdapter0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      try { 
        sAXReader0.setXMLReaderClassName("No such attribute");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class No such attribute not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.7959122994232897
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName qName0 = QName.get("", namespace0, "");
      qName0.getDocumentFactory();
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("5bk@]2aL]]w.(");
      sAXReader_SAXEntityResolver0.resolveEntity("5bk@]2aL]]w.(", "5bk@]2aL]]w.(");
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.isIncludeExternalDTDDeclarations();
      String string0 = "ka\"%M'u$|XqK>XFu";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver1 = new SAXReader.SAXEntityResolver("5bk@]2aL]]w.(");
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.setStripWhitespaceText(false);
      sAXReader0.configureReader(xMLReader0, (DefaultHandler) null);
      sAXReader0.isIncludeInternalDTDDeclarations();
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      SAXReader sAXReader0 = new SAXReader(true);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Namespace namespace1 = Namespace.get("3[&96_74bX=6S1yWAS", "");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      Element element0 = defaultDocumentFactory1.createElement("LyC");
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createAttribute(element0, "Validation not supported for XMLReader: ", "3[&96_74bX=6S1yWAS");
      QName.get("f$hqCGhyi$l]Kg@", namespace1, "Validation not supported for XMLReader: ");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      SAXReader sAXReader1 = new SAXReader(defaultDocumentFactory6, true);
      sAXReader1.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      sAXReader1.installXMLFilter(xMLFilterImpl0);
      MockFile mockFile0 = new MockFile("", "3[&96_74bX=6S1yWAS");
      URI uRI0 = MockURI.aFTPURI;
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(uRI0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // URI scheme is not \"file\"
         //
         verifyException("java.io.File", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.2390954562106087
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace.get("//tmp/org.dom4j.tree.DefaultComment0file:", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("org.jaxen.function.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      defaultDocumentFactory1.createXPath("org.jaxen.function.ext.EvaluateFunction");
      defaultDocumentFactory3.createXPathFilter("//tmp/org.dom4j.tree.DefaultComment0file:");
      Element element0 = defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      documentFactory0.createEntity("MI<tsy{n", ">.)^Z_sUv");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory9.createXPath("org.jaxen.function.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      defaultDocumentFactory9.createAttribute(element0, "//tmp/L2FZASkPe/@vi)y0-U5C=%#C|'{S_:p", "org.dom4j.jaxb.JAXBModifier$JAXBElementModifier");
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.read("KmVw8lji*b''6>jc(");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.setProperty("!X", "!X");
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '!X' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=3.366023184719631
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl1 = new Locator2Impl(locatorImpl0);
      locator2Impl1.getPublicId();
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl2.getSystemId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl3.getPublicId();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      locator2Impl5.getXMLVersion();
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locator2Impl5);
      locator2Impl8.setPublicId((String) null);
      locator2Impl5.getPublicId();
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl5);
      LocatorImpl locatorImpl7 = new LocatorImpl(locatorImpl5);
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl6);
      Locator2Impl locator2Impl11 = new Locator2Impl();
      LocatorImpl locatorImpl8 = new LocatorImpl(locator2Impl11);
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(true);
      MockURL.getHttpExample();
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 4250);
      pushbackInputStream0.mark(4250);
      pushbackInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-721), 1878);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 47);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pushbackInputStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      sequenceInputStream1.markSupported();
      sequenceInputStream1.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      sequenceInputStream2.read();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      SAXReader sAXReader0 = new SAXReader(false);
      String string0 = "O^\\gefQ7\\uU";
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.endDocument();
      handlerBase0.resolveEntity(string0, string0);
      StringReader stringReader0 = new StringReader(string0);
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("oro.jaxen.functioE.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      documentFactory0.createXPathFilter("text()");
      documentFactory0.createElement("http://xml.org/sax/features/string-interning");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      defaultDocumentFactory2.createEntity("C5@Spvk\"mdH3V~", "PrWg(gF@");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      QName.get("text()", (Namespace) null, "//tmp/tmp/wgv0.tmp07tVUr");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory6, false);
      StringReader stringReader0 = new StringReader("//tmp/tmp/wgv0.tmp07tVUr");
      try { 
        sAXReader0.read((Reader) stringReader0, "http://xml.org/sax/features/string-interning");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document http://xml.org/sax/features/string-interning : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 4250);
      pushbackInputStream0.mark(4250);
      pushbackInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-721), 1878);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 47);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pushbackInputStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      bufferedInputStream0.available();
      sequenceInputStream1.markSupported();
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte)18;
      byteArray1[1] = (byte)80;
      sequenceInputStream1.read(byteArray1, 34, 34);
      bufferedInputStream0.markSupported();
      sequenceInputStream1.close();
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(bufferedInputStream0, byteArrayInputStream0);
      sequenceInputStream2.read();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      MockFile mockFile0 = new MockFile("", "");
      URL uRL0 = mockFile0.toURL();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.read(uRL0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.2990696902149015
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.setEncoding("%,(4p_tm;c5");
      SAXParseException sAXParseException0 = new SAXParseException("%,(4p_tm;c5", locator2Impl0);
      locator2Impl0.getEncoding();
      SAXParseException sAXParseException1 = new SAXParseException("org.dom4j.tree.DefaultComment", locator2Impl0, sAXParseException0);
      sAXParseException1.getSuppressed();
      sAXParseException0.getColumnNumber();
      sAXParseException1.addSuppressed(sAXParseException0);
      SAXParseException sAXParseException2 = new SAXParseException("{ybMfY8qw%", "%,(4p_tm;c5", "3", 2705, 2705, sAXParseException1);
      sAXParseException2.getException();
      SAXParseException sAXParseException3 = new SAXParseException("{ybMfY8qw%", "3", (String) null, 2705, 50, sAXParseException0);
      SAXParseException sAXParseException4 = new SAXParseException("{ybMfY8qw%", "%,(4p_tm;c5", "3", 2705, 2950);
      sAXParseException3.addSuppressed(sAXParseException4);
      sAXParseException3.initCause(sAXParseException0);
      sAXParseException3.toString();
      sAXParseException2.addSuppressed(sAXParseException1);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      xMLFilterImpl0.fatalError(sAXParseException1);
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("//tmp/org.dom4j.tree.DefaultComment0file:", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      NamespaceStack namespaceStack0 = new NamespaceStack();
      QName qName0 = namespaceStack0.getAttributeQName("//tmp/org.dom4j.tree.DefaultComment0file:", "org.dom4j.util.UserDataElement", "C5@Spvk\"mdH3V~");
      XSDatatype xSDatatype0 = mock(XSDatatype.class, new ViolatedAssumptionAnswer());
      DatatypeAttribute datatypeAttribute0 = new DatatypeAttribute(qName0, xSDatatype0);
      datatypeAttribute0.getParent();
      defaultDocumentFactory3.createAttribute((Element) null, qName0, "org.dom4j.util.UserDataElement");
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory3.createXPathFilter("//tmp/org.dom4j.tree.DefaultComment0file:");
      defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      documentFactory0.createEntity("MI<tsy{n", ">.)^Z_sUv");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      QName.get("yqvH2S~", namespace0, "MI<tsy{n");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      defaultDocumentFactory11.createNamespace("//tmp/tmp/wgv0.tmp1/tmp/9n9@*0/tmp/wg6v0wg6v", "//tmp/org.dom4j.tree.DefaultComment0file:");
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory3, false);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("//tmp/org.dom4j.tree.DefaultComment0file:", "_hSZb_t");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      defaultDocumentFactory4.createXPathFilter("_hSZb_t");
      documentFactory0.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory9.createEntity(">.)^Z_sUv", "#N");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      QName.get("_hSZb_t", namespace0, "//tmp/%,(4p_tm;c50Wjflo_");
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory6, false);
      StringReader stringReader0 = new StringReader("C5@Spvk\"mdH3V~");
      try { 
        sAXReader0.read((Reader) stringReader0, "yqvH2S~");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/yqvH2S~ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 4250);
      pushbackInputStream0.mark(4250);
      pushbackInputStream0.markSupported();
      pushbackInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (-721), 1878);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pushbackInputStream0, 47);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(bufferedInputStream0, pushbackInputStream0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(enumeration0);
      sequenceInputStream0.markSupported();
      bufferedInputStream0.available();
      sequenceInputStream1.markSupported();
      byteArrayInputStream0.read();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0, (byte)18, 2157);
      SequenceInputStream sequenceInputStream2 = new SequenceInputStream(byteArrayInputStream1, sequenceInputStream0);
      sequenceInputStream0.markSupported();
      Enumeration<InputStream> enumeration1 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration1).hasMoreElements();
      SequenceInputStream sequenceInputStream3 = new SequenceInputStream(enumeration1);
      sequenceInputStream3.markSupported();
      Enumeration<InputStream> enumeration2 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration2).hasMoreElements();
      SequenceInputStream sequenceInputStream4 = new SequenceInputStream(enumeration2);
      sequenceInputStream2.close();
      sequenceInputStream0.read();
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      InputSource inputSource0 = new InputSource();
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      char[] charArray0 = new char[4];
      charArray0[0] = ',';
      charArray0[1] = '@';
      charArray0[2] = 'j';
      charArray0[3] = 'g';
      parserAdapter0.ignorableWhitespace(charArray0, 38, 38);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.getEncoding();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/_sG/00/tmp/tmp/JW$)c>FE8^aJ0.tmp0B");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/_sG/00/tmp/tmp/JW$)c>FE8^aJ0.tmp0B not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      QName qName0 = QName.get((String) null);
      qName0.getDocumentFactory();
      qName0.setDocumentFactory((DocumentFactory) null);
      qName0.getDocumentFactory();
      DOMNamespace dOMNamespace0 = new DOMNamespace("%,(4p_tm;c5", "%,(4p_tm;c5");
      DOMElement dOMElement0 = new DOMElement(qName0);
      DOMDocumentType dOMDocumentType0 = new DOMDocumentType((String) null, "%,(4p_tm;c5");
      DOMDocument dOMDocument0 = new DOMDocument(dOMElement0, dOMDocumentType0);
      dOMNamespace0.isSameNode(dOMDocument0);
      QName.get((String) null, (Namespace) dOMNamespace0, "%,(4p_tm;c5");
      SAXReader sAXReader0 = new SAXReader((DocumentFactory) null, false);
      QName.get((String) null, "%,(4p_tm;c5", "NczFA\"");
      sAXReader0.setMergeAdjacentText(false);
      sAXReader0.getDocumentFactory();
      try { 
        sAXReader0.setProperty("", qName0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      assertFalse(sAXReader0.isIgnoreComments());
      
      sAXReader0.setIgnoreComments(true);
      assertTrue(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      String string0 = "";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      InputSource inputSource0 = new InputSource("");
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      String string1 = "SS6t";
      String string2 = "M3k7p)M.h9m";
      try { 
        MockURI.URI("", "M3k7p)M.h9m", "//home/ubuntu/termite/projects/62_dom4j/]Z5KF\"ST/]Z5KF\"ST/org.dom4j.DefaultDocumentFactory.singleton.strategy0]Z5KF\"ST");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Expected scheme name at index 0: :M3k7p)M.h9m#//home/ubuntu/termite/projects/62_dom4j/]Z5KF%22ST/]Z5KF%22ST/org.dom4j.DefaultDocumentFactory.singleton.strategy0]Z5KF%22ST
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 613);
      pushbackInputStream0.mark((byte) (-88));
      pushbackInputStream0.mark((byte) (-88));
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-88);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      PushbackInputStream pushbackInputStream1 = new PushbackInputStream(pushbackInputStream0, 613);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream1);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      SequenceInputStream sequenceInputStream1 = new SequenceInputStream(sequenceInputStream0, sequenceInputStream0);
      sequenceInputStream1.mark((-1013));
      HandlerBase handlerBase0 = new HandlerBase();
      handlerBase0.resolveEntity("//home/ubunt/termite/rojects/62_dom4j/http:/xml.org/sax/features/amespaces/%Ir:Wp0org.jaxen.saxpath.base.TokenTypes", "//home/ubunt/termite/rojects/62_dom4j/http:/xml.org/sax/features/amespaces/%Ir:Wp0org.jaxen.saxpath.base.TokenTypes");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("FromIndex: {0}, ToIndex: {1}, Size: {2}", true);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class FromIndex: {0}, ToIndex: {1}, Size: {2} not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-43);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("Mx4<g'L!~)");
      sAXReader_SAXEntityResolver0.resolveEntity("+85HwFXHlM0gTh4S", "http://xml.org/sax/features/namespace-prefixes");
      DefaultDocumentFactory.getInstance();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      locator2Impl1.getPublicId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locator2Impl3);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl4);
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl5);
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locator2Impl6);
      SAXReader sAXReader0 = new SAXReader(false);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.createContentHandler(parserAdapter0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      SAXReader sAXReader0 = new SAXReader(false);
      PipedInputStream pipedInputStream0 = new PipedInputStream(3240);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)92;
      String[] stringArray0 = new String[0];
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
          documentFactory0.createQName("C5@Spvk\"mdH3V~", "YBo2uKvUg%$k.L'c");
          DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
          defaultDocumentFactory3.createDocument("[)a>B8fq[SeA(Y'>");
          SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
          defaultDocumentFactory3.createXPath("org.jaxen.function.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
          DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
          Object object0 = new Object();
          simpleVariableContext0.setVariableValue("//tmp/http:/xml.org/sax/features/use-locator20.tmp", object0);
          DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
          simpleVariableContext0.setVariableValue("C5@Spvk\"mdH3V~", (Object) defaultDocumentFactory5);
          DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
          defaultDocumentFactory2.createEntity("[)a>B8fq[SeA(Y'>", ">.)^Z_sUv");
          DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
          Namespace namespace0 = Namespace.NO_NAMESPACE;
          QName.get("org.jaxen.function.ext.EvaluateFunction", namespace0, "//tmp/_a>`0+;&z w()`nT*d$PM1{$");
          DefaultDocumentFactory defaultDocumentFactory12 = new DefaultDocumentFactory();
          DefaultDocumentFactory defaultDocumentFactory13 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, false);
          URL uRL0 = MockURL.getHttpExample();
          MockURL.URL(uRL0, "YBo2uKvUg%$k.L'c");
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.resetHandlers();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver(":");
      DefaultDocumentFactory.getInstance();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DispatchHandler dispatchHandler0 = new DispatchHandler();
      PruningElementStack pruningElementStack0 = null;
      try {
        pruningElementStack0 = new PruningElementStack((String[]) null, dispatchHandler0, 58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.PruningElementStack", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      Namespace namespace0 = Namespace.get("//tmp/org.dom4j.tree.DefaultComment0file:", "C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory1 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory2 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory3 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory4 = new DefaultDocumentFactory();
      SimpleVariableContext simpleVariableContext0 = new SimpleVariableContext();
      defaultDocumentFactory3.createXPath("org.jaxen.function.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      defaultDocumentFactory3.createXPathFilter("//tmp/org.dom4j.tree.DefaultComment0file:");
      defaultDocumentFactory1.createElement("C5@Spvk\"mdH3V~");
      DefaultDocumentFactory defaultDocumentFactory5 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory6 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory7 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory8 = new DefaultDocumentFactory();
      documentFactory0.createEntity("MI<tsy{n", ">.)^Z_sUv");
      DefaultDocumentFactory defaultDocumentFactory9 = new DefaultDocumentFactory();
      defaultDocumentFactory9.createXPath("org.jaxen.function.ext.EvaluateFunction", (VariableContext) simpleVariableContext0);
      QName.get("yqvH2S~", namespace0, "//tmp/L2FZASkPe/@vi)y0-U5C=%#C|'{S_:p");
      DefaultDocumentFactory defaultDocumentFactory10 = new DefaultDocumentFactory();
      DefaultDocumentFactory defaultDocumentFactory11 = new DefaultDocumentFactory();
      File file0 = MockFile.createTempFile(" of document ", "yqvH2S~");
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      SAXReader sAXReader0 = new SAXReader();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 613);
      pushbackInputStream0.mark((byte) (-88));
      byte[] byteArray0 = new byte[9];
      byteArray0[3] = (byte) (-88);
      pushbackInputStream0.markSupported();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.markSupported();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pushbackInputStream0, pushbackInputStream0);
      byteArrayInputStream0.skip(0L);
      byteArrayInputStream0.read(byteArray0);
      sequenceInputStream0.mark(9);
      sequenceInputStream0.markSupported();
      sequenceInputStream0.close();
      sequenceInputStream0.read();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(sequenceInputStream0, 27);
      try { 
        sAXReader0.read((InputStream) bufferedInputStream0, "//tmp/h-Fx6iA\fP.:p,Lz0h-Fx6iA\fP.:p,Lz");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Locator2Impl locator2Impl0 = new Locator2Impl();
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      locator2Impl0.getPublicId();
      locator2Impl2.getSystemId();
      locator2Impl2.getSystemId();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locator2Impl3);
      locatorImpl0.getColumnNumber();
      locator2Impl0.getSystemId();
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      locator2Impl2.getPublicId();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl3);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl3);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldAllThrowIOExceptions();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "Wo";
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("Wo");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class Wo not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3872942996011255
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("B", "");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      locator2Impl0.getPublicId();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl1);
      locator2Impl2.getPublicId();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl3 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl3);
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl4);
      locatorImpl4.setPublicId((String) null);
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl4);
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl3);
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl1);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      DOMDocument dOMDocument0 = new DOMDocument();
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader sAXReader1 = new SAXReader(true);
      try { 
        sAXReader1.read("comment()");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/comment() (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/comment() (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          SAXReader sAXReader0 = new SAXReader((String) null, false);
          URL uRL0 = MockURL.getHttpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.net.SocketPermission\" \"www.someFakeButWellFormedURL.org\" \"resolve\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // java.lang.SecurityManager.checkConnect(SecurityManager.java:1048)
             // java.net.InetAddress.getAllByName0(InetAddress.java:1269)
             // java.net.InetAddress.getAllByName(InetAddress.java:1193)
             // java.net.InetAddress.getAllByName(InetAddress.java:1127)
             // java.net.InetAddress.getByName(InetAddress.java:1077)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1010)
             // sun.net.www.protocol.http.HttpURLConnection$5.run(HttpURLConnection.java:1008)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.www.protocol.http.HttpURLConnection.getHostAndPort(HttpURLConnection.java:1007)
             // sun.net.www.protocol.http.HttpURLConnection.URLtoSocketPermission(HttpURLConnection.java:1075)
             // sun.net.www.protocol.http.HttpURLConnection.getInputStream(HttpURLConnection.java:1477)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor303.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }
}
