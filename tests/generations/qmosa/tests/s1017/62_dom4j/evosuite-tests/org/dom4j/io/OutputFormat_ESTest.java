/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 14:18:35 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2800958116936996
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setSuppressDeclaration(true);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setExpandEmptyElements(true);
      outputFormat1.setIndentSize((-687));
      outputFormat1.setPadText(true);
      boolean boolean0 = false;
      outputFormat0.setIndent("");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setLineSeparator("");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setLineSeparator("");
      outputFormat0.getLineSeparator();
      outputFormat0.getAttributeQuoteCharacter();
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setSuppressDeclaration(false);
      outputFormat2.setNewLineAfterNTags(2781);
      outputFormat0.getAttributeQuoteCharacter();
      // Undeclared exception!
      try { 
        outputFormat1.setAttributeQuoteCharacter('%');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (%)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.964532478280498
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-epand_mpty-trText");
      String[] stringArray0 = new String[9];
      stringArray0[1] = "-expandEmOty-trimjJText";
      stringArray0[1] = "-expandEmOty-trimjJText";
      stringArray0[2] = "-epandEmpty-trText";
      stringArray0[3] = "-epand_mpty-trText";
      stringArray0[4] = "-tr*iTex";
      stringArray0[4] = "-tr*iTex";
      stringArray0[6] = "-epand_mpty-trText";
      stringArray0[7] = "-padText";
      stringArray0[3] = "-padText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 7);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags(35);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.getLineSeparator();
      assertEquals(35, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1123103344201821
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmptyx-riText";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-expandEmptyx-riText";
      stringArray0[3] = "-expandEmpty-trimjJText";
      stringArray0[4] = "-triText";
      stringArray0[5] = "3H$0_tHbtls";
      stringArray0[6] = "-triText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-expandEmptyx-riText\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7410370767808394
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("-xtml=yfNZ0ip{,%zY%7'r");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      outputFormat0.setIndent("-xtml=yfNZ0ip{,%zY%7'r");
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat1.isOmitEncoding());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.7522822410771006
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-triText";
      stringArray0[1] = "-expandEmpty-trimjJText";
      stringArray0[2] = "-trimjJText";
      stringArray0[3] = "-lineSeparator";
      stringArray0[4] = "-expandEmpty-trimjJText";
      outputFormat0.setIndentSize(3937);
      String[] stringArray1 = new String[7];
      stringArray1[0] = "-expandEmpty-triText";
      stringArray1[1] = "-expandEmpty-triText";
      stringArray1[1] = "-lineSeparator";
      stringArray1[3] = "-expandEmpty-triText";
      stringArray1[4] = "-trimjJText";
      stringArray1[5] = "-expandEmptyxJiText";
      stringArray1[6] = "-trimjJText";
      outputFormat0.parseOptions(stringArray1, 1);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndent("-padText");
      assertTrue(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.2127298830112077
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("EF6%k~RB", false, (String) null);
      outputFormat0.setOmitEncoding(false);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "EF6%k~RB";
      stringArray0[1] = null;
      stringArray0[2] = null;
      outputFormat0.setIndentSize((-1));
      stringArray0[0] = "EF6%k~RB";
      stringArray0[4] = "EF6%k~RB";
      stringArray0[5] = "EF6%k~RB";
      outputFormat0.parseOptions(stringArray0, 447);
      outputFormat0.setIndent("EF6%k~RB");
      outputFormat0.setLineSeparator("Nv");
      outputFormat0.setOmitEncoding(true);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(34);
      OutputFormat.createPrettyPrint();
      outputFormat0.getEncoding();
      outputFormat0.setNewLineAfterNTags(0);
      char char0 = 'Q';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('Q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (Q)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      int int0 = 5295;
      // Undeclared exception!
      outputFormat0.setIndentSize(2147483645);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0850162128140806
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setIndent("l");
      String string0 = "-xhtmlUTF-8";
      outputFormat0.setEncoding("-xhtmlUTF-8");
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewlines(false);
      outputFormat0.getEncoding();
      outputFormat0.getEncoding();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.isOmitEncoding();
      outputFormat0.getLineSeparator();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('s');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (s)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmptyx-riText");
      assertFalse(outputFormat0.isNewlines());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-trimjJText";
      stringArray0[1] = "-newlines";
      stringArray0[2] = "-epand_mpty-trText";
      stringArray0[4] = "-epandEOty-trimjJText";
      stringArray0[5] = "-trimjJText";
      stringArray0[6] = "-epand_mpty-trText";
      stringArray0[7] = "-epand_mpty-trText";
      stringArray0[8] = "-trimText";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isNewlines());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.792424262869452
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setExpandEmptyElements(true);
      String[] stringArray0 = new String[11];
      stringArray0[0] = "";
      stringArray0[10] = "";
      stringArray0[2] = "Invalid attribute quote character (";
      stringArray0[4] = ",AGW@Q5tgN";
      OutputFormat.createPrettyPrint();
      outputFormat0.isExpandEmptyElements();
      outputFormat0.setIndent("Invalid attribute quote character (");
      assertTrue(outputFormat0.isExpandEmptyElements());
      
      outputFormat1.setIndent("");
      assertFalse(outputFormat1.isExpandEmptyElements());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = OutputFormat.STANDARD_INDENT;
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags((-1));
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9136655198736401
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-trimjJText");
      assertFalse(outputFormat0.isTrimText());
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "P6R|wqX_nQ;?tGC&#5";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "|kk3/hmwIs0A";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "nd+q? w4`3ef- cA.y";
      stringArray0[5] = "@@g[:7l";
      stringArray0[6] = "-expa`dEmpty-triText";
      stringArray0[7] = "nd+q? w4`3ef- cA.y";
      stringArray0[8] = "-expa`dEmpty-triText";
      int int0 = outputFormat0.parseOptions(stringArray0, 1);
      assertTrue(outputFormat0.isTrimText());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3554703179987473
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-indent");
      String[] stringArray0 = new String[2];
      stringArray0[1] = "lriyext";
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setEncoding("");
      outputFormat0.setEncoding("");
      outputFormat0.parseOptions(stringArray0, 3421);
      outputFormat0.getEncoding();
      assertEquals("", outputFormat0.getEncoding());
      
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      assertEquals("UTF-8", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3454656929942979
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-encoding";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-expandEmptyx-riText";
      stringArray0[3] = "-trimText";
      stringArray0[4] = "-trimText";
      stringArray0[5] = "-expandEmpty-triText";
      stringArray0[6] = "-expandEmpty-triText";
      stringArray0[7] = "-expandEmpty-triText";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-trimText", outputFormat0.getEncoding());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.3592583621029877
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmllriyext");
      OutputFormat outputFormat1 = new OutputFormat("");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-expandEmpty-xhtmllriyext";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "-expandEmpty-xhtmllriyext";
      stringArray0[3] = "-expandEmptyx-riText";
      stringArray0[4] = "-expandEmpty-xhtmllriyext";
      outputFormat1.parseOptions(stringArray0, 0);
      int int0 = 3472;
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-50));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -50
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Y@u|o:;fF61uM@", true);
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isPadText());
      assertTrue(outputFormat0.isNewlines());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("Y@u|o:;fF61uM@", outputFormat0.getIndent());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[11];
      stringArray0[1] = "Z{PF`{l8WN>5jy2M|\"r";
      stringArray0[7] = "-trimText";
      stringArray0[8] = "Z{PF`{l8WN>5jy2M|\"r";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('\u001C');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\u001C)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(true);
      assertFalse(outputFormat0.isXHTML());
      
      outputFormat0.setXHTML(true);
      boolean boolean0 = outputFormat0.isXHTML();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.8040612744126205
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setEncoding((String) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-trimText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.0103904401323787
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setEncoding("gwl|hinxI%zQbe#M");
      outputFormat0.setEncoding((String) null);
      outputFormat0.setNewlines(true);
      String[] stringArray0 = new String[10];
      outputFormat0.setEncoding("x[/r{8UoC@30N^n");
      stringArray0[0] = "55Cc@";
      stringArray0[1] = "iR<r1ut-";
      outputFormat0.isXHTML();
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent("*bxs");
      outputFormat0.setIndent("*bxs");
      outputFormat0.isNewLineAfterDeclaration();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "*bxs";
      stringArray1[1] = "*bxs";
      outputFormat0.setIndent("*bxs");
      stringArray1[2] = "*bxs";
      stringArray1[3] = "*bxs";
      stringArray1[4] = "*bxs";
      outputFormat0.setOmitEncoding(true);
      stringArray1[5] = "*bxs";
      outputFormat0.setIndentSize((-1855929837));
      stringArray1[6] = "*bxs";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, (-1740853845));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1740853845
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.234679199787727
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("vRP[|LRY`W8=", true, "-xhtml-xhtmllriyext");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml-xhtmllriyext";
      stringArray0[1] = "-indent";
      stringArray0[2] = "vRP[|LRY`W8=";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[11];
      stringArray0[1] = "Z{PF`{l8WN>5jy2M|\"r";
      stringArray0[7] = "-trimText";
      stringArray0[7] = "Z{PF`{l8WN>5jy2M|\"r";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('\u001C');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (\u001C)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', char0);
      assertFalse(outputFormat0.isTrimText());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmptyx-riText";
      stringArray0[1] = "-expandEmpty-triText";
      stringArray0[2] = "-expandEmpty-trimjJText";
      stringArray0[3] = "-expandEmpty-trimjJText";
      stringArray0[4] = "-expandEmpty-trimText";
      stringArray0[5] = "-expandEmptyx-riText";
      stringArray0[6] = "-expandEmptyx-riText";
      stringArray0[7] = "-expandEmpty-trimjJText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2325));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2325
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.2261349694724135
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setPadText(true);
      outputFormat0.setTrimText(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("S'~ enaz]taE`F09H");
      outputFormat0.setIndent(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setPadText(true);
      outputFormat1.setLineSeparator("S'~ enaz]taE`F09H");
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndentSize(282);
      outputFormat0.setLineSeparator("S'~ enaz]taE`F09H");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(true);
      outputFormat0.isPadText();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.isTrimText();
      outputFormat0.setOmitEncoding(true);
      assertTrue(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y8M8[nr;$?*M@ecb4g");
      outputFormat0.setIndent(false);
      assertFalse(outputFormat0.isNewlines());
      
      outputFormat0.setNewlines(true);
      outputFormat0.getIndent();
      assertTrue(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("1OZ]4;6gF", false, "-expndEmtyh^C[QZWA%U");
      boolean boolean0 = outputFormat0.isOmitEncoding();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("1OZ]4;6gF", outputFormat0.getIndent());
      assertEquals("-expndEmtyh^C[QZWA%U", outputFormat0.getEncoding());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(boolean0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.5785413577162766
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.isSuppressDeclaration();
      outputFormat0.setIndent("|!~75mEE*i~");
      outputFormat1.setIndentSize((-469777569));
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.getIndent();
      outputFormat1.setSuppressDeclaration(true);
      OutputFormat outputFormat2 = new OutputFormat("|!~75mEE*i~", false, "!).3 g7?|65;");
      outputFormat1.isSuppressDeclaration();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "!).3 g7?|65;";
      stringArray0[1] = "!).3 g7?|65;";
      stringArray0[2] = "|!~75mEE*i~";
      stringArray0[3] = "8e/NjG%>4'f+";
      stringArray0[4] = "-lineSeparator";
      stringArray0[5] = "|!~75mEE*i~";
      stringArray0[6] = "|!~75mEE*i~";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat1.setIndent("|!~75mEE*i~");
      outputFormat0.setIndent("8e/NjG%>4'f+");
      assertEquals("8e/NjG%>4'f+", outputFormat0.getIndent());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      stringArray0[3] = "GW@Q#t@N";
      String[] stringArray1 = new String[4];
      stringArray1[0] = "Invalid actribute quote cara`ter (";
      stringArray1[1] = "Invalid attribute quote character (";
      stringArray1[2] = "GW@Q#t@N";
      stringArray1[3] = "Invalid actribute quote cara`ter (";
      OutputFormat outputFormat0 = new OutputFormat("");
      String string0 = outputFormat0.getEncoding();
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", string0);
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("", outputFormat0.getIndent());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmptyx-riText";
      stringArray0[3] = "-expandEmpty-trimjJText";
      stringArray0[2] = "-expandEmptyx-riText";
      stringArray0[3] = "-expandEmpty-trimjJText";
      stringArray0[4] = "-triText";
      stringArray0[5] = "-xhtml-trimjJText";
      stringArray0[3] = "-triText";
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('e');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (e)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmptyx-riText";
      stringArray0[2] = "-expandEmpty-trimjJText";
      stringArray0[3] = "-expandEmpty-trimjJText";
      stringArray0[4] = "-expandEmpty-trimText";
      stringArray0[5] = "-expandEmptyx-riText";
      stringArray0[6] = "-expandEmptyx-riText";
      stringArray0[7] = "-expandEmpty-trimjJText";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setXHTML(true);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-expandEmptyx-riText";
      stringArray0[1] = "-trimText";
      stringArray0[2] = "-newlines";
      stringArray0[3] = "-padText";
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.557702411245053
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setPadText(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = null;
      stringArray0[5] = "}pZ:";
      stringArray0[6] = null;
      stringArray0[7] = null;
      outputFormat0.parseOptions(stringArray0, 208);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setTrimText(false);
      outputFormat0.isNewlines();
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions((String[]) null, (-1578));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.8816224050082146
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndentSize(2791);
      outputFormat0.setPadText(true);
      outputFormat0.setIndent("");
      outputFormat0.setIndent("d2/{)^!I#^");
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.isNewlines();
      outputFormat0.isSuppressDeclaration();
      String[] stringArray0 = new String[9];
      outputFormat0.setIndentSize(2791);
      outputFormat0.setEncoding("GW@Q#t@N");
      outputFormat0.setNewlines(false);
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "}1-bXB3KB~!&gk:=&@";
      stringArray0[3] = "";
      stringArray0[4] = "d2/{)^!I#^";
      stringArray0[5] = "";
      stringArray0[6] = "";
      stringArray0[8] = "d2/{)^!I#^";
      outputFormat0.parseOptions(stringArray0, 2791);
      assertEquals("GW@Q#t@N", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[17];
      stringArray0[0] = "-expandEmpty-triText";
      stringArray0[1] = "-expandEmpty-trimjJText";
      stringArray0[3] = "-linSeprator";
      stringArray0[4] = "-expandEmpty-triText";
      stringArray0[3] = "-expa`dEmpty-triText";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals(0, int0);
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.7188571020822931
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-eprandEmpty-OtrText");
      String[] stringArray0 = new String[17];
      stringArray0[0] = "-eprandEmpty-OtrText";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 3472);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertEquals("-eprandEmpty-OtrText", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3437537046719372
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      outputFormat0.setIndent("-ineSreparator");
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("-indent");
      outputFormat0.setIndent("Vsuf:uMx6Atj_`H");
      outputFormat0.setIndent("9Ww_.,TLKl%GAE");
      assertEquals("9Ww_.,TLKl%GAE", outputFormat0.getIndent());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-trimjJTex", false, "Im[+:UcyDUa");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
      assertEquals("-expandEmpty-trimjJTex", outputFormat0.getIndent());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("Im[+:UcyDUa", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isNewlines());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("", false);
      boolean boolean0 = outputFormat0.isXHTML();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isTrimText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isPadText());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("Im[+:UcyDUa");
      String[] stringArray0 = new String[9];
      outputFormat0.setTrimText(true);
      stringArray0[0] = "agCGr0$pqUVnI[";
      stringArray0[1] = "Im[+:UcyDUa";
      stringArray0[2] = "Im[+:UcyDUa";
      stringArray0[3] = "|!~75mEE*i~";
      stringArray0[4] = "|!~75mEE*i~";
      stringArray0[5] = "agCGr0$pqUVnI[";
      stringArray0[6] = "|!~75mEE*i~";
      stringArray0[8] = "|!~75mEE*i~";
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtmlF=yfNZ0ip{,%zY%7'r", true);
      outputFormat0.setLineSeparator("-xhtmlF=yfNZ0ip{,%zY%7'r");
      String[] stringArray0 = new String[4];
      stringArray0[0] = "-xhtmlF=yfNZ0ip{,%zY%7'r";
      stringArray0[1] = "-xhtmlF=yfNZ0ip{,%zY%7'r";
      stringArray0[2] = "-xhtmlF=yfNZ0ip{,%zY%7'r";
      stringArray0[3] = "pTyu4a}[^NUd=r";
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5028701277202132
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("i[%u2o+z6.5KEUV");
      outputFormat0.isTrimText();
      outputFormat0.setIndent("Im[+:UcyDUaNfY+i");
      outputFormat0.setNewLineAfterDeclaration(false);
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      assertEquals("Im[+:UcyDUaNfY+i", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "i[%u2o+z6.5KEUV";
      stringArray0[1] = "Im[+:UcyDUaNfY+i";
      stringArray0[2] = "Im[+:UcyDUaNfY+i";
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndent((String) null);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.2261349694724135
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setTrimText(false);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setIndent("S'~ enaz]taE`F09H");
      outputFormat1.setIndent(false);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat1.setNewLineAfterDeclaration(false);
      outputFormat0.setIndent(false);
      outputFormat0.setPadText(false);
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.setIndent("S'~ enaz]taE`F09H");
      outputFormat0.setLineSeparator("S'~ enaz]taE`F09H");
      outputFormat0.isSuppressDeclaration();
      outputFormat0.setPadText(false);
      outputFormat0.isPadText();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.isTrimText();
      outputFormat0.setOmitEncoding(false);
      assertEquals("S'~ enaz]taE`F09H", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.0640889291298814
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("i[%u2o+z6.5KEUV", false, "i[%u2o+z6.5KEUV");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("i[%u2o+z6.5KEUV");
      outputFormat0.isTrimText();
      outputFormat0.setIndent("Im[+:UcyDUaNfY+i");
      outputFormat0.setNewLineAfterDeclaration(false);
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat0.setSuppressDeclaration(false);
      outputFormat0.isSuppressDeclaration();
      assertEquals("Im[+:UcyDUaNfY+i", outputFormat0.getIndent());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "i[%u2o+z6.5KEUV";
      stringArray0[1] = "Im[+:UcyDUaNfY+i";
      stringArray0[2] = "Im[+:UcyDUaNfY+i";
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndent((String) null);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1144174683302812
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-epand_mpty-trText");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-epandEOty-trimjJText";
      stringArray0[1] = "-epandEOty-trimjJText";
      stringArray0[2] = "-epandEmpty-trText";
      stringArray0[3] = "-epand_mpty-trText";
      stringArray0[4] = "-tr*iTex";
      stringArray0[4] = "-tr*iTex";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-epandEOty-trimjJText";
      stringArray1[1] = "-expandEmpty-trimjJTex";
      stringArray1[2] = "-expandEmpty-trimjJTex";
      stringArray1[3] = "-xhtmllriyext";
      stringArray1[4] = "-tr*iTex";
      stringArray1[5] = "1HvS8./t>@";
      int int0 = outputFormat0.parseOptions(stringArray1, 1);
      assertTrue(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(4, int0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3798389570661653
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("-indent");
      OutputFormat outputFormat1 = new OutputFormat("-indent", false);
      outputFormat1.isSuppressDeclaration();
      outputFormat1.setIndent("-lineSeparator");
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat1.setSuppressDeclaration(false);
      OutputFormat outputFormat2 = new OutputFormat("-indent", false, "-indent");
      outputFormat2.isSuppressDeclaration();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-lineSeparator";
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.3401196061221263
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-expandEmpty-triext";
      stringArray0[1] = "-xhtmlF=yfNZ0ip{,%zY%7'r";
      stringArray0[2] = "-xhtmlF=yfNZ0ip{,%zY%7'r";
      stringArray0[3] = "-rimext";
      stringArray0[4] = "-xhtmlF=yfNZ0ip{,%zY%7'r";
      String[] stringArray1 = new String[3];
      stringArray1[0] = "-expandEmpty-triext";
      stringArray1[1] = "-suppressDeclaration";
      stringArray1[2] = "-expandEmpty-triext";
      int int0 = outputFormat0.parseOptions(stringArray1, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertEquals(3, int0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("vRP[|LRY`W8=", true, "-xhtml-xhtmllr,iyext");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml-xhtmllr,iyext";
      stringArray0[1] = "-indent";
      outputFormat0.setNewlines(true);
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertEquals("vRP[|LRY`W8=", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertTrue(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("-xhtml-xhtmllr,iyext", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.3437537046719372
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      outputFormat0.setIndent("#-indentSize");
      outputFormat0.setIndent("-ineSreparator");
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("-indent");
      outputFormat0.setIndent("Vsuf:uMx6Atj_`H");
      outputFormat0.setIndent("->p~XaVXdF\" x39FpW");
      assertEquals("->p~XaVXdF\" x39FpW", outputFormat0.getIndent());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-epand_mpty-trText");
      outputFormat0.setEncoding("-expandEmOty");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-expandEmOty-trimjJTeTt";
      stringArray0[1] = "-expandEmOty-trimjJTeTt";
      stringArray0[2] = "-epandEmpty-trText";
      stringArray0[3] = "-epand_mpty-trText";
      stringArray0[4] = "-tr*iTex";
      stringArray0[4] = "-tr*iTex";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-expandEmOty-trimjJTeTt";
      stringArray1[1] = "-expandEmpty-trimjJTex";
      stringArray1[2] = "-expandEmpty-trimjJTex";
      stringArray1[3] = "-xhtmllriyext";
      stringArray1[4] = "-tr*iTex";
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-xhtmllriyext", true, "*.S*4?w;>R#H}`L4~z");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "vRP[|LRY`W8=";
      stringArray0[1] = "vRP[|LRY`W8=";
      stringArray0[2] = "-indent";
      stringArray0[3] = "-xhtml-xhtmllr,iyext";
      stringArray0[4] = "*.S*4?w;>R#H}`L4~z";
      stringArray0[5] = "vRP[|LRY`W8=";
      stringArray0[0] = "*.S*4?w;>R#H}`L4~z";
      stringArray0[7] = "-xhtml-xhtmllriyext";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1880917834));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1880917834
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndentSize(268);
      assertEquals("                                                                                                                                                                                                                                                                            ", outputFormat0.getIndent());
      
      outputFormat0.setIndentSize((-3743));
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y8M8[nr;$?*M@ecb4g");
      outputFormat0.setIndentSize(0);
      boolean boolean0 = outputFormat0.isNewLineAfterDeclaration();
      assertTrue(boolean0);
      
      outputFormat0.getIndent();
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("", outputFormat0.getIndent());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6220322287852302
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("y8M8[nr;$?*M@ecb4g");
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
      
      outputFormat1.setIndentSize((-2193));
      assertEquals("", outputFormat1.getIndent());
      
      outputFormat0.setIndent("y8M8[nr;$?*M@ecb4g");
      outputFormat0.getIndent();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
  }
}
