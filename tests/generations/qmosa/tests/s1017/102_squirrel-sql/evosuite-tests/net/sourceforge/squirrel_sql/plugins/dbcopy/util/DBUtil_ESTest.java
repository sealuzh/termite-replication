/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 12:34:16 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Component;
import java.awt.ComponentOrientation;
import java.awt.Graphics;
import java.awt.Insets;
import java.awt.Point;
import java.awt.Rectangle;
import java.awt.event.AdjustmentListener;
import java.awt.event.ContainerListener;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.HierarchyListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyListener;
import java.awt.event.MouseListener;
import java.awt.event.MouseMotionListener;
import java.awt.event.MouseWheelListener;
import java.awt.event.TextListener;
import java.awt.event.WindowListener;
import java.awt.event.WindowStateListener;
import java.awt.geom.Point2D;
import java.beans.PropertyChangeListenerProxy;
import java.io.File;
import java.io.PrintWriter;
import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.EventListener;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Stack;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.DebugGraphics;
import javax.swing.Icon;
import javax.swing.JCheckBoxMenuItem;
import javax.swing.JComponent;
import javax.swing.JEditorPane;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JMenuItem;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JViewport;
import javax.swing.KeyStroke;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.border.AbstractBorder;
import javax.swing.border.Border;
import javax.swing.border.LineBorder;
import javax.swing.plaf.MenuItemUI;
import javax.swing.plaf.metal.MetalRootPaneUI;
import javax.swing.plaf.multi.MultiMenuItemUI;
import javax.swing.text.DefaultCaret;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasColorProperties;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasConnectionProperties;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasSchemaDetailProperties;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAliasSchemaProperties;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.id.UidIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.IndexInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.util.file.FileSuffixFilter;
import org.jfree.data.time.DynamicTimeSeriesCollection;
import org.jfree.data.xy.XYSeriesCollection;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("r9S7DK#5_-M![-`6p^", true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("r9S7DK#5_-M![-`6p^");
      jInternalFrame0.isMaximum();
      jInternalFrame1.repaint((long) (-1704), 689, 1764, (-308), (-308));
      JInternalFrame jInternalFrame2 = new JInternalFrame("<2TRc8AUv(;yS9/Lr", false, false, true);
      jInternalFrame1.getKeyListeners();
      jInternalFrame1.getHierarchyListeners();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("\t", "{m?bEg", "\t");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      IDatabaseObjectInfo iDatabaseObjectInfo0 = DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo1);
      assertSame(iDatabaseObjectInfo0, databaseObjectInfo0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("[D&F9v\"esI;k(Kmt4T");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType.createNewDatabaseObjectType("");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.BEST_ROW_ID;
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("V(X'RxOm3[8", icon0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.createNewDatabaseObjectType("");
      DatabaseObjectType.createNewDatabaseObjectType("z}}cF;}S4", icon0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("]D;", "", "DBUtil.info.bindblobfile", "]D;", 2003, "", (-2026), (-691), (-691), (-4679), ")Pioh3c", "", 1638, 1638, "");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType.createNewDatabaseObjectType("");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      System.setCurrentTimeMillis((-1336L));
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      SessionInfoProvider sessionInfoProvider0 = null;
      String string0 = "Qx^b<0Zn,,#r{4^";
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "S|ot0z8Fp.Uh3B", "V(X'RxOm3[8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster0, (KeyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster0, (TextListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster1, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster3, (WindowListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster3, (HierarchyListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster6, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster10, (ContainerListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((TextListener) aWTEventMulticaster6, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster7, (InputMethodListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster3, (HierarchyBoundsListener) aWTEventMulticaster5);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((InputMethodListener) aWTEventMulticaster13, (InputMethodListener) aWTEventMulticaster11);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster7);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster7, (HierarchyBoundsListener) aWTEventMulticaster13);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster14, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster7);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster12, (HierarchyBoundsListener) aWTEventMulticaster8);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster6, (HierarchyBoundsListener) aWTEventMulticaster2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "CREATE SEQUENCE $sequenceName$ START WITH $startValue$ INCREMENT BY $incrementValue$ $cache$ $cacheValue$", "CREATE SEQUENCE $sequenceName$ START WITH $startValue$ INCREMENT BY $incrementValue$ $cache$ $cacheValue$");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point(1998, 1998);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      LineBorder lineBorder0 = new LineBorder((Color) null, 1998, true);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getDatabaseAliasesTreeStructureFile();
      fileWrapperFactoryImpl0.create(fileWrapper0, "0'y");
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getDTPropertiesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getLibraryDirectory();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl3.getDTPropertiesFile();
      boolean boolean0 = DBUtil.typesAreEquivalent(2003, 2);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("UNIQUE ", "N[", "}.)0Mzxc>DeH25|U", "N[", (-2), (String) null, 32765, 2832, 1462, 1998, "0'y", (String) null, 1998, (-607), "N[");
      boolean boolean1 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      DBUtil.typesAreEquivalent(3, 3);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      JEditorPane jEditorPane0 = new JEditorPane();
      metalRootPaneUI0.getAccessibleChild(jEditorPane0, 2004);
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, metalRootPaneUI0);
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      MetalRootPaneUI.createUI((JComponent) null);
      objectArray0[2] = (Object) jEditorPane0;
      Object[] objectArray1 = new Object[5];
      objectArray1[0] = (Object) jEditorPane0;
      objectArray1[4] = objectArray1[0];
      Object[] objectArray2 = new Object[8];
      objectArray2[0] = (Object) jEditorPane0;
      Object object1 = new Object();
      objectArray2[6] = (Object) metalRootPaneUI0;
      objectArray2[3] = (Object) jEditorPane0;
      objectArray2[4] = (Object) sQLDriverPropertyCollection0;
      objectArray2[6] = objectArray1[0];
      Object[] objectArray3 = new Object[6];
      objectArray3[0] = (Object) metalRootPaneUI0;
      objectArray3[1] = (Object) null;
      objectArray3[2] = objectArray2[3];
      objectArray2[2] = object0;
      objectArray3[4] = (Object) sQLDriverPropertyCollection0;
      objectArray3[5] = objectArray1[0];
      Object[] objectArray4 = new Object[23];
      objectArray4[0] = object0;
      objectArray4[1] = (Object) jEditorPane0;
      objectArray4[2] = (Object) null;
      DBUtil.typesAreEquivalent(3, (-1521));
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("4-*b+1u``xY1~", "4-*b+1u``xY1~", "4-*b+1u``xY1~", "rUi2", (-1521), "org.hiberna,e.sql.DecodeCaseFrament", 2004, 3, 3, 3, "X;u3c_1/2j", (String) null, 2002, (-894), "X;u3c_1/2j");
      assertEquals(3, tableColumnInfo0.getRadix());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TextListener textListener0 = mock(TextListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(textListener0, textListener0);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      AWTEventMulticaster.add((MouseMotionListener) null, (MouseMotionListener) null);
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, (MouseMotionListener) null);
      AWTEventMulticaster.add((MouseMotionListener) null, mouseMotionListener0);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "VG2_WWC1CD#k/!BT:v", "VG2_WWC1CD#k/!BT:v", "VG2_WWC1CD#k/!BT:v", 0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 0, 2001, 0, 0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "DBUtil.error.bindblobfailure", 0, 0, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      dBCopyPlugin2.getSourceSession();
      dBCopyPlugin1.getSourceSession();
      int int0 = DBUtil.replaceDistinctDataType(0, tableColumnInfo0, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_Z");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eZYYo";
      stringArray0[1] = "%uIc\"q5";
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Color color0 = Color.blue;
      Color color1 = Color.CYAN;
      LineBorder lineBorder0 = new LineBorder(color1, 2173, true);
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[1] = (MenuElement) jMenuItem0;
      JMenu jMenu0 = new JMenu((Action) null);
      menuElementArray0[3] = (MenuElement) jMenu0;
      jMenu0.getHeight();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("oct", "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "oct", "oct", 2173, "", 1799, (-2028179008), 2000, (-2028179008), "VG2_WWC1CD#k/!BT:v", "VG2_WWC1CD#k/!BT:v", 2000, 2000, "VG2_WWC1CD#k/!BT:v");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceDistinctDataType(2000, tableColumnInfo0, (ISession) null);
      DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin1, tableColumnInfo0, "VG2_WWC1CD#k/!BT:v", "n24c,O;9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl0.getSquirrelHomeDir();
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      applicationFileWrappersImpl0.getPluginsDirectory();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getDTPropertiesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getLibraryDirectory();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl1.setApplicationFiles(applicationFiles0);
      applicationFileWrappersImpl2.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getDTPropertiesFile();
      DBUtil.typesAreEquivalent(2, 2);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("N[", "N[", "N[", "N[", (-3), "}.)0Mzxc>DeH25|U", (-3), (-3), (-3), 2, "}.)0Mzxc>DeH25|U", "}.)0Mzxc>DeH25|U", 2832, (-2415), "}.)0Mzxc>DeH25|U");
      DBUtil.isBinaryType(tableColumnInfo0);
      SQLAlias sQLAlias0 = new SQLAlias();
      assertFalse(sQLAlias0.getUseDriverProperties());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl1.getSquirrelHomeDir();
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl2 = (FileWrapperImpl)applicationFileWrappersImpl1.getPluginsDirectory();
      applicationFileWrappersImpl1.getFAQFile();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getUserSQLHistoryFile();
      MockFile mockFile0 = (MockFile)applicationFiles0.getCellImportExportSelectionsFile();
      applicationFiles0.getPluginsUserSettingsDirectory();
      fileWrapperFactoryImpl0.create((File) mockFile0);
      applicationFileWrappersImpl1.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getDatabaseAliasesFile_before_version_2_3();
      applicationFileWrappersImpl1.getSquirrelHomeDir();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(fileWrapperImpl2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "*h8pR<(;,X7J>Y/H", "('4");
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      applicationFileWrappersImpl0.setApplicationFiles(applicationFiles2);
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getSquirrelHomeDir();
      FileWrapperImpl fileWrapperImpl0 = new FileWrapperImpl(".6Cq_XR");
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getPluginsDirectory();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl1.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getDTPropertiesFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFileWrappersImpl2.setApplicationFiles(applicationFiles0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl4 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getDTPropertiesFile();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-2812));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FileSuffixFilter fileSuffixFilter0 = new FileSuffixFilter("DBUtil.mappingErrorKeyword");
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getJDBCDebugLogFile();
      SQLAliasColorProperties sQLAliasColorProperties0 = new SQLAliasColorProperties();
      MetalRootPaneUI metalRootPaneUI0 = new MetalRootPaneUI();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy((String) null, metalRootPaneUI0);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(1);
      SQLAlias sQLAlias0 = new SQLAlias(integerIdentifier0);
      sQLAlias0.addPropertyChangeListener(metalRootPaneUI0);
      IndexInfo.IndexType indexInfo_IndexType0 = IndexInfo.IndexType.HASHED;
      SQLAlias sQLAlias1 = new SQLAlias();
      sQLAlias0.setPassword("s)43'o@J~vj]-");
      sQLAlias1.setColorProperties(sQLAliasColorProperties0);
      sQLAlias0.getDriverPropertiesClone();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, (String) null, (String) null, "7.", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      DBUtil.typesAreEquivalent(3, 3);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 16);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getWelcomeFile();
      applicationFileWrappersImpl0.getUserPreferencesFile();
      applicationFileWrappersImpl0.getFwJarFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getCellImportExportSelectionsFile();
      applicationFileWrappersImpl2.getSquirrelHomeDir();
      applicationFileWrappersImpl2.getUserSettingsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-3));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "_Z");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eZYYo";
      stringArray0[1] = "%uIc\"q5";
      int int0 = DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "@BeK>js31ZK|o.8RY");
      assertEquals((-1), int0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster0, (KeyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster0, (TextListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster1, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster3, (WindowListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster3, (HierarchyListener) aWTEventMulticaster6);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster6, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster9 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster10 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster10, (ContainerListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster11 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster9);
      AWTEventMulticaster aWTEventMulticaster12 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((TextListener) aWTEventMulticaster6, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster7, (InputMethodListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster3, (HierarchyBoundsListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster12);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster5, (HierarchyBoundsListener) aWTEventMulticaster7);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster13 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster4, (HierarchyBoundsListener) aWTEventMulticaster8);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster9, (HierarchyBoundsListener) aWTEventMulticaster13);
      AWTEventMulticaster aWTEventMulticaster14 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster12, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster11, (HierarchyBoundsListener) aWTEventMulticaster14);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "F", ")P\"oh3c");
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      DatabaseObjectType.createNewDatabaseObjectType("e{");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.PROCEDURE;
      DatabaseObjectType.createNewDatabaseObjectType("Skipping FK (");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.FUNCTION;
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      int int0 = 1;
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "max", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "Skipping FK (", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FileSuffixFilter fileSuffixFilter0 = new FileSuffixFilter("DBUtil.mappingErrorKeyword");
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getJDBCDebugLogFile();
      applicationFileWrappersImpl0.getJDBCDebugLogFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getDTPropertiesFile();
      boolean boolean0 = DBUtil.typesAreEquivalent(2, 2000);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster0, (KeyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster0, (TextListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster1, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((WindowListener) aWTEventMulticaster3, (WindowListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyListener) aWTEventMulticaster3, (HierarchyListener) aWTEventMulticaster5);
      AWTEventMulticaster.add((TextListener) aWTEventMulticaster5, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((WindowStateListener) aWTEventMulticaster6, (WindowStateListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((TextListener) null, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster3, (MouseWheelListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster4, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster3, (HierarchyBoundsListener) aWTEventMulticaster5);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "DBUtil.error.unknowntype", "`.962kCG)");
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<IDatabaseObjectInfo> arrayList0 = new ArrayList<IDatabaseObjectInfo>();
      arrayList0.add((IDatabaseObjectInfo) null);
      DBUtil.convertObjectToTableList(arrayList0);
      SessionInfoProvider sessionInfoProvider0 = null;
      String string0 = "^llN<";
      String string1 = "/2DbYw<>m0y?:?";
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "^llN<", "/2DbYw<>m0y?:?");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      defaultTreeCellRenderer1.addInputMethodListener((InputMethodListener) null);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[6];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertEquals(6, list1.size());
      
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      List<ITableInfo> list2 = DBUtil.convertObjectToTableList(stack0);
      assertFalse(list2.equals((Object)list0));
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Stack<IDatabaseObjectInfo> stack0 = new Stack<IDatabaseObjectInfo>();
      String string0 = "{UFb)";
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("{UFb)", "{UFb)", "{UFb)");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.CATALOG;
      String string1 = " CHAR(10) )";
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType(" CHAR(10) )", icon0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      stack0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(stack0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      DBUtil.setLastStatement("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.getLastStatement();
      ISession iSession0 = dBCopyPlugin0.getDestSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      DBUtil.setLastStatement("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = DBUtil.getLastStatement();
      assertEquals("", string0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)dBCopyPlugin0.getPluginAppSettingsFolder();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl0.create(fileWrapperImpl0);
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      doReturn((String) null).when(connection0).getCatalog();
      doReturn((DatabaseMetaData) null, (DatabaseMetaData) null, (DatabaseMetaData) null, (DatabaseMetaData) null, (DatabaseMetaData) null).when(connection0).getMetaData();
      doReturn((String) null).when(connection0).nativeSQL(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      String string0 = "%sPlstring(";
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      uidIdentifier0.setString("%sPlstring(");
      SQLDriver sQLDriver0 = new SQLDriver();
      connectionWrapper0.nativeSQL("%sPlstring(");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver0);
      sQLConnection0.setCatalog("%sPlstring(");
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(sQLConnection0, "CvASCADE", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster.remove((KeyListener) aWTEventMulticaster0, (KeyListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster0, (TextListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster1, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster1, (InputMethodListener) aWTEventMulticaster1);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.add((WindowListener) aWTEventMulticaster3, (WindowListener) aWTEventMulticaster3);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.remove((ContainerListener) aWTEventMulticaster1, (ContainerListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((AdjustmentListener) aWTEventMulticaster6, (AdjustmentListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((TextListener) aWTEventMulticaster7, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((WindowStateListener) aWTEventMulticaster2, (WindowStateListener) aWTEventMulticaster4);
      AWTEventMulticaster.add((TextListener) null, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((MouseWheelListener) aWTEventMulticaster3, (MouseWheelListener) aWTEventMulticaster2);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster4, (InputMethodListener) aWTEventMulticaster0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, " and table_schema = ? ", "Y^KRMC");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("?4XEh85(rdn/", "?4XEh85(rdn/", "Vv6J PnfNqn\"Q", "?4XEh85(rdn/", 2283, "Vv6J PnfNqn\"Q", 4, 4, 2283, 8, "Vv6J PnfNqn\"Q", "5+smO5){o$0lMZ", 8, 8, "\n");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, ".6Cq_XR", ".6Cq_XR", (String) null, (-1239), ".6Cq_XR", (-1239), 16, 16, (-1239), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, 16, (-528), ".6Cq_XR");
      tableColumnInfoArray0[0] = tableColumnInfo0;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("z,xT", (String) null, "sha1", "clob", (-528), (String) null, (-2105376123), 1244, (-2622), 2005, "2Otwq%(cVaY", " that matched ", (-97), (-2105376123), "~(,/x");
      tableColumnInfoArray0[1] = tableColumnInfo1;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("null, clob", string0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[1];
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      ForeignKeyInfo[] foreignKeyInfoArray0 = new ForeignKeyInfo[2];
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      foreignKeyInfoArray0[0] = foreignKeyInfo0;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.addInputMethodListener((InputMethodListener) null);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(foreignKeyInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo$MockitoMock$1937458702 cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "p");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "eZYo";
      stringArray0[1] = "%uIc\"q5";
      // Undeclared exception!
      try { 
        DBUtil.getColumnName((ISQLConnection) null, (ITableInfo) null, 21);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Insets insets0 = new Insets((-1518), 0, 0, 0);
      Insets insets1 = new Insets(0, 0, 0, 0);
      insets0.bottom = 0;
      insets1.set(0, (-4), 1462, 19);
      defaultTreeCellRenderer0.contains(2247, (-38));
      Insets insets2 = new Insets(19, (-1518), 19, 0);
      Rectangle rectangle0 = new Rectangle(19, 19, 0, 19);
      insets2.clone();
      rectangle0.contains(937.60284, 0.0, (double) 19, (double) 0);
      insets0.right = (-1518);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      insets1.left = (-2673);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, " seems to already have it defined.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DatabaseObjectType.createNewDatabaseObjectType("[D&F9v\"esI;k(Kmt4T");
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType.createNewDatabaseObjectType("");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.BEST_ROW_ID;
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("V(X'RxOm3[8", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("");
      DatabaseObjectType.createNewDatabaseObjectType("z}}cF;}S4", icon0);
      defaultTreeCellRenderer1.validate();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/logs");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "8AIJq$");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("8AIJq$", "JC", "DBUtil.info.bindblobfile", "DBUtil.info.bindblobmem", 0, "8AIJq$", (-4308), 1040, (-4308), 1040, " schema = ", "DBUtil.error.maptype", 0, 747, "DBUtil.info.bindblobmem");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLDriver sQLDriver0 = new SQLDriver(uidIdentifier0);
      //  // Unstable assertion: assertEquals("-151f9e58:16e7e7a09b1:-7c68", uidIdentifier0.toString());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("r9S7DK#5_-M![-`6p^", true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("]pD");
      jInternalFrame1.isMaximum();
      jInternalFrame0.isMaximum();
      jInternalFrame1.transferFocusUpCycle();
      jInternalFrame1.isPaintingForPrint();
      jInternalFrame1.getContainerListeners();
      jInternalFrame1.repaint((long) (-1704), 689, 1764, (-308), (-308));
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("r9S7DK#5_-M![-`6p^", ")Pioh3c", ". Skipping FK constraint", ")Pioh3c", (-4), "r9S7DK#5_-M![-`6p^", (-4679), (-1704), (-4), 62, "r9S7DK#5_-M![-`6p^", "4-*b+1u``xY1~", (-308), 714, "FRqz*U[z");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType.createNewDatabaseObjectType("@BeK>js31ZK|o.8RY");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBUtil.isBinaryType(tableColumnInfo0);
      System.setCurrentTimeMillis(689);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("r9S7DK#5_-M![-`6p^", true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("]pD");
      jInternalFrame0.isMaximum();
      boolean boolean0 = DBUtil.typesAreEquivalent((-542), (-542));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Point point0 = new Point(158, (-1029));
      LineBorder lineBorder0 = new LineBorder((Color) null, 158, true);
      LineBorder lineBorder1 = new LineBorder((Color) null, 158);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      Point2D.Float point2D_Float0 = new Point2D.Float();
      point0.setLocation((Point2D) point2D_Float0);
      LineBorder.createBlackLineBorder();
      lineBorder0.getLineColor();
      ComponentOrientation componentOrientation0 = ComponentOrientation.LEFT_TO_RIGHT;
      Locale locale0 = Locale.CANADA_FRENCH;
      ComponentOrientation.getOrientation(locale0);
      JViewport jViewport0 = new JViewport();
      jViewport0.toViewCoordinates(point0);
      point0.move(2098, 1997);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "KVxc7M1Iamj7cyr[{", "rUi2", "KVxc7M1Iamj7cyr[{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.setCopyMenuEnabled(true);
      dBCopyPlugin0.getPluginJarFilePath();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("`", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "DBUtil.info.bindblobfile", "U!m", (-2584), "94kZp3V8SpS$-`", (-2584), (-2584), 431, 70, "U!m", "94kZp3V8SpS$-`", 431, 70, "U!m");
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType(".6Cq_XR");
      assertEquals(".6Cq_XR", databaseObjectType0.toString());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      SQLAliasSchemaProperties sQLAliasSchemaProperties0 = new SQLAliasSchemaProperties();
      String[] stringArray0 = sQLAliasSchemaProperties0.getAllSchemaProceduresNotToBeCached();
      SQLAliasSchemaProperties sQLAliasSchemaProperties1 = new SQLAliasSchemaProperties();
      sQLAliasSchemaProperties1.getSchemaLoadInfos(sQLAliasSchemaProperties0, stringArray0, stringArray0);
      sQLAliasSchemaProperties0.getSchemaNameLoadInfo(sQLAliasSchemaProperties1);
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.setAutoLogon(true);
      sQLAlias0.setSchemaProperties(sQLAliasSchemaProperties0);
      sQLAlias0.getColorProperties();
      SQLAliasSchemaDetailProperties[] sQLAliasSchemaDetailPropertiesArray0 = new SQLAliasSchemaDetailProperties[9];
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties0 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[0] = sQLAliasSchemaDetailProperties0;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties1 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[1] = sQLAliasSchemaDetailProperties1;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties2 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[2] = sQLAliasSchemaDetailProperties2;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties3 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[3] = sQLAliasSchemaDetailProperties3;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties4 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[4] = sQLAliasSchemaDetailProperties3;
      sQLAliasSchemaDetailProperties3.setSchemaName("^fOfgA{|87SGZwd:nL@");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("PreferencesPanel.promptForHibernate", "$listdata", "", "p", (-1280), "8cK=Fc\"y0g` Oc--JQ", (-1912), 0, 2, (-856), "", "$listdata", 2, 1, "!JhuD");
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, tableColumnInfo0, "", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(linkedList0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("r9S7DK#5_-M![-`6p^", true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("]pD");
      jInternalFrame0.isMaximum();
      jInternalFrame1.repaint((long) (-1704), 689, 1764, (-308), (-308));
      JInternalFrame jInternalFrame2 = new JInternalFrame("@BeK>js31ZK|o.8RY", false, true, false);
      jInternalFrame2.getKeyListeners();
      jInternalFrame2.getHierarchyListeners();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("]pD", "r9S7DK#5_-M![-`6p^", "]pD", "]pD", 689, "KPC:?GWEPZE/LG4", 1764, 2, (-308), 689, "KPC:?GWEPZE/LG4", "\t", (-1704), 1764, "@BeK>js31ZK|o.8RY");
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(tableColumnInfo0, schemaInfo1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo((String) null, (String) null, "net.sourceforge.squirrel_sql.cient.gui.mainframe.MainFrameWindowState");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertNull(string0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SQLAliasSchemaProperties sQLAliasSchemaProperties0 = new SQLAliasSchemaProperties();
      String[] stringArray0 = sQLAliasSchemaProperties0.getAllSchemaProceduresNotToBeCached();
      SQLAliasSchemaProperties sQLAliasSchemaProperties1 = new SQLAliasSchemaProperties();
      sQLAliasSchemaProperties1.getSchemaLoadInfos(sQLAliasSchemaProperties0, stringArray0, stringArray0);
      sQLAliasSchemaProperties0.getSchemaNameLoadInfo(sQLAliasSchemaProperties1);
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.equals(sQLAliasSchemaProperties0);
      sQLAlias0.setAutoLogon(false);
      sQLAlias0.setSchemaProperties(sQLAliasSchemaProperties0);
      sQLAlias0.getColorProperties();
      SQLAliasSchemaDetailProperties[] sQLAliasSchemaDetailPropertiesArray0 = new SQLAliasSchemaDetailProperties[9];
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties0 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[0] = sQLAliasSchemaDetailProperties0;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties1 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[1] = sQLAliasSchemaDetailProperties1;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties2 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[2] = sQLAliasSchemaDetailProperties2;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties3 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[3] = sQLAliasSchemaDetailProperties3;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties4 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[4] = sQLAliasSchemaDetailProperties4;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties5 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[6] = sQLAliasSchemaDetailProperties5;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties6 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[7] = sQLAliasSchemaDetailProperties6;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("//", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "ARH/gQmw_5hN*tMX,c", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-561), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 1, 0, 0, 2, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (String) null, 1, 1, "ARH/gQmw_5hN*tMX,c");
      DBUtil.isBinaryType(tableColumnInfo0);
      System.setCurrentTimeMillis(1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("[D&F9v\"esI;k(Kmt4T");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType.createNewDatabaseObjectType("org.hibernate.type.WrapperBinaryType");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("]D;");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.BEST_ROW_ID;
      Icon icon0 = defaultTreeCellRenderer0.getOpenIcon();
      DatabaseObjectType.createNewDatabaseObjectType("V(X'RxOm3[8", icon0);
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.createNewDatabaseObjectType("org.hibernate.type.WrapperBinaryType");
      DatabaseObjectType.createNewDatabaseObjectType("microseconds", icon0);
      DatabaseObjectType.createNewDatabaseObjectType((String) null);
      DatabaseObjectType.createNewDatabaseObjectType("z}}cF;}S4", icon0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("]D;", "org.hibernate.type.WrapperBinaryType", "DBUtil.info.bindblobfile", "]D;", 2003, "org.hibernate.type.WrapperBinaryType", (-2026), (-691), (-691), (-4679), ")Pioh3c", "org.hibernate.type.WrapperBinaryType", 1638, 1638, "org.hibernate.type.WrapperBinaryType");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType5);
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.DATABASE_TYPE_DBO;
      DatabaseObjectType databaseObjectType7 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType.createNewDatabaseObjectType("org.hibernate.type.WrapperBinaryType");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBUtil.isBinaryType(tableColumnInfo0);
      System.setCurrentTimeMillis((-1336L));
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point(1998, 2441);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setLocation(point0);
      LineBorder lineBorder0 = new LineBorder((Color) null, (-1490), true);
      Insets insets0 = lineBorder0.getBorderInsets((Component) defaultTreeCellRenderer0);
      lineBorder0.getBorderInsets((Component) defaultTreeCellRenderer0, insets0);
      defaultTreeCellRenderer0.contains(2247, 7);
      LineBorder lineBorder1 = new LineBorder((Color) null, 2441);
      lineBorder1.getBorderInsets((Component) defaultTreeCellRenderer0, insets0);
      AbstractBorder.getInteriorRectangle((Component) defaultTreeCellRenderer0, (Border) lineBorder0, 2441, 7, 2441, 3172);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo((String) null, ")UJZ=3", ")P\"oh3c", "bin width", 5421, ")UJZ=3", 675, 23502, (-1483), (-77), "-En8", ")P\"oh3c", 2441, (-1424), "bin width");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SQLAliasSchemaProperties sQLAliasSchemaProperties0 = new SQLAliasSchemaProperties();
      String[] stringArray0 = sQLAliasSchemaProperties0.getAllSchemaProceduresNotToBeCached();
      SQLAliasSchemaProperties sQLAliasSchemaProperties1 = new SQLAliasSchemaProperties();
      sQLAliasSchemaProperties1.getSchemaLoadInfos(sQLAliasSchemaProperties0, stringArray0, stringArray0);
      sQLAliasSchemaProperties0.getSchemaNameLoadInfo(sQLAliasSchemaProperties1);
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.setAutoLogon(true);
      sQLAlias0.setSchemaProperties(sQLAliasSchemaProperties0);
      SQLAliasColorProperties sQLAliasColorProperties0 = sQLAlias0.getColorProperties();
      SQLAliasSchemaDetailProperties[] sQLAliasSchemaDetailPropertiesArray0 = new SQLAliasSchemaDetailProperties[9];
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties0 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[0] = sQLAliasSchemaDetailProperties0;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties1 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[1] = sQLAliasSchemaDetailProperties1;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties2 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[2] = sQLAliasSchemaDetailProperties2;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties3 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[3] = sQLAliasSchemaDetailProperties3;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties4 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[4] = sQLAliasSchemaDetailProperties4;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties5 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[5] = sQLAliasSchemaDetailProperties5;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties6 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[6] = sQLAliasSchemaDetailProperties6;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties7 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[7] = sQLAliasSchemaDetailProperties7;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties8 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[8] = sQLAliasSchemaDetailProperties8;
      sQLAliasSchemaProperties1.setSchemaDetails(sQLAliasSchemaDetailPropertiesArray0);
      sQLAliasColorProperties0.setToolbarBackgroundColorRgbValue(0);
      sQLAliasColorProperties0.setOverrideStatusBarBackgroundColor(false);
      sQLAlias0.setPassword("java.lang.Thread");
      sQLAliasColorProperties0.setOverrideObjectTreeBackgroundColor(true);
      SQLAlias sQLAlias1 = new SQLAlias();
      sQLAlias1.setPassword("java.lang.Thread");
      sQLAlias1.setColorProperties(sQLAliasColorProperties0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("r9S7DK#5_-M![-`6p^", false, false, true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("]pD");
      jInternalFrame0.isMaximum();
      JInternalFrame jInternalFrame2 = new JInternalFrame((String) null, true, false, true);
      jInternalFrame2.getRootPane();
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      int int0 = 863;
      JInternalFrame jInternalFrame0 = new JInternalFrame("DBUtil.error.nocolumns", true, false, false, false);
      String string0 = "]pD";
      jInternalFrame0.isFocusOwner();
      JInternalFrame jInternalFrame1 = new JInternalFrame("DBUtil.error.nocolumns");
      jInternalFrame0.isMaximum();
      boolean boolean0 = false;
      JInternalFrame jInternalFrame2 = new JInternalFrame("]pD", false, true, false);
      jInternalFrame1.getRootPane();
      ISession iSession0 = null;
      String string1 = null;
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      TextListener textListener0 = mock(TextListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(textListener0, textListener0);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.remove(mouseMotionListener0, mouseMotionListener0);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.add(mouseMotionListener0, (MouseMotionListener) defaultCaret0);
      AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, mouseMotionListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "r/ K", "IY4w+rE");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin1);
      dBCopyPlugin1.getSourceSession();
      DBUtil.fixCase((ISession) null, "");
      dBCopyPlugin1.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.fixCase((ISession) null, (String) null);
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      String string0 = "%sqlstring(";
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("%sqlstring(");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("insert into ", true, true, true, true);
      XYSeriesCollection xYSeriesCollection0 = new XYSeriesCollection();
      jInternalFrame0.removeVetoableChangeListener(xYSeriesCollection0);
      jInternalFrame0.isMaximum();
      JInternalFrame jInternalFrame1 = new JInternalFrame("]pD", true, true, false);
      jInternalFrame0.getRootPane();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, ">1.',y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JMenu jMenu0 = new JMenu("(60?^LvUgX$", true);
      jMenu0.getHeight();
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("VG2_WWC1CD#k/!BT:v", "", "!n+YC6W^SgC", "(60?^LvUgX$", 2004, "", 1799, (-2028179008), 2004, (-1294), "VG2_WWC1CD#k/!BT:v", "r/ K", (-1294), 0, "l*@-@");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceDistinctDataType(2048, tableColumnInfo0, (ISession) null);
      assertEquals(2048, int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      Color color0 = Color.blue;
      Color color1 = Color.CYAN;
      LineBorder lineBorder0 = new LineBorder(color1, 2173, true);
      MenuElement[] menuElementArray0 = new MenuElement[7];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JMenuItem jMenuItem0 = new JMenuItem();
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      JMenu jMenu0 = new JMenu((Action) null);
      menuElementArray0[3] = (MenuElement) jMenu0;
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      Box box0 = Box.createHorizontalBox();
      box0.getGraphics();
      jPopupMenu0.paintAll((Graphics) null);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Null 'task' argument.", "Null 'task' argument.", "rUi2", "rUi2", 20000, "rUi2", (-1763), 358, 196, 20000, "rUi2", "rUi2", (-1532), 1, "rUi2");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      int int0 = DBUtil.replaceDistinctDataType((-483), tableColumnInfo0, (ISession) null);
      assertEquals((-483), int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getLibraryDirectory();
      applicationFileWrappersImpl1.getUserSettingsDirectory();
      applicationFileWrappersImpl1.getQuickStartGuideFile();
      applicationFileWrappersImpl1.getSquirrelHomeDir();
      applicationFileWrappersImpl1.getUserSettingsDirectory();
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-3));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("insert into ", true, false, true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("bit_not");
      jInternalFrame0.isMaximum();
      JInternalFrame jInternalFrame2 = new JInternalFrame("]pD", true, true, true);
      jInternalFrame1.getRootPane();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("insert into ", "l?]df]n9m0LWrPoN* ", "c^l=kJY$ ", (ISession) null, true, 400);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DBUtil.typesAreEquivalent((-6), (-6));
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((CallableStatement) null).when(connection0).prepareCall(anyString());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      // Undeclared exception!
      try { 
        connectionWrapper0.prepareCall("a]2`lwZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // statement
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.StatementWrapper", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      SQLAliasSchemaProperties sQLAliasSchemaProperties0 = new SQLAliasSchemaProperties();
      String[] stringArray0 = sQLAliasSchemaProperties0.getAllSchemaProceduresNotToBeCached();
      SQLAliasSchemaProperties sQLAliasSchemaProperties1 = new SQLAliasSchemaProperties();
      sQLAliasSchemaProperties1.getSchemaLoadInfos(sQLAliasSchemaProperties0, stringArray0, stringArray0);
      sQLAliasSchemaProperties0.getSchemaNameLoadInfo(sQLAliasSchemaProperties1);
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.setAutoLogon(true);
      sQLAlias0.setSchemaProperties(sQLAliasSchemaProperties0);
      SQLAliasSchemaDetailProperties[] sQLAliasSchemaDetailPropertiesArray0 = new SQLAliasSchemaDetailProperties[9];
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties0 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[0] = sQLAliasSchemaDetailProperties0;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties1 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[1] = sQLAliasSchemaDetailProperties1;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties2 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[2] = sQLAliasSchemaDetailProperties2;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties3 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[3] = sQLAliasSchemaDetailProperties3;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties4 = new SQLAliasSchemaDetailProperties();
      sQLAliasSchemaDetailPropertiesArray0[4] = sQLAliasSchemaDetailProperties4;
      SQLAliasSchemaDetailProperties sQLAliasSchemaDetailProperties5 = new SQLAliasSchemaDetailProperties();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertEquals(0, list0.size());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(16);
      IntegerIdentifier integerIdentifier1 = new IntegerIdentifier(2005);
      boolean boolean0 = DBUtil.typesAreEquivalent(21, 2006);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)applicationFileWrappersImpl1.getSquirrelHomeDir();
      FileWrapperImpl fileWrapperImpl1 = new FileWrapperImpl(fileWrapperImpl0);
      applicationFileWrappersImpl1.getPluginsDirectory();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFileWrappersImpl1.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl2.getDTPropertiesFile();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "sJzYhW", "Encountered unexpected exception when attempting to call SQLDatabaseMetaData.getTables with catalog = ");
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.equals(fileWrapperImpl1);
      dBCopyPlugin0.getPluginJarFilePath();
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      dBCopyPlugin0.setApplicationFiles(applicationFileWrappersImpl1);
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("r9S7DK#5_-M![-`6p^", true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("]pD");
      jInternalFrame0.isMaximum();
      jInternalFrame0.doDefaultCloseAction();
      JInternalFrame jInternalFrame2 = new JInternalFrame((String) null, true, false, true);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      JMenuItem jMenuItem0 = new JMenuItem();
      JMenu jMenu0 = new JMenu((Action) null);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem((Action) null);
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      Class<DynamicTimeSeriesCollection> class0 = DynamicTimeSeriesCollection.class;
      jPopupMenu0.getListeners(class0);
      jPopupMenu0.removeNotify();
      Box box0 = Box.createHorizontalBox();
      jMenu0.getAction();
      box0.getGraphics();
      jPopupMenu0.paintAll((Graphics) null);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem((Action) null);
      MenuSelectionManager.defaultManager();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      SchemaInfo schemaInfo1 = new SchemaInfo((IApplication) null);
      dBCopyPlugin0.getDestDatabaseObject();
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, schemaInfo0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      DBUtil.setLastStatementValues(",WaB_u}D-6/J,lJE*");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginJarFilePath();
      dBCopyPlugin0.setCopyMenuEnabled(true);
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      LineBorder lineBorder0 = new LineBorder((Color) null, (-1518), true);
      Insets insets0 = new Insets((-1518), 0, 0, 0);
      Insets insets1 = new Insets(0, 0, 0, 0);
      insets1.set(0, (-4), 1462, 19);
      defaultTreeCellRenderer0.contains(2247, 16);
      LineBorder lineBorder1 = new LineBorder((Color) null, 0, true);
      lineBorder1.getBorderInsets((Component) defaultTreeCellRenderer0, insets0);
      Rectangle rectangle0 = new Rectangle(0, 0);
      Rectangle rectangle1 = new Rectangle(19, 0, 0, 19);
      lineBorder0.getInteriorRectangle((Component) defaultTreeCellRenderer0, 32765, 217, 2247, (-2687));
      rectangle1.contains(937.60284, (double) 0, (double) 19, (double) 0);
      rectangle0.y = (-1518);
      lineBorder0.getInteriorRectangle((Component) defaultTreeCellRenderer0, 0, 0, 0, 1462);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      lineBorder1.paintBorder(defaultTreeCellRenderer0, debugGraphics0, 19, 19, 0, 0);
      point0.move((-1518), 0);
      lineBorder1.getLineColor();
      AbstractBorder.getInteriorRectangle((Component) defaultTreeCellRenderer0, (Border) lineBorder1, (-1518), 0, 19, 0);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem((Action) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("+Q,jfeez!ND\"EhIh");
      PrintWriter printWriter0 = mockPrintWriter0.append((CharSequence) "+Q,jfeez!ND\"EhIh");
      mockPrintWriter0.print((-6885.0));
      jRadioButtonMenuItem1.list(printWriter0, 3);
      menuElementArray0[1] = (MenuElement) jRadioButtonMenuItem0;
      jRadioButtonMenuItem0.requestFocus();
      JMenu jMenu0 = new JMenu("+Q,jfeez!ND\"EhIh");
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(2, 0, false);
      jMenu0.getConditionForKeyStroke(keyStroke0);
      jRadioButtonMenuItem0.setOpaque(true);
      jMenu0.getHeight();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("ZWCI2A", "Rendering class: [", "Rendering class: [", "ZWCI2A", 262, "*nYFtK>($j$f7oZR(G;", 32700, 32700, 32700, 32700, "DBUtil.error.bindblobfailure", (String) null, 2001, 0, "*nYFtK>($j$f7oZR(G;");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string0 = DBUtil.getSchemaNameFromDbObject(tableColumnInfo0);
      assertEquals("Rendering class: [", string0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster.remove((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) aWTEventMulticaster0, (TextListener) null);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((MouseMotionListener) aWTEventMulticaster1, (MouseMotionListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster3 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster4 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster5 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster4);
      AWTEventMulticaster aWTEventMulticaster6 = (AWTEventMulticaster)AWTEventMulticaster.add((TextListener) null, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster7 = (AWTEventMulticaster)AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster4, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((MouseListener) aWTEventMulticaster3, (MouseListener) aWTEventMulticaster7);
      Class<DynamicTimeSeriesCollection> class0 = DynamicTimeSeriesCollection.class;
      AWTEventMulticaster.getListeners((EventListener) aWTEventMulticaster1, class0);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster6, (HierarchyBoundsListener) aWTEventMulticaster2);
      AWTEventMulticaster aWTEventMulticaster8 = (AWTEventMulticaster)AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster2, (HierarchyBoundsListener) aWTEventMulticaster3);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster2, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster6, (HierarchyBoundsListener) aWTEventMulticaster5);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster8, (HierarchyBoundsListener) aWTEventMulticaster2);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      System.setCurrentTimeMillis((-5169L));
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "oqJMy =GDNeS.7", (ITableInfo) null, 64000);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      TextListener textListener0 = mock(TextListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(textListener0, textListener0);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.remove((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      MouseMotionListener mouseMotionListener0 = AWTEventMulticaster.add((MouseMotionListener) defaultCaret0, (MouseMotionListener) defaultCaret0);
      MouseMotionListener mouseMotionListener1 = AWTEventMulticaster.remove((MouseMotionListener) defaultCaret0, mouseMotionListener0);
      AWTEventMulticaster.add(mouseMotionListener0, mouseMotionListener1);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((TextListener) null, (TextListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "Length function is null for dialect=", "insert into ", foreignKeyInfo0, dBCopyPlugin0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.setCopyMenuEnabled(true);
      dBCopyPlugin0.getPluginJarFilePath();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("`", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "DBUtil.info.bindblobfile", "U!m", (-2584), "94kZp3V8SpS$-`", (-2584), (-2584), 431, 70, "U!m", "94kZp3V8SpS$-`", 431, 70, "U!m");
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      schemaInfo0.getSQLDatabaseMetaData();
      dBCopyPlugin0.getSourceSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType(".6Cq_XR");
      assertEquals(".6Cq_XR", databaseObjectType0.getName());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl1 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl1.getSquirrelHomeDir();
      applicationFileWrappersImpl1.getChangeLogFile();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      ApplicationFileWrappersImpl applicationFileWrappersImpl2 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getPluginsUserSettingsDirectory();
      applicationFileWrappersImpl1.getPluginsUserSettingsDirectory();
      applicationFileWrappersImpl0.getPluginsDirectory();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl0.create("k", "Br/ K");
      applicationFileWrappersImpl1.getUserPreferencesFile();
      fileWrapperFactoryImpl0.createTempFile("fileOpenInPreviousDir", "fileOpenInPreviousDir", fileWrapper0);
      applicationFileWrappersImpl2.setFileWrapperFactory(fileWrapperFactoryImpl0);
      ApplicationFileWrappersImpl applicationFileWrappersImpl3 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl1.getDTPropertiesFile();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("[JXn~p*", "[JXn~p*", "0", "Q}6c5EYv8V>h~*yq9IN", 2868, "fileOpenInPreviousDir", 2868, 2868, 2000, 2868, (String) null, "0", 2000, 1795, "rUi2");
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2868, int0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      SQLAlias sQLAlias0 = new SQLAlias(uidIdentifier0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SQLAlias sQLAlias1 = new SQLAlias(uidIdentifier0);
      SQLAliasConnectionProperties sQLAliasConnectionProperties0 = sQLAlias1.getConnectionProperties();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("%sPlstring(", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "%sPlstring(", "50gu))a)Zj SCrQh-ay", 1111, "%sPlstring(", 130, 1231, 1231, 1111, "%sPlstring(", "%sPlstring(", 1111, 1053, "SELECT 'create or replace view ' || v.VIEWNAME || ' as ' || v.definition FROM _v_view v, _v_objs_owned o where v.objid = o.objid and o.DATABASE = '");
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      SQLAlias sQLAlias2 = new SQLAlias();
      sQLAlias0.equals(sQLAliasConnectionProperties0);
      SQLAliasSchemaProperties sQLAliasSchemaProperties0 = new SQLAliasSchemaProperties();
      SQLAliasSchemaProperties sQLAliasSchemaProperties1 = sQLAlias1.getSchemaProperties();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "SELECT 'create or replace view ' || v.VIEWNAME || ' as ' || v.definition FROM _v_view v, _v_objs_owned o where v.objid = o.objid and o.DATABASE = '";
      stringArray0[1] = "SELECT 'create or replace view ' || v.VIEWNAME || ' as ' || v.definition FROM _v_view v, _v_objs_owned o where v.objid = o.objid and o.DATABASE = '";
      stringArray0[2] = "SELECT 'create or replace view ' || v.VIEWNAME || ' as ' || v.definition FROM _v_view v, _v_objs_owned o where v.objid = o.objid and o.DATABASE = '";
      stringArray0[3] = "%sPlstring(";
      stringArray0[4] = "50gu))a)Zj SCrQh-ay";
      stringArray0[5] = "%sPlstring(";
      stringArray0[6] = "SELECT 'create or replace view ' || v.VIEWNAME || ' as ' || v.definition FROM _v_view v, _v_objs_owned o where v.objid = o.objid and o.DATABASE = '";
      stringArray0[7] = "%sPlstring(";
      sQLAliasSchemaProperties0.getSchemaLoadInfos(sQLAliasSchemaProperties1, stringArray0, stringArray0);
      sQLAlias2.setSchemaProperties(sQLAliasSchemaProperties0);
      SQLAliasColorProperties sQLAliasColorProperties0 = sQLAlias0.getColorProperties();
      sQLAlias2.setPassword("SELECT 'create or replace view ' || v.VIEWNAME || ' as ' || v.definition FROM _v_view v, _v_objs_owned o where v.objid = o.objid and o.DATABASE = '");
      sQLAliasColorProperties0.setOverrideObjectTreeBackgroundColor(false);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      sQLAlias2.setColorProperties(sQLAliasColorProperties0);
      sQLAlias2.getDriverPropertiesClone();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(130);
      System.setCurrentTimeMillis(1111);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      LineBorder lineBorder0 = new LineBorder((Color) null, (-1518), true);
      Insets insets0 = new Insets((-1518), 0, 0, 0);
      Insets insets1 = new Insets(0, 0, 0, 0);
      insets0.bottom = 0;
      insets1.set(0, (-4), 1462, 19);
      defaultTreeCellRenderer0.contains(2247, 16);
      Insets insets2 = new Insets(19, (-1518), 19, 0);
      Rectangle rectangle0 = AbstractBorder.getInteriorRectangle((Component) defaultTreeCellRenderer0, (Border) lineBorder0, 19, 2247, (-4), (-1029));
      Rectangle rectangle1 = new Rectangle(19, 19, 0, 19);
      rectangle1.contains(937.60284, 0.0, (double) 19, (double) 0);
      rectangle0.y = (-1518);
      lineBorder0.getInteriorRectangle((Component) defaultTreeCellRenderer0, 19, 0, (-1518), 1462);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      lineBorder0.paintBorder(defaultTreeCellRenderer0, debugGraphics0, 19, 19, 19, 0);
      point0.move((-1518), 19);
      lineBorder0.getLineColor();
      AbstractBorder.getInteriorRectangle((Component) defaultTreeCellRenderer0, (Border) lineBorder0, (-1518), (-1518), 19, 19);
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      String string0 = "%sPlstring(";
      UidIdentifier uidIdentifier0 = new UidIdentifier();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "Y");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JInternalFrame jInternalFrame0 = new JInternalFrame("r9S7DK#5_-M![-`6p^", true, true);
      JInternalFrame jInternalFrame1 = new JInternalFrame("]pD");
      jInternalFrame0.isMaximum();
      jInternalFrame0.repaint((-2043L), 5, 5, 5, 116);
      JInternalFrame jInternalFrame2 = new JInternalFrame((String) null);
      jInternalFrame2.getKeyListeners();
      jInternalFrame2.getHierarchyListeners();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, (String) null, (String) null, "]pD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setUseTruncate(true);
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      DBUtil.setLastStatement("");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      ISession iSession0 = dBCopyPlugin0.getSourceSession();
      assertNull(iSession0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      DBUtil.getLastStatement();
      Connection connection0 = null;
      ConnectionWrapper connectionWrapper0 = null;
      try {
        connectionWrapper0 = new ConnectionWrapper((Connection) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "insert into ", "insert into ", "DROP TABLE ", 13);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "a;:%Nr?pjNXh", "s'W;kYbO41", "Encountered unexpected exception while attempting to determine if schemas are used in table definitions", 779);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Color color0 = Color.CYAN;
      MenuElement[] menuElementArray0 = new MenuElement[17];
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      menuElementArray0[0] = (MenuElement) jRadioButtonMenuItem0;
      JMenuItem jMenuItem0 = new JMenuItem();
      jRadioButtonMenuItem0.setRolloverIcon((Icon) null);
      menuElementArray0[0] = (MenuElement) jMenuItem0;
      JMenu jMenu0 = new JMenu((Action) null);
      jMenu0.setAlignmentX(635.49F);
      menuElementArray0[3] = (MenuElement) jMenu0;
      jMenu0.getHeight();
      jRadioButtonMenuItem0.getActionCommand();
      MultiMenuItemUI multiMenuItemUI0 = new MultiMenuItemUI();
      jMenu0.setUI((MenuItemUI) multiMenuItemUI0);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      jMenuItem0.setDisabledSelectedIcon((Icon) null);
      menuElementArray0[4] = (MenuElement) jCheckBoxMenuItem0;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, (String) null, ") REFERENCES ", ") REFERENCES ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      JMenuItem jMenuItem0 = new JMenuItem();
      JMenu jMenu0 = new JMenu((Action) null);
      JCheckBoxMenuItem jCheckBoxMenuItem0 = new JCheckBoxMenuItem();
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      Class<DynamicTimeSeriesCollection> class0 = DynamicTimeSeriesCollection.class;
      jPopupMenu0.getListeners(class0);
      jPopupMenu0.removeNotify();
      Box box0 = Box.createHorizontalBox();
      box0.getGraphics();
      jPopupMenu0.paintAll((Graphics) null);
      JRadioButtonMenuItem jRadioButtonMenuItem1 = new JRadioButtonMenuItem("^");
      MenuSelectionManager.defaultManager();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPluginAppSettingsFolder();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "max", "qRd97U7!W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
