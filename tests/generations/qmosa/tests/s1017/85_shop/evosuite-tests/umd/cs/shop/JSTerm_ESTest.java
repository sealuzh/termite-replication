/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 11:08:46 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.ListIterator;
import java.util.Spliterator;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%x(rgYv/.bV<|6*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.ready();
      streamTokenizer0.wordChars(37, 37);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(37, 46);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.wordChars(46, (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-2), 1);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.ordinaryChars(0, 1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar(37);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.parseNumbers();
      streamTokenizer5.whitespaceChars(61, (-3464));
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.resetSyntax();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      System.setCurrentTimeMillis(253L);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5018086694590895
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) "");
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm2.makeVariable();
      System.setCurrentTimeMillis(42L);
      jSTerm2.clonePF();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.listIterator();
      jSTerm5.addAll((Collection) jSTerm4);
      jSTerm6.makeVariable();
      JSTerm jSTerm7 = new JSTerm();
      JSJshopVars.astherisk = 85;
      jSTerm7.removeAll(jSTerm5);
      JSSubstitution jSSubstitution1 = jSTerm2.matches(jSTerm4);
      JSTerm jSTerm8 = new JSTerm();
      JSTerm jSTerm9 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches((JSTerm) null, jSSubstitution2);
      JSTerm jSTerm10 = jSTerm2.applySubstitutionT(jSSubstitution1);
      JSJshopVars.apostrophe = 85;
      jSTerm10.isGround();
      JSTerm jSTerm11 = jSTerm5.call();
      // Undeclared exception!
      try { 
        jSTerm11.matches(jSTerm9);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      String string0 = ".h\\9]iX3";
      jSTerm0.contains(".h9]iX3");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) ".h9]iX3");
      Object object0 = new Object();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.0262296229952916
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader(" : ");
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader(".h9]iX3");
      JSJshopVars.leftPar = 2233;
      CharBuffer charBuffer0 = CharBuffer.allocate(73);
      stringReader2.skip(105L);
      stringReader1.skip(73);
      stringReader2.read(charBuffer0);
      stringReader3.close();
      stringReader1.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader4 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      StringReader stringReader5 = new StringReader("b2dSE~|v");
      StringReader stringReader6 = new StringReader("!.Ac,j76");
      stringReader0.markSupported();
      stringReader0.read();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm1.removeAllElements();
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.9512595041439564
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.sort((Comparator) null);
      Object object0 = new Object();
      jSTerm0.add((Object) null);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2110688711446103
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader("ceil");
      StringReader stringReader1 = new StringReader("ceil");
      StringReader stringReader2 = new StringReader("ceil");
      stringReader2.markSupported();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.clear();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution2);
      jSSubstitution0.add((Object) jSTerm1);
      jSTerm2.call();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.listIterator();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5191094303623207
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(".h9]iX3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.flagLevel = (-2);
      jSTerm1.makeVariable();
      jSTerm0.add((Object) jSTerm1);
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-1834), (-1612));
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      jSTerm1.isEval();
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "call");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.add((Object) jSTerm0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.sort((Comparator) null);
      Object object0 = new Object();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      JSJshopVars.semicolon = 124;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.098997265544816
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.print();
      assertNotSame(jSTerm2, jSTerm1);
      assertTrue(jSTerm2.isFunction());
      
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm3.print();
      boolean boolean0 = jSTerm3.isFunction();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5584430563228002
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "");
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      System.setCurrentTimeMillis(42L);
      jSTerm1.clonePF();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      ListIterator listIterator0 = jSTerm5.listIterator();
      jSTerm4.addAll((Collection) jSTerm3);
      jSTerm5.makeVariable();
      JSTerm jSTerm6 = new JSTerm();
      JSJshopVars.astherisk = 85;
      jSTerm6.removeAll(jSTerm4);
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm3);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm7.ensureCapacity(85);
      JSTerm jSTerm8 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) listIterator0);
      jSTerm1.matches((JSTerm) null, jSSubstitution2);
      JSTerm jSTerm9 = jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm9.isGround();
      jSTerm4.call();
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm9.matches(jSTerm8, jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.149144091740034
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.sort((Comparator) null);
      Object object0 = new Object();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.removeElement(jSSubstitution3);
      jSTerm2.print();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.removeAll(jSTerm1);
      jSTerm2.matches(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.ensureCapacity(494);
      JSTerm jSTerm5 = jSTerm2.standardizerTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm5.matches((JSTerm) null, jSSubstitution5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9810967544026823
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".h9]iX3";
      Object object0 = new Object();
      jSTerm0.add((Object) ".h9]iX3");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.removeElement("tt3lgjfyzxl");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm1, jSSubstitution0);
      jSTerm0.get(0);
      jSSubstitution0.addElement(".h9]iX3");
      jSTerm0.toArray(objectArray0);
      jSTerm0.removeAll(jSSubstitution1);
      jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm2.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7298201303799212
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%x(rgYv/.bV<|6*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      String string0 = "tt3lgjfyzxl";
      jSTerm1.removeElement("%x(rgYv/.bV<|6*");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.get(2871);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2871
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.954645866682635
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("**");
      Comparator<JSSubstitution> comparator1 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertTrue(jSTerm3.isFunction());
      
      jSTerm1.print();
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.539654447440098
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".h9]iX3";
      Object object0 = new Object();
      jSTerm0.add((Object) ".h9]iX3");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.add((Object) ".h9]iX3");
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6924088629865501
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isGround();
      jSSubstitution0.sort((Comparator) null);
      jSTerm0.add((Object) jSSubstitution0);
      StringReader stringReader0 = new StringReader("umd.cs.shop.JSPredicateForm");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9984928282265373
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".h9]iX3";
      Object object0 = new Object();
      jSTerm0.add((Object) ".h9]iX3");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.removeElement("tt3lgjfyzxl");
      StringReader stringReader0 = new StringReader(".h9]iX3");
      stringReader0.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSTerm1);
      StringReader stringReader1 = new StringReader("Reading PredicaCe");
      StringReader stringReader2 = new StringReader("fu`ajrcseb3kj");
      stringReader2.read();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm2.call();
      boolean boolean0 = jSTerm0.isGround();
      assertEquals("[.h9]iX3, [.h9]iX3]]", jSTerm0.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.976266184526568
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Comparator<JSSubstitution> comparator1 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator1);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertEquals(1, jSTerm0.size());
      
      jSTerm0.print();
      assertFalse(jSTerm0.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.2364214382176555
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSJshopVars.semicolon = 41;
      jSSubstitution1.retainAll(jSPredicateForm0);
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.sort(comparator0);
      jSTerm0.equals(jSTerm1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm0.call();
      JSTerm jSTerm3 = jSTerm1.cloneT();
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm3.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = new Object();
      Object object1 = jSTerm1.clone();
      jSTerm0.add(object1);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.293448120923453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "");
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      System.setCurrentTimeMillis(42L);
      jSTerm1.clonePF();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.listIterator();
      jSTerm5.makeVariable();
      JSTerm jSTerm6 = new JSTerm();
      JSJshopVars.astherisk = 85;
      jSTerm6.removeAll(jSTerm4);
      jSTerm1.matches(jSTerm3);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm3.ensureCapacity(85);
      jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm4.matches(jSTerm5, jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.438329911421111
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.add((Object) jSTerm1);
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.add((Object) "");
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm3.isGround();
      JSTerm jSTerm4 = jSTerm0.standardizerTerm();
      jSTerm2.makeVariable();
      System.setCurrentTimeMillis(42L);
      jSTerm2.clonePF();
      JSTerm jSTerm5 = new JSTerm();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.listIterator();
      jSTerm5.addAll((Collection) jSTerm4);
      jSTerm6.makeVariable();
      JSTerm jSTerm7 = new JSTerm();
      JSJshopVars.astherisk = 85;
      jSTerm7.removeAll(jSTerm5);
      JSTerm jSTerm8 = new JSTerm();
      JSTerm jSTerm9 = jSTerm0.standardizerTerm();
      jSTerm9.listIterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.matches((JSTerm) null, jSSubstitution1);
      jSTerm2.applySubstitutionT(jSSubstitution0);
      JSJshopVars.apostrophe = 85;
      JSTerm jSTerm10 = jSTerm5.call();
      // Undeclared exception!
      try { 
        jSTerm10.set(63, jSTerm3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 63
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.295450975872481
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) "% ");
      jSPredicateForm0.add((Object) "% ");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.sort((Comparator) null);
      jSSubstitution0.sort((Comparator) null);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "9.0");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm2.makeVariable();
      JSTerm jSTerm5 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm5.matches(jSTerm2);
      JSTerm jSTerm6 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.stream();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(",teexh4H~*+%t]J[}");
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSPredicateForm0.add((Object) jSSubstitution0);
      jSPredicateForm0.add((Object) null);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      System.setCurrentTimeMillis(1L);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.3667110520552042
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(".h9]iX3");
      jSPredicateForm0.add((Object) stringReader0);
      StringReader stringReader1 = new StringReader(".h9]iX3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSPredicateForm0.add((Object) ": unexpected EOF");
      jSTerm0.add((Object) " }qz;+R<9\"ry?K&kh");
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.sort((Comparator) null);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.2672501822971305
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.sort((Comparator) null);
      Object object0 = new Object();
      jSTerm0.add((Object) jSSubstitution1);
      jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      char[] charArray0 = new char[3];
      charArray0[0] = 'A';
      charArray0[1] = 'I';
      charArray0[2] = 'A';
      System.setCurrentTimeMillis((-2218L));
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT((JSSubstitution) null);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate<String> predicate0 = Predicate.isEqual((Object) jSTerm0);
      jSTerm1.removeIf(predicate0);
      StringReader stringReader0 = new StringReader(") ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.parseList(streamTokenizer0);
      jSTerm1.toStr();
      assertEquals(1, jSTerm0.size());
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.045576462153323
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader(" : ");
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader("9.");
      JSJshopVars.leftPar = 2233;
      CharBuffer.allocate(73);
      stringReader1.skip(73);
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StringReader stringReader4 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader5 = new StringReader("Rl}K?=#S!sLf)_vl");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader5);
      streamTokenizer0.quoteChar(2233);
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.parseList(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.add((Object) comparator0);
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("0.0");
      StringReader stringReader2 = new StringReader("vhP");
      StringReader stringReader3 = new StringReader("9.");
      CharBuffer charBuffer0 = CharBuffer.allocate(1401);
      stringReader1.read(charBuffer0);
      stringReader0.close();
      StringReader stringReader4 = new StringReader("umd.cs.shop.JSEvaluate");
      stringReader4.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader5 = new StringReader("vhP");
      StringReader stringReader6 = new StringReader("s@X`YT0E?");
      StringReader stringReader7 = new StringReader("9.");
      stringReader7.read();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // codegen.java.util.Comparator$MockitoMock$20848592 cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2634794940650305
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(".h9]iX3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.flagLevel = (-4);
      jSTerm0.add((Object) jSTerm1);
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-1834), (-2));
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
      assertFalse(jSTerm3.isEval());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.1569876443452742
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7bt/ou1Z>*`yV");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (-1291.504721318292);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSTerm1, (JSSubstitution) null);
      assertNotNull(jSSubstitution0);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.321210524255372
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      JSTerm jSTerm2 = new JSTerm();
      JSJshopVars.lessT = (-169);
      jSTerm2.ensureCapacity(574);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator1);
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm2 = new JSTerm();
      int int0 = 574;
      StringReader stringReader0 = new StringReader("? ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4270610433807247
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".h9]iX3";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      StringReader stringReader0 = new StringReader("?PENQg>fJi");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.wordChars(917, 67);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      StringReader stringReader1 = new StringReader("udj");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer2.wordChars((-48), 2899);
      streamTokenizer2.parseNumbers();
      streamTokenizer2.ordinaryChars(1, (-2));
      streamTokenizer0.whitespaceChars(917, 1630);
      streamTokenizer3.resetSyntax();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(2899);
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.3066687254045313
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution4.forEach(consumer0);
      jSTerm0.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.standardizerTerm();
      assertEquals(1, jSTerm0.size());
      
      jSTerm1.print();
      assertTrue(jSTerm1.isVariable());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.1403895206310386
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".h9]iX3";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.add((Object) null);
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("0.0");
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader("9.");
      stringReader3.close();
      stringReader3.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader4 = new StringReader(".");
      StringReader stringReader5 = new StringReader("9.");
      stringReader0.read();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      JSTerm jSTerm2 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm2.equals(jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.3077310467626386
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSTerm0.add((Object) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm0.call();
      jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      StringReader stringReader0 = new StringReader("% ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 0;
      streamTokenizer0.wordChars(0, 235);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(917, 2899);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-763), (-763));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ordinaryChars((-1), 63);
      streamTokenizer2.whitespaceChars(201, 2);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0837660374856477
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution4);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.call();
      // Undeclared exception!
      try { 
        jSTerm1.equals(jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.528510661768379
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "");
      JSTerm jSTerm2 = jSTerm0.cloneT();
      jSTerm2.isGround();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      System.setCurrentTimeMillis(0L);
      jSTerm1.clonePF();
      JSTerm jSTerm4 = new JSTerm();
      JSTerm jSTerm5 = new JSTerm();
      jSTerm5.makeVariable();
      JSTerm jSTerm6 = new JSTerm();
      jSTerm6.removeAll(jSTerm4);
      jSTerm1.matches(jSTerm3);
      JSTerm jSTerm7 = new JSTerm();
      jSTerm7.ensureCapacity(39);
      JSTerm jSTerm8 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.interrogation = 39;
      jSTerm0.call();
      jSTerm8.matches(jSTerm7);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.3979365438640974
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      jSTerm0.isGround();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isVariable());
      
      jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSSubstitution0.add((Object) jSPredicateForm0);
      JSTerm jSTerm4 = jSTerm1.call();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.listIterator();
      jSTerm1.standardizerTerm();
      jSTerm2.equals(jSTerm0);
      jSTerm4.makeVariable();
      assertTrue(jSTerm4.isVariable());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader(" : ");
      JSJshopVars.astherisk = 63;
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader(".h9]iX3");
      JSJshopVars.leftPar = 2233;
      CharBuffer charBuffer0 = CharBuffer.allocate(73);
      stringReader2.skip(105L);
      stringReader3.skip((-1405L));
      stringReader1.skip(73);
      stringReader2.read(charBuffer0);
      stringReader3.close();
      stringReader1.markSupported();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader4 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      StringReader stringReader5 = new StringReader("b2dSE~|v");
      StringReader stringReader6 = new StringReader("!.Ac,j76");
      stringReader0.markSupported();
      stringReader0.read();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.addElement((Object) null);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm1.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.8848713335781608
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSPredicateForm0);
      StringReader stringReader0 = new StringReader("JSTerm");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("wib=!7t%u;g[>/U");
      StringReader stringReader2 = new StringReader(".h9]iX3");
      StringReader stringReader3 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      CharBuffer charBuffer0 = CharBuffer.allocate(2233);
      stringReader1.skip(538L);
      stringReader2.skip(105L);
      stringReader0.skip(2233);
      stringReader1.read(charBuffer0);
      stringReader0.close();
      stringReader0.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader4 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader5 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader6 = new StringReader("? ");
      stringReader3.markSupported();
      stringReader2.read();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.2222669235381562
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader(".h9]iX3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.flagLevel = (-2);
      jSTerm0.add((Object) jSTerm1);
      jSPredicateForm0.add((Object) jSTerm1);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.isGround();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-1834), (-1));
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-10));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(37, (-10));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(46, (-4));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.wordChars(41, 45);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ordinaryChars((-4), (-2584));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-3));
      streamTokenizer2.parseNumbers();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-4), 37);
      streamTokenizer1.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("}kd,ox;:IT");
      StringReader stringReader1 = new StringReader("JSTerm: Error reading control parameters: ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars((-101), (-101));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-1), (-984));
      StringReader stringReader2 = new StringReader("}kd,ox;:IT");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2603720897437283
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader(" : ");
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader(".h9]iX3");
      JSJshopVars.leftPar = 2233;
      CharBuffer charBuffer0 = CharBuffer.allocate(73);
      stringReader2.skip(105L);
      stringReader0.markSupported();
      stringReader1.skip(73);
      stringReader2.read(charBuffer0);
      stringReader3.close();
      stringReader1.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader4 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      StringReader stringReader5 = new StringReader("b2dSE~|v");
      StringReader stringReader6 = new StringReader("!.Ac,j76");
      stringReader0.markSupported();
      stringReader0.read();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm0.equals(jSTerm1);
      jSTerm1.standardizerTerm();
      jSTerm1.cloneT();
      // Undeclared exception!
      try { 
        jSTerm1.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader("TB/hr GcP'SU=r");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.commentChar((-715));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8989267893363286
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-10));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(37, (-10));
      streamTokenizer0.wordChars(37, (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(41, 45);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ordinaryChars((-4), (-2584));
      streamTokenizer0.ordinaryChar((-2584));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      stringReader0.markSupported();
      stringReader0.read();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm0.iterator();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(boolean0);
      
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm2.isConstant());
      assertNotSame(jSTerm2, jSTerm1);
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm1, jSTerm0);
      assertFalse(jSTerm2.isVariable());
      assertEquals(1, jSTerm1.size());
      assertFalse(jSTerm2.isFunction());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.1537419427010902
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm1.toArray(objectArray0);
      JSTerm jSTerm2 = (JSTerm)jSTerm1.clone();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.sort((Comparator) null);
      jSTerm0.add((Object) null);
      jSTerm0.toStr();
      StringReader stringReader0 = new StringReader("izo");
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) null);
      jSSubstitution0.add((Object) null);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.ensureCapacity((-1085573657));
      jSTerm2.isConstant();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.addAll((Collection) jSPredicateForm0);
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.isGround();
      jSPredicateForm0.trimToSize();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.addAll((Collection) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("");
      stringReader0.reset();
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      jSTerm1.toStr();
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("V .k7E6cx");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-2), 40);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(58, 93);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.commentChar((-2));
      streamTokenizer0.wordChars(58, 112);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.wordChars((-931), (-912));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2640492601665603
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      jSTerm0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<JSTerm> comparator0 = (Comparator<JSTerm>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator1);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "");
      jSTerm0.cloneT();
      jSTerm0.standardizerTerm();
      jSTerm1.makeVariable();
      System.setCurrentTimeMillis(0L);
      jSTerm1.clonePF();
      JSTerm jSTerm2 = new JSTerm();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.makeVariable();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm4.removeAll(jSTerm2);
      // Undeclared exception!
      try { 
        jSTerm3.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.contains(".h9]iX3");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-2));
      streamTokenizer2.wordChars((-2), 46);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.ordinaryChars((-1), (-1));
      streamTokenizer0.whitespaceChars((-1396), (-2));
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertFalse(boolean0);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4548671092662881
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.contains(".h9]iX3");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("0.0");
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader("9.");
      CharBuffer.allocate(73);
      jSTerm0.capacity();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) "* b=@>Z~Vqv[";
      objectArray0[2] = (Object) ".h9]iX3";
      objectArray0[3] = (Object) jSTerm1;
      objectArray0[4] = (Object) ".h9]iX3";
      objectArray0[5] = (Object) "* b=@>Z~Vqv[";
      objectArray0[6] = (Object) stringReader2;
      objectArray0[7] = (Object) stringReader0;
      objectArray0[8] = (Object) jSSubstitution0;
      jSSubstitution1.toArray(objectArray0);
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      assertFalse(jSTerm1.isEval());
      assertTrue(jSSubstitution2.fail());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.contains(".h9]iX3");
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      stringReader0.read();
      StringReader stringReader1 = new StringReader("0.0");
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader("9.");
      CharBuffer charBuffer0 = CharBuffer.allocate(73);
      stringReader3.read(charBuffer0);
      stringReader3.close();
      stringReader3.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader4 = new StringReader("");
      StringReader stringReader5 = new StringReader("9.");
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("9.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.152948480022801
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) jSSubstitution0);
      jSTerm0.addAll((Collection) jSSubstitution0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution4);
      jSTerm0.call();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm2.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.4978661367769954
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      Object object0 = new Object();
      jSTerm0.add((Object) ".h9]iX3");
      StringReader stringReader0 = new StringReader(".h9]iX3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(236);
      streamTokenizer2.wordChars(2, 236);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.ordinaryChars((-1), 236);
      streamTokenizer0.whitespaceChars(2, (-1));
      streamTokenizer2.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      assertFalse(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertTrue(jSTerm2.isConstant());
      assertFalse(jSTerm2.isVariable());
      assertNotSame(jSTerm2, jSTerm1);
      assertEquals("[0.0]", jSTerm2.toString());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.add((Object) jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAllElements();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      UnaryOperator<JSSubstitution> unaryOperator0 = UnaryOperator.identity();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.ensureCapacity(1);
      jSTerm0.isConstant();
      jSTerm0.makeVariable();
      jSTerm0.makeVariable();
      boolean boolean0 = jSTerm0.isVariable();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.0005073917883625
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isVariable();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.sort((Comparator) null);
      Object object0 = new Object();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.removeElement("~*Om(x-durQE3");
      jSTerm0.print();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm0.applySubstitutionT(jSSubstitution7);
      System.setCurrentTimeMillis(1L);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm0);
      assertNotSame(jSTerm1, jSTerm4);
      assertTrue(jSTerm4.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertNotSame(jSTerm0, jSTerm3);
      assertFalse(jSTerm4.isEval());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 4);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(99, 99);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(4, (-1905));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-31);
      streamTokenizer1.wordChars((-953), 99);
      stringReader0.mark(890);
      streamTokenizer2.ordinaryChars((-1991), 201);
      streamTokenizer0.whitespaceChars(44, 39);
      streamTokenizer2.resetSyntax();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      System.setCurrentTimeMillis(0L);
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertFalse(jSTerm0.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.48509409130221154
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      jSTerm1.isConstant();
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9792045174343245
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeVariable();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Comparator<Object> comparator0 = null;
      jSSubstitution0.sort((Comparator) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      jSTerm0.isConstant();
      jSTerm0.addAll((Collection) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      StringReader stringReader0 = new StringReader("{qwl$A)L.g=X7vFl");
      char[] charArray0 = new char[8];
      charArray0[0] = '_';
      charArray0[1] = 'V';
      charArray0[2] = 'k';
      charArray0[3] = 'j';
      charArray0[4] = '$';
      charArray0[5] = ')';
      charArray0[6] = 'C';
      charArray0[7] = 'E';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.call();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.7751292747786216
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-10));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(37, (-10));
      streamTokenizer0.wordChars(66, (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(41, 45);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ordinaryChars((-4), (-2584));
      streamTokenizer0.ordinaryChar((-2584));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer2.wordChars((-2), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.854806284951481
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-10));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(37, (-10));
      streamTokenizer0.wordChars(66, (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(41, 45);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ordinaryChars((-4), (-2584));
      streamTokenizer0.ordinaryChar((-2584));
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.nval = 1212.0;
      streamTokenizer1.resetSyntax();
      streamTokenizer2.wordChars((-2), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer1.ordinaryChars(864, (-10));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.makeEval(false);
      int int0 = 70;
      jSTerm0.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm0.subList(1, 70);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 70
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSJshopVars.slash = (-1618);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.rightBrac = (-1618);
      JSJshopVars.equalT = (-1618);
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.apostrophe = (-1618);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.1988493129136213
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("Undefined function to be evaluated  in Call statement");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      jSTerm1.removeIf(predicate1);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, (JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.iterator();
      jSSubstitution2.removeAll(jSTerm0);
      jSSubstitution2.sort((Comparator) null);
      Object object0 = new Object();
      jSTerm0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Spliterator spliterator0 = jSSubstitution2.spliterator();
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution2);
      int int0 = 0;
      Object object1 = jSTerm0.get(0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.addElement(jSTerm1);
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) spliterator0;
      objectArray0[1] = (Object) null;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = object1;
      jSTerm3.toArray(objectArray0);
      // Undeclared exception!
      try { 
        jSTerm3.remove(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" Expected (");
      char[] charArray0 = new char[8];
      charArray0[0] = 'l';
      charArray0[1] = '#';
      charArray0[2] = 'A';
      charArray0[3] = '<';
      stringReader0.read();
      charArray0[4] = '0';
      charArray0[5] = 'c';
      charArray0[6] = 'S';
      charArray0[7] = 'S';
      stringReader0.read(charArray0);
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.pushBack();
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.wordChars(2065, 1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0160085311135825
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-10));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(37, (-10));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(66, (-4));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.wordChars(41, 45);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer2.ordinaryChars((-4), (-2584));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.commentChar((-10));
      streamTokenizer3.ordinaryChar((-2584));
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ordinaryChars(66, 45);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.eolIsSignificant(true);
      streamTokenizer2.resetSyntax();
      streamTokenizer4.wordChars((-2), (-4));
      streamTokenizer0.whitespaceChars((-2584), (-2924));
      streamTokenizer3.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution2);
      Predicate<Object> predicate0 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = ".h\\9]iX3";
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".h9]iX3";
      Object object0 = new Object();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      String string0 = "%x(rgYv/.bV<|6*";
      StringReader stringReader0 = new StringReader("%x(rgYv/.bV<|6*");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.assignFailure();
      jSTerm0.matches(jSTerm0, jSSubstitution0);
      StringReader stringReader1 = new StringReader("%x(rgYv/.bV<|6*");
      // Undeclared exception!
      try { 
        stringReader0.mark((-254746212));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Read-ahead limit < 0
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader("");
      char[] charArray0 = new char[1];
      charArray0[0] = 'a';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.2275294114572126
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) ".h9]iX3";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.removeAll(jSPredicateForm0);
      jSSubstitution0.add((Object) jSSubstitution0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      StringReader stringReader0 = new StringReader("Ip2m*hn!/EVOUJsgJw");
      StringReader stringReader1 = new StringReader("0.0");
      StringReader stringReader2 = new StringReader("* b=@>Z~Vqv[");
      StringReader stringReader3 = new StringReader("9.");
      stringReader3.markSupported();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      StringReader stringReader4 = new StringReader(".");
      StringReader stringReader5 = new StringReader("9.");
      StringReader stringReader6 = new StringReader(".h9]iX3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-866L));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm1.isEval());
      assertFalse(jSTerm1.isVariable());
      assertTrue(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm0);
      assertEquals(1, jSTerm1.size());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(UdJ^z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), 16);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(37, 16);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(46, (-4));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.wordChars(41, 45);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.wordChars((-4), 2899);
      streamTokenizer0.parseNumbers();
      streamTokenizer2.ordinaryChars((-4), (-2584));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-2924), (-2414));
      streamTokenizer3.resetSyntax();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeFunction();
      JSTerm jSTerm1 = new JSTerm();
      Object[] objectArray0 = new Object[1];
      jSTerm1.toArray(objectArray0);
      jSTerm1.clone();
      StringReader stringReader0 = new StringReader("");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(2, 660);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), 1179);
      streamTokenizer1.resetSyntax();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer4);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N(UdJ^>z/zR>");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-10));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.wordChars(37, (-10));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars(66, (-4));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.wordChars(41, 45);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.parseNumbers();
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer2.ordinaryChars((-4), (-2584));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChar((-2584));
      streamTokenizer1.parseNumbers();
      streamTokenizer2.ordinaryChars(66, 45);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.eolIsSignificant(false);
      streamTokenizer0.nval = 0.0;
      streamTokenizer4.slashSlashComments(false);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.wordChars((-2), (-4));
      streamTokenizer0.whitespaceChars((-2584), (-2924));
      streamTokenizer3.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer2);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }
}
