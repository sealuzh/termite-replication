/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 13:20:51 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7865306749108953
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer1.div();
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer1.literal();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.minus();
      xPathLexer1.not();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.literal();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("+3@1");
      Token token9 = xPathLexer1.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer6.colon();
      assertEquals(18, token10.getTokenType());
      assertEquals("+", token10.getTokenText());
      
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer5.div();
      XPathLexer xPathLexer7 = new XPathLexer("+3@1");
      Token token12 = xPathLexer7.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("+", token12.getTokenText());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.151783823056948
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer0.rightBracket();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer2.number();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer2.pipe();
      xPathLexer3.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.identifier();
      xPathLexer1.dollar();
      xPathLexer4.slashes();
      xPathLexer3.minus();
      xPathLexer0.minus();
      xPathLexer4.pipe();
      XPathLexer xPathLexer5 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer5.literal();
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer7.rightBracket();
      xPathLexer2.comma();
      xPathLexer1.leftParen();
      xPathLexer7.literal();
      xPathLexer6.plus();
      xPathLexer7.notEquals();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.07043141944742
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      int int0 = xPathLexer0.endPosition();
      xPathLexer0.pipe();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      xPathLexer0.leftParen();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer1 = new XPathLexer("UU\"'clWl8/,$.[{");
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer2 = new XPathLexer("UU\"'clWl8/,$.[{");
      xPathLexer2.div();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer(";rbK2W9J*x=Z$`NkFm");
      xPathLexer2.nextToken();
      xPathLexer0.slashes();
      xPathLexer1.leftBracket();
      xPathLexer2.not();
      xPathLexer2.not();
      int int1 = xPathLexer1.currentPosition();
      assertFalse(int1 == int0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.8668964595938755
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.leftBracket();
      xPathLexer0.setXPath("|~z,qKs/0at?|/");
      XPathLexer xPathLexer1 = new XPathLexer("ag40$7qUVnI[");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.comma();
      xPathLexer1.setXPath("|~z,qKs/0at?|/");
      xPathLexer2.colon();
      xPathLexer1.comma();
      xPathLexer1.comma();
      xPathLexer1.identifier();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("zc~{|! ");
      xPathLexer0.doubleColon();
      xPathLexer3.doubleColon();
      xPathLexer2.at();
      xPathLexer2.leftBracket();
      xPathLexer2.mod();
      xPathLexer3.colon();
      xPathLexer3.slashes();
      Token token0 = xPathLexer2.div();
      assertNull(token0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.3598160713530567
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.setXPath("y]jad[mR3w=N");
      Token token6 = xPathLexer0.leftParen();
      assertEquals("y", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      assertEquals("]j", token7.getTokenText());
      
      char char0 = xPathLexer0.LA(2228);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token8 = xPathLexer0.pipe();
      assertEquals("a", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      assertEquals("", token9.getTokenText());
      
      xPathLexer0.operatorName();
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("y]jad[mR3w=N");
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      assertEquals("[", token11.getTokenText());
      
      xPathLexer1.or();
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("y", token12.getTokenText());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4721559199497256
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.consume((-1909));
      Token token1 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token1);
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1012023755860643
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer1.pipe();
      xPathLexer1.not();
      xPathLexer1.div();
      xPathLexer0.nextToken();
      xPathLexer1.star();
      xPathLexer0.at();
      xPathLexer0.colon();
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer1.slashes();
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("qk)&xTqQe<I+B");
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.677072622370443
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("vGTs56e?*oH`\"m'0");
      xPathLexer2.nextToken();
      xPathLexer1.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8016023824885683
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.number();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.star();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.847228061269941
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      token0.toString();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      token0.toString();
      Token token1 = xPathLexer0.star();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.at();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightBracket();
      xPathLexer3.getPreviousToken();
      xPathLexer4.and();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.26255592531951
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      assertEquals("F", token1.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.number();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      assertEquals("&", token0.getTokenText());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.pipe();
      assertEquals("L", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.plus();
      assertEquals("&", token5.getTokenText());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer1.slashes();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer3 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.at();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer1.notEquals();
      Token token10 = xPathLexer3.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("Z", token10.getTokenText());
      
      Token token11 = xPathLexer2.notEquals();
      assertEquals("co", token11.getTokenText());
      assertEquals(22, token11.getTokenType());
      
      xPathLexer1.plus();
      Token token12 = xPathLexer3.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("&", token12.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token13 = xPathLexer4.equals();
      assertEquals(21, token13.getTokenType());
      assertEquals("Z", token13.getTokenText());
      
      Token token14 = xPathLexer3.star();
      assertEquals("9", token14.getTokenText());
      assertEquals(20, token14.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.1951166401187683
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.number();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("7z`Ejd,f");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("q/lV,g\"%FQ`U");
      xPathLexer1.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer1.at();
      xPathLexer1.leftBracket();
      xPathLexer2.mod();
      xPathLexer2.literal();
      xPathLexer2.plus();
      xPathLexer2.leftBracket();
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("7z`Ejd,f");
      xPathLexer3.plus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.notEquals();
      Token token2 = xPathLexer1.or();
      assertNull(token2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.988550715384645
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer1.at();
      assertEquals(16, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer2.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer2.comma();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("<Y:5YQ;>Rfd");
      xPathLexer2.setXPath("com.werken.saxpath.Token");
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      Token token2 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token2.getTokenType());
      assertEquals("com.werken.saxpath.Token", token2.getTokenText());
      
      Token token3 = xPathLexer3.relationalOperator();
      assertEquals(7, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer4.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer(":UhDb/+nUO");
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token5 = xPathLexer5.plus();
      assertEquals(":", token5.getTokenText());
      
      Token token6 = xPathLexer5.number();
      Token token7 = xPathLexer6.rightParen();
      xPathLexer2.setPreviousToken(token7);
      assertEquals(2, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.setPreviousToken(token6);
      assertEquals(30, token6.getTokenType());
      
      Token token8 = xPathLexer4.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer2.dots();
      assertEquals("c", token9.getTokenText());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer5.mod();
      xPathLexer4.getPreviousToken();
      XPathLexer xPathLexer9 = new XPathLexer("com.werken.saxpath.Token");
      Token token10 = xPathLexer6.comma();
      assertEquals("o", token10.getTokenText());
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("o", token11.getTokenText());
      
      Token token12 = xPathLexer4.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.090518256366538
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.not();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("Kq`,2jT}K~}$X8");
      xPathLexer1.nextToken();
      xPathLexer0.setXPath("Kq`,2jT}K~}$X8");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer1.setXPath("");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.148242451530104
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      XPathLexer xPathLexer2 = new XPathLexer("k");
      xPathLexer2.plus();
      xPathLexer2.leftParen();
      xPathLexer2.dots();
      xPathLexer2.rightParen();
      xPathLexer0.star();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("k");
      xPathLexer3.nextToken();
      xPathLexer2.at();
      xPathLexer0.at();
      xPathLexer1.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer4 = new XPathLexer("k");
      xPathLexer1.number();
      xPathLexer0.pipe();
      xPathLexer4.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer3.dollar();
      xPathLexer5.slashes();
      xPathLexer3.minus();
      xPathLexer3.minus();
      xPathLexer5.pipe();
      xPathLexer1.literal();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.rightBracket();
      xPathLexer3.comma();
      xPathLexer6.leftParen();
      xPathLexer6.literal();
      xPathLexer3.plus();
      xPathLexer4.notEquals();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0762282634777054
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.number();
      xPathLexer1.nextToken();
      xPathLexer1.or();
      xPathLexer1.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer1.nextToken();
      xPathLexer1.star();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("Q");
      xPathLexer2.nextToken();
      xPathLexer0.comma();
      xPathLexer2.setXPath("LR.EIL6&W^");
      xPathLexer1.colon();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer1.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer3 = new XPathLexer("I;3e>.i_!J0gYko");
      xPathLexer2.pipe();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.947816402178515
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!3~BMA]E$hTHM%");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("!", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer1.nextToken();
      Token token1 = xPathLexer0.comma();
      assertEquals("3", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals("~", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.notEquals();
      Token token3 = xPathLexer1.nextToken();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.nextToken();
      xPathLexer2.literal();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      assertEquals("E", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.minus();
      xPathLexer0.not();
      Token token6 = xPathLexer4.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer3.notEquals();
      assertEquals(22, token7.getTokenType());
      
      Token token8 = xPathLexer1.literal();
      assertNull(token8);
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("!3~BMA]E$hTHM%");
      Token token9 = xPathLexer4.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer6.colon();
      assertEquals("!", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer4.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer6.div();
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
      assertEquals("h", token12.getTokenText());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.406076204926911
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.currentPosition();
      Token token0 = xPathLexer0.whitespace();
      assertEquals((-2), token0.getTokenType());
      assertEquals("", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals("o", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = new XPathLexer("NexTt");
      xPathLexer2.or();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("m", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.identifier();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer3.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals(1, token7.getTokenType());
      assertEquals(".", token7.getTokenText());
      
      xPathLexer3.plus();
      xPathLexer3.literal();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer5.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer4.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer2.plus();
      assertEquals("N", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("NexTt");
      Token token11 = xPathLexer3.notEquals();
      assertEquals(22, token11.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.122167002937597
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.at();
      XPathLexer xPathLexer2 = new XPathLexer("|~z,qKs/0at?|/");
      xPathLexer2.at();
      xPathLexer2.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer2.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer1.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer1.dollar();
      xPathLexer0.slashes();
      xPathLexer2.minus();
      xPathLexer4.minus();
      xPathLexer1.pipe();
      xPathLexer3.literal();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer4.comma();
      xPathLexer0.leftParen();
      xPathLexer2.literal();
      xPathLexer1.plus();
      xPathLexer0.notEquals();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.009893676847
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.rightBracket();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("|~z,qKs/0at?|/");
      XPathLexer xPathLexer1 = new XPathLexer("/??@,");
      xPathLexer1.nextToken();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.comma();
      xPathLexer1.setXPath("|~z,qKs/0at?|/");
      xPathLexer2.colon();
      xPathLexer1.comma();
      xPathLexer1.identifier();
      xPathLexer2.comma();
      xPathLexer2.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("zc~{|! ");
      xPathLexer3.slashes();
      xPathLexer3.nextToken();
      xPathLexer3.doubleColon();
      xPathLexer0.div();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer("|~z,qKs/0at?|/");
      xPathLexer4.nextToken();
      xPathLexer2.slashes();
      xPathLexer2.leftBracket();
      xPathLexer2.and();
      Token token0 = xPathLexer1.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.0038447315707595
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.plus();
      xPathLexer0.at();
      Token token0 = xPathLexer0.dollar();
      assertEquals("m", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token1 = xPathLexer1.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(".", token2.getTokenText());
      
      Token token3 = xPathLexer1.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals("w", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer3.not();
      assertEquals("c", token8.getTokenText());
      assertEquals(23, token8.getTokenType());
      
      xPathLexer2.div();
      Token token9 = xPathLexer3.nextToken();
      xPathLexer1.star();
      token9.toString();
      Token token10 = xPathLexer3.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = new Token((-1), "[ (15) (om.werken.saxpath.XPathLexer)", 380, 113);
      String string0 = token9.toString();
      assertEquals("[ (15) (om.werken.saxpath.XPathLexer)", string0);
      assertEquals(15, token9.getTokenType());
      
      xPathLexer3.notEquals();
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("e", token12.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (15) (om.werken.saxpath.XPathLexer)");
      Token token13 = xPathLexer4.notEquals();
      assertEquals(22, token13.getTokenType());
      assertEquals("[ ", token13.getTokenText());
      
      xPathLexer0.nextToken();
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer4.slashes();
      assertEquals(11, token15.getTokenType());
      
      Token token16 = xPathLexer0.dollar();
      assertEquals(26, token16.getTokenType());
      
      Token token17 = xPathLexer4.doubleColon();
      assertEquals("15", token17.getTokenText());
      assertEquals(19, token17.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.791988547211024
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.whitespace();
      token0.toString();
      Token token2 = new Token(4, "NexTt", 96, 4);
      Token token3 = xPathLexer0.not();
      String string0 = token3.toString();
      assertEquals("[ (23) (.)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (-2) ()", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (22) (co)", string2);
      
      Token token4 = xPathLexer0.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.identifier();
      assertEquals("erken.saxpath.XPathLexer", token5.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("[ (22) (co)");
      Token token6 = xPathLexer1.colon();
      assertEquals("[", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2802302824075773
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("=7=]!B");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.minus();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.at();
      xPathLexer0.mod();
      xPathLexer0.number();
      xPathLexer0.equals();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.slashes();
      xPathLexer0.doubleColon();
      xPathLexer0.number();
      xPathLexer0.endPosition();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.literal();
      xPathLexer0.star();
      xPathLexer0.div();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.operatorName();
      assertNull(token1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.0507152748222017
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jriI|tqS{PB");
      xPathLexer0.nextToken();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.identifier();
      assertEquals("tqS", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("jriI|tqS{PB");
      xPathLexer0.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.at();
      assertEquals("j", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer1.consume();
      Token token2 = xPathLexer1.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer1.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
      assertEquals("|", token3.getTokenText());
      
      Token token4 = xPathLexer3.dots();
      assertEquals(13, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("jriI|tqS{PB");
      Token token5 = xPathLexer5.minus();
      assertEquals("j", token5.getTokenText());
      assertEquals(6, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.dollar();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token6 = xPathLexer7.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('Q');
      Token token7 = xPathLexer6.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer2.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer4.notEquals();
      assertEquals(22, token10.getTokenType());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.394695428067827
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("|", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("~", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("z", token3.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("at", token7.getTokenText());
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.pipe();
      assertEquals("?", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer0.nextToken();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.identifier();
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
      
      xPathLexer0.getXPath();
      Token token14 = xPathLexer0.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer0.comma();
      assertEquals(32, token15.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.colon();
      Token token16 = xPathLexer0.nextToken();
      assertEquals((-1), token16.getTokenType());
      
      xPathLexer0.operatorName();
      Token token17 = xPathLexer0.identifier();
      assertEquals(15, token17.getTokenType());
      
      Token token18 = xPathLexer0.identifierOrOperatorName();
      assertNull(token18);
      
      Token token19 = xPathLexer0.colon();
      assertEquals(18, token19.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9214955174786224
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yWsTh");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("W", token1.getTokenText());
      
      xPathLexer0.number();
      Token token2 = xPathLexer0.not();
      assertEquals("s", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Th", token3.getTokenText());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.number();
      Token token6 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token6);
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer1.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer2.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals((-1), token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("yWsTh");
      Token token12 = xPathLexer3.slashes();
      assertEquals("y", token12.getTokenText());
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.299454279927768
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("}", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.at();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer1.or();
      Token token1 = xPathLexer1.number();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer2.or();
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals("c", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token3 = xPathLexer3.not();
      xPathLexer1.div();
      Token token4 = xPathLexer3.nextToken();
      assertEquals(1, token4.getTokenType());
      assertEquals("(", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals("@", token5.getTokenText());
      
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightBracket();
      Token token7 = xPathLexer4.literal();
      assertNull(token7);
      
      XPathLexer xPathLexer5 = new XPathLexer("c'/W");
      xPathLexer3.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer2.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("}", token8.getTokenText());
      
      Token token9 = xPathLexer6.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer5.endPosition();
      XPathLexer xPathLexer7 = new XPathLexer("}l2cqw\"@E7bO");
      Token token10 = xPathLexer6.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer4.identifier();
      assertEquals(15, token11.getTokenType());
      
      xPathLexer1.setPreviousToken(token3);
      assertEquals(")", token3.getTokenText());
      
      Token token12 = xPathLexer1.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer5.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer3.mod();
      char char0 = xPathLexer1.LA(4);
      assertEquals('7', char0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.159407253767238
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("m.werken.saxpath.XPathLexer", token0.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer(" -PtD&L0a$JwU/nr8cs");
      Token token1 = xPathLexer2.comma();
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer2.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer2.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer2.minus();
      xPathLexer0.plus();
      Token token4 = xPathLexer1.literal();
      assertNull(token4);
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer3.slashes();
      Token token6 = xPathLexer2.dollar();
      assertEquals("t", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(" -PtD&L0a$JwU/nr8cs");
      xPathLexer4.or();
      XPathLexer xPathLexer5 = new XPathLexer("UC\tuV)jTy}#/n");
      Token token7 = xPathLexer2.at();
      assertEquals("D", token7.getTokenText());
      
      Token token8 = xPathLexer5.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer2.notEquals();
      xPathLexer1.at();
      xPathLexer3.div();
      Token token9 = xPathLexer2.notEquals();
      assertEquals("0a", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer4.slashes();
      assertEquals(" ", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer5.equals();
      assertEquals("C", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer0.not();
      assertEquals(23, token13.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6618581068400875
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      Token token0 = xPathLexer0.equals();
      assertEquals("K", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      Token token1 = xPathLexer0.star();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (q)", string0);
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.doubleColon();
      assertEquals(",2", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.setXPath("");
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.number();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer0.identifier();
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer0.div();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals(2, token11.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.3305996908381075
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token0 = xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("hPG20~p^:");
      xPathLexer0.nextToken();
      xPathLexer1.comma();
      xPathLexer1.or();
      xPathLexer1.setXPath("hPG20~p^:");
      xPathLexer0.colon();
      xPathLexer1.nextToken();
      xPathLexer0.getXPath();
      xPathLexer1.minus();
      XPathLexer xPathLexer2 = new XPathLexer("$3nqerZB;%e`C0U+i~<");
      xPathLexer2.mod();
      xPathLexer2.pipe();
      xPathLexer2.plus();
      Token token1 = xPathLexer0.slashes();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.162070231666638
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.number();
      Token token1 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.dots();
      XPathLexer xPathLexer1 = new XPathLexer(")");
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer2.notEquals();
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer2.plus();
      xPathLexer1.slashes();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer3.equals();
      xPathLexer3.leftBracket();
      Token token2 = xPathLexer3.relationalOperator();
      assertNull(token2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.2108326857238056
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.comma();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer1.leftParen();
      xPathLexer0.plus();
      xPathLexer1.literal();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer2.slashes();
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1252378126484177
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.colon();
      xPathLexer0.comma();
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("[H1B8a{Mg\"u4/V-");
      xPathLexer1.pipe();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.1731172328097923
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.equals();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.colon();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.literal();
      xPathLexer0.dots();
      xPathLexer0.dollar();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("Yi`");
      xPathLexer1.star();
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("DzEp.}");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9020760047871883
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("q(tpHuPg");
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("Kq`,2jT}K~}$X8");
      xPathLexer1.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer1.star();
      xPathLexer1.at();
      xPathLexer1.colon();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer("q(tpHuPg");
      xPathLexer2.slashes();
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("qk)&xTqQe<I+B");
      XPathLexer xPathLexer4 = null;
      try {
        xPathLexer4 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.265644517459887
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setPreviousToken(token1);
      xPathLexer1.consume(112);
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token0);
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dots();
      xPathLexer3.rightBracket();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.nextToken();
      xPathLexer2.star();
      xPathLexer2.at();
      xPathLexer0.rightBracket();
      xPathLexer2.colon();
      XPathLexer xPathLexer4 = new XPathLexer("7z`Ejd,f");
      xPathLexer2.rightParen();
      XPathLexer xPathLexer5 = new XPathLexer("q/lV,g\"%FQ`U");
      xPathLexer5.nextToken();
      xPathLexer4.doubleColon();
      xPathLexer5.at();
      xPathLexer2.leftBracket();
      xPathLexer2.mod();
      xPathLexer5.colon();
      XPathLexer xPathLexer6 = new XPathLexer("q/lV,g\"%FQ`U");
      xPathLexer6.slashes();
      Token token2 = xPathLexer4.div();
      assertNull(token2);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.6961025675895818
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.plus();
      token0.toString();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.number();
      token2.toString();
      xPathLexer0.mod();
      xPathLexer0.at();
      token1.toString();
      token2.toString();
      token1.toString();
      Token token3 = new Token(122, (String) null, 122, (-2163));
      token1.toString();
      token0.toString();
      Token token4 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      Token token5 = xPathLexer0.relationalOperator();
      assertNull(token5);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0135848820396456
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.literal();
      xPathLexer1.colon();
      xPathLexer1.equals();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer1.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("tox6$~~?L@V:.b9vT");
      xPathLexer2.colon();
      xPathLexer1.nextToken();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer3 = new XPathLexer("tox6$~~?L@V:.b9vT");
      xPathLexer3.minus();
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      xPathLexer2.pipe();
      xPathLexer2.hasMoreChars();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1258216158250636
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("7", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("j(^T~1}:9{Iub 590");
      xPathLexer1.star();
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("bO", token4.getTokenText());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer1.or();
      Token token8 = xPathLexer2.pipe();
      assertEquals("}", token8.getTokenText());
      
      xPathLexer0.not();
      XPathLexer xPathLexer3 = new XPathLexer("j(^T~1}:9{Iub 590");
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer0.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token10 = xPathLexer2.star();
      assertEquals("l", token10.getTokenText());
      assertEquals(20, token10.getTokenType());
      
      xPathLexer1.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer5.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer1.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token14 = xPathLexer6.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      Token token15 = xPathLexer1.comma();
      assertEquals(32, token15.getTokenType());
      assertEquals("^", token15.getTokenText());
      
      Token token16 = xPathLexer3.leftParen();
      assertEquals("j", token16.getTokenText());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9912356619712943
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals("9", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals("L", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.or();
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("&", token6.getTokenText());
      
      Token token7 = xPathLexer0.identifier();
      assertEquals("o2GJ-", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.minus();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer1.literal();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.280369455295867
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("&", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("#", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals("&", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("o", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("2G", token6.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.nextToken();
      Token token7 = xPathLexer1.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer0.identifier();
      assertEquals("J-", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      xPathLexer1.slashes();
      Token token10 = xPathLexer2.dollar();
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer("^");
      Token token11 = xPathLexer4.at();
      assertEquals("^", token11.getTokenText());
      
      xPathLexer2.at();
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      xPathLexer1.notEquals();
      Token token13 = xPathLexer2.at();
      assertEquals(16, token13.getTokenType());
      
      xPathLexer2.div();
      Token token14 = xPathLexer1.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer3.slashes();
      assertEquals(11, token16.getTokenType());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.9110445075644635
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      String string0 = "=r/uoJ-ob<";
      XPathLexer xPathLexer1 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer0.rightParen();
      xPathLexer1.plus();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.nextToken();
      xPathLexer0.leftParen();
      xPathLexer1.whitespace();
      xPathLexer1.or();
      xPathLexer2.number();
      xPathLexer1.nextToken();
      xPathLexer1.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.div();
      xPathLexer4.nextToken();
      Token token0 = xPathLexer4.star();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.1741696900147995
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.notEquals();
      xPathLexer1.comma();
      xPathLexer1.star();
      xPathLexer0.not();
      xPathLexer2.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.nextToken();
      xPathLexer2.nextToken();
      xPathLexer0.comma();
      XPathLexer xPathLexer3 = new XPathLexer("7.t,<)\"*m(t8Yv");
      xPathLexer1.nextToken();
      xPathLexer1.comma();
      // Undeclared exception!
      try { 
        xPathLexer3.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.155195192362645
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.setXPath("[ (11) (c)");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("S");
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      xPathLexer0.not();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("|p+y((=wUQ]6dM@PQ");
      xPathLexer0.minus();
      xPathLexer5.literal();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer2.notEquals();
      assertNotSame(token2, token1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3044107020610418
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("<Y:5YQ;>Rfd");
      xPathLexer1.nextToken();
      xPathLexer1.comma();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.comma();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1815593993482176
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer1.nextToken();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.star();
      xPathLexer0.doubleColon();
      Token token0 = xPathLexer0.number();
      token0.toString();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (30) ()");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("T%");
      xPathLexer0.nextToken();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer3.leftBracket();
      xPathLexer0.mod();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.literal();
      xPathLexer0.plus();
      xPathLexer0.leftBracket();
      xPathLexer5.notEquals();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = null;
      try {
        xPathLexer7 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.0491988604867593
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightBracket();
      xPathLexer0.plus();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.number();
      xPathLexer1.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer2.dollar();
      xPathLexer2.slashes();
      xPathLexer1.minus();
      xPathLexer0.slashes();
      xPathLexer1.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      xPathLexer3.comma();
      xPathLexer2.leftParen();
      xPathLexer2.literal();
      xPathLexer3.plus();
      xPathLexer3.notEquals();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9187980426897804
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      Token token2 = xPathLexer0.at();
      assertEquals("@", token2.getTokenText());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("E7bO", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer1.comma();
      assertEquals(32, token6.getTokenType());
      
      boolean boolean1 = xPathLexer1.isIdentifierStartChar('_');
      assertTrue(boolean1 == boolean0);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      Token token7 = xPathLexer2.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer2.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer1.not();
      Token token9 = xPathLexer2.not();
      assertEquals(23, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("}7~vwL");
      Token token10 = xPathLexer4.doubleColon();
      assertEquals("}7", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      xPathLexer1.endPosition();
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.118702578507254
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer("gcFjqf`zj_D");
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.setXPath("}l2cqw\"@E7bO");
      xPathLexer1.nextToken();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer1.setXPath("/??@,");
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.comma();
      xPathLexer3.comma();
      xPathLexer3.at();
      xPathLexer2.operatorName();
      xPathLexer3.identifier();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.pipe();
      xPathLexer3.plus();
      xPathLexer2.slashes();
      Token token0 = xPathLexer4.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4335907425348429
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (6) (m)", string0);
      
      Token token2 = new Token(96, "rC!u", 1267, (-180));
      Token token3 = xPathLexer0.not();
      assertEquals(".", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.slashes();
      String string1 = token0.toString();
      assertEquals("[ (11) (c)", string1);
      
      token4.toString();
      xPathLexer0.notEquals();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("k", token5.getTokenText());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("en", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals(".", token7.getTokenText());
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer1.rightBracket();
      assertEquals("c", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer1.comma();
      assertEquals("o", token9.getTokenText());
      assertEquals(32, token9.getTokenType());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.022363193406004
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("9", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals("#", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(5, token6.getTokenType());
      assertEquals("+", token6.getTokenText());
      
      xPathLexer1.at();
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer("L!<Tc");
      xPathLexer2.or();
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer1.not();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer0.identifier();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token11 = xPathLexer5.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer0.equals();
      assertEquals("&", token12.getTokenText());
      assertEquals(21, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer6.leftParen();
      assertEquals(1, token13.getTokenType());
      
      xPathLexer2.plus();
      XPathLexer xPathLexer7 = new XPathLexer("L!<Tc");
      Token token14 = xPathLexer7.literal();
      assertNull(token14);
      
      XPathLexer xPathLexer8 = new XPathLexer();
      Token token15 = xPathLexer3.minus();
      assertEquals(6, token15.getTokenType());
      assertEquals("L", token15.getTokenText());
      
      Token token16 = xPathLexer4.literal();
      assertNull(token16);
      
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.plus();
      XPathLexer xPathLexer10 = new XPathLexer("`yCE!");
      Token token17 = xPathLexer1.notEquals();
      assertEquals(22, token17.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.027446958007438
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer0.rightBracket();
      xPathLexer0.minus();
      xPathLexer1.nextToken();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.leftParen();
      xPathLexer0.plus();
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer4.slashes();
      xPathLexer2.dollar();
      XPathLexer xPathLexer5 = new XPathLexer("F0!fKjtv<");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.div();
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer6.at();
      xPathLexer3.minus();
      xPathLexer4.literal();
      xPathLexer7.plus();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer5.or();
      assertNull(token0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0958064326679686
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.at();
      assertEquals("&", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer1.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      xPathLexer0.setXPath("");
      XPathLexer xPathLexer2 = new XPathLexer("bU=|AK@muwKCv");
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer2.setXPath("{8@jmP1X<Ig\"J=s");
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      xPathLexer2.comma();
      xPathLexer1.comma();
      xPathLexer3.identifier();
      Token token7 = xPathLexer3.rightParen();
      assertEquals(2, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      Token token8 = xPathLexer2.nextToken();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer2.doubleColon();
      assertEquals("@j", token9.getTokenText());
      assertEquals(19, token9.getTokenType());
      
      xPathLexer3.div();
      Token token10 = xPathLexer3.notEquals();
      assertEquals(22, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("bU=|AK@muwKCv");
      Token token11 = xPathLexer5.nextToken();
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("9", token12.getTokenText());
      
      Token token13 = xPathLexer5.not();
      assertEquals(23, token13.getTokenType());
      assertEquals("=", token13.getTokenText());
      
      Token token14 = xPathLexer4.leftBracket();
      assertEquals("c", token14.getTokenText());
      assertEquals(3, token14.getTokenType());
      
      xPathLexer5.and();
      Token token15 = xPathLexer2.comma();
      assertEquals("m", token15.getTokenText());
      assertEquals(32, token15.getTokenType());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.7892101455401805
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("|", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("~", token2.getTokenText());
      
      xPathLexer0.at();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("z", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(32, token4.getTokenType());
      assertEquals(",", token4.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("/", token5.getTokenText());
      
      xPathLexer0.consume();
      Token token6 = xPathLexer0.at();
      assertEquals("a", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals("t", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("?", token8.getTokenText());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals("|", token10.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token11 = xPathLexer2.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("|~z,qKs/0at?|/");
      Token token14 = xPathLexer2.identifier();
      assertEquals(15, token14.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("|~z,qKs/0at?|/");
      Token token15 = xPathLexer3.doubleColon();
      assertEquals(19, token15.getTokenType());
      assertEquals("|~", token15.getTokenText());
      
      Token token16 = xPathLexer1.at();
      assertEquals(16, token16.getTokenType());
      
      Token token17 = xPathLexer2.leftBracket();
      assertEquals(3, token17.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.4621884909049476
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("\nl](]");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("\n", token0.getTokenText());
      
      xPathLexer0.setXPath("\nl](]");
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(4, token1.getTokenType());
      assertEquals("]", token1.getTokenText());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
      
      xPathLexer0.setXPath(")");
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.colon();
      assertEquals(")", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer1.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer1.plus();
      assertEquals(5, token7.getTokenType());
      
      Token token8 = xPathLexer1.star();
      assertEquals(20, token8.getTokenType());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.2559746667961478
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.or();
      xPathLexer0.setXPath("LR.EIL6&W^");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("[H1B8a{Mg\"u4/V-");
      xPathLexer1.consume((-2130));
      xPathLexer1.pipe();
      xPathLexer0.hasMoreChars();
      // Undeclared exception!
      try { 
        xPathLexer1.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.259756106333136
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("o", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(31, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("rk", token4.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.div();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("n.saxpath.XPathLexer", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.literal();
      xPathLexer0.plus();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setPreviousToken(token8);
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token11 = xPathLexer1.number();
      assertEquals(30, token11.getTokenType());
      
      xPathLexer2.div();
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer1.slashes();
      assertEquals(11, token13.getTokenType());
      
      Token token14 = xPathLexer3.rightBracket();
      assertEquals(4, token14.getTokenType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7225418470541574
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("m.", token2.getTokenText());
      assertEquals(14, token2.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.pipe();
      boolean boolean0 = xPathLexer0.hasMoreChars();
      assertFalse(boolean0);
      
      xPathLexer0.at();
      xPathLexer0.div();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      Token token4 = xPathLexer1.at();
      assertEquals(16, token4.getTokenType());
      
      xPathLexer1.rightBracket();
      xPathLexer1.literal();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      xPathLexer3.getXPath();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer3.comma();
      assertEquals("[", token7.getTokenText());
      
      xPathLexer3.setXPath(",;rPg'%8Wd>u+BW");
      XPathLexer xPathLexer4 = new XPathLexer(",;rPg'%8Wd>u+BW");
      xPathLexer4.colon();
      xPathLexer4.nextToken();
      xPathLexer1.getXPath();
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("03fO*<XdcP");
      Token token9 = xPathLexer5.pipe();
      assertEquals("0", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      boolean boolean1 = xPathLexer5.hasMoreChars();
      assertTrue(boolean1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2678681685239344
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.slashes();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.pipe();
      xPathLexer1.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("k`S2_hAq(M&bVsu;a");
      xPathLexer2.star();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.equals();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer1.leftParen();
      xPathLexer0.plus();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.literal();
      XPathLexer xPathLexer6 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.identifier();
      xPathLexer0.minus();
      Token token0 = xPathLexer6.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.964741273722571
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer0.number();
      xPathLexer0.slashes();
      xPathLexer1.leftParen();
      xPathLexer1.plus();
      xPathLexer0.literal();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer2.star();
      xPathLexer0.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.minus();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.operatorName();
      xPathLexer4.literal();
      xPathLexer0.plus();
      xPathLexer1.colon();
      Token token0 = xPathLexer4.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.952246751337568
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.plus();
      assertEquals("\"", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.dots();
      assertEquals("E", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("7", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("bO", token3.getTokenText());
      
      xPathLexer0.at();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.or();
      Token token6 = xPathLexer1.pipe();
      assertEquals("}", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer3.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer3.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer1.leftParen();
      assertEquals("l", token10.getTokenText());
      
      xPathLexer2.plus();
      xPathLexer0.literal();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.notEquals();
      Token token11 = xPathLexer1.minus();
      assertEquals("2", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer1.literal();
      assertNull(token12);
      
      Token token13 = xPathLexer3.plus();
      assertEquals(5, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("}l2cqw\"@E7bO");
      Token token14 = xPathLexer5.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer5.notEquals();
      assertEquals(22, token15.getTokenType());
      assertEquals("l2", token15.getTokenText());
      
      Token token16 = xPathLexer5.nextToken();
      assertEquals(15, token16.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9014987497411977
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}&]cq\"@b");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("}&]cq\"@b");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer1.relationalOperator();
      xPathLexer2.consume();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("]", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer1.at();
      assertEquals("}", token3.getTokenText());
      
      Token token4 = xPathLexer2.plus();
      assertEquals(5, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals("&", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer3.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals("q", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      xPathLexer3.operatorName();
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer4.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      XPathLexer xPathLexer6 = new XPathLexer("}&]cq\"@b");
      Token token11 = xPathLexer4.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer5.or();
      Token token12 = xPathLexer6.slashes();
      assertEquals(11, token12.getTokenType());
      assertEquals("}", token12.getTokenText());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.1738798853843475
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer0.div();
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      assertEquals("Y", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      String string0 = token0.toString();
      assertEquals("[ (7) (<)", string0);
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token3 = xPathLexer3.at();
      assertEquals("<", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer4.rightBracket();
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer3.pipe();
      assertEquals("Y", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.not();
      xPathLexer3.div();
      xPathLexer2.number();
      xPathLexer0.setPreviousToken(token4);
      assertEquals(4, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.or();
      xPathLexer0.not();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer(")XSJq");
      xPathLexer1.consume();
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("}e8uFcghd<S~_x");
      Token token9 = xPathLexer8.notEquals();
      assertEquals("}e", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer9 = new XPathLexer("[ (7) (<)");
      xPathLexer9.nextToken();
      Token token10 = xPathLexer3.slashes();
      assertEquals(":", token10.getTokenText());
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer9.leftBracket();
      assertEquals(3, token12.getTokenType());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.7831063174222463
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token0 = xPathLexer1.nextToken();
      Token token1 = xPathLexer1.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token2 = xPathLexer2.colon();
      assertEquals("<", token2.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (7) (<)", string0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token4 = xPathLexer3.at();
      assertEquals("<", token4.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token5 = xPathLexer4.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer2.literal();
      assertEquals(27, token6.getTokenType());
      assertEquals(":5", token6.getTokenText());
      assertNotNull(token6);
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (7) (<)");
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.colon();
      Token token7 = xPathLexer3.pipe();
      assertEquals("Y", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer1.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("5", token8.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer6.identifier();
      XPathLexer xPathLexer8 = new XPathLexer("q!yX_zi1zv)])\"");
      xPathLexer0.literal();
      Token token9 = xPathLexer6.identifierOrOperatorName();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.slashes();
      assertEquals("", token10.getTokenText());
      
      Token token11 = xPathLexer8.equals();
      assertEquals("q", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer4.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer7.literal();
      XPathLexer xPathLexer9 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token13 = xPathLexer6.colon();
      assertEquals(18, token13.getTokenType());
      
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token14 = xPathLexer3.slashes();
      assertEquals(11, token14.getTokenType());
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer1.notEquals();
      assertEquals("Y", token16.getTokenText());
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer7.rightParen();
      assertEquals(2, token17.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.028326762115113
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      xPathLexer0.mod();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("E", token3.getTokenText());
      
      xPathLexer0.setXPath("|p+y((=wUQ]6dM@PQ");
      Token token4 = xPathLexer0.nextToken();
      assertEquals(17, token4.getTokenType());
      assertEquals("|", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("p", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("+", token6.getTokenText());
      
      xPathLexer0.setXPath("");
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.literal();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer1.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.minus();
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("`");
      Token token11 = xPathLexer4.minus();
      assertEquals("`", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer3.literal();
      assertNull(token12);
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer2.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer4.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3361701035894038
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer0.leftParen();
      xPathLexer1.not();
      xPathLexer0.setXPath("");
      xPathLexer2.nextToken();
      xPathLexer0.nextToken();
      xPathLexer1.comma();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3166837176313004
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals("\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("@", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("E7bO", token3.getTokenText());
      
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.notEquals();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      Token token8 = xPathLexer0.plus();
      assertEquals(5, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      Token token10 = xPathLexer0.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer0.notEquals();
      xPathLexer0.literal();
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token13 = xPathLexer0.pipe();
      assertEquals(17, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      Token token14 = xPathLexer0.identifierOrOperatorName();
      assertNull(token14);
      
      xPathLexer0.relationalOperator();
      xPathLexer1.div();
      Token token15 = xPathLexer0.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.0871477552153817
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.plus();
      assertEquals("l", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("2", token1.getTokenText());
      
      Token token2 = xPathLexer0.rightParen();
      assertEquals("c", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("q", token3.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      Token token5 = xPathLexer1.number();
      assertEquals(30, token5.getTokenType());
      
      xPathLexer1.or();
      Token token6 = xPathLexer1.pipe();
      assertEquals("}", token6.getTokenText());
      
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.identifier();
      assertEquals(15, token7.getTokenType());
      assertEquals("l2cqw", token7.getTokenText());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer2.slashes();
      xPathLexer1.minus();
      Token token9 = xPathLexer1.minus();
      assertEquals("@", token9.getTokenText());
      
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer1.literal();
      assertNull(token11);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("}l2cqw\"@E7bO");
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer0.colon();
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer1.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer3.slashes();
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.2482151573535885
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&95+FVLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.leftParen();
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.notEquals();
      Token token6 = xPathLexer0.not();
      assertEquals("&", token6.getTokenText());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("o2GJ-", token7.getTokenText());
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer0.literal();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.minus();
      Token token10 = xPathLexer0.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("Z&95+FVLX&o2GJ-");
      Token token12 = xPathLexer3.minus();
      assertEquals("Z", token12.getTokenText());
      
      xPathLexer2.literal();
      Token token13 = xPathLexer3.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("&", token13.getTokenText());
      
      Token token14 = xPathLexer3.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer2.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0546592563162447
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&95+FVLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      XPathLexer xPathLexer1 = new XPathLexer("Z&95+FVLX&o2GJ-");
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals(6, token3.getTokenType());
      
      Token token4 = xPathLexer1.nextToken();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (30) ()", string0);
      
      token6.toString();
      Token token9 = new Token((-2960), "{!VG;TDeVGb54", 28, 3663);
      String string1 = token6.toString();
      assertEquals("[ (-1) (&95+FVLX&o2GJ-)", string1);
      
      token4.toString();
      String string2 = token4.toString();
      assertEquals("[ (15) (Z)", string2);
      
      xPathLexer0.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("[ (15) (Z)");
      Token token10 = xPathLexer2.at();
      assertEquals("[", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      xPathLexer2.div();
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      assertEquals("&9", token11.getTokenText());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      Token token13 = xPathLexer1.plus();
      assertEquals("5", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer1.slashes();
      assertEquals(11, token14.getTokenType());
      assertEquals("+", token14.getTokenText());
      
      Token token15 = xPathLexer2.comma();
      assertEquals(" ", token15.getTokenText());
      assertEquals(32, token15.getTokenType());
      
      Token token16 = xPathLexer1.dollar();
      assertEquals(26, token16.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.1804404320316664
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.at();
      assertEquals("&", token0.getTokenText());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("#", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.number();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals("F", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.plus();
      assertEquals("D", token6.getTokenText());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer1.slashes();
      Token token10 = xPathLexer1.dollar();
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("LA1AzYcv");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.at();
      Token token11 = xPathLexer3.minus();
      assertEquals(6, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.notEquals();
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer4.div();
      Token token13 = xPathLexer1.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer2.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer0.slashes();
      assertEquals(11, token15.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token16 = xPathLexer3.equals();
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.3084416879849767
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.plus();
      String string0 = token1.toString();
      assertEquals("[ (15) (l2cqw)", string0);
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token2.getTokenText());
      
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (2) (})", string1);
      
      Token token3 = xPathLexer0.star();
      assertEquals("@", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.number();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.pipe();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("bO", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals("b", token7.getTokenText());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.identifier();
      xPathLexer1.slashes();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("}l2cqw\"@E7bO");
      XPathLexer xPathLexer4 = new XPathLexer("E]-U~u&Yc3B6EB-");
      xPathLexer3.at();
      xPathLexer2.minus();
      Token token10 = xPathLexer0.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("l", token11.getTokenText());
      
      xPathLexer3.div();
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token13 = xPathLexer5.slashes();
      assertEquals(11, token13.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("r.PmvbS7+swH'i7Uu");
      Token token14 = xPathLexer2.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.0671141209249306
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.literal();
      xPathLexer0.isIdentifierStartChar(' ');
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9897270482261282
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jriI|tqS{PB");
      xPathLexer0.nextToken();
      xPathLexer0.consume(110);
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("jriI|tqS{PB");
      Token token1 = xPathLexer1.leftParen();
      assertEquals("j", token1.getTokenText());
      
      Token token2 = xPathLexer1.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("r", token2.getTokenText());
      
      xPathLexer0.setXPath("1g=Qin(`?*.<uOr8Zq");
      Token token3 = xPathLexer1.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer0.setXPath(")");
      xPathLexer0.operatorName();
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("|", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token7 = xPathLexer2.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer0.plus();
      assertEquals(")", token8.getTokenText());
      assertEquals(5, token8.getTokenType());
      
      xPathLexer0.setXPath(")");
      xPathLexer1.div();
      Token token9 = xPathLexer1.notEquals();
      assertEquals("tq", token9.getTokenText());
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9896078405597508
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      xPathLexer0.consume(22);
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.and();
      xPathLexer0.rightBracket();
      xPathLexer1.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      Token token2 = xPathLexer2.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("}", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.leftParen();
      Token token3 = xPathLexer3.not();
      assertEquals("}", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer1.setXPath("1g=Qin(`?*.<uOr8Zq");
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer1.nextToken();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer3.comma();
      assertEquals("l", token6.getTokenText());
      assertEquals(32, token6.getTokenType());
      
      xPathLexer1.setXPath("=&tn[@oT3Mr");
      xPathLexer1.operatorName();
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("l", token7.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer3.minus();
      assertEquals("2", token8.getTokenText());
      assertEquals(6, token8.getTokenType());
      
      xPathLexer2.plus();
      xPathLexer3.setXPath("YRWcPG+}f(I[5`T");
      xPathLexer4.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer5.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer2.plus();
      assertEquals("c", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.1947852133925005
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer2.consume((-1538));
      xPathLexer0.leftParen();
      xPathLexer1.not();
      xPathLexer0.setXPath("");
      // Undeclared exception!
      try { 
        xPathLexer2.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.0510800414641643
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.consume((-1443));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.245148658278157
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.comma();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer1.leftParen();
      xPathLexer0.plus();
      xPathLexer1.literal();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer0.slashes();
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.div();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.at();
      xPathLexer0.minus();
      xPathLexer1.literal();
      xPathLexer2.plus();
      xPathLexer1.notEquals();
      xPathLexer1.or();
      xPathLexer0.minus();
      xPathLexer2.notEquals();
      xPathLexer1.minus();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2300));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.292157648349585
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer0.slashes();
      xPathLexer1.not();
      xPathLexer0.star();
      xPathLexer1.literal();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.minus();
      xPathLexer2.literal();
      xPathLexer2.plus();
      xPathLexer1.colon();
      Token token0 = xPathLexer2.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8180302716402306
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      xPathLexer2.notEquals();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer2.consume();
      xPathLexer1.at();
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer0.equals();
      assertEquals(21, token2.getTokenType());
      
      Token token3 = xPathLexer2.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer3.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer3.slashes();
      xPathLexer0.minus();
      Token token6 = xPathLexer3.minus();
      assertEquals(6, token6.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token7 = xPathLexer3.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer3.literal();
      assertNull(token8);
      
      Token token9 = xPathLexer1.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer2.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer0.leftParen();
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer2.plus();
      assertEquals(5, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token13 = xPathLexer4.notEquals();
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.3860528610162866
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&r#+FDLX&o2OJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.dollar();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("|R1!B0(6w5@~ay*");
      xPathLexer1.star();
      xPathLexer1.at();
      xPathLexer0.rightBracket();
      xPathLexer1.literal();
      xPathLexer0.colon();
      xPathLexer1.leftBracket();
      xPathLexer1.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.setXPath("|R1!B0(6w5@~ay*");
      xPathLexer0.colon();
      xPathLexer1.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("3W&");
      xPathLexer1.comma();
      xPathLexer2.mod();
      xPathLexer2.equals();
      xPathLexer0.dots();
      xPathLexer1.plus();
      xPathLexer1.notEquals();
      xPathLexer2.minus();
      xPathLexer2.rightBracket();
      Token token0 = xPathLexer0.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.061202140515335
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(3, int0);
      
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("?", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      xPathLexer0.operatorName();
      xPathLexer0.whitespace();
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("&", token5.getTokenText());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.literal();
      Token token9 = xPathLexer3.plus();
      assertEquals(5, token9.getTokenType());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.1981630643748065
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.plus();
      token0.toString();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.number();
      token1.toString();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (l2cqw)");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer2.at();
      xPathLexer1.leftBracket();
      xPathLexer1.mod();
      xPathLexer2.literal();
      xPathLexer1.plus();
      xPathLexer1.leftBracket();
      xPathLexer1.notEquals();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("}l2cqw\"@E7bO");
      XPathLexer xPathLexer4 = new XPathLexer("[ (15) (l2cqw)");
      xPathLexer4.plus();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("7z`Ejd,f");
      xPathLexer6.doubleColon();
      xPathLexer6.notEquals();
      Token token2 = xPathLexer1.or();
      assertNull(token2);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.8620658384501474
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jriI|tqS{PB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("jriI", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.consume(110);
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.3016184686221832
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("&", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("9", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("+", token4.getTokenText());
      
      xPathLexer0.nextToken();
      xPathLexer0.slashes();
      xPathLexer0.or();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals("o", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals("2G", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("J-", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer1.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token12 = xPathLexer1.identifier();
      assertEquals(15, token12.getTokenType());
      
      xPathLexer2.minus();
      Token token13 = xPathLexer2.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer0.star();
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer1.notEquals();
      assertEquals(22, token15.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("C&&>..hLY");
      Token token16 = xPathLexer1.minus();
      assertEquals(6, token16.getTokenType());
      
      xPathLexer4.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token17 = xPathLexer0.colon();
      assertEquals(18, token17.getTokenType());
      
      Token token18 = xPathLexer5.plus();
      assertEquals(5, token18.getTokenType());
      
      Token token19 = xPathLexer4.slashes();
      assertEquals("C", token19.getTokenText());
      assertEquals(11, token19.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6131851785237834
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      token0.toString();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.or();
      xPathLexer1.number();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      String string0 = "!";
      XPathLexer xPathLexer4 = new XPathLexer("!");
      xPathLexer4.or();
      xPathLexer1.pipe();
      xPathLexer3.dots();
      xPathLexer1.not();
      xPathLexer1.div();
      Token token1 = xPathLexer2.nextToken();
      xPathLexer3.endPosition();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.306628561723065
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token5 = xPathLexer0.at();
      assertEquals("L", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer1 = new XPathLexer("c'/W");
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      Token token8 = xPathLexer2.dollar();
      xPathLexer2.endPosition();
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("$'cKFk{~&0T]");
      Token token10 = xPathLexer3.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("$", token10.getTokenText());
      
      xPathLexer3.identifier();
      xPathLexer3.setPreviousToken(token8);
      assertEquals(26, token8.getTokenType());
      
      Token token11 = xPathLexer3.not();
      assertEquals(23, token11.getTokenType());
      assertEquals("'", token11.getTokenText());
      
      Token token12 = xPathLexer3.star();
      assertEquals("c", token12.getTokenText());
      assertEquals(20, token12.getTokenType());
      
      xPathLexer1.mod();
      char char0 = xPathLexer1.LA(0);
      assertEquals('c', char0);
      
      Token token13 = xPathLexer3.identifier();
      assertEquals(15, token13.getTokenType());
      assertEquals("KFk", token13.getTokenText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.084046519295218
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.dots();
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.at();
      Token token2 = xPathLexer0.at();
      assertEquals("w", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("erken.saxpath.XPathLexer", token3.getTokenText());
      
      xPathLexer0.at();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.or();
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      assertEquals("c", token7.getTokenText());
      
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer1.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("m", token9.getTokenText());
      
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer2.notEquals();
      Token token11 = xPathLexer1.literal();
      assertNull(token11);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      Token token12 = xPathLexer3.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
      
      Token token15 = xPathLexer1.dots();
      assertEquals(13, token15.getTokenType());
      
      xPathLexer1.plus();
      Token token16 = xPathLexer4.notEquals();
      assertEquals("co", token16.getTokenText());
      assertEquals(22, token16.getTokenType());
      
      Token token17 = xPathLexer2.minus();
      assertEquals(6, token17.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.240249922953055
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.endPosition();
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      Token token5 = xPathLexer0.leftParen();
      assertEquals("y", token5.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      char char0 = xPathLexer0.LA(2228);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.pipe();
      assertEquals("a", token7.getTokenText());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.consume();
      Token token9 = xPathLexer0.dollar();
      assertEquals("[", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      assertEquals("m", token10.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.literal();
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
      assertEquals("R", token11.getTokenText());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.5848490878608203
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.consume((-1261));
      xPathLexer0.getPreviousToken();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.9772143420956936
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.rightParen();
      xPathLexer0.rightBracket();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.not();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.855560780719087
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer1.relationalOperator();
      xPathLexer2.consume();
      Token token2 = xPathLexer1.notEquals();
      assertEquals("}l", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer1.at();
      assertEquals("2", token4.getTokenText());
      
      xPathLexer2.plus();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer1.dots();
      assertEquals("c", token6.getTokenText());
      assertEquals(13, token6.getTokenType());
      
      xPathLexer3.at();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      assertEquals("7", token7.getTokenText());
      
      xPathLexer1.slashes();
      xPathLexer2.minus();
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      assertEquals("w", token9.getTokenText());
      
      Token token10 = xPathLexer3.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer3.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer1.comma();
      assertEquals("\"", token12.getTokenText());
      assertEquals(32, token12.getTokenType());
      
      xPathLexer3.leftParen();
      Token token13 = xPathLexer1.slashes();
      assertEquals(11, token13.getTokenType());
      
      Token token14 = xPathLexer2.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer3.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.3563019990510057
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("co", token0.getTokenText());
      assertEquals(19, token0.getTokenType());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals("m", token1.getTokenText());
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer1.leftParen();
      Token token4 = xPathLexer0.plus();
      assertEquals("a", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertEquals("path.XPathLe", token5.getTokenText());
      assertNotNull(token5);
      assertEquals(27, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals("e", token6.getTokenText());
      assertEquals(4, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer0.identifier();
      assertEquals("r", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer2.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer2.literal();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer2.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.not();
      assertEquals(23, token12.getTokenType());
      
      Token token13 = xPathLexer2.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.12478813695621
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.hasMoreChars();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer2.or();
      Token token3 = xPathLexer2.number();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals("@E", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.not();
      xPathLexer3.div();
      Token token5 = xPathLexer3.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer2.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      xPathLexer4.literal();
      xPathLexer2.plus();
      xPathLexer4.colon();
      Token token8 = xPathLexer1.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer3.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer1.literal();
      assertNull(token10);
      
      Token token11 = xPathLexer2.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer1.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer0.at();
      assertEquals("7", token13.getTokenText());
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer1.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer2.colon();
      assertEquals(18, token15.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token16 = xPathLexer3.slashes();
      assertEquals(11, token16.getTokenType());
      
      Token token17 = xPathLexer2.plus();
      assertEquals(5, token17.getTokenType());
      
      Token token18 = xPathLexer0.notEquals();
      assertEquals(22, token18.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.203558610124489
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.literal();
      assertNull(token2);
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      Token token4 = xPathLexer0.rightParen();
      assertEquals(2, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("j(^T~1}:9{Iub 590");
      xPathLexer1.star();
      xPathLexer0.and();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer1.or();
      Token token8 = xPathLexer2.pipe();
      assertEquals("}", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("j(^T~1}:9{Iub 590");
      xPathLexer3.relationalOperator();
      xPathLexer2.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.relationalOperator();
      Token token10 = xPathLexer2.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("2", token10.getTokenText());
      
      xPathLexer2.div();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer1.doubleColon();
      assertEquals(19, token11.getTokenType());
      assertEquals("(^", token11.getTokenText());
      
      xPathLexer5.notEquals();
      xPathLexer6.dollar();
      Token token12 = xPathLexer1.nextToken();
      assertEquals("T", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token13 = xPathLexer1.rightBracket();
      assertEquals("~", token13.getTokenText());
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer7.comma();
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer6.leftParen();
      assertEquals(1, token15.getTokenType());
      
      Token token16 = xPathLexer1.dollar();
      assertEquals(26, token16.getTokenType());
      assertEquals("1", token16.getTokenText());
      
      Token token17 = xPathLexer1.minus();
      assertEquals("}", token17.getTokenText());
      assertEquals(6, token17.getTokenType());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.3215501068694104
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("+", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("&", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("o", token6.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer1.literal();
      Token token8 = xPathLexer0.identifier();
      assertEquals("J-", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token9 = xPathLexer1.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.notEquals();
      assertEquals("Z&", token10.getTokenText());
      
      Token token11 = xPathLexer2.minus();
      assertEquals("9", token11.getTokenText());
      
      Token token12 = xPathLexer2.not();
      assertEquals("#", token12.getTokenText());
      
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer("C>T.hF)");
      Token token14 = xPathLexer1.minus();
      assertEquals(6, token14.getTokenType());
      
      Token token15 = xPathLexer1.literal();
      assertNull(token15);
      
      Token token16 = xPathLexer0.plus();
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer3.leftBracket();
      assertEquals(3, token17.getTokenType());
      
      Token token18 = xPathLexer1.notEquals();
      assertEquals(22, token18.getTokenType());
      
      int int0 = xPathLexer2.currentPosition();
      assertEquals(4, int0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.9662472775735145
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("~", token1.getTokenText());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(",", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token4 = xPathLexer0.minus();
      assertEquals("/", token4.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("0", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer0.setXPath("|~z,qKs/0at?|/");
      XPathLexer xPathLexer1 = new XPathLexer("/??@,");
      Token token6 = xPathLexer1.nextToken();
      assertEquals("/", token6.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.comma();
      xPathLexer1.setXPath("|~z,qKs/0at?|/");
      xPathLexer2.colon();
      xPathLexer1.comma();
      Token token8 = xPathLexer1.comma();
      assertEquals(32, token8.getTokenType());
      assertEquals("~", token8.getTokenText());
      
      Token token9 = xPathLexer1.identifier();
      assertEquals("z", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer2.literal();
      assertNull(token12);
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("Qx?72h/");
      Token token13 = xPathLexer3.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer2.colon();
      assertEquals(18, token14.getTokenType());
      
      Token token15 = xPathLexer1.plus();
      assertEquals("K", token15.getTokenText());
      
      Token token16 = xPathLexer2.slashes();
      assertEquals(11, token16.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("P0mdXtg~.#.)rko%Jyp");
      XPathLexer xPathLexer6 = new XPathLexer("P0mdXtg~.#.)rko%Jyp");
      Token token17 = xPathLexer6.equals();
      assertEquals(21, token17.getTokenType());
      assertEquals("P", token17.getTokenText());
      
      Token token18 = xPathLexer0.star();
      assertEquals("|", token18.getTokenText());
      assertEquals(20, token18.getTokenType());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.198188716784653
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.plus();
      String string0 = token0.toString();
      assertEquals("[ (15) (l2cqw)", string0);
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.star();
      assertEquals(20, token1.getTokenType());
      
      xPathLexer0.doubleColon();
      Token token2 = xPathLexer0.number();
      String string1 = token2.toString();
      assertEquals("[ (30) ()", string1);
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("b", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (l2cqw)");
      xPathLexer1.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      Token token4 = xPathLexer1.nextToken();
      assertEquals("(", token4.getTokenText());
      
      xPathLexer1.doubleColon();
      Token token5 = xPathLexer2.at();
      assertEquals("}", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      xPathLexer1.mod();
      Token token6 = xPathLexer2.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer1.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      xPathLexer1.notEquals();
      Token token8 = xPathLexer1.nextToken();
      assertEquals("l2cqw", token8.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("}l2cqw\"@E7bO");
      XPathLexer xPathLexer4 = new XPathLexer("[ (15) (l2cqw)");
      Token token9 = xPathLexer4.plus();
      assertEquals(5, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("7z`Ejd,f");
      Token token10 = xPathLexer6.doubleColon();
      assertEquals("7z", token10.getTokenText());
      assertEquals(19, token10.getTokenType());
      
      Token token11 = xPathLexer6.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer1.or();
      Token token12 = xPathLexer3.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("}", token12.getTokenText());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.151640175854477
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.number();
      xPathLexer1.or();
      xPathLexer1.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer2.dollar();
      xPathLexer2.slashes();
      xPathLexer1.minus();
      xPathLexer1.minus();
      xPathLexer0.pipe();
      xPathLexer1.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      xPathLexer3.comma();
      xPathLexer2.leftParen();
      xPathLexer2.literal();
      xPathLexer3.plus();
      xPathLexer3.notEquals();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.6746744749873133
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      Token token0 = xPathLexer0.dots();
      assertEquals(13, token0.getTokenType());
      
      xPathLexer0.rightParen();
      xPathLexer0.and();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.colon();
      Token token2 = xPathLexer1.pipe();
      assertEquals("}", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.literal();
      xPathLexer3.equals();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer3.slashes();
      Token token4 = xPathLexer3.equals();
      assertEquals(21, token4.getTokenType());
      
      Token token5 = xPathLexer1.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("l", token5.getTokenText());
      
      xPathLexer2.plus();
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer4 = new XPathLexer("}l2cqw\"@E7bO");
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer2.slashes();
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer5.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer2.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.5929424219618684
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.identifier();
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("&", token2.getTokenText());
      
      token1.toString();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.star();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token5 = xPathLexer1.doubleColon();
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.number();
      token0.toString();
      xPathLexer0.mod();
      Token token7 = xPathLexer1.at();
      token1.toString();
      String string0 = token3.toString();
      assertEquals("[ (15) (9)", string0);
      
      String string1 = token0.toString();
      assertEquals("[ (2) (Z)", string1);
      
      Token token8 = new Token(122, "[ (15) ()", (-463), (-2163));
      String string2 = token6.toString();
      assertEquals("[ (30) ()", string2);
      
      String string3 = token4.toString();
      assertEquals("[ (20) (#)", string3);
      
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      xPathLexer1.setPreviousToken(token7);
      assertEquals(16, token7.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer1.identifier();
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.2088866495597728
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("wayd.e/V$$y}16@l");
      xPathLexer1.nextToken();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer1.mod();
      Token token11 = xPathLexer0.not();
      assertEquals(23, token11.getTokenType());
      
      xPathLexer0.identifier();
      Token token12 = xPathLexer1.plus();
      assertEquals("/", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer1.dots();
      assertEquals("V", token13.getTokenText());
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer1.notEquals();
      assertEquals("$$", token15.getTokenText());
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer0.slashes();
      assertEquals(11, token16.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar('D');
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token17 = xPathLexer2.pipe();
      assertEquals(17, token17.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.280240064792237
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.star();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token0.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (q)", string0);
      
      Token token2 = xPathLexer0.comma();
      assertEquals("`", token2.getTokenText());
      assertEquals(32, token2.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      token0.toString();
      token0.toString();
      Token token4 = new Token(4, "}-Z eVpiy=lMfbD3", 4, (-140));
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (21) (K)", string1);
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("2j", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.operatorName();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token6.getTokenType());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.025975159149993
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("bO", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.at();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.at();
      Token token5 = xPathLexer0.plus();
      assertEquals(5, token5.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.equals();
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer1.dots();
      assertEquals(13, token7.getTokenType());
      
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer0.operatorName();
      Token token9 = xPathLexer1.slashes();
      assertEquals(11, token9.getTokenType());
      
      Token token10 = xPathLexer1.colon();
      assertEquals(18, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      Token token11 = xPathLexer2.doubleColon();
      assertEquals("}l", token11.getTokenText());
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer3.at();
      assertEquals("c", token12.getTokenText());
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer1.literal();
      assertNull(token14);
      
      Token token15 = xPathLexer1.not();
      assertEquals(23, token15.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.5235680144078203
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('D');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.isIdentifierChar('\"');
      xPathLexer0.getPreviousToken();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.mod();
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.6281566005404695
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.identifier();
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.plus();
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token10 = xPathLexer5.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer2.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token13 = xPathLexer6.notEquals();
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.771347915372126
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G7isX6ql7");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifier();
      assertEquals("G7isX6ql7", token0.getTokenText());
      assertEquals(15, token0.getTokenType());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.319943047432483
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      token1.toString();
      Token token2 = new Token(96, "rC!u", 1267, (-180));
      xPathLexer0.plus();
      Token token3 = xPathLexer0.slashes();
      token3.toString();
      token0.toString();
      token3.toString();
      Token token4 = new Token(1267, "[ (11) (c)", (-180), 96);
      xPathLexer0.dollar();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer(".Wv/IgkWK\"Sd");
      xPathLexer0.identifier();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.doubleColon();
      xPathLexer2.at();
      xPathLexer0.leftBracket();
      xPathLexer0.plus();
      Token token5 = xPathLexer1.relationalOperator();
      assertNull(token5);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.8564457414101267
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.at();
      token0.toString();
      token1.toString();
      Token token3 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token3.toString();
      token3.toString();
      token3.toString();
      token2.toString();
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.947211228926561
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.consume(861);
      xPathLexer0.colon();
      xPathLexer0.literal();
      Token token2 = xPathLexer0.dots();
      assertEquals(14, token2.getTokenType());
      assertEquals("n.", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.rightBracket();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token3.getTokenType());
      assertEquals("saxpath.XPathLexer", token3.getTokenText());
      
      Token token4 = xPathLexer1.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer2.at();
      assertEquals("o", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer2.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer2.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals(".", token9.getTokenText());
      
      Token token10 = xPathLexer2.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token12 = xPathLexer2.minus();
      assertEquals(6, token12.getTokenType());
      assertEquals("n", token12.getTokenText());
      
      Token token13 = xPathLexer2.literal();
      assertEquals("saxpath", token13.getTokenText());
      
      Token token14 = xPathLexer3.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer0.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.3752689005310148
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!3~BMA]E$hTHM%");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("!", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      Token token1 = xPathLexer1.leftBracket();
      assertEquals("!", token1.getTokenText());
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("3", token2.getTokenText());
      
      Token token3 = xPathLexer1.nextToken();
      assertEquals(30, token3.getTokenType());
      assertEquals("3", token3.getTokenText());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("~", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("~", token5.getTokenText());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.080826873260669
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("!3~BMA]E$hTHM%");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("!", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      XPathLexer xPathLexer3 = new XPathLexer("EsiH");
      Token token3 = xPathLexer2.literal();
      assertNull(token3);
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token4 = xPathLexer1.minus();
      assertEquals("!", token4.getTokenText());
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer4.slashes();
      assertEquals(11, token6.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.014120043861982
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.leftParen();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.1946064601527713
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token2.getTokenText());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.slashes();
      assertEquals("#", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("FD", token6.getTokenText());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      xPathLexer1.literal();
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer1.identifier();
      assertEquals(15, token9.getTokenType());
      
      xPathLexer2.minus();
      xPathLexer2.not();
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("L", token10.getTokenText());
      
      xPathLexer1.notEquals();
      XPathLexer xPathLexer3 = new XPathLexer(")");
      xPathLexer2.at();
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      
      xPathLexer0.notEquals();
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer0.div();
      xPathLexer3.notEquals();
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer3.slashes();
      assertEquals(11, token14.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("-)^RAa~to>=>JH6R.");
      Token token15 = xPathLexer4.equals();
      assertEquals("-", token15.getTokenText());
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer0.not();
      assertEquals("o", token16.getTokenText());
      assertEquals(23, token16.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.0759880718620063
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.dollar();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.leftBracket();
      xPathLexer0.getXPath();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.literal();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.slashes();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.equals();
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      xPathLexer3.literal();
      XPathLexer xPathLexer4 = new XPathLexer("LR.EIL6&W^");
      xPathLexer2.colon();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer3.plus();
      xPathLexer3.notEquals();
      Token token1 = xPathLexer2.rightParen();
      assertNotSame(token1, token0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.8464789271773139
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.plus();
      assertEquals("\"", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.leftParen();
      assertEquals("@", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("E", token2.getTokenText());
      
      Token token3 = xPathLexer0.rightParen();
      assertEquals("7", token3.getTokenText());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      assertEquals("bO", token4.getTokenText());
      
      xPathLexer0.at();
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.colon();
      Token token6 = xPathLexer1.pipe();
      assertEquals("}", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer2.rightParen();
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      xPathLexer3.getXPath();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer4.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer4.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("l", token12.getTokenText());
      
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("{5val&e Z$Wqw");
      Token token14 = xPathLexer5.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer2.notEquals();
      assertEquals(22, token15.getTokenType());
      
      Token token16 = xPathLexer2.minus();
      assertEquals(6, token16.getTokenType());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.5239594316942306
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      String string0 = token1.toString();
      assertEquals("[ (20) (q)", string0);
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token2);
      
      String string1 = token2.toString();
      assertEquals("[ (15) ()", string1);
      
      xPathLexer0.setPreviousToken(token2);
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      Token token3 = xPathLexer0.not();
      xPathLexer0.setPreviousToken(token1);
      token3.toString();
      XPathLexer xPathLexer1 = new XPathLexer("[ (20) (q)");
      Token token4 = new Token(46, "[ (20) (q)", 107, 46);
      String string2 = token3.toString();
      assertEquals("[ (23) (`)", string2);
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      assertEquals(",", token5.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.operatorName();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token7 = xPathLexer4.plus();
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("p?[Ay ");
      Token token8 = xPathLexer5.slashes();
      assertEquals("p", token8.getTokenText());
      assertEquals(11, token8.getTokenType());
      
      Token token9 = xPathLexer4.dollar();
      assertEquals(26, token9.getTokenType());
      
      xPathLexer0.or();
      char char0 = xPathLexer0.LA(884);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.162504450505275
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.pipe();
      xPathLexer0.and();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.number();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      
      xPathLexer0.colon();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      
      xPathLexer0.minus();
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.9821600319657653
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(")", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      assertEquals(" ", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("(", token2.getTokenText());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.287786886951305
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("#", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("LX&o2GJ-", token7.getTokenText());
      
      Token token8 = xPathLexer0.star();
      assertEquals("L", token8.getTokenText());
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      xPathLexer0.equals();
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.slashes();
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer0.dollar();
      assertEquals(26, token14.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('*');
      Token token15 = xPathLexer1.slashes();
      assertEquals(11, token15.getTokenType());
      assertEquals("&", token15.getTokenText());
      
      Token token16 = xPathLexer0.plus();
      assertEquals(5, token16.getTokenType());
      
      Token token17 = xPathLexer0.equals();
      assertEquals(21, token17.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.4948935155004683
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals(16, token5.getTokenType());
      assertEquals("@", token5.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      Token token6 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token6.toString();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("E", token7.getTokenText());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      assertEquals("7", token8.getTokenText());
      
      Token token9 = xPathLexer0.minus();
      assertEquals("b", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals("O", token10.getTokenText());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('P');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-2381));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.1516424439682003
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.at();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.number();
      xPathLexer1.or();
      xPathLexer1.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.identifier();
      xPathLexer2.dollar();
      xPathLexer2.slashes();
      xPathLexer1.minus();
      xPathLexer1.minus();
      xPathLexer0.pipe();
      xPathLexer1.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightBracket();
      xPathLexer3.comma();
      xPathLexer2.leftParen();
      xPathLexer2.literal();
      xPathLexer3.plus();
      xPathLexer3.notEquals();
      Token token0 = xPathLexer2.or();
      assertNull(token0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=3.3531540595300675
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.rightParen();
      assertEquals("(", token0.getTokenText());
      
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.or();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.plus();
      xPathLexer0.literal();
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      xPathLexer0.slashes();
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer0.at();
      Token token10 = xPathLexer3.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer2.notEquals();
      assertEquals(") ", token11.getTokenText());
      
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer0.div();
      Token token13 = xPathLexer3.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer1.plus();
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer0.slashes();
      assertEquals(11, token15.getTokenType());
      
      Token token16 = xPathLexer2.equals();
      assertEquals("(", token16.getTokenText());
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.5467016669111289
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      xPathLexer0.dots();
      token0.toString();
      xPathLexer0.at();
      Token token1 = xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.identifier();
      token2.toString();
      xPathLexer0.mod();
      xPathLexer0.at();
      token1.toString();
      token0.toString();
      Token token3 = new Token(4, "[ (23) (9)", (-226), 4);
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.647826624623992
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.288288042040105
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.star();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (q)", string0);
      
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      token0.toString();
      token0.toString();
      Token token4 = new Token(4, "}-Z eVpiy=lMfbD3", 4, (-140));
      token0.toString();
      String string1 = token0.toString();
      assertEquals("[ (21) (K)", string1);
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("2j", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.identifier();
      assertEquals("T", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.identifierOrOperatorName();
      assertNotNull(token7);
      assertEquals(15, token7.getTokenType());
  }
}
