/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 12:07:47 GMT 2020
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.6680107838530718
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.consume((-3219));
      xPathLexer0.consume();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.784047933031249
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r/uoJ-ob<");
      Token token0 = xPathLexer0.plus();
      assertEquals(5, token0.getTokenType());
      assertEquals("=", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer1.nextToken();
      xPathLexer0.comma();
      xPathLexer0.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("<Y:5YQ;>Rfd");
      xPathLexer0.setPreviousToken(token2);
      Token token3 = xPathLexer1.notEquals();
      assertEquals(22, token3.getTokenType());
      assertEquals("/u", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer2.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("<", token4.getTokenText());
      
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      assertEquals("<", token5.getTokenText());
      
      xPathLexer2.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.Token");
      Token token6 = xPathLexer1.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("oJ", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.operatorName();
      xPathLexer2.pipe();
      XPathLexer xPathLexer6 = new XPathLexer("I");
      Token token7 = xPathLexer6.equals();
      assertEquals("I", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("5", token8.getTokenText());
      
      Token token9 = xPathLexer3.literal();
      assertNull(token9);
      
      Token token10 = xPathLexer0.number();
      assertEquals(30, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.or();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      xPathLexer4.relationalOperator();
      Token token12 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3792854467105156
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.whitespace();
      token0.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      Token token2 = xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (c)");
      xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer1.notEquals();
      xPathLexer1.comma();
      xPathLexer1.nextToken();
      xPathLexer1.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer1.pipe();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.rightBracket();
      xPathLexer2.relationalOperator();
      Token token3 = xPathLexer2.mod();
      assertNull(token3);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5241124171787095
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.dots();
      token1.toString();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("[ (13) (o)");
      xPathLexer0.doubleColon();
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.dots();
      xPathLexer0.comma();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.comma();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.minus();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      assertNull(token2);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5681996574116388
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("KyU~faBpw");
      xPathLexer1.or();
      xPathLexer0.or();
      xPathLexer1.pipe();
      xPathLexer1.not();
      xPathLexer1.div();
      xPathLexer0.number();
      XPathLexer xPathLexer2 = new XPathLexer("KyU~faBpw");
      xPathLexer2.colon();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.or();
      xPathLexer0.not();
      XPathLexer xPathLexer3 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.dots();
      xPathLexer3.consume();
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer3.notEquals();
      xPathLexer2.nextToken();
      xPathLexer1.slashes();
      xPathLexer2.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer2.doubleColon();
      XPathLexer xPathLexer5 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.relationalOperator();
      xPathLexer2.doubleColon();
      int int0 = xPathLexer3.currentPosition();
      assertEquals(3, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.753768556520388
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.identifier();
      Token token5 = xPathLexer0.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      Token token10 = xPathLexer0.colon();
      assertEquals("L", token10.getTokenText());
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.dots();
      assertEquals(14, token11.getTokenType());
      assertEquals("R.", token11.getTokenText());
      
      Token token12 = xPathLexer0.nextToken();
      assertEquals("EIL6&W^", token12.getTokenText());
      
      xPathLexer0.getXPath();
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token14 = xPathLexer1.notEquals();
      assertEquals(22, token14.getTokenType());
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
      assertEquals("I", token15.getTokenText());
      
      Token token16 = xPathLexer0.equals();
      assertEquals("L", token16.getTokenText());
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.886165178199426
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.colon();
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (q)");
      xPathLexer2.dollar();
      xPathLexer0.literal();
      xPathLexer1.consume((-108));
      XPathLexer xPathLexer3 = new XPathLexer("[ (20) (q)");
      xPathLexer1.minus();
      // Undeclared exception!
      try { 
        xPathLexer1.identifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8354711462548312
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token1 = xPathLexer0.whitespace();
      Token token2 = xPathLexer0.leftParen();
      token0.toString();
      token2.toString();
      XPathLexer xPathLexer1 = new XPathLexer(";VjJcL9BMPKcy");
      xPathLexer1.nextToken();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.notEquals();
      xPathLexer1.comma();
      xPathLexer0.star();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.doubleColon();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer(";VjJcL9BMPKcy");
      xPathLexer3.pipe();
      xPathLexer1.equals();
      xPathLexer1.not();
      xPathLexer3.nextToken();
      xPathLexer1.number();
      xPathLexer3.or();
      xPathLexer0.rightBracket();
      Token token3 = xPathLexer3.relationalOperator();
      assertNull(token3);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.174271742730392
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kR5\f3OBJBg=$h#");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.pipe();
      token1.toString();
      Token token2 = xPathLexer0.star();
      token2.toString();
      token2.toString();
      token1.toString();
      Token token3 = xPathLexer0.not();
      assertEquals("\f", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("3", token4.getTokenText());
      
      token1.toString();
      String string0 = token2.toString();
      assertEquals("[ (20) (5)", string0);
      
      token1.toString();
      Token token5 = xPathLexer0.plus();
      String string1 = token5.toString();
      assertEquals("[ (5) (O)", string1);
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("BJ", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      assertEquals("k", token0.getTokenText());
      assertEquals(21, token0.getTokenType());
      
      xPathLexer0.operatorName();
      String string2 = token1.toString();
      assertEquals("[ (17) (R)", string2);
      
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      Token token7 = xPathLexer0.comma();
      assertEquals("=", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("Hlk#J0>^");
      xPathLexer1.colon();
      xPathLexer1.pipe();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.or();
      xPathLexer2.at();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("#J", token9.getTokenText());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      assertEquals("$", token10.getTokenText());
      
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.46238052444022
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kR5\f3OBJBg=$h#");
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (\f)", string0);
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.notEquals();
      assertEquals("OB", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("Bg", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("=$", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.equals();
      assertEquals("#", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      Token token9 = xPathLexer0.plus();
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.6776307027914865
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.comma();
      xPathLexer0.setXPath("-{>k`)JOx{ijf8c>XN");
      Token token1 = xPathLexer0.comma();
      assertEquals("-", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("{", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("k", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("`", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.setXPath("-{>k`)JOx{ijf8c>XN");
      Token token5 = xPathLexer0.star();
      assertEquals("-", token5.getTokenText());
      assertEquals(20, token5.getTokenType());
      
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      Token token6 = xPathLexer0.relationalOperator();
      assertEquals(9, token6.getTokenType());
      assertEquals(">", token6.getTokenText());
      
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      xPathLexer1.identifier();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer1.or();
      xPathLexer0.or();
      Token token8 = xPathLexer0.slashes();
      assertEquals(11, token8.getTokenType());
      assertEquals("`", token8.getTokenText());
      
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.5466588543773971
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("?aC>)$6p_z.P]");
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.leftParen();
      xPathLexer2.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.setXPath("O63.C;:dVSBKQ_0");
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer2.nextToken();
      xPathLexer5.nextToken();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer5.literal();
      xPathLexer7.comma();
      xPathLexer7.setXPath("l");
      xPathLexer2.colon();
      xPathLexer6.dots();
      xPathLexer7.minus();
      xPathLexer0.dollar();
      xPathLexer5.slashes();
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.at();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.setXPath("");
      xPathLexer2.leftBracket();
      Token token0 = xPathLexer3.and();
      assertNull(token0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.346267336653859
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      xPathLexer0.literal();
      xPathLexer0.pipe();
      xPathLexer0.hasMoreChars();
      xPathLexer0.div();
      xPathLexer0.at();
      Token token1 = xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.colon();
      token1.toString();
      xPathLexer1.star();
      token0.toString();
      Token token3 = new Token(2, "pFA}DYu&:aB_;%", (-1), (-226));
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6010928465430836
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.dots();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token2 = xPathLexer0.plus();
      assertEquals("D", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("KyU~faBpw");
      xPathLexer1.or();
      xPathLexer0.or();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("KyU~faBpw");
      Token token6 = xPathLexer2.colon();
      assertEquals("K", token6.getTokenText());
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.or();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("KyU~faBpw");
      Token token8 = xPathLexer2.dots();
      assertEquals("y", token8.getTokenText());
      
      xPathLexer1.consume();
      Token token9 = xPathLexer2.number();
      assertEquals("", token9.getTokenText());
      assertEquals(30, token9.getTokenType());
      
      xPathLexer1.div();
      Token token10 = xPathLexer3.notEquals();
      assertEquals("Ky", token10.getTokenText());
      
      Token token11 = xPathLexer2.nextToken();
      assertEquals("U", token11.getTokenText());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals("U", token12.getTokenText());
      assertEquals(11, token12.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token13 = xPathLexer4.doubleColon();
      assertEquals(19, token13.getTokenType());
      assertEquals("Z&", token13.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("KyU~faBpw");
      xPathLexer5.relationalOperator();
      xPathLexer1.identifier();
      Token token14 = xPathLexer4.leftParen();
      assertEquals("9", token14.getTokenText());
      assertEquals(1, token14.getTokenType());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8260624991604173
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.whitespace();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.getXPath();
      xPathLexer0.nextToken();
      xPathLexer1.comma();
      xPathLexer0.setXPath("LR.EIL6&W^");
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.colon();
      xPathLexer1.rightParen();
      xPathLexer0.nextToken();
      xPathLexer1.getXPath();
      xPathLexer2.minus();
      XPathLexer xPathLexer3 = new XPathLexer("[H1B8a{Mg\"u4/V-");
      xPathLexer2.pipe();
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.622241800050465
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kR5\f3OBJBg=$h#");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (R)", string0);
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("5", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.notEquals();
      assertEquals("\f3", token2.getTokenText());
      assertEquals(22, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("O", token3.getTokenText());
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      assertEquals("B", token4.getTokenText());
      
      xPathLexer0.nextToken();
      Token token5 = xPathLexer0.doubleColon();
      assertEquals("=$", token5.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.equals();
      assertEquals("#", token6.getTokenText());
      assertEquals(21, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.number();
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      Token token10 = xPathLexer0.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.identifier();
      assertEquals(15, token11.getTokenType());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5318199588254509
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.equals();
      xPathLexer0.comma();
      xPathLexer0.setXPath("-{>k`)JOx{ijf8c>XN");
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("-{>k`)JOx{ijf8c>XN");
      xPathLexer0.star();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("-{>k`)JOx{ijf8c>XN");
      xPathLexer1.minus();
      xPathLexer2.plus();
      xPathLexer2.setXPath("-{>k`)JOx{ijf8c>XN");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7359939206567003
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer0.endPosition();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.setXPath(" C8?501.bl");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("LR.EL6&W^");
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.identifier();
      xPathLexer0.colon();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.at();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath(" C8?501.bl");
      xPathLexer2.leftBracket();
      xPathLexer2.and();
      xPathLexer0.whitespace();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.7441261644609344
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.mod();
      xPathLexer0.consume((-3219));
      xPathLexer0.consume();
      xPathLexer0.consume();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5997873210018632
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      xPathLexer0.comma();
      xPathLexer0.setXPath("-{>k`)JOx{ijf8c>XN");
      Token token4 = xPathLexer0.comma();
      assertEquals("-", token4.getTokenText());
      
      Token token5 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals("{>k`)JOx{ijf8c>XN", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.setXPath("");
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer0.dots();
      assertEquals(13, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer1.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token13 = xPathLexer3.at();
      assertEquals(16, token13.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.mod();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.setXPath("");
      xPathLexer4.leftBracket();
      xPathLexer0.and();
      Token token14 = xPathLexer2.leftBracket();
      assertEquals(3, token14.getTokenType());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.637295369926891
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      xPathLexer0.consume((-1));
      xPathLexer0.consume((-1));
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.and();
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer0.setXPath("y]jad[mR3w=N");
      Token token7 = xPathLexer0.leftParen();
      assertEquals("y", token7.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("]", token8.getTokenText());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer0.minus();
      assertEquals("a", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("d", token10.getTokenText());
      
      Token token11 = xPathLexer0.equals();
      assertEquals("[", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      
      Token token14 = xPathLexer0.doubleColon();
      assertEquals("w=", token14.getTokenText());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5486057515045852
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals("9", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(5, token5.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      Token token6 = xPathLexer0.leftParen();
      assertEquals("L", token6.getTokenText());
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer("KyU~faBpw");
      xPathLexer1.or();
      xPathLexer0.setXPath("KyU~faBpw");
      Token token7 = xPathLexer1.nextToken();
      assertEquals("KyU", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer0.plus();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer3.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer2.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer1.minus();
      assertEquals(6, token11.getTokenType());
      assertEquals("~", token11.getTokenText());
      
      Token token12 = xPathLexer1.dollar();
      assertEquals(26, token12.getTokenType());
      assertEquals("f", token12.getTokenText());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals("y", token13.getTokenText());
      assertEquals(11, token13.getTokenType());
      
      Token token14 = xPathLexer3.at();
      assertEquals(16, token14.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer4.setXPath("KyU~faBpw");
      Token token15 = xPathLexer2.leftBracket();
      assertEquals(3, token15.getTokenType());
      
      xPathLexer0.and();
      Token token16 = xPathLexer1.doubleColon();
      assertEquals("aB", token16.getTokenText());
      assertEquals(19, token16.getTokenType());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.7638793723796922
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.operatorName();
      xPathLexer0.star();
      xPathLexer0.pipe();
      xPathLexer0.notEquals();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.equals();
      xPathLexer0.comma();
      xPathLexer0.setXPath("-{>k`)JOx{ijf8c>XN");
      xPathLexer0.comma();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.rightParen();
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("-{>k`)JOx{ijf8c>XN");
      xPathLexer0.star();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer("-{>k`)JOx{ijf8c>XN");
      xPathLexer1.minus();
      xPathLexer2.plus();
      xPathLexer2.setXPath("-{>k`)JOx{ijf8c>XN");
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.577206737058919
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.not();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(5, token3.getTokenType());
      assertEquals("+", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token4 = xPathLexer1.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer1.or();
      xPathLexer1.pipe();
      Token token5 = xPathLexer0.not();
      assertEquals("F", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      xPathLexer1.nextToken();
      Token token6 = xPathLexer1.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer1.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.colon();
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer("Q");
      Token token10 = xPathLexer2.nextToken();
      assertEquals("Q", token10.getTokenText());
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      xPathLexer2.setXPath("LR.EIL6&W^");
      Token token12 = xPathLexer1.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer0.nextToken();
      assertEquals((-1), token14.getTokenType());
      
      xPathLexer1.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer3 = new XPathLexer("I;3e>.i_!J0gYko");
      Token token15 = xPathLexer2.pipe();
      assertEquals(17, token15.getTokenType());
      assertEquals("L", token15.getTokenText());
      
      boolean boolean0 = xPathLexer1.hasMoreChars();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.6101569728586214
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("!3~BMA]E$hTHM%");
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.setXPath("");
      Token token0 = xPathLexer1.nextToken();
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer1.nextToken();
      assertEquals(30, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.comma();
      assertEquals("~", token2.getTokenText());
      
      xPathLexer0.setXPath("");
      Token token3 = xPathLexer1.colon();
      assertEquals("B", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer1.dots();
      assertEquals("M", token4.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer3.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer2.at();
      assertEquals(16, token8.getTokenType());
      
      xPathLexer2.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer3.notEquals();
      assertEquals(22, token12.getTokenType());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7996770459939924
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.minus();
      xPathLexer0.identifier();
      XPathLexer xPathLexer2 = new XPathLexer("}Z4#Cv,Z=c>QS?;^");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer1.plus();
      xPathLexer3.doubleColon();
      xPathLexer1.at();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer3.colon();
      xPathLexer2.or();
      xPathLexer0.slashes();
      xPathLexer0.equals();
      int int0 = xPathLexer2.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.2097641535825026
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (q)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token2 = xPathLexer1.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (q)");
      XPathLexer xPathLexer3 = new XPathLexer("[ (20) (q)");
      Token token3 = xPathLexer3.leftParen();
      assertEquals("[", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer1.or();
      Token token4 = xPathLexer3.pipe();
      assertEquals(" ", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer3.not();
      xPathLexer0.div();
      Token token6 = xPathLexer3.number();
      assertEquals("20", token6.getTokenText());
      
      xPathLexer1.setPreviousToken(token5);
      assertEquals("(", token5.getTokenText());
      
      xPathLexer0.or();
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token8 = xPathLexer4.dots();
      assertEquals(13, token8.getTokenType());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token9 = xPathLexer1.number();
      assertEquals(30, token9.getTokenType());
      
      xPathLexer3.div();
      Token token10 = xPathLexer5.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer4.nextToken();
      Token token11 = xPathLexer1.slashes();
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4145155255231914
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("|", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      assertEquals("z", token3.getTokenText());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(",", token4.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.number();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      Token token5 = xPathLexer1.not();
      assertEquals(23, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.relationalOperator();
      xPathLexer0.consume();
      xPathLexer0.setXPath("|~z,qKs/0at?|/");
      Token token6 = xPathLexer0.nextToken();
      assertEquals(17, token6.getTokenType());
      assertEquals("|", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer1.setXPath("|~z,qKs/0at?|/");
      xPathLexer1.operatorName();
      xPathLexer0.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer2.comma();
      assertEquals(32, token8.getTokenType());
      
      xPathLexer1.setXPath("|~z,qKs/0at?|/");
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.colon();
      assertEquals(18, token9.getTokenType());
      assertEquals("z", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer1.minus();
      assertEquals("|", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer4.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer3.plus();
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer5.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      Token token14 = xPathLexer5.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.1663640994582787
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      Token token1 = xPathLexer0.whitespace();
      token0.toString();
      token0.toString();
      token1.toString();
      Token token2 = new Token(4, "NexTt", 96, 4);
      Token token3 = xPathLexer0.not();
      token3.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.operatorName();
      token1.toString();
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("[ (-2) ()");
      xPathLexer1.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.colon();
      xPathLexer1.or();
      xPathLexer0.doubleColon();
      xPathLexer1.at();
      xPathLexer1.identifier();
      Token token4 = xPathLexer0.and();
      assertNull(token4);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.526339793305279
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals("m", token2.getTokenText());
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals("werken.saxpath.XPathLexer", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer1.or();
      xPathLexer1.pipe();
      xPathLexer1.setXPath("com.werken.saxpath.Token");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("P");
      Token token6 = xPathLexer2.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer0.setXPath("P");
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token9 = xPathLexer3.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      xPathLexer1.plus();
      xPathLexer2.setXPath("u {a2jEq5<qk3");
      xPathLexer0.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token11 = xPathLexer1.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer2.plus();
      assertEquals(5, token12.getTokenType());
      assertEquals("u", token12.getTokenText());
      
      Token token13 = xPathLexer2.equals();
      assertEquals(" ", token13.getTokenText());
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer4.slashes();
      assertEquals("c", token14.getTokenText());
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.71788568402576
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("=r/uoJ-ob<");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer1.plus();
      assertEquals("=", token1.getTokenText());
      
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer2.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("=r/uoJ-ob<");
      Token token2 = xPathLexer1.nextToken();
      assertEquals("/", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer0.comma();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.operatorName();
      Token token3 = xPathLexer1.identifierOrOperatorName();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer4.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer2.colon();
      assertEquals("=", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer2.nextToken();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer2.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.setPreviousToken(token3);
      assertEquals("uoJ-ob", token3.getTokenText());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      
      Token token9 = xPathLexer4.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer6.getPreviousToken();
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.comma();
      Token token10 = xPathLexer3.equals();
      assertEquals("=", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer6.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals(5, token12.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.422880559029869
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("yWsTh");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("y", token0.getTokenText());
      
      xPathLexer0.dots();
      xPathLexer0.number();
      Token token1 = xPathLexer0.not();
      assertEquals("s", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("Th", token2.getTokenText());
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.or();
      Token token4 = xPathLexer0.pipe();
      assertEquals(17, token4.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.number();
      Token token5 = xPathLexer0.at();
      xPathLexer0.setPreviousToken(token5);
      assertEquals(16, token5.getTokenType());
      
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token6 = xPathLexer1.not();
      assertEquals(23, token6.getTokenType());
      
      xPathLexer1.dots();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.number();
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      
      Token token9 = xPathLexer1.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("yWsTh");
      Token token10 = xPathLexer3.slashes();
      assertEquals(11, token10.getTokenType());
      assertEquals("y", token10.getTokenText());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7527049777865071
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("+", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("F", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals("D", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals("X", token7.getTokenText());
      
      xPathLexer0.setXPath("m%ZrB05I|F%`Z");
      xPathLexer1.or();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.comma();
      assertEquals("%", token8.getTokenText());
      
      xPathLexer0.setXPath("");
      xPathLexer1.operatorName();
      Token token9 = xPathLexer1.whitespace();
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("m%ZrB05I|F%`Z");
      Token token11 = xPathLexer1.dollar();
      assertEquals(26, token11.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("E{b");
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      
      Token token13 = xPathLexer2.minus();
      assertEquals("m", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("*yx)S_+tGVE=Ywd");
      Token token14 = xPathLexer3.doubleColon();
      assertEquals(19, token14.getTokenType());
      assertEquals("{b", token14.getTokenText());
      
      Token token15 = xPathLexer3.at();
      assertEquals(16, token15.getTokenType());
      
      Token token16 = xPathLexer2.leftBracket();
      assertEquals("%", token16.getTokenText());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.2280718369211225
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      Token token0 = xPathLexer0.equals();
      assertEquals("K", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      token1.toString();
      Token token2 = xPathLexer0.dollar();
      assertEquals(26, token2.getTokenType());
      assertEquals("`", token2.getTokenText());
      
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (20) (q)", string0);
      
      Token token3 = xPathLexer0.not();
      assertEquals(",", token3.getTokenText());
      assertEquals(23, token3.getTokenType());
      
      xPathLexer0.setPreviousToken(token1);
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      assertEquals("2j", token4.getTokenText());
      
      xPathLexer0.setXPath("");
      xPathLexer0.number();
      xPathLexer0.literal();
      xPathLexer0.number();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.identifier();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.identifier();
      Token token10 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.equals();
      assertEquals(21, token13.getTokenType());
      
      Token token14 = xPathLexer0.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.8313870924129108
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("&", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.leftParen();
      assertEquals("F", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("2", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer0.star();
      assertEquals("G", token7.getTokenText());
      
      xPathLexer0.literal();
      xPathLexer0.colon();
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("hPG20~p^:");
      xPathLexer0.nextToken();
      Token token9 = xPathLexer1.comma();
      assertEquals(32, token9.getTokenType());
      assertEquals("h", token9.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.setXPath("hPG20~p^:");
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer1.nextToken();
      assertEquals(15, token11.getTokenType());
      
      xPathLexer0.getXPath();
      Token token12 = xPathLexer1.minus();
      assertEquals("~", token12.getTokenText());
      assertEquals(6, token12.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("$3nqerZB;%e`C0U+i~<");
      xPathLexer2.mod();
      Token token13 = xPathLexer2.pipe();
      assertEquals("$", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer2.plus();
      assertEquals(5, token14.getTokenType());
      assertEquals("3", token14.getTokenText());
      
      Token token15 = xPathLexer0.slashes();
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7550068196796802
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("|", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("~", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.minus();
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.at();
      assertEquals("z", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.notEquals();
      xPathLexer0.or();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("?", token7.getTokenText());
      
      Token token8 = xPathLexer0.not();
      assertEquals("|", token8.getTokenText());
      
      xPathLexer0.div();
      Token token9 = xPathLexer0.nextToken();
      assertEquals(11, token9.getTokenType());
      assertEquals("/", token9.getTokenText());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.identifier();
      Token token11 = xPathLexer0.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      xPathLexer0.literal();
      Token token12 = new Token((-4112), "|~z,qKs/0at?|/", (-777), (-462));
      String string0 = token6.toString();
      assertEquals("[ (22) (at)", string0);
      
      xPathLexer0.setXPath("@$6lcyO/5a%c5j(5");
      Token token13 = xPathLexer0.leftParen();
      assertEquals("@", token13.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      Token token14 = xPathLexer0.colon();
      assertEquals("6", token14.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token15 = xPathLexer1.identifier();
      assertEquals(15, token15.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token16 = xPathLexer2.minus();
      assertEquals(6, token16.getTokenType());
      
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token17 = xPathLexer3.plus();
      assertEquals(5, token17.getTokenType());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.652074261064954
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("+", token3.getTokenText());
      assertEquals(5, token3.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      Token token4 = xPathLexer0.leftParen();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      xPathLexer0.leftParen();
      token0.toString();
      String string0 = token6.toString();
      assertEquals("[ (23) (&)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (13) (&)", string1);
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("2G", token7.getTokenText());
      
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.getPreviousToken();
      String string2 = token0.toString();
      assertEquals("[ (30) ()", string2);
      
      Token token8 = xPathLexer0.identifier();
      assertEquals("J-", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token9);
      
      XPathLexer xPathLexer1 = new XPathLexer("KyU~faBpw");
      xPathLexer0.colon();
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.at();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (23) (&)");
      Token token11 = xPathLexer3.at();
      assertEquals(16, token11.getTokenType());
      assertEquals("[", token11.getTokenText());
      
      Token token12 = xPathLexer3.identifier();
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9246576980439765
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      Token token0 = xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.comma();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.doubleColon();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer2.pipe();
      xPathLexer2.equals();
      xPathLexer2.not();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.nextToken();
      xPathLexer0.number();
      xPathLexer2.or();
      xPathLexer0.rightBracket();
      Token token1 = xPathLexer2.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8438860672700637
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("~", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(",", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("q", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("s/", token6.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("a", token7.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      assertEquals("?", token8.getTokenText());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      xPathLexer0.literal();
      xPathLexer0.nextToken();
      Token token11 = xPathLexer0.comma();
      assertEquals(32, token11.getTokenType());
      
      xPathLexer0.setXPath(")");
      xPathLexer0.operatorName();
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      assertEquals(")", token12.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("|~z,qKs/0at?|/");
      Token token13 = xPathLexer1.minus();
      assertEquals("|", token13.getTokenText());
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer1.plus();
      assertEquals("~", token14.getTokenText());
      
      xPathLexer1.setXPath("");
      xPathLexer1.div();
      Token token15 = xPathLexer0.notEquals();
      assertEquals(22, token15.getTokenType());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.048228901462998
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("-~Nx");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer3.not();
      xPathLexer3.setXPath("[ (20) (q)");
      XPathLexer xPathLexer4 = new XPathLexer("-~Nx");
      xPathLexer0.nextToken();
      xPathLexer4.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer6.colon();
      xPathLexer0.and();
      xPathLexer2.dots();
      xPathLexer3.minus();
      xPathLexer6.dollar();
      xPathLexer3.slashes();
      xPathLexer0.at();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer2.setXPath("-]rm8]oKiv");
      XPathLexer xPathLexer8 = new XPathLexer();
      xPathLexer8.leftBracket();
      Token token1 = xPathLexer7.and();
      assertNull(token1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7616701672501227
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.dots();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.not();
      xPathLexer0.star();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("c'/W");
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer0.setXPath("c'/W");
      xPathLexer0.colon();
      xPathLexer0.slashes();
      xPathLexer1.getXPath();
      xPathLexer1.minus();
      xPathLexer2.plus();
      // Undeclared exception!
      try { 
        xPathLexer2.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5150426079871675
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      xPathLexer1.literal();
      xPathLexer1.colon();
      xPathLexer1.equals();
      xPathLexer1.getXPath();
      XPathLexer xPathLexer2 = new XPathLexer(") (");
      xPathLexer1.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("tox6$~~?L@V:.b9vT");
      xPathLexer2.colon();
      xPathLexer1.nextToken();
      xPathLexer0.getXPath();
      XPathLexer xPathLexer3 = new XPathLexer("tox6$~~?L@V:.b9vT");
      xPathLexer3.minus();
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      xPathLexer2.pipe();
      xPathLexer2.hasMoreChars();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer3.or();
      assertNull(token0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.795059078601998
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|~z,qKs/0at?|/");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.leftParen();
      xPathLexer1.equals();
      xPathLexer0.setXPath("Ju^lhE~&;k)eO");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer1.comma();
      xPathLexer0.setXPath("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.whitespace();
      xPathLexer1.colon();
      xPathLexer1.dots();
      XPathLexer xPathLexer2 = new XPathLexer("");
      xPathLexer0.at();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.rightParen();
      xPathLexer1.leftBracket();
      xPathLexer1.and();
      xPathLexer1.notEquals();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.353010714672204
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      XPathLexer xPathLexer1 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer1.plus();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.identifier();
      xPathLexer1.mod();
      xPathLexer2.hasMoreChars();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.div();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.leftParen();
      xPathLexer3.minus();
      xPathLexer3.comma();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.slashes();
      xPathLexer0.isIdentifierStartChar('*');
      xPathLexer3.or();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.notEquals();
      XPathLexer xPathLexer8 = new XPathLexer("jB>c:XfjP#H");
      xPathLexer2.not();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer10 = new XPathLexer("jB>c:XfjP#H");
      int int0 = xPathLexer10.endPosition();
      assertEquals(12, int0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.8076634650466679
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.dots();
      Token token1 = xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      token1.toString();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token2 = xPathLexer0.star();
      Token token3 = new Token(456, "Z&9#+FDLX&o2GJ-", (-662), (-1));
      token1.toString();
      token2.toString();
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token0);
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      xPathLexer1.identifier();
      xPathLexer1.or();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.mod();
      assertNull(token4);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.810782163204276
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("&", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("+", token4.getTokenText());
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.whitespace();
      assertEquals("", token6.getTokenText());
      assertEquals((-2), token6.getTokenType());
      
      Token token7 = xPathLexer0.slashes();
      assertEquals("L", token7.getTokenText());
      assertEquals(11, token7.getTokenType());
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.nextToken();
      token3.toString();
      xPathLexer0.or();
      Token token10 = xPathLexer0.pipe();
      assertEquals(17, token10.getTokenType());
      assertEquals("&", token10.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      Token token11 = xPathLexer0.nextToken();
      Token token12 = xPathLexer0.star();
      String string0 = token9.toString();
      assertEquals("[ (15) (X)", string0);
      
      Token token13 = new Token(456, "Z&9#+FDLX&o2GJ-", (-662), (-1));
      String string1 = token3.toString();
      assertEquals("[ (23) (#)", string1);
      
      String string2 = token12.toString();
      assertEquals("[ (20) (o)", string2);
      
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals("2G", token14.getTokenText());
      
      xPathLexer0.setPreviousToken(token11);
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      Token token15 = xPathLexer1.identifier();
      assertEquals("Z", token15.getTokenText());
      
      xPathLexer1.or();
      Token token16 = xPathLexer0.nextToken();
      assertEquals("J-", token16.getTokenText());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4540333552558813
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("@", token2.getTokenText());
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals("E", token3.getTokenText());
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.star();
      assertEquals("b", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("O", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.colon();
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.setXPath("SBo+(#p_%*W7U(Xvl-");
      xPathLexer0.colon();
      xPathLexer1.nextToken();
      xPathLexer1.getXPath();
      xPathLexer1.minus();
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer1.rightParen();
      xPathLexer0.setXPath("bz>PyZTY&2 0nXg");
      Token token12 = xPathLexer1.doubleColon();
      assertEquals("#p", token12.getTokenText());
      
      Token token13 = xPathLexer0.pipe();
      assertEquals("b", token13.getTokenText());
      assertEquals(17, token13.getTokenType());
      
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals("z>", token14.getTokenText());
      
      Token token15 = xPathLexer1.minus();
      assertEquals("_", token15.getTokenText());
      assertEquals(6, token15.getTokenType());
      
      Token token16 = xPathLexer0.leftBracket();
      assertEquals(3, token16.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5452315655523212
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kR5\f3OBJBg=$h#");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.equals();
      token1.toString();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.or();
      assertNull(token2);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6742554404690313
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.rightParen();
      XPathLexer xPathLexer2 = new XPathLexer("<Y:5YQ;>Rfd");
      xPathLexer2.nextToken();
      xPathLexer0.comma();
      xPathLexer1.operatorName();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      xPathLexer2.operatorName();
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer(")");
      xPathLexer1.setPreviousToken(token0);
      xPathLexer3.notEquals();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("<Y:5YQ;>Rfd");
      xPathLexer5.comma();
      xPathLexer3.star();
      xPathLexer5.nextToken();
      XPathLexer xPathLexer6 = new XPathLexer("9rVyp!C}");
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.doubleColon();
      XPathLexer xPathLexer8 = new XPathLexer("<Y:5YQ;>Rfd");
      xPathLexer2.operatorName();
      xPathLexer1.pipe();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.equals();
      xPathLexer0.not();
      xPathLexer5.literal();
      xPathLexer0.number();
      xPathLexer8.or();
      xPathLexer8.rightBracket();
      Token token1 = xPathLexer2.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.4916142908968517
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("D_:ifDm4 ]6!5tn<9");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("D_:ifDm4 ]6!5tn<9");
      xPathLexer1.equals();
      xPathLexer1.nextToken();
      xPathLexer1.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer1.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.not();
      xPathLexer0.star();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer3 = null;
      try {
        xPathLexer3 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.3783264152193597
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.minus();
      assertEquals("@", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals("E", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("gcFjqf`zj_D");
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      assertEquals("7", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("gcFjqf`zj_D");
      Token token3 = xPathLexer2.not();
      assertEquals(23, token3.getTokenType());
      assertEquals("g", token3.getTokenText());
      
      xPathLexer0.setXPath("}l2cqw\"@E7bO");
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals("}l2cqw\"@E7bO", token5.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token6 = xPathLexer2.at();
      assertEquals("c", token6.getTokenText());
      
      Token token7 = xPathLexer0.plus();
      assertEquals("}", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer2.equals();
      assertEquals("F", token8.getTokenText());
      
      Token token9 = xPathLexer1.dots();
      assertEquals(13, token9.getTokenType());
      assertEquals("`", token9.getTokenText());
      
      Token token10 = xPathLexer4.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer4.dollar();
      assertEquals(26, token11.getTokenType());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals("", token12.getTokenText());
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer4.at();
      assertEquals(16, token13.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.setXPath("}l2cqw\"@E7bO");
      Token token14 = xPathLexer1.leftBracket();
      assertEquals(3, token14.getTokenType());
      assertEquals("z", token14.getTokenText());
      
      xPathLexer5.and();
      Token token15 = xPathLexer5.doubleColon();
      assertEquals(19, token15.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.9992635626042037
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.number();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.at();
      Token token0 = xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      xPathLexer0.or();
      Token token1 = xPathLexer1.number();
      xPathLexer0.or();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.at();
      token0.toString();
      int int0 = (-226);
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.573830799563463
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("9", token2.getTokenText());
      
      Token token3 = xPathLexer0.plus();
      assertEquals(5, token3.getTokenType());
      assertEquals("#", token3.getTokenText());
      
      xPathLexer0.at();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("F", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.not();
      Token token5 = xPathLexer1.nextToken();
      assertEquals("&9#+FDLX&o2GJ-", token5.getTokenText());
      
      Token token6 = xPathLexer1.leftParen();
      assertEquals("&", token6.getTokenText());
      
      Token token7 = xPathLexer0.whitespace();
      assertEquals((-2), token7.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.number();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("L", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      assertEquals("X", token9.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token10 = xPathLexer3.star();
      assertEquals(20, token10.getTokenType());
      
      xPathLexer0.div();
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.nextToken();
      assertEquals(30, token12.getTokenType());
      assertEquals("9", token12.getTokenText());
      
      Token token13 = xPathLexer2.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer0.comma();
      assertEquals(32, token14.getTokenType());
      assertEquals("o", token14.getTokenText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8161474273062692
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(")", token0.getTokenText());
      
      xPathLexer0.endPosition();
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      xPathLexer0.rightBracket();
      Token token2 = xPathLexer0.minus();
      assertEquals(6, token2.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer0.setXPath(" 08q50%.bl");
      Token token5 = xPathLexer0.nextToken();
      assertEquals("08", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      assertEquals("q", token6.getTokenText());
      
      xPathLexer0.setXPath("LR.EIL6&W^");
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.whitespace();
      assertEquals("", token7.getTokenText());
      
      Token token8 = xPathLexer0.colon();
      assertEquals("R", token8.getTokenText());
      
      Token token9 = xPathLexer0.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals(".", token9.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token10 = xPathLexer0.at();
      assertEquals("E", token10.getTokenText());
      assertEquals(16, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer2.and();
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer0.identifier();
      assertEquals("IL6", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.70658364260343
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token6 = xPathLexer0.star();
      assertEquals(20, token6.getTokenType());
      assertEquals("D", token6.getTokenText());
      
      Token token7 = xPathLexer0.at();
      assertEquals("L", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("X", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("&", token9.getTokenText());
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      assertEquals("o2", token10.getTokenText());
      
      Token token11 = xPathLexer0.equals();
      assertEquals("G", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      assertEquals("-", token12.getTokenText());
      
      xPathLexer0.setXPath(",;rPg'%8Wd>u+BW");
      XPathLexer xPathLexer1 = new XPathLexer("B8KP#'79WL7iR}");
      Token token13 = xPathLexer1.colon();
      assertEquals("B", token13.getTokenText());
      assertEquals(18, token13.getTokenType());
      
      Token token14 = xPathLexer1.nextToken();
      assertEquals("8", token14.getTokenText());
      assertEquals(30, token14.getTokenType());
      
      xPathLexer1.getXPath();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer("_z!9mP;.0pA65sxZw");
      Token token15 = xPathLexer2.pipe();
      assertEquals(17, token15.getTokenType());
      assertEquals("_", token15.getTokenText());
      
      boolean boolean0 = xPathLexer2.hasMoreChars();
      assertTrue(boolean0);
      
      Token token16 = xPathLexer0.rightParen();
      assertEquals(",", token16.getTokenText());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.4284833892502744
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kR5\f3OBJBg=$h#");
      Token token0 = xPathLexer0.equals();
      assertEquals("k", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      String string0 = token2.toString();
      assertEquals("[ (17) (5)", string0);
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("kR5\f3OBJBg=$h#");
      Token token4 = xPathLexer0.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.operatorName();
      Token token5 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals("\f", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer2.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.comma();
      Token token8 = xPathLexer3.number();
      assertEquals(30, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer1.star();
      assertEquals("3", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.mod();
      xPathLexer4.getPreviousToken();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer6 = new XPathLexer("aJXTYzihsfUYD4X");
      Token token10 = xPathLexer6.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("a", token10.getTokenText());
      
      Token token11 = xPathLexer2.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer3.dots();
      assertEquals(13, token12.getTokenType());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4077336552252278
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      xPathLexer0.slashes();
      Token token1 = xPathLexer0.slashes();
      assertEquals(11, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals("w", token2.getTokenText());
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.mod();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.XPathLexer", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer1.literal();
      assertNull(token7);
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer("A+");
      Token token8 = xPathLexer4.minus();
      assertEquals("A", token8.getTokenText());
      assertEquals(6, token8.getTokenType());
      
      xPathLexer2.identifier();
      XPathLexer xPathLexer5 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer1.at();
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer3.doubleColon();
      assertEquals(19, token10.getTokenType());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.7570013608413222
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      xPathLexer0.setXPath("LR.EIL6&W^");
      xPathLexer0.colon();
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer("[H1B8a{Mg\"u4/V-");
      xPathLexer1.consume((-2130));
      xPathLexer1.pipe();
      xPathLexer0.hasMoreChars();
      // Undeclared exception!
      try { 
        xPathLexer1.and();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5715461049326194
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token0 = xPathLexer0.number();
      assertEquals(30, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("Z", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("&", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("9", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      Token token5 = xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.whitespace();
      Token token7 = xPathLexer0.leftParen();
      String string0 = token5.toString();
      assertEquals("[ (5) (+)", string0);
      
      String string1 = token7.toString();
      assertEquals("[ (1) (L)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer(";VjJcL9BMPKcy");
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer0.setPreviousToken(token6);
      xPathLexer0.notEquals();
      Token token9 = xPathLexer1.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer1.slashes();
      String string2 = token10.toString();
      assertEquals("[ (11) (V)", string2);
      
      Token token11 = new Token(456, "[ (5) (+)", 1716, 456);
      String string3 = token4.toString();
      assertEquals("[ (23) (#)", string3);
      
      String string4 = token6.toString();
      assertEquals("[ (-2) ()", string4);
      
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      assertEquals("o2", token12.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token13 = xPathLexer0.identifier();
      assertEquals(15, token13.getTokenType());
      
      xPathLexer0.or();
      Token token14 = xPathLexer0.nextToken();
      assertEquals("", token14.getTokenText());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5032591731794194
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.dots();
      Token token1 = xPathLexer0.at();
      assertEquals(16, token1.getTokenType());
      assertEquals("9", token1.getTokenText());
      
      xPathLexer0.not();
      Token token2 = xPathLexer0.star();
      assertEquals("+", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(15, token3.getTokenType());
      assertEquals("FDLX", token3.getTokenText());
      
      Token token4 = xPathLexer0.leftParen();
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.or();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("2", token6.getTokenText());
      
      xPathLexer0.not();
      xPathLexer0.div();
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.or();
      Token token8 = xPathLexer0.not();
      assertEquals(23, token8.getTokenType());
      assertEquals("J", token8.getTokenText());
      
      Token token9 = xPathLexer0.dots();
      assertEquals("-", token9.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      Token token11 = xPathLexer1.number();
      assertEquals(30, token11.getTokenType());
      
      xPathLexer0.div();
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.nextToken();
      assertEquals((-1), token13.getTokenType());
      
      Token token14 = xPathLexer0.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5468050203540389
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("o", token1.getTokenText());
      assertEquals(6, token1.getTokenType());
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals("m", token2.getTokenText());
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token3 = xPathLexer1.nextToken();
      assertEquals("com.werken.saxpath.XPathLexer", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.dollar();
      assertEquals(26, token4.getTokenType());
      
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.comma();
      Token token6 = xPathLexer1.number();
      assertEquals(30, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer3.getPreviousToken();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer2.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer4.dots();
      assertEquals(13, token10.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.9099954126417491
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.setXPath("\nl](]");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      assertEquals("\n", token0.getTokenText());
      
      Token token1 = xPathLexer0.number();
      assertEquals("", token1.getTokenText());
      assertEquals(30, token1.getTokenType());
      
      xPathLexer0.div();
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("l]", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("(", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8746277976026962
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      Token token4 = xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.whitespace();
      assertEquals((-2), token5.getTokenType());
      assertEquals("", token5.getTokenText());
      
      Token token6 = xPathLexer0.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("L", token6.getTokenText());
      
      Token token7 = xPathLexer0.number();
      assertEquals("", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer0.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (23) (#)", string0);
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.pipe();
      assertEquals("&", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.star();
      assertEquals("o", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      token0.toString();
      Token token10 = new Token((-1), "[ (23) (#)", (-2), (-1));
      String string1 = token0.toString();
      assertEquals("[ (26) (Z)", string1);
      
      String string2 = token4.toString();
      assertEquals("[ (5) (+)", string2);
      
      XPathLexer xPathLexer1 = new XPathLexer("[ (26) (Z)");
      Token token11 = xPathLexer1.notEquals();
      assertEquals("[ ", token11.getTokenText());
      
      Token token12 = xPathLexer1.leftParen();
      xPathLexer1.setPreviousToken(token12);
      assertEquals("(", token12.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (5) (+)");
      xPathLexer2.operatorName();
      xPathLexer0.relationalOperator();
      Token token13 = xPathLexer0.identifier();
      assertEquals("2GJ-", token13.getTokenText());
      assertEquals(15, token13.getTokenType());
      
      xPathLexer2.or();
      Token token14 = xPathLexer2.nextToken();
      assertEquals(3, token14.getTokenType());
      assertEquals("[", token14.getTokenText());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.856883738366333
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("9", token2.getTokenText());
      
      Token token3 = xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.leftParen();
      assertEquals(1, token4.getTokenType());
      assertEquals("F", token4.getTokenText());
      
      Token token5 = xPathLexer0.whitespace();
      assertEquals("", token5.getTokenText());
      assertEquals((-2), token5.getTokenType());
      
      Token token6 = xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      String string0 = token3.toString();
      assertEquals("[ (23) (#)", string0);
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.comma();
      assertEquals("o", token7.getTokenText());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("2", token8.getTokenText());
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.slashes();
      Token token9 = new Token((-3385), "a{)\"gqfEffq#!wuZ#B", 1, 113);
      String string1 = token6.toString();
      assertEquals("[ (11) (L)", string1);
      
      Token token10 = xPathLexer0.notEquals();
      String string2 = token10.toString();
      assertEquals("[ (22) (GJ)", string2);
      
      xPathLexer1.notEquals();
      Token token11 = xPathLexer1.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer0.identifier();
      assertEquals("-", token12.getTokenText());
      
      xPathLexer1.or();
      Token token13 = xPathLexer1.nextToken();
      assertEquals(5, token13.getTokenType());
      assertEquals("+", token13.getTokenText());
      
      Token token14 = xPathLexer0.comma();
      assertEquals(32, token14.getTokenType());
      
      Token token15 = xPathLexer0.identifier();
      assertEquals(15, token15.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5674164803565809
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      xPathLexer0.rightParen();
      int int0 = xPathLexer0.endPosition();
      assertEquals(0, int0);
      
      Token token4 = xPathLexer0.star();
      assertEquals(20, token4.getTokenType());
      
      xPathLexer0.and();
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.literal();
      assertNull(token8);
      
      xPathLexer0.colon();
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer0.setXPath("7pvm`");
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.getXPath();
      Token token12 = xPathLexer0.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals("v", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      xPathLexer0.setXPath(".");
      xPathLexer0.div();
      Token token14 = xPathLexer0.notEquals();
      assertEquals(22, token14.getTokenType());
      assertEquals(".", token14.getTokenText());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.3171922780180112
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer("'n_Q6iQ@xW_n&K*%Dp");
      xPathLexer0.leftParen();
      xPathLexer1.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.setXPath("'n_Q6iQ@xW_n&K*%Dp");
      xPathLexer0.nextToken();
      xPathLexer0.nextToken();
      xPathLexer2.comma();
      xPathLexer2.setXPath("");
      xPathLexer0.star();
      xPathLexer2.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.colon();
      XPathLexer xPathLexer4 = new XPathLexer("\"/_|8-HGRdZ");
      xPathLexer2.minus();
      xPathLexer3.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.3618892534573586
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer("<Y:5YQ;>Rfd");
      Token token2 = xPathLexer0.nextToken();
      assertEquals("E7bO", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.comma();
      xPathLexer0.operatorName();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.operatorName();
      Token token3 = xPathLexer0.dollar();
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer1.comma();
      assertEquals("<", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      xPathLexer3.setXPath("");
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer("}l2cqw\"@E7bO");
      Token token6 = xPathLexer4.minus();
      assertEquals("}", token6.getTokenText());
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer1.relationalOperator();
      assertNull(token7);
      
      xPathLexer4.identifierOrOperatorName();
      Token token8 = xPathLexer4.equals();
      assertEquals("\"", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      xPathLexer0.identifier();
      xPathLexer3.mod();
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6841854367297489
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      xPathLexer0.dots();
      Token token1 = xPathLexer0.whitespace();
      token1.toString();
      token0.toString();
      token1.toString();
      token0.toString();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.notEquals();
      xPathLexer0.comma();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.literal();
      xPathLexer0.number();
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer1.rightBracket();
      xPathLexer1.relationalOperator();
      xPathLexer0.mod();
      Token token3 = xPathLexer1.at();
      assertFalse(token3.equals((Object)token2));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5597222570249165
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.at();
      assertEquals("&", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      assertEquals("9", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("#", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("DL", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals("&o2GJ-", token8.getTokenText());
      
      Token token9 = xPathLexer0.star();
      assertEquals("&", token9.getTokenText());
      
      xPathLexer0.or();
      Token token10 = xPathLexer0.rightBracket();
      assertEquals(4, token10.getTokenType());
      assertEquals("o", token10.getTokenText());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.div();
      xPathLexer0.div();
      Token token12 = xPathLexer0.pipe();
      assertEquals(17, token12.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      Token token13 = xPathLexer0.star();
      assertEquals(20, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
      
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.mod();
      Token token15 = xPathLexer0.identifier();
      assertEquals(15, token15.getTokenType());
      
      Token token16 = xPathLexer0.slashes();
      assertEquals(11, token16.getTokenType());
      
      xPathLexer1.rightParen();
      Token token17 = xPathLexer0.dollar();
      assertEquals(26, token17.getTokenType());
      
      Token token18 = xPathLexer0.colon();
      assertEquals(18, token18.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5462481596449145
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token2 = xPathLexer0.leftParen();
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.pipe();
      assertEquals("&", token4.getTokenText());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer0.div();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(30, token6.getTokenType());
      
      xPathLexer0.star();
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("J", token7.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("|L]NbL.gghJ-y.{om*");
      Token token9 = xPathLexer3.star();
      assertEquals("|", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer1.div();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer3.nextToken();
      assertEquals("L", token11.getTokenText());
      assertEquals(15, token11.getTokenType());
      
      Token token12 = xPathLexer1.rightBracket();
      assertEquals(4, token12.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.587915092352999
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      assertEquals("@", token2.getTokenText());
      assertEquals(23, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      assertEquals("E7bO", token3.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      Token token4 = xPathLexer1.identifierOrOperatorName();
      xPathLexer1.setPreviousToken(token0);
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer1.endPosition();
      xPathLexer0.star();
      Token token5 = xPathLexer1.comma();
      assertEquals("}", token5.getTokenText());
      
      xPathLexer1.nextToken();
      Token token6 = xPathLexer1.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      xPathLexer1.setXPath("[ (");
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer2.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer1.doubleColon();
      assertEquals("[ ", token7.getTokenText());
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("ToIA");
      XPathLexer xPathLexer4 = new XPathLexer("J~2v;HZ(");
      xPathLexer4.setPreviousToken(token4);
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer2.pipe();
      assertEquals(17, token8.getTokenType());
      assertEquals("[", token8.getTokenText());
      
      Token token9 = xPathLexer3.star();
      assertEquals(20, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.mod();
      xPathLexer3.getPreviousToken();
      xPathLexer2.comma();
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("(", token10.getTokenText());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5683017693809878
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("pV[L6oW\"dDS,");
      xPathLexer0.minus();
      xPathLexer0.dots();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.identifier();
      xPathLexer0.pipe();
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.consume();
      xPathLexer0.at();
      xPathLexer0.plus();
      xPathLexer0.equals();
      xPathLexer0.dots();
      xPathLexer0.notEquals();
      xPathLexer0.dollar();
      xPathLexer0.literal();
      xPathLexer0.isIdentifierStartChar(' ');
      xPathLexer0.literal();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.mod();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.8444872614601695
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.at();
      assertEquals(16, token4.getTokenType());
      assertEquals("@", token4.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (15) ()", string1);
      
      Token token5 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token5.toString();
      token3.toString();
      Token token6 = xPathLexer0.notEquals();
      assertEquals("E7", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.operatorName();
      Token token7 = xPathLexer0.identifier();
      assertEquals("bO", token7.getTokenText());
      
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.4909555494546294
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("jriI|tqS{PB");
      xPathLexer0.nextToken();
      xPathLexer0.consume(110);
      xPathLexer0.and();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("jriI|tqS{PB");
      xPathLexer1.leftParen();
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("r", token1.getTokenText());
      
      xPathLexer0.setXPath("1g=Qin(`?*.<uOr8Zq");
      Token token2 = xPathLexer1.nextToken();
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals("g", token4.getTokenText());
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.setXPath(")");
      xPathLexer0.operatorName();
      Token token5 = xPathLexer1.colon();
      assertEquals("|", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token6 = xPathLexer2.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.plus();
      assertEquals(5, token7.getTokenType());
      assertEquals(")", token7.getTokenText());
      
      xPathLexer0.setXPath(")");
      xPathLexer1.div();
      Token token8 = xPathLexer1.notEquals();
      assertEquals(22, token8.getTokenType());
      assertEquals("tq", token8.getTokenText());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.4909555494546296
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.consume(22);
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.and();
      xPathLexer0.rightBracket();
      xPathLexer1.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      Token token2 = xPathLexer2.rightBracket();
      assertEquals(4, token2.getTokenType());
      assertEquals("}", token2.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("}l2cqw\"@E7bO");
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer3.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("}", token4.getTokenText());
      
      xPathLexer1.setXPath("1g=Qin(`?*.<uOr8Zq");
      Token token5 = xPathLexer0.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer3.comma();
      assertEquals(32, token7.getTokenType());
      
      xPathLexer1.setXPath("=&tn[@oT3Mr");
      xPathLexer1.operatorName();
      Token token8 = xPathLexer2.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer3.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer2.plus();
      xPathLexer3.setXPath("YRWcPG+}f(I[5`T");
      xPathLexer4.div();
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token10 = xPathLexer5.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer2.plus();
      assertEquals(5, token11.getTokenType());
      assertEquals("c", token11.getTokenText());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.544184030986499
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      String string0 = "[ (";
      XPathLexer xPathLexer0 = new XPathLexer("[ (");
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.and();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      xPathLexer0.isIdentifierChar('D');
      xPathLexer0.dots();
      int int0 = (-68);
      xPathLexer0.consume((-68));
      xPathLexer0.isIdentifierChar('4');
      xPathLexer0.getPreviousToken();
      // Undeclared exception!
      try { 
        xPathLexer0.nextToken();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.5568271679009458
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.whitespace();
      xPathLexer0.leftParen();
      xPathLexer0.consume((-1443));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.1905886072315877
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.at();
      int int0 = (-1063);
      xPathLexer0.number();
      xPathLexer0.leftParen();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-1063));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.757248533204479
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("c", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("o", token1.getTokenText());
      
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(".", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.plus();
      assertEquals("e", token5.getTokenText());
      assertEquals(5, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertEquals("ken.saxpath.XPathLexe", token6.getTokenText());
      assertEquals(27, token6.getTokenType());
      assertNotNull(token6);
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      Token token8 = xPathLexer1.colon();
      assertEquals(18, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      assertEquals("c", token9.getTokenText());
      
      xPathLexer2.literal();
      XPathLexer xPathLexer3 = new XPathLexer("v^]n-SY?_j8D,&");
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.at();
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(19, token12.getTokenType());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.3750079294653157
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.identifier();
      xPathLexer0.star();
      xPathLexer0.at();
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      XPathLexer xPathLexer1 = null;
      try {
        xPathLexer1 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5783339159049488
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kR5\f3OBJBg=$h#");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (k)", string0);
      
      xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.notEquals();
      assertEquals("\f3", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals(32, token2.getTokenType());
      assertEquals("O", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals("BJBg", token3.getTokenText());
      assertEquals(15, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("=$", token4.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      Token token5 = xPathLexer0.equals();
      assertEquals("#", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5752482614235723
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
      
      xPathLexer0.endPosition();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.rightBracket();
      assertEquals(4, token1.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      xPathLexer0.div();
      xPathLexer0.slashes();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.setXPath(" C8?501.bl");
      Token token3 = xPathLexer0.nextToken();
      assertEquals("C8", token3.getTokenText());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      assertEquals("?", token4.getTokenText());
      
      xPathLexer0.setXPath("LR.EL6&W^");
      xPathLexer0.operatorName();
      xPathLexer0.or();
      Token token5 = xPathLexer0.identifier();
      assertEquals(15, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("&", token6.getTokenText());
      
      xPathLexer0.at();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      assertEquals("^", token7.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer0.minus();
      assertEquals(6, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("LR.EL6&W^");
      Token token9 = xPathLexer2.pipe();
      assertEquals(17, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(" C8?501.bl");
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.81328031039153
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(") (");
      xPathLexer0.relationalOperator();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("(", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.rightBracket();
      xPathLexer0.relationalOperator();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer(") (");
      Token token4 = xPathLexer1.leftParen();
      assertEquals(")", token4.getTokenText());
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      
      xPathLexer1.setXPath("}UNgomzb&P+f");
      xPathLexer0.nextToken();
      Token token6 = xPathLexer1.nextToken();
      assertEquals("}UNgomzb&P+f", token6.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.comma();
      assertEquals("}", token7.getTokenText());
      
      xPathLexer2.setXPath("");
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      Token token9 = xPathLexer1.dots();
      assertEquals("U", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer0.minus();
      assertEquals(6, token10.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.div();
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("N", token12.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      Token token13 = xPathLexer3.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer1.equals();
      assertEquals(21, token14.getTokenType());
      assertEquals("g", token14.getTokenText());
      
      Token token15 = xPathLexer0.dots();
      assertEquals(13, token15.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("}UNgomzb&P+f");
      Token token16 = xPathLexer4.notEquals();
      assertEquals(22, token16.getTokenType());
      assertEquals("}U", token16.getTokenText());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.1285340484706314
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Kq`,2jT}K~}$X8");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.star();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      XPathLexer xPathLexer2 = new XPathLexer("[ (20) (q)");
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.star();
      xPathLexer3.leftParen();
      xPathLexer2.not();
      xPathLexer3.setXPath("[ (20) (q)");
      XPathLexer xPathLexer4 = new XPathLexer(")");
      xPathLexer4.nextToken();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer4.comma();
      xPathLexer4.setXPath("l");
      xPathLexer4.colon();
      xPathLexer1.dots();
      xPathLexer0.minus();
      xPathLexer2.dollar();
      xPathLexer5.rightParen();
      xPathLexer4.slashes();
      xPathLexer5.at();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer3.rightBracket();
      XPathLexer xPathLexer7 = null;
      try {
        xPathLexer7 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.2680896920647546
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("I~Kj");
      Token token0 = xPathLexer0.pipe();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (17) (I)", string0);
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals(22, token1.getTokenType());
      assertEquals("~K", token1.getTokenText());
      
      Token token2 = xPathLexer0.star();
      assertEquals(20, token2.getTokenType());
      assertEquals("j", token2.getTokenText());
      
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.identifier();
      assertEquals(15, token9.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9073522279374269
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      Token token2 = xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.at();
      token0.toString();
      token1.toString();
      Token token3 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token3.toString();
      token2.toString();
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.operatorName();
      xPathLexer0.identifier();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      assertNull(token4);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.8075262277912876
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      Token token0 = xPathLexer0.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.number();
      assertEquals("", token2.getTokenText());
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token4 = xPathLexer0.at();
      assertEquals("L", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightBracket();
      assertEquals("X", token5.getTokenText());
      
      Token token6 = xPathLexer0.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer1 = new XPathLexer("c'/W");
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer2.dollar();
      xPathLexer2.endPosition();
      Token token9 = xPathLexer2.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("$'cKFk{~&0T]");
      Token token10 = xPathLexer3.equals();
      assertEquals(21, token10.getTokenType());
      assertEquals("$", token10.getTokenText());
      
      xPathLexer3.identifier();
      xPathLexer3.setPreviousToken(token8);
      assertEquals(26, token8.getTokenType());
      
      Token token11 = xPathLexer3.not();
      assertEquals(23, token11.getTokenType());
      assertEquals("'", token11.getTokenText());
      
      Token token12 = xPathLexer3.star();
      assertEquals(20, token12.getTokenType());
      assertEquals("c", token12.getTokenText());
      
      xPathLexer1.mod();
      xPathLexer1.LA(0);
      Token token13 = xPathLexer3.identifier();
      assertEquals(15, token13.getTokenType());
      assertEquals("KFk", token13.getTokenText());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.6014485155403935
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.pipe();
      assertEquals(17, token0.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.dots();
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.and();
      Token token3 = xPathLexer0.nextToken();
      assertEquals((-1), token3.getTokenType());
      
      xPathLexer0.literal();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.setXPath("y]jad[mR3w=N");
      Token token5 = xPathLexer0.doubleColon();
      assertEquals(19, token5.getTokenType());
      assertEquals("y]", token5.getTokenText());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals("j", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals("a", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token8 = xPathLexer0.not();
      assertEquals("d", token8.getTokenText());
      
      xPathLexer0.dots();
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.identifierOrOperatorName();
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      assertEquals("R", token10.getTokenText());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      assertEquals("3", token11.getTokenText());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.6038176937856627
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      xPathLexer0.slashes();
      xPathLexer0.minus();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.number();
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.literal();
      xPathLexer0.rightBracket();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.comma();
      xPathLexer1.star();
      xPathLexer0.nextToken();
      xPathLexer0.doubleColon();
      xPathLexer1.operatorName();
      xPathLexer1.pipe();
      xPathLexer1.equals();
      xPathLexer1.not();
      xPathLexer1.literal();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7637050917448636
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      xPathLexer0.star();
      xPathLexer0.operatorName();
      xPathLexer0.pipe();
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      xPathLexer0.rightParen();
      xPathLexer0.endPosition();
      xPathLexer0.star();
      xPathLexer0.and();
      xPathLexer0.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.setXPath("y]jad[mR3w=N");
      xPathLexer0.leftParen();
      xPathLexer0.relationalOperator();
      xPathLexer0.doubleColon();
      xPathLexer0.LA(2228);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.pipe();
      xPathLexer0.number();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.or();
      xPathLexer1.literal();
      xPathLexer1.at();
      Token token0 = xPathLexer1.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0873616506748907
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.comma();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.setXPath("");
      xPathLexer0.nextToken();
      xPathLexer0.minus();
      xPathLexer0.equals();
      xPathLexer0.not();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer0.not();
      xPathLexer0.at();
      xPathLexer0.comma();
      xPathLexer0.identifier();
      xPathLexer0.consume((-1261));
      xPathLexer0.getPreviousToken();
      xPathLexer0.not();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.1217515681694183
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      token0.toString();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("\"", token1.getTokenText());
      
      Token token2 = xPathLexer0.not();
      token0.toString();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      Token token3 = xPathLexer0.at();
      assertEquals("E", token3.getTokenText());
      assertEquals(16, token3.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      token2.toString();
      token2.toString();
      Token token4 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token4.toString();
      token4.toString();
      token4.toString();
      String string1 = token2.toString();
      assertEquals("[ (23) (@)", string1);
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      assertEquals("7b", token5.getTokenText());
      
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.operatorName();
      Token token6 = xPathLexer0.identifier();
      assertEquals(15, token6.getTokenType());
      
      Token token7 = xPathLexer0.identifierOrOperatorName();
      assertNull(token7);
      
      Token token8 = xPathLexer0.colon();
      assertEquals(18, token8.getTokenType());
      
      xPathLexer0.or();
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.8571508954856406
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals(19, token0.getTokenType());
      assertEquals("co", token0.getTokenText());
      
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      
      xPathLexer0.endPosition();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      Token token2 = xPathLexer1.pipe();
      assertEquals(17, token2.getTokenType());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer1.leftParen();
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals("a", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNotNull(token7);
      assertEquals(27, token7.getTokenType());
      assertEquals("path.XPathLe", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("e", token8.getTokenText());
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer0.identifier();
      assertEquals("r", token9.getTokenText());
      assertEquals(15, token9.getTokenType());
      
      Token token10 = xPathLexer2.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer2.star();
      assertEquals(20, token11.getTokenType());
      
      xPathLexer2.literal();
      Token token12 = xPathLexer0.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer2.literal();
      Token token13 = xPathLexer0.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer2.slashes();
      assertEquals(11, token14.getTokenType());
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.76160544450862
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      assertEquals(5, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      token0.toString();
      xPathLexer0.mod();
      Token token4 = xPathLexer0.at();
      assertEquals("@", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      String string1 = token3.toString();
      assertEquals("[ (15) ()", string1);
      
      Token token5 = xPathLexer0.pipe();
      assertEquals("E", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.equals();
      assertEquals("7", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals("b", token7.getTokenText());
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.literal();
      Token token8 = xPathLexer0.number();
      assertEquals(30, token8.getTokenType());
      assertEquals("", token8.getTokenText());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("");
      xPathLexer0.equals();
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      xPathLexer2.or();
      Token token12 = xPathLexer2.equals();
      assertEquals(21, token12.getTokenType());
      assertEquals("c", token12.getTokenText());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.3492941148361786
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals(2, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      xPathLexer0.hasMoreChars();
      xPathLexer0.at();
      xPathLexer0.relationalOperator();
      xPathLexer0.consume();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("7", token3.getTokenText());
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.consume();
      Token token4 = xPathLexer0.at();
      assertEquals("O", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      xPathLexer0.plus();
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer("");
      Token token6 = xPathLexer1.literal();
      assertNull(token6);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer2.identifier();
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.4617317917085364
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("kR5\f3OBJBg=$h#");
      Token token0 = xPathLexer0.equals();
      Token token1 = xPathLexer0.pipe();
      token1.toString();
      token1.toString();
      token1.toString();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (17) (R)", string0);
      
      Token token2 = xPathLexer0.nextToken();
      xPathLexer0.setPreviousToken(token1);
      Token token3 = xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.operatorName();
      String string1 = token3.toString();
      assertEquals("[ (22) (\f3)", string1);
      
      xPathLexer0.identifier();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = new Token(512, "[ (17) (R)", 109, 512);
      String string2 = token2.toString();
      assertEquals("[ (30) (5)", string2);
      
      String string3 = token0.toString();
      assertEquals("[ (21) (k)", string3);
      
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer("[ (17) (R)");
      xPathLexer1.setPreviousToken(token1);
      XPathLexer xPathLexer2 = new XPathLexer(">.V<1*g(Trj?]d~)");
      xPathLexer1.operatorName();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer0.identifier();
      assertEquals("h", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      xPathLexer1.or();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("#", token6.getTokenText());
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.0405381055151453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.rightBracket();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.leftBracket();
      xPathLexer0.leftBracket();
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.dots();
      assertEquals(13, token3.getTokenType());
      
      xPathLexer0.consume(1073);
      xPathLexer0.consume((-1));
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      Token token5 = xPathLexer0.literal();
      assertNull(token5);
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifier();
      Token token7 = xPathLexer0.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("5t%");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.dollar();
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("q+fa}r^zXv0A;");
      Token token9 = xPathLexer4.minus();
      assertEquals("q", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer3.identifier();
      assertEquals(15, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("g@|^X&n");
      Token token11 = xPathLexer0.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer3.leftBracket();
      assertEquals(3, token12.getTokenType());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.662376053579024
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.whitespace();
      xPathLexer0.number();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.star();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.minus();
      xPathLexer0.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("}Z4#Cv,Z=c>QS?;^");
      xPathLexer3.leftParen();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.doubleColon();
      xPathLexer0.at();
      xPathLexer4.leftBracket();
      xPathLexer3.doubleColon();
      Token token0 = xPathLexer3.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.515080435326858
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      assertEquals("}", token0.getTokenText());
      assertEquals(2, token0.getTokenType());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      Token token2 = xPathLexer1.rightBracket();
      assertEquals("}", token2.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer1.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("!3~BMA]E$hTHM%");
      Token token4 = xPathLexer2.leftParen();
      assertEquals(1, token4.getTokenType());
      
      Token token5 = xPathLexer2.not();
      assertEquals("3", token5.getTokenText());
      assertEquals(23, token5.getTokenType());
      
      xPathLexer2.setXPath("");
      Token token6 = xPathLexer0.nextToken();
      assertEquals("@", token6.getTokenText());
      
      Token token7 = xPathLexer1.nextToken();
      assertEquals("2", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer3.setXPath("cF/bXJ8?!?B($g@B0^");
      Token token8 = xPathLexer1.colon();
      assertEquals("q", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      xPathLexer1.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer3.minus();
      assertEquals("c", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("E", token10.getTokenText());
      
      Token token11 = xPathLexer2.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer3.relationalOperator();
      Token token13 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token13.getTokenType());
      assertEquals("F", token13.getTokenText());
      
      Token token14 = xPathLexer3.comma();
      assertEquals(32, token14.getTokenType());
      assertEquals("/", token14.getTokenText());
      
      Token token15 = xPathLexer1.equals();
      assertEquals("@", token15.getTokenText());
      assertEquals(21, token15.getTokenType());
      
      Token token16 = xPathLexer1.dots();
      assertEquals(13, token16.getTokenType());
      assertEquals("E", token16.getTokenText());
      
      Token token17 = xPathLexer0.notEquals();
      assertEquals(22, token17.getTokenType());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8004365981988877
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("}", token0.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer1.at();
      xPathLexer1.not();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifierOrOperatorName();
      assertNull(token1);
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals("", token2.getTokenText());
      
      xPathLexer1.or();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer2.or();
      Token token3 = xPathLexer1.pipe();
      assertEquals("c", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer(") (");
      Token token4 = xPathLexer3.not();
      xPathLexer1.div();
      Token token5 = xPathLexer3.nextToken();
      assertEquals("(", token5.getTokenText());
      assertEquals(1, token5.getTokenType());
      
      Token token6 = xPathLexer0.star();
      assertEquals("@", token6.getTokenText());
      
      Token token7 = xPathLexer1.at();
      assertEquals("q", token7.getTokenText());
      assertEquals(16, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.rightBracket();
      Token token8 = xPathLexer4.literal();
      assertNull(token8);
      
      XPathLexer xPathLexer5 = new XPathLexer("c'/W");
      xPathLexer3.and();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer2.rightBracket();
      assertEquals("}", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer6.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer5.endPosition();
      XPathLexer xPathLexer7 = new XPathLexer("}l2cqw\"@E7bO");
      Token token11 = xPathLexer6.equals();
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer4.identifier();
      assertEquals(15, token12.getTokenType());
      
      xPathLexer1.setPreviousToken(token4);
      Token token13 = xPathLexer1.not();
      assertEquals("w", token13.getTokenText());
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer5.star();
      assertEquals(20, token14.getTokenType());
      
      xPathLexer3.mod();
      char char0 = xPathLexer1.LA(4);
      assertEquals('7', char0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.0914314089373363
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.or();
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.not();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      xPathLexer1.doubleColon();
      // Undeclared exception!
      try { 
        xPathLexer1.LA((-165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.7098177482562344
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.leftParen();
      assertEquals(1, token1.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.or();
      Token token2 = xPathLexer0.number();
      assertEquals(30, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      xPathLexer0.star();
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.literal();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.equals();
      assertEquals(21, token5.getTokenType());
      
      xPathLexer0.getXPath();
      XPathLexer xPathLexer1 = new XPathLexer("wayd.e/V$$y}16@l");
      xPathLexer1.nextToken();
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      xPathLexer1.mod();
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals("/", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.dots();
      assertEquals(13, token10.getTokenType());
      assertEquals("V", token10.getTokenText());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
      
      xPathLexer0.pipe();
      xPathLexer0.isIdentifierChar('D');
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token14 = xPathLexer2.pipe();
      assertEquals(17, token14.getTokenType());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.0267527277836166
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer0.literal();
      Token token5 = xPathLexer0.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierChar('D');
      assertTrue(boolean0);
      
      Token token6 = xPathLexer0.dots();
      assertEquals(13, token6.getTokenType());
      
      xPathLexer0.consume(0);
      xPathLexer0.isIdentifierChar('\"');
      xPathLexer0.getPreviousToken();
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.mod();
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      
      Token token9 = xPathLexer0.leftBracket();
      assertEquals(3, token9.getTokenType());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.7128592928075141
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("hEr=[|fx![7JD+");
      xPathLexer0.mod();
      xPathLexer0.getPreviousToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.rightParen();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.leftParen();
      assertEquals(1, token0.getTokenType());
      
      xPathLexer0.operatorName();
      Token token1 = xPathLexer0.notEquals();
      assertEquals("x!", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.star();
      assertEquals("[", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.minus();
      assertEquals("7", token3.getTokenText());
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("J", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      xPathLexer0.whitespace();
      Token token5 = xPathLexer0.plus();
      assertEquals("+", token5.getTokenText());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      xPathLexer0.nextToken();
      xPathLexer0.currentPosition();
      Token token7 = xPathLexer0.getPreviousToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals("", token8.getTokenText());
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      Token token10 = xPathLexer0.slashes();
      assertEquals(11, token10.getTokenType());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.colon();
      assertEquals(18, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer0.identifier();
      assertEquals(15, token14.getTokenType());
      
      Token token15 = xPathLexer0.rightParen();
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.2739657164192466
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("G7isX6ql7");
      xPathLexer0.or();
      Token token0 = xPathLexer0.identifier();
      assertEquals(15, token0.getTokenType());
      assertEquals("G7isX6ql7", token0.getTokenText());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.8765260356933728
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      assertEquals("Z", token0.getTokenText());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("&", token1.getTokenText());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.not();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals("", token4.getTokenText());
      assertEquals((-2), token4.getTokenType());
      
      Token token5 = xPathLexer0.slashes();
      xPathLexer0.number();
      Token token6 = xPathLexer0.nextToken();
      assertEquals("X", token6.getTokenText());
      
      String string0 = token2.toString();
      assertEquals("[ (23) (#)", string0);
      
      xPathLexer0.or();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      assertEquals("&", token7.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token8 = xPathLexer0.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals("2", token9.getTokenText());
      assertEquals(20, token9.getTokenType());
      
      xPathLexer0.nextToken();
      token5.toString();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token10 = new Token((-3385), "a{)\"gqfEffq#!wuZ#B", 1, 113);
      String string1 = token5.toString();
      assertEquals("[ (11) (L)", string1);
      
      Token token11 = xPathLexer0.notEquals();
      String string2 = token11.toString();
      assertEquals("[ (22) (GJ)", string2);
      
      xPathLexer1.notEquals();
      xPathLexer1.operatorName();
      xPathLexer0.relationalOperator();
      Token token12 = xPathLexer0.identifier();
      assertEquals("-", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
      
      xPathLexer1.or();
      Token token13 = xPathLexer1.nextToken();
      assertEquals(30, token13.getTokenType());
      
      Token token14 = xPathLexer0.plus();
      assertEquals(5, token14.getTokenType());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.768088196699752
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals((-1), token1.getTokenType());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals("#", token2.getTokenText());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals((-2), token3.getTokenType());
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals("D", token6.getTokenText());
      assertEquals(23, token6.getTokenType());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("X", token8.getTokenText());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals("&", token9.getTokenText());
      assertEquals(4, token9.getTokenType());
      
      xPathLexer0.literal();
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.leftParen();
      xPathLexer0.plus();
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer1.identifier();
      assertEquals(15, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer1.literal();
      assertNull(token14);
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.7468232929155554
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("c", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.minus();
      assertEquals("o", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("m.", token2.getTokenText());
      assertEquals(14, token2.getTokenType());
      
      Token token3 = xPathLexer0.pipe();
      assertEquals("w", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.star();
      assertEquals("e", token4.getTokenText());
      assertEquals(20, token4.getTokenType());
      
      Token token5 = xPathLexer0.number();
      assertEquals("", token5.getTokenText());
      assertEquals(30, token5.getTokenType());
      
      xPathLexer0.leftParen();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      assertEquals("k", token6.getTokenText());
      
      Token token7 = xPathLexer0.literal();
      assertEquals("n.saxpath.XPathL", token7.getTokenText());
      assertEquals(27, token7.getTokenType());
      assertNotNull(token7);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals("x", token8.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token10 = xPathLexer2.dollar();
      assertEquals(26, token10.getTokenType());
      assertEquals("c", token10.getTokenText());
      
      xPathLexer2.literal();
      xPathLexer1.consume(1006);
      XPathLexer xPathLexer3 = new XPathLexer("v^]n-SY?_j8D,&");
      xPathLexer2.minus();
      Token token11 = xPathLexer1.identifier();
      assertEquals(15, token11.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token12 = xPathLexer0.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer4.doubleColon();
      assertEquals(19, token13.getTokenType());
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.6314320961130742
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.whitespace();
      token2.toString();
      Token token3 = xPathLexer0.star();
      token0.toString();
      token2.toString();
      token0.toString();
      Token token4 = xPathLexer0.not();
      Token token5 = xPathLexer0.leftParen();
      token5.toString();
      token1.toString();
      String string0 = token0.toString();
      assertEquals("[ (26) (c)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (13) (o)", string1);
      
      xPathLexer0.notEquals();
      xPathLexer0.setPreviousToken(token4);
      Token token6 = xPathLexer0.at();
      assertEquals("e", token6.getTokenText());
      assertEquals(16, token6.getTokenType());
      
      xPathLexer0.div();
      String string2 = token5.toString();
      assertEquals("[ (1) (e)", string2);
      
      String string3 = token2.toString();
      assertEquals("[ (-2) ()", string3);
      
      Token token7 = xPathLexer0.identifier();
      assertEquals("n.saxpath.XPathLexer", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = new Token(512, "com.werken.saxpath.XPathLexer", (-1), (-1));
      String string4 = token3.toString();
      assertEquals("[ (20) (.)", string4);
      
      String string5 = token4.toString();
      assertEquals("[ (23) (w)", string5);
      
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      XPathLexer xPathLexer1 = new XPathLexer("31[R>'7lz-h");
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.identifier();
      assertEquals(15, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.574888264651428
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer0.div();
      Token token0 = xPathLexer0.slashes();
      assertEquals("c", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      xPathLexer0.minus();
      Token token1 = xPathLexer0.at();
      assertEquals("m", token1.getTokenText());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      assertEquals(".", token2.getTokenText());
      
      xPathLexer0.comma();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      xPathLexer0.leftParen();
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      assertEquals("r", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals("k", token5.getTokenText());
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.rightBracket();
      assertEquals(4, token6.getTokenType());
      assertEquals("e", token6.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.identifier();
      Token token7 = xPathLexer1.colon();
      assertEquals(18, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token8 = xPathLexer2.dollar();
      assertEquals("c", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("v^]n-SY?_j8D,&");
      xPathLexer2.minus();
      Token token9 = xPathLexer1.identifier();
      assertEquals(15, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token10 = xPathLexer3.minus();
      assertEquals("v", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer3.leftBracket();
      assertEquals("^", token11.getTokenText());
      assertEquals(3, token11.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8552171271481839
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals(1, token3.getTokenType());
      assertEquals("F", token3.getTokenText());
      
      Token token4 = xPathLexer0.whitespace();
      assertEquals((-2), token4.getTokenType());
      assertEquals("", token4.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.number();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("&", token6.getTokenText());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      assertEquals("o", token7.getTokenText());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.nextToken();
      assertEquals(30, token8.getTokenType());
      
      xPathLexer0.star();
      Token token9 = xPathLexer0.at();
      assertEquals("J", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
      
      Token token10 = xPathLexer0.rightBracket();
      assertEquals("-", token10.getTokenText());
      assertEquals(4, token10.getTokenType());
      
      xPathLexer0.literal();
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer0.equals();
      xPathLexer0.getXPath();
      xPathLexer0.nextToken();
      xPathLexer0.comma();
      Token token12 = xPathLexer0.star();
      assertEquals(20, token12.getTokenType());
      
      xPathLexer0.literal();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token13 = xPathLexer1.minus();
      assertEquals(6, token13.getTokenType());
      assertEquals("Z", token13.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token14 = xPathLexer2.literal();
      assertNull(token14);
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer2.leftBracket();
      assertEquals(3, token16.getTokenType());
      
      Token token17 = xPathLexer0.comma();
      assertEquals(32, token17.getTokenType());
      
      Token token18 = xPathLexer1.slashes();
      assertEquals(11, token18.getTokenType());
      assertEquals("&", token18.getTokenText());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.8770099159590765
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      assertEquals(26, token0.getTokenType());
      
      Token token1 = xPathLexer0.dots();
      assertEquals("&", token1.getTokenText());
      assertEquals(13, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      
      Token token3 = xPathLexer0.not();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("+", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("F", token5.getTokenText());
      
      xPathLexer0.and();
      Token token6 = xPathLexer0.slashes();
      xPathLexer0.number();
      Token token7 = xPathLexer0.nextToken();
      assertEquals(15, token7.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (23) (#)", string0);
      
      xPathLexer0.or();
      Token token8 = xPathLexer0.pipe();
      assertEquals("&", token8.getTokenText());
      assertEquals(17, token8.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token9 = xPathLexer0.comma();
      assertEquals("o", token9.getTokenText());
      
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      assertEquals("2", token10.getTokenText());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals("GJ-", token11.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      Token token12 = new Token((-3385), "a{)\"gqfEffq#!wuZ#B", 1, 113);
      String string1 = token6.toString();
      assertEquals("[ (11) (D)", string1);
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      
      xPathLexer1.not();
      Token token14 = xPathLexer1.literal();
      assertNotNull(token14);
      assertEquals(27, token14.getTokenType());
      assertEquals("9#+FDLX", token14.getTokenText());
      
      Token token15 = xPathLexer0.number();
      assertEquals(30, token15.getTokenType());
      
      Token token16 = xPathLexer1.rightBracket();
      assertEquals("o", token16.getTokenText());
      
      xPathLexer1.relationalOperator();
      char char0 = xPathLexer0.LA(113);
      assertEquals('\uFFFF', char0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.746504526813419
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.pipe();
      xPathLexer0.identifier();
      xPathLexer0.plus();
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.dollar();
      Token token1 = xPathLexer0.pipe();
      assertEquals(17, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals(11, token3.getTokenType());
      
      Token token4 = xPathLexer0.comma();
      assertEquals(32, token4.getTokenType());
      
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.minus();
      assertEquals(6, token5.getTokenType());
      
      Token token6 = xPathLexer0.leftParen();
      assertEquals(1, token6.getTokenType());
      
      xPathLexer0.dollar();
      Token token7 = xPathLexer0.number();
      assertEquals(30, token7.getTokenType());
      
      char char0 = xPathLexer0.LA(46);
      assertEquals('\uFFFF', char0);
      
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      xPathLexer0.getXPath();
      xPathLexer0.setPreviousToken((Token) null);
      Token token11 = xPathLexer0.plus();
      assertEquals(5, token11.getTokenType());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.0126758453675744
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.doubleColon();
      assertEquals(19, token1.getTokenType());
      
      Token token2 = xPathLexer0.pipe();
      assertEquals(17, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer0.number();
      Token token5 = xPathLexer0.number();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.at();
      assertEquals(16, token6.getTokenType());
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.6305549536368162
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      xPathLexer0.plus();
      Token token2 = xPathLexer0.not();
      assertEquals("@", token2.getTokenText());
      
      Token token3 = xPathLexer0.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("E", token3.getTokenText());
      
      Token token4 = xPathLexer0.number();
      assertEquals("7", token4.getTokenText());
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals("b", token5.getTokenText());
      
      Token token6 = xPathLexer0.plus();
      assertEquals("O", token6.getTokenText());
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.literal();
      assertNull(token7);
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("}l2cqw\"@E7bO");
      xPathLexer2.identifier();
      Token token9 = xPathLexer1.colon();
      assertEquals(18, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (2) (})");
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token10 = xPathLexer4.dollar();
      assertEquals(26, token10.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("v^]n-SY?_j8D,&");
      Token token11 = xPathLexer2.minus();
      assertEquals("}", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer5.identifier();
      assertEquals(15, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("[ (2) (})");
      Token token13 = xPathLexer6.at();
      assertEquals(16, token13.getTokenType());
      assertEquals("[", token13.getTokenText());
      
      Token token14 = xPathLexer5.leftBracket();
      assertEquals(3, token14.getTokenType());
      assertEquals("^", token14.getTokenText());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.7798711012379895
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.rightParen();
      xPathLexer0.identifier();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer2 = new XPathLexer("5DmBaAhR&8");
      xPathLexer1.identifier();
      XPathLexer xPathLexer3 = new XPathLexer("5DmBaAhR&8");
      XPathLexer xPathLexer4 = new XPathLexer("");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer2.operatorName();
      xPathLexer4.identifierOrOperatorName();
      xPathLexer3.dollar();
      xPathLexer4.colon();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.comma();
      xPathLexer6.number();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer4.star();
      XPathLexer xPathLexer8 = new XPathLexer("5DmBaAhR&8");
      xPathLexer6.pipe();
      XPathLexer xPathLexer9 = new XPathLexer();
      xPathLexer9.equals();
      xPathLexer5.not();
      xPathLexer8.literal();
      xPathLexer7.number();
      xPathLexer2.or();
      xPathLexer8.rightBracket();
      xPathLexer6.relationalOperator();
      Token token0 = xPathLexer5.getPreviousToken();
      assertNull(token0);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.2718685126965625
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";x");
      xPathLexer0.equals();
      xPathLexer0.or();
      xPathLexer0.at();
      Token token0 = xPathLexer0.or();
      assertNull(token0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7889206737993777
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      Token token0 = xPathLexer0.dollar();
      assertEquals("Z", token0.getTokenText());
      
      xPathLexer0.at();
      xPathLexer0.not();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("#+FDLX&o2GJ-", token1.getTokenText());
      
      Token token2 = xPathLexer0.leftParen();
      assertEquals(1, token2.getTokenType());
      
      Token token3 = xPathLexer0.whitespace();
      assertEquals("", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.or();
      Token token5 = xPathLexer0.pipe();
      assertEquals("F", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      assertEquals("D", token6.getTokenText());
      
      xPathLexer0.div();
      xPathLexer0.nextToken();
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("L", token7.getTokenText());
      
      Token token8 = xPathLexer0.at();
      assertEquals(16, token8.getTokenType());
      assertEquals("X", token8.getTokenText());
      
      Token token9 = xPathLexer0.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer0.literal();
      assertNull(token10);
      
      xPathLexer0.equals();
      Token token11 = xPathLexer0.pipe();
      assertEquals(17, token11.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer1.slashes();
      Token token12 = xPathLexer0.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer0.dollar();
      assertEquals(26, token13.getTokenType());
      
      xPathLexer1.isIdentifierStartChar('*');
      Token token14 = xPathLexer1.slashes();
      assertEquals(11, token14.getTokenType());
      assertEquals("&", token14.getTokenText());
      
      Token token15 = xPathLexer0.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer0.equals();
      assertEquals(21, token16.getTokenType());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.996635675779214
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("}l2cqw\"@E7bO");
      Token token0 = xPathLexer0.rightParen();
      Token token1 = xPathLexer0.identifier();
      assertEquals("l2cqw", token1.getTokenText());
      
      Token token2 = xPathLexer0.plus();
      assertEquals("\"", token2.getTokenText());
      
      Token token3 = xPathLexer0.identifierOrOperatorName();
      assertNotNull(token3);
      assertEquals("", token3.getTokenText());
      
      Token token4 = xPathLexer0.identifier();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.at();
      assertEquals("@", token5.getTokenText());
      assertEquals(16, token5.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (2) (})", string0);
      
      Token token6 = new Token((-226), "}l2cqw\"@E7bO", 4, 4);
      token6.toString();
      Token token7 = xPathLexer0.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("E", token7.getTokenText());
      
      Token token8 = xPathLexer0.dots();
      assertEquals(13, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals("b", token9.getTokenText());
      assertEquals(6, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals("O", token10.getTokenText());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('P');
      assertTrue(boolean0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.935916703743362
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("Z&9#+FDLX&o2GJ-");
      xPathLexer0.number();
      xPathLexer0.dollar();
      xPathLexer0.dots();
      xPathLexer0.at();
      Token token0 = xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.leftParen();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.number();
      xPathLexer0.nextToken();
      token0.toString();
      xPathLexer0.or();
      xPathLexer0.pipe();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.comma();
      xPathLexer1.number();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.star();
      XPathLexer xPathLexer3 = new XPathLexer("yCa9 ");
      xPathLexer0.pipe();
      xPathLexer2.equals();
      xPathLexer1.not();
      xPathLexer0.literal();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer3.rightBracket();
      Token token1 = xPathLexer1.relationalOperator();
      assertNull(token1);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=2.4410152780267027
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(";x");
      Token token0 = xPathLexer0.plus();
      assertEquals(";", token0.getTokenText());
      assertEquals(5, token0.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token1 = xPathLexer0.dots();
      assertEquals(13, token1.getTokenType());
      assertEquals("x", token1.getTokenText());
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.69858552257681
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      xPathLexer0.or();
      xPathLexer0.leftParen();
      xPathLexer0.number();
      xPathLexer0.rightBracket();
      xPathLexer0.div();
      xPathLexer0.comma();
      xPathLexer0.doubleColon();
      xPathLexer0.colon();
      xPathLexer0.whitespace();
      xPathLexer0.div();
      xPathLexer0.mod();
      xPathLexer0.plus();
      xPathLexer0.number();
      xPathLexer0.comma();
      xPathLexer0.div();
      xPathLexer0.dots();
      xPathLexer0.equals();
      xPathLexer0.slashes();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer0.comma();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.515607438174334
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.whitespace();
      token2.toString();
      Token token3 = xPathLexer0.star();
      assertEquals(".", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      token0.toString();
      String string0 = token2.toString();
      assertEquals("[ (-2) ()", string0);
      
      token0.toString();
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer0.leftParen();
      token5.toString();
      token1.toString();
      String string1 = token0.toString();
      assertEquals("[ (26) (c)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (13) (o)", string2);
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("rk", token6.getTokenText());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals(15, token8.getTokenType());
      assertEquals("n.saxpath.XPathLexer", token8.getTokenText());
      
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      String string3 = token5.toString();
      assertEquals("[ (1) (e)", string3);
      
      Token token11 = xPathLexer0.colon();
      assertEquals(18, token11.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.identifier();
      xPathLexer0.or();
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.745101015274802
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer0.plus();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer1.identifier();
      XPathLexer xPathLexer2 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer3.dollar();
      xPathLexer1.colon();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.comma();
      xPathLexer1.number();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.star();
      XPathLexer xPathLexer6 = new XPathLexer("=r/uoJ-ob<");
      xPathLexer6.pipe();
      xPathLexer1.equals();
      xPathLexer1.not();
      xPathLexer3.literal();
      xPathLexer4.number();
      xPathLexer5.comma();
      XPathLexer xPathLexer7 = new XPathLexer("^&hfH-");
      xPathLexer7.equals();
      xPathLexer6.dots();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer8.notEquals();
      Token token0 = xPathLexer1.or();
      assertNull(token0);
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.3345491092125656
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y8M8[nr;$?*M@ecb4g");
      xPathLexer0.identifier();
      xPathLexer0.slashes();
      xPathLexer0.identifier();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.3195749966735852
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("y8M8[nr;$?*M@ecb4g");
      xPathLexer0.identifier();
      xPathLexer0.identifier();
      xPathLexer0.minus();
      Token token0 = xPathLexer0.literal();
      assertNull(token0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.5843425151036632
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.dollar();
      Token token1 = xPathLexer0.dots();
      Token token2 = xPathLexer0.whitespace();
      token2.toString();
      Token token3 = xPathLexer0.star();
      token0.toString();
      String string0 = token2.toString();
      assertEquals("[ (-2) ()", string0);
      
      token0.toString();
      Token token4 = xPathLexer0.not();
      Token token5 = xPathLexer0.leftParen();
      token5.toString();
      token1.toString();
      String string1 = token0.toString();
      assertEquals("[ (26) (c)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (13) (o)", string2);
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("rk", token6.getTokenText());
      
      xPathLexer0.setPreviousToken(token4);
      xPathLexer0.operatorName();
      String string3 = token5.toString();
      assertEquals("[ (1) (e)", string3);
      
      Token token7 = xPathLexer0.identifier();
      assertEquals("en.saxpath.XPathLexer", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertNull(token8);
      
      Token token9 = new Token(512, "com.werken.saxpath.XPathLexer", (-1), (-1));
      String string4 = token3.toString();
      assertEquals(".", token3.getTokenText());
      assertEquals("[ (20) (.)", string4);
      
      token4.toString();
      Token token10 = xPathLexer0.notEquals();
      assertEquals(22, token10.getTokenType());
      
      xPathLexer0.setPreviousToken(token2);
      XPathLexer xPathLexer1 = new XPathLexer("31[R>'7lz-h");
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token11 = xPathLexer0.identifier();
      assertEquals(15, token11.getTokenType());
      
      xPathLexer0.or();
      Token token12 = xPathLexer0.nextToken();
      assertEquals((-1), token12.getTokenType());
  }
}
