/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 15:43:38 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.event.MouseWheelListener;
import java.awt.event.TextListener;
import java.beans.PropertyChangeListener;
import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.text.DateFormatSymbols;
import java.text.ParsePosition;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import javax.swing.AbstractButton;
import javax.swing.DebugGraphics;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JEditorPane;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JPopupMenu;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.TransferHandler;
import javax.swing.event.MenuKeyEvent;
import javax.swing.tree.DefaultTreeCellRenderer;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGFeFloodElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.ext.awt.image.renderable.Filter;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.GraphicsNode;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.svggen.SVGGraphics2D;
import org.apache.crimson.tree.XmlDocument;
import org.apache.html.dom.HTMLDocumentImpl;
import org.apache.html.dom.HTMLFormElementImpl;
import org.apache.xerces.dom.DocumentImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import plugins.collaboration.database.DatabaseConnectionHook;
import plugins.map.MapDialog;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.1700419077878936
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      assertEquals(14, jDayChooser0.getDay());
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDate mockDate0 = new MockDate(8, 1, 9, 2, 4);
      jDayChooser0.setDay(1);
      mockDate0.setTime(4);
      jDayChooser0.getSelectedDay();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(mockDate0);
      jDayChooser0.addListeners(5);
      SystemColor systemColor0 = SystemColor.menuText;
      jDayChooser0.setWeekdayForeground(systemColor0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlHighlight;
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.170141997868967
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      SystemColor systemColor0 = SystemColor.textHighlight;
      jDayChooser0.weekdayForeground = (Color) systemColor0;
      jDayChooser0.getMouseMotionListeners();
      systemColor0.getRGBComponents((float[]) null);
      jDayChooser0.setDebugGraphicsOptions(39);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "10");
      jDayChooser0.setFocus();
      jDayChooser0.updateUI();
      jDayChooser0.getWeekdayForeground();
      System.setCurrentTimeMillis(39);
      jDayChooser0.drawDays();
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.setLocale(locale0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.1700057348814004
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isDecorationBordersVisible();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      jDayChooser0.drawDays();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DocumentImpl documentImpl0 = new DocumentImpl();
      SVGGraphics2D sVGGraphics2D0 = new SVGGraphics2D(documentImpl0);
      SVGGraphics2D sVGGraphics2D1 = new SVGGraphics2D(sVGGraphics2D0);
      SVGFeFloodElementBridge sVGFeFloodElementBridge0 = new SVGFeFloodElementBridge();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      HTMLDocumentImpl hTMLDocumentImpl0 = new HTMLDocumentImpl();
      HTMLFormElementImpl hTMLFormElementImpl0 = new HTMLFormElementImpl(hTMLDocumentImpl0, "day");
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      RootGraphicsNode rootGraphicsNode0 = canvasGraphicsNode0.getRoot();
      HashMap<MapDialog.ResultTableModel, MockGregorianCalendar> hashMap0 = new HashMap<MapDialog.ResultTableModel, MockGregorianCalendar>();
      // Undeclared exception!
      try { 
        sVGFeFloodElementBridge0.createFilter(bridgeContext0, hTMLFormElementImpl0, hTMLFormElementImpl0, (GraphicsNode) null, (Filter) null, rootGraphicsNode0.VIEWPORT, hashMap0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.apache.html.dom.HTMLDocumentImpl cannot be cast to org.apache.batik.dom.svg.SVGOMDocument
         //
         verifyException("org.apache.batik.bridge.CSSUtilities", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      XmlDocument xmlDocument0 = new XmlDocument();
      Locale locale1 = Locale.KOREAN;
      Calendar.getAvailableCalendarTypes();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-453), (byte) (-127), (-1349), 21, (-453), 799);
      ActionEvent actionEvent0 = new ActionEvent("Dialog Plain 11", (-265), "accessories.plugins.time.JDayChooser$DecoratorButton", 3185, (-1220));
      Object object0 = jDayChooser0.getTreeLock();
      jDayChooser0.getClientProperty(object0);
      actionEvent0.setSource((Object) null);
      actionEvent0.paramString();
      mockGregorianCalendar0.set(210, (-453), 39, 4008, 63722, (-1565));
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.200874025644453
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      JButton jButton0 = new JButton("6");
      jDayChooser0.selectedDay = jButton0;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMonth(10);
      jDayChooser0.setDay(6);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setFont((Font) null);
      jDayChooser0.getDay();
      assertEquals(6, jDayChooser0.getDay());
      
      int int0 = jDayChooser1.getMaxDayCharacters();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.266859288897445
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.setMonth(2463);
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster aWTEventMulticaster2 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster1, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((TextListener) aWTEventMulticaster0, (TextListener) aWTEventMulticaster2);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DebugGraphics debugGraphics1 = new DebugGraphics();
      jDayChooser0.setMaxDayCharacters(36);
      jDayChooser0.setDay((-1165));
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 3, 458L, 36, 36, '_', 0);
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement((jdbcConnection) null, "ylPtf7d", (-1165));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.165650545783184
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = JDayChooser.DAY_PROPERTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      JYearChooser jYearChooser0 = new JYearChooser();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setMonth(110);
      jDayChooser1.setDay(253);
      jDayChooser1.updateUI();
      assertEquals(31, jDayChooser1.getDay());
      
      jDayChooser0.setFocus();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.24107227422712
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setMonth(10);
      jDayChooser0.setDay(6);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      jDayChooser1.setMonthChooser(jMonthChooser0);
      jDayChooser1.setFont((Font) null);
      jDayChooser0.getDay();
      jDayChooser0.isDayBordersVisible();
      assertEquals(6, jDayChooser0.getDay());
      
      jDayChooser1.setDecorationBackgroundVisible(true);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.createVolatileImage(812, 335);
      jDayChooser0.setDayBordersVisible(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 335, 2004L, 812, 2, 'i', 2);
      jDayChooser0.keyTyped(keyEvent0);
      // Undeclared exception!
      try { 
        Timestamp.valueOf("27");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Timestamp format must be yyyy-mm-dd hh:mm:ss[.fffffffff]
         //
         verifyException("java.sql.Timestamp", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2055099842350803
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), 11, (-3478), (-68), '5');
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      Object object0 = new Object();
      System.setCurrentTimeMillis(11);
      jDayChooser0.weekPanel = null;
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.getLocale();
      jDayChooser0.drawWeeks();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      jDayChooser0.setForeground(systemColor0);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1033434630551433
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.drawWeeks();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.setMaxDayCharacters(3);
      jDayChooser0.setDay((-2556));
      JMapViewer jMapViewer0 = new JMapViewer();
      DatabaseConnectionHook databaseConnectionHook0 = new DatabaseConnectionHook();
      databaseConnectionHook0.getMindMapController();
      JDialog jDialog0 = null;
      int int0 = 3185;
      String string0 = "0m o)P1aQhz";
      ActionEvent actionEvent0 = null;
      try {
        actionEvent0 = new ActionEvent((Object) null, 3185, "0m o)P1aQhz", (-265), 16);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // null source
         //
         verifyException("java.util.EventObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.2345278685325436
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-1165));
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      XmlDocument xmlDocument0 = new XmlDocument();
      Locale locale1 = Locale.KOREAN;
      Calendar.getAvailableCalendarTypes();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-453), (byte) (-127), (-1349), 21, (-453), 799);
      ActionEvent actionEvent0 = new ActionEvent("Dialog Plain 11", (-265), "accessories.plugins.time.JDayChooser$DecoratorButton", 3185, (-1220));
      Object object0 = jDayChooser0.getTreeLock();
      jDayChooser0.getClientProperty(object0);
      actionEvent0.setSource((Object) null);
      jDayChooser0.setDayBordersVisible(true);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(boolean0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1815512626204407
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.apache.batik.svggen.SVGGeneratorContext$GraphicContextDefaults");
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.setMaxDayCharacters((-1268));
      jDayChooser0.setDay(45);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.292830903947242
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), 0L, (-68), 11, '5');
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener(hierarchyBoundsListener1);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser0.setMaxDayCharacters(11);
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-3981));
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setFocus();
      Locale locale0 = Locale.KOREA;
      JDayChooser jDayChooser1 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser1.yearChooser;
      jDayChooser1.setLocale(locale0);
      jDayChooser1.keyPressed(keyEvent0);
      jDayChooser1.addListeners(11);
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.13365336187828
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      DateFormatSymbols dateFormatSymbols0 = new DateFormatSymbols();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      ParsePosition parsePosition0 = new ParsePosition((-3332));
      MockDate mockDate0 = new MockDate((-3332), (-3332), (-3332));
      jDayChooser0.setFocus();
      jDayChooser0.setYearChooser((JYearChooser) null);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.356708390744127
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener2);
      AWTEventMulticaster.remove(hierarchyBoundsListener3, hierarchyBoundsListener3);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener(hierarchyBoundsListener2);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      Date date0 = jDayChooser0.minSelectableDate;
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setSelectableDateRange(date1, date0);
      jDayChooser0.setWeekOfYearVisible(false);
      jDayChooser1.setMaxDayCharacters(1271);
      jDayChooser1.getDecorationBackgroundColor();
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertFalse(jDayChooser1.isDecorationBordersVisible());
      assertEquals(0, jDayChooser1.getMaxDayCharacters());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlHighlight;
      systemColor0.getRGBComponents((float[]) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getMinSelectableDate();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.234515642846377
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDay((-68));
      jDayChooser0.transferFocus();
      jDayChooser0.setFont((Font) null);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-68));
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.getLocale();
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getDay();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.1880571441603145
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), 11, (-3478), (-68), '5');
      keyEvent0.paramString();
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.updateUI();
      jDayChooser0.drawWeeks();
      JDayChooser jDayChooser2 = new JDayChooser(false);
      jDayChooser1.setMinSelectableDate((Date) null);
      JDayChooser jDayChooser3 = new JDayChooser();
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2308802695494605
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters(10);
      jDayChooser0.drawWeeks();
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      jDayChooser0.setYear(10);
      jDayChooser0.isOpaque();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.setFocus();
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      int int1 = jDayChooser0.getDaysInMonth();
      assertEquals(28, int1);
      
      jDayChooser0.drawDays();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SystemColor systemColor0 = SystemColor.controlHighlight;
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.1700300170400846
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.init();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.drawWeeks();
      jDayChooser0.setMinSelectableDate(mockDate0);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.2756703492239843
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte) (-64);
      jDayChooser0.getAlignmentY();
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)52;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.doLayout();
      jDayChooser1.contains((int) (byte)124, (int) (byte)90);
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setMaxDayCharacters(6);
      jDayChooser0.drawWeeks();
      jDayChooser2.setWeekOfYearVisible(true);
      assertEquals(14, jDayChooser2.getDay());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser1.setMonth(2390);
      jDayChooser2.setDay((byte)52);
      jDayChooser2.setFocus();
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.173055321938907
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(33);
      jDayChooser0.updateUI();
      ParsePosition parsePosition0 = new ParsePosition(10);
      MockDate mockDate0 = new MockDate((-1198), (-337), 10);
      Instant instant0 = MockInstant.ofEpochMilli(3);
      Timestamp timestamp0 = Timestamp.from(instant0);
      jDayChooser0.setSelectableDateRange(timestamp0, mockDate0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.333197118968658
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3251, 3251, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day");
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.setMinSelectableDate(date0);
      assertSame(date1, date0);
      
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      float[] floatArray0 = new float[4];
      floatArray0[0] = (float) 3251;
      floatArray0[1] = (float) (-56);
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.setFocus();
      jDayChooser0.setSundayForeground(systemColor0);
      jDayChooser0.getLocale();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener0);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.createVolatileImage(1, (-1002));
      jDayChooser0.getLocale();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getFont();
      jDayChooser0.setFont((Font) null);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.133754759903554
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.init();
      assertEquals(14, jDayChooser0.getDay());
      
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      MockDate mockDate0 = new MockDate(8, 1, 9, 2, 4);
      jDayChooser0.setDay(1);
      mockDate0.setTime(4);
      jDayChooser0.getSelectedDay();
      Date date0 = jDayChooser0.defaultMinSelectableDate;
      jDayChooser0.setMaxSelectableDate(mockDate0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.154973867884393
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener2);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener2);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setDayBordersVisible(true);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser1.drawDays();
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      XmlDocument xmlDocument0 = new XmlDocument();
      Locale locale1 = Locale.KOREAN;
      Calendar.getAvailableCalendarTypes();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-453), (byte) (-127), (-1349), 21, (-453), 799);
      ActionEvent actionEvent0 = new ActionEvent("Dialog Plain 11", (-265), "accessories.plugins.time.JDayChooser$DecoratorButton", 3185, (-1220));
      Object object0 = jDayChooser0.getTreeLock();
      jDayChooser0.getClientProperty(object0);
      actionEvent0.setSource((Object) null);
      MockGregorianCalendar mockGregorianCalendar1 = new MockGregorianCalendar(663, 63731, (-1), 12, (-1914));
      actionEvent0.setSource(mockGregorianCalendar1);
      actionEvent0.paramString();
      mockGregorianCalendar0.set(210, (-453), 39, 4008, 63722, (-1565));
      actionEvent0.paramString();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.evosuite.runtime.mock.java.util.MockGregorianCalendar cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(420);
      mockSimpleDateFormat0.parse("endInclination", parsePosition0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 33, false);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.2021264500326914
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removePropertyChangeListener("|cS<~n\tH", (PropertyChangeListener) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = Color.lightGray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getSundayForeground();
      int int0 = 2798;
      File file0 = MockFile.createTempFile("|cS<~n\tH", "day");
      try { 
        MockFile.createTempFile("|cS<~n\tH", "|cS<~n\tH", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(988);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String string0 = AbstractButton.MNEMONIC_CHANGED_PROPERTY;
      String[] stringArray0 = new String[5];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mnemonic");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Timestamp timestamp0 = new Timestamp(2362);
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.0587281784800973
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster aWTEventMulticaster0 = (AWTEventMulticaster)AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster aWTEventMulticaster1 = (AWTEventMulticaster)AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((InputMethodListener) aWTEventMulticaster0, (InputMethodListener) aWTEventMulticaster0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) aWTEventMulticaster1);
      AWTEventMulticaster.add((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) aWTEventMulticaster0, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      boolean boolean0 = new Boolean("model");
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createVolatileImage(1, (-1002));
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1609349675619263
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters(10);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.createVolatileImage(3944, 335);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createVolatileImage(1, (-1002));
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.createVolatileImage((-1002), (-1));
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.202283502282767
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.drawWeeks();
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      jDayChooser0.removeMouseWheelListener((MouseWheelListener) null);
      jDayChooser0.updateUI();
      jDayChooser0.getDaysInMonth();
      SystemColor systemColor0 = SystemColor.infoText;
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      jDayChooser0.getWeekdayForeground();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.058591591902833
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 4;
      jDayChooser0.getToolkit();
      char char0 = '4';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 0L, 4, 4, '4', 4);
      keyEvent0.paramString();
      jDayChooser0.keyReleased(keyEvent0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "unknown type,keyCode=4,keyText=Unknown keyCode: 0x4,keyChar='4',modifiers=Meta,extModifiers=Meta,keyLocation=KEY_LOCATION_NUMPAD,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), 11, (-3478), (-68), '5');
      jDayChooser0.setDay(11);
      assertEquals(11, jDayChooser0.getDay());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.096578338635442
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), 11, (-3478), (-68), '5');
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      Object object0 = new Object();
      ActionEvent actionEvent0 = new ActionEvent(object0, (-3478), "JDayChooser", (-356L), (-453));
      actionEvent0.paramString();
      jDayChooser0.getDaysInMonth();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.054112235052666
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.add((MouseWheelListener) null, (MouseWheelListener) null);
      AWTEventMulticaster.remove((MouseWheelListener) null, (MouseWheelListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDay((-3526));
      jDayChooser0.getDaysInMonth();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.2311377441281905
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      jDayChooser0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      jDayChooser0.firePropertyChange("", (byte)51, (byte)119);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JEditorPane jEditorPane0 = new JEditorPane("VUNz',f8)E_ 7hG\"H", "");
      Insets insets0 = jEditorPane0.getMargin();
      jMonthChooser0.getInsets(insets0);
      jMonthChooser0.setVisible(true);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.setDay(0);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.1962175022002226
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(199, 199, (-68), 11);
      jDayChooser0.setAlwaysFireDayProperty(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0585780752841503
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.initDecorations();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2298557852290584
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(812);
      JMenuBar jMenuBar0 = new JMenuBar();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jMenuBar0.getComponentListeners();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JPopupMenu jPopupMenu0 = new JPopupMenu("W$8tb:c@KxJ");
      TransferHandler.getCutAction();
      JMenu jMenu0 = new JMenu();
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenuBar0;
      menuElementArray0[2] = (MenuElement) jMenuBar0;
      menuElementArray0[3] = (MenuElement) jMenuBar0;
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, (-1188), 0L, 812, 40000, '{', menuElementArray0, menuSelectionManager0);
      jDayChooser1.keyPressed(menuKeyEvent0);
      menuKeyEvent0.setKeyChar('{');
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.setFocus();
      JDayChooser jDayChooser3 = new JDayChooser();
      JYearChooser jYearChooser0 = jDayChooser3.yearChooser;
      jDayChooser0.isDayBordersVisible();
      jDayChooser2.keyPressed(menuKeyEvent0);
      jDayChooser2.updateUI();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2294066062808935
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setFocusTraversalPolicyProvider(false);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(812);
      JMenuBar jMenuBar0 = new JMenuBar();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jMenuBar0.getComponentListeners();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JPopupMenu jPopupMenu0 = new JPopupMenu("W$8tb:c@KxJ");
      TransferHandler.getCutAction();
      JMenu jMenu0 = new JMenu();
      jMenu0.getMargin();
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenuBar0;
      menuElementArray0[2] = (MenuElement) jMenuBar0;
      menuElementArray0[3] = (MenuElement) jMenuBar0;
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser1, (-1188), 0L, 812, 40000, '{', menuElementArray0, menuSelectionManager0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jDayChooser1.keyPressed(menuKeyEvent0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser1.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser1.createVolatileImage((-4201), 27);
      jDayChooser1.getDayPanel();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1588985878803424
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setEnabled(false);
      assertEquals(14, jDayChooser1.getDay());
      assertTrue(jDayChooser1.isWeekOfYearVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.205435033889684
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = AbstractButton.MODEL_CHANGED_PROPERTY;
      String[] stringArray0 = new String[5];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[1] = "model";
      stringArray0[2] = "3";
      stringArray0[3] = "1";
      JDayChooser jDayChooser0 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp(2362);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      int int1 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int1);
      
      jDayChooser0.getSelectedDay();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.169993336394016
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      Timestamp timestamp0 = new Timestamp(3999L);
      Date date0 = jDayChooser0.setMaxSelectableDate(timestamp0);
      jDayChooser0.setMinSelectableDate(date0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.200756401597422
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      JMenuBar jMenuBar0 = new JMenuBar();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jMenuBar0.getComponentListeners();
      MenuElement[] menuElementArray0 = new MenuElement[5];
      JPopupMenu jPopupMenu0 = new JPopupMenu("W$8tb:c@KxJ");
      TransferHandler.getCutAction();
      JMenu jMenu0 = new JMenu();
      menuElementArray0[0] = (MenuElement) jMenu0;
      menuElementArray0[1] = (MenuElement) jMenuBar0;
      menuElementArray0[2] = (MenuElement) jMenuBar0;
      menuElementArray0[3] = (MenuElement) jMenuBar0;
      menuElementArray0[0] = (MenuElement) jMenuBar0;
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, (-1188), 0L, 812, 40000, '{', menuElementArray0, menuSelectionManager0);
      jDayChooser0.keyPressed(menuKeyEvent0);
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      JDayChooser jDayChooser1 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.createVolatileImage((-1168), 3237);
      int int0 = jDayChooser0.getDay();
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, int0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }
}
