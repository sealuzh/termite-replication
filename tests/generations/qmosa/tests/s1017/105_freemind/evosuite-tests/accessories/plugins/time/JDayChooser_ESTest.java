/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 10:47:14 GMT 2020
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.modes.browsemode.BrowseController;
import freemind.modes.filemode.FileMode;
import java.awt.AWTEventMulticaster;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.Insets;
import java.awt.SystemColor;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.HierarchyBoundsListener;
import java.awt.event.KeyEvent;
import java.awt.event.TextListener;
import java.beans.PropertyChangeListener;
import java.beans.VetoableChangeListener;
import java.beans.VetoableChangeListenerProxy;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.io.SequenceInputStream;
import java.text.DateFormatSymbols;
import java.text.MessageFormat;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Collection;
import java.util.Date;
import java.util.Enumeration;
import java.util.List;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.TimeZone;
import java.util.Vector;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import javax.swing.DebugGraphics;
import javax.swing.DefaultListCellRenderer;
import javax.swing.DefaultListModel;
import javax.swing.JButton;
import javax.swing.JColorChooser;
import javax.swing.JEditorPane;
import javax.swing.JList;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.text.DefaultStyledDocument;
import javax.swing.text.Element;
import javax.swing.text.LabelView;
import javax.swing.text.StyleContext;
import org.apache.batik.bridge.SVGTextElementBridge;
import org.apache.batik.gvt.RootGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.crimson.tree.XmlDocument;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.hsqldb.Result;
import org.hsqldb.Session;
import org.hsqldb.jdbc.jdbcCallableStatement;
import org.hsqldb.jdbc.jdbcConnection;
import org.jibx.runtime.impl.UnmarshallingContext;
import org.junit.runner.RunWith;
import org.openstreetmap.gui.jmapviewer.JMapViewer;
import org.openstreetmap.gui.jmapviewer.OsmFileCacheTileLoader;
import org.openstreetmap.gui.jmapviewer.tilesources.TemplatedTMSTileSource;
import org.xml.sax.SAXParseException;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.6442551993262904
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Locale locale0 = jDayChooser0.locale;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.CHINA;
      Locale.setDefault(locale0);
      Locale locale2 = Locale.FRANCE;
      jDayChooser0.setMaxDayCharacters(1);
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(1);
      jDayChooser0.setLocale(locale1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.75392703780395
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.info;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 40.0F;
      floatArray0[1] = 257.74F;
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 40, 10144, 10144, 40, 'w');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-1968));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay('w');
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.7736275476159054
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      Insets insets0 = jDayChooser0.getInsets();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JList<String> jList0 = new JList<String>();
      Object object0 = new Object();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      Component component0 = defaultListCellRenderer_UIResource1.getListCellRendererComponent(jList0, insets0, (-681), true, false);
      KeyEvent keyEvent0 = new KeyEvent(component0, (-1028), 0, 11, (-4331), '^');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(0);
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(11);
      jDayChooser0.setMonth(3691);
      jDayChooser0.setFocus();
      assertEquals(11, jDayChooser0.getDay());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.749800424918577
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      Insets insets0 = jDayChooser0.getInsets();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JList<String> jList0 = new JList<String>();
      Object object0 = new Object();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource1 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource1.getListCellRendererComponent(jList0, insets0, (-681), true, false);
      KeyEvent keyEvent0 = new KeyEvent(jList0, (-1028), 1508L, (-4036), (-2841), '^');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(1);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay((-681));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.6477744711335873
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      boolean boolean0 = true;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(33);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.FRANCE;
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      ActionEvent actionEvent0 = new ActionEvent(jDayChooser_DecoratorButton0, (-1165), "day", 2);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.info;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 40.0F;
      floatArray0[1] = 257.74F;
      floatArray0[2] = 2280.1099F;
      floatArray0[3] = 257.74F;
      jDayChooser0.updateUI();
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed((ActionEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.8179857507806534
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(33);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.drawWeeks();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("q]_1$_^[X", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("q]_1$_^[X", vetoableChangeListenerProxy0);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.getMaxDayCharacters();
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      jDayChooser0.isWeekOfYearVisible();
      jDayChooser0.setLocale(locale0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.8444340285532648
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      jDayChooser0.setEnabled(false);
      FileMode fileMode0 = new FileMode();
      jDayChooser0.isWeekOfYearVisible();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 228, 228, (-368), 47, 'G');
      jDayChooser0.keyPressed(keyEvent0);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters((-1165));
      jDayChooser1.drawWeeks();
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(228);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.8645700957677156
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3260, 3260, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      jDayChooser0.getMaxDayCharacters();
      mockSimpleDateFormat0.get2DigitYearStart();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.firePropertyChange("31", '=', '=');
      jDayChooser_DecoratorButton0.getClientProperty(mockSimpleDateFormat0);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton1.getSelectedObjects();
      jDayChooser_DecoratorButton1.isFocusable();
      Font.getFont("14");
      Font font0 = Font.decode("f");
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth((-1111));
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      JButton jButton0 = jDayChooser0.getSelectedDay();
      assertNull(jButton0);
      
      jDayChooser0.drawDays();
      jDayChooser0.setYear((-2680));
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.7407204702569876
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(33);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.FRANCE;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.minSelectableDate;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "}8xtQI{5!gP`0Q@";
      stringArray0[4] = "day";
      dateFormatSymbols0.setMonths(stringArray0);
      MockDate mockDate0 = new MockDate((-1165), 14, (-192), 1620, 33, (-192));
      jDayChooser0.setSelectableDateRange(date0, mockDate0);
      jDayChooser0.setEnabled(true);
      jDayChooser0.getDaysInMonth();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.8044846593838404
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(33);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.FRANCE;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.setEnabled(false);
      jDayChooser0.getMaxDayCharacters();
      jDayChooser0.getSundayForeground();
      jDayChooser0.addListeners(0);
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.7451063280253565
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setMaxDayCharacters((-17));
      jDayChooser0.drawWeeks();
      jDayChooser0.decorationBackgroundVisible = false;
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(214);
      jDayChooser0.updateUI();
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.drawWeeks();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay((-1229));
      jDayChooser0.isDecorationBackgroundVisible();
      int int0 = jDayChooser0.getDay();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.7376047233857554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.info;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 40.0F;
      floatArray0[1] = 257.74F;
      floatArray0[2] = 2280.1099F;
      MenuSelectionManager menuSelectionManager1 = new MenuSelectionManager();
      jDayChooser0.setEnabled(false);
      Date date0 = jDayChooser0.getMinSelectableDate();
      jDayChooser0.setMaxSelectableDate(date0);
      System.setCurrentTimeMillis((-3080L));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.701765291241601
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      jDayChooser0.firePropertyChange("", (byte)51, (byte)51);
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JEditorPane jEditorPane0 = new JEditorPane("month", "VUGuNz',f8)E_ 7hG\"H");
      MessageFormat messageFormat0 = new MessageFormat("");
      jEditorPane0.getPrintable(messageFormat0, messageFormat0);
      Insets insets0 = jEditorPane0.getMargin();
      jMonthChooser0.getInsets(insets0);
      jMonthChooser0.requestFocus(false);
      jEditorPane0.getWidth();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setDay(0);
      jDayChooser0.setWeekOfYearVisible(false);
      Color color0 = Color.red;
      try { 
        JColorChooser.showDialog(jEditorPane0, "^D4ZS.a5!", color0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.7938143266681923
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getDayPanel();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(34, "org.apache.batik.apps.svgbrowser.JSVGViewerFrame$FlushAction");
      Calendar calendar0 = MockCalendar.getInstance((TimeZone) simpleTimeZone0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters(20);
      jDayChooser0.drawWeeks();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("14", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy((String) null, vetoableChangeListenerProxy0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay(53);
      boolean boolean0 = jDayChooser0.isDecorationBackgroundVisible();
      assertTrue(boolean0);
      
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertFalse(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.760697355543854
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(33);
      Locale locale0 = Locale.FRANCE;
      jDayChooser0.drawWeeks();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.setDay((-1165));
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.701765291241601
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      Locale locale0 = jDayChooser0.locale;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.CHINA;
      locale1.getDisplayName();
      Locale.setDefault(locale1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      jDayChooser0.setDay((-3625));
      Locale locale2 = new Locale("/>9*U@_xt8Bc+L", "day");
      jDayChooser0.setLocale(locale2);
      jDayChooser0.getLocale();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "day";
      stringArray0[1] = "day";
      stringArray0[2] = "day";
      stringArray0[3] = "/>9*U@_xt8Bc+L";
      stringArray0[4] = "/>9*U@_xt8Bc+L";
      stringArray0[5] = "day";
      stringArray0[6] = "/>9*U@_xt8Bc+L";
      stringArray0[7] = "day";
      stringArray0[8] = "day";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6665081787162883
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3478), 0L, 22, (-3478), 'b');
      KeyEvent.getKeyModifiersText((-3478));
      keyEvent0.paramString();
      jDayChooser0.isOptimizedDrawingEnabled();
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay(233);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.updateUI();
      Locale locale0 = Locale.FRANCE;
      jDayChooser1.drawWeeks();
      jDayChooser0.setMonth((-3478));
      jDayChooser1.getDay();
      jDayChooser1.getSelectedDay();
      jDayChooser1.setDay(22);
      assertEquals(22, jDayChooser1.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.7499727356053123
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      DefaultListModel<String> defaultListModel0 = new DefaultListModel<String>();
      JList<String> jList0 = new JList<String>(defaultListModel0);
      jList0.getY();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 2221, 2147483647L, 102, 33, 'z');
      JDayChooser jDayChooser1 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser1.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.7039446318508737
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 1148, 1018L, 38, 228, 'g', (MenuElement[]) null, menuSelectionManager0);
      jDayChooser0.keyTyped(menuKeyEvent0);
      jDayChooser0.setEnabled(false);
      FileMode fileMode0 = new FileMode();
      BrowseController browseController0 = null;
      try {
        browseController0 = new BrowseController(fileMode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.modes.ControllerAdapter", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.823677486564825
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingTile();
      jDayChooser0.setDay(938);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(10);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JList<Object> jList0 = new JList<Object>();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.getListCellRendererComponent(jList0, defaultListCellRenderer_UIResource0, 28, true, false);
      KeyEvent keyEvent0 = new KeyEvent(defaultListCellRenderer_UIResource0, 1, 0L, 1, 10022, '8');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(459);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.drawWeeks();
      assertEquals(14, jDayChooser1.getDay());
      
      jDayChooser1.setDay(32);
      assertEquals(28, jDayChooser1.getDay());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte) (-83);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getMinSelectableDate();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.812592629834995
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.updateUI();
      jDayChooser0.getVetoableChangeListeners();
      jDayChooser0.getDayPanel();
      Insets insets0 = jDayChooser0.getInsets();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      insets0.clone();
      JList<String> jList0 = new JList<String>();
      CardLayout cardLayout0 = new CardLayout();
      Dimension dimension0 = cardLayout0.maximumLayoutSize(defaultListCellRenderer_UIResource0);
      defaultListCellRenderer_UIResource0.setPreferredSize(dimension0);
      Object object0 = new Object();
      jDayChooser0.setWeekdayForeground((Color) null);
      Component component0 = defaultListCellRenderer_UIResource0.getListCellRendererComponent(jList0, object0, 0, false, false);
      jDayChooser0.weekdayForeground = null;
      jList0.getY();
      KeyEvent keyEvent0 = new KeyEvent(component0, 0, (-1783L), (-2448), 33, '_');
      KeyEvent.getExtendedKeyCodeForChar(Integer.MAX_VALUE);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.635484863709782
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Locale locale0 = Locale.JAPAN;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setLocale(locale0);
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      assertFalse(jYearChooser0.isFocusTraversalPolicySet());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.660726144843012
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removePropertyChangeListener("|UcS<~n\tH", (PropertyChangeListener) null);
      jDayChooser0.setFocusTraversalPolicyProvider(true);
      jDayChooser0.createVolatileImage(44, 44);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDayBordersVisible(true);
      jDayChooser1.setFocus();
      assertTrue(jDayChooser1.isDecorationBackgroundVisible());
      assertTrue(jDayChooser1.isDayBordersVisible());
      
      jDayChooser0.focusLost((FocusEvent) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.714323055955069
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      ParsePosition parsePosition0 = new ParsePosition(0);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      StyleContext styleContext0 = new StyleContext();
      DefaultStyledDocument defaultStyledDocument0 = new DefaultStyledDocument(styleContext0);
      Element element0 = defaultStyledDocument0.getBidiRootElement();
      LabelView labelView0 = new LabelView(element0);
      Color color0 = labelView0.getForeground();
      jDayChooser0.setSundayForeground(color0);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.804506987817414
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 11, 3251, 3, 3251, '=');
      jDayChooser0.keyPressed(keyEvent0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      int int0 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int0);
      
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.isDayBordersVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.7419541084422874
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isPaintingTile();
      jDayChooser0.setDay(10);
      jDayChooser0.getDaysInMonth();
      jDayChooser0.setMonth(28);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.isFocusable();
      Font.getFont("7af\"jIhNa{u");
      Font font0 = Font.decode("accessories.plugins.time.JDayChooser$DecoratorButton");
      jDayChooser0.setFont(font0);
      jDayChooser0.setMonth(2910);
      jDayChooser0.getDay();
      jDayChooser0.getSelectedDay();
      jDayChooser0.drawDays();
      assertEquals(10, jDayChooser0.getDay());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6717601208463124
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-68), (-48), (-3478), (-68), '5');
      keyEvent0.paramString();
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.remove(hierarchyBoundsListener2, hierarchyBoundsListener2);
      jDayChooser_DecoratorButton0.addHierarchyBoundsListener((HierarchyBoundsListener) null);
      DebugGraphics debugGraphics0 = new DebugGraphics();
      jDayChooser_DecoratorButton0.paint(debugGraphics0);
      jDayChooser0.isDecorationBordersVisible();
      jDayChooser0.init();
      UnmarshallingContext unmarshallingContext0 = new UnmarshallingContext();
      SystemColor systemColor0 = SystemColor.inactiveCaptionText;
      float[] floatArray0 = new float[0];
      // Undeclared exception!
      try { 
        systemColor0.getRGBComponents(floatArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("java.awt.Color", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6558715339526158
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-3478), 0L, 22, (-3478), 'b');
      keyEvent0.paramString();
      jDayChooser0.isOptimizedDrawingEnabled();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener2 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener1);
      HierarchyBoundsListener hierarchyBoundsListener3 = AWTEventMulticaster.add(hierarchyBoundsListener1, hierarchyBoundsListener2);
      HierarchyBoundsListener hierarchyBoundsListener4 = AWTEventMulticaster.add((HierarchyBoundsListener) null, hierarchyBoundsListener3);
      AWTEventMulticaster.remove(hierarchyBoundsListener4, hierarchyBoundsListener2);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton1 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.info;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (float) (-3478);
      floatArray0[1] = (float) 22;
      jDayChooser0.isDecorationBordersVisible();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.setDay((-3478));
      jDayChooser1.isDecorationBackgroundVisible();
      assertEquals(1, jDayChooser1.getDay());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      Integer integer0 = GVTAttributedCharacterIterator.TextAttribute.ADJUST_ALL;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(2021, threadFactory0);
      JMapViewer jMapViewer0 = new JMapViewer();
      OsmFileCacheTileLoader osmFileCacheTileLoader0 = new OsmFileCacheTileLoader(jMapViewer0);
      TemplatedTMSTileSource templatedTMSTileSource0 = new TemplatedTMSTileSource((String) null, "_Vb", (-1803));
      Runnable runnable0 = osmFileCacheTileLoader0.createTileLoaderJob(templatedTMSTileSource0, 22, 47, 10115);
      TimeUnit timeUnit0 = TimeUnit.MILLISECONDS;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(runnable0, 2021, 8L, timeUnit0);
      ActionEvent actionEvent0 = new ActionEvent(scheduledFuture0, 3757, "pFm6NZ]O`kl/c<l%f-2", (-2599));
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.concurrent.ScheduledThreadPoolExecutor$ScheduledFutureTask cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.671760120846313
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlwaysFireDayProperty(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(420);
      mockSimpleDateFormat0.parse("endInclination", parsePosition0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, 33, false);
      jDayChooser0.focusGained(focusEvent0);
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.7039446318508733
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.removePropertyChangeListener("|UcS<~n\tH", (PropertyChangeListener) null);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      Color color0 = Color.lightGray;
      jDayChooser0.setDecorationBackgroundColor(color0);
      jDayChooser0.isDecorationBackgroundVisible();
      jDayChooser0.getSundayForeground();
      int int0 = 2798;
      File file0 = MockFile.createTempFile("|UcS<~n\tH", "day");
      try { 
        MockFile.createTempFile("|UcS<~n\tH", "|UcS<~n\tH", file0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.7224594586487965
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3251, 3251, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters((-1165));
      jDayChooser0.drawWeeks();
      jDayChooser0.setDay((-56));
      // Undeclared exception!
      try { 
        jDayChooser0.addListeners(3251);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      String[] stringArray0 = new String[2];
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.getDecorationBackgroundColor();
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("", (VetoableChangeListener) null);
      assertEquals("", vetoableChangeListenerProxy0.getPropertyName());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6527697871323417
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      Locale locale0 = Locale.ENGLISH;
      VetoableChangeListener vetoableChangeListener0 = mock(VetoableChangeListener.class, new ViolatedAssumptionAnswer());
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("Windows", vetoableChangeListener0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy(" is/<`", vetoableChangeListenerProxy0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy2 = new VetoableChangeListenerProxy("Eif", vetoableChangeListenerProxy1);
      jDayChooser0.addVetoableChangeListener((VetoableChangeListener) null);
      jDayChooser0.getMaxSelectableDate();
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.804506987817414
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JList<String> jList0 = new JList<String>();
      CardLayout cardLayout0 = new CardLayout();
      Dimension dimension0 = cardLayout0.maximumLayoutSize(defaultListCellRenderer_UIResource0);
      defaultListCellRenderer_UIResource0.setPreferredSize(dimension0);
      Object object0 = new Object();
      defaultListCellRenderer_UIResource0.getListCellRendererComponent(jList0, cardLayout0, 10, false, false);
      jList0.getY();
      KeyEvent keyEvent0 = new KeyEvent(jList0, (-2448), (-1783L), 0, (-1158), '_');
      jDayChooser0.keyPressed(keyEvent0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("font-stretch", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("5", (VetoableChangeListener) null);
      jDayChooser0.setMonth(465);
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser2.getSelectedDay();
      jDayChooser1.getWeekdayForeground();
      assertFalse(jDayChooser1.isDecorationBordersVisible());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.5604230937343346
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBordersVisible(false);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      int int0 = 4;
      char char0 = '4';
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 4, 4, 4, 4, '4', 4);
      keyEvent0.paramString();
      jDayChooser0.keyReleased(keyEvent0);
      Session session0 = mock(Session.class, new ViolatedAssumptionAnswer());
      doReturn((Result) null).when(session0).execute(any(org.hsqldb.Result.class));
      jdbcConnection jdbcConnection0 = new jdbcConnection(session0);
      jdbcCallableStatement jdbcCallableStatement0 = null;
      try {
        jdbcCallableStatement0 = new jdbcCallableStatement(jdbcConnection0, "unknown type,keyCode=4,keyText=Unknown keyCode: 0x4,keyChar='4',modifiers=Meta,extModifiers=Meta,keyLocation=KEY_LOCATION_NUMPAD,rawCode=0,primaryLevelUnicode=0,scancode=0,extendedKeyCode=0x0", 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.hsqldb.jdbc.jdbcPreparedStatement", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      Locale locale0 = jDayChooser0.locale;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.CHINA;
      Locale.setDefault(locale1);
      jDayChooser0.setDay(5);
      Locale locale2 = Locale.FRANCE;
      locale0.getDisplayName(locale2);
      assertEquals(5, jDayChooser0.getDay());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.7666238054495484
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JList<String> jList0 = new JList<String>();
      Object object0 = new Object();
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = (GVTAttributedCharacterIterator.TextAttribute)SVGTextElementBridge.ALT_GLYPH_HANDLER;
      defaultListCellRenderer_UIResource0.getListCellRendererComponent(jList0, gVTAttributedCharacterIterator_TextAttribute0, 1328, true, false);
      KeyEvent keyEvent0 = new KeyEvent(defaultListCellRenderer_UIResource0, (-2823), 932L, 27, (-2058), ';');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.setMaxDayCharacters(11);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser0.setDay(11);
      assertEquals(11, jDayChooser0.getDay());
      
      int int0 = jDayChooser1.getDaysInMonth();
      assertEquals(28, int0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.630470240160676
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      DebugGraphics.flashColor();
      Locale locale0 = jDayChooser0.locale;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      assertEquals(14, jDayChooser0.getDay());
      
      Locale locale1 = Locale.CHINA;
      Locale.setDefault(locale1);
      jDayChooser0.setDay((-62));
      Locale locale2 = Locale.FRANCE;
      jDayChooser0.getName();
      jDayChooser0.getDayPanel();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.7180293135333957
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getDaysInMonth();
      jDayChooser0.getDay();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      JEditorPane jEditorPane0 = new JEditorPane("VUNz',f8)E_ 7hG\"H", "");
      Insets insets0 = jEditorPane0.getMargin();
      jMonthChooser0.getInsets(insets0);
      jDayChooser0.transferFocusUpCycle();
      jMonthChooser0.requestFocus(false);
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.getAutoscrolls();
      jDayChooser0.setDay(0);
      jDayChooser0.setWeekOfYearVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.7325637712329622
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setBounds(199, 199, (-68), 11);
      jDayChooser0.setAlwaysFireDayProperty(false);
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance();
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("day", dateFormatSymbols0);
      ParsePosition parsePosition0 = new ParsePosition(0);
      mockSimpleDateFormat0.parse("day", parsePosition0);
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      jDayChooser0.getDayPanel();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.7450943593076946
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.doLayout();
      jDayChooser0.setMaxDayCharacters((-1165));
      Locale locale0 = Locale.ENGLISH;
      DateFormatSymbols dateFormatSymbols0 = DateFormatSymbols.getInstance(locale0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat("20", dateFormatSymbols0);
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      Date date1 = jDayChooser0.minSelectableDate;
      jDayChooser0.setSelectableDateRange(date0, date1);
      jDayChooser0.setEnabled(true);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals(0, jDayChooser0.getMaxDayCharacters());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      mockSimpleDateFormat0.get2DigitYearStart();
      Font.getFont("H4{tLu5ZZ>%>HA7");
      DebugGraphics.flashColor();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.initDecorations();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.addVetoableChangeListener((VetoableChangeListener) null);
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.getHeight();
      jDayChooser0.isDayBordersVisible();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager menuSelectionManager0 = new MenuSelectionManager();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.info;
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("2t0e*BTs>|<Kn2a", vetoableChangeListenerProxy0);
      jDayChooser0.getDayPanel();
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.5983833927870665
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = DebugGraphics.flashColor();
      Locale locale0 = jDayChooser0.locale;
      Vector<Locale.LanguageRange> vector0 = new Vector<Locale.LanguageRange>();
      RootGraphicsNode rootGraphicsNode0 = new RootGraphicsNode();
      rootGraphicsNode0.stream();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) vector0, (Collection<String>) rootGraphicsNode0, locale_FilteringMode0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.CHINA;
      SystemColor systemColor0 = SystemColor.window;
      float[] floatArray0 = new float[6];
      floatArray0[0] = (-1004.3554F);
      floatArray0[1] = (-1331.04F);
      floatArray0[2] = 0.53353465F;
      floatArray0[3] = (-1004.3554F);
      floatArray0[4] = 0.53353465F;
      floatArray0[5] = (-1331.04F);
      systemColor0.getRGBComponents(floatArray0);
      jDayChooser0.setForeground(color0);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.7421583343393316
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3260, 3260, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      Date date0 = mockSimpleDateFormat0.get2DigitYearStart();
      jDayChooser0.setMinSelectableDate(date0);
      HierarchyBoundsListener hierarchyBoundsListener0 = mock(HierarchyBoundsListener.class, new ViolatedAssumptionAnswer());
      HierarchyBoundsListener hierarchyBoundsListener1 = AWTEventMulticaster.add(hierarchyBoundsListener0, hierarchyBoundsListener0);
      AWTEventMulticaster.remove(hierarchyBoundsListener1, hierarchyBoundsListener1);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      TextListener textListener0 = mock(TextListener.class, new ViolatedAssumptionAnswer());
      DefaultListModel<String> defaultListModel0 = new DefaultListModel<String>();
      JList<String> jList0 = new JList<String>(defaultListModel0);
      jList0.getY();
      KeyEvent keyEvent1 = new KeyEvent(jList0, (-1742), 3260, 2422, 33, '=');
      jDayChooser0.keyPressed(keyEvent0);
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("day", (VetoableChangeListener) null);
      VetoableChangeListenerProxy vetoableChangeListenerProxy1 = new VetoableChangeListenerProxy("5", (VetoableChangeListener) null);
      jDayChooser0.setMonth((-1742));
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      jDayChooser0.setDayBordersVisible(true);
      assertTrue(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6354848637097823
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MenuSelectionManager.defaultManager();
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.add((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      AWTEventMulticaster.remove((HierarchyBoundsListener) null, (HierarchyBoundsListener) null);
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      SystemColor systemColor0 = SystemColor.info;
      float[] floatArray0 = new float[9];
      floatArray0[0] = 40.0F;
      Stack<String> stack0 = new Stack<String>();
      JList<String> jList0 = new JList<String>(stack0);
      jList0.getY();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser_DecoratorButton0, 993, 31557599975L, 804, 804, '&');
      VetoableChangeListenerProxy vetoableChangeListenerProxy0 = new VetoableChangeListenerProxy("5", (VetoableChangeListener) null);
      jDayChooser0.setFocus();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7649434039475986
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 3260, 3260, (-56), (-56), '=');
      jDayChooser0.keyPressed(keyEvent0);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JList<String> jList0 = new JList<String>();
      Object object0 = new Object();
      defaultListCellRenderer_UIResource0.getListCellRendererComponent(jList0, jList0, (-56), false, true);
      jList0.getY();
      JDayChooser jDayChooser1 = new JDayChooser();
      jDayChooser1.removePropertyChangeListener("a4g~", (PropertyChangeListener) null);
      jDayChooser0.setMonth(3260);
      jDayChooser1.getDay();
      jDayChooser1.getSelectedDay();
      DebugGraphics debugGraphics0 = new DebugGraphics();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      Enumeration<SequenceInputStream> enumeration0 = (Enumeration<SequenceInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      try { 
        XmlDocument.createXmlDocument((InputStream) null, false);
        fail("Expecting exception: SAXParseException");
      
      } catch(SAXParseException e) {
         //
         // java.lang.NullPointerException
         //
         verifyException("org.apache.crimson.parser.Parser2", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.6344753508465937
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = DebugGraphics.flashColor();
      Locale locale0 = jDayChooser0.locale;
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      Locale locale1 = Locale.CHINA;
      Locale.setDefault(locale0);
      Locale locale2 = Locale.FRANCE;
      Locale locale3 = Locale.TRADITIONAL_CHINESE;
      locale0.getDisplayName(locale3);
      jDayChooser0.setDecorationBackgroundColor(color0);
      assertEquals(14, jDayChooser0.getDay());
  }
}
