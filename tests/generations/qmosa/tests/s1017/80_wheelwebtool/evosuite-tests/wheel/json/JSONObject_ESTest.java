/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 11:05:34 GMT 2020
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.lang.reflect.Array;
import java.util.Collection;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.370327780060395
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(1345.8542F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Float.min(0.0F, 1345.8542F);
      jSONObject0.put("#fD~i'DS}:", (Collection) null);
      JSONObject.getNames((Object) jSONObject0);
      JSONObject.doubleToString((-3.54793320742));
      jSONObject0.names();
      HashMap<Object, JSONObject> hashMap0 = new HashMap<Object, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("-3.54793320742", (Map) hashMap0);
      jSONObject0.optJSONObject("-3.54793320742");
      JSONObject.numberToString(float0);
      try { 
        jSONObject1.getBoolean("-3.54793320742");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"-3.54793320742\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.551189966200299
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "p@#[pV[K-<<[2sI5e";
      JSONObject jSONObject1 = new JSONObject((Object) "p@#[pV[K-<<[2sI5e");
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      Boolean boolean1 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean1, (-2541), 0);
      jSONObject0.optDouble("getcompareTo");
      Integer integer0 = new Integer(0);
      jSONObject1.optBoolean("java.lang.Boolean@0000000045");
      Short.toUnsignedLong((short)1571);
      jSONObject1.toString();
      jSONObject1.toString((-2541), 0);
      JSONObject.testValidity("null");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000005\":[java.lang.Byte@0000000048,java.lang.Byte@0000000049,java.lang.Byte@0000000050,java.lang.Byte@0000000051,java.lang.Byte@0000000052,java.lang.Byte@0000000053,java.lang.Byte@0000000054,java.lang.Byte@0000000055,java.lang.Byte@0000000056,java.lang.Byte@0000000057,java.lang.Byte@0000000058,java.lang.Byte@0000000059,java.lang.Byte@0000000060,java.lang.Byte@0000000061,java.lang.Byte@0000000062,java.lang.Byte@0000000063,java.lang.Byte@0000000064],\"java.lang.String@0000000042\":\"java.lang.Class@0000000043\",\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}", (Collection) linkedList0);
      // Undeclared exception!
      jSONObject2.toString((int) (short)1571, (-2541));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.475220317438154
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject(object0);
      JSONObject jSONObject1 = jSONObject0.putOpt("ISc", "ISc");
      jSONObject1.optInt("ISc", 26);
      jSONObject0.optBoolean("ISc");
      short short0 = (short)37;
      Short.toUnsignedLong((short)37);
      Object object1 = JSONObject.NULL;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject2 = jSONObject1.put("m4iTZQ <D~W:x\"q8\"P", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject2.optDouble("c}Gdf");
      jSONObject1.put("ISc", (long) 26);
      JSONObject.doubleToString((-2270.105602060791));
      Float float0 = new Float((float) 26);
      Long long0 = new Long(26);
      JSONObject jSONObject3 = jSONObject2.putOpt("Xuf[s`/soKzJqi/qb1", long0);
      Long.toUnsignedString(0L);
      jSONObject3.getLong("ISc");
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.2055983590263937
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      jSONObject0.names();
      Double double0 = new Double((-9L));
      Long long0 = new Long((-9L));
      Double double1 = new Double((-9L));
      Long long1 = new Long(4);
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      Long long2 = new Long(4);
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap5 = new HashMap<Double, Long>(hashMap4);
      HashMap<Double, Long> hashMap6 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap7 = new HashMap<Double, Long>(hashMap3);
      HashMap<Double, Long> hashMap8 = new HashMap<Double, Long>();
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject0.append("\b", boolean0);
      jSONObject0.optJSONArray("\b");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONObject0.getJSONArray("\b");
      assertFalse(jSONArray1.equals((Object)jSONArray0));
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6893879741062479
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "O";
      jSONObject0.append("O", "O");
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.clone();
      jSONObject0.append("O", object0);
      jSONObject0.accumulate("O", hashMap0);
      jSONObject0.put("O", (Map) hashMap0);
      int int0 = 424;
      Integer integer0 = new Integer(424);
      try { 
        jSONObject0.getLong("&K?/2B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&K?/2B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.9433483923290391
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Float float0 = new Float(Double.NaN);
      Float.min(0.0F, 0.0F);
      float float1 = 0.0F;
      Float.sum(4772.5967F, 0.0F);
      Float.max((-1.0F), (-1.0F));
      Float.max((-2653), 0.0F);
      Float.max((-566.3961F), 0.0F);
      try { 
        JSONObject.valueToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1690537003695227
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject0.toJSONArray(jSONArray0);
      Double double0 = new Double((byte) (-49));
      jSONArray0.optDouble(123, 1.0);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      hashMap0.put(jSONObject0, double0);
      jSONObject0.accumulate("val", (Object) null);
      hashMap0.values();
      jSONObject0.optLong("val");
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.isNull("] is not a Boolean.");
      JSONTokener jSONTokener0 = new JSONTokener("val");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of val
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.508225896806518
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "p@#[pV[K-<<[2sI5e";
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      hashMap0.put("p@#[pV[K-<<[2sI5e", (Object) null);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      Boolean boolean1 = Boolean.valueOf(true);
      JSONObject.valueToString(boolean1, (-2541), 0);
      jSONObject0.optDouble("getcompareTo");
      Integer integer0 = new Integer(0);
      jSONObject1.optBoolean("java.lang.Boolean@0000000005");
      Short.toUnsignedLong((short)1571);
      jSONObject1.toString();
      jSONObject1.toString((-2541), 0);
      JSONObject.testValidity("\"java.lang.Object@0000000003\"");
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = jSONObject1.put("{\"java.lang.String@0000000002\":\"java.lang.Object@0000000003\"}", (Collection) linkedList0);
      jSONObject2.toString((int) (short)1571, (-2541));
      String string1 = "Substring bounds error";
      try { 
        jSONObject2.put((String) null, (Collection) linkedList0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.9950541176981509
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      jSONObject1.optLong("\"java.lang.Object@0000000001\"");
      jSONObject0.get("\"java.lang.Object@0000000001\"");
      try { 
        jSONObject1.getJSONObject("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000001\\\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9263215158543445
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      int int0 = 92;
      Integer integer0 = new Integer(92);
      try { 
        jSONObject1.getLong("p@#[pV[K-<<[2sI5e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p@#[pV[K-<<[2sI5e\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6955126091340453
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-2172);
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject1.optLong("\"java.lang.Object@0000000001\"", 3100L);
      double double0 = 4809.0;
      try { 
        jSONObject0.getJSONArray("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000001\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.5481178804418445
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(10L);
      String string0 = "Xuf[s`/soKzJqi/qb1";
      Long long0 = new Long(10L);
      Long.toUnsignedString(196L);
      JSONObject.quote("Xuf[s`/soKzJqi/qb1");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("Xuf[s`/soKzJqi/qb1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Xuf[s`/soKzJqi/qb1
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>(hashMap0);
      Long.getLong((String) null);
      hashMap0.put((Double) null, (Long) null);
      Double double0 = new Double(3114.067659487);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.toString();
      JSONArray jSONArray0 = jSONObject0.optJSONArray("pa");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4019454593787288
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)92);
      JSONObject.valueToString(short0, (short)92, (short)92);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      int int0 = (-2653);
      Integer integer0 = new Integer((-2653));
      String[] stringArray0 = new String[12];
      stringArray0[0] = "wn7q~TYBJj`A`P7A}4]";
      JSONObject.quote("U&`\"S}i_VX");
      Short short0 = new Short((short)1827);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.putOpt((String) null, "\b");
      Double.sum(1.0, (-3907.755655));
      Double.min(0.0, (-3906.755655));
      Double.max(1.0, (-3907.755655));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{";
      stringArray0[1] = "+";
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Long long0 = new Long(1768L);
      hashMap0.put(double0, long0);
      Double double1 = new Double(1866.730546436837);
      Long long1 = new Long((-1132L));
      Long long2 = new Long((-4712L));
      Long long3 = new Long((-4712L));
      Long.compareUnsigned((-3598L), (-4712L));
      try { 
        Long.parseUnsignedLong("{", 215);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix 215 greater than Character.MAX_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.338872053314866
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = null;
      Boolean boolean0 = new Boolean((String) null);
      Boolean.logicalXor(false, false);
      Boolean.logicalOr(false, true);
      Boolean.logicalXor(true, false);
      Boolean.logicalXor(false, true);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt((String) null, boolean0);
      Boolean.getBoolean((String) null);
      JSONObject.testValidity(boolean0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      try { 
        jSONObject2.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1020196032794294
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      assertTrue(boolean0);
      
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.toArray();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject.valueToString(jSONArray0);
      int int0 = jSONObject0.optInt("wheel.json.JSONArray@0000000006");
      assertEquals(0, int0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.6291821433649187
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      String string0 = "{D;Npo]o0";
      int int0 = 914;
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optString("gethashCode", (String) null);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      try { 
        jSONObject1.getInt("{D;Npo]o0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{D;Npo]o0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.8390470457520753
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.putOpt("p@#[pV[K-<<[2sI5e", "p@#[pV[K-<<[2sI5e");
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 26);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optBoolean("p@#[pV[K-<<[2sI5e");
      Short.toUnsignedLong((short)20);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject3 = new JSONObject(object0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject2.toString((int) (short)20, 26);
      JSONObject jSONObject4 = jSONObject3.put("c}lGdf:", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.put(false);
      JSONArray jSONArray1 = jSONObject3.toJSONArray(jSONArray0);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(26);
      hashMap1.put(jSONObject2, double0);
      jSONObject4.opt("Substring bounds error");
      Float float0 = new Float((double) 26);
      JSONObject.quote("Substring bounds error");
      String[] stringArray0 = new String[0];
      JSONObject jSONObject5 = new JSONObject((Object) jSONObject4, stringArray0);
      jSONObject5.isNull((String) null);
      jSONObject5.optString((String) null);
      Byte byte0 = new Byte((byte)87);
      JSONObject.valueToString(byte0);
      try { 
        jSONObject5.toJSONArray(jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.9649931845901678
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      String string0 = JSONObject.quote("q$:i;0@O< gG+ZPb");
      assertEquals("\"q$:i;0@O< gG+ZPb\"", string0);
      
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)2314);
      JSONObject jSONObject1 = new JSONObject(short0);
      Short.toUnsignedInt((short) (-382));
      Boolean.compare(false, false);
      int int0 = jSONObject1.optInt("isput");
      assertEquals(1, jSONObject1.length());
      assertEquals(0, int0);
      
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      jSONArray0.put(92, 1L);
      hashMap0.put("isput", jSONArray0);
      jSONObject0.put("\"q$:i;0@O< gG+ZPb\"", (double) (short)2314);
      jSONObject0.put("istoLowerCase", (Map) hashMap0);
      String string1 = jSONObject0.optString("equ", "");
      assertEquals("", string1);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.9080368345090652
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "val";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("val", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      int int0 = 1287;
      HashMap<Object, Integer> hashMap0 = new HashMap<Object, Integer>();
      JSONArray jSONArray1 = jSONArray0.put(1287, (Map) hashMap0);
      jSONObject1.toJSONArray(jSONArray0);
      Double double0 = new Double((-3457.513699));
      jSONArray0.getString(1287);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      Double double1 = new Double((-3457.513699));
      hashMap1.put(jSONObject1, double1);
      jSONObject1.append("A JSONObject text must begin with '{'", double1);
      try { 
        jSONArray1.getJSONObject(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[4] is not a JSONObject.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>(hashMap0);
      Double double0 = new Double(0.0);
      Long long0 = new Long(3086L);
      hashMap0.put(double0, long0);
      Double double1 = new Double(3114.067659487);
      Long.getLong((String) null);
      hashMap0.put(double1, (Long) null);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.929210964096546
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Double double0 = new Double((-1823.011317102166));
      Double.max((-1823.011317102166), (-1823.011317102166));
      String[] stringArray0 = JSONObject.getNames((Object) double0);
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      Float float0 = new Float((-879.95F));
      Float.sum((-879.95F), (-879.95F));
      JSONObject jSONObject1 = jSONObject0.accumulate("^", float0);
      String string0 = "] is not a JSONObject.";
      jSONObject1.optBoolean("^", false);
      try { 
        jSONObject0.getBoolean("] is not a JSONObject.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] is not a JSONObject.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.9869667702348364
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Integer integer0 = new Integer((-2653));
      Integer integer1 = new Integer((-2653));
      String[] stringArray0 = JSONObject.getNames((Object) ",\n");
      assertNotNull(stringArray0);
      
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double((-2653));
      Double.isFinite((-1985.7383));
      Long long0 = new Long((-566L));
      Double double1 = new Double(2437.6107033280837);
      Long long1 = new Long(661L);
      Long long2 = new Long(0L);
      JSONObject jSONObject0 = new JSONObject(",\n", stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.463048576630763
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("istoString", (-3541));
      LinkedList<JSONArray> linkedList0 = new LinkedList<JSONArray>();
      jSONObject0.accumulate("Q,xke79\"Dz=M6_>B4", (Object) null);
      linkedList0.removeLastOccurrence(jSONObject0);
      JSONObject jSONObject2 = jSONObject0.put("Q,xke79\"Dz=M6_>B4", (Collection) linkedList0);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "Q,xke79\"Dz=M6_>B4");
      char[] charArray0 = new char[1];
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject1.toJSONArray(jSONArray0);
      charArray0[0] = '4';
      stringWriter1.write(charArray0);
      jSONObject1.write(stringWriter1);
      jSONObject0.optLong("Q,xke79\"Dz=M6_>B4");
      String string0 = "0";
      jSONObject1.optLong("0", 0L);
      jSONObject2.remove("\"e_Seg]zE>TKFF");
      Object object0 = JSONObject.NULL;
      jSONObject2.accumulate("oHHrO@2BLPd(k>NyUN", object0);
      try { 
        jSONObject1.getInt("oHHrO@2BLPd(k>NyUN");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"oHHrO@2BLPd(k>NyUN\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.4082221564280384
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.put("\r", (Object) jSONObject1);
      jSONObject1.putOpt("p@#[pV[K-<<[2sI5e", "p@#[pV[K-<<[2sI5e");
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 26);
      Boolean boolean0 = new Boolean(true);
      jSONObject0.optBoolean("p@#[pV[K-<<[2sI5e");
      Long long0 = new Long(3079L);
      Boolean.valueOf(false);
      Double double0 = new Double(0L);
      jSONObject0.accumulate("p@#[pV[K-<<[2sI5e", double0);
      StringWriter stringWriter0 = new StringWriter((short)20);
      StringWriter stringWriter1 = new StringWriter(56);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "getlongBitsToDouble";
      stringArray0[1] = "isdecode";
      stringArray0[2] = "p@#[pV[K-<<[2sI5e";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray0);
      jSONObject2.getDouble("p@#[pV[K-<<[2sI5e");
      jSONObject0.isNull("isaddFirst");
      JSONObject jSONObject3 = jSONObject1.put("isaddFirst", 3234L);
      assertFalse(jSONObject3.equals((Object)jSONObject0));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.1589234703027795
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.putOpt("p@#[pV[K-<<[2sI5e", "p@#[pV[K-<<[2sI5e");
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 26);
      JSONObject.valueToString(jSONObject0);
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject3 = jSONObject2.accumulate("do", jSONObject0);
      StringWriter stringWriter0 = new StringWriter(0);
      Byte byte0 = new Byte((byte)12);
      Boolean.logicalXor(true, true);
      jSONObject3.write(stringWriter0);
      Float.valueOf((float) (-339));
      StringWriter stringWriter1 = new StringWriter(2125);
      try { 
        jSONObject1.getDouble("s#{ cd}gEo55tb|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"s#{ cd}gEo55tb|\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5491407795429213
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HashMap<String, Float> hashMap0 = new HashMap<String, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "FR0)S_g3G=";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean boolean0 = new Boolean("A JSONObject text must begin with '{'");
      hashMap0.put("FR0)S_g3G=", (Float) null);
      JSONObject jSONObject2 = jSONObject1.putOpt("A JSONObject text must begin with '{'", boolean0);
      jSONObject1.toString();
      jSONObject1.remove("' and instead saw '");
      JSONObject jSONObject3 = jSONObject2.putOpt("{\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}", (Object) null);
      jSONObject2.optInt("{\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}", 1666);
      jSONObject2.toString(1666, 1666);
      Double double0 = new Double(1666);
      JSONObject jSONObject4 = new JSONObject(double0);
      JSONObject.quote("fo");
      jSONObject1.toString(1666);
      Double.isFinite(1666);
      JSONObject.valueToString(jSONObject4);
      jSONObject2.keys();
      jSONObject4.length();
      jSONObject2.names();
      jSONObject1.keys();
      jSONObject0.remove("{\"java.lang.String@0000000003\": java.lang.Boolean@0000000004}");
      try { 
        jSONObject3.getLong("{\"java.lang.String@0000000003\":java.lang.Boolean@0000000004}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000003\\\":java.lang.Boolean@0000000004}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.0010592290873834
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "p@#[pV[K-<<[2sI5e";
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      Byte.toUnsignedInt((byte) (-3));
      Byte.compare((byte) (-3), (byte) (-3));
      Byte.toUnsignedLong((byte) (-3));
      JSONObject.valueToString("p@#[pV[K-<<[2sI5e", 1936, 0);
      JSONObject jSONObject2 = new JSONObject(jSONObject1);
      JSONObject jSONObject3 = jSONObject2.put("", (-2021.0));
      jSONObject3.getInt("");
      try { 
        jSONObject0.getBoolean("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.0697193090242028
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject1.optInt("\"java.lang.Object@0000000001\"", 1256);
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.toArray();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      String[] stringArray0 = new String[0];
      JSONObject jSONObject3 = new JSONObject(object0, stringArray0);
      String string0 = "+n|/{iqf]+.O?";
      try { 
        jSONObject0.append("\"java.lang.Object@0000000001\"", jSONObject2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Object@0000000001\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.7078761950506254
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum(0.0, (-3907.755655));
      String[] stringArray0 = new String[6];
      stringArray0[1] = "+";
      stringArray0[2] = "issubstring";
      stringArray0[3] = "T95";
      stringArray0[5] = "+";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.opt(stringArray0[0]);
      Float float0 = new Float((-1.0));
      JSONObject jSONObject2 = new JSONObject(float0, stringArray0);
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.6593417483971904
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "O";
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      jSONObject0.optBoolean("&kNfG=.M?2(/`6iL", false);
      Object object0 = hashMap0.clone();
      jSONObject0.append("O", object0);
      jSONObject0.put("O", (Map) hashMap0);
      String string1 = "&K?/2B";
      Integer integer0 = new Integer(424);
      try { 
        jSONObject0.getLong("&K?/2B");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"&K?/2B\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.1203437480571723
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("toS", "toS");
      jSONObject0.optInt("{}", 26);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optBoolean("toS");
      Short.toUnsignedLong((short)20);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(boolean0);
      jSONObject1.optInt("c}Gdf", (-2210));
      String string0 = "'";
      try { 
        jSONObject1.getDouble("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.9170529209577856
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      Double double0 = new Double((-9L));
      String string0 = "Xuf[s`/soKzJqi/qb1";
      Long long0 = new Long((-9L));
      jSONObject0.optInt("H4u$eIL1u!7(V", 9);
      Boolean boolean0 = new Boolean(true);
      String string1 = "ji1>_YiW3^G";
      jSONObject0.optBoolean("ji1>_YiW3^G");
      Short.toUnsignedLong((short)20);
      Object object0 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject((Object) hashMap1);
      jSONObject1.optInt("c}Gdf", 116);
      try { 
        jSONObject0.append((String) null, (Object) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.0342717570504814
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("T95", true);
      jSONObject1.optBoolean("T95");
      Double.isFinite(1.0);
      jSONObject1.optBoolean("T95", true);
      jSONObject0.accumulate("", (Object) null);
      jSONObject0.put("] is not a number.", false);
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.0203285754869866
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Integer integer0 = new Integer((-2653));
      String[] stringArray0 = new String[3];
      String string0 = "wn7q~TYBJj`A`P7A}4]";
      stringArray0[0] = "wn7q~TYBJj`A`P7A}4]";
      stringArray0[1] = ",E\n";
      stringArray0[2] = "hUI^=[DF;S";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("hUI^=[DF;S", "+n|/{iqf]+.O?");
      Integer.compareUnsigned(94, 92);
      Integer integer1 = new Integer((-2653));
      JSONObject jSONObject2 = jSONObject1.putOpt("hUI^=[DF;S", "wn7q~TYBJj`A`P7A}4]");
      jSONObject2.optLong("hUI^=[DF;S", (long) (-2653));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>(hashMap0);
      Double double0 = new Double((-2653));
      Double double1 = new Double((-2653));
      Long long0 = new Long(92);
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>(hashMap0);
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>(hashMap3);
      Double double2 = new Double((-1.0));
      HashMap<Object, String> hashMap5 = new HashMap<Object, String>();
      try { 
        jSONObject2.put((String) null, (Map) hashMap5);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      double double0 = 4809.0;
      try { 
        jSONObject0.put((String) null, object0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.869120406468994
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-2172);
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      jSONObject2.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject0.get("\"java.lang.Object@0000000001\"");
      jSONObject2.toJSONArray((JSONArray) null);
      try { 
        jSONObject1.getJSONObject("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000001\\\"\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.5203303713294103
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean.compare((boolean) boolean0, true);
      Boolean.valueOf(true);
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      Float float0 = new Float((-4731.726F));
      JSONObject jSONObject2 = (JSONObject)hashMap0.put("x$wEOFpl!0xvv?@", "x$wEOFpl!0xvv?@");
      jSONObject0.remove("p@#[pV[K-<<[2sI5e");
      jSONObject1.names();
      Long.getLong("ZC671ognNI", (long) 0);
      Long.getLong("p@#[pV[K-<<[2sI5e");
      Float float1 = new Float((float) (-2541));
      Float float2 = new Float((double) (-4731.726F));
      JSONObject jSONObject3 = jSONObject0.accumulate("x$wEOFpl!0xvv?@", float2);
      jSONObject3.toString();
      jSONObject1.isNull("-2270.1056020607910");
      jSONObject1.opt("aT~&Z&,?mc#|O{ERB&+");
      try { 
        jSONObject2.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.9994799196719604
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Boolean.compare(true, true);
      String string0 = "isput";
      jSONObject0.optInt("+");
      jSONObject0.optString("+");
      HashMap<String, JSONArray> hashMap1 = new HashMap<String, JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) null);
      hashMap1.put("+", jSONArray0);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      hashMap1.replace("isput", jSONArray0, jSONArray0);
      JSONArray jSONArray1 = new JSONArray((Collection) null);
      hashMap1.put("", jSONArray0);
      JSONObject jSONObject1 = new JSONObject(double0);
      try { 
        jSONObject1.put("istoString", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.500315532981063
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "fo";
      String[] stringArray0 = new String[7];
      stringArray0[1] = "fo";
      jSONObject0.append("fo", (Object) null);
      try { 
        jSONObject0.getInt("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.6205787264378868
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum(0.0, (-3907.755655));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{";
      stringArray0[1] = "+";
      stringArray0[2] = "issubstring";
      stringArray0[3] = "T95";
      stringArray0[5] = "+";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.get(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Double.sum(Double.NaN, Double.NaN);
      Double.sum((-24.35949795712048), (-3907.755655));
      Long long0 = new Long(1L);
      Long long1 = new Long(1L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>(1155, 403.5497F);
      Double double0 = new Double(0.0);
      Long long2 = new Long((-971L));
      Long long3 = new Long(2306L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>(hashMap2);
      Long long4 = new Long(1L);
      hashMap2.getOrDefault(long4, long3);
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap5 = new HashMap<Double, Long>(hashMap2);
      HashMap<Double, Long> hashMap6 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap7 = new HashMap<Double, Long>(hashMap5);
      HashMap<Double, Long> hashMap8 = new HashMap<Double, Long>();
      Double double1 = new Double((-3907.755655));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.6730604874709436
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      jSONObject0.optInt(",", (int) (byte) (-49));
      jSONObject0.append("wheel.json.JSONArray", (Object) null);
      Integer integer0 = new Integer((-64213136));
      jSONObject0.append("wheel.json.JSONArray", integer0);
      try { 
        jSONObject0.getDouble(",");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.7173186896035182
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Object object0 = new Object();
      Boolean boolean0 = new Boolean(false);
      Short.toUnsignedLong((short)20);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.optInt("c}Gdf", (-2210));
      jSONObject0.append("~}", boolean0);
      try { 
        jSONObject0.getDouble("'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.3712842513165167
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "ISc";
      JSONObject jSONObject1 = jSONObject0.putOpt("ISc", "ISc");
      jSONObject0.optInt("Bad value from toJSONString: ", 26);
      JSONObject.valueToString(hashMap0, (-2131), (-631));
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optBoolean("ISc");
      Short.toUnsignedLong((short)20);
      Object object1 = JSONObject.NULL;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("m4iTZQ <D~W:x\"q8\"P", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(1285, (Map) hashMap0);
      jSONObject1.toJSONArray(jSONArray0);
      Double double0 = new Double((-3457.513699));
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      jSONObject0.toJSONArray(jSONArray1);
      hashMap1.put(jSONObject0, double0);
      String string1 = "/)~KU~~xA1|q:#";
      try { 
        jSONArray0.getJSONObject(26);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[26] is not a JSONObject.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0651299049126957
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      int int0 = 10;
      JSONObject.valueToString(hashMap0, 10, 10);
      JSONObject jSONObject1 = new JSONObject();
      jSONObject0.isNull("{}");
      JSONObject jSONObject2 = jSONObject0.put("{}", (long) 10);
      String string0 = "\"\"";
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject2.getBoolean("\"\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.7594393594729578
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)2316);
      JSONObject jSONObject1 = new JSONObject(short0);
      jSONObject1.optBoolean("<\">}^6(${$s3>", true);
      jSONObject1.optLong("getdescendingIterator");
      int int0 = Short.toUnsignedInt((short) (-382));
      assertEquals(65154, int0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.9667747999363254
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "val";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      Short.toUnsignedLong((byte)59);
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject1 = new JSONObject(object1);
      jSONObject0.optInt("c}Gdf", 623);
      jSONObject0.append("] not found.", (Object) null);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "val";
      JSONObject jSONObject2 = new JSONObject(jSONObject0, stringArray1);
      Float float0 = new Float((float) 623);
      jSONObject2.append("3M\"ocqX/v", float0);
      try { 
        jSONObject2.getDouble("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8887251984127507
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      JSONObject jSONObject1 = jSONObject0.put("T95", true);
      Double.isFinite(1.0);
      jSONObject1.optBoolean("T95", false);
      jSONObject0.accumulate("+", (Object) null);
      try { 
        jSONObject0.get(":I-Zi'r89C%3|x1/");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\":I-Zi'r89C%3|x1/\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.1295852049542665
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Byte byte0 = new Byte((byte)105);
      Byte.toUnsignedInt((byte)0);
      Byte.compare((byte)0, (byte)105);
      Byte.toUnsignedLong((byte)105);
      JSONObject.valueToString(byte0, 62, 62);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Byte@0000000001");
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Byte@0000000001", byte0);
      StringWriter stringWriter0 = new StringWriter(0);
      Byte byte1 = new Byte((byte)0);
      Boolean.logicalXor(true, true);
      jSONObject0.write(stringWriter0);
      Float float0 = Float.valueOf((float) (-339));
      jSONObject1.accumulate("java.lang.Byte@0000000001", float0);
      StringWriter stringWriter1 = null;
      try {
        stringWriter1 = new StringWriter((-50462705));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.9655584929934724
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-2172);
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      double double0 = 4809.0;
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      Boolean boolean0 = new Boolean("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject2 = jSONObject1.put("\"java.lang.Object@0000000001\"", (double) (-2172));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONObject2.toJSONArray(jSONArray0);
      jSONObject2.getString("\"java.lang.Object@0000000001\"");
      jSONObject1.put("w^&;BP^>rU8p}3Vsk", (double) (-2172));
      try { 
        jSONObject0.getJSONArray("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000001\\\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.9615830579596794
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String[] stringArray0 = new String[8];
      stringArray0[6] = ",E\n";
      stringArray0[1] = ",E\n";
      stringArray0[2] = "] not found.";
      stringArray0[3] = ",E\n";
      stringArray0[4] = ",E\n";
      stringArray0[5] = ",E\n";
      Long long0 = new Long((-1L));
      jSONObject0.put("A JSONArray text must start with '['", (Object) long0);
      stringArray0[6] = ",E\n";
      stringArray0[7] = ",E\n";
      JSONObject jSONObject1 = new JSONObject(",E\n", stringArray0);
      JSONObject jSONObject2 = jSONObject0.append("] is not a Boolean.", "] not found.");
      Integer integer0 = new Integer(8);
      Object object1 = JSONObject.NULL;
      jSONObject1.putOpt("M'(\"r95/3", object1);
      jSONObject2.optLong("JDC", 0L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>(hashMap1);
      Double double0 = new Double((-1937.8548791118424));
      Long long1 = new Long(0L);
      jSONObject1.accumulate("", ",E\n");
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((-3506));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.311217984747951
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean boolean1 = new Boolean("null");
      Boolean.compare((boolean) boolean1, true);
      Boolean.valueOf(true);
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      jSONObject0.remove("ZC671ognNI");
      jSONObject0.names();
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2541));
      Long.getLong("r?-@Mo|J@@%/zQn");
      Float float0 = new Float((float) 0);
      jSONObject0.accumulate("istoString", float0);
      jSONObject0.toString();
      jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      try { 
        jSONObject0.getJSONObject(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.2951114357994546
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject1.optLong("'2^Y}6G\"C=Py", 0L);
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double.max(0.0, 3001.7);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "issubstring";
      stringArray0[1] = "\"java.lang.Object@0000000001\"";
      stringArray0[2] = "issubstring";
      stringArray0[3] = "\"java.lang.Object@0000000001\"";
      stringArray0[4] = "issubstring";
      stringArray0[6] = "\"java.lang.Object@0000000001\"";
      stringArray0[7] = "\"java.lang.Object@0000000001\"";
      stringArray0[8] = "issubstring";
      JSONObject jSONObject3 = new JSONObject(jSONObject0, stringArray0);
      jSONObject3.opt("\"java.lang.Object@0000000001\"");
      Float float0 = new Float((-1.0));
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject4 = new JSONObject(jSONArray1, stringArray0);
      JSONObject.valueToString((Object) null);
      JSONArray jSONArray2 = jSONObject2.optJSONArray((String) null);
      assertNull(jSONArray2);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.4222516868165713
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("toS", "toS");
      jSONObject0.optInt("{}", 26);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optBoolean("toS");
      Short.toUnsignedLong((short)20);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(boolean0);
      jSONObject2.optInt("c}Gdf", (-2210));
      jSONObject2.append("{}", boolean0);
      jSONObject1.append("'", jSONObject0);
      jSONObject0.isNull("U%+fIME^>Sw:nE?+");
      jSONObject1.optLong("'");
      long long0 = jSONObject0.optLong("'", (-315L));
      assertEquals(2, jSONObject0.length());
      assertEquals((-315L), long0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.9060021274015175
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-27));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String string0 = "null";
      String string1 = " ";
      jSONObject0.optJSONObject(" ");
      jSONObject0.toString();
      byte byte1 = (byte)87;
      Byte.toUnsignedLong((byte)87);
      Byte.toUnsignedLong((byte) (-27));
      jSONObject0.optJSONObject("toH");
      try { 
        jSONObject0.getString(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.2912553417597192
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float(0.0);
      JSONObject.valueToString(float0);
      String[] stringArray0 = new String[1];
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 0);
      linkedList0.toArray(linkedListArray0);
      Byte byte0 = new Byte((byte)20);
      Byte byte1 = new Byte((byte)20);
      linkedList0.add(byte1);
      JSONObject jSONObject0 = new JSONObject(linkedList0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("O~60Ju;", 32);
      Short.compare((byte)20, (byte)20);
      Short short0 = new Short((short)1562);
      jSONObject1.accumulate("java.lang.Float@0000000001", short0);
      jSONObject1.getDouble("java.lang.Float@0000000001");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("java.lang.Float@0000000001");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of java.lang.Float@0000000001
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.2685350920163807
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Long long1 = new Long((-3L));
      jSONObject0.names();
      Double double0 = new Double(4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 9);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      linkedListArray0[5] = linkedList1;
      linkedListArray0[6] = linkedList0;
      linkedListArray0[7] = linkedList0;
      linkedListArray0[8] = linkedList0;
      linkedList0.toArray(linkedListArray0);
      Byte byte0 = new Byte((byte)13);
      Byte byte1 = new Byte((byte)13);
      Byte.compare((byte) (-125), (byte)61);
      linkedList0.add(byte0);
      JSONObject jSONObject1 = jSONObject0.put("O~60Ju;", 937);
      Double double1 = new Double((-3L));
      JSONObject jSONObject2 = jSONObject0.accumulate(".v[NS-j^`+6+\"zpXf?", double1);
      jSONObject1.getDouble(".v[NS-j^`+6+\"zpXf?");
      jSONObject2.isNull(".v[NS-j^`+6+\"zpXf?");
      LinkedList<Byte> linkedList2 = new LinkedList<Byte>();
      assertTrue(linkedList2.equals((Object)linkedList1));
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.8462202193216333
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("+/r=o)TEHI3", false);
      JSONObject jSONObject1 = jSONObject0.append(",:]}/\"[{;=#", ",:]}/\"[{;=#");
      byte byte0 = (byte) (-46);
      Byte byte1 = new Byte((byte) (-46));
      Long long0 = new Long(0L);
      Boolean.valueOf(false);
      String string0 = "uj";
      jSONObject1.accumulate("uj", jSONObject0);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-46));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.277034259466139
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (byte)105);
      Short.toUnsignedLong((byte)105);
      Byte byte0 = new Byte((byte)105);
      Byte.toUnsignedLong((byte) (-112));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)14);
      linkedList1.add(byte1);
      Short.compare((byte)105, (byte)105);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("mv-b", true);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.5445493993138553
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Byte byte0 = new Byte((byte)105);
      Byte.toUnsignedInt((byte)0);
      Byte.compare((byte)0, (byte)105);
      Byte.toUnsignedLong((byte)105);
      JSONObject.valueToString(byte0, 62, 62);
      JSONObject jSONObject0 = new JSONObject((Object) "java.lang.Byte@0000000001");
      JSONObject jSONObject1 = jSONObject0.accumulate("java.lang.Byte@0000000001", byte0);
      StringWriter stringWriter0 = new StringWriter(0);
      Byte byte1 = new Byte((byte)0);
      Boolean.logicalXor(true, true);
      jSONObject0.write(stringWriter0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte2 = new Byte((byte)105);
      linkedList0.add(byte2);
      JSONObject jSONObject2 = jSONObject1.put("java.lang.Byte@0000000001", (-2496));
      Short.compare((byte)0, (byte)0);
      String string0 = jSONObject2.toString(0, 63);
      jSONObject1.optDouble("java.lang.Byte@0000000001");
      jSONObject0.optString(string0);
      jSONObject1.getDouble("java.lang.Byte@0000000001");
      jSONObject2.put("", (long) (byte)0);
      jSONObject0.optJSONObject("java.lang.Byte@0000000001");
      assertEquals(5, jSONObject0.length());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9071192599314215
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (-2172));
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      Short.toUnsignedLong((short)31);
      Object object1 = new Object();
      JSONObject.valueToString((Object) null);
      Float float0 = new Float((float) 31L);
      JSONArray jSONArray1 = new JSONArray();
      JSONObject jSONObject1 = jSONObject0.accumulate("[java.lang.Long@0000000003]", jSONArray1);
      Short short0 = new Short((short)31);
      jSONObject1.accumulate("null", short0);
      try { 
        jSONObject0.getDouble("m$UegZfi@8;K:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"m$UegZfi@8;K:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedList0.toArray(linkedListArray0);
      Byte byte1 = new Byte((byte) (-49));
      Byte byte2 = new Byte((byte)13);
      Float.max(207L, 1.0F);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject.valueToString(boolean0);
      Byte byte3 = new Byte((byte)8);
      Byte.toUnsignedLong((byte)79);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertTrue(linkedList1.equals((Object)linkedList0));
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.7555610348502069
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.clone();
      JSONObject jSONObject1 = new JSONObject(object0);
      Integer integer0 = new Integer(424);
      Integer integer1 = new Integer(424);
      Byte.toUnsignedLong((byte)97);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      Double double0 = new Double(97L);
      Long long0 = new Long((-116L));
      hashMap1.put(double0, long0);
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>(hashMap1);
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>(hashMap2);
      Double double1 = new Double(0.0);
      Float float0 = new Float(1231.3260443);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString(object0);
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      Byte byte0 = new Byte((byte)97);
      assertEquals((byte)97, (byte)byte0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      String string0 = "";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.475076311054695
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 46, (-1458));
      JSONObject jSONObject1 = new JSONObject("{}");
      Long long0 = new Long((-176L));
      Long long1 = new Long((-1458));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(3453L);
      Long long2 = new Long((-708L));
      hashMap0.replace(double0, long2, long0);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      try { 
        Long.valueOf("Unclosed comment", (-1458));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1458 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0116009116784799
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Short short0 = new Short((short) (-669));
      String[] stringArray0 = new String[7];
      stringArray0[0] = "PS-wQ._";
      stringArray0[1] = "%i#PFI";
      stringArray0[2] = "wheel.json.JSONObject";
      stringArray0[3] = "8~+*cMcp.33";
      stringArray0[4] = ",>Ea+Sq";
      stringArray0[5] = "{6FaSX]?gG";
      stringArray0[6] = "issplit";
      JSONObject jSONObject0 = new JSONObject(short0, stringArray0);
      try { 
        jSONObject0.getJSONObject("ped5#p]`5{8Y");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ped5#p]`5{8Y\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Integer integer0 = new Integer((-2653));
      Short short0 = new Short((short)2882);
      Short.compare((short)99, (short)54);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.748513384770489
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("Sy)YJv", 2);
      String string0 = JSONObject.valueToString(jSONObject0, 46, (-1458));
      Long long0 = new Long((-176L));
      Long long1 = new Long((-1470L));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>(1038, 3453L);
      Double double0 = new Double(46);
      Long long2 = new Long((-1L));
      Long long3 = new Long(660L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>(hashMap1);
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap5 = new HashMap<Double, Long>(hashMap1);
      HashMap<Double, Long> hashMap6 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap7 = new HashMap<Double, Long>(hashMap5);
      HashMap<Double, Long> hashMap8 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap9 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap10 = new HashMap<Double, Long>(hashMap9);
      Double double1 = new Double((-2249.860677));
      String string1 = JSONObject.valueToString("Sy)YJv", 2, 59);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.9052538067957063
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum((-24.35949795712048), (-3907.755655));
      Double.min(0.0, (-3932.1151529571202));
      Double.max(594.0025, Double.NaN);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{";
      stringArray0[1] = "+";
      Double.max(3001.7, 0.0);
      stringArray0[2] = "issubstring";
      stringArray0[3] = "T95";
      stringArray0[5] = "+";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.getNames(jSONObject0);
      Object object0 = new Object();
      JSONTokener jSONTokener0 = new JSONTokener("bs$|-TP{");
      try { 
        jSONTokener0.nextString('J');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Unterminated string at character 8 of bs$|-TP{
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7917594692280547
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      String string0 = "[";
      jSONObject0.isNull("[");
      String string1 = null;
      try { 
        jSONObject0.put((String) null, 1174L);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "");
      long long0 = jSONObject0.optLong("wheel.json.JSONArray", 368L);
      assertEquals(368L, long0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.9874026289877325
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (-573L));
      JSONObject jSONObject2 = jSONObject0.put("gettoString", 1791.2088);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put((-1683L));
      JSONObject.valueToString(linkedList0, (-1458), (-1579));
      jSONObject0.optDouble("YvPZ:Yt");
      jSONObject2.length();
      jSONObject1.optDouble("for", (-1306.1780912533));
      jSONObject0.has("[]");
      try { 
        jSONObject0.getString("isreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.2626639305427867
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "ISc";
      JSONObject jSONObject1 = jSONObject0.putOpt("ISc", "ISc");
      int int0 = new Integer(26);
      Boolean boolean0 = new Boolean(false);
      boolean boolean1 = new Boolean(false);
      Short.toUnsignedLong((short)20);
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = new JSONObject(boolean0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject1.put("m4iTZQ <D~W:x\"q8\"P", (Collection) linkedList0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject3.optDouble("c}G2f");
      JSONObject.valueToString(linkedList0, 26, 26);
      String string1 = "/6~9^]n:xL`G2tl";
      jSONObject2.isNull("/6~9^]n:xL`G2tl");
      Float float0 = new Float((float) 26);
      Long long0 = new Long(26);
      jSONObject3.putOpt("/6~9^]n:xL`G2tl", long0);
      Long.toUnsignedString(0L);
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.548637426748238
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optBoolean("\"java.lang.Object@0000000001\"");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject3 = jSONObject0.put("[java.lang.Long@0000000007]", 44);
      Short.compare((short)20, (short)20);
      jSONObject1.toString((-2427), (-1201));
      jSONObject2.optDouble("getcompareTo");
      jSONObject0.optString("[java.lang.Long@0000000007]");
      try { 
        jSONObject3.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.2135077822999394
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, 3271, 3271);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) 3271);
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      Object object1 = JSONObject.NULL;
      jSONObject1.optString("\"java.lang.Object@0000000001\"", "\"java.lang.Object@0000000001\"");
      jSONObject1.putOpt(" \"", object1);
      Boolean.logicalXor(true, false);
      StringWriter stringWriter0 = new StringWriter();
      Float.valueOf((float) 3271);
      jSONObject1.accumulate("\"java.lang.Object@0000000001\"", (Object) null);
      StringWriter stringWriter1 = new StringWriter(3370);
      Float.max(3271, 0.0F);
      Float.max((-455.0F), (-2295.923F));
      Long long0 = new Long(3370);
      JSONObject.valueToString(long0);
      Byte byte0 = new Byte((byte)99);
      Byte.toUnsignedLong((byte)111);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertFalse(linkedList0.contains(byte0));
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.877071618879437
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-2172);
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      double double0 = 4809.0;
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      int int1 = 14;
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      try { 
        jSONObject1.getBoolean("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000001\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3239277373588993
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      JSONObject jSONObject1 = new JSONObject((Object) "val");
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      Float float0 = new Float(0.0);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.6829081047004717
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      Integer.min((-2519), 8);
      String string0 = Integer.toUnsignedString((-2519));
      StringWriter stringWriter0 = new StringWriter();
      Boolean.logicalOr(false, false);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      Double double0 = new Double(2531.0);
      Long long0 = new Long(0L);
      Long.compareUnsigned((-2842L), (-2519));
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      Double double1 = new Double((-2519));
      hashMap2.replace(double1, long0, long0);
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>(hashMap3);
      Double double2 = new Double(0.0);
      String string1 = JSONObject.numberToString(double1);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.4626087156274616
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      String string0 = "ent";
      stringArray0[0] = "ent";
      JSONObject jSONObject0 = new JSONObject((Object) "ent");
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt("ent", "ent");
      int int0 = 0;
      jSONObject1.toString(0);
      jSONObject1.optBoolean("ent", false);
      Double double0 = new Double(1006.80823220887);
      jSONObject0.put("ent", (Object) double0);
      try { 
        jSONObject0.get("put");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"put\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9091070327644286
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      int int0 = (-2172);
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject((Object) "null");
      jSONObject0.isNull("null");
      JSONObject jSONObject1 = jSONObject0.put("null", (long) (-2172));
      double double0 = 4809.0;
      jSONObject0.put("null", 4809.0);
      jSONObject0.put("null", (long) (-2172));
      Boolean boolean0 = new Boolean("null");
      jSONObject1.put("null", (double) 4);
      jSONObject1.put("w^&;BP^>rU8p}3Vsk", (double) (-2172));
      try { 
        jSONObject0.getJSONArray("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString((Object) null, (-1458), (-1458));
      Long long0 = new Long(0L);
      Long long1 = new Long(3453L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double(0L);
      long long2 = (-708L);
      Long long3 = new Long(1049L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      Double double1 = new Double((-708L));
      Long long4 = new Long(1419L);
      hashMap1.replace(double1, long4, long4);
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      try { 
        Long.valueOf("Unclosed comment", (-1458));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1458 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Long", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.1635142670746084
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      int int0 = new Integer(0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = Boolean.TRUE;
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      JSONObject jSONObject1 = new JSONObject();
      JSONObject jSONObject2 = jSONObject0.append("null", jSONObject1);
      jSONObject2.toString(34, 47);
      try { 
        jSONObject1.getLong("getmax");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getmax\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.9694661665613182
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      String string0 = "T95";
      JSONObject jSONObject1 = jSONObject0.put("T95", true);
      jSONObject0.toString((-595), (-595));
      try { 
        jSONObject1.getLong("{\n\"java.lang.String@0000000008\": java.lang.Boolean@0000000009,\n\"java.lang.String@0000000002\": java.lang.Boolean@0000000003,\n\"java.lang.String@0000000004\": java.lang.Boolean@0000000005,\n\"java.lang.String@0000000006\": \"java.lang.Class@0000000007\"\n}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\n\\\"java.lang.String@0000000008\\\": java.lang.Boolean@0000000009,\\n\\\"java.lang.String@0000000002\\\": java.lang.Boolean@0000000003,\\n\\\"java.lang.String@0000000004\\\": java.lang.Boolean@0000000005,\\n\\\"java.lang.String@0000000006\\\": \\\"java.lang.Class@0000000007\\\"\\n}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.7841758925702789
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject(boolean0);
      jSONObject0.toString(1463);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Short short0 = new Short((short)814);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "#-<o8%X8s!R";
      stringArray0[3] = "#-<o8%X8s!R";
      stringArray0[4] = "";
      stringArray0[5] = "#-<o8%X8s!R";
      stringArray0[6] = "#-<o8%X8s!R";
      stringArray0[7] = "";
      stringArray0[8] = "\b";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.3862943611198906
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("[\n");
      jSONTokener0.nextTo("[\n");
      jSONTokener0.back();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.getNames(jSONObject0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((JSONTokener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.351673301904631
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      JSONArray jSONArray0 = new JSONArray();
      jSONArray0.optJSONObject((-838));
      jSONObject0.put("+", (Object) null);
      stringArray0[3] = "c^;_o{3t`OAX";
      double double0 = jSONObject0.optDouble("null");
      assertEquals(Double.NaN, double0, 0.01);
      
      stringArray0[5] = "#-<o8%X8s!R";
      int int0 = jSONObject0.optInt("");
      assertEquals(0, int0);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.454046801934433
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject1.putOpt("p@#[pV[K-<<[2sI5e", "p@#[pV[K-<<[2sI5e");
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 26);
      Double.max(0.0, 26);
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(26);
      hashMap1.put(jSONObject0, double0);
      Double double1 = new Double(0.0);
      Double double2 = hashMap1.put(jSONObject0, double1);
      Double.max(26.0, 26);
      jSONObject0.optInt("V$l>woPJ;tYE");
      hashMap1.put(jSONObject1, double2);
      Double double3 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap1.merge(jSONObject1, double3, biFunction0);
      jSONObject1.remove("V$l>woPJ;tYE");
      jSONObject1.optDouble(": ");
      JSONObject.doubleToString(Double.NaN);
      jSONObject0.isNull("{s9VBxF9r/p:w?wR");
      long long0 = jSONObject1.optLong("\n");
      assertEquals(1, jSONObject1.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      JSONObject.doubleToString(0.0);
      Long long0 = new Long((-1L));
      Long long1 = new Long(3453L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double((-1556.6112726));
      Long long2 = new Long(2640L);
      Double double1 = new Double(Double.NaN);
      hashMap0.replace(double1, long0, long0);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>(hashMap0);
      Double double2 = new Double(0.0);
      assertNotEquals((double)double2, (double)double1, 0.01);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      stringArray0[3] = "c^;_o{3t`OAX";
      stringArray0[4] = " O";
      Short.toUnsignedLong((short)61);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=0.9320738874454946
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      byte byte0 = (byte)59;
      jSONObject0.optDouble("val", 0.0);
      String string0 = "spl";
      try { 
        jSONObject0.getInt("val");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"val\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      String string0 = "{4Np6o]o0";
      JSONTokener jSONTokener0 = new JSONTokener("{4Np6o]o0");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 7 of {4Np6o]o0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.410116318288409
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{D;Npg]o0");
      jSONTokener0.next();
      jSONTokener0.back();
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {D;Npg]o0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.5846118830244282
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      jSONObject0.optBoolean("issum");
      Short.toUnsignedLong((short)20);
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      hashMap0.values();
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject0.remove("(^9EnSH5C'o?BR:B");
      jSONObject0.optDouble("9%y6j)");
      jSONObject0.isNull(stringArray0[3]);
      try { 
        jSONObject0.getBoolean("g/{'<Z&RODT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g/{'<Z&RODT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7782333057997075
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[5] = "val";
      stringArray0[1] = "val";
      Byte byte0 = new Byte((byte)59);
      byte byte1 = (byte) (-49);
      JSONObject jSONObject1 = jSONObject0.accumulate("val", byte0);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Byte byte2 = new Byte((byte)59);
      linkedList0.add(byte2);
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      jSONObject0.optDouble("yy(w,tAH*\u0006YrFn-uM", 1573.1022712630283);
      Float.valueOf((float) 207L);
      jSONObject1.accumulate(")_qD)!e%", (Object) null);
      StringWriter stringWriter0 = null;
      try {
        stringWriter0 = new StringWriter((byte) (-49));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative buffer size
         //
         verifyException("java.io.StringWriter", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.9701814400260844
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedList0.toArray(linkedListArray0);
      Byte byte0 = new Byte((byte) (-49));
      Byte byte1 = new Byte((byte)13);
      linkedList0.add(byte1);
      JSONObject jSONObject1 = jSONObject0.put("fo", (-1691));
      jSONObject1.names();
      jSONObject0.accumulate("fo", "fo");
      Double double0 = new Double(207L);
      assertEquals(207.0, (double)double0, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.6528213268992737
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      Double.max(0.0, 0.0);
      hashMap0.put(jSONObject0, double0);
      hashMap0.put(jSONObject0, double0);
      Double.max(1428.1697892, 1428.1697892);
      jSONObject0.optInt("V$l>woPJ;tYE");
      hashMap0.put(jSONObject0, double1);
      BiFunction<Double, Double, Double> biFunction1 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Short.compare((short) (-1747), (short)91);
      jSONObject0.toString((-3545), 680);
      jSONObject0.isNull("V$l>woPJ;tYE");
      Object object0 = jSONObject0.opt("Null key.");
      assertNull(object0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.133152119001128
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      jSONObject0.toString((-3989), 75);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      linkedList0.toArray();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.append("\"java.lang.Object@0000000001\"", jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Object@0000000001\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5935466536106266
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      JSONObject jSONObject1 = new JSONObject((Object) "val");
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      long long0 = jSONObject1.optLong("v\"T7A_*%");
      assertEquals(3, jSONObject1.length());
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.9214934308679616
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedList0.toArray(linkedListArray0);
      Byte byte1 = new Byte((byte) (-49));
      Byte byte2 = new Byte((byte)13);
      Byte.compare((byte)59, (byte)13);
      linkedList0.add(byte2);
      JSONObject.valueToString(linkedList0);
      Byte byte3 = new Byte((byte) (-73));
      Double double0 = new Double(1678.997884578);
      assertEquals(1678.997884578, (double)double0, 0.01);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getJSONArray("' and instead saw '");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"' and instead saw '\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.341796056314496
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Object object0 = new Object();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (-2172));
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      Short.toUnsignedLong((short)31);
      Byte byte0 = new Byte((byte)14);
      Byte.toUnsignedLong((byte)93);
      linkedList0.add(byte0);
      JSONObject jSONObject1 = jSONObject0.put("[java.lang.Long@0000000003]", 44);
      StringWriter stringWriter0 = new StringWriter((byte)14);
      StringWriter stringWriter1 = stringWriter0.append('_');
      Writer writer0 = jSONObject0.write(stringWriter1);
      jSONObject1.write(writer0);
      jSONObject1.optDouble("[java.lang.Long@0000000003]", 0.0);
      Short.compare((short)31, (short)31);
      jSONObject0.isNull("[java.lang.Long@0000000003]");
      jSONObject0.put("^~*?!JR", (-751L));
      HashMap<Double, Object> hashMap0 = new HashMap<Double, Object>();
      JSONObject jSONObject2 = jSONObject0.put("^~*?!JR", (Map) hashMap0);
      assertSame(jSONObject2, jSONObject1);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HashMap<Float, Float> hashMap0 = new HashMap<Float, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.551051583822962
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      jSONObject0.optDouble("T95", 1853.0082424545);
      String string0 = "true";
      try { 
        jSONObject0.getInt("wheel.json.JSONTokener");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"wheel.json.JSONTokener\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.2818128061333818
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      JSONObject.valueToString(jSONObject1);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      long long0 = 0L;
      JSONArray jSONArray1 = jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      Double double0 = new Double((-1559));
      JSONObject jSONObject3 = jSONObject2.put("] is not a JSONObject.", (Object) double0);
      Short.toUnsignedLong((short)674);
      String string0 = "29=fMDi=E";
      Long.getLong("29=fMDi=E");
      try { 
        jSONObject3.accumulate((String) null, jSONArray1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.9361470098309512
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (byte)105);
      JSONObject.valueToString(jSONArray0, 8192, 1085);
      Short.toUnsignedLong((byte)105);
      Byte byte0 = new Byte((byte)105);
      Byte.toUnsignedLong((byte) (-112));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      Byte byte1 = new Byte((byte)14);
      linkedList1.add(byte1);
      jSONObject0.put("val", 2707);
      Short.compare((byte)105, (byte)105);
      try { 
        jSONObject0.getDouble((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.0900596587107838
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Integer integer0 = new Integer((-2653));
      String[] stringArray0 = new String[12];
      stringArray0[0] = "wn7q~TYBJj`A`P7A}4]";
      Float.sum(0.0F, (-2113.286F));
      Float.max(2025.448F, (-2113.286F));
      Float.max((-167.0F), 2025.448F);
      Float.max(2025.448F, (-2113.286F));
      Double double0 = new Double(627.7057719);
      JSONObject.valueToString(double0);
      Byte byte0 = new Byte((byte)79);
      Byte.toUnsignedLong((byte)42);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      assertFalse(linkedList0.contains((byte)79));
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.7573867079477643
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum(0.0, (-3907.755655));
      String[] stringArray0 = new String[6];
      stringArray0[0] = "{";
      stringArray0[1] = "T95";
      stringArray0[2] = "issubstring";
      stringArray0[3] = "T95";
      stringArray0[5] = "T95";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.opt("{");
      Float float0 = new Float((-1.0));
      boolean boolean0 = jSONObject1.isNull("getcopyValueOf");
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.191433910542996
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2187), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"", 2937.854);
      jSONObject0.has("\"java.lang.Object@0000000001\"");
      try { 
        jSONObject1.getString("Uzp;'=7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Uzp;'=7s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Double double0 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double0);
      try { 
        jSONObject0.getString((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.6094379124341005
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      byte byte0 = (byte)59;
      Byte byte1 = new Byte((byte)59);
      int int0 = 424;
      Integer integer0 = new Integer(424);
      try { 
        jSONObject0.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.336141016554284
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      String[] stringArray0 = new String[1];
      String string0 = "ent";
      stringArray0[0] = "ent";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      jSONObject0.toString();
      JSONObject jSONObject1 = jSONObject0.putOpt("ent", "ent");
      jSONObject1.toString(0);
      String string1 = "{}";
      jSONObject0.optInt("{}", 0);
      Boolean boolean0 = new Boolean(false);
      jSONObject0.optBoolean("null");
      Short.toUnsignedLong((short)20);
      Object object1 = JSONObject.NULL;
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of {}
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{D;Npg]o0");
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0, (-1052), 827);
      Long long0 = new Long((-176L));
      Long long1 = new Long(3453L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      Double double0 = new Double((-1052));
      Double double1 = new Double(694.448916949339);
      Long long2 = new Long(0L);
      Long long3 = new Long(3453L);
      Double double2 = new Double(827);
      Long long4 = new Long(2658L);
      Long long5 = new Long((-176L));
      Long long6 = new Long(0L);
      hashMap0.replace(double1, long5, long6);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>(hashMap0);
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap5 = new HashMap<Double, Long>(hashMap1);
      Double double3 = new Double((-1.0));
      assertNotEquals((double)double3, (double)double1, 0.01);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=2.2149793639574464
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Short> hashMap0 = new HashMap<Object, Short>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("toS", "toS");
      jSONObject0.append("{}", "{}");
      jSONObject0.optInt("{}", 26);
      jSONObject0.optBoolean("toS");
      Short.toUnsignedLong((short)20);
      Object object1 = JSONObject.NULL;
      String string0 = "c}Gdf";
      JSONObject jSONObject2 = jSONObject1.append("c}Gdf", jSONObject0);
      Float.valueOf(0.0F);
      jSONObject1.accumulate("toS", jSONObject2);
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optInt("c}Gdf", 1955);
      try { 
        jSONObject1.getDouble("toS");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toS\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.5806491250694639
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object0 = hashMap0.clone();
      String string0 = "] not found.";
      jSONObject0.append("] not found.", object0);
      JSONObject jSONObject1 = jSONObject0.put("O", (Map) hashMap0);
      try { 
        jSONObject1.getDouble("] not found.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"] not found.\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.1625466602802583
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      jSONObject0.get("\"java.lang.Object@0000000001\"");
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject2 = jSONObject1.putOpt(" \"", object1);
      Boolean.logicalXor(true, false);
      StringWriter stringWriter0 = new StringWriter();
      Float.valueOf((float) (-2172));
      jSONObject1.accumulate("\"java.lang.Object@0000000001\"", (Object) null);
      StringWriter stringWriter1 = new StringWriter(3370);
      Float.max((-2172), 0.0F);
      Float.max((-455.0F), (-2295.923F));
      Long long0 = new Long(3370);
      JSONObject.valueToString(long0);
      Byte byte0 = new Byte((byte)99);
      Byte.toUnsignedLong((byte)111);
      Double double0 = new Double(0.0F);
      jSONObject2.append("] is not a number.", "\"java.lang.Object@0000000001\"");
      assertEquals(3, jSONObject1.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      JSONObject jSONObject1 = new JSONObject((Object) "val");
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      HashMap<Integer, Object> hashMap0 = new HashMap<Integer, Object>();
      jSONObject2.put("val", (Map) hashMap0);
      jSONObject1.put("val", (Collection) linkedList0);
      assertEquals(4, jSONObject1.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.464816384890813
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "val";
      byte byte0 = (byte) (-71);
      Byte byte1 = new Byte((byte) (-71));
      String string1 = null;
      Long long0 = new Long((byte) (-71));
      try { 
        jSONObject0.accumulate((String) null, long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(stringArray0[1], stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9035633722035603
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-15));
      JSONObject jSONObject0 = new JSONObject(byte0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "'";
      stringArray0[1] = "rW6h>o@slSV~c J";
      stringArray0[2] = " at character ";
      stringArray0[3] = "jR!Ey)yZc";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.2252418643226086
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(Double.NaN, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum((-24.35949795712048), (-3907.755655));
      Long long0 = new Long(1L);
      Long long1 = new Long(1L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>(1155, 403.5497F);
      Double double1 = new Double(0.0);
      Long long2 = new Long((-971L));
      Long long3 = new Long(2306L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>(hashMap2);
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap5 = new HashMap<Double, Long>(hashMap2);
      HashMap<Double, Long> hashMap6 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap7 = new HashMap<Double, Long>(hashMap5);
      HashMap<Double, Long> hashMap8 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap9 = new HashMap<Double, Long>(hashMap4);
      Double double2 = new Double((-3907.755655));
      jSONObject0.putOpt("] is not a JSONObject.", double0);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.740511704323769
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Long long0 = new Long((-2110L));
      Long.min(0L, (-663L));
      JSONObject jSONObject0 = new JSONObject(long0);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(1, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.4821693083585323
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Integer.min((-1266), (-1266));
      Integer.toUnsignedString((-1266));
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject((Object) "5-`OUhI$/P~");
      jSONObject0.optJSONArray("isjoin");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("}2dK#qR#wd|E+n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }2dK#qR#wd|E+n
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.3786201994102125
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Integer integer0 = new Integer((-2653));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "wn7q~TYBJj`A`P7A}4]";
      stringArray0[1] = ",E\n";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.append("hUI^=[DF;S", "+n|/{iqf]+.O?");
      Integer.compareUnsigned(94, 92);
      Integer integer1 = new Integer((-2653));
      JSONObject jSONObject2 = jSONObject1.putOpt("hUI^=[DF;S", "wn7q~TYBJj`A`P7A}4]");
      jSONObject2.optLong(stringArray0[2], (long) (-2653));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>(hashMap0);
      Double double0 = new Double(2262.13007);
      Long long0 = new Long(5335L);
      hashMap0.put(double0, long0);
      Double double1 = new Double(0.0);
      Long long1 = new Long(94);
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>(hashMap1);
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>(hashMap1);
      Double double2 = new Double(94);
      HashMap<Object, String> hashMap5 = new HashMap<Object, String>();
      try { 
        jSONObject2.put((String) null, 0.0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.1428074196753928
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.isFinite(1.0);
      Double.sum(Double.NaN, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum(Double.NaN, (-3907.755655));
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>(1155, 403.5497F);
      Double double1 = new Double(0.0);
      Long long0 = new Long((-971L));
      Long long1 = new Long(2306L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>(hashMap2);
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap5 = new HashMap<Double, Long>(hashMap2);
      HashMap<Double, Long> hashMap6 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap7 = new HashMap<Double, Long>(hashMap5);
      HashMap<Double, Long> hashMap8 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap9 = new HashMap<Double, Long>(hashMap4);
      Double double2 = new Double((-3907.755655));
      try { 
        jSONObject0.put((String) null, 1457);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.094408629847781
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "val";
      stringArray0[1] = "val";
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      JSONObject jSONObject1 = new JSONObject((Object) "val");
      jSONObject1.keys();
      assertEquals(3, jSONObject1.length());
      
      JSONObject jSONObject2 = new JSONObject(linkedList0);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double double0 = new Double(Double.NaN);
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Expected '";
      stringArray0[1] = "\r";
      stringArray0[2] = "0";
      stringArray0[3] = "(%K3i";
      stringArray0[4] = "y_}QGaqRZ9lL;dBN";
      String string0 = "\\u";
      stringArray0[5] = string0;
      stringArray0[6] = "\"\"";
      stringArray0[7] = "getreverseBytes";
      stringArray0[8] = "|1QYf#:z,";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      String string1 = jSONObject0.toString();
      assertEquals("{}", string1);
      assertNotNull(string1);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Object object0 = new Object();
      int int0 = (-2172);
      JSONObject.getNames(object0);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      double double0 = 0.0;
      Long long0 = new Long((-2172));
      Long long1 = new Long((-2172));
      float float0 = 2062.5F;
      HashMap<Double, Long> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Double, Long>((-2172), 2062.5F);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2172
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.3625664136253977
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.optString("gethashCode", "gethashCode");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONObject jSONObject1 = new JSONObject(jSONArray0);
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 1);
      linkedListArray0[0] = linkedList1;
      linkedList1.toArray(linkedListArray0);
      Byte byte1 = new Byte((byte)13);
      linkedList1.add(byte1);
      int int0 = Short.compare((byte)93, (byte)14);
      assertEquals(79, int0);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String[] stringArray0 = new String[7];
      Byte.toUnsignedLong((byte) (-74));
      Byte byte0 = new Byte((byte)55);
      Byte.compare((byte) (-74), (byte)55);
      Byte byte1 = new Byte((byte)55);
      Integer integer0 = new Integer((byte)55);
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject(stringArray0[1]);
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Predicate<Byte> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Byte> predicate1 = predicate0.negate();
      Predicate<Byte> predicate2 = predicate1.and(predicate0);
      Predicate<Byte> predicate3 = predicate2.or(predicate0);
      linkedList0.removeIf(predicate3);
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 3);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[0] = linkedList0;
      JSONObject jSONObject1 = new JSONObject("fo", stringArray0);
      Object object0 = jSONObject0.opt("J938njk53ya\"");
      assertNull(object0);
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Integer integer0 = new Integer((-2653));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Double.valueOf((double) (-2653));
      Double double0 = new Double(547);
      StringWriter stringWriter0 = new StringWriter();
      Writer writer0 = jSONArray0.write(stringWriter0);
      stringWriter0.close();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "gethashCode";
      stringArray0[1] = "\n";
      stringArray0[2] = "\n";
      JSONObject jSONObject0 = new JSONObject(jSONArray0, stringArray0);
      StringWriter stringWriter1 = new StringWriter(547);
      jSONObject0.write(writer0);
      assertEquals("[]{}", writer0.toString());
      assertEquals("[]{}", stringWriter0.toString());
  }

  /**
  //Test case number: 137
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      int int0 = (-2653);
      int int1 = (-194);
      JSONObject.getNames((Object) null);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>();
      double double0 = 0.0;
      Long long0 = new Long((-2653));
      Long long1 = new Long((-2653));
      int int2 = (-2305);
      HashMap<Double, Long> hashMap1 = null;
      try {
        hashMap1 = new HashMap<Double, Long>((-2653), (-2305));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2653
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=1.4444190426347405
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      jSONObject0.optLong("a$A!V)G[0DT|bbg");
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      byte byte0 = (byte)59;
      Byte byte1 = new Byte((byte)59);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 6);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedList0.toArray(linkedListArray0);
      Byte byte2 = new Byte((byte) (-49));
      Byte byte3 = new Byte((byte)13);
      Byte.compare((byte)59, (byte)13);
      jSONObject0.optInt("fo", 123);
      try { 
        jSONObject0.getDouble("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=1.469483727358999
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(Double.NaN, Double.NaN);
      JSONObject jSONObject0 = new JSONObject(double0);
      Double.sum((-24.35949795712048), (-3907.755655));
      Long long0 = new Long(1L);
      Long long1 = new Long(1L);
      HashMap<Double, Long> hashMap0 = new HashMap<Double, Long>(1155, 403.5497F);
      Double double1 = new Double(0.0);
      Long long2 = new Long((-971L));
      Long long3 = new Long(2306L);
      HashMap<Double, Long> hashMap1 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap2 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap3 = new HashMap<Double, Long>(hashMap2);
      HashMap<Double, Long> hashMap4 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap5 = new HashMap<Double, Long>(hashMap2);
      HashMap<Double, Long> hashMap6 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap7 = new HashMap<Double, Long>(hashMap5);
      HashMap<Double, Long> hashMap8 = new HashMap<Double, Long>();
      HashMap<Double, Long> hashMap9 = new HashMap<Double, Long>(hashMap4);
      Double double2 = new Double((-3907.755655));
      try { 
        jSONObject0.getJSONObject("& }#)N8k{+?b6fiqn");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"& }#)N8k{+?b6fiqn\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 140
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = JSONObject.quote("+!bw<Kg&@NQah");
      assertEquals("\"+!bw<Kg&@NQah\"", string0);
  }

  /**
  //Test case number: 141
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 142
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Float float0 = new Float((-0.17583327126929563));
      Float.sum(0.0F, 261.005F);
      Float.min(0.0F, 1.0F);
      Float.isFinite((-566.3961F));
      Float.min(537.812F, 0.0F);
      Float.sum((-566.3961F), 204.60657F);
      Float.max(4772.5967F, 535.4F);
      Float.max(1.0F, 537.812F);
      Float.min(0.0F, 0.0F);
      String string0 = JSONObject.quote((String) null);
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 143
  /*Coverage entropy=0.39439769144744274
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      String string0 = "5\\uCk&->HYN*_Bmt";
      Long long0 = new Long(1849L);
      JSONObject.quote(string0);
      JSONTokener jSONTokener0 = new JSONTokener("?Cn(oX<|--vEHo.`");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ?Cn(oX<|--vEHo.`
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 144
  /*Coverage entropy=0.5670609309552819
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      int int0 = (-2653);
      Integer integer0 = new Integer((-2653));
      JSONObject.quote(",Esv\n");
      Float float0 = new Float((double) (-2653));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(",Esv\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,Esv
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 145
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      Byte byte0 = new Byte((byte)59);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Byte>[] linkedListArray0 = (LinkedList<Byte>[]) Array.newInstance(LinkedList.class, 16);
      linkedListArray0[0] = linkedList0;
      linkedListArray0[1] = linkedList0;
      linkedListArray0[2] = linkedList0;
      linkedListArray0[3] = linkedList0;
      linkedListArray0[4] = linkedList0;
      linkedListArray0[5] = linkedList0;
      linkedList0.toArray(linkedListArray0);
      Byte byte1 = new Byte((byte) (-49));
      Float.max(207L, 2364.049F);
      JSONObject.valueToString(linkedList0);
      Byte byte2 = new Byte((byte)65);
      Byte.toUnsignedLong((byte) (-49));
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      assertFalse(linkedList1.contains(byte0));
  }
}
