/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 13:02:05 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.005850668612171
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity((Object) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean.valueOf("null");
      Boolean boolean0 = new Boolean("null");
      Boolean.valueOf(true);
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2531));
      Long.getLong("r?-@Mo|J@@%/zQn");
      Float float0 = new Float(1.0F);
      JSONObject jSONObject2 = jSONObject0.accumulate("JSON does not allow non-finite numbers.", float0);
      JSONObject.valueToString(hashMap0, 0, 0);
      jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      jSONObject0.optDouble("x$wEOFpl!0xvv?@");
      Float.sum(2261.8035F, (-2255.0515F));
      JSONObject.valueToString((Object) null);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject2.putOpt("in", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.043708163180881
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("toH", hashMap0);
      jSONObject1.optDouble("_3H");
      JSONObject jSONObject2 = jSONObject1.put("_3H", false);
      jSONObject2.optBoolean("_3H");
      StringWriter stringWriter0 = new StringWriter(4101);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "toH");
      jSONObject0.write(stringWriter1);
      Integer integer0 = new Integer(4101);
      Double.max((-6376.652234969317), 4101);
      Double.max(Double.NaN, Double.NaN);
      Double.isFinite((-1881.5389));
      jSONObject0.optInt("Expected a ':' after a key");
      HashMap<JSONObject, Double> hashMap1 = new HashMap<JSONObject, Double>();
      Double double0 = new Double(Double.NaN);
      Double.max(Double.NaN, Double.NaN);
      hashMap1.put(jSONObject0, double0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , any());
      hashMap1.merge(jSONObject1, double0, biFunction0);
      jSONObject2.remove("{!VG;TDeVGb54");
      JSONObject jSONObject3 = new JSONObject();
      jSONObject3.optString("toH", "");
      try { 
        jSONObject1.getString("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.848203051651816
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)11);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", byte0);
      String string0 = "equ";
      JSONObject jSONObject2 = jSONObject1.accumulate("equ", "equ");
      jSONObject1.putOpt("[", jSONObject0);
      jSONObject1.optBoolean("[", false);
      int int0 = (-1017);
      JSONObject jSONObject3 = jSONObject2.put("get", (-1017));
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONObject jSONObject4 = jSONObject3.put("is", (Collection) linkedList0);
      // Undeclared exception!
      jSONObject4.toString((-5530));
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5251680518700264
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Long long0 = new Long(0L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((double) 0L);
      Short short0 = new Short((short) (-3901));
      Short.toUnsignedInt((short)879);
      hashMap0.put(float0, short0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      linkedList0.add(float0);
      linkedList0.add(float0);
      Float.sum((short) (-3901), (short) (-3901));
      Short short1 = new Short((short) (-3901));
      Short short2 = new Short((short)879);
      Short short3 = new Short((short)879);
      Short.compare((short)321, (short)2865);
      Float float1 = new Float((float) (short) (-3901));
      Float.max((short)2865, 879);
      hashMap0.put(float1, short3);
      hashMap0.clone();
      hashMap0.put(float0, short2);
      Short.compare((short)879, (short)879);
      Short.toUnsignedLong((short)321);
      hashMap0.put(float0, short3);
      JSONArray jSONArray1 = jSONArray0.put(221, 58);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      jSONObject0.append("lH", jSONArray0);
      JSONArray jSONArray2 = jSONObject0.getJSONArray("lH");
      assertFalse(jSONArray2.equals((Object)jSONArray1));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = (-4646);
      jSONObject0.toString(2217, (-4646));
      JSONTokener jSONTokener0 = new JSONTokener("5}Z[NC#?Mjix xM?uk");
      jSONTokener0.nextClean();
      JSONTokener jSONTokener1 = new JSONTokener((String) null);
      Double double0 = new Double((-719.44));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      linkedList0.add((Double) null);
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList0.addAll((Collection<? extends Double>) linkedList1);
      linkedList1.poll();
      LinkedList<Short> linkedList2 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      try { 
        jSONObject0.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[0] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.977042996317029
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("true", 585L);
      String[] stringArray0 = new String[7];
      jSONObject0.optBoolean("' and instead saw '");
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[1] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      jSONObject0.optBoolean("issum");
      JSONObject jSONObject1 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      hashMap0.values();
      JSONObject jSONObject2 = new JSONObject((Object) "fo");
      StringWriter stringWriter0 = new StringWriter(6710);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "fo");
      jSONObject2.write(stringWriter1);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject1.remove("is");
      jSONObject1.optDouble("fo");
      Object object0 = JSONObject.NULL;
      jSONObject2.append("true", object0);
      JSONObject.doubleToString((-3151.39614611));
      try { 
        jSONObject1.getInt("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.0129129456276957
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Short short0 = new Short((short)12);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (double) (short)12);
      String string1 = "U#0r";
      jSONObject1.accumulate("false", "");
      try { 
        jSONObject1.put((String) null, (Object) jSONObject0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Double.isFinite((-1.6687371234953692));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tri";
      stringArray0[1] = "LXYc~#";
      stringArray0[2] = "LXYc~#";
      stringArray0[3] = "tri";
      stringArray0[4] = "tri";
      stringArray0[5] = "tri";
      stringArray0[6] = "LXYc~#";
      stringArray0[7] = "tri";
      stringArray0[8] = "0";
      JSONTokener jSONTokener0 = new JSONTokener("{I$");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {I$
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.2639475915139933
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Long long0 = new Long(1L);
      Long.min(1L, 1L);
      HashMap<Integer, Double> hashMap0 = new HashMap<Integer, Double>();
      HashMap<Integer, Double> hashMap1 = new HashMap<Integer, Double>(hashMap0);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      JSONObject jSONObject1 = jSONObject0.accumulate("xiR:q29Ut(ohp~l", long0);
      Integer integer0 = new Integer((-3715));
      Byte byte0 = new Byte((byte)109);
      JSONObject jSONObject2 = jSONObject1.accumulate("xiR:q29Ut(ohp~l", byte0);
      JSONObject jSONObject3 = jSONObject2.put("xiR:q29Ut(ohp~l", (Map) hashMap0);
      JSONObject jSONObject4 = jSONObject3.optJSONObject("xiR:q29Ut(ohp~l");
      assertNotSame(jSONObject2, jSONObject4);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8452061058812839
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      jSONObject0.accumulate("\n", double0);
      Integer integer0 = new Integer((-102));
      JSONObject jSONObject1 = jSONObject0.accumulate("\n", integer0);
      Long long0 = new Long((-102));
      jSONObject1.accumulate("\n", long0);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.5867507588564203
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Short short0 = new Short((short)814);
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((short)814);
      JSONObject.getNames((Object) integer0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'5Ekoiq; l";
      Long.getLong("'5Ekoiq; l");
      Float float0 = new Float(0.0F);
      JSONObject jSONObject1 = jSONObject0.accumulate("'5Ekoiq; l", float0);
      JSONObject.quote("'5Ekoiq; l");
      jSONObject1.isNull("quo");
      jSONObject0.optDouble("'5Ekoiq; l");
      JSONObject jSONObject2 = new JSONObject();
      JSONObject.valueToString(jSONObject2);
      try { 
        jSONObject1.getDouble("pu");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"pu\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.497551216469163
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2186), (-2186));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2186));
      Boolean boolean0 = Boolean.valueOf(true);
      jSONObject1.put("\"java.lang.Object@0000000001\"", (Object) boolean0);
      Integer integer0 = new Integer(123);
      Byte byte0 = new Byte((byte) (-71));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Double double0 = new Double(123);
      Double.sum(1698.544, 387.62306482);
      hashMap0.put("fh@=V", double0);
      Object object1 = JSONObject.NULL;
      hashMap0.put("java.lang.Long@0000000004.", object1);
      JSONObject.valueToString("java.lang.Long@0000000004.");
      Boolean boolean1 = new Boolean("KP");
      Boolean boolean2 = Boolean.FALSE;
      JSONObject.valueToString((Object) null, 18, (byte) (-71));
      Boolean.compare(true, false);
      Boolean.valueOf(true);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("KP", "java.lang.Long@0000000004.");
      jSONObject0.getBoolean("\"java.lang.Object@0000000001\"");
      JSONObject.testValidity((Object) null);
      Integer integer1 = new Integer(9);
      JSONObject jSONObject2 = jSONObject0.append("fh@=V", integer1);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3730061506956965
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2186), (-2186));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2186));
      Integer integer0 = new Integer(123);
      Byte byte0 = new Byte((byte) (-71));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Double double0 = new Double(123);
      Double.sum(1698.544, 387.62306482);
      Short short0 = new Short((byte) (-71));
      String[] stringArray0 = new String[3];
      stringArray0[0] = "0Hz?Fy`Tm{!- $mAU'";
      stringArray0[1] = "fh@=V";
      stringArray0[2] = "java.lang.Long@0000000004.";
      JSONObject jSONObject1 = new JSONObject(short0, stringArray0);
      Float float0 = new Float((float) 123);
      HashMap<Integer, Long> hashMap1 = new HashMap<Integer, Long>();
      jSONObject1.opt((String) null);
      try { 
        jSONObject0.getDouble("getgetMockitoInterceptor");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getgetMockitoInterceptor\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0709763739725617
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      short short0 = (short)12;
      Short short1 = new Short((short)12);
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (double) (short)12);
      jSONObject1.get("");
      String string0 = "U#0r";
      JSONTokener jSONTokener0 = new JSONTokener("U#0r");
      jSONTokener0.next();
      JSONTokener jSONTokener1 = new JSONTokener("U#0r");
      try { 
        jSONTokener1.next('\u0083');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '\u0083' and instead saw 'U' at character 1 of U#0r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.579628870616548
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("toH", hashMap0);
      jSONObject1.optDouble("_3H");
      Double.max(Double.NaN, Double.NaN);
      Object object0 = new Object();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "tri";
      stringArray0[1] = "_3H";
      stringArray0[2] = "4$vzmt";
      JSONObject jSONObject2 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject1.optString("toH", ",");
      assertNotNull(string0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.9289016747588184
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity((Object) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      String string0 = "p@#[pV[K-<<[2sI5e";
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(false);
      Boolean boolean1 = new Boolean("null");
      Boolean.valueOf(true);
      String string1 = "x$wEOFpl!0xvv?@";
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      hashMap0.put((String) null, (Object) null);
      String string2 = "ZC671ognNI";
      jSONObject0.remove("ZC671ognNI");
      jSONObject0.names();
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2531));
      Long.getLong("r?-@Mo|J@@%/zQn");
      Float float0 = new Float(1.0F);
      jSONObject0.accumulate("istoString", float0);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 0, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "getappend";
      JSONObject jSONObject0 = new JSONObject("getappend", stringArray0);
      try { 
        jSONObject0.put((String) null, (Collection) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.825916383085052
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toH";
      JSONObject jSONObject1 = jSONObject0.append("toH", hashMap0);
      String string1 = "_3H";
      jSONObject1.optDouble("_3H");
      Double double0 = new Double(Double.NaN);
      hashMap0.put("toH", double0);
      jSONObject1.put("_3H", false);
      int int0 = 4101;
      StringWriter stringWriter0 = new StringWriter(4101);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "toH");
      String string2 = "getequals";
      stringWriter1.write("getequals");
      jSONObject0.write(stringWriter1);
      Integer integer0 = new Integer(4101);
      JSONObject.doubleToString(0.0);
      try { 
        jSONObject1.getInt("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.7937175017485838
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Short short0 = new Short((short)12);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Integer integer0 = new Integer((short)12);
      Object object0 = new Object();
      JSONObject.getNames(object0);
      Long.divideUnsigned(1L, 1L);
      Object object1 = new Object();
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.892202227153445
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("true", 585L);
      String[] stringArray0 = new String[7];
      jSONObject0.optBoolean("' and instead saw '");
      stringArray0[0] = "fo";
      stringArray0[1] = "fo";
      stringArray0[1] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      stringArray0[6] = "fo";
      jSONObject0.optBoolean("issum");
      JSONObject jSONObject1 = new JSONObject();
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      hashMap0.values();
      JSONObject jSONObject2 = jSONObject1.put("issum", (Map) hashMap0);
      StringWriter stringWriter0 = new StringWriter(6710);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "fo");
      jSONObject2.write(stringWriter1);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      jSONObject1.remove("is");
      jSONObject1.optDouble("fo");
      JSONObject.doubleToString((-3151.39614611));
      try { 
        jSONObject1.getInt("fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"fo\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2586258749240153
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      short short0 = (short)12;
      Short short1 = new Short((short)12);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Float float0 = new Float((-1156.48282));
      JSONObject jSONObject2 = jSONObject1.put("getquote", (Object) float0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONTokener jSONTokener0 = new JSONTokener("[]");
      JSONArray jSONArray0 = new JSONArray(jSONTokener0);
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      hashMap0.put("wheel.json.JSONObject$Null", jSONArray0);
      JSONObject jSONObject3 = jSONObject1.put("getquote", (Map) hashMap0);
      jSONObject3.put("[]", (Map) hashMap0);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = "[3o|7?Cl.sHWB";
      JSONObject jSONObject4 = new JSONObject((Object) jSONObject2, stringArray0);
      jSONObject4.putOpt((String) null, jSONArray0);
      String string1 = "7Nxc'/W8FTBVF";
      JSONTokener jSONTokener1 = new JSONTokener((String) null);
      JSONObject jSONObject5 = null;
      try {
        jSONObject5 = new JSONObject(jSONTokener1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.767220979559178
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.accumulate("", (Object) null);
      JSONObject jSONObject2 = jSONObject0.put("K9", 2217);
      jSONObject1.optBoolean("");
      Double double0 = new Double(13.973613750775133);
      Double double1 = new Double((-1017));
      Double double2 = new Double(2217);
      JSONObject jSONObject3 = jSONObject2.append("", double2);
      assertSame(jSONObject3, jSONObject1);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.242000378234774
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray[";
      stringArray0[3] = "JSONArray[";
      stringArray0[4] = "JSONArray[";
      stringArray0[5] = "JSONArray[";
      stringArray0[7] = "JSONArray[";
      stringArray0[8] = "JSONArray[";
      Integer integer0 = Integer.getInteger("JSONArray[", 1940);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.replace((Object) "JSONArray[", boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      jSONObject0.accumulate("JSONArray[", jSONObject1);
      try { 
        jSONObject0.getInt("JSONArray[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"JSONArray[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(0.0, 0.0);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tri";
      stringArray0[1] = "tri";
      stringArray0[2] = "";
      stringArray0[3] = "tri";
      stringArray0[4] = "tri";
      stringArray0[5] = "tri";
      stringArray0[6] = "";
      stringArray0[7] = "tri";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject(biFunction0, stringArray0);
      double double0 = jSONObject0.optDouble("^Plt4eL9#?h", (-1185.613599));
      assertEquals((-1185.613599), double0, 0.01);
      
      String string0 = jSONObject0.optString("tri", "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.376618234721324
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2186), (-2186));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2186));
      Byte byte0 = new Byte((byte) (-71));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Double double0 = new Double(123);
      Double.sum(1698.544, 387.62306482);
      hashMap0.put("fh@=V", double0);
      Object object1 = JSONObject.NULL;
      hashMap0.put("java.lang.Long@0000000004.", object1);
      JSONObject.valueToString("java.lang.Long@0000000004.");
      Boolean boolean0 = new Boolean("KP");
      Boolean boolean1 = Boolean.FALSE;
      Boolean.compare(true, false);
      Boolean.valueOf(true);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("KP", "java.lang.Long@0000000004.");
      Float float0 = new Float(387.62306482);
      try { 
        jSONObject1.append("\"java.lang.Object@0000000001\"", float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"java.lang.Object@0000000001\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.8233778687756237
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Long long0 = new Long(0L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((double) 0L);
      Short short0 = new Short((short) (-3901));
      Short.toUnsignedLong((short)1903);
      Short.toUnsignedInt((short)879);
      hashMap0.put(float0, short0);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      JSONArray jSONArray1 = jSONArray0.put(true);
      linkedList0.add(float0);
      Float.sum((short) (-3901), (short) (-3901));
      Short short1 = new Short((short) (-2060));
      Short short2 = new Short((short) (-2060));
      Short short3 = new Short((short)8203);
      hashMap0.clone();
      hashMap0.put(float0, short2);
      Short.compare((short)10, (short)879);
      Short.toUnsignedLong((short)32);
      hashMap0.put(float0, short3);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray2 = jSONObject0.toJSONArray(jSONArray0);
      assertNotNull(jSONArray2);
      assertEquals(1, jSONArray2.length());
      
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      jSONObject0.append("lH", jSONArray1);
      assertNotSame(jSONArray1, jSONArray2);
      
      String string0 = JSONObject.quote(",:]}/\"[{;=#");
      assertEquals("\",:]}/\\\"[{;=#\"", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.809663515308979
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min(3866L, 0.0F);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float((-2794.3887F));
      Short short0 = new Short((short)91);
      hashMap1.put(float1, short0);
      hashMap1.put(float0, (Short) null);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      linkedList1.poll();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      JSONArray jSONArray1 = jSONObject0.toJSONArray(jSONArray0);
      assertNull(jSONArray1);
      
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      Double double0 = new Double(0.0);
      jSONObject0.append("=[q]+q^?6;", (Object) null);
      String string0 = JSONObject.quote("OX0V{@)/");
      assertEquals("\"OX0V{@)/\"", string0);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.6108063456386637
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0";
      Boolean.valueOf(false);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Byte.compare((byte)35, (byte)4);
      Double double0 = new Double(1428.1697892);
      linkedList1.pollFirst();
      linkedList1.add(double0);
      String string0 = "#N=z*Cm";
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.put("0", (Collection) linkedList0);
      Short short0 = new Short((short)34);
      jSONObject2.append("0", short0);
      JSONTokener jSONTokener0 = new JSONTokener("Qde");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of Qde
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7473160710982958
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      String string0 = "ugt:/fo";
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("ugt:/fo", (-4929));
      try { 
        jSONObject0.getJSONObject("ugt:/fo");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"ugt:/fo\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.6438982763731413
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toH";
      JSONObject jSONObject1 = jSONObject0.append("toH", hashMap0);
      String string1 = "_3H";
      jSONObject1.optDouble("_3H");
      jSONObject1.put("_3H", false);
      int int0 = 4101;
      StringWriter stringWriter0 = new StringWriter(4101);
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "toH");
      String string2 = "getequals";
      stringWriter1.write("getequals");
      jSONObject0.write(stringWriter1);
      Integer integer0 = new Integer(4101);
      try { 
        jSONObject1.getInt("1");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"1\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.079793901118466
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optBoolean("\"java.lang.Object@0000000001\"");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject3 = jSONObject0.put("[java.lang.Long@0000000007]", 44);
      jSONObject1.toString((-2427), (-1201));
      jSONObject3.put("ha", (-3358.1));
      jSONObject3.getLong("[java.lang.Long@0000000007]");
      jSONObject2.optDouble("getcompareTo");
      jSONObject0.optString("[java.lang.Long@0000000007]");
      try { 
        jSONObject3.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.3502176535335755
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge(jSONObject0, double0, biFunction0);
      JSONObject jSONObject1 = jSONObject0.put("[", false);
      Double.isFinite(3957.37054);
      Double double1 = new Double(3957.37054);
      hashMap0.putIfAbsent(jSONObject1, double1);
      JSONObject jSONObject2 = jSONObject0.put("[", 123);
      Short.compare((short)865, (short) (-2864));
      Short short0 = new Short((short) (-3415));
      Float float0 = new Float(0.0F);
      JSONObject jSONObject3 = jSONObject2.accumulate("ac", float0);
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      JSONObject jSONObject4 = new JSONObject((Map) null);
      jSONObject1.optInt(",:]}/\"[{;=#");
      long long0 = jSONObject3.getLong("ac");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.3471483550584669
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("tr", (-2358));
      String string0 = ",\n";
      try { 
        jSONObject0.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.6012012411729115
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)11);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", byte0);
      JSONObject jSONObject2 = jSONObject1.accumulate("equ", "equ");
      JSONObject jSONObject3 = jSONObject1.putOpt("[", jSONObject0);
      jSONObject1.optBoolean("[", false);
      jSONObject2.put("get", (-1017));
      jSONObject2.optBoolean("equ");
      Double double0 = new Double((-1017));
      JSONTokener jSONTokener0 = new JSONTokener("equ");
      Float float0 = new Float((double) (byte)11);
      Boolean.valueOf(false);
      JSONObject jSONObject4 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double1 = new Double(1728.1694840188);
      linkedList1.pollFirst();
      linkedList1.add(double0);
      linkedList1.iterator();
      Double double2 = new Double(0.0);
      jSONObject3.optInt("get");
      int int0 = jSONObject0.getInt("get");
      assertEquals(3, jSONObject0.length());
      assertEquals((-1017), int0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.483363390985866
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "JSONArray[";
      stringArray0[3] = "JSONArray[";
      stringArray0[4] = "JSONArray[";
      stringArray0[5] = "JSONArray[";
      stringArray0[7] = "JSONArray[";
      stringArray0[8] = "0";
      Integer integer0 = new Integer(1940);
      JSONObject jSONObject0 = new JSONObject(integer0);
      HashMap<Object, Boolean> hashMap0 = new HashMap<Object, Boolean>();
      Boolean boolean0 = Boolean.valueOf(true);
      hashMap0.replace((Object) "JSONArray[", boolean0);
      JSONObject jSONObject1 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject2 = jSONObject0.accumulate("JSONArray[", jSONObject1);
      Integer.sum(1940, 1940);
      jSONObject2.put("JSONArray[", 93);
      jSONObject0.getInt("JSONArray[");
      JSONObject.valueToString("0", 1940, 1940);
      JSONObject jSONObject3 = new JSONObject((Object) jSONObject0, stringArray0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.691650433803758
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      jSONObject0.optInt("\"java.lang.Object@0000000001\"", 123);
      Byte byte0 = new Byte((byte) (-71));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Object object1 = JSONObject.NULL;
      hashMap0.put(": ", object1);
      JSONObject.valueToString(": ");
      Boolean boolean0 = new Boolean("KP");
      Boolean boolean1 = new Boolean(": ");
      Boolean.compare(true, false);
      Boolean.valueOf(false);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      hashMap1.put("gettoHexString", object1);
      hashMap1.put("KP", ": ");
      Short short0 = new Short((short) (-13));
      jSONObject0.accumulate("isequals", "\"java.lang.Object@0000000001\"");
      HashMap<Byte, Integer> hashMap2 = new HashMap<Byte, Integer>();
      HashMap<Integer, Object> hashMap3 = new HashMap<Integer, Object>();
      JSONObject jSONObject1 = new JSONObject((Map) hashMap3);
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of \"java.lang.Object@0000000001\"
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tri";
      stringArray0[3] = "tri";
      stringArray0[4] = "tri";
      stringArray0[5] = "tri";
      stringArray0[7] = "tri";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject(biFunction0, stringArray0);
      String string0 = jSONObject0.optString("tri", stringArray0[2]);
      assertNull(string0);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min(3866L, 0.0F);
      String string0 = "u\\4gEt:/fo";
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.put((String) null, (-2056));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.6855983590263937
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-2121L));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 0.0F);
      Float.sum(0.0F, (-1.0F));
      hashMap0.put(float0, (Short) null);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.iterator();
      Double double0 = new Double(0.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add(double0);
      linkedList2.addAll((Collection<? extends Double>) linkedList3);
      linkedList2.poll();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.toString((-1427));
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      Double double1 = new Double(0.0);
      JSONObject jSONObject1 = jSONObject0.append("X8", boolean0);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4106590666975354
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2186), (-2186));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2186));
      Byte byte0 = new Byte((byte) (-79));
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Double double0 = new Double(123);
      Double.sum(1698.54, 387.62306482);
      hashMap0.put("fh@=V", double0);
      Object object1 = JSONObject.NULL;
      hashMap0.put("java.lang.Long@0000000004.", object1);
      JSONObject.valueToString("java.lang.Long@0000000004.");
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, false);
      Boolean.valueOf(true);
      HashMap<String, Object> hashMap1 = new HashMap<String, Object>();
      String string0 = "getgetJSONObject";
      hashMap1.put("getgetJSONObject", "\"java.lang.String@0000000005\"");
      hashMap1.put("KP", "java.lang.Long@0000000004.");
      try { 
        jSONObject0.getBoolean("\"java.lang.Object@0000000001\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\\"java.lang.Object@0000000001\\\"\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.48086324721994
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Short short0 = new Short((short)814);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'5Ekoiq; l";
      stringArray0[1] = "r#*jWAa2D*v'";
      stringArray0[2] = "pa";
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((double) (short)814);
      Short short1 = new Short((short)814);
      hashMap0.put(float0, short1);
      Short short2 = new Short((short)814);
      hashMap0.put(float0, short2);
      Short short3 = new Short((short)9);
      Short short4 = new Short((short)1845);
      Short.compare((short)9, (short)2554);
      Short short5 = new Short((short) (-1112));
      hashMap0.put(float0, short5);
      jSONObject0.toJSONArray((JSONArray) null);
      jSONObject0.optJSONArray("53yLh(?tC 82G");
      try { 
        jSONObject0.getJSONArray("r#*jWAa2D*v'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"r#*jWAa2D*v'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Double.max(1L, 0.0);
      String string0 = "rLIXYc~#";
      String[] stringArray0 = new String[3];
      stringArray0[0] = "rLIXYc~#";
      stringArray0[1] = "rLIXYc~#";
      stringArray0[2] = "rLIXYc~#";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.6857163938987743
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject0.optInt("p@#[pV[K-<<[2sI5e");
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      hashMap0.put(")xe8Cj+|", jSONObject0);
      Boolean.valueOf(true);
      Integer integer0 = new Integer(0);
      jSONObject1.length();
      Short.toUnsignedLong((short)20);
      jSONObject1.put("9ffy>w2W7", 123);
      Short.compare((short)865, (short)865);
      Short short0 = new Short((short)10);
      jSONObject1.accumulate("9ffy>w2W7", "p@#[pV[K-<<[2sI5e");
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap2);
      Long long0 = new Long((-2541));
      jSONObject1.accumulate("eR+jA}LYpoU&QDM<VJi", long0);
      try { 
        jSONObject0.getDouble("p@#[pV[K-<<[2sI5e");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"p@#[pV[K-<<[2sI5e\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.039673710708897
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      boolean boolean0 = jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      boolean boolean1 = jSONObject1.optBoolean("\"java.lang.Object@0000000001\"");
      assertFalse(boolean1 == boolean0);
      
      Byte byte0 = new Byte((byte)125);
      linkedList0.add(byte0);
      Short.toUnsignedLong((short)663);
      JSONObject jSONObject3 = jSONObject2.put("[java.lang.Long@0000000007]", (-1559));
      jSONObject2.toString((-882), (-2172));
      double double0 = jSONObject1.optDouble("{\n\"java.lang.String@0000000003\": java.lang.Double@0000000005,\n\"java.lang.String@0000000009\": java.lang.Integer@0000000010\n}");
      assertEquals(Double.NaN, double0, 0.01);
      
      jSONObject1.optString("");
      double double1 = jSONObject3.getDouble("[java.lang.Long@0000000007]");
      assertEquals((-1559.0), double1, 0.01);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9174716867505905
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "a]";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a]";
      stringArray0[1] = "a]";
      stringArray0[2] = "a]";
      stringArray0[3] = "a]";
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      byte byte0 = (byte) (-128);
      hashMap0.entrySet();
      JSONObject.valueToString(hashMap0, (-1559), 8);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Object object0 = JSONObject.NULL;
      String string1 = "fF{9ih]k&]@L";
      jSONObject0.optJSONObject("] not found.");
      JSONTokener jSONTokener0 = new JSONTokener("a]");
      jSONTokener0.nextClean();
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of a]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity((Object) null);
      JSONTokener jSONTokener0 = new JSONTokener("gethashCode");
      jSONTokener0.nextValue();
      jSONTokener0.nextClean();
      JSONTokener jSONTokener1 = new JSONTokener("gethashCode");
      jSONTokener1.nextTo("Expected '");
      JSONTokener jSONTokener2 = new JSONTokener("gethashCode");
      JSONTokener jSONTokener3 = new JSONTokener("*]e^*");
      jSONTokener3.nextValue();
      jSONTokener1.next('e');
      JSONTokener jSONTokener4 = new JSONTokener("g");
      jSONTokener4.nextClean();
      JSONTokener jSONTokener5 = new JSONTokener((String) null);
      JSONTokener jSONTokener6 = new JSONTokener("getparseFloat");
      JSONTokener jSONTokener7 = new JSONTokener("in");
      JSONTokener jSONTokener8 = new JSONTokener("isisFinite");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of g
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.8791326374377332
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 0.0F);
      JSONObject.getNames((Object) "nJ");
      Long.divideUnsigned((-2121L), (-2121L));
      Object object0 = new Object();
      JSONObject.getNames((Object) hashMap0);
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.666944819316914
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Long long0 = new Long(0L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((double) 0L);
      Short.toUnsignedInt((short)879);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = jSONArray0.put(true);
      linkedList0.add(float0);
      Float.sum((short) (-3901), (short) (-3901));
      Short short0 = new Short((short) (-2060));
      Short short1 = new Short((short) (-2060));
      Short short2 = new Short((short)8192);
      Short.toUnsignedLong((short)32);
      hashMap0.put(float0, short2);
      Boolean boolean0 = new Boolean(false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      JSONObject jSONObject1 = jSONObject0.append("lH", jSONArray1);
      JSONObject jSONObject2 = jSONObject1.put(",:]}/\"[{;=#", (Map) hashMap0);
      jSONObject2.toString(93, 1665);
      // Undeclared exception!
      try { 
        jSONObject1.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8704487496714264
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tri";
      stringArray0[1] = "rLIXYc~#";
      stringArray0[2] = "rLIXYc~#";
      stringArray0[3] = "tri";
      stringArray0[4] = "rLIXYc~#";
      stringArray0[5] = "tri";
      stringArray0[6] = "rLIXYc~#";
      stringArray0[7] = "tri";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject(biFunction0, stringArray0);
      jSONObject0.optBoolean("rLIXYc~#", true);
      jSONObject0.optString("tri", "rLIXYc~#");
      try { 
        jSONObject0.getLong("UL%dsD$gR_:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"UL%dsD$gR_:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      String string0 = "I5C\\g/DOwbQ,_)63O";
      JSONTokener jSONTokener0 = new JSONTokener("I5Cg/DOwbQ,_)63O");
      char char0 = '&';
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.630394700195289
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)11);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", byte0);
      JSONObject jSONObject2 = jSONObject1.accumulate("+&qu", "+&qu");
      jSONObject1.putOpt("[", jSONObject0);
      jSONObject1.optBoolean("[", false);
      JSONObject jSONObject3 = jSONObject2.put("get", (-1017));
      jSONObject2.optBoolean("+&qu");
      Double double0 = new Double((-1017));
      JSONTokener jSONTokener0 = new JSONTokener("+&qu");
      Float float0 = new Float((double) (byte)11);
      Boolean.valueOf(false);
      JSONObject jSONObject4 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      jSONObject1.remove("get");
      String string0 = "tri";
      JSONObject jSONObject5 = new JSONObject();
      jSONObject3.optString("[", "tri");
      try { 
        jSONObject3.getString("tri");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"tri\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.6166438994361947
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity((Object) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean("\"java.lang.Object@0000000003\"");
      Boolean.valueOf(true);
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      jSONObject0.remove("ZC671ognNI");
      JSONObject jSONObject2 = jSONObject0.append("n,)NqsYE:", (Object) null);
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2531));
      Long.getLong("rr?@Mo|J@@%/zin");
      Float float0 = new Float(0.793489F);
      jSONObject0.accumulate("istoString", float0);
      jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      Integer integer0 = new Integer((-2531));
      JSONTokener jSONTokener0 = new JSONTokener("ZC671ognNI");
      hashMap0.keySet();
      jSONObject0.optJSONArray("n,)NqsYE:");
      JSONObject.testValidity(hashMap0);
      try { 
        jSONObject2.getJSONObject("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.6830752230322905
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HashMap<Byte, JSONArray> hashMap0 = new HashMap<Byte, JSONArray>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.optLong(")}S:");
      JSONObject jSONObject1 = jSONObject0.put(")}S:", false);
      jSONObject1.optLong(")}S:");
      jSONObject0.toString(59);
      jSONObject0.getString(")}S:");
      try { 
        jSONObject0.getLong("IL\"Y)t[#D");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"IL\\\"Y)t[#D\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5490230514048333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      boolean boolean0 = new Boolean("|AgS4DZ");
      jSONObject0.optLong("W+%s\"32j", 0L);
      jSONObject0.putOpt(",B?WG", (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertEquals(0, linkedList0.size());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.940671268968105
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[6] = "fo";
      stringArray0[5] = "fo";
      JSONObject jSONObject1 = new JSONObject("fo", stringArray0);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject.valueToString(boolean0);
      jSONObject1.put("33LLMdD", (Object) "fo");
      String string0 = "";
      Short short0 = new Short((short)2);
      Long.getLong("fo");
      JSONTokener jSONTokener0 = new JSONTokener(stringArray0[0]);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.108335652604384
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a]";
      stringArray0[1] = "a]";
      stringArray0[2] = "a]";
      stringArray0[3] = "a]";
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Double double0 = new Double(2017.1720750061186);
      JSONObject jSONObject1 = new JSONObject(double0, stringArray0);
      Float float0 = new Float((float) 5850);
      HashMap<Integer, Long> hashMap2 = new HashMap<Integer, Long>();
      JSONObject jSONObject2 = jSONObject0.put("1}Z-t36mV(hj{'9", (Map) hashMap2);
      jSONObject2.opt("1}Z-t36mV(hj{'9");
      try { 
        jSONObject2.getDouble("kp;6UF4ym,]:#?");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"kp;6UF4ym,]:#?\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6867368439362582
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      jSONObject0.optLong(": ", (-2141L));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float0 = new Float((float) (byte) (-108));
      Short short0 = new Short((byte) (-108));
      HashMap<Float, Short> hashMap2 = new HashMap<Float, Short>();
      Float float1 = new Float((-4566.64F));
      Float.sum(5850, (-1243.2268F));
      Float float2 = new Float((double) 5850);
      hashMap1.put(float1, short0);
      Short short1 = new Short((byte) (-108));
      hashMap1.put(float2, short1);
      Short short2 = new Short((short)1845);
      Short.toUnsignedInt((short)16);
      Float float3 = new Float(672.387245204926);
      Float.sum((-1243.2268F), 5850);
      hashMap1.put(float3, (Short) null);
      Short short3 = new Short((short)28);
      Short.compare((short)2554, (short) (-2106));
      hashMap1.put(float0, short3);
      jSONObject0.optJSONArray("}1kg6[4*#");
      try { 
        jSONObject0.getJSONArray("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.755914334118545
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "get";
      Byte byte0 = new Byte((byte)11);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", byte0);
      String string1 = "+&qu";
      JSONObject jSONObject2 = jSONObject1.accumulate("+&qu", "+&qu");
      jSONObject1.putOpt("[", jSONObject0);
      jSONObject1.optBoolean("[", false);
      jSONObject2.put("get", (-1017));
      jSONObject2.toString();
      jSONObject2.optBoolean("+&qu");
      Double double0 = new Double((-1017));
      JSONTokener jSONTokener0 = new JSONTokener("+&qu");
      Float float0 = new Float((double) (byte)11);
      Boolean.valueOf(false);
      JSONObject jSONObject3 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Byte.compare((byte)35, (byte)35);
      Double double1 = new Double(1728.1694840188);
      linkedList1.pollFirst();
      linkedList1.add(double0);
      try { 
        Long.decode("#N=z*Cm");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N=z*Cm\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.3467767713796532
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 0.0F);
      Float.sum(0.0F, (-1.0F));
      hashMap0.put(float0, (Short) null);
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.iterator();
      Double double0 = new Double(0.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add((Double) null);
      linkedList2.addAll((Collection<? extends Double>) linkedList3);
      linkedList2.poll();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      Double double1 = new Double(0.0);
      jSONObject0.append("X8", boolean0);
      String string0 = jSONObject0.toString();
      assertNotNull(string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.9923082837468438
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity((Object) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 2);
      JSONObject.valueToString(object0);
      Boolean.valueOf("null");
      Boolean boolean0 = new Boolean("null");
      Boolean.valueOf(true);
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2531));
      Long.getLong("r?-@Mo|J@@%/zQn");
      Float float0 = new Float(1.0F);
      JSONObject jSONObject2 = jSONObject0.accumulate("JSON does not allow non-finite numbers.", float0);
      JSONObject.valueToString(hashMap0, 2, 2);
      jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      jSONObject0.optDouble("x$wEOFpl!0xvv?@");
      jSONObject1.toString((-3661), 2);
      Float.sum(2261.8035F, (-2255.0515F));
      JSONObject.valueToString((Object) null);
      Double double0 = new Double(Double.NaN);
      try { 
        jSONObject2.putOpt("in", double0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.6152402575267164
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a]";
      stringArray0[1] = "a]";
      stringArray0[2] = "a]";
      stringArray0[3] = "a]";
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Byte byte0 = new Byte((byte) (-128));
      JSONObject.getNames((Object) jSONArray0);
      Float float0 = new Float((float) (byte) (-128));
      Short short0 = new Short((byte) (-128));
      HashMap<Float, Short> hashMap2 = new HashMap<Float, Short>();
      Short.toUnsignedInt((byte) (-128));
      Float float1 = new Float((-4566.64F));
      Float float2 = new Float((double) 5850);
      hashMap1.put(float1, short0);
      Short short1 = new Short((byte) (-128));
      hashMap1.put(float2, short1);
      jSONArray0.put(false);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('3');
      JSONObject jSONObject1 = new JSONObject(float1, stringArray0);
      Float float3 = new Float((float) (short)1861);
      JSONObject jSONObject2 = jSONObject1.putOpt("a]", float3);
      jSONObject1.getDouble("a]");
      JSONObject jSONObject3 = jSONObject2.optJSONObject("Expected a ',' or ']'");
      assertNull(jSONObject3);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9723771432078263
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Double double0 = new Double(1.0);
      Double.sum(0.0, 2287.8477578575);
      JSONObject jSONObject0 = new JSONObject(double0);
      HashMap<Float, Integer> hashMap0 = new HashMap<Float, Integer>();
      Double double1 = new Double(1.0);
      String string0 = JSONObject.valueToString(double1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.putOpt(",B?WG", (Object) null);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      jSONObject1.put("] is not a number.", (Collection) linkedList0);
      assertEquals(1, jSONObject1.length());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.988440840493711
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      JSONObject jSONObject2 = jSONObject0.put("\"java.lang.Object@0000000001\"", (double) (-2172));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optBoolean("\"java.lang.Object@0000000001\"");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject3 = jSONObject0.put("[java.lang.Long@0000000007]", 44);
      Short.compare((short)20, (short)20);
      jSONObject1.toString((-2427), (-1201));
      jSONObject2.optDouble("getcompareTo");
      try { 
        jSONObject3.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.0284976024616936
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min(3866L, 0.0F);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      hashMap1.put(float0, (Short) null);
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.parallelStream();
      linkedList1.addAll((Collection<? extends Double>) linkedList2);
      Double double0 = new Double((-1.0F));
      linkedList1.push(double0);
      linkedList1.poll();
      linkedList1.offerFirst(double0);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      Double double1 = new Double((-1.0F));
      jSONObject0.append("=[q]+q^?6;", (Object) null);
      try { 
        jSONObject0.getDouble(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float.valueOf((-1.0F));
      String string0 = "ugt:/fo";
      JSONObject.quote("in");
      JSONObject.quote("ugt:/fo");
      JSONTokener jSONTokener0 = new JSONTokener("ugt:/fo");
      JSONTokener jSONTokener1 = new JSONTokener("ugt:/fo");
      jSONTokener0.nextValue();
      jSONTokener0.nextClean();
      JSONTokener jSONTokener2 = new JSONTokener("is");
      try { 
        jSONTokener0.nextValue();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing value at character 4 of ugt:/fo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.0716331923765323
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)12);
      jSONObject0.put("getquote", (Object) short0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (short)12);
      Double double0 = new Double(724.757782454141);
      JSONObject jSONObject1 = new JSONObject();
      Double double1 = new Double((short)12);
      JSONObject jSONObject2 = jSONObject1.accumulate("getquote", double1);
      jSONObject2.put("Q[QQ>", 0L);
      Integer integer0 = new Integer((-1643));
      try { 
        jSONObject0.accumulate((String) null, jSONObject1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.559398544251735
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.append("toH", hashMap0);
      jSONObject1.optDouble("_3H");
      jSONObject1.put("_3H", false);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      Byte byte0 = new Byte((byte)54);
      jSONObject0.put("ke{t'x", (Object) byte0);
      LinkedList<Byte> linkedList1 = new LinkedList<Byte>();
      JSONArray jSONArray1 = new JSONArray((Collection) linkedList1);
      Double double0 = new Double(Double.NaN);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject2.accumulate("43.00", "_3H");
      Integer integer0 = new Integer((-1979));
      jSONObject2.accumulate("OYSfT|v0Tzi8%N1Z", jSONArray1);
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.9479823681363664
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject.valueToString(jSONObject0, 46, (-1458));
      JSONObject jSONObject1 = jSONObject0.accumulate("\f", "{}");
      jSONObject1.optLong("l6VK70CS");
      jSONObject0.toString((-1458), 46);
      JSONObject jSONObject2 = new JSONObject("{}");
      JSONObject jSONObject3 = jSONObject0.put("wheel.json.JSONObject", (-2221.910443595287));
      jSONObject3.optDouble("{}");
      assertEquals(2, jSONObject0.length());
      
      HashMap<Double, String> hashMap0 = new HashMap<Double, String>();
      jSONObject2.put("wheel.json.JSONObject", (Map) hashMap0);
      assertEquals(1, jSONObject2.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.14470439351554
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity((Object) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", (-23));
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean("\"java.lang.Object@0000000003\"");
      Boolean.valueOf(true);
      hashMap0.put("x$wEOFpl!0xvv?@", jSONObject1);
      jSONObject0.remove("ZC671ognNI");
      JSONObject jSONObject2 = jSONObject0.append("n,)NqsYE:", (Object) null);
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2531));
      Long.getLong("rr?@Mo|J@@%/zin");
      String string0 = "istoString";
      Float float0 = new Float(0.793489F);
      jSONObject0.accumulate("istoString", float0);
      JSONObject.valueToString(hashMap0, (-23), (-23));
      jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      Integer integer0 = new Integer((-2531));
      JSONTokener jSONTokener0 = new JSONTokener("rr?@Mo|J@@%/zin");
      hashMap0.keySet();
      JSONTokener jSONTokener1 = new JSONTokener("{\"java.lang.String@0000000010\": {\n\"java.lang.String@0000000007\": java.lang.Float@0000000008,\n\"java.lang.String@0000000006\": [null],\n\"java.lang.String@0000000002\": \"java.lang.Object@0000000003\"\n}}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener1);
      jSONObject3.optJSONArray("P");
      JSONObject.testValidity(hashMap0);
      try { 
        jSONObject2.getJSONObject("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Short short0 = new Short((short)1389);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((float) (short)1389);
      Float float1 = new Float((-1.0));
      Short short1 = new Short((short)69);
      Short short2 = new Short((short)69);
      hashMap0.put(float1, short2);
      hashMap0.put(float0, short1);
      Float float2 = new Float(0.0F);
      Short short3 = new Short((short)1389);
      hashMap0.put(float2, short3);
      Short short4 = new Short((short)69);
      hashMap0.put(float1, short0);
      Short short5 = new Short((short)1389);
      Short short6 = new Short((short)1389);
      hashMap0.put(float1, short5);
      String string0 = "{";
      JSONTokener jSONTokener0 = new JSONTokener("{");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must end with '}' at character 1 of {
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.094201482930785
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.testValidity((Object) null);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", (-23));
      JSONObject.valueToString(object0);
      Boolean boolean0 = new Boolean("\"java.lang.Object@0000000003\"");
      Boolean.valueOf(true);
      jSONObject0.remove("ZC671ognNI");
      JSONObject jSONObject2 = jSONObject0.append("n,)NqsYE:", (Object) null);
      Long.getLong("p@#[pV[K-<<[2sI5e", (long) (-2531));
      Long.getLong("rr?@Mo|J@@%/zin");
      Float float0 = new Float(0.793489F);
      jSONObject0.accumulate("istoString", float0);
      JSONObject.valueToString(hashMap0, (-23), (-23));
      jSONObject1.isNull("p@#[pV[K-<<[2sI5e");
      Integer integer0 = new Integer((-2531));
      JSONTokener jSONTokener0 = new JSONTokener("rr?@Mo|J@@%/zin");
      hashMap0.keySet();
      JSONTokener jSONTokener1 = new JSONTokener("{}");
      JSONObject jSONObject3 = new JSONObject(jSONTokener1);
      jSONObject3.optJSONArray("P");
      JSONObject.testValidity(hashMap0);
      try { 
        jSONObject2.getJSONObject("toJ");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toJ\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Long long0 = new Long((-2121L));
      String string0 = "{D;Npo]o0";
      JSONTokener jSONTokener0 = new JSONTokener("{D;Npo]o0");
      JSONObject jSONObject0 = new JSONObject();
      String string1 = "k0I-.";
      jSONTokener0.nextTo("k0I-.");
      String string2 = null;
      jSONTokener0.syntaxError((String) null);
      try { 
        jSONObject0.getJSONObject("k0I-.");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"k0I-.\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.9961265703017723
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Short short0 = new Short((short)2920);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONObject.getNames(jSONObject0);
      Object object0 = new Object();
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.6189978958658688
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      double double0 = 1.0;
      Double double1 = new Double(1.0);
      JSONObject jSONObject0 = new JSONObject(double1);
      double double2 = 0.0;
      Double.isFinite(0.0);
      String string0 = null;
      try { 
        jSONObject0.put((String) null, (-1117L));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.8224043826340384
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optLong("true", 585L);
      String[] stringArray0 = new String[7];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("java.lang.Float@0000000008.");
      String string0 = "JSONArray[";
      JSONTokener jSONTokener1 = new JSONTokener("JSONArray[");
      try { 
        jSONTokener1.next('s');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 's' and instead saw 'J' at character 1 of JSONArray[
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.541280958396051
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Long long0 = new Long((-2110L));
      Long.divideUnsigned(1L, 1L);
      JSONObject jSONObject0 = new JSONObject();
      long long1 = jSONObject0.optLong("_+X,Gz");
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.037005533057689
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Short short0 = new Short((short)814);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "'5Ekoiq; l";
      stringArray0[1] = "r#*jWAa2D*v'";
      stringArray0[2] = "pa";
      stringArray0[3] = "UCQrT\"~(";
      stringArray0[4] = "rot";
      stringArray0[5] = "ys'W";
      stringArray0[6] = "NudJsCYe4&,";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject jSONObject2 = jSONObject1.optJSONObject("r#*jWAa2D*v'");
      assertNull(jSONObject2);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4745821161672197
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("gettoString", (-573L));
      JSONObject jSONObject2 = jSONObject0.put("gettoString", 1791.2088);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      LinkedList<Float> linkedList1 = new LinkedList<Float>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList1);
      jSONArray0.put((-1683L));
      JSONObject.valueToString(linkedList0, (-1458), (-1579));
      jSONObject0.optDouble("YvPZ:Yt");
      jSONObject2.length();
      jSONObject1.optDouble("for", (-1306.1780912533));
      jSONObject0.has("[]");
      try { 
        jSONObject0.getString("isreplaceFirst");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"isreplaceFirst\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.179750410530963
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 0.0F);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float((float) (-2121L));
      hashMap1.put(float1, (Short) null);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.iterator();
      Double double0 = new Double(0.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add((Double) null);
      linkedList2.addAll((Collection<? extends Double>) linkedList3);
      linkedList2.poll();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      Double double1 = new Double(0.0);
      jSONObject0.append("X8", boolean0);
      assertEquals(1, jSONObject0.length());
      
      String string0 = JSONObject.valueToString(linkedList2, (-58), (-58));
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.340826068117238
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toH";
      JSONObject jSONObject1 = jSONObject0.append("toH", hashMap0);
      jSONObject1.optDouble("toH");
      JSONObject jSONObject2 = jSONObject1.put("toH", false);
      Integer integer0 = new Integer(4101);
      Double.max(4101, 4101);
      Double.max(Double.NaN, Double.NaN);
      jSONObject2.optDouble("toH");
      jSONObject1.optString("toH");
      String string1 = "false";
      try { 
        jSONObject1.getDouble("false");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"false\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.8588191082000844
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Byte byte0 = new Byte((byte)11);
      JSONObject jSONObject1 = jSONObject0.accumulate("get", byte0);
      JSONObject jSONObject2 = jSONObject1.accumulate("+&qu", "+&qu");
      JSONObject jSONObject3 = jSONObject1.putOpt("[", jSONObject0);
      jSONObject1.optBoolean("[", false);
      jSONObject2.put("get", (-1017));
      jSONObject2.optBoolean("+&qu");
      Double double0 = new Double((-1017));
      JSONObject jSONObject4 = jSONObject3.append(",:v*]}/\"[{;=#", "[");
      Double.isFinite((byte)11);
      JSONTokener jSONTokener0 = new JSONTokener("+&qu");
      Float float0 = new Float((double) (byte)11);
      Boolean.valueOf(false);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Byte.compare((byte)27, (byte)27);
      Double double1 = new Double(1728.1694840188);
      linkedList1.pollFirst();
      linkedList1.add(double0);
      String string0 = "#N=z*Cm";
      // Undeclared exception!
      jSONObject4.toString(0, 32);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.392261541085962
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 0.0F);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float(Double.NaN);
      hashMap1.put(float1, (Short) null);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.iterator();
      Double double0 = new Double(0.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add((Double) null);
      linkedList2.addAll((Collection<? extends Double>) linkedList3);
      linkedList2.poll();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.optJSONArray(",:]}/\"[{;=#");
      Double double1 = new Double(0.0);
      jSONObject0.append("X8", boolean0);
      jSONObject0.toString((-2043), (-2043));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.079968649917068
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2172), (-2172));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2172));
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2172), (-1559));
      jSONObject1.optBoolean("\"java.lang.Object@0000000001\"");
      Short.toUnsignedLong((short)20);
      JSONObject jSONObject2 = jSONObject0.put("[java.lang.Long@0000000006]", (-1559));
      jSONObject1.toString((-2427), (-1201));
      jSONObject0.optBoolean("{\n\"java.lang.String@0000000003\": java.lang.Long@0000000004,\n\"java.lang.String@0000000008\": java.lang.Integer@0000000009\n}", true);
      jSONObject2.put("ha", (-3358.1));
      jSONObject2.getLong("[java.lang.Long@0000000006]");
      jSONObject0.optDouble("getcompareTo");
      jSONObject0.optString("[java.lang.Long@0000000006]");
      try { 
        jSONObject2.getDouble(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.9871606099908243
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "a]";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "a]";
      stringArray0[1] = "a]";
      stringArray0[2] = "a]";
      stringArray0[3] = "a]";
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      LinkedList<JSONObject> linkedList0 = new LinkedList<JSONObject>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      BiFunction<JSONArray, Object, JSONArray> biFunction0 = (BiFunction<JSONArray, Object, JSONArray>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.merge("a]", jSONArray0, biFunction0);
      byte byte0 = (byte) (-128);
      hashMap0.entrySet();
      JSONObject.valueToString(hashMap0, (-1559), 8);
      HashMap<String, Object> hashMap2 = new HashMap<String, Object>();
      Object object0 = JSONObject.NULL;
      String string1 = "fF{9ih]k&]@L";
      jSONObject0.optJSONObject("] not found.");
      JSONTokener jSONTokener0 = new JSONTokener("a]");
      jSONTokener0.nextClean();
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 2 of a]
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.5835500511932006
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "rep");
      jSONObject0.isNull("m/");
      String string0 = JSONObject.valueToString(jSONObject0, 583, 583);
      // Undeclared exception!
      jSONObject0.getLong(string0);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = ",\n";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float(Double.NaN);
      Boolean boolean0 = Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      Double double1 = new Double(4333.103777794415);
      linkedList2.add(double1);
      linkedList2.pollFirst();
      linkedList2.add(double0);
      linkedList2.iterator();
      Double double2 = new Double((-2121.0F));
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      jSONObject0.put("false", (Object) boolean0);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("3#RXl[D&<T=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3#RXl[D&<T=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float.min(3866L, 0.0F);
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      linkedList1.parallelStream();
      Double double0 = new Double(3866L);
      Double double1 = new Double(0.0F);
      Double double2 = new Double(0.0F);
      String string0 = JSONObject.doubleToString(Double.NaN);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 0.0F);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float(Double.NaN);
      hashMap1.put(float1, (Short) null);
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      linkedList2.iterator();
      Double double0 = new Double(0.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.add((Double) null);
      linkedList2.addAll((Collection<? extends Double>) linkedList3);
      linkedList2.poll();
      LinkedList<Short> linkedList4 = new LinkedList<Short>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      jSONObject0.toJSONArray(jSONArray0);
      Object object0 = JSONObject.NULL;
      JSONObject.getNames(object0);
      JSONObject.getNames(jSONObject0);
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      String string0 = " {yNt+Wz\\fl";
      JSONTokener jSONTokener0 = new JSONTokener(" {yNt+Wz\fl");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 10 of  {yNt+Wz\fl
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Long long0 = new Long((-2121L));
      String string0 = "{D;Npo]o0";
      JSONTokener jSONTokener0 = new JSONTokener("{D;Npo]o0");
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected a ':' after a key at character 3 of {D;Npo]o0
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2376640158341043
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Double double1 = hashMap0.merge(jSONObject0, double0, biFunction0);
      Double.isFinite(3957.37054);
      jSONObject0.optBoolean("!y=mX^|j`Ou)[dS");
      Double.max(0.0, 0.0);
      Double double2 = new Double(3957.37054);
      Double.min(0.0, 0.0);
      Double double3 = hashMap0.put(jSONObject0, double0);
      hashMap0.remove((Object) double2);
      BiFunction<Object, Double, Double> biFunction1 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction1).apply(any() , anyDouble());
      hashMap0.replaceAll(biFunction1);
      Double.max(593.47510375, 0.0);
      Double.max(1428.1697892, 0.0);
      Double.isFinite(0.0);
      jSONObject0.optInt("V$l>woPJ;tYE");
      hashMap0.put(jSONObject0, double1);
      BiFunction<Double, Double, Double> biFunction2 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction2).apply(anyDouble() , anyDouble());
      hashMap0.merge(jSONObject0, double3, biFunction2);
      jSONObject0.remove("\n");
      jSONObject0.optString(".", "tri");
      try { 
        jSONObject0.getLong("g5xS0.N w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"g5xS0.N w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.1798595996911945
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((float) 3866L);
      Float.min(3866L, 3866L);
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("u\u0004gEt:/fo");
      JSONTokener jSONTokener1 = new JSONTokener("u\u0004gEt:/fo");
      jSONTokener0.nextValue();
      JSONObject.valueToString(float0);
      jSONObject0.put("u\u0004gEt:/fo", (Object) null);
      jSONTokener0.nextClean();
      JSONTokener jSONTokener2 = new JSONTokener("is");
      JSONTokener jSONTokener3 = new JSONTokener("u\u0004gEt:/fo");
      jSONTokener0.nextValue();
      JSONTokener jSONTokener4 = new JSONTokener("A JSONArray text must start with '['");
      jSONTokener4.skipTo('\\');
      JSONTokener jSONTokener5 = new JSONTokener((String) null);
      JSONTokener jSONTokener6 = new JSONTokener("wheel.json.JSONTokener");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of u\u0004gEt:/fo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8701172757423308
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      Object object1 = JSONObject.NULL;
      JSONObject jSONObject0 = new JSONObject(object1);
      jSONObject0.names();
      JSONTokener jSONTokener0 = new JSONTokener("gethashCode");
      jSONTokener0.nextValue();
      jSONTokener0.nextClean();
      String string0 = "Expected '";
      JSONTokener jSONTokener1 = new JSONTokener("Expected '");
      jSONTokener0.nextTo("A JSONObject text must begin with '{'");
      JSONTokener jSONTokener2 = new JSONTokener("Null key.");
      JSONTokener jSONTokener3 = new JSONTokener("A JSONObject text must begin with '{'");
      jSONTokener1.nextValue();
      try { 
        jSONTokener1.next('e');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'e' and instead saw ''' at character 10 of Expected '
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.556675302333908
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("ezSAJ*Lswea0_}atl^", 46);
      JSONObject.valueToString(jSONObject0, 46, 46);
      jSONObject0.put("Oa@sCqz7\".fx(", false);
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(",B?WG");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of ,B?WG
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.134878855784931
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      JSONObject.testValidity(object0);
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      jSONObject1.optInt("p@#[pV[K-<<[2sI5e", 0);
      JSONObject jSONObject2 = jSONObject1.put("uj*<`Z4a^J;Dh<qpQ1", (double) 0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject2.optDouble("&\"o[bt&!QxwYF", 0.0);
      JSONObject jSONObject3 = new JSONObject((Object) "uj*<`Z4a^J;Dh<qpQ1");
      jSONObject0.optInt("uj*<`Z4a^J;Dh<qpQ1", 0);
      JSONObject.valueToString(jSONObject3, (-1547), 0);
      jSONObject1.optBoolean("p@#[pV[K-<<[2sI5e");
      Short.toUnsignedLong((short)1058);
      JSONObject jSONObject4 = new JSONObject(jSONObject1);
      Short.compare((short)57, (short)57);
      jSONObject1.isNull("{\n\"java.lang.String@0000000009\": [\njava.lang.Byte@0000000053,\njava.lang.Byte@0000000054,\njava.lang.Byte@0000000055,\njava.lang.Byte@0000000056,\njava.lang.Byte@0000000057,\njava.lang.Byte@0000000058,\njava.lang.Byte@0000000059,\njava.lang.Byte@0000000060,\njava.lang.Byte@0000000061,\njava.lang.Byte@0000000062,\njava.lang.Byte@0000000063,\njava.lang.Byte@0000000064,\njava.lang.Byte@0000000065,\njava.lang.Byte@0000000066,\njava.lang.Byte@0000000067,\njava.lang.Byte@0000000068,\njava.lang.Byte@0000000069,\njava.lang.Byte@0000000070,\njava.lang.Byte@0000000071\n],\n\"java.lang.String@0000000050\": \"java.lang.Class@0000000051\",\n\"java.lang.String@0000000007\": java.lang.Boolean@0000000008\n}");
      String string0 = "k\\<?us;9S>O3$B";
      jSONObject4.optDouble("k<?us;9S>O3$B");
      try { 
        jSONObject3.getDouble("\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\b\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.2677359312028278
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      try { 
        jSONObject0.get("M*j{{]*,mNp%3<\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"M*j{{]*,mNp%3<\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.432813901625505
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double.isFinite((-1.0));
      Long long0 = new Long((-1464L));
      Long.min((-1464L), 0L);
      Integer integer0 = new Integer(18);
      Integer integer1 = Integer.getInteger("se", integer0);
      String string0 = JSONObject.numberToString(integer1);
      assertNotNull(string0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Object object0 = new Object();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Xd~IIyY@Y4lmw";
      stringArray0[1] = "d'A}33'\"-0@*]W]^U*";
      stringArray0[2] = "v~ej{~";
      stringArray0[3] = "isparseByte";
      stringArray0[4] = "] is not a Boolean.";
      JSONObject jSONObject0 = new JSONObject(object0, stringArray0);
      String string0 = jSONObject0.optString("isparseByte");
      assertEquals("", string0);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Double double0 = Double.valueOf(1.0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\u0003iuce`8)MrDTaYl.&T";
      stringArray0[1] = "0";
      stringArray0[2] = "/t,u?8a85x3m~D:TT4>";
      stringArray0[3] = "$eLxwa";
      stringArray0[4] = "kYQ~7wu+oF";
      stringArray0[5] = "?~ov._";
      JSONObject jSONObject0 = new JSONObject(double0, stringArray0);
      int int0 = jSONObject0.length();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.4499551509829356
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Object object0 = JSONObject.NULL;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.putOpt("p@#[pV[K-<<[2sI5e", object0);
      JSONObject.valueToString(object0);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      JSONObject jSONObject2 = jSONObject0.put("] s not a JSONObjct.", (Collection) linkedList0);
      Boolean boolean0 = new Boolean(true);
      Boolean.logicalOr(true, true);
      Boolean.compare(true, true);
      hashMap0.put(")xe8Cj+|", jSONObject0);
      Boolean.valueOf(true);
      Integer integer0 = new Integer(0);
      jSONObject1.length();
      Short.toUnsignedLong((short)20);
      jSONObject1.put("9ffy>w2W7", 123);
      Short.compare((short)865, (short)865);
      Short short0 = new Short((short)10);
      jSONObject1.accumulate("9ffy>w2W7", "p@#[pV[K-<<[2sI5e");
      HashMap<Byte, Integer> hashMap1 = new HashMap<Byte, Integer>();
      HashMap<Integer, Object> hashMap2 = new HashMap<Integer, Object>();
      try { 
        jSONObject2.get("null");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"null\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      short short0 = (short)12;
      Short short1 = new Short((short)12);
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optDouble("", (double) (short)12);
      JSONTokener jSONTokener0 = new JSONTokener("U#0r");
      jSONTokener0.next();
      JSONTokener jSONTokener1 = new JSONTokener("U#0r");
      try { 
        jSONTokener1.next('\u0083');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected '\u0083' and instead saw 'U' at character 1 of U#0r
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.38550466636879
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HashMap<Object, Double> hashMap0 = new HashMap<Object, Double>();
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toH";
      JSONObject jSONObject1 = jSONObject0.append("toH", hashMap0);
      JSONObject.valueToString(jSONObject1, (-386), (-386));
      JSONObject jSONObject2 = new JSONObject();
      String string1 = "is";
      Boolean.valueOf("is");
      String string2 = "isisNaN";
      try { 
        jSONObject1.getJSONArray("{\"java.lang.String@0000000003\": [{}]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000003\\\": [{}]}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.0164927125448684
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Short short0 = new Short((short)12);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("5.Y7nJ0Taz4cWGB P(5", (-863.0));
      String[] stringArray0 = new String[1];
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      char char0 = 'R';
      String string0 = "isvalue";
      JSONTokener jSONTokener0 = new JSONTokener("isvalue");
      jSONTokener0.nextTo("isvalue");
      String string1 = "false";
      jSONTokener0.syntaxError((String) null);
      jSONTokener0.next();
      try { 
        jSONTokener0.next('i');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'i' and instead saw 's' at character 2 of isvalue
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      HashMap<String, JSONArray> hashMap0 = new HashMap<String, JSONArray>();
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Double double0 = new Double((-1.4363076501316994));
      Float float0 = new Float(2017.1720750061186);
      String[] stringArray0 = new String[6];
      stringArray0[1] = "fk~&&~z!3E";
      stringArray0[2] = "[R-}m1_Zp.";
      stringArray0[4] = "EPe :S )0&EP";
      stringArray0[5] = "U2*\"V'9lhk!%/p";
      JSONObject jSONObject0 = new JSONObject(float0, stringArray0);
      Float float1 = new Float(0.0F);
      HashMap<Integer, Long> hashMap2 = new HashMap<Integer, Long>();
      jSONObject0.opt("");
      double double1 = new Float(0.0F);
      double double2 = jSONObject0.optDouble("kp;6UF4ym,]:#?");
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.5981863871455346
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Float.sum(955.9426F, 0.0F);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((double) 955.9426F);
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double(0.0F);
      linkedList1.pollFirst();
      Double double1 = new Double(955.9426F);
      Double double2 = new Double(2969.90276802);
      linkedList2.add(double2);
      Double.sum((-1251.815957), 4584.6513845);
      linkedList1.pollLast();
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      linkedList3.iterator();
      Double double3 = new Double(0.0);
      Boolean.valueOf(true);
      JSONObject.getNames((Object) double3);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.1130531111068542
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "rep");
      jSONObject0.isNull("m/");
      try { 
        jSONObject0.getDouble("getsubstring");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getsubstring\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=2.682343001452087
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object object0 = new Object();
      JSONObject.valueToString(object0, (-2187), (-2187));
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.isNull("\"java.lang.Object@0000000001\"");
      JSONObject jSONObject1 = jSONObject0.put("\"java.lang.Object@0000000001\"", (long) (-2187));
      jSONObject0.put("\"java.lang.Object@0000000001\"", 4809.0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put(0L);
      JSONObject.valueToString(jSONArray0, (-2187), (-1559));
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"");
      jSONObject1.length();
      jSONObject1.optDouble("\"java.lang.Object@0000000001\"", 2937.854);
      jSONObject0.has("\"java.lang.Object@0000000001\"");
      try { 
        jSONObject1.getString("Uzp;'=7s");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Uzp;'=7s\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.617051411355598
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tri";
      stringArray0[1] = "rLIXYc~#";
      stringArray0[2] = "rLIXYc~#";
      stringArray0[3] = "tri";
      stringArray0[4] = "tri";
      stringArray0[5] = "tri";
      stringArray0[6] = "rLIXYc~#";
      stringArray0[7] = "tri";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject(biFunction0, stringArray0);
      jSONObject0.optString("tri", "rLIXYc~#");
      try { 
        jSONObject0.getString("mYsFk");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mYsFk\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Long long0 = new Long(1L);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "G0|EQ|qfkmJ";
      Long.getLong("ED6SU[qKM");
      stringArray0[1] = "\r";
      JSONObject jSONObject0 = new JSONObject(long0, stringArray0);
      try { 
        jSONObject0.getLong("\r");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\\r\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "\b";
      stringArray0[3] = "c^;_o{3t`OAX";
      Object object0 = JSONObject.NULL;
      String string0 = JSONObject.valueToString(object0);
      assertEquals("null", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.4856416617803063
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[7];
      stringArray0[1] = "fo";
      stringArray0[2] = "fo";
      stringArray0[3] = "fo";
      stringArray0[4] = "fo";
      stringArray0[5] = "fo";
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(boolean0, 1144, 1144);
      Short.compare((short)865, (short) (-1851));
      Short short0 = new Short((short)23);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      hashMap0.put("fo", short0);
      JSONObject jSONObject1 = jSONObject0.put("4zU~JdgT*xRHRF", (Map) hashMap0);
      Boolean boolean1 = Boolean.TRUE;
      jSONObject1.putOpt("4zU~JdgT*xRHRF", "java.lang.Long@0000000001.");
      jSONObject0.append(" at character ", "fo");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of mi
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.16185319215039
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HashMap<JSONObject, Double> hashMap0 = new HashMap<JSONObject, Double>();
      JSONObject jSONObject0 = new JSONObject();
      BiFunction<Object, Object, Double> biFunction0 = (BiFunction<Object, Object, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = "[";
      boolean boolean0 = false;
      JSONObject jSONObject1 = jSONObject0.put("[", false);
      Double.isFinite(3957.37054);
      Double double0 = new Double(3957.37054);
      hashMap0.putIfAbsent(jSONObject1, double0);
      String string1 = "!y=mX^|j`Ou)[dS";
      HashMap<JSONObject, Object> hashMap1 = new HashMap<JSONObject, Object>();
      JSONObject jSONObject2 = jSONObject0.put("!y=mX^|j`Ou)[dS", (Map) hashMap0);
      try { 
        jSONObject2.getLong("[");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.15675135217846
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "QDo+h8,WOorFIj";
      String string0 = "Null pointer";
      stringArray0[1] = "Null pointer";
      stringArray0[2] = "SRjdSh_VQ_3";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      Boolean.logicalAnd(true, false);
      Short short0 = new Short((short)1);
      jSONObject0.accumulate("QDo+h8,WOorFIj", short0);
      jSONObject0.put("QDo+h8,WOorFIj", false);
      try { 
        jSONObject0.getJSONArray("QDo+h8,WOorFIj");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"QDo+h8,WOorFIj\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.4140512084176216
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[5];
      stringArray0[0] = "=XY Xb[- J(oNd}vp";
      stringArray0[1] = "getappend";
      stringArray0[2] = "isoptLong";
      stringArray0[3] = "isquote";
      stringArray0[4] = "app";
      JSONObject jSONObject0 = new JSONObject(biFunction0, stringArray0);
      try { 
        jSONObject0.getBoolean("=XY Xb[- J(oNd}vp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"=XY Xb[- J(oNd}vp\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Long.min((-1096L), (-1594L));
      Long long0 = new Long((-1096L));
      String string0 = JSONObject.numberToString(long0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.0890092384766588
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Double.max((-2121L), (-2121L));
      Long.min(0L, (-1732L));
      Long long1 = new Long(3866L);
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.numberToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.8033455593810737
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 3866L);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float(Double.NaN);
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optBoolean("j#>x(L3Nieb=:");
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList2.add(double0);
      linkedList2.pollFirst();
      linkedList2.add(double0);
      linkedList2.iterator();
      Double double1 = new Double(3866.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject("3#RXl[D&<T=");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of 3#RXl[D&<T=
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.0164927125448684
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Short short0 = new Short((short)12);
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONTokener jSONTokener0 = new JSONTokener("");
      jSONTokener0.next();
      JSONTokener jSONTokener1 = new JSONTokener("OF{(n3K-F_F<");
      JSONTokener jSONTokener2 = new JSONTokener("flo");
      jSONTokener2.nextClean();
      JSONTokener jSONTokener3 = new JSONTokener(",");
      JSONTokener jSONTokener4 = new JSONTokener((String) null);
      jSONTokener1.nextValue();
      jSONTokener2.syntaxError("flo");
      jSONTokener2.skipTo('=');
      JSONTokener jSONTokener5 = new JSONTokener("KdzCQ9{/Z^");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 2 of flo
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Integer integer0 = new Integer(2);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "getreplaceAll";
      stringArray0[2] = "B0'B`q[|";
      stringArray0[3] = "'";
      JSONObject jSONObject0 = new JSONObject(integer0, stringArray0);
      int int0 = jSONObject0.optInt("getreplaceAll", 2);
      assertEquals(2, int0);
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Long long0 = new Long((-974L));
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of }
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Double double0 = new Double(0.0);
      float float0 = 0.0F;
      Float.sum(0.0F, 0.0F);
      short short0 = (short) (-3470);
      Short short1 = new Short((short) (-3470));
      try { 
        jSONObject0.put("\n", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.9663267452196522
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 3866L);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float(Double.NaN);
      Boolean.valueOf(false);
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList2.pollFirst();
      Double double1 = new Double(0.0F);
      linkedList2.add(double1);
      linkedList2.add(double0);
      linkedList2.iterator();
      Double double2 = new Double(3866.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      jSONObject0.put("sum", 0L);
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONArray jSONArray0 = jSONObject0.optJSONArray("");
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 126
  /*Coverage entropy=0.7250829733914482
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      Set<Map.Entry<String, Object>> set0 = (Set<Map.Entry<String, Object>>)hashMap0.entrySet();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      String[] stringArray0 = new String[1];
      Short.toUnsignedLong((short)1058);
      Short.compare((short)57, (short)57);
      Object object0 = new Object();
      String string0 = JSONObject.valueToString(set0);
      assertEquals("[]", string0);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      Iterator iterator0 = jSONObject0.keys();
      assertNotNull(iterator0);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.1506719848487332
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Short short0 = new Short((short)12);
      Short.compare((short)3177, (short) (-229));
      jSONObject0.put("getquote", (Object) short0);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      jSONArray0.put((long) (short)12);
      JSONTokener jSONTokener0 = new JSONTokener("getquote");
      jSONObject0.put("kL1,", (Map) null);
      jSONTokener0.syntaxError("java.lang.Long@0000000001.");
      jSONTokener0.nextClean();
      JSONTokener jSONTokener1 = new JSONTokener("getquote");
      JSONTokener jSONTokener2 = new JSONTokener("getquote");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getquote
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.5137801058392384
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "0";
      stringArray0[1] = "0";
      stringArray0[3] = "0";
      stringArray0[4] = "0";
      stringArray0[5] = "0";
      stringArray0[6] = "0";
      stringArray0[8] = "0";
      JSONObject jSONObject0 = new JSONObject("0", stringArray0);
      int int0 = jSONObject0.optInt((String) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.toString();
      Short short0 = new Short((short)12);
      JSONTokener jSONTokener0 = new JSONTokener("getquote");
      jSONTokener0.nextClean();
      JSONTokener jSONTokener1 = new JSONTokener("getquote");
      JSONTokener jSONTokener2 = new JSONTokener("getquote");
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject(jSONTokener2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of getquote
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      Object object0 = new Object();
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.1807382878069084
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Long long0 = new Long((-2121L));
      Long.min((-2121L), 3866L);
      HashMap<Float, Short> hashMap0 = new HashMap<Float, Short>();
      Float float0 = new Float((-1.0F));
      Float.min((-2121L), (-1.0F));
      Float.min(3866L, 3866L);
      Float.sum(0.0F, (-1.0F));
      HashMap<Float, Short> hashMap1 = new HashMap<Float, Short>();
      Float float1 = new Float(Double.NaN);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      LinkedList<Double> linkedList1 = new LinkedList<Double>();
      LinkedList<Double> linkedList2 = new LinkedList<Double>();
      Double double0 = new Double(0.0);
      linkedList2.pollFirst();
      linkedList2.add(double0);
      linkedList2.iterator();
      Double double1 = new Double(3866.0F);
      LinkedList<Double> linkedList3 = new LinkedList<Double>();
      try { 
        jSONObject0.getInt("iG-`:Y\t5?nb'BrG[Qm");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"iG-`:Y\\t5?nb'BrG[Qm\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Object object0 = new Object();
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.names();
      JSONTokener jSONTokener0 = new JSONTokener("isdecode");
      jSONTokener0.nextValue();
      jSONTokener0.nextClean();
      String string0 = "java.lang.Long@00000000040";
      JSONTokener jSONTokener1 = new JSONTokener("java.lang.Long@00000000040");
      JSONTokener jSONTokener2 = new JSONTokener("Wg]u^`Q^:0uI~");
      jSONTokener2.nextTo("Wg]u^`Q^:0uI~");
      JSONTokener jSONTokener3 = new JSONTokener("su");
      JSONTokener jSONTokener4 = new JSONTokener("{!5>l2T$[eL'qK^");
      jSONTokener1.nextValue();
      try { 
        jSONTokener3.next('r');
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Expected 'r' and instead saw 's' at character 1 of su
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 134
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Double.isFinite((-1.4363076501316994));
      Double.max(1428.1697892, 1428.1697892);
      BiFunction<Double, Double, Double> biFunction0 = (BiFunction<Double, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String[] stringArray0 = new String[9];
      stringArray0[0] = "tri";
      stringArray0[1] = "rLIXYc~#";
      stringArray0[2] = "rLIXYc~#";
      stringArray0[3] = "tri";
      stringArray0[4] = "rLIXYc~#";
      stringArray0[5] = "tri";
      stringArray0[6] = "rLIXYc~#";
      stringArray0[7] = "tri";
      stringArray0[8] = "0";
      String string0 = JSONObject.quote("d");
      assertEquals("\"d\"", string0);
  }
}
