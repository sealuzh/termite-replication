/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 13:42:09 GMT 2019
 */

package org.jsecurity.web;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PrintWriter;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import javax.servlet.ServletOutputStream;
import javax.servlet.ServletRequest;
import javax.servlet.ServletRequestWrapper;
import javax.servlet.ServletResponse;
import javax.servlet.ServletResponseWrapper;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsecurity.authc.AuthenticationListener;
import org.jsecurity.authc.credential.Sha256CredentialsMatcher;
import org.jsecurity.authz.Permission;
import org.jsecurity.authz.permission.AllPermission;
import org.jsecurity.authz.permission.WildcardPermission;
import org.jsecurity.authz.permission.WildcardPermissionResolver;
import org.jsecurity.codec.CodecSupport;
import org.jsecurity.realm.Realm;
import org.jsecurity.realm.SimpleAccountRealm;
import org.jsecurity.session.Session;
import org.jsecurity.subject.PrincipalCollection;
import org.jsecurity.subject.SimplePrincipalCollection;
import org.jsecurity.subject.Subject;
import org.jsecurity.web.DefaultWebSecurityManager;
import org.jsecurity.web.WebRememberMeManager;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DefaultWebSecurityManager_ESTest extends DefaultWebSecurityManager_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.696783156858896
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponse servletResponse1 = servletResponseWrapper3.getResponse();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      Integer integer0 = new Integer(0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(integer0, "jsecurity");
      Subject subject0 = defaultWebSecurityManager1.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper0, servletResponse1);
      DefaultWebSecurityManager defaultWebSecurityManager2 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.bind(subject0, servletRequestWrapper2, servletResponseWrapper0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.2847097604829187
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320/org.jsecurity.realm.text.PropertiesRealm-0-accounts.data");
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      LinkedList<Realm> linkedList2 = new LinkedList<Realm>();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      linkedList2.offerFirst(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm(".validate(Session) method to perform validation.");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm1);
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      defaultWebSecurityManager1.setSessionIdCookieSecure(true);
      defaultWebSecurityManager1.isHttpSessionMode();
      defaultWebSecurityManager1.setSessionIdCookieName((String) null);
      assertEquals("jsecurity", defaultWebSecurityManager1.getSessionMode());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.5979676914793908
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("=OTQ5;");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper2.setContentLength(6);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper2);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper1);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper0, (ServletResponse) servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponse servletResponse1 = servletResponseWrapper0.getResponse();
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponse1);
      Subject subject0 = defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, true, (Session) null, (ServletRequest) servletRequestWrapper2, (ServletResponse) servletResponseWrapper8);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper3);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.bind(subject0, servletRequestWrapper2, servletResponse1);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.156958459902444
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("H6OpV|wqBAu=.!-?");
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      defaultWebSecurityManager0.setSessionIdCookieMaxAge((-12));
      defaultWebSecurityManager0.setSessionIdCookieSecure(true);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8448801138133146
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("H6OpV|wqBDu=.!k?");
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.newSessionManagerInstance();
      defaultWebSecurityManager0.getSessionMode();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("jsecurity mode - enabling WebSessionManager (JSecurity heterogenous sessions)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [jsecurity mode - enabling WebSessionManager (JSecurity heterogenous sessions)].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn((PrintWriter) null, (PrintWriter) null).when(servletResponse0).getWriter();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper9.getWriter();
      servletResponseWrapper8.getWriter();
      servletResponseWrapper9.getContentType();
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper11);
      servletResponseWrapper0.setCharacterEncoding("<m)");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      servletResponseWrapper14.setCharacterEncoding("@b7L/xF}][P:)6!n|n");
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper12);
      servletResponseWrapper5.getResponse();
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper13);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper1);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.getSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      linkedList1.offerFirst(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("V}AFNN3GQ*y.~Vn%Ri");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*y.~Vn%Ri");
      linkedList1.offerFirst(simpleAccountRealm1);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      linkedList1.push(simpleAccountRealm3);
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      linkedList1.add((Realm) simpleAccountRealm7);
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      linkedList0.add((Realm) simpleAccountRealm3);
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm("UTF-8");
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm("YF~9*EydrSC\"(");
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm1);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null, servletRequestWrapper0, servletResponse0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.7277938948158327
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("=OTQ5;");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(servletRequest0).getRemoteHost();
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.setContentLength(6);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper0);
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) servletRequestWrapper1, (ServletResponse) servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper1);
      servletResponseWrapper1.getResponse();
      defaultWebSecurityManager0.createSubject((PrincipalCollection) simplePrincipalCollection0, false, (Session) null, (ServletRequest) servletRequestWrapper1, (ServletResponse) servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager();
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper2);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.createSubject((ServletRequest) servletRequestWrapper3, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // javax.servlet.ServletRequestWrapper cannot be cast to javax.servlet.http.HttpServletRequest
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      WildcardPermission wildcardPermission0 = new WildcardPermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("a");
      wildcardPermissionResolver1.resolvePermission("r.`~;");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      wildcardPermissionResolver3.resolvePermission("r.`~;");
      wildcardPermissionResolver3.resolvePermission("http");
      wildcardPermissionResolver3.resolvePermission("].  Session ID's must be unique.");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.bind((Subject) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.02213804256327
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      defaultWebSecurityManager0.setRememberMeCipherKeyBase64("-Wtc*g*fIYW(@r,Y");
      defaultWebSecurityManager0.isHttpSessionMode();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = DefaultWebSecurityManager.HTTP_SESSION_MODE;
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      defaultWebSecurityManager0.setSessionIdCookiePath("c{SEB3");
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.9896217341979852
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      boolean boolean0 = defaultWebSecurityManager0.isHttpSessionMode();
      String string0 = DefaultWebSecurityManager.HTTP_SESSION_MODE;
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      WildcardPermission wildcardPermission0 = new WildcardPermission("http", true);
      WildcardPermission wildcardPermission1 = new WildcardPermission("http", true);
      WildcardPermission wildcardPermission2 = new WildcardPermission("Reading configuration from URL ", true);
      wildcardPermissionResolver1.resolvePermission("http");
      wildcardPermissionResolver0.resolvePermission("}NV>Io91x");
      wildcardPermissionResolver1.resolvePermission("sfj6r]Tzr");
      wildcardPermissionResolver0.resolvePermission("KtF9{<_{Wiw=S%VBD\"");
      wildcardPermissionResolver1.resolvePermission("ACL");
      WildcardPermission wildcardPermission3 = new WildcardPermission("] witihvalue=[");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("0:%?4e");
      wildcardPermissionResolver2.resolvePermission("kIweZ");
      wildcardPermissionResolver1.resolvePermission("/' $1z0rdFw(vZ");
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      wildcardPermissionResolver5.resolvePermission("#1Zs8rw%doy!>");
      wildcardPermissionResolver3.resolvePermission("sfj6r]Tzr");
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      defaultWebSecurityManager0.isAuthenticated((Session) null, (ServletRequest) null, servletResponseWrapper0);
      boolean boolean1 = defaultWebSecurityManager0.isAuthenticated((Session) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8686121260453956
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("m|+vu>VL");
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      WildcardPermissionResolver wildcardPermissionResolver0 = new WildcardPermissionResolver();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      wildcardPermissionResolver0.resolvePermission("4U,g1B>#b<$#0v|?6");
      WildcardPermission wildcardPermission0 = new WildcardPermission("m|+vu>VL", true);
      wildcardPermissionResolver0.resolvePermission("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      wildcardPermissionResolver0.resolvePermission("k|%-!*jV5L3");
      wildcardPermissionResolver0.resolvePermission("ArffAUQ3EU(t");
      wildcardPermissionResolver0.resolvePermission("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      WildcardPermissionResolver wildcardPermissionResolver1 = new WildcardPermissionResolver();
      wildcardPermissionResolver1.resolvePermission("Hm*#Fb1zSISL6znB/");
      WildcardPermission wildcardPermission1 = new WildcardPermission("0+8^CW]");
      wildcardPermissionResolver1.resolvePermission("'NOmO^~B");
      WildcardPermissionResolver wildcardPermissionResolver2 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver3 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("wUHq`E+<D|u(u)N");
      wildcardPermissionResolver1.resolvePermission(" Spool Thread");
      WildcardPermissionResolver wildcardPermissionResolver4 = new WildcardPermissionResolver();
      WildcardPermissionResolver wildcardPermissionResolver5 = new WildcardPermissionResolver();
      wildcardPermissionResolver0.resolvePermission("k|%-!*jV5L3");
      wildcardPermissionResolver2.resolvePermission("KtF9{<_{Wiw=S%VBD\"");
      defaultWebSecurityManager0.getPrincipals((Session) null);
      assertEquals("jsecurity", defaultWebSecurityManager0.getSessionMode());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.839277872916956
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("H6OpV|wqBDu=.!k?");
      defaultWebSecurityManager0.setSessionMode("jsecurity");
      LinkedHashSet<Permission> linkedHashSet1 = new LinkedHashSet<Permission>();
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      defaultWebSecurityManager0.getSessionMode();
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper1);
      servletRequestWrapper1.setRequest(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper3 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper4 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper5 = new ServletRequestWrapper(servletRequestWrapper2);
      ServletRequestWrapper servletRequestWrapper6 = new ServletRequestWrapper(servletRequestWrapper5);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.9989795764695173
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("~zRNEU74FT");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      defaultWebSecurityManager1.setSessionMode("jsecurity");
      assertEquals("jsecurity", defaultWebSecurityManager1.getSessionMode());
      
      String string0 = defaultWebSecurityManager0.getSessionMode();
      assertEquals("http", string0);
      
      defaultWebSecurityManager1.setSessionMode("http");
      assertTrue(defaultWebSecurityManager1.isHttpSessionMode());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      linkedList0.offerFirst(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      linkedList0.offerFirst(simpleAccountRealm2);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm("UTF-8");
      linkedList0.add((Realm) simpleAccountRealm4);
      Locale locale0 = Locale.US;
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      linkedList0.add((Realm) simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("Cannot create cache: ");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm13 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm2);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [null].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeCipherKeyBase64("-Wtc*g*fIYW(@r,Y");
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper0);
      Locale locale0 = Locale.KOREA;
      servletResponseWrapper3.setLocale(locale0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((PrincipalCollection) null, true, (Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9487205928347628
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AllPermission allPermission0 = new AllPermission();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      AuthenticationListener authenticationListener0 = mock(AuthenticationListener.class, new ViolatedAssumptionAnswer());
      defaultWebSecurityManager0.add(authenticationListener0);
      Integer integer0 = new Integer((-432));
      defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionMode("classpath");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid sessionMode [classpath].  Allowed values are public static final String constants in the org.jsecurity.web.DefaultWebSecurityManager class: 'http' or 'jsecurity', with 'http' being the default.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("G!O7VJX>");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      WebRememberMeManager webRememberMeManager0 = new WebRememberMeManager();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection(webRememberMeManager0, "G!O7VJX>");
      Class<SimplePrincipalCollection> class0 = SimplePrincipalCollection.class;
      simplePrincipalCollection0.oneByType(class0);
      SimplePrincipalCollection simplePrincipalCollection1 = new SimplePrincipalCollection();
      Class<Permission> class1 = Permission.class;
      Collection<Permission> collection0 = simplePrincipalCollection1.byType(class1);
      simpleAccountRealm0.isPermittedAll((PrincipalCollection) simplePrincipalCollection0, collection0);
      Integer integer0 = new Integer((-2022363720));
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setRememberMeCookieMaxAge(integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.203456186693981
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      doReturn((Locale) null).when(servletResponse0).getLocale();
      doReturn((ServletOutputStream) null).when(servletResponse0).getOutputStream();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper10.getContentType();
      servletResponseWrapper2.getOutputStream();
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper12);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper6);
      servletResponseWrapper16.getLocale();
      servletResponseWrapper13.setLocale((Locale) null);
      servletResponseWrapper13.setCharacterEncoding("have a maximumSize of at least 1. Performance is halved by not using a MemoryStore.");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper17 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper18 = new ServletResponseWrapper(servletResponseWrapper11);
      servletResponseWrapper1.setContentLength((-4261));
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.web.DefaultWebSecurityManager_PRINCIPALS_SESSION_KEY");
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      assertEquals("http", defaultWebSecurityManager1.getSessionMode());
      
      defaultWebSecurityManager0.getPrincipals((Session) null, servletRequest0, servletResponseWrapper13);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(servletResponse0).getContentType();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper4);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper4);
      servletResponseWrapper9.getContentType();
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper6);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper11);
      servletResponseWrapper0.setCharacterEncoding("<m)");
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletRequestWrapper servletRequestWrapper1 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletRequestWrapper servletRequestWrapper2 = new ServletRequestWrapper(servletRequestWrapper0);
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper8);
      servletResponseWrapper1.getResponse();
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper14);
      ServletResponseWrapper servletResponseWrapper17 = new ServletResponseWrapper(servletResponseWrapper15);
      ServletResponseWrapper servletResponseWrapper18 = new ServletResponseWrapper(servletResponseWrapper5);
      System.setCurrentTimeMillis((-793L));
      defaultWebSecurityManager0.newSessionManagerInstance();
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      linkedList0.offerFirst(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      linkedList0.offerFirst(simpleAccountRealm2);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      CodecSupport.toBytes("S{");
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      linkedList1.add((Realm) simpleAccountRealm1);
      Locale locale0 = Locale.US;
      Locale locale1 = Locale.US;
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      linkedList0.add((Realm) simpleAccountRealm3);
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm("UTF-8");
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm("UTF-8");
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((Locale) null).when(servletResponse0).getLocale();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      servletResponseWrapper0.getLocale();
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm3);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((ServletRequest) null, (ServletResponse) servletResponseWrapper1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.session.ServletContainerSessionManager", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.5935041414150646
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      defaultWebSecurityManager0.setSessionMode("http");
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.004371500423656
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("_{|}Io%9rV|d\"JzVI");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm0);
      ServletRequest servletRequest0 = mock(ServletRequest.class, new ViolatedAssumptionAnswer());
      ServletRequestWrapper servletRequestWrapper0 = new ServletRequestWrapper(servletRequest0);
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      boolean boolean0 = defaultWebSecurityManager0.isAuthenticated((Session) null, servletRequestWrapper0, servletResponseWrapper0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.6120172700343436
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      defaultWebSecurityManager0.setRememberMeDecryptionCipherKeyBase64("Kcy");
      String string0 = "-Wtc*g*fIYW(@r,Y";
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject((Session) null, (ServletRequest) null, (ServletResponse) servletResponseWrapper0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      ServletResponse servletResponse0 = mock(ServletResponse.class, new ViolatedAssumptionAnswer());
      doReturn((PrintWriter) null).when(servletResponse0).getWriter();
      ServletResponseWrapper servletResponseWrapper0 = new ServletResponseWrapper(servletResponse0);
      ServletResponseWrapper servletResponseWrapper1 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper2 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper3 = new ServletResponseWrapper(servletResponseWrapper2);
      ServletResponseWrapper servletResponseWrapper4 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper5 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper6 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper7 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper8 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper9 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper10 = new ServletResponseWrapper(servletResponseWrapper8);
      ServletResponseWrapper servletResponseWrapper11 = new ServletResponseWrapper(servletResponseWrapper9);
      ServletResponseWrapper servletResponseWrapper12 = new ServletResponseWrapper(servletResponseWrapper7);
      ServletResponseWrapper servletResponseWrapper13 = new ServletResponseWrapper(servletResponseWrapper1);
      ServletResponseWrapper servletResponseWrapper14 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper15 = new ServletResponseWrapper(servletResponseWrapper5);
      ServletResponseWrapper servletResponseWrapper16 = new ServletResponseWrapper(servletResponseWrapper15);
      ServletResponseWrapper servletResponseWrapper17 = new ServletResponseWrapper(servletResponseWrapper16);
      ServletResponseWrapper servletResponseWrapper18 = new ServletResponseWrapper(servletResponseWrapper16);
      ServletResponseWrapper servletResponseWrapper19 = new ServletResponseWrapper(servletResponseWrapper0);
      ServletResponseWrapper servletResponseWrapper20 = new ServletResponseWrapper(servletResponseWrapper13);
      ServletResponseWrapper servletResponseWrapper21 = new ServletResponseWrapper(servletResponseWrapper20);
      servletResponseWrapper21.setCharacterEncoding("r<u ");
      servletResponseWrapper5.getWriter();
      ServletResponseWrapper servletResponseWrapper22 = new ServletResponseWrapper(servletResponseWrapper10);
      ServletResponseWrapper servletResponseWrapper23 = new ServletResponseWrapper(servletResponseWrapper16);
      ServletResponseWrapper servletResponseWrapper24 = new ServletResponseWrapper(servletResponseWrapper20);
      ServletResponseWrapper servletResponseWrapper25 = new ServletResponseWrapper(servletResponseWrapper14);
      ServletResponseWrapper servletResponseWrapper26 = new ServletResponseWrapper(servletResponseWrapper21);
      ServletResponseWrapper servletResponseWrapper27 = new ServletResponseWrapper(servletResponseWrapper8);
      servletResponseWrapper17.setCharacterEncoding("l9wt'Wqi~|FXgT_'");
      ServletResponseWrapper servletResponseWrapper28 = new ServletResponseWrapper(servletResponseWrapper22);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieSecure(true);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<SimpleAccountRealm> class0 = SimpleAccountRealm.class;
      simplePrincipalCollection0.byType(class0);
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm("UTF-8");
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm("Hm*#Fb1zSISL6znXB/");
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("UTF-8");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm13 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm14 = new SimpleAccountRealm("");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm14);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.027377075708073
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      linkedList0.add((Permission) null);
      DefaultWebSecurityManager defaultWebSecurityManager1 = new DefaultWebSecurityManager(simpleAccountRealm0);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager1.setRememberMeCookiePath("G");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/jsecurity-ehcache");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/tmp/jsecurity-ehcache/ehcache_auto_created_1392409281320");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "cacheManager argument cannot be null.");
      LinkedHashSet<Permission> linkedHashSet0 = new LinkedHashSet<Permission>();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendLineToFile(evoSuiteFile2, "fu`IlpKxDb");
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookiePath("fu`IlpKxDb");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      LinkedList<Permission> linkedList0 = new LinkedList<Permission>();
      defaultWebSecurityManager0.isPermittedAll((PrincipalCollection) null, (Collection<Permission>) linkedList0);
      AllPermission allPermission0 = new AllPermission();
      linkedList0.add((Permission) allPermission0);
      defaultWebSecurityManager0.setRememberMeCookiePath("org.jsecurity.web.DefaultWebSecurityManager_AUTHENTICATED_SESSION_KEY");
      defaultWebSecurityManager0.isPermitted((PrincipalCollection) null, (List<Permission>) linkedList0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedHashSet<Realm> linkedHashSet0 = new LinkedHashSet<Realm>();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm(". .N");
      linkedList1.offerFirst(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm((String) null);
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm((String) null);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm("?:97lh=HG'']");
      linkedList0.offerFirst(simpleAccountRealm3);
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      linkedList0.add((Realm) simpleAccountRealm3);
      Locale locale0 = Locale.US;
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm(". .N");
      linkedList0.add((Realm) simpleAccountRealm9);
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("P_1q'I^SOmn@zYpt{");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm13 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Realm) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realm argument cannot be null
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      LinkedList<Realm> linkedList1 = new LinkedList<Realm>();
      linkedList0.offerFirst(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      linkedList0.offerFirst(simpleAccountRealm2);
      linkedList0.pollFirst();
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      linkedList0.add((Realm) simpleAccountRealm1);
      Locale locale0 = Locale.KOREA;
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieName("]OJ34BZL},G3b].z]");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling fileSystemHandling3 = new FileSystemHandling();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.setSessionIdCookieMaxAge((-1464074085));
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // The convenience passthrough methods for setting session id cookie attributes are only available when the underlying SessionManager implementation is org.jsecurity.web.session.DefaultWebSessionManager, which is enabled by default when the sessionMode is 'jsecurity'.
         //
         verifyException("org.jsecurity.web.DefaultWebSecurityManager", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      byte[] byteArray0 = new byte[17];
      byteArray0[1] = (byte)65;
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<SimpleAccountRealm> class0 = SimpleAccountRealm.class;
      simplePrincipalCollection0.byType(class0);
      byteArray0[2] = (byte)71;
      byteArray0[3] = (byte) (-1);
      CodecSupport.toChars(byteArray0);
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm("UTF-8");
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("C[nnot ceat cXche* ");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm13 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(simpleAccountRealm6);
      // Undeclared exception!
      try { 
        defaultWebSecurityManager0.createSubject();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No ServletRequest found in ThreadContext. Make sure WebUtils.bind() is being called. (typically called by JSecurityFilter)  This could also happen when running integration tests that don't properly call WebUtils.bind().
         //
         verifyException("org.jsecurity.web.WebUtils", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<SimpleAccountRealm> class0 = SimpleAccountRealm.class;
      simplePrincipalCollection0.byType(class0);
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm("UTF-8");
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm("Hm*#Fb1zSISL6znXB/");
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("UTF-8");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm13 = new SimpleAccountRealm();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      DefaultWebSecurityManager defaultWebSecurityManager0 = null;
      try {
        defaultWebSecurityManager0 = new DefaultWebSecurityManager((Collection<Realm>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Realms collection argument cannot be null.
         //
         verifyException("org.jsecurity.mgt.RealmSecurityManager", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      SimpleAccountRealm simpleAccountRealm0 = new SimpleAccountRealm();
      LinkedList<Realm> linkedList0 = new LinkedList<Realm>();
      linkedList0.offerFirst(simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm1 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      SimpleAccountRealm simpleAccountRealm2 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      linkedList0.offerFirst(simpleAccountRealm2);
      SimpleAccountRealm simpleAccountRealm3 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm4 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm5 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm6 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      Sha256CredentialsMatcher sha256CredentialsMatcher0 = new Sha256CredentialsMatcher();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-92);
      byteArray0[1] = (byte)65;
      SimplePrincipalCollection simplePrincipalCollection0 = new SimplePrincipalCollection();
      Class<SimpleAccountRealm> class0 = SimpleAccountRealm.class;
      Collection<SimpleAccountRealm> collection0 = simplePrincipalCollection0.byType(class0);
      linkedList0.addAll(collection0);
      byteArray0[2] = (byte)63;
      byteArray0[3] = (byte) (-1);
      CodecSupport.toChars(byteArray0);
      SimpleAccountRealm simpleAccountRealm7 = new SimpleAccountRealm("V}AFNN3GQ*W.~Vn%R&A");
      Sha256CredentialsMatcher sha256CredentialsMatcher1 = new Sha256CredentialsMatcher();
      SimpleAccountRealm simpleAccountRealm8 = new SimpleAccountRealm("UTF-8");
      linkedList0.add((Realm) simpleAccountRealm4);
      Locale locale0 = Locale.US;
      SimpleAccountRealm simpleAccountRealm9 = new SimpleAccountRealm();
      Sha256CredentialsMatcher sha256CredentialsMatcher2 = new Sha256CredentialsMatcher();
      linkedList0.add((Realm) simpleAccountRealm0);
      SimpleAccountRealm simpleAccountRealm10 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm11 = new SimpleAccountRealm("C[nnot ceat cXche* ");
      SimpleAccountRealm simpleAccountRealm12 = new SimpleAccountRealm();
      SimpleAccountRealm simpleAccountRealm13 = new SimpleAccountRealm();
      DefaultWebSecurityManager defaultWebSecurityManager0 = new DefaultWebSecurityManager(linkedList0);
      assertTrue(defaultWebSecurityManager0.isHttpSessionMode());
  }
}
