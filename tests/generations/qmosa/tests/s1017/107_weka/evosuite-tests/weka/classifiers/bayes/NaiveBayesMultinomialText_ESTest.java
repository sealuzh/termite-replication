/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 14:23:36 GMT 2019
 */

package weka.classifiers.bayes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.classifiers.bayes.NaiveBayesMultinomialText;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.PrecomputedKernelMatrixKernel;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.RandomCommittee;
import weka.classifiers.misc.SerializedClassifier;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.ChebyshevDistance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.neighboursearch.CoverTree;
import weka.core.stemmers.LovinsStemmer;
import weka.core.stemmers.NullStemmer;
import weka.core.stemmers.SnowballStemmer;
import weka.core.stemmers.Stemmer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.Tokenizer;
import weka.estimators.Estimator;
import weka.estimators.KernelEstimator;
import weka.filters.supervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class NaiveBayesMultinomialText_ESTest extends NaiveBayesMultinomialText_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.849129625635622
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("");
      Instances instances0 = testInstances0.generate();
      instances0.parallelStream();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.setClassType((-14));
      CoverTree coverTree0 = new CoverTree();
      testInstances0.setNumInstances((-14));
      int[] intArray0 = new int[1];
      intArray0[0] = (-14);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), intArray0, (-14));
      double[] doubleArray0 = naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      assertArrayEquals(new double[] {0.5, 0.5}, doubleArray0, 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = TestInstances.DEFAULT_WORDS;
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.setOptions(stringArray0);
      assertEquals(1.0, naiveBayesMultinomialText3.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText3.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText3.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText3.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText3.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText3.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText3.getLNorm(), 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0958067883758336
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText0.setPeriodicPruning((-3443));
      naiveBayesMultinomialText0.m_useStopList = true;
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.listOptions();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-3443);
      doubleArray0[1] = (double) (-3443);
      doubleArray0[2] = (double) (-3443);
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.setNormalizeDocLength(true);
      naiveBayesMultinomialText0.getPeriodicPruning();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.useStopListTipText();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "weka/core/Capabilities.props";
      stringArray0[1] = "The LNorm to use for document length normalization.";
      stringArray0[2] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[3] = "&m-Kwe39Kt";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.4388220902193267
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency((-1419.578));
      naiveBayesMultinomialText0.getNorm();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer("norm");
      snowballStemmer0.setStemmer("norm");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "norm";
      stringArray0[1] = "norm";
      stringArray0[2] = "norm";
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.stemmerTipText();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.setTokenizer((Tokenizer) null);
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.useWordFrequenciesTipText();
      NaiveBayesMultinomialText.main((String[]) null);
      naiveBayesMultinomialText0.setLNorm(1.0);
      naiveBayesMultinomialText0.globalInfo();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.getOptions();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.10893980259848
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinkedList<BinarySparseInstance> linkedList0 = new LinkedList<BinarySparseInstance>();
      int[] intArray0 = new int[6];
      intArray0[0] = (-1);
      intArray0[1] = (-2);
      intArray0[2] = (-1);
      intArray0[3] = 10000;
      intArray0[4] = (-1);
      intArray0[5] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(18.0, intArray0, 10000);
      linkedList0.add(binarySparseInstance0);
      instances0.addAll((Collection<? extends Instance>) linkedList0);
      testInstances0.setNumDate(27);
      instances0.parallelStream();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.04836831993068
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("org.tartarus.snowball");
      instances0.parallelStream();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)2;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-21);
      byteArray0[4] = (byte)23;
      byteArray0[5] = (byte)10;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      testInstances0.generate("org.tartarus.snowball.ext");
      Object object0 = new Object();
      naiveBayesMultinomialText0.getUseStopList();
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
      
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.buildClassifier(instances0);
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency((-2804.0));
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) snowballStemmer0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "3IfKj";
      stringArray0[1] = "org.tartarus.snowball.ext";
      stringArray0[2] = "org.tartarus.snowball.ext";
      stringArray0[3] = "org.tartarus.snowball";
      stringArray0[4] = "org.tartarus.snowball";
      stringArray0[5] = "[KS/@PZbAx=O/OZh";
      stringArray0[6] = "org.tartarus.snowball";
      stringArray0[7] = "^_E!k6-*qHn:B+$q(k";
      stringArray0[8] = "org.tartarus.snowball.ext";
      SnowballStemmer.main(stringArray0);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.getRevision();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals((-2804.0), double0, 0.01);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 48;
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.periodicPruningTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)0;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)0;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.getLowercaseTokens();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      
      naiveBayesMultinomialText0.m_normalize = true;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      naiveBayesMultinomialText0.setLowercaseTokens(false);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)69;
      byteArray0[1] = (byte) (-104);
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)69;
      byteArray0[4] = (byte) (-104);
      byteArray0[5] = (byte) (-104);
      byteArray0[6] = (byte) (-104);
      byteArray0[7] = (byte)12;
      byteArray0[8] = (byte)12;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.847642989259894
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setMinWordFrequency(10.0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\tThe Kernel to use.\n\t(default: weka.classifiers.functions.supportVector.PolyKernel)");
      MockFile mockFile0 = new MockFile((String) null, "\tThe Kernel to use.\n\t(default: weka.classifiers.functions.supportVector.PolyKernel)");
      mockFile0.setLastModified(0L);
      mockFile0.toURL();
      mockFile0.setExecutable(true, true);
      naiveBayesMultinomialText0.setStopwords(mockFile0);
      naiveBayesMultinomialText0.getStopwords();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getTokenizer();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getUseStopList();
      boolean boolean0 = naiveBayesMultinomialText0.getUseWordFrequencies();
      assertEquals(10.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      KernelEstimator kernelEstimator0 = new KernelEstimator(11.0);
      Estimator estimator0 = Estimator.clone(kernelEstimator0);
      Capabilities capabilities0 = estimator0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      ((KernelEstimator) estimator0).toString();
      testInstances0.setNumNumeric(2445);
      Predicate<Instance> predicate0 = Predicate.isEqual((Object) "Relation: Testdata\nSeed: 1\n# Instances: 20\nClassType: 1\n# Classes: 2\nClass index: -2\n# Nominal: 0\n# Nominal values: 2\n# Numeric: 1\n# String: 0\n# Date: 0\n# Relational: 0\n  - # Nominal: 0\n  - # Nominal values: 2\n  - # Numeric: 1\n  - # String: 0\n  - # Date: 0\n  - # Instances: 10\nMulti-Instance: false\nWords: The,quick,brown,fox,jumps,over,the,lazy,dog\nWord separators:  \n");
      instances0.removeIf(predicate0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Relation: Testdata\nSeed: 1\n# Instances: 20\nClassType: 1\n# Classes: 2\nClass index: -2\n# Nominal: 0\n# Nominal values: 2\n# Numeric: 1\n# String: 0\n# Date: 0\n# Relational: 0\n  - # Nominal: 0\n  - # Nominal values: 2\n  - # Numeric: 1\n  - # String: 0\n  - # Date: 0\n  - # Instances: 10\nMulti-Instance: false\nWords: The,quick,brown,fox,jumps,over,the,lazy,dog\nWord separators:  \n");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":f$t9Eze!tWf[-V8");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2312004308192974
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      System.setCurrentTimeMillis(2098L);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_minWordP = (double) 2098L;
      naiveBayesMultinomialText0.m_lowercaseTokens = true;
      Stemmer stemmer0 = naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.setStemmer(stemmer0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getOptions();
      Capabilities capabilities0 = naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setLNorm(0.0);
      naiveBayesMultinomialText0.globalInfo();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.periodicPruningTipText();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.toString();
      File file0 = serializedClassifier0.getModelFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getUseWordFrequencies();
      naiveBayesMultinomialText0.normTipText();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      // Undeclared exception!
      try { 
        testInstances0.getRelationalFormat(1595);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1595
         //
         verifyException("weka.core.TestInstances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 48;
      naiveBayesMultinomialText0.toString();
      naiveBayesMultinomialText0.periodicPruningTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[6];
      byteArray0[1] = (byte)67;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte)18;
      byteArray0[5] = (byte)2;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.getPeriodicPruning();
      Random.setNextRandom((-1715));
      naiveBayesMultinomialText0.globalInfo();
      assertEquals(48, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.230265232675139
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = false;
      naiveBayesMultinomialText0.m_useStopList = false;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate();
      instances0.setRelationName(".arff");
      instances0.parallelStream();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.setClassType((-40));
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-40);
      intArray0[2] = (-2);
      testInstances0.setNumInstances((-40));
      intArray0[4] = (-2);
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.isMissingSparse((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.1764338189634698
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate(" ");
      Instances instances0 = testInstances0.generate();
      instances0.parallelStream();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.setClassType((-14));
      CoverTree coverTree0 = new CoverTree();
      int[] intArray0 = new int[7];
      intArray0[0] = (-1);
      intArray0[1] = (-14);
      intArray0[2] = (-2);
      intArray0[3] = (-1);
      intArray0[4] = (-2);
      intArray0[5] = (-2);
      intArray0[6] = (-2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1414));
      naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.isMissingSparse((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.650442143368543
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_useStopList = true;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("org.tartarus.snowball");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)102;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)13;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getOptions();
      CoverTree coverTree0 = new CoverTree();
      try { 
        coverTree0.kNearestNeighbours(binarySparseInstance0, 4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.270344619620389
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate();
      SnowballStemmer snowballStemmer1 = new SnowballStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "org.tartarus.snowball";
      stringArray0[1] = "org.tartarus.snowball";
      stringArray0[2] = ".arff";
      snowballStemmer0.setOptions(stringArray0);
      SnowballStemmer.main(testInstances0.DEFAULT_WORDS);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SnowballStemmer snowballStemmer2 = new SnowballStemmer();
      snowballStemmer2.getRevision();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer1);
      boolean boolean0 = naiveBayesMultinomialText0.m_normalize;
      naiveBayesMultinomialText0.getLNorm();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("J");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray1 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText1.setOptions(stringArray1);
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getLowercaseTokens());
      assertEquals(12, stringArray1.length);
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText1.getPeriodicPruning());
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.969755134636486
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = (-2047.02);
      naiveBayesMultinomialText0.m_normalize = true;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.getLNorm();
      naiveBayesMultinomialText0.LNormTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.reset();
      naiveBayesMultinomialText1.normalizeDocLengthTipText();
      naiveBayesMultinomialText1.pruneDictionary();
      naiveBayesMultinomialText1.getNorm();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.m_norm = (-2047.02);
      naiveBayesMultinomialText2.minWordFrequencyTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.tokenizerTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      assertEquals((-2047.02), naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.useStopListTipText();
      String string0 = naiveBayesMultinomialText3.useWordFrequenciesTipText();
      assertEquals("Use word frequencies rather than binary bag of words representation", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      Discretize discretize0 = new Discretize();
      Capabilities capabilities0 = discretize0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      testInstances0.toString();
      testInstances0.setNumNumeric(1952257861);
      Predicate<Instance> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Instance> predicate1 = predicate0.negate();
      Predicate<Instance> predicate2 = predicate1.negate();
      predicate2.or(predicate1);
      Predicate<Instance> predicate3 = Predicate.isEqual((Object) null);
      predicate3.and(predicate1);
      instances0.removeIf(predicate2);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumClasses(2886);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " wA*y%Vqf 4[X#h`zRu");
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.0755869945144085
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.parallelStream();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("/4A");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      RandomCommittee randomCommittee0 = new RandomCommittee();
      Capabilities capabilities0 = randomCommittee0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      DenseInstance denseInstance0 = new DenseInstance(63);
      instances0.add((Instance) denseInstance0);
      Instances instances1 = testInstances0.generate();
      instances1.parallelStream();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.buildClassifier(instances0);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.218736967976606
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "OLP?m");
      Instances instances0 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)16;
      byteArray0[4] = (byte)1;
      byteArray0[5] = (byte)76;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      testInstances0.toString();
      testInstances0.setNumNumeric(1952257861);
      Predicate<Instance> predicate0 = Predicate.isEqual((Object) "OLP?m");
      Predicate<Instance> predicate1 = predicate0.negate();
      predicate1.and(predicate0);
      Predicate<Instance> predicate2 = predicate0.or(predicate1);
      predicate0.and(predicate2);
      instances0.removeIf(predicate0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      testInstances0.setNumClasses(1952257861);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@relation");
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("The independent probability of a class\n--------------------------------------\nclass1\t12.0\nclass2\t10.0\n\nThe probability of a word given the class\n-----------------------------------------\n\tclass1\tclass2\t\n", string0);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.9881988355172293
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      naiveBayesMultinomialText0.setLNorm((-2919.8));
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.getStemmer();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.getTokenizer();
      assertEquals((-2919.8), naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.75012938226178
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = (-4601.824761959556);
      naiveBayesMultinomialText0.m_minWordP = (-4601.824761959556);
      PrecomputedKernelMatrixKernel precomputedKernelMatrixKernel0 = new PrecomputedKernelMatrixKernel();
      File file0 = precomputedKernelMatrixKernel0.getKernelMatrixFile();
      naiveBayesMultinomialText0.m_stopwordsFile = file0;
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.m_normalize = false;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value");
      Kernel.makeCopy(precomputedKernelMatrixKernel0);
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.normTipText();
      precomputedKernelMatrixKernel0.getOptions();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.setStemmer((Stemmer) null);
      naiveBayesMultinomialText0.m_t = (-320.8707639890141);
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.stopwordsTipText();
      naiveBayesMultinomialText0.setStopwords(file0);
      naiveBayesMultinomialText0.getCapabilities();
      naiveBayesMultinomialText0.periodicPruningTipText();
      precomputedKernelMatrixKernel0.getCapabilities();
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance((-1169));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.970620935502287
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      
      naiveBayesMultinomialText0.setLNorm(0.0);
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(0.0, double0, 0.01);
      
      naiveBayesMultinomialText0.LNormTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.reset();
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.normalizeDocLengthTipText();
      naiveBayesMultinomialText2.pruneDictionary();
      double double1 = naiveBayesMultinomialText1.m_t;
      naiveBayesMultinomialText1.getNorm();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.minWordFrequencyTipText();
      naiveBayesMultinomialText3.tokenizerTipText();
      naiveBayesMultinomialText2.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText4.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.101564817984378
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      naiveBayesMultinomialText0.m_useStopList = false;
      Instances instances0 = testInstances0.generate();
      instances0.parallelStream();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      naiveBayesMultinomialText0.buildClassifier(instances0);
      naiveBayesMultinomialText0.normTipText();
      naiveBayesMultinomialText0.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.LNormTipText();
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "RZ>&K";
      stringArray0[2] = "d<\fnw7'#/^_";
      stringArray0[3] = "(250'#Al+`7?(";
      stringArray0[4] = "</VARIABLE>\n";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("</VARIABLE>\n", arrayList0, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-4548.7);
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = 17.0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      try { 
        naiveBayesMultinomialText0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.bayes.NaiveBayesMultinomialText: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.1709341090153718
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.toString();
      assertEquals("NaiveBayesMultinomialText: No model built yet.\n", string0);
      
      String string1 = naiveBayesMultinomialText0.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string1);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 3.0;
      doubleArray0[1] = (-656.5524298061648);
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-206.655);
      doubleArray0[4] = 13.0;
      doubleArray0[5] = 6.0;
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray0;
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      String string2 = naiveBayesMultinomialText0.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string2);
      
      naiveBayesMultinomialText0.normTipText();
      double[] doubleArray1 = new double[7];
      naiveBayesMultinomialText0.m_wordsPerClass = doubleArray1;
      doubleArray1[0] = 1.0;
      doubleArray1[1] = (-1524.672476819708);
      doubleArray1[2] = (-201.0);
      doubleArray1[3] = (-1.0);
      doubleArray1[4] = (-1.0);
      doubleArray1[5] = 975.525;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      doubleArray1[6] = 16.0;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray1;
      String string3 = naiveBayesMultinomialText0.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string3);
      
      String string4 = naiveBayesMultinomialText0.normTipText();
      assertEquals("The norm of the instances after normalization.", string4);
      
      naiveBayesMultinomialText0.getTokenizer();
      String string5 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string5);
      
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(12, stringArray0.length);
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLNorm(2474);
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_periodicP = 2474;
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      String[] stringArray0 = new String[0];
      SnowballStemmer.main(stringArray0);
      snowballStemmer0.getRevision();
      naiveBayesMultinomialText0.setStemmer(snowballStemmer0);
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.getLNorm();
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("org.tartarus.snowball.ext");
      naiveBayesMultinomialText0.setStemmer(lovinsStemmer0);
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals(2474.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.132999251994992
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ";kM4rB\"y,m,&/kul ";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "IdR MI";
      stringArray0[5] = "spR30o:";
      stringArray0[6] = "\tUse reduced error pruning.";
      stringArray0[7] = "-stopwords";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -stopwords option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[6];
      stringArray0[3] = "not-relational-atts";
      try { 
        naiveBayesMultinomialText0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = 1802.8098;
      naiveBayesMultinomialText0.setNorm(1802.8098);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = true;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 2445;
      naiveBayesMultinomialText0.m_periodicP = 2445;
      naiveBayesMultinomialText0.getUseWordFrequencies();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 2445;
      naiveBayesMultinomialText0.m_periodicP = 2445;
      naiveBayesMultinomialText0.setUseWordFrequencies(false);
      naiveBayesMultinomialText0.getUseStopList();
      naiveBayesMultinomialText0.LNormTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[4];
      intArray0[0] = 6;
      intArray0[1] = 125;
      intArray0[2] = (-2262);
      intArray0[3] = 2004318071;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2596.777918463, intArray0, (-28));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) sparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.parallelStream();
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setClassType((-2));
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      CoverTree coverTree2 = new CoverTree();
      Random.setNextRandom((-2));
      TestInstances testInstances2 = new TestInstances();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(denseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.updateClassifier(binarySparseInstance1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = 6.0;
      doubleArray0[2] = 1256.2407706725;
      doubleArray0[3] = 10.0;
      doubleArray0[4] = 1203.6965;
      naiveBayesMultinomialText0.m_probOfClass = doubleArray0;
      try { 
        naiveBayesMultinomialText0.updateClassifier((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.5697737640169103
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)73;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)97;
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte)97;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "pI\"r=U");
      naiveBayesMultinomialText1.getRevision();
      naiveBayesMultinomialText0.toString();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText2.getOptions();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText2.setOptions(stringArray0);
      naiveBayesMultinomialText2.stemmerTipText();
      naiveBayesMultinomialText2.LNormTipText();
      naiveBayesMultinomialText0.toString();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)9, doubleArray0);
      naiveBayesMultinomialText0.getRevision();
      naiveBayesMultinomialText0.tokenizeInstance(binarySparseInstance0, false);
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.setPeriodicPruning(118);
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int[] intArray0 = new int[1];
      intArray0[0] = 40;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-133.1519661), intArray0, (-1303));
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      try { 
        naiveBayesMultinomialText0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.NaiveBayesMultinomialText", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = 2449;
      naiveBayesMultinomialText0.m_periodicP = 2449;
      naiveBayesMultinomialText0.getNormalizeDocLength();
      naiveBayesMultinomialText0.LNormTipText();
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.pruneDictionary();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)8;
      byteArray0[1] = (byte)69;
      byteArray0[2] = (byte) (-104);
      byteArray0[3] = (byte)12;
      byteArray0[4] = (byte)9;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      int int0 = naiveBayesMultinomialText0.getPeriodicPruning();
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertEquals(0, int0);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.5176485343902093
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText1.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText1.getOptions();
      String string1 = naiveBayesMultinomialText2.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string1);
      
      SGDText sGDText0 = new SGDText();
      SGDText sGDText1 = new SGDText();
      sGDText0.getLossFunction();
      SGDText sGDText2 = new SGDText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText3.setUseStopList(false);
      naiveBayesMultinomialText1.useWordFrequenciesTipText();
      String string2 = naiveBayesMultinomialText3.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string2);
      
      naiveBayesMultinomialText2.lowercaseTokensTipText();
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.808564943963369
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText0.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string0);
      
      naiveBayesMultinomialText0.tokenizerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String string1 = naiveBayesMultinomialText1.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string1);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "wUGN!5>*xN&";
      stringArray0[1] = "The tokenizing algorithm to use on the strings.";
      stringArray0[2] = "The stemming algorithm to use on the words.";
      stringArray0[3] = "Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value";
      stringArray0[4] = "The stemming algorithm to use on the words.";
      stringArray0[5] = "The tokenizing algorithm to use on the strings.";
      stringArray0[6] = "The tokenizing algorithm to use on the strings.";
      stringArray0[7] = "The tokenizing algorithm to use on the strings.";
      stringArray0[8] = "The stemming algorithm to use on the words.";
      naiveBayesMultinomialText1.setOptions(stringArray0);
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.setNormalizeDocLength(false);
      String string2 = naiveBayesMultinomialText1.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string2);
      
      String string3 = naiveBayesMultinomialText1.tokenizerTipText();
      assertFalse(naiveBayesMultinomialText1.getUseStopList());
      assertEquals(1.0, naiveBayesMultinomialText1.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText1.getLowercaseTokens());
      assertEquals(3.0, naiveBayesMultinomialText1.getMinWordFrequency(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText1.getLNorm(), 0.01);
      assertEquals("The tokenizing algorithm to use on the strings.", string3);
      assertFalse(naiveBayesMultinomialText1.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText1.getUseWordFrequencies());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = naiveBayesMultinomialText0.getMinWordFrequency();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, double0, 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_lnorm = 5.0;
      MockFile mockFile0 = new MockFile("iedly", "Should never happen: oldDLin optmz stage NaN or infinite!");
      File file0 = MockFile.createTempFile("{{1", "=[B{Ih^<z^(jJ", (File) mockFile0);
      naiveBayesMultinomialText0.setStopwords(file0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.4287877436062972
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)90;
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte)38;
      byteArray0[4] = (byte) (-3);
      byteArray0[5] = (byte)44;
      byteArray0[6] = (byte)102;
      byteArray0[7] = (byte)82;
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Can only parse date values for date attributes!";
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      naiveBayesMultinomialText0.setTokenizer(nGramTokenizer0);
      stringArray0[1] = "Gml $[loKus$nd*lX4";
      stringArray0[2] = ",kM7";
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getLowercaseTokens());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.getStopwords();
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.786456060735981
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.LNormTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      naiveBayesMultinomialText2.normalizeDocLengthTipText();
      naiveBayesMultinomialText2.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      assertEquals((-1846.7999504140435), naiveBayesMultinomialText0.getNorm(), 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.minWordFrequencyTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText4 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText4.tokenizerTipText();
      naiveBayesMultinomialText1.stemmerTipText();
      NaiveBayesMultinomialText naiveBayesMultinomialText5 = new NaiveBayesMultinomialText();
      String string0 = naiveBayesMultinomialText4.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-28);
      byteArray0[1] = (byte) (-28);
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-1);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)82;
      byteArray0[6] = (byte)13;
      byteArray0[7] = (byte) (-28);
      byteArray0[8] = (byte)44;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = (double) (byte)13;
      doubleArray0[1] = (double) (byte)13;
      doubleArray0[2] = (double) (byte) (-28);
      doubleArray0[3] = (double) (byte)0;
      doubleArray0[4] = (double) (byte)82;
      doubleArray0[5] = (double) (byte)0;
      doubleArray0[6] = (double) (byte)82;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)0, doubleArray0);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_leplace = (-2493.8735970515);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals(3.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseWordFrequencies());
      assertEquals(1.0, naiveBayesMultinomialText0.getNorm(), 0.01);
      assertEquals(2.0, naiveBayesMultinomialText0.getLNorm(), 0.01);
      assertFalse(naiveBayesMultinomialText0.getUseStopList());
      assertFalse(naiveBayesMultinomialText0.getNormalizeDocLength());
      assertEquals(0, naiveBayesMultinomialText0.getPeriodicPruning());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.2696544884954752
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance3);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((-2483), doubleArray0);
      binarySparseInstance3.deleteAttributeAt(10);
      binarySparseInstance2.deleteAttributeAt((-1088));
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance3);
      sparseInstance3.setWeight(45.0);
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance((SparseInstance) binarySparseInstance3);
      binarySparseInstance0.isMissing(2529);
      DenseInstance denseInstance0 = new DenseInstance(binarySparseInstance4);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance5 = new BinarySparseInstance((-2544.067815541), doubleArray0);
      BinarySparseInstance binarySparseInstance6 = new BinarySparseInstance((-2483), doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setNorm((-2483));
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertEquals((-2483.0), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      NullStemmer nullStemmer0 = (NullStemmer)naiveBayesMultinomialText0.m_stemmer;
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) nullStemmer0;
      naiveBayesMultinomialText0.m_leplace = (-2617.645396);
      naiveBayesMultinomialText0.m_stemmer = (Stemmer) nullStemmer0;
      naiveBayesMultinomialText0.getNorm();
      Random.setNextRandom(10000);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.479009346355151
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_normalize = true;
      naiveBayesMultinomialText0.m_norm = (-1846.7999504140435);
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.periodicPruningTipText();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText1.LNormTipText();
      SGDText sGDText0 = new SGDText();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals((-1846.7999504140435), naiveBayesMultinomialText0.getNorm(), 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.9687776175299367
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      naiveBayesMultinomialText0.LNormTipText();
      naiveBayesMultinomialText0.pruneDictionary();
      naiveBayesMultinomialText0.setMinWordFrequency(0.0);
      naiveBayesMultinomialText0.normalizeDocLengthTipText();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.periodicPruningTipText();
      naiveBayesMultinomialText0.normTipText();
      Integer integer0 = new Integer(2445);
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.m_lowercaseTokens = false;
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText1.minWordFrequencyTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      naiveBayesMultinomialText0.stemmerTipText();
      assertEquals(0.0, naiveBayesMultinomialText0.getMinWordFrequency(), 0.01);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.useStopListTipText();
      assertEquals(3.0, naiveBayesMultinomialText2.getMinWordFrequency(), 0.01);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.2457547567523184
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[0] = 2.0;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      //  // Unstable assertion: assertEquals(2529, AbstractInstance.s_numericAfterDecimalPoint);
      
      AbstractInstance.s_numericAfterDecimalPoint = (-2483);
      SparseInstance sparseInstance1 = new SparseInstance(1);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance2);
      binarySparseInstance0.deleteAttributeAt((-2483));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      binarySparseInstance0.isMissing((-3099));
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.0, doubleArray0);
      binarySparseInstance2.copy();
      DenseInstance denseInstance1 = new DenseInstance(binarySparseInstance2);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setUseWordFrequencies(true);
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      //  // Unstable assertion: assertFalse(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      double double0 = 6.0;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 6.0;
      doubleArray0[1] = 6.0;
      doubleArray0[2] = 6.0;
      doubleArray0[3] = 6.0;
      doubleArray0[4] = 6.0;
      double double1 = 982.1202217;
      // Undeclared exception!
      try { 
        naiveBayesMultinomialText0.tokenizeInstance((Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.881766240540306
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      LinkedList<BinarySparseInstance> linkedList0 = new LinkedList<BinarySparseInstance>();
      ChebyshevDistance[] chebyshevDistanceArray0 = new ChebyshevDistance[8];
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance(instances0);
      chebyshevDistanceArray0[0] = chebyshevDistance0;
      ChebyshevDistance chebyshevDistance1 = new ChebyshevDistance(instances0);
      chebyshevDistanceArray0[1] = chebyshevDistance1;
      ChebyshevDistance chebyshevDistance2 = new ChebyshevDistance();
      chebyshevDistanceArray0[2] = chebyshevDistance2;
      ChebyshevDistance chebyshevDistance3 = new ChebyshevDistance(instances0);
      chebyshevDistanceArray0[3] = chebyshevDistance3;
      ChebyshevDistance chebyshevDistance4 = new ChebyshevDistance();
      chebyshevDistanceArray0[4] = chebyshevDistance4;
      ChebyshevDistance chebyshevDistance5 = new ChebyshevDistance(instances0);
      chebyshevDistanceArray0[5] = chebyshevDistance5;
      ChebyshevDistance chebyshevDistance6 = new ChebyshevDistance();
      chebyshevDistanceArray0[6] = chebyshevDistance6;
      ChebyshevDistance chebyshevDistance7 = new ChebyshevDistance();
      chebyshevDistanceArray0[7] = chebyshevDistance7;
      linkedList0.toArray(chebyshevDistanceArray0);
      instances0.addAll((Collection<? extends Instance>) linkedList0);
      testInstances0.setNumDate(27);
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      double double0 = naiveBayesMultinomialText0.getLNorm();
      assertEquals(2.0, double0, 0.01);
      
      String string0 = naiveBayesMultinomialText0.LNormTipText();
      assertEquals("The LNorm to use for document length normalization.", string0);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.reset();
      String string1 = naiveBayesMultinomialText0.normalizeDocLengthTipText();
      assertEquals("If true then document length is normalized according to the settings for norm and lnorm", string1);
      
      naiveBayesMultinomialText1.pruneDictionary();
      naiveBayesMultinomialText0.getNorm();
      naiveBayesMultinomialText0.getNorm();
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      String string2 = naiveBayesMultinomialText1.minWordFrequencyTipText();
      assertEquals("Ignore any words that don't occur at least min frequency times in the training data. If periodic pruning is turned on, then the dictionary is pruned according to this value", string2);
      
      String string3 = naiveBayesMultinomialText2.tokenizerTipText();
      assertEquals("The tokenizing algorithm to use on the strings.", string3);
      
      String string4 = naiveBayesMultinomialText1.stemmerTipText();
      assertEquals("The stemming algorithm to use on the words.", string4);
      
      NaiveBayesMultinomialText naiveBayesMultinomialText3 = new NaiveBayesMultinomialText();
      String string5 = naiveBayesMultinomialText3.useStopListTipText();
      assertFalse(naiveBayesMultinomialText3.getUseWordFrequencies());
      assertEquals(3.0, naiveBayesMultinomialText3.getMinWordFrequency(), 0.01);
      assertEquals(1.0, naiveBayesMultinomialText3.getNorm(), 0.01);
      assertEquals("If true, ignores all words that are on the stoplist.", string5);
      assertFalse(naiveBayesMultinomialText3.getNormalizeDocLength());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.269394275120508
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = 2.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = 2.0;
      SparseInstance sparseInstance0 = new SparseInstance(2.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(1);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance2);
      binarySparseInstance0.deleteAttributeAt((-536));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance2);
      binarySparseInstance0.isMissing(308);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)13;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte) (-76);
      byteArray0[3] = (byte)13;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1310.954815519, doubleArray0);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_useStopList = true;
      String[] stringArray0 = naiveBayesMultinomialText0.getOptions();
      naiveBayesMultinomialText0.setOptions(stringArray0);
      assertTrue(naiveBayesMultinomialText0.getUseStopList());
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.808564943963369
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[1];
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.setLowercaseTokens(true);
      Instances instances0 = testInstances0.generate();
      instances0.parallelStream();
      int[] intArray0 = new int[9];
      intArray0[1] = (-1);
      intArray0[2] = (-1);
      intArray0[3] = (-1);
      intArray0[4] = (-1);
      intArray0[7] = (-2);
      NaiveBayesMultinomialText naiveBayesMultinomialText1 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.stemmerTipText();
      naiveBayesMultinomialText1.setOptions(testInstances0.DEFAULT_WORDS);
      naiveBayesMultinomialText0.minWordFrequencyTipText();
      naiveBayesMultinomialText0.tokenizerTipText();
      assertTrue(naiveBayesMultinomialText0.getLowercaseTokens());
      
      NaiveBayesMultinomialText naiveBayesMultinomialText2 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText2.stemmerTipText();
      String string0 = naiveBayesMultinomialText1.useStopListTipText();
      assertEquals("If true, ignores all words that are on the stoplist.", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.1574490435910625
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      naiveBayesMultinomialText0.m_periodicP = 2445;
      boolean boolean0 = naiveBayesMultinomialText0.m_lowercaseTokens;
      SnowballStemmer snowballStemmer0 = new SnowballStemmer();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      instances0.parallelStream();
      naiveBayesMultinomialText0.buildClassifier(instances0);
      testInstances0.setClassType(2445);
      CoverTree coverTree0 = new CoverTree();
      CoverTree coverTree1 = new CoverTree();
      try { 
        coverTree0.getDistances();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // The tree has not been supplied with a set of instances or getDistances() has been called before calling kNearestNeighbours().
         //
         verifyException("weka.core.neighboursearch.CoverTree", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "RZ>&K";
      stringArray0[2] = "d<\fnw7'#/^_";
      stringArray0[3] = "(250'#Al+`7?(";
      stringArray0[4] = "</VARIABLE>\n";
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      IBk iBk0 = new IBk();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 4;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (-4548.7);
      doubleArray0[4] = (double) 4;
      doubleArray0[5] = 17.0;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 1;
      iBk0.pruneToK(instances0, doubleArray0, (-1119));
      try { 
        naiveBayesMultinomialText0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      double[] doubleArray0 = new double[5];
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance3 = new SparseInstance(sparseInstance2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((Instance) sparseInstance1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((Instance) sparseInstance1);
      binarySparseInstance1.deleteAttributeAt(0);
      binarySparseInstance2.deleteAttributeAt(0);
      SparseInstance sparseInstance4 = new SparseInstance((Instance) binarySparseInstance2);
      sparseInstance1.setWeight((-1.7976931348623157E308));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(sparseInstance4);
      binarySparseInstance2.isMissing(0);
      DenseInstance denseInstance0 = new DenseInstance(sparseInstance0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[] doubleArray1 = new double[8];
      doubleArray1[0] = (double) 0;
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 0;
      doubleArray1[3] = (double) 0;
      doubleArray1[4] = (double) 0;
      sparseInstance2.s_numericAfterDecimalPoint = 2529;
      doubleArray1[6] = 16.0;
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(2529, intArray0, (-382));
      NaiveBayesMultinomialText naiveBayesMultinomialText0 = new NaiveBayesMultinomialText();
      try { 
        naiveBayesMultinomialText0.distributionForInstance(binarySparseInstance3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }
}
