/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 15:44:36 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3095446999630074
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      boolean boolean1 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-156.666548), doubleArray0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "N)xyCmTIN)olEKIS=o";
      stringArray0[1] = ".arff";
      discretize0.setOptions(stringArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      doubleArray0[2] = (double) 165;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      SparseInstance sparseInstance1 = new SparseInstance(165.0, doubleArray1[0]);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.9881922345121303
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1974);
      Attribute attribute0 = new Attribute((String) null, 1974);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1974);
      discretize0.m_MakeBinary = true;
      discretize0.isNewBatch();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1974;
      SparseInstance sparseInstance0 = new SparseInstance((-178.47225123123195), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      SparseInstance sparseInstance1 = new SparseInstance(1974.0, doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.useBinNumbersTipText();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.0116233880055736
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-178.47225123123195), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      SparseInstance sparseInstance1 = new SparseInstance(1962.0, doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      assertEquals(1962, discretize0.getBins());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0934868663810917
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      boolean boolean1 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-156.666548), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      doubleArray0[2] = (double) 165;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      discretize0.input(sparseInstance0);
      Random.setNextRandom(2);
      System.setCurrentTimeMillis((-472L));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.933418959695756
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      boolean boolean1 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-156.666548), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      SparseInstance sparseInstance1 = new SparseInstance(1962.0, doubleArray1[0]);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4904032277870636
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      int int0 = 79;
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 79);
      Properties properties0 = new Properties();
      Attribute attribute0 = new Attribute("s|&%'g/[Q[", 79);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      arrayList1.add(attribute0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.107725292871254
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-780.36356161), doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      boolean boolean1 = discretize0.m_MakeBinary;
      double[] doubleArray1 = new double[8];
      doubleArray1[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-184.083267), doubleArray1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(sparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      SparseInstance sparseInstance1 = new SparseInstance(1, doubleArray1);
      discretize0.input(sparseInstance1);
      DenseInstance denseInstance0 = new DenseInstance(0);
      SparseInstance sparseInstance2 = new SparseInstance(2, doubleArray1);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.core.DenseInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.064418748391927
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      attribute0.isInRange(1);
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-156.666548), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) arrayList0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.or(predicate1);
      Object object0 = new Object();
      predicate1.test(predicate0);
      predicate0.and(predicate1);
      Discretize discretize1 = new Discretize("real");
      Discretize discretize2 = new Discretize();
      discretize0.getCapabilities();
      assertTrue(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.062559888849919
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1980);
      Attribute attribute0 = new Attribute((String) null, 1980);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      attribute0.isInRange(1);
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1980);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1980;
      SparseInstance sparseInstance0 = new SparseInstance((-156.666548), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(165);
      sparseInstance0.setValue(attribute0, (double) 3);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      discretize0.input(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A nominal attribute (null) cannot have duplicate labels ('(0-0]').
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.074309703600925
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute("'B1of2'");
      Attribute.typeToString(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 3;
      arrayList0.listIterator();
      doubleArray0[7] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      sparseInstance0.insertAttributeAt(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      arrayList0.add(attribute0);
      attribute0.equals(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.078512127009922
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-178.47225123123195), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      sparseInstance0.mergeInstance(binarySparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(1962.0, doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.1025480742123936
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 79);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("s|&%'g/[Q[", 79);
      arrayList1.add(attribute0);
      attribute0.isInRange(2.0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.setBins((-504));
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance(1, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.input(binarySparseInstance0);
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      assertEquals((-504), discretize0.getBins());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9161555229780842
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 2013);
      Attribute attribute0 = new Attribute((String) null, 2013);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      attribute0.isInRange(1);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 2013;
      SparseInstance sparseInstance0 = new SparseInstance((-156.666548), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // A nominal attribute (null) cannot have duplicate labels ('(0-0]').
         //
         verifyException("weka.core.Attribute", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.0630530114895596
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.batchFinished();
      boolean boolean1 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-156.666548), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      SparseInstance sparseInstance1 = new SparseInstance(1962.0, doubleArray0);
      discretize0.input(binarySparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(1);
      SparseInstance sparseInstance2 = new SparseInstance(3, doubleArray0);
      discretize0.convertInstance(sparseInstance2);
      assertEquals(1962, discretize0.getBins());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.0718173865633736
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1965);
      Attribute attribute0 = new Attribute((String) null, 1965);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      binarySparseInstance0.mergeInstance(binarySparseInstance1);
      attribute0.equals(binarySparseInstance0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "i7>4yWFv<sGe");
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile1);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[6] = (double) 1965;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[1] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      discretize0.input(binarySparseInstance2);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate0.negate();
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = predicate2.negate();
      Predicate<Object> predicate8 = predicate1.or(predicate5);
      Predicate<Object> predicate9 = predicate2.or(predicate5);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate10.negate();
      Predicate<Object> predicate12 = predicate5.and(predicate2);
      Predicate<Object> predicate13 = predicate7.or(predicate5);
      Predicate<Object> predicate14 = predicate10.and(predicate8);
      predicate10.negate();
      Object object0 = new Object();
      predicate7.and(predicate11);
      predicate8.test((Object) null);
      Predicate<Object> predicate15 = predicate1.and(predicate9);
      Predicate<Object> predicate16 = predicate7.or(predicate6);
      Object object1 = new Object();
      predicate16.test(object1);
      Predicate<Object> predicate17 = predicate13.and(predicate14);
      Predicate<Object> predicate18 = predicate2.or(predicate17);
      Predicate<Object> predicate19 = predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate20 = predicate18.or(predicate8);
      predicate20.or(predicate12);
      predicate2.negate();
      Predicate<Object> predicate21 = predicate20.and(predicate12);
      predicate21.and(predicate19);
      Predicate.isEqual((Object) predicate15);
      Discretize discretize0 = new Discretize("B7$1V!g]plW>Q");
      discretize0.m_IgnoreClass = true;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(7, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.062257174304032
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute("'B1of2'");
      Attribute.typeToString(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) 3;
      arrayList0.listIterator();
      doubleArray0[7] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      sparseInstance0.insertAttributeAt(0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      attribute0.equals(binarySparseInstance0);
      discretize0.input(sparseInstance0);
      Random.setNextRandom(4);
      Random.setNextRandom(2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.137233178923241
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 1895);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff");
      Attribute.typeToString(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.addRelation(instances0);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      double[] doubleArray0 = new double[8];
      doubleArray0[1] = (double) 1895;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (-1473.19025021);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 3;
      arrayList1.listIterator();
      doubleArray0[7] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      sparseInstance0.setMissing(attribute0);
      Discretize discretize1 = new Discretize();
      discretize0.getCapabilities();
      discretize1.m_UseEqualFrequency = true;
      discretize1.setInputFormat(instances0);
      discretize1.batchFinished();
      attribute0.equals("Number of bins.");
      discretize1.outputPeek();
      // Undeclared exception!
      try { 
        discretize1.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.142396694690605
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 1895);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("'B1of2'");
      Attribute.typeToString(0);
      arrayList0.containsAll(arrayList1);
      attribute0.addRelation(instances0);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 1895;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (-1473.19025021);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 3;
      arrayList1.listIterator();
      doubleArray0[7] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      sparseInstance0.setMissing(attribute0);
      discretize0.input(sparseInstance0);
      Random.setNextRandom(18);
      discretize0.setUseBinNumbers(true);
      discretize0.getOptions();
      discretize0.getCutPoints(0);
      discretize0.convertInstance(sparseInstance0);
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.962498975926186
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 2013);
      Attribute attribute0 = new Attribute((String) null, 2013);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      attribute0.isInRange(1);
      discretize0.setInputFormat(instances0);
      discretize0.setUseBinNumbers(true);
      discretize0.setBins(2013);
      discretize0.batchFinished();
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 2013;
      AbstractInstance.s_numericAfterDecimalPoint = 4;
      double[][] doubleArray1 = new double[2][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.setOutputFormat();
      discretize0.calculateCutPoints();
      discretize0.getInvertSelection();
      assertEquals(2013, discretize0.getBins());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.428715181307695
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.createFolder(evoSuiteFile0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling2 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'null' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.949609110556572
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 79);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@relation", linkedList1, 82);
      FileSystemHandling.shouldAllThrowIOExceptions();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)2;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-43);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)20;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      arrayList1.add(attribute0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.123168425011997
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList1, 1895);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("'B1of2'");
      Attribute.typeToString(0);
      arrayList0.containsAll(arrayList1);
      attribute0.addRelation(instances0);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 4;
      doubleArray0[1] = (double) 1;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 2;
      instances0.spliterator();
      doubleArray0[4] = (-1473.19025021);
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 3;
      arrayList1.listIterator();
      doubleArray0[7] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      sparseInstance0.setMissing(attribute0);
      discretize0.input(sparseInstance0);
      Random.setNextRandom(18);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(16);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 16
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.4428352147175594
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRENCH;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 72);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@relation", linkedList1, 82);
      arrayList1.add(attribute0);
      Attribute attribute1 = new Attribute("@relation", linkedList1, 2647);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances1 = new Instances("~M?O~s{,bga1e", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.input((Instance) null);
      DenseInstance denseInstance0 = new DenseInstance(0, (double[]) null);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute("'B1of2'");
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".arff");
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      attribute0.isInRange((-1.0));
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.m_IgnoreClass;
      boolean boolean1 = discretize0.m_MakeBinary;
      double[] doubleArray0 = new double[8];
      doubleArray0[2] = (double) 1962;
      doubleArray0[1] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) (-1);
      doubleArray0[6] = (double) (byte)83;
      arrayList0.listIterator();
      doubleArray0[7] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance((-1), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.0235664068454193
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      SystemInUtil.addInputLine("Refresh in progress. Please wait...");
      Predicate<Object> predicate5 = predicate2.and(predicate3);
      Predicate<Object> predicate6 = predicate0.negate();
      predicate5.test(predicate6);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate7.or(predicate8);
      Predicate.isEqual((Object) "\tUse equal-frequency instead of equal-width discretization.");
      predicate4.negate();
      predicate7.and(predicate2);
      Locale locale0 = Locale.UK;
      Locale locale1 = Locale.ITALIAN;
      locale0.getDisplayCountry(locale1);
      locale0.getUnicodeLocaleKeys();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Refresh in progress. Please wait...", arrayList0, 10);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@relation", linkedList0, 10);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1879048189));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1879048189
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Discretize discretize0 = new Discretize("|0{Wq\n$I|~");
      discretize0.m_MakeBinary = true;
      discretize0.getAttributeIndices();
      double[][] doubleArray0 = new double[9][8];
      double[] doubleArray1 = new double[5];
      doubleArray1[0] = (double) 210;
      doubleArray1[1] = (double) 210;
      doubleArray1[2] = (double) 210;
      doubleArray1[3] = (double) 210;
      doubleArray1[4] = (double) 210;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[2];
      doubleArray3[0] = (double) 210;
      doubleArray3[1] = (double) 210;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[1];
      doubleArray4[0] = (-0.5);
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[5];
      doubleArray5[0] = (-0.5);
      doubleArray5[1] = (double) 210;
      doubleArray5[2] = (double) 210;
      doubleArray5[3] = (-0.5);
      doubleArray5[4] = (-0.5);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = (-4112.104);
      doubleArray6[1] = (double) 210;
      doubleArray6[2] = (double) 210;
      doubleArray6[3] = 300.0;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[3];
      doubleArray7[0] = 300.0;
      doubleArray7[1] = (-0.5);
      doubleArray7[2] = (double) 210;
      doubleArray0[6] = doubleArray7;
      double[] doubleArray8 = new double[2];
      doubleArray8[0] = (-0.5);
      doubleArray8[1] = (-4112.104);
      doubleArray0[7] = doubleArray8;
      double[] doubleArray9 = new double[5];
      doubleArray9[0] = (-0.5);
      doubleArray9[1] = (-0.5);
      doubleArray9[2] = (-0.5);
      doubleArray9[3] = (-4112.104);
      doubleArray9[4] = 4379.9365;
      doubleArray0[8] = doubleArray9;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(210);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 210
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.029523928852599
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 79);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 79);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-43);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)5);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      pushbackInputStream0.skip((-1012L));
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)20;
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      discretize0.calculateCutPoints();
      Discretize discretize1 = new Discretize();
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertTrue(discretize0.isNewBatch());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.01145134863686
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.ROOT;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 79);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 79);
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)3;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-43);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)3);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)20;
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.calculateCutPoints();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString((byte) (-43));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -43
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2707.67659695504;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      SystemInUtil.addInputLine("eOH 2?");
      Predicate<Object> predicate4 = predicate0.negate();
      predicate1.test(predicate4);
      predicate3.negate();
      Predicate<Object> predicate5 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate5.or(predicate2);
      predicate5.negate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("eOH 2?", linkedList0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 44);
      Instances instances1 = new Instances(instances0, 44, (-2040109463));
      attribute0.addRelation(instances1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@data";
      stringArray0[2] = "@end";
      stringArray0[3] = "T7BUQnwS09~OC|";
      stringArray0[4] = ".bsi";
      stringArray0[5] = "@attribute";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: @relation @data @end T7BUQnwS09~OC| .bsi @attribute 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("laWNmFT@!VVVc2gu{ub", arrayList0, 529);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("%", linkedList0, 529);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("relational", arrayList0, 1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2940;
      intArray0[1] = 529;
      intArray0[2] = 1;
      intArray0[3] = 113;
      intArray0[4] = 2;
      intArray0[5] = 113;
      arrayList0.add(attribute0);
      intArray0[6] = 3;
      intArray0[7] = 1953;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances2 = new Instances(instances1);
      linkedList0.toArray();
      Discretize discretize0 = new Discretize();
      Filter.makeCopies(discretize0, 0);
      discretize0.setIgnoreClass(true);
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0563594370152973
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)83;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      attribute0.isInRange(119.85971640902);
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_MakeBinary;
      arrayList0.listIterator();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 119.85971640902;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = (double) 1962;
      doubleArray0[5] = (double) (-1);
      SparseInstance sparseInstance0 = new SparseInstance(119.85971640902, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      discretize0.input(sparseInstance0);
      discretize0.batchFinished();
      discretize0.batchFinished();
      assertTrue(discretize0.isNewBatch());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.0438642756913206
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plWBQ");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      predicate2.negate();
      Predicate<Object> predicate6 = predicate2.or(predicate4);
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate7.or(predicate0);
      SystemInUtil.addInputLine("B7$1V!g]plWBQ");
      Predicate.isEqual((Object) predicate3);
      predicate1.negate();
      Predicate<Object> predicate9 = predicate7.and(predicate4);
      predicate3.or(predicate8);
      Predicate<Object> predicate10 = predicate7.negate();
      Predicate.isEqual((Object) predicate5);
      predicate5.or(predicate9);
      predicate1.negate();
      Predicate.isEqual((Object) null);
      predicate10.negate();
      predicate5.and(predicate4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("B7$1V!g]plWBQ", arrayList0, 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList0, 0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-2069));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2069
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      predicate1.test(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate1.negate();
      predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate7.and(predicate5);
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate4);
      Predicate<Object> predicate12 = predicate11.or(predicate9);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate7.negate();
      predicate12.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate0);
      predicate8.and(predicate11);
      predicate13.or(predicate7);
      Predicate<Object> predicate14 = predicate10.or(predicate4);
      Object object1 = new Object();
      Object object2 = new Object();
      Predicate<Object> predicate15 = Predicate.isEqual(object2);
      Predicate<Object> predicate16 = predicate15.negate();
      Object object3 = new Object();
      predicate16.or(predicate14);
      Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate16.negate();
      Object object4 = new Object();
      predicate1.and(predicate7);
      Discretize discretize0 = new Discretize("");
      discretize0.getCapabilities();
      String string0 = discretize0.binsTipText();
      assertEquals("Number of bins.", string0);
      
      discretize0.getAttributeIndices();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][1];
      double[] doubleArray1 = new double[2];
      doubleArray1[0] = 0.0;
      doubleArray1[1] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.getBinRangesString((-2028178998));
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = 0.0;
      doubleArray0[1] = doubleArray2;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_DesiredWeightOfInstancesPerInterval = 0.0;
      discretize0.getDesiredWeightOfInstancesPerInterval();
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.066470997778331
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 79);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("s|&%'g/[Q[", 79);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.getIgnoreClass();
      arrayList1.listIterator();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 79;
      doubleArray0[1] = 9.223372036854776E18;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 0;
      SparseInstance sparseInstance0 = new SparseInstance(79.0, doubleArray0);
      sparseInstance0.setMissing(attribute0);
      discretize0.input(sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(0.0, doubleArray0);
      discretize0.input(sparseInstance1);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      discretize0.convertInstance(sparseInstance1);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.113349987641343
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate<Object> predicate6 = predicate3.negate();
      predicate2.or(predicate4);
      Predicate<Object> predicate7 = predicate4.or(predicate0);
      Predicate<Object> predicate8 = predicate7.or(predicate0);
      predicate8.negate();
      predicate7.and(predicate4);
      predicate3.or(predicate8);
      predicate7.negate();
      Predicate.isEqual((Object) predicate5);
      predicate2.negate();
      predicate1.negate();
      Predicate.isEqual((Object) null);
      predicate6.negate();
      predicate5.and(predicate4);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("B7$1V!g]plW>Q", arrayList0, 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList0, 0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.findNumBins(0);
      discretize0.calculateCutPoints();
      DenseInstance denseInstance0 = new DenseInstance(3);
      DenseInstance denseInstance1 = new DenseInstance(denseInstance0);
      discretize0.input(denseInstance1);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.092991777939257
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 2707.67659695504;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate2.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      SystemInUtil.addInputLine("eOH 2?");
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate4.test(predicate5);
      predicate3.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate6.negate();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("eOH 2?", linkedList0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("relational", arrayList0, 44);
      Instances instances1 = new Instances(instances0, 44, (-2040109463));
      attribute0.addRelation(instances1);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      System.setCurrentTimeMillis(0);
      discretize0.batchFinished();
      boolean boolean0 = discretize0.m_UseBinNumbers;
      SparseInstance sparseInstance0 = new SparseInstance(300.0, doubleArray0);
      discretize0.input(sparseInstance0);
      discretize0.convertInstance(sparseInstance0);
      System.setCurrentTimeMillis(483L);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1025959429841774
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOLanguages();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("s|&%'g/[Q[", arrayList1, 79);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("@relation", (List<String>) null, 79);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray0 = new byte[7];
      byteArray0[1] = (byte)5;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)20;
      byteArray0[4] = (byte) (-43);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0, (byte)5);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      byteArray0[5] = (byte)112;
      byteArray0[6] = (byte)20;
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      arrayList1.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.batchFinished();
      discretize0.outputPeek();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.9166731665848316
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plWBQ");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      predicate1.and(predicate2);
      predicate2.and(predicate3);
      Predicate<Object> predicate4 = predicate1.negate();
      predicate2.negate();
      Predicate<Object> predicate5 = predicate2.or(predicate3);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate3.or(predicate2);
      Predicate<Object> predicate7 = predicate6.or(predicate0);
      SystemInUtil.addInputLine("B7$1V!g]plWBQ");
      Predicate.isEqual((Object) predicate0);
      predicate1.negate();
      Predicate<Object> predicate8 = predicate6.and(predicate3);
      predicate1.or(predicate7);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate.isEqual((Object) predicate4);
      predicate4.or(predicate8);
      predicate1.negate();
      Predicate.isEqual((Object) null);
      predicate9.negate();
      predicate4.and(predicate3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("B7$1V!g]plWBQ", arrayList0, 0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(".arff", linkedList0, 0);
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("laWNmFT@!VVVc2gu{ub", arrayList0, 529);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("", linkedList0, 529);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("relational", arrayList0, 1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2940;
      intArray0[1] = 529;
      intArray0[2] = 1;
      intArray0[3] = 113;
      intArray0[4] = 2;
      intArray0[5] = 113;
      arrayList0.add(attribute0);
      intArray0[6] = 3;
      intArray0[7] = 1;
      Instances instances2 = new Instances(instances1);
      linkedList0.toArray();
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-111);
      byteArray0[1] = (byte)39;
      byteArray0[2] = (byte)48;
      discretize0.m_NumBins = (int) (byte)39;
      byteArray0[3] = (byte) (-18);
      byte byte0 = (byte) (-126);
      byteArray0[4] = (byte) (-126);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      discretize0.getBinRangesString(2619);
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate0.negate();
      predicate4.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate5.and(predicate2);
      Predicate<Object> predicate10 = predicate6.or(predicate5);
      Object object0 = new Object();
      predicate8.negate();
      Object object1 = new Object();
      predicate7.test((Object) null);
      Predicate<Object> predicate11 = predicate7.negate();
      Predicate<Object> predicate12 = predicate6.or(predicate11);
      Object object2 = new Object();
      predicate12.test(object2);
      Predicate<Object> predicate13 = predicate10.and(predicate11);
      Predicate<Object> predicate14 = predicate2.or(predicate13);
      predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate15 = predicate14.or(predicate7);
      predicate15.negate();
      predicate15.or(predicate9);
      predicate2.negate();
      Predicate<Object> predicate16 = predicate15.and(predicate9);
      predicate6.and(predicate0);
      Predicate.isEqual((Object) predicate16);
      Discretize discretize0 = new Discretize("y3g4");
      String[] stringArray0 = discretize0.getOptions();
      discretize0.setOptions(stringArray0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1781274094291887
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1895);
      Attribute attribute0 = new Attribute("@data");
      arrayList0.add(attribute0);
      Discretize discretize0 = new Discretize();
      int int0 = discretize0.m_ClassIndex;
      discretize0.setInputFormat(instances0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      properties0.put(protectedProperties0, pipedInputStream0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(89);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("laWNmFT@!VVVc2gu{ub", arrayList0, 529);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("%", linkedList0, 529);
      arrayList0.add(attribute0);
      Instances instances1 = new Instances("relational", arrayList0, 1);
      int[] intArray0 = new int[9];
      intArray0[0] = 2946;
      intArray0[1] = 529;
      intArray0[2] = 1;
      intArray0[3] = 113;
      intArray0[4] = 2;
      intArray0[5] = 113;
      intArray0[6] = 3;
      intArray0[7] = 1953;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Instances instances2 = new Instances(instances1);
      Discretize discretize0 = new Discretize("@end");
      try { 
        discretize0.setInputFormat(instances1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at @end
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate4.negate();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate1.or(predicate5);
      Predicate<Object> predicate8 = predicate2.or(predicate5);
      Predicate<Object> predicate9 = predicate6.negate();
      Predicate<Object> predicate10 = predicate5.and(predicate2);
      Predicate<Object> predicate11 = predicate6.or(predicate5);
      Object object0 = new Object();
      predicate9.negate();
      Object object1 = new Object();
      predicate7.test((Object) null);
      Predicate<Object> predicate12 = predicate7.negate();
      predicate1.and(predicate8);
      Predicate<Object> predicate13 = predicate6.or(predicate12);
      Object object2 = new Object();
      predicate13.test(object2);
      Predicate<Object> predicate14 = predicate11.and(predicate12);
      Predicate<Object> predicate15 = predicate2.or(predicate14);
      predicate1.negate();
      predicate0.negate();
      Predicate<Object> predicate16 = predicate15.or(predicate7);
      predicate16.negate();
      predicate16.or(predicate10);
      predicate2.negate();
      Predicate<Object> predicate17 = predicate16.and(predicate10);
      predicate6.and(predicate0);
      Predicate.isEqual((Object) predicate17);
      Discretize discretize0 = new Discretize("y3g4");
      // Undeclared exception!
      try { 
        discretize0.convertInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate1);
      Predicate.isEqual((Object) predicate3);
      Predicate<Object> predicate4 = predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.and(predicate3);
      Predicate<Object> predicate8 = predicate0.or(predicate5);
      predicate2.or(predicate4);
      Predicate<Object> predicate9 = predicate1.or(predicate2);
      Predicate<Object> predicate10 = predicate9.or(predicate1);
      Object object0 = new Object();
      Object object1 = new Object();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      predicate0.test(predicate7);
      Predicate<Object> predicate11 = predicate7.negate();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      predicate3.test((Object) null);
      predicate9.and(predicate0);
      Object object2 = new Object();
      Object object3 = new Object();
      predicate11.test(object3);
      predicate6.test(predicate10);
      Predicate<Object> predicate12 = predicate11.or(predicate8);
      predicate7.negate();
      predicate5.or(predicate3);
      Predicate<Object> predicate13 = predicate4.negate();
      Predicate<Object> predicate14 = predicate12.and(predicate2);
      Predicate<Object> predicate15 = predicate3.negate();
      predicate14.and(predicate15);
      predicate3.and(predicate13);
      Object object4 = new Object();
      Predicate.isEqual(object4);
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate5.or(predicate6);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate2);
      Predicate<Object> predicate9 = predicate8.or(predicate3);
      predicate3.or(predicate8);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate10 = predicate0.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      predicate2.test(predicate3);
      Predicate<Object> predicate11 = predicate10.or(predicate5);
      predicate4.negate();
      predicate10.and(predicate9);
      predicate11.or(predicate0);
      Predicate<Object> predicate12 = predicate4.negate();
      predicate3.and(predicate12);
      predicate11.and(predicate7);
      Predicate.isEqual((Object) null);
      Discretize discretize0 = new Discretize("s~>_IhYO[y[^NB,Ui");
      Random.setNextRandom(18);
      Random.setNextRandom(18);
      boolean boolean0 = discretize0.getMakeBinary();
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (-1.0);
      doubleArray0[1] = 511.029371;
      doubleArray0[2] = 163.0130595;
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<String> list1 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) list0, locale_FilteringMode0);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) list1, locale_FilteringMode1);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) set0, locale_FilteringMode2);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.invertSelectionTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.2603936002885616
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.findNumBinsTipText();
      double[] doubleArray0 = new double[4];
      doubleArray0[2] = 2012.371749740481;
      discretize0.getBinRangesString((-3203));
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (-2686.96318971525);
      doubleArray0[3] = 0.0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = " EVSiv_.=x<X|In|";
      stringArray0[1] = "Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning";
      Discretize.main(stringArray0);
      DenseInstance denseInstance0 = new DenseInstance(2012.371749740481, doubleArray0);
      discretize0.getUseEqualFrequency();
      discretize0.getCapabilities();
      discretize0.setDesiredWeightOfInstancesPerInterval((-3991.1));
      discretize0.globalInfo();
      discretize0.getFindNumBins();
      discretize0.m_NumBins = (-3203);
      discretize0.setBins(165);
      discretize0.setFindNumBins(false);
      discretize0.attributeIndicesTipText();
      discretize0.makeBinaryTipText();
      discretize0.setUseBinNumbers(false);
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.getFindNumBins();
      assertEquals((-3991.1), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate1.test(predicate4);
      predicate5.and(predicate2);
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate7.negate();
      predicate4.and(predicate5);
      predicate10.negate();
      Predicate<Object> predicate11 = predicate6.and(predicate10);
      predicate4.and(predicate11);
      Predicate<Object> predicate12 = predicate2.or(predicate11);
      Object object0 = new Object();
      predicate9.negate();
      Object object1 = new Object();
      predicate3.or(predicate4);
      Predicate<Object> predicate13 = predicate4.negate();
      Predicate<Object> predicate14 = predicate12.or(predicate3);
      Object object2 = new Object();
      predicate10.test(predicate13);
      predicate4.and(predicate14);
      Discretize discretize0 = new Discretize("B7$1V!g]plW>Q");
      String[] stringArray0 = new String[18];
      stringArray0[0] = ">1)/G";
      stringArray0[1] = "B7$1V!g]plW>Q";
      stringArray0[2] = "B7$1V!g]plW>Q";
      stringArray0[3] = "B7$1V!g]plW>Q";
      stringArray0[4] = "B7$1V!g]plW>Q";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Discretize discretize0 = new Discretize("1,1,1,1");
      discretize0.setInvertSelection(false);
      SystemInUtil.addInputLine("1,1,1,1");
      discretize0.getCutPoints((-378));
      discretize0.getBinRangesString(1895);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = "J6D+~P*;";
      Discretize discretize0 = new Discretize("J6D+~P*;");
      discretize0.setUseBinNumbers(true);
      discretize0.getBins();
      int[] intArray0 = null;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "J6D+~P*;";
      stringArray0[1] = "J6D+~P*;";
      stringArray0[2] = "~o";
      discretize0.setUseBinNumbers(true);
      stringArray0[3] = "J6D+~P*;";
      stringArray0[4] = "J6D+~P*;";
      stringArray0[5] = "";
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndicesArray((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.0279615785463
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 1962);
      Attribute attribute0 = new Attribute((String) null, 1962);
      Attribute.typeToString(0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      attribute0.addRelation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[2];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      arrayList0.add(attribute0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile1);
      Discretize discretize0 = new Discretize();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      discretize0.setFindNumBins(true);
      boolean boolean0 = discretize0.m_MakeBinary;
      discretize0.setInputFormat(instances0);
      discretize0.setBins(1962);
      discretize0.m_MakeBinary = true;
      discretize0.batchFinished();
      double[] doubleArray0 = new double[5];
      doubleArray0[2] = (double) 1962;
      SparseInstance sparseInstance0 = new SparseInstance((-178.47225123123195), doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      AbstractInstance.s_numericAfterDecimalPoint = 165;
      double[][] doubleArray1 = new double[6][0];
      doubleArray1[0] = doubleArray0;
      doubleArray1[1] = doubleArray0;
      discretize0.m_CutPoints = doubleArray1;
      SparseInstance sparseInstance1 = new SparseInstance(1962.0, doubleArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.calculateCutPoints();
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      Predicate<Object> predicate5 = predicate1.negate();
      Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate4.or(predicate0);
      Predicate<Object> predicate7 = predicate6.or(predicate0);
      Predicate<Object> predicate8 = predicate7.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate4);
      Predicate<Object> predicate10 = predicate3.or(predicate7);
      Predicate<Object> predicate11 = predicate5.or(predicate2);
      Predicate<Object> predicate12 = predicate11.or(predicate1);
      Object object0 = new Object();
      Object object1 = new Object();
      predicate0.test(predicate9);
      Predicate<Object> predicate13 = predicate9.negate();
      Object object2 = new Object();
      Object object3 = new Object();
      predicate13.test(object3);
      predicate8.test(predicate12);
      Predicate<Object> predicate14 = predicate13.or(predicate10);
      predicate9.negate();
      Predicate<Object> predicate15 = predicate6.negate();
      Predicate<Object> predicate16 = predicate14.and(predicate5);
      Predicate<Object> predicate17 = predicate5.negate();
      predicate16.and(predicate17);
      predicate4.and(predicate15);
      Object object4 = new Object();
      Predicate.isEqual(object4);
      Discretize discretize0 = new Discretize("B7$1V!g]plW>Q");
      assertFalse(discretize0.getFindNumBins());
      
      discretize0.m_FindNumBins = true;
      Discretize discretize1 = new Discretize();
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.9910042766327036
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Discretize discretize0 = new Discretize("z)]&+E.}");
      String[] stringArray0 = new String[3];
      double[][] doubleArray0 = new double[6][2];
      double[] doubleArray1 = new double[6];
      doubleArray1[0] = Double.NEGATIVE_INFINITY;
      doubleArray1[1] = (-2067.3013353);
      doubleArray1[2] = Double.NaN;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = (-250.7050999365);
      doubleArray1[5] = 2769.04;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[0];
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = Double.NEGATIVE_INFINITY;
      doubleArray3[1] = Double.NaN;
      doubleArray3[2] = Double.NEGATIVE_INFINITY;
      doubleArray3[3] = Double.NaN;
      doubleArray3[4] = (-2067.3013353);
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[7];
      doubleArray4[0] = Double.NaN;
      doubleArray4[1] = Double.NaN;
      doubleArray4[2] = Double.NEGATIVE_INFINITY;
      doubleArray4[3] = (-2067.3013353);
      doubleArray4[4] = Double.NaN;
      doubleArray4[5] = 0.0;
      doubleArray4[6] = Double.NEGATIVE_INFINITY;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[2];
      doubleArray5[0] = (-2067.3013353);
      doubleArray5[1] = 2033.4;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[8];
      doubleArray6[0] = Double.NEGATIVE_INFINITY;
      doubleArray6[1] = 0.0;
      doubleArray6[2] = 0.0;
      doubleArray6[3] = (-2067.3013353);
      doubleArray6[4] = 0.0;
      doubleArray6[5] = (-250.7050999365);
      doubleArray6[6] = (-1676.7);
      doubleArray6[7] = Double.NEGATIVE_INFINITY;
      doubleArray0[5] = doubleArray6;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.m_IgnoreClass = false;
      stringArray0[0] = "z)]&+E.}";
      stringArray0[1] = "z)]&+E.}";
      stringArray0[2] = "z)]&+E.}";
      Discretize.main(stringArray0);
      discretize0.setUseEqualFrequency(false);
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("f$ON?NEQ8S398", arrayList1, 1895);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("`i");
      Attribute attribute0 = new Attribute("Use bin numbers (eg BXofY) rather than ranges for for discretized attributes", linkedList1, 9);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList1.sort(comparator0);
      attribute0.toString();
      Attribute attribute1 = new Attribute("string", 1);
      attribute1.addStringValue(attribute1, 0);
      arrayList1.add(attribute1);
      Instances instances1 = new Instances("relational", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1994091956));
      // Undeclared exception!
      try { 
        discretize0.findNumBins(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      String string0 = null;
      Instances instances0 = new Instances((String) null, arrayList1, 1895);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("'B1of2'");
      Discretize discretize0 = new Discretize("\nTrain and test folds for 3-fold CV:");
      int int0 = discretize0.m_ClassIndex;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      System.setCurrentTimeMillis((-153L));
      Discretize discretize0 = new Discretize("of");
      discretize0.setAttributeIndices("of");
      int[] intArray0 = new int[8];
      intArray0[0] = (-2040109463);
      discretize0.toString();
      intArray0[1] = (-979);
      SystemInUtil.addInputLine("F");
      intArray0[2] = 10;
      intArray0[3] = (-1431655765);
      intArray0[4] = 6;
      intArray0[5] = 6;
      intArray0[6] = (-3127);
      intArray0[7] = (-5012);
      discretize0.setAttributeIndicesArray(intArray0);
      String string0 = discretize0.invertSelectionTipText();
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      
      discretize0.setOutputFormat();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("laWNmFT@!VVVc2gu{ub", arrayList0, 529);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Instances instances1 = new Instances("@data", arrayList0, 753);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Discretize discretize0 = new Discretize(".arff");
      discretize0.setMakeBinary(true);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.stream();
      arrayList1.trimToSize();
      Instances instances2 = Instances.mergeInstances(instances0, instances0);
      instances2.toString();
      Instances instances3 = null;
      try { 
        Filter.useFilter(instances2, discretize0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5102170934221872
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRANCE;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      linkedList0.add(locale0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOCountries();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "1");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Object object0 = new Object();
      Discretize discretize0 = new Discretize("");
      discretize0.m_CutPoints = null;
      String[] stringArray0 = discretize0.getOptions();
      assertEquals(4, stringArray0.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1504.20704;
      doubleArray0[1] = 1504.20704;
      doubleArray0[2] = 1504.20704;
      doubleArray0[3] = 1504.20704;
      doubleArray0[4] = 1504.20704;
      doubleArray0[5] = 1504.20704;
      doubleArray0[6] = 1504.20704;
      doubleArray0[7] = 1504.20704;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1504.20704, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2516.175, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance(1504.20704, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance0);
      sparseInstance1.isMissing(165);
      SystemInUtil.addInputLine("");
      Discretize discretize0 = new Discretize();
      discretize0.getCutPoints(2);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0671548291624515
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setOutputFormat();
      Filter.makeCopy(discretize0);
      discretize0.m_UseBinNumbers = true;
      discretize0.getUseBinNumbers();
      String[] stringArray0 = new String[6];
      discretize0.m_UseBinNumbers = true;
      stringArray0[0] = "";
      stringArray0[1] = "dLU5_gTr7: 2$rT";
      stringArray0[2] = "-B <num>";
      stringArray0[3] = "a_s@";
      discretize0.getCapabilities();
      stringArray0[4] = "";
      stringArray0[5] = "";
      discretize0.setOptions(stringArray0);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int[] intArray0 = new int[4];
      intArray0[1] = 1;
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "T.XHj7_(F>J9Qoa";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "T.XHj7_(F>J9Qoa";
      Discretize discretize1 = new Discretize("3&x$,LW8C!lC%");
      assertFalse(discretize1.getFindNumBins());
      
      discretize1.setFindNumBins(true);
      assertTrue(discretize1.getFindNumBins());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[20];
      doubleArray0[0] = 0.0;
      doubleArray0[15] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (-4738.0);
      doubleArray0[4] = (double) 1895;
      doubleArray0[5] = (double) 1895;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1895, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1895);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(1895, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance3);
      // Undeclared exception!
      try { 
        discretize0.input(binarySparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate5.or(predicate6);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate2);
      predicate8.or(predicate3);
      predicate3.or(predicate8);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate9 = predicate0.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      predicate2.test(predicate3);
      Predicate<Object> predicate10 = predicate9.or(predicate5);
      predicate4.negate();
      predicate10.or(predicate0);
      Predicate<Object> predicate11 = predicate4.negate();
      predicate3.and(predicate11);
      predicate10.and(predicate7);
      Predicate.isEqual((Object) null);
      Discretize discretize0 = new Discretize("s~>_IhYO[y[^NB,Ui");
      Random.setNextRandom(18);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(252);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = false;
      discretize0.setDesiredWeightOfInstancesPerInterval((-5774.12061));
      discretize0.setFindNumBins(false);
      discretize0.makeBinaryTipText();
      discretize0.binsTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      discretize0.findNumBinsTipText();
      assertEquals((-5774.12061), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      double[] doubleArray0 = new double[6];
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Predicate.isEqual(object4);
      Discretize discretize0 = new Discretize();
      String string0 = discretize0.getAttributeIndices();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertEquals("first-last", string0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[3] = 2707.67659695504;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      predicate1.or(predicate2);
      predicate1.and(predicate2);
      Predicate<Object> predicate3 = predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate2.and(predicate3);
      Predicate.isEqual((Object) predicate0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate.isEqual((Object) predicate4);
      arrayList0.removeIf(predicate5);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      SparseInstance sparseInstance0 = new SparseInstance(2);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      locale0.toLanguageTag();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) list0);
      Attribute attribute0 = new Attribute("m#cSO9Y|!UV?+\\");
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      SystemInUtil.addInputLine("fr");
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      Random.setNextRandom(11);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[6];
      intArray0[0] = (-2111);
      intArray0[1] = 44;
      intArray0[2] = 89;
      intArray0[3] = (-609);
      intArray0[4] = 0;
      intArray0[5] = 3126;
      discretize0.setAttributeIndicesArray(intArray0);
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Discretize discretize0 = new Discretize("-B <num>");
      String string0 = discretize0.findNumBinsTipText();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate1);
      predicate1.test(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      predicate1.negate();
      predicate1.or(predicate4);
      Predicate<Object> predicate9 = predicate7.and(predicate5);
      Predicate<Object> predicate10 = predicate8.negate();
      Predicate<Object> predicate11 = predicate10.or(predicate4);
      Predicate<Object> predicate12 = predicate11.or(predicate9);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      predicate7.negate();
      predicate12.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate0);
      predicate13.or(predicate7);
      Predicate<Object> predicate14 = predicate10.or(predicate4);
      Object object1 = new Object();
      Object object2 = new Object();
      Predicate<Object> predicate15 = Predicate.isEqual(object2);
      Predicate<Object> predicate16 = predicate15.negate();
      predicate15.or(predicate4);
      Predicate.isEqual((Object) predicate6);
      Object object3 = new Object();
      predicate16.or(predicate14);
      Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate16.negate();
      Object object4 = new Object();
      predicate1.and(predicate7);
      System.setCurrentTimeMillis(1L);
      Discretize discretize0 = new Discretize("]");
      discretize0.listOptions();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "C`,Nf");
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "C`,Nf";
      stringArray0[1] = "C`,Nf";
      stringArray0[2] = "C`,Nf";
      stringArray0[3] = "}o\"K$ .+#H";
      System.setCurrentTimeMillis((-4386L));
      discretize0.useEqualFrequencyTipText();
      Random.setNextRandom((-2040109463));
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.6163875428420864
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate0.and(predicate1);
      SystemInUtil.addInputLine("eOH 2?");
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      Predicate<Object> predicate5 = predicate0.negate();
      predicate4.test(predicate5);
      Predicate<Object> predicate6 = predicate4.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      predicate6.or(predicate7);
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate6.and(predicate2);
      predicate3.or(predicate9);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate10 = predicate0.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      Predicate<Object> predicate11 = predicate10.or(predicate6);
      predicate4.negate();
      Predicate<Object> predicate12 = predicate5.negate();
      predicate3.and(predicate12);
      predicate11.and(predicate8);
      Predicate.isEqual((Object) null);
      Discretize discretize0 = new Discretize("eOH 2?");
      Discretize discretize1 = new Discretize();
      assertFalse(discretize1.getFindNumBins());
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getMakeBinary());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
      
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertEquals(6, stringArray0.length);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      int[] intArray0 = new int[4];
      intArray0[0] = 1;
      intArray0[1] = 1881;
      intArray0[2] = 79;
      Discretize discretize0 = new Discretize();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.trimToSize();
      Instances instances0 = new Instances("\tOutput binary attributes for discretized attributes.", arrayList0, 1881);
      Instances instances1 = null;
      Discretize discretize1 = new Discretize("@data");
      discretize1.setUseEqualFrequency(false);
      try { 
        Filter.useFilter(instances0, discretize0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      predicate1.test(predicate0);
      Predicate<Object> predicate5 = predicate3.and(predicate1);
      predicate1.test(predicate4);
      predicate5.and(predicate2);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate1.negate();
      Predicate<Object> predicate8 = predicate6.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate7.negate();
      predicate10.negate();
      Predicate<Object> predicate11 = predicate6.and(predicate10);
      predicate6.or(predicate3);
      predicate4.and(predicate11);
      Predicate<Object> predicate12 = predicate2.or(predicate11);
      Object object0 = new Object();
      predicate9.negate();
      Object object1 = new Object();
      Predicate.isEqual(object1);
      Object object2 = new Object();
      predicate3.or(predicate4);
      Predicate<Object> predicate13 = predicate4.negate();
      Predicate<Object> predicate14 = predicate12.or(predicate3);
      Object object3 = new Object();
      predicate10.test(predicate13);
      predicate4.and(predicate14);
      Discretize discretize0 = new Discretize("B7$1V!g]plW>Q");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ">1)/G";
      stringArray0[1] = "B7$1V!g]plW>Q";
      stringArray0[2] = "B7$1V!g]plW>Q";
      stringArray0[3] = ">1)/G";
      stringArray0[4] = "B7$1V!g]plW>Q";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Discretize discretize0 = new Discretize("B7$1V!g]plW>Q");
      Locale.getISOLanguages();
      String string0 = discretize0.makeBinaryTipText();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Make resulting attributes binary.", string0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "B7$1V!g]plW>Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate0.and(predicate1);
      Predicate<Object> predicate4 = predicate1.and(predicate2);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate0.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      predicate5.or(predicate6);
      Predicate<Object> predicate7 = predicate5.negate();
      Predicate<Object> predicate8 = predicate5.and(predicate2);
      predicate8.or(predicate3);
      predicate3.or(predicate8);
      Object object0 = new Object();
      Object object1 = new Object();
      Predicate<Object> predicate9 = predicate0.negate();
      Object object2 = new Object();
      predicate2.test(object2);
      predicate2.test(predicate3);
      Predicate<Object> predicate10 = predicate9.or(predicate5);
      predicate4.negate();
      predicate4.negate();
      predicate4.negate();
      Predicate<Object> predicate11 = predicate4.negate();
      predicate3.and(predicate11);
      predicate10.and(predicate7);
      Predicate.isEqual((Object) null);
      Discretize discretize0 = new Discretize("s~>_IhYO[y[^NB,Ui");
      String string0 = discretize0.globalInfo();
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.", string0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Predicate.isEqual((Object) locale_FilteringMode0);
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) linkedList0, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0);
      Locale.getISOCountries();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize("\");\n");
      try { 
        discretize0.setInputFormat((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Object object4 = new Object();
      Predicate.isEqual(object4);
      Object object5 = new Object();
      Object object6 = new Object();
      Discretize discretize0 = null;
      try {
        discretize0 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
