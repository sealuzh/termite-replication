/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 14:47:04 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Random;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.SymmetricalUncertAttributeEval;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.bayes.NaiveBayesMultinomialUpdateable;
import weka.classifiers.bayes.NaiveBayesUpdateable;
import weka.classifiers.evaluation.NumericPrediction;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.MultilayerPerceptron;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SimpleLinearRegression;
import weka.classifiers.functions.supportVector.Puk;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CVParameterSelection;
import weka.classifiers.meta.ClassificationViaRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.RegressionByDiscretization;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.OneR;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.J48;
import weka.classifiers.trees.M5P;
import weka.classifiers.trees.REPTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.CheckGOE;
import weka.core.DenseInstance;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.ArffLoader;
import weka.core.converters.C45Loader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.JSONLoader;
import weka.core.converters.MatlabLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.neighboursearch.BallTree;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.core.tokenizers.NGramTokenizer;
import weka.core.tokenizers.WordTokenizer;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.9792528475755982
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "*RyivX|;`I+ ";
      stringArray0[1] = "setModelHeader";
      stringArray0[2] = "`_<zmtsT/}L3LX";
      TextDirectoryLoader.main(stringArray0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[1];
      charArray0[0] = 'k';
      String string0 = evaluation0.num2ShortID(562, charArray0, 562);
      assertEquals("kkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkkk", string0);
      
      double double0 = evaluation0.falseNegativeRate(494);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.8054659135276117
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setSeed((-1776));
      TestInstances testInstances0 = new TestInstances();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.setClassIndex(0);
      testInstances1.generate("dj=d#B<&O2gt8R3");
      cVParameterSelection0.getTechnicalInformation();
      double double0 = evaluation0.weightedAreaUnderROC();
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.areaUnderROC((-1));
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
      
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      evaluation0.kappa();
      cVParameterSelection0.setSeed(495);
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.listOptions();
      evaluation0.equals((Object) null);
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double0, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.toString();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.4127162775771973
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      cVParameterSelection0.getTechnicalInformation();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      Utils.SMALL = 1.0;
      evaluation1.getDiscardPredictions();
      evaluation1.toSummaryString("weka/core/Capabilities.props", false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      evaluation1.truePositiveRate(1);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2), doubleArray0);
      try { 
        evaluation1.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, 1.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.86207719526477
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      cVParameterSelection0.getTechnicalInformation();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      NaiveBayesMultinomialUpdateable naiveBayesMultinomialUpdateable0 = new NaiveBayesMultinomialUpdateable();
      Evaluation.makeOptionString((Classifier) null, true);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.507402013706516
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      cVParameterSelection0.getTechnicalInformation();
      evaluation0.weightedAreaUnderROC();
      evaluation0.meanPriorAbsoluteError();
      MockRandom mockRandom0 = new MockRandom();
      instances0.compactify();
      double double0 = Evaluation.MIN_SF_PROB;
      double[][] doubleArray0 = new double[2][6];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) (-1);
      doubleArray1[2] = 4.9E-324;
      doubleArray1[3] = 1.7976931348623157E308;
      doubleArray1[4] = (double) (-2);
      doubleArray1[5] = Double.NaN;
      doubleArray1[6] = (double) (-1);
      doubleArray1[7] = 11.0;
      doubleArray1[8] = (-1389.68);
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[9];
      doubleArray2[0] = 1.7976931348623157E308;
      doubleArray2[1] = (double) (-1);
      doubleArray2[2] = (double) (-2);
      doubleArray2[3] = (double) (-1);
      doubleArray2[4] = (double) (-1);
      doubleArray2[5] = 11.0;
      doubleArray2[6] = Double.NaN;
      doubleArray2[7] = 11.0;
      doubleArray2[8] = 1.7976931348623157E308;
      doubleArray0[1] = doubleArray2;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      evaluation0.toClassDetailsString("q9");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.626210417735514
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      cVParameterSelection0.getTechnicalInformation();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      Utils.SMALL = 1.0;
      evaluation1.getDiscardPredictions();
      evaluation1.toSummaryString("weka/core/Capabilities.props", false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      evaluation0.setPriors(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instances instances1 = testInstances0.generate();
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution(2413.9373821750537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2413
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5772581351100334
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      int int0 = 108;
      AbstractClassifier.makeCopies(inputMappedClassifier0, 108);
      evaluation0.pctCorrect();
      evaluation0.toMatrixString("8$I$#");
      evaluation0.avgCost();
      Instances instances1 = evaluation0.getHeader();
      evaluation0.numTrueNegatives(492);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      evaluation0.setPriors(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      converterUtils_DataSource0.nextElement(instances1);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.69550855862951
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      cVParameterSelection0.getTechnicalInformation();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      Utils.SMALL = 1.0;
      evaluation1.getDiscardPredictions();
      evaluation1.toClassDetailsString("weka/core/Capabilities.props");
      double[] doubleArray0 = new double[9];
      doubleArray0[6] = (double) 1;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      evaluation0.setPriors(instances0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.evaluationForSingleInstance(doubleArray0, instance0, true);
      // Undeclared exception!
      try { 
        evaluation1.makeDistribution(2413.9373821750537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2413
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2697362259938334
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities1 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(973);
      evaluation1.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation1.numTrueNegatives(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.7627663442472983
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oNF");
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.getRevision();
      evaluation0.kappa();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toClassDetailsString();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      double[][] doubleArray0 = evaluation0.m_ConfusionMatrix;
      CheckGOE checkGOE0 = new CheckGOE();
      SGD sGD0 = new SGD();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = (double) 1;
      doubleArray1[1] = 1.0;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = Double.NaN;
      doubleArray1[4] = 1.0;
      doubleArray1[5] = (double) 2;
      doubleArray1[6] = (double) 1;
      evaluation0.updateNumericScores(doubleArray1, doubleArray1, 2);
      double double0 = evaluation0.m_SumSqrErr;
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 1.1500000059604645);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".names");
      File file0 = c45Loader0.retrieveFile();
      file0.toURL();
      file0.getCanonicalPath();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      REPTree rEPTree0 = new REPTree();
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-2428), (char[]) null, (-2428));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.9282136249078539
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      simpleLinearRegression1.listOptions();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      evaluation0.pctCorrect();
      evaluation0.setPriors(instances0);
      SystemInUtil.addInputLine("Average Cost                       ");
      try { 
        evaluation0.toClassDetailsString("Should never happen: oldDLin optmz. stage NaN or infinite!");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No per class statistics possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.8196386092511754
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      Instances instances2 = testInstances0.generate();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".bsi");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation2 = new Evaluation(instances2);
      try { 
        evaluation2.KBInformation();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute K&B Info score: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.3815067162300934
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      simpleLinearRegression1.listOptions();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0);
      double double0 = evaluation1.m_SumSqrErr;
      evaluation0.relativeAbsoluteError();
      evaluation0.meanPriorAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation1.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 959.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.25857122068259
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.m_SumClassPredicted = (double) (-1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.falseNegativeRate(2);
      evaluation1.SFMeanPriorEntropy();
      // Undeclared exception!
      try { 
        evaluation1.precision((-2882));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.85930838197441
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      evaluation0.setPriors(instances0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.913737189449991
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      simpleLinearRegression1.listOptions();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      costSensitiveClassifier0.setSeed(2);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) (-2);
      capabilities0.disableAllClassDependencies();
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 2, 1400.51567741127);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -250
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.758151745239447
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances.main(testInstances0.DEFAULT_WORDS);
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominalValues((-2));
      TestInstances testInstances2 = new TestInstances();
      TestInstances testInstances3 = new TestInstances();
      testInstances1.setNumInstancesRelational((-2));
      Instances instances0 = testInstances3.generate("weka/core/Capabilities.props");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      TestInstances testInstances4 = new TestInstances();
      Instances instances1 = testInstances3.generate(" ");
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.falsePositiveRate((-2));
      double double0 = evaluation0.falsePositiveRate((-2));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.unweightedMacroFmeasure();
      evaluation1.numTruePositives(1);
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.700815771010479
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = (TestInstances)testInstances0.clone();
      testInstances0.setNumRelationalNominalValues(1303);
      byte[] byteArray0 = new byte[3];
      byteArray0[2] = (byte) (-21);
      byteArray0[2] = (byte) (-45);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      DecisionTable decisionTable0 = new DecisionTable();
      Capabilities capabilities0 = decisionTable0.getCapabilities();
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.getHandler();
      testInstances1.setHandler((CapabilitiesHandler) null);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.areaUnderPRC((-2));
      Utils.log2 = (-1.0);
      evaluation0.matthewsCorrelationCoefficient((-75));
      evaluation0.m_ClassIsNominal = false;
      try { 
        evaluation0.priorEntropy();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute entropy of class prior: class numeric!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.7805855695027826
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@data");
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      textDirectoryLoader0.listOptions();
      double double0 = evaluation0.weightedMatthewsCorrelation();
      SystemInUtil.addInputLine(" -1       0    \n");
      evaluation0.confusionMatrix();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      double double1 = evaluation0.falseNegativeRate(0);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.SFMeanPriorEntropy();
      evaluation0.rootMeanSquaredError();
      double double3 = evaluation0.weightedTrueNegativeRate();
      assertEquals(double3, double2, 0.01);
      
      double double4 = evaluation0.pctIncorrect();
      assertEquals(double4, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double4, 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.521106770002244
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toMatrixString("@data");
      evaluation0.toCumulativeMarginDistributionString();
      textDirectoryLoader0.listOptions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      CheckGOE checkGOE0 = new CheckGOE();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      instances0.lastIndexOf(checkGOE0);
      evaluation0.falseNegativeRate(0);
      String string1 = Evaluation.makeOptionString((Classifier) null, false);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.360823864394265
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      double double0 = evaluation0.m_SumKBInfo;
      Evaluation evaluation1 = new Evaluation(instances0);
      boolean boolean0 = evaluation1.getDiscardPredictions();
      assertFalse(boolean0);
      
      String string0 = evaluation1.toSummaryString("weka/core/Capabilities.props", false);
      assertEquals("weka/core/Capabilities.props\nTotal Number of Instances                0     \n", string0);
      
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = 0.0;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 1;
      REPTree rEPTree0 = new REPTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4949);
      double double1 = evaluation0.weightedPrecision();
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.2223187553004364
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = new Capabilities(symmetricalUncertAttributeEval0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.falsePositiveRate((-1));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, ".bsi");
      evaluation0.falsePositiveRate(450);
      evaluation0.weightedTrueNegativeRate();
      double double0 = (-1951.6887);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1951.6887);
      doubleArray0[1] = (double) 450;
      // Undeclared exception!
      try { 
        Instances.mergeInstances(instances0, instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: 'Class' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1304778859169557
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      testInstances0.setNumNumeric(2);
      costSensitiveClassifier0.getCostMatrix();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      BayesNet bayesNet0 = new BayesNet();
      REPTree rEPTree0 = new REPTree();
      // Undeclared exception!
      try { 
        evaluation0.weightedTrueNegativeRate();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9665436750589036
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = new Capabilities(symmetricalUncertAttributeEval0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation0.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.6500553073950095
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      Object object0 = testInstances0.clone();
      testInstances0.getOptions();
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities capabilities0 = findWithCapabilities0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.areaUnderPRC((-2));
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, ((TestInstances) object0).DEFAULT_WORDS);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      evaluation1.setPriors(instances0);
      String string0 = evaluation1.toClassDetailsString("ee%");
      assertEquals("ee%\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      evaluation1.incorrect();
      assertEquals(Double.NaN, evaluation1.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.285761436381161
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumRelationalNominalValues(1303);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.areaUnderPRC((-2));
      Utils.log2 = (-1.0);
      evaluation0.matthewsCorrelationCoefficient((-1));
      evaluation0.m_ClassIsNominal = false;
      evaluation1.priorEntropy();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.makeDistribution(1902.74660001953);
      evaluation0.getHeader();
      evaluation0.falsePositiveRate((byte) (-45));
      evaluation1.SFMeanPriorEntropy();
      evaluation1.rootMeanSquaredError();
      evaluation0.weightedTrueNegativeRate();
      try { 
        evaluation0.toMatrixString((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.2610716602518597
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      SGD sGD0 = new SGD();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      sGD0.reset();
      Object object0 = new Object();
      evaluation0.errorRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double[] doubleArray0 = null;
      evaluation0.weightedFalsePositiveRate();
      inputMappedClassifier0.toString();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(593.52940553877, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.803180116117971
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.kappa();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.SFEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      evaluation0.numTrueNegatives((-248));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.unweightedMicroFmeasure();
      evaluation1.precision(1);
      Object object0 = new Object();
      evaluation1.setNumericPriorsFromBuffer();
      try { 
        AbstractClassifier.makeCopies(inputMappedClassifier0, (-248));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.5810096288875433
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(inputMappedClassifier0, 108);
      evaluation0.pctCorrect();
      evaluation0.setPriors(instances0);
      evaluation0.m_TotalCost = 1528.1663386;
      evaluation0.toMatrixString("8$I$#");
      evaluation0.avgCost();
      Instances instances1 = evaluation0.getHeader();
      evaluation0.numTrueNegatives(492);
      int[] intArray0 = new int[5];
      intArray0[0] = 2;
      intArray0[1] = 2658;
      intArray0[2] = 1;
      intArray0[3] = 492;
      intArray0[4] = 1;
      evaluation0.setPriors(instances1);
      Instance instance0 = BallNode.calcCentroidPivot(2, 1, intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) inputMappedClassifier0, instance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.6415026774578103
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      cVParameterSelection0.getTechnicalInformation();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      Utils.SMALL = 1.0;
      evaluation1.getDiscardPredictions();
      evaluation1.toSummaryString("weka/core/Capabilities.props", false);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 2;
      doubleArray0[6] = (double) 2;
      doubleArray0[7] = (double) 2;
      doubleArray0[8] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      evaluation1.numFalsePositives(2);
      // Undeclared exception!
      try { 
        evaluation0.recall(2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8929649738389722
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      AbstractClassifier.runClassifier(simpleLinearRegression1, testInstances0.DEFAULT_WORDS);
      testInstances0.setNumNumeric(19);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0518080626449926
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Integer integer0 = new Integer((-1));
      evaluation0.toSummaryString("@relation", true);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (-1);
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "/Tv9Pt_+um");
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      adaBoostM1_0.setNumIterations(656);
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, "/Tv9Pt_+um");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0896337492643147
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@data");
      evaluation0.toCumulativeMarginDistributionString();
      textDirectoryLoader0.listOptions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      CheckGOE checkGOE0 = new CheckGOE();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      NumericPrediction numericPrediction0 = new NumericPrediction((-2), Double.NaN);
      instances0.lastIndexOf(numericPrediction0);
      evaluation0.falseNegativeRate((-2));
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString("u\"MX5");
      evaluation1.sizeOfPredictedRegions();
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) cVParameterSelection0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.3456951661392975
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      Instances instances1 = testInstances0.generate();
      evaluation0.areaUnderPRC(2500);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.runClassifier(costSensitiveClassifier0, testInstances0.DEFAULT_WORDS);
      testInstances0.setNumNumeric(2500);
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      evaluation0.setPriors(instances1);
      SystemInUtil.addInputLine("~oFn`'");
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.toMatrixString("@relation");
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(100.0, doubleArray0);
      try { 
        evaluation1.updatePriors(denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1185898185113503
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setSeed((-1776));
      TestInstances testInstances0 = new TestInstances();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.generate("dj=d#B<&O2gtR3");
      cVParameterSelection0.getTechnicalInformation();
      double double0 = evaluation0.weightedAreaUnderROC();
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.areaUnderROC((-1));
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      double double3 = evaluation0.kappa();
      assertEquals(1.0, double3, 0.01);
      
      cVParameterSelection0.setSeed(495);
      DecisionStump decisionStump0 = new DecisionStump();
      Enumeration enumeration0 = new AlphabeticTokenizer();
      evaluation0.equals(decisionStump0);
      double double4 = evaluation0.unweightedMacroFmeasure();
      assertEquals(double4, double0, 0.01);
      
      double double5 = evaluation0.weightedRecall();
      assertEquals(double5, double4, 0.01);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.1489434149107765
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      testInstances0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      testInstances0.setNoClass(false);
      Instances instances1 = testInstances0.generate("@data");
      Evaluation evaluation1 = new Evaluation(instances1);
      MockRandom mockRandom0 = new MockRandom((-1));
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.setDiscardPredictions(true);
      evaluation0.KBInformation();
      REPTree rEPTree0 = new REPTree();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((byte) (-21));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.0771709399717957
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.toString();
      symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("\tSymmetrical Uncertainty evaluator has not been built\n");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      JSONLoader jSONLoader0 = new JSONLoader();
      int int0 = 1427;
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (-1160134845), (-2));
      int int1 = 255;
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 255);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) byteArrayInputStream0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      instances0.removeIf(predicate3);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 1060.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.8251468903580106
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toMatrixString();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.SFMeanEntropyGain();
      evaluation1.numTruePositives(0);
      double double1 = evaluation0.fMeasure(483);
      assertNotEquals(double1, double0, 0.01);
      
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)9, 120);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 473);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(dataInputStream0);
      converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[0];
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.7976931348623157E308);
      evaluation0.addNumericTrainClass(1.7976931348623157E308, (byte)78);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      CostMatrix costMatrix0 = new CostMatrix(9);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.8, (int[]) null, 10);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-2083.22861258), (int[]) null, 10);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance2);
      evaluation0.meanAbsoluteError();
      double double0 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.655658866069486
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Enumeration enumeration0 = new WordTokenizer();
      CheckGOE checkGOE0 = new CheckGOE();
      MockRandom mockRandom0 = new MockRandom(2L);
      Capabilities capabilities0 = new Capabilities(logistic0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation.handleCostOption((String) null, (-1));
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation0.numFalseNegatives(0);
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.3368883075390159
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1979.0828);
      doubleArray0[1] = (-1979.0828);
      int[] intArray0 = new int[2];
      intArray0[0] = 24;
      intArray0[1] = 902;
      SparseInstance sparseInstance0 = new SparseInstance((-1979.0828), doubleArray0, intArray0, 24);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      instances0.add((Instance) binarySparseInstance0);
      textDirectoryLoader0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      SystemInUtil.addInputLine("Ih3_BoN");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      boolean boolean0 = true;
      textDirectoryLoader0.setDebug(true);
      TestInstances testInstances0 = new TestInstances();
      J48 j48_0 = new J48();
      ZeroR zeroR0 = new ZeroR();
      Evaluation.wekaStaticWrapper(zeroR0, "@relation");
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      simpleKMeans0.getClusterCentroids();
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      // Undeclared exception!
      try { 
        mockRandom0.doubles((-3894L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // size must be non-negative
         //
         verifyException("java.util.Random", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      boolean boolean0 = true;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(true);
      TestInstances testInstances0 = new TestInstances();
      J48 j48_0 = new J48();
      try { 
        Evaluation.wekaStaticWrapper(j48_0, "getMaure");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.trees.J48", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.6939912928652867
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "oNF");
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.getRevision();
      evaluation0.kappa();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.toClassDetailsString();
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      CheckGOE checkGOE0 = new CheckGOE();
      SGD sGD0 = new SGD();
      instances0.lastIndexOf(sGD0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      evaluation0.getClassPriors();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.0398566733149943
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      String string1 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string1);
      
      textDirectoryLoader0.listOptions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      CheckGOE checkGOE0 = new CheckGOE();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      instances0.lastIndexOf(checkGOE0);
      double double0 = evaluation0.falseNegativeRate(0);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString(".names");
      double double1 = evaluation1.sizeOfPredictedRegions();
      assertEquals(Double.NaN, double1, 0.01);
      
      evaluation0.totalCost();
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      c45Loader0.retrieveFile();
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.retrieveFile();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.getCapabilities();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".arff.gz", arrayList0, 1884);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4145272432670897
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      testInstances0.clone();
      testInstances0.setNumRelationalNominalValues(1303);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String[] stringArray0 = testInstances0.getOptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " ");
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      Evaluation.main(stringArray0);
      evaluation0.setDiscardPredictions(false);
      evaluation0.KBInformation();
      REPTree rEPTree0 = new REPTree();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(497);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) rEPTree0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.5713732392451203
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      SimpleLinearRegression simpleLinearRegression2 = new SimpleLinearRegression();
      simpleLinearRegression2.listOptions();
      ClassificationViaRegression classificationViaRegression0 = new ClassificationViaRegression();
      Capabilities capabilities1 = classificationViaRegression0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities1);
      TestInstances.forCapabilities(capabilities1);
      Instances instances0 = testInstances0.generate();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      TestInstances.forCapabilities(capabilities0);
      testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      costSensitiveClassifier2.getCostMatrix();
      costSensitiveClassifier1.setSeed(899);
      NaiveBayesUpdateable naiveBayesUpdateable0 = new NaiveBayesUpdateable();
      Capabilities capabilities2 = naiveBayesUpdateable0.getCapabilities();
      capabilities2.disableAllClassDependencies();
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 32, (-1641.9867559975025));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.904368110309608
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<B}0xpJzEsO8`'6q8i%");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedFalseNegativeRate();
      instances0.setClassIndex(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 2658;
      MockRandom mockRandom0 = new MockRandom();
      MultiScheme multiScheme0 = new MultiScheme();
      Classifier classifier0 = AbstractClassifier.makeCopy(multiScheme0);
      Object[] objectArray0 = null;
      try { 
        evaluation1.crossValidateModel(classifier0, instances0, 2658, (Random) mockRandom0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      String string0 = Evaluation.getGlobalInfo(logistic0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      logistic0.getOptions();
      String string0 = logistic0.toString();
      CostMatrix costMatrix0 = new CostMatrix(38);
      String string1 = Evaluation.makeOptionString(logistic0, true);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4043972039179313
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      Object[][] objectArray0 = new Object[1][6];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) instances0;
      objectArray1[1] = (Object) 0.0;
      objectArray1[2] = (Object) 0.0;
      objectArray0[0] = objectArray1;
      costMatrix0.m_matrix = objectArray0;
      evaluation0.truePositiveRate(5);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.weightedTruePositiveRate();
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double3 = evaluation0.pctUnclassified();
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.5299511577795175
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = evaluation0.getRevision();
      assertEquals("9101", string0);
      
      evaluation0.kappa();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      double double0 = evaluation0.SFEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      double double1 = evaluation0.numTrueNegatives((-1657));
      assertEquals(double1, double0, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.rootMeanPriorSquaredError();
      evaluation3.m_SumSqrPredicted = 1303.0;
      evaluation2.falseNegativeRate(1);
      evaluation3.m_SumSqrPredicted = Double.NaN;
      String string1 = evaluation3.toMatrixString("j");
      assertEquals("j\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.187390023949242
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<B}0xpJzEsO8`'6q8i%");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.weightedFalseNegativeRate();
      evaluation1.m_ConfLevel = (double) 0;
      instances0.setClassIndex(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation1.confusionMatrix();
      Evaluation evaluation2 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation2.unweightedMicroFmeasure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.4613325147239835
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".names");
      File file0 = c45Loader0.retrieveFile();
      file0.toURL();
      file0.getCanonicalPath();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.KBInformation();
      REPTree rEPTree0 = new REPTree();
      double[][] doubleArray0 = evaluation1.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      double double1 = evaluation1.KBRelativeInformation();
      assertEquals(Double.NaN, double1, 0.01);
      assertNotEquals(double1, double0, 0.01);
      
      double double2 = evaluation1.numInstances();
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation1.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8934284047624406
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      Object[][] objectArray0 = new Object[1][6];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) instances0;
      objectArray1[1] = (Object) 0.0;
      objectArray1[2] = (Object) 0.0;
      objectArray0[0] = objectArray1;
      costMatrix0.m_matrix = objectArray0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.7328646154447735
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      instances0.iterator();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.kappa();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.SFEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      evaluation0.numTrueNegatives(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.unweightedMicroFmeasure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("Capabilities.props");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      // Undeclared exception!
      try { 
        evaluation2.precision(459);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 459
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.5637660374856472
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getOptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(nGramTokenizer0);
      sequenceInputStream0.mark((-3853));
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(sequenceInputStream0, 11);
      sequenceInputStream0.available();
      sequenceInputStream0.skip((-207L));
      DataInputStream dataInputStream0 = new DataInputStream(pushbackInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(pushbackInputStream0);
      evaluation0.precision(11);
      BallTree ballTree0 = new BallTree();
      evaluation0.unclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.coverageOfTestCasesByPredictedRegions();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.SFSchemeEntropy();
      evaluation1.truePositiveRate(512);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (-1.7976931348623157E308);
      doubleArray0[1] = (-3308.648881335649);
      doubleArray0[2] = (double) 123;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1014.97691104, doubleArray0);
      try { 
        evaluation0.updateStatsForIntervalEstimator(regressionByDiscretization0, binarySparseInstance0, (-1.7976931348623157E308));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.meta.RegressionByDiscretization", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.6063532230200996
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.toString();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      double double0 = Evaluation.MIN_SF_PROB;
      String string0 = evaluation0.toClassDetailsString("\tSymmetrical Uncertainty evaluator has not been built\n");
      assertEquals("\tSymmetrical Uncertainty evaluator has not been built\n\n                 TP Rate  FP Rate  Precision  Recall  F-Measure  MCC    ROC Area  PRC Area  Class\n                 0        0        0          0       0          0     ?         ?         class1\n                 0        0        0          0       0          0     ?         ?         class2\nWeighted Avg.  NaN      NaN      NaN        NaN     NaN        NaN    NaN       NaN    \n", string0);
      
      Object object0 = new Object();
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.weightedFalsePositiveRate();
      Object object1 = new Object();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 1625.6;
      doubleArray0[3] = 1625.6;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 891.49437716962);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, evaluation0.weightedFMeasure(), 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.171171081089522
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      simpleLinearRegression1.listOptions();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (-1877.2380736535947);
      evaluation1.updateNumericScores(doubleArray0, doubleArray0, (-1));
      assertEquals(Double.NEGATIVE_INFINITY, evaluation1.meanPriorAbsoluteError(), 0.01);
      
      double double0 = evaluation1.m_SumSqrErr;
      evaluation0.relativeAbsoluteError();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.612726894621007
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockRandom mockRandom0 = new MockRandom();
      int int1 = 104;
      int[] intArray0 = new int[17];
      intArray0[0] = 104;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[8];
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      try { 
        evaluation0.evaluateModelOnce((Classifier) regressionByDiscretization0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=3.164959397731746
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toMatrixString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation1.numTruePositives(0);
      double double0 = evaluation1.m_WithClass;
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)9;
      byteArray0[2] = (byte)112;
      byteArray0[3] = (byte)67;
      evaluation0.setPriors(instances0);
      SystemInUtil.addInputLine("setSpreadInitialCount");
      evaluation1.toClassDetailsString("globalBlendTipText");
      try { 
        evaluation0.updatePriors((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.278061571679619
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = symmetricalUncertAttributeEval0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.setNumRelationalNominalValues((-1));
      TestInstances testInstances1 = new TestInstances();
      TestInstances testInstances2 = new TestInstances();
      int int0 = 508;
      testInstances2.setNumInstancesRelational(508);
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      TestInstances testInstances3 = new TestInstances();
      evaluation0.numTruePositives((-6));
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation1.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1450191369605873
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      AbstractClassifier.makeCopies(inputMappedClassifier0, 108);
      evaluation0.pctCorrect();
      evaluation0.toMatrixString("8$I$#");
      evaluation0.avgCost();
      evaluation0.getHeader();
      evaluation0.numTrueNegatives(492);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 0.0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      doubleArray0[5] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, doubleArray0);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 0.0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalsePositives(109);
      evaluation0.recall(108);
      evaluation1.areaUnderPRC(3);
      Evaluation.makeOptionString(inputMappedClassifier0, true);
      try { 
        evaluation1.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.484818382924523
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.toString();
      Capabilities capabilities0 = new Capabilities(symmetricalUncertAttributeEval0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.weightedAreaUnderPRC();
      double double1 = evaluation0.unweightedMicroFmeasure();
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, double1, 0.01);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      evaluation0.getDiscardPredictions();
      Instances instances1 = null;
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.5186138248035657
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = new Capabilities(symmetricalUncertAttributeEval0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      int int0 = 482;
      evaluation0.falsePositiveRate(482);
      evaluation0.priorEntropy();
      Evaluation.main(testInstances0.DEFAULT_WORDS);
      evaluation0.unclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.1411157297399286
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".bsi");
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      evaluation0.areaUnderPRC((-1258));
      double double0 = evaluation0.matthewsCorrelationCoefficient((-1258));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.priorEntropy();
      Evaluation.main(stringArray0);
      evaluation0.unclassified();
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.SFSchemeEntropy();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation0.truePositiveRate(486);
      double double1 = evaluation3.SFEntropyGain();
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation2.truePositiveRate(486);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.8956755367764666
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.clone();
      testInstances0.setNumRelationalNominalValues(1303);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte) (-45);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      testInstances0.getOptions();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.correct();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.setNumericPriorsFromBuffer();
      evaluation0.areaUnderPRC((-2));
      Utils.log2 = (-1.0);
      evaluation0.matthewsCorrelationCoefficient((-75));
      evaluation0.m_ClassIsNominal = false;
      double double0 = evaluation1.priorEntropy();
      assertEquals((-0.6890092384766586), double0, 0.01);
      
      evaluation1.SFPriorEntropy();
      double double1 = evaluation1.numTruePositives(4551);
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.meanAbsoluteError();
      double double3 = evaluation1.matthewsCorrelationCoefficient(4551);
      assertNotEquals(double3, double2, 0.01);
      
      double double4 = evaluation1.numFalsePositives(95);
      assertNotEquals(double4, double2, 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.214784620626747
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-1);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (-1877.2380736535947);
      doubleArray0[5] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1877.2380736535947), doubleArray0);
      try { 
        evaluation1.evaluateModelOnce(4.94E-321, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2846978412083008
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".names");
      File file0 = c45Loader0.retrieveFile();
      MockFile mockFile0 = new MockFile("weka/core/Capabilities.props");
      mockFile0.toURL();
      mockFile0.getCanonicalPath();
      textDirectoryLoader0.setSource(file0);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "getMaxDepth");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.KBInformation();
      REPTree rEPTree0 = new REPTree();
      double[][] doubleArray0 = evaluation1.confusionMatrix();
      assertEquals(2, doubleArray0.length);
      
      double double0 = evaluation1.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.1782356557936127
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "makeCopies";
      stringArray0[1] = "";
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = (-2589);
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      intArray0[7] = 10;
      intArray0[8] = 10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1260.857484, intArray0, 178);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.numTruePositives(492);
      assertEquals(0.0, double1, 0.01);
      
      Evaluation evaluation1 = new Evaluation(instances0);
      double double2 = evaluation0.precision(10);
      assertEquals(0.0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.263860793983854
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) (-1);
      doubleArray0[2] = 0.3183098861837907;
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = (-1078.7301737451653);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      doubleArray0[8] = (double) (-1);
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, (-1.7976931348623157E308));
      double double0 = evaluation1.numFalsePositives((-2));
      double double1 = evaluation0.recall((-1));
      assertEquals(double1, double0, 0.01);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(0.0, double1, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.947904000101826
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      simpleLinearRegression1.listOptions();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances2 = TestInstances.forCapabilities(capabilities0);
      testInstances2.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      testInstances0.generate("-S <num>");
      // Undeclared exception!
      try { 
        evaluation1.falsePositiveRate((-1));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.909755194956797
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate();
      Evaluation evaluation1 = new Evaluation(instances1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      // Undeclared exception!
      try { 
        evaluation1.truePositiveRate(280106573);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.320811952555979
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedAreaUnderROC();
      FileSystemHandling.shouldAllThrowIOExceptions();
      textDirectoryLoader0.setRetrieval(1311);
      int int0 = 393;
      evaluation0.numTrueNegatives(393);
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) regressionByDiscretization0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.765976792018692
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      Capabilities capabilities0 = new Capabilities(cVParameterSelection0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      cVParameterSelection0.buildClassifier(instances0);
      Instance instance0 = null;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) cVParameterSelection0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.3654597361104446
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[1];
      intArray0[0] = 104;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 22;
      doubleArray0[1] = (double) 22;
      doubleArray0[6] = (double) 0;
      doubleArray0[3] = 1391.836225303;
      doubleArray0[4] = (double) 22;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 22;
      doubleArray0[7] = (double) 104;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, 104, 0.0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 104
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.7810405096736122
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.m_SumPriorEntropy = 1428.3763443;
      evaluation0.correct();
      assertEquals(Double.POSITIVE_INFINITY, evaluation0.SFMeanEntropyGain(), 0.01);
      
      J48 j48_0 = new J48();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) evaluation0;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) evaluation0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) mockRandom0;
      Object object1 = new Object();
      objectArray0[6] = object1;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.avgCost();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.0284052604060308
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@data");
      instances0.listIterator();
      evaluation0.m_SumSqrErr = 0.0;
      evaluation0.toClassDetailsString();
      textDirectoryLoader0.listOptions();
      evaluation0.weightedMatthewsCorrelation();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)105;
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1842177144));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.4582244426360023
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 0;
      doubleArray0[8] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      double double0 = evaluation0.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.507402013706516
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate(".xml");
      cVParameterSelection0.getTechnicalInformation();
      evaluation0.weightedAreaUnderROC();
      evaluation0.meanPriorAbsoluteError();
      MockRandom mockRandom0 = new MockRandom();
      instances0.compactify();
      double double0 = Evaluation.MIN_SF_PROB;
      evaluation0.toClassDetailsString("q9");
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        mockRandom0.nextBytes((byte[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.Random", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".names");
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(587.0, doubleArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.9374953402063722
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval0.toString();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      Evaluation evaluation1 = new Evaluation(instances0);
      int int0 = 14;
      evaluation0.falseNegativeRate(14);
      evaluation1.SFMeanPriorEntropy();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1842177144));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0703278891265096
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      double[][] doubleArray0 = new double[3][0];
      double[] doubleArray1 = new double[9];
      doubleArray1[0] = (double) (-1);
      doubleArray1[1] = (double) 0;
      doubleArray1[2] = (double) 2;
      doubleArray1[3] = (double) 2;
      doubleArray1[4] = 0.95;
      doubleArray1[5] = (double) (-2);
      doubleArray1[6] = (double) 0;
      doubleArray1[7] = (double) 0;
      doubleArray1[8] = (double) 1;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[3];
      doubleArray2[0] = 1.0E-4;
      doubleArray2[1] = (double) 1;
      doubleArray2[2] = 0.95;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[3];
      doubleArray3[0] = 2.0;
      doubleArray3[1] = (-267.90932873);
      doubleArray3[2] = (double) (-1);
      doubleArray0[2] = doubleArray3;
      evaluation0.m_ConfusionMatrix = doubleArray0;
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray4 = new double[8];
      doubleArray4[0] = (double) (-1);
      doubleArray4[1] = (double) (-2);
      evaluation0.falseNegativeRate(0);
      evaluation0.SFMeanPriorEntropy();
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.7892371704935965
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      Double double1 = new Double((-1));
      evaluation0.numTrueNegatives((-1346));
      MockRandom mockRandom0 = new MockRandom();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.toMatrixString("@data");
      instances0.listIterator();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      evaluation1.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-91);
      byteArray0[1] = (byte)105;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2362);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression0.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix1);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Class has to be nominal if cost matrix given!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.3813327519834604
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.m_SumPriorEntropy = 1428.3763443;
      evaluation0.correct();
      J48 j48_0 = new J48();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Object[] objectArray0 = new Object[8];
      objectArray0[0] = (Object) evaluation0;
      objectArray0[1] = (Object) instances0;
      objectArray0[2] = (Object) evaluation0;
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[4] = (Object) evaluation0;
      objectArray0[5] = (Object) mockRandom0;
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance(instances0);
      try { 
        evaluation0.updateStatsForPredictor(1428.3763443, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.setDebug(false);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(".xml", arrayList0, 430);
      StringReader stringReader0 = new StringReader("@relation");
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instance instance0 = null;
      BayesNet bayesNet0 = new BayesNet();
      Instances instances1 = bayesNet0.m_Instances;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.8997313334935368
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      TestInstances testInstances1 = (TestInstances)testInstances0.clone();
      testInstances0.setNumRelationalNominalValues(0);
      testInstances1.getOptions();
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate(" ");
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      OneR oneR0 = new OneR();
      DenseInstance denseInstance0 = new DenseInstance(0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) oneR0, (Instance) denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.4486869174985209
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "makeCopies";
      stringArray0[1] = "";
      int[] intArray0 = new int[9];
      intArray0[0] = 10;
      intArray0[1] = 10;
      intArray0[2] = (-2589);
      intArray0[3] = 10;
      intArray0[4] = 10;
      intArray0[5] = 10;
      intArray0[6] = 10;
      intArray0[7] = 10;
      intArray0[8] = 10;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1260.857484, intArray0, 178);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.reset();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      binarySparseInstance0.setValue(10, (double) (-2589));
      try { 
        evaluation0.updateStatsForPredictor((-966.0), binarySparseInstance2);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.9855317708391316
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) 1;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (double) (-2);
      doubleArray0[6] = (double) (-1);
      doubleArray0[7] = (double) (-1);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=2.5792704984527606
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.kappa();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.SFEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier2 = new CostSensitiveClassifier();
      double double0 = evaluation0.pctCorrect();
      evaluation0.getDiscardPredictions();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 45.0);
      double double1 = evaluation0.m_SumSqrErr;
      evaluation0.relativeAbsoluteError();
      double double2 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.8005516265414596
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      evaluation0.pctCorrect();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 1;
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-2);
      doubleArray0[3] = (double) (-1);
      evaluation0.falsePositiveRate(1);
      evaluation0.falsePositiveRate((-590));
      ArffLoader arffLoader0 = new ArffLoader();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Reader", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.0803875532203735
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances0.generate(".xml");
      cVParameterSelection0.getTechnicalInformation();
      evaluation0.numTruePositives(17);
      // Undeclared exception!
      try { 
        evaluation0.fMeasure(488);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 488
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.3609510106329856
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 0;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = (double) 0;
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) instances0;
      objectArray0[1] = (Object) 0.0;
      objectArray0[2] = (Object) 0.0;
      evaluation0.updateNumericScores(doubleArray0, doubleArray0, 1.0);
      double double0 = evaluation0.numFalsePositives(280106573);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.recall(280106573);
      double double2 = evaluation0.falsePositiveRate(280106573);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.areaUnderPRC(280106573);
      assertEquals(Double.NaN, evaluation0.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation0.meanPriorAbsoluteError(), 0.01);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.1495027126254356
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(false);
      evaluation0.m_ComplexityStatisticsAvailable = false;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      Evaluation.main(stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString();
      assertEquals("\nTotal Number of Instances                0     \n", string0);
      
      Evaluation.handleCostOption("", 118);
      evaluation0.toMatrixString();
      evaluation0.SFMeanEntropyGain();
      evaluation1.numTruePositives(118);
      double double0 = evaluation0.fMeasure((-290));
      assertEquals(0.0, double0, 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.736670469605995
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@data");
      evaluation0.toCumulativeMarginDistributionString();
      textDirectoryLoader0.listOptions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      evaluation0.m_Header = null;
      CheckGOE checkGOE0 = new CheckGOE();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      instances0.lastIndexOf(checkGOE0);
      evaluation0.falseNegativeRate(0);
      evaluation0.rootRelativeSquaredError();
      Evaluation evaluation1 = new Evaluation(instances0);
      double[] doubleArray0 = new double[0];
      ArffLoader arffLoader0 = new ArffLoader();
      arffLoader0.getNextInstance((Instances) null);
      try { 
        evaluation1.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=2.828730978572493
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CVParameterSelection cVParameterSelection0 = new CVParameterSelection();
      cVParameterSelection0.setSeed((-1776));
      TestInstances testInstances0 = new TestInstances();
      Capabilities capabilities0 = cVParameterSelection0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances1.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      testInstances1.generate("dj=d#B<&O2gtR3");
      cVParameterSelection0.getTechnicalInformation();
      double double0 = evaluation0.weightedAreaUnderROC();
      evaluation0.meanPriorAbsoluteError();
      double double1 = evaluation0.numTrueNegatives((-2));
      assertEquals(0.0, double1, 0.01);
      
      RegressionByDiscretization regressionByDiscretization0 = new RegressionByDiscretization();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      evaluation0.areaUnderROC((-1));
      double double2 = evaluation0.weightedAreaUnderPRC();
      assertEquals(double2, double0, 0.01);
      
      RegressionByDiscretization regressionByDiscretization1 = new RegressionByDiscretization();
      MatlabLoader matlabLoader1 = new MatlabLoader();
      evaluation0.kappa();
      DecisionStump decisionStump0 = new DecisionStump();
      decisionStump0.listOptions();
      evaluation0.equals(decisionStump0);
      double double3 = evaluation0.weightedFalseNegativeRate();
      assertEquals(double3, double0, 0.01);
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.1917327410493703
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "<B}0xpJzEsO8`'6q8i%");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      double double0 = evaluation0.weightedFalseNegativeRate();
      assertEquals(Double.NaN, double0, 0.01);
      
      instances0.setClassIndex(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      double[][] doubleArray0 = evaluation1.confusionMatrix();
      assertEquals(0, doubleArray0.length);
      
      Evaluation evaluation2 = new Evaluation(instances0);
      double double1 = evaluation1.falseNegativeRate(0);
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.toMatrixString("j");
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".names");
      File file0 = c45Loader0.retrieveFile();
      file0.toURL();
      file0.getCanonicalPath();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(0L);
      try { 
        evaluation0.crossValidateModel(".names", instances0, 25, (String[]) null, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called: .names
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.7549376834338837
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.toMatrixString();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.SFMeanEntropyGain();
      evaluation1.numTruePositives(0);
      evaluation1.fMeasure(2373);
      byte byte0 = (byte)9;
      byte byte1 = (byte)67;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.weightedFalsePositiveRate();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance((byte)67, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.882044607890232
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      evaluation0.truePositiveRate(383);
      double double0 = evaluation0.weightedAreaUnderROC();
      double double1 = evaluation0.sizeOfPredictedRegions();
      assertEquals(double1, double0, 0.01);
      
      evaluation0.weightedTruePositiveRate();
      double double2 = evaluation0.SFEntropyGain();
      evaluation0.rootRelativeSquaredError();
      double double3 = evaluation0.recall((-1087));
      assertEquals(double3, double2, 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanPriorSquaredError(), 0.01);
      assertEquals(Double.NaN, evaluation0.rootMeanSquaredError(), 0.01);
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.8821726126213796
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".names");
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, false);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      evaluation0.toSummaryString();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "7");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Enumeration enumeration0 = textDirectoryLoader1.listOptions();
      evaluation0.weightedMatthewsCorrelation();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      CheckGOE checkGOE0 = new CheckGOE();
      instances0.lastIndexOf(enumeration0);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "7");
      evaluation0.falseNegativeRate(1295);
      evaluation0.rootRelativeSquaredError();
      MockRandom mockRandom0 = new MockRandom(467);
      try { 
        evaluation0.crossValidateModel((Classifier) adaBoostM1_0, instances0, 467, (Random) mockRandom0, (Object[]) doubleArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.2794680863206516
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toCumulativeMarginDistributionString();
      evaluation0.weightedMatthewsCorrelation();
      CheckGOE checkGOE0 = new CheckGOE();
      SGD sGD0 = new SGD();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.getCostMatrix();
      sGD0.reset();
      Object object0 = new Object();
      evaluation0.errorRate();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.weightedFalsePositiveRate();
      inputMappedClassifier0.toString();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(593.52940553877, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.3184277849930977
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      int int0 = 0;
      CostMatrix costMatrix0 = new CostMatrix(0);
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 0;
      SparseInstance sparseInstance0 = new SparseInstance(0, doubleArray0, intArray0, 88);
      instances0.add((Instance) sparseInstance0);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.6492377541392287
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorEntropy;
      Double double1 = new Double((-1));
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      int[] intArray0 = new int[2];
      intArray0[0] = (-1890);
      intArray0[1] = (-1890);
      symmetricalUncertAttributeEval0.postProcess(intArray0);
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval1 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval1.postProcess(intArray0);
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval2 = new SymmetricalUncertAttributeEval();
      symmetricalUncertAttributeEval2.getCapabilities();
      try { 
        Evaluation.handleCostOption("@relation", (-1890));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.75928986785717
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(0L);
      instances0.resample(mockRandom0);
      evaluation0.toSummaryString();
      evaluation0.toMatrixString();
      NGramTokenizer nGramTokenizer0 = new NGramTokenizer();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.correct();
      LWL lWL0 = new LWL();
      lWL0.globalInfo();
      Vote vote0 = new Vote();
      lWL0.setClassifier(vote0);
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      evaluation0.useNoPriors();
      assertEquals(Double.NaN, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=1.9489486659250668
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.kappa();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.SFEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      evaluation0.confusionMatrix();
      CheckGOE checkGOE0 = new CheckGOE();
      SGD sGD0 = new SGD();
      M5P m5P0 = new M5P();
      instances0.lastIndexOf(m5P0);
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      InputMappedClassifier inputMappedClassifier1 = new InputMappedClassifier();
      SparseInstance sparseInstance0 = null;
      try {
        sparseInstance0 = new SparseInstance(2, (double[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.547601471999568
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Evaluation evaluation1 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation1.weightedMatthewsCorrelation();
      evaluation1.confusionMatrix();
      evaluation1.correct();
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.m_SumPriorAbsErr = 0.0;
      evaluation1.areaUnderPRC(0);
      evaluation2.makeDistribution(Double.NaN);
      Instances instances1 = evaluation0.getHeader();
      Evaluation evaluation3 = new Evaluation(instances0, costMatrix0);
      evaluation3.areaUnderPRC(5984);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      Evaluation evaluation4 = new Evaluation(instances1);
      int int0 = 2847;
      try { 
        Evaluation.handleCostOption("Performance Guarantees for Hierarchical Clustering", 2847);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.824399944067943
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = new Capabilities(symmetricalUncertAttributeEval0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.getHeader();
      evaluation0.falsePositiveRate((-1));
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.outputPeek();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=2.2171028639199672
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.correct();
      J48 j48_0 = new J48();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) j48_0;
      objectArray0[1] = (Object) j48_0;
      evaluation0.toSummaryString(true);
      objectArray0[2] = (Object) j48_0;
      try { 
        evaluation0.crossValidateModel((Classifier) j48_0, instances0, 3965, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.classifiers.trees.J48 cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      double double0 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=2.2021236435563996
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      textDirectoryLoader0.setDebug(false);
      evaluation0.getRevision();
      evaluation0.kappa();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.SFEntropyGain();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier1.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.6851287363978402
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.correct();
      J48 j48_0 = new J48();
      MockRandom mockRandom0 = new MockRandom();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = 0.0;
      doubleArray0[2] = (double) 3965;
      doubleArray0[3] = (-150.3937267853259);
      doubleArray0[4] = (double) 0;
      int[] intArray0 = new int[7];
      intArray0[0] = 0;
      intArray0[1] = 2428;
      intArray0[2] = 0;
      intArray0[3] = 0;
      LWL lWL0 = new LWL();
      lWL0.setClassifier(j48_0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) 0;
      objectArray0[1] = (Object) 2428;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) lWL0;
      objectArray0[4] = (Object) instances0;
      try { 
        evaluation0.evaluateModel((Classifier) lWL0, instances0, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.3654597361104446
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 0;
      intArray0[3] = 2428;
      intArray0[5] = 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2.0, intArray0, 0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2428;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 6;
      doubleArray0[5] = (double) (-5645);
      try { 
        evaluation0.updateStatsForClassifier(doubleArray0, binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)67;
      byteArray0[1] = (byte)78;
      byteArray0[2] = (byte) (-28);
      byteArray0[3] = (byte) (-62);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)9, 120);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0, 473);
      DataInputStream dataInputStream0 = new DataInputStream(byteArrayInputStream0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(dataInputStream0);
      converterUtils_DataSource0.nextElement(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (byte)112;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "@relation");
      doubleArray0[1] = (double) (byte) (-62);
      doubleArray0[2] = 300.0;
      doubleArray0[3] = (double) (byte)112;
      doubleArray0[4] = (double) 483;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.940671268968105
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = new CostMatrix(0);
      SystemInUtil.addInputLine(".cost");
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      evaluation0.rootMeanPriorSquaredError();
      int int0 = 4262;
      evaluation0.falseNegativeRate(4262);
      Puk puk0 = new Puk();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.getData();
      evaluation0.falsePositiveRate(4262);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix1 = costSensitiveClassifier0.getCostMatrix();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null, costMatrix1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=2.4745190939537767
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      String[] stringArray0 = new String[5];
      stringArray0[0] = ".arff";
      evaluation0.weightedMatthewsCorrelation();
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      CheckGOE checkGOE0 = new CheckGOE();
      instances0.lastIndexOf(".arff");
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      evaluation0.evaluateModel((Classifier) adaBoostM1_0, instances0, (Object[]) doubleArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0006_");
      evaluation0.falseNegativeRate(86);
      double double0 = evaluation0.m_SumClass;
      MockRandom mockRandom0 = new MockRandom(86);
      MockRandom mockRandom1 = new MockRandom();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) "\u0006_";
      objectArray0[2] = (Object) " models generated.\n";
      objectArray0[3] = (Object) mockRandom0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      objectArray0[5] = (Object) adaBoostM1_0;
      mockRandom1.longs((long) (-1), 0L);
      objectArray0[6] = (Object) evaluation0;
      objectArray0[7] = (Object) " models generated.\n";
      objectArray0[8] = (Object) mockRandom1;
      try { 
        evaluation0.crossValidateModel((Classifier) adaBoostM1_0, instances0, 13, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      FileSystemHandling.appendLineToFile(evoSuiteFile0, ".names");
      File file0 = c45Loader0.retrieveFile();
      file0.toURL();
      file0.getCanonicalPath();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getDataSet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(0L);
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "@data");
      int int0 = 25;
      String[] stringArray0 = null;
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      try { 
        evaluation0.evaluateModel((Classifier) randomSubSpace0, instances0, (Object[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.3688084245666094
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      C45Loader c45Loader0 = new C45Loader();
      File file0 = c45Loader0.retrieveFile();
      textDirectoryLoader0.setSource(file0);
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.toMatrixString("@data");
      instances0.listIterator();
      evaluation0.m_SumSqrErr = 0.0;
      evaluation0.toSummaryString("@data\n   <-- classified as\n", true);
      textDirectoryLoader0.listOptions();
      evaluation0.weightedMatthewsCorrelation();
      evaluation0.confusionMatrix();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)73;
      byteArray0[2] = (byte)105;
      byte byte0 = (byte) (-91);
      byteArray0[3] = (byte) (-91);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-1842177144));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_ClassPriorsSum;
      testInstances0.generate();
      MockRandom mockRandom0 = new MockRandom();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      try { 
        evaluation0.crossValidateModel((Classifier) additiveRegression0, instances0, 2001, (Random) mockRandom0, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.142321777984503
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      SimpleLinearRegression simpleLinearRegression1 = new SimpleLinearRegression();
      Capabilities capabilities0 = simpleLinearRegression1.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      testInstances0.generate();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCapabilities();
      CostSensitiveClassifier.main(testInstances0.DEFAULT_WORDS);
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      double[] doubleArray1 = new double[6];
      doubleArray1[1] = (double) (-2);
      doubleArray1[3] = (double) 1;
      doubleArray1[5] = (double) (-1);
      try { 
        evaluation0.evaluateModelOnce(doubleArray1, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.3654597361104444
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      SimpleLinearRegression simpleLinearRegression0 = new SimpleLinearRegression();
      simpleLinearRegression0.listOptions();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostSensitiveClassifier costSensitiveClassifier1 = new CostSensitiveClassifier();
      costSensitiveClassifier1.getCostMatrix();
      double[] doubleArray0 = new double[6];
      doubleArray0[1] = (double) 0;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      double double0 = evaluation0.rootMeanSquaredError();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 128
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      OneR oneR0 = new OneR();
      try { 
        Evaluation.evaluateModel((Classifier) oneR0, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -z <class name>
         // \tOnly outputs the source representation of the classifier,
         // \tgiving it the supplied name.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.rules.OneR:
         // 
         // -B <minimum bucket size>
         // \tThe minimum number of objects in a bucket (default: 6).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=2.2624900527086074
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      Capabilities capabilities0 = new Capabilities(symmetricalUncertAttributeEval0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falsePositiveRate((-1));
      double double0 = evaluation0.falsePositiveRate(482);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.weightedTrueNegativeRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (-1951.6887);
      doubleArray0[1] = (double) 482;
      BayesNet bayesNet0 = new BayesNet();
      REPTree rEPTree0 = new REPTree();
      double[] doubleArray1 = evaluation0.makeDistribution(1.2000000029802322);
      assertArrayEquals(new double[] {0.0, 1.0}, doubleArray1, 0.01);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.6851287363978402
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, true, true);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[1];
      intArray0[0] = 104;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[8];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(104, doubleArray0);
      try { 
        evaluation0.evaluateModelOnce(0.22499999403953552, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=2.060090903840557
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      testInstances0.setNumRelationalNominalValues(427);
      testInstances0.getOptions();
      testInstances0.setNoClass(true);
      Instances instances1 = testInstances0.generate(".xml");
      instances1.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n   <-- classified as\n", string0);
      
      double[][] doubleArray1 = evaluation0.confusionMatrix();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertNotSame(doubleArray1, doubleArray0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.9202478929039914
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setMultiInstance(true);
      testInstances0.setNumRelationalNominalValues(1303);
      testInstances0.getOptions();
      testInstances0.setNoClass(true);
      Instances instances0 = testInstances0.generate("");
      instances0.delete();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[][] doubleArray0 = evaluation0.confusionMatrix();
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      
      double[][] doubleArray1 = evaluation0.confusionMatrix();
      assertNotSame(doubleArray1, doubleArray0);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=1.8769075966176494
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      CostMatrix costMatrix0 = new CostMatrix(0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double double0 = evaluation0.correct();
      assertEquals(0.0, double0, 0.01);
      
      J48 j48_0 = new J48();
      MockRandom mockRandom0 = new MockRandom();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) j48_0;
      objectArray0[1] = (Object) j48_0;
      objectArray0[2] = (Object) j48_0;
      String string0 = evaluation0.toSummaryString("@relation", true);
      assertEquals("@relation\nTotal Number of Instances                0     \n", string0);
      
      double double1 = evaluation0.unclassified();
      assertEquals(0.0, double1, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 134
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.KBMeanInformation();
      evaluation0.getClassPriors();
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      String[] stringArray0 = new String[4];
      stringArray0[1] = "";
      stringArray0[2] = "";
      try { 
        Evaluation.evaluateModel((Classifier) logistic0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 136
  /*Coverage entropy=1.4582244426360023
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      CostMatrix costMatrix0 = new CostMatrix(0);
      MockRandom mockRandom0 = new MockRandom();
      int[] intArray0 = new int[1];
      intArray0[0] = 104;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 22;
      doubleArray0[1] = (double) 22;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 1391.836225303;
      doubleArray0[4] = (double) 22;
      doubleArray0[5] = (double) 0;
      Object object0 = new Object();
      ZeroR zeroR0 = new ZeroR();
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) zeroR0;
      objectArray0[1] = (Object) costMatrix0;
      objectArray0[2] = (Object) evoSuiteFile0;
      objectArray0[3] = (Object) 1391.836225303;
      objectArray0[5] = (Object) 0.0;
      objectArray0[6] = (Object) costMatrix0;
      objectArray0[8] = (Object) evoSuiteFile0;
      try { 
        evaluation0.crossValidateModel((Classifier) zeroR0, instances0, (-66), (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of folds must be greater than 1
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      MultilayerPerceptron multilayerPerceptron0 = new MultilayerPerceptron();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "unprunedTipText";
      stringArray0[1] = "Incorrectly Classified Instances   ";
      stringArray0[2] = "Correlation coefficient            ";
      stringArray0[3] = "17~y9ryyMgQIP/";
      stringArray0[4] = "pI$Ewx&`WHu;THK";
      stringArray0[5] = " level)     ";
      stringArray0[6] = "~k";
      stringArray0[7] = "gvfj-H~b\"?M";
      try { 
        Evaluation.evaluateModel((Classifier) multilayerPerceptron0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.functions.MultilayerPerceptron:
         // 
         // -L <learning rate>
         // \tLearning Rate for the backpropagation algorithm.
         // \t(Value should be between 0 - 1, Default = 0.3).
         // -M <momentum>
         // \tMomentum Rate for the backpropagation algorithm.
         // \t(Value should be between 0 - 1, Default = 0.2).
         // -N <number of epochs>
         // \tNumber of epochs to train through.
         // \t(Default = 500).
         // -V <percentage size of validation set>
         // \tPercentage size of validation set to use to terminate
         // \ttraining (if this is non zero it can pre-empt num of epochs.
         // \t(Value should be between 0 - 100, Default = 0).
         // -S <seed>
         // \tThe value used to seed the random number generator
         // \t(Value should be >= 0 and and a long, Default = 0).
         // -E <threshold for number of consequetive errors>
         // \tThe consequetive number of errors allowed for validation
         // \ttesting before the netwrok terminates.
         // \t(Value should be > 0, Default = 20).
         // -G
         // \tGUI will be opened.
         // \t(Use this to bring up a GUI).
         // -A
         // \tAutocreation of the network connections will NOT be done.
         // \t(This will be ignored if -G is NOT set)
         // -B
         // \tA NominalToBinary filter will NOT automatically be used.
         // \t(Set this to not use a NominalToBinary filter).
         // -H <comma seperated numbers for nodes on each layer>
         // \tThe hidden layers to be created for the network.
         // \t(Value should be a list of comma separated Natural 
         // \tnumbers or the letters 'a' = (attribs + classes) / 2, 
         // \t'i' = attribs, 'o' = classes, 't' = attribs .+ classes)
         // \tfor wildcard values, Default = a).
         // -C
         // \tNormalizing a numeric class will NOT be done.
         // \t(Set this to not normalize the class if it's numeric).
         // -I
         // \tNormalizing the attributes will NOT be done.
         // \t(Set this to not normalize the attributes).
         // -R
         // \tReseting the network will NOT be allowed.
         // \t(Set this to not allow the network to reset).
         // -D
         // \tLearning rate decay will occur.
         // \t(Set this to cause the learning rate to decay).
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 138
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      SymmetricalUncertAttributeEval symmetricalUncertAttributeEval0 = new SymmetricalUncertAttributeEval();
      int[] intArray0 = new int[8];
      intArray0[0] = 500;
      symmetricalUncertAttributeEval0.postProcess(intArray0);
      intArray0[1] = (-1890);
      intArray0[2] = 601;
      intArray0[3] = 481;
      symmetricalUncertAttributeEval0.postProcess(intArray0);
      symmetricalUncertAttributeEval0.getCapabilities();
      try { 
        Evaluation.handleCostOption("Tot", (-742));
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Logistic logistic0 = new Logistic();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckGOE checkGOE0 = new CheckGOE();
      Object object0 = new Object();
      MatlabLoader matlabLoader0 = new MatlabLoader();
      Object[] objectArray0 = new Object[8];
      Object object1 = new Object();
      Object object2 = new Object();
      objectArray0[2] = object2;
      String[] stringArray0 = new String[10];
      try { 
        Evaluation.evaluateModel("Percentage split value needs be >0 and <100.", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name Percentage split value needs be >0 and <100..
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
