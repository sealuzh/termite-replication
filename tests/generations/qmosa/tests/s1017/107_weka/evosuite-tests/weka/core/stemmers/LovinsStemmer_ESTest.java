/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 11 10:24:57 GMT 2020
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0915861702086753
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[5];
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("savex");
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer3.getTechnicalInformation();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      String string2 = lovinsStemmer2.stemString("buay9net");
      assertEquals("buay9net", string2);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0881384860054326
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[5];
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stem("buay9net");
      String string1 = lovinsStemmer2.stemString("reiyo&9uet");
      assertEquals("reiy&9ues", string1);
      
      lovinsStemmer3.stem("owze@[{r_/\"h;Q;TR<6");
      lovinsStemmer1.toString();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.1793208541360602
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      lovinsStemmer0.stem("?GlR-/{xk");
      lovinsStemmer0.stemString("?glr-/{xk");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("!`X");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("year");
      lovinsStemmer1.stemString("?glr-/{xk");
      lovinsStemmer1.stem("year");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.stem("!`x");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("ancy");
      String string0 = "$Revision: 8080 $";
      lovinsStemmer1.stem("$Revision: 8080 $");
      lovinsStemmer0.stemString("CROSSREF");
      lovinsStemmer1.toString();
      lovinsStemmer0.globalInfo();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.1633864703374275
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("techreport");
      lovinsStemmer0.stemString("techreport");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("1aQIlq\u0004I");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("BlHOmb'eM");
      lovinsStemmer0.stemString("RA3gn=:mu5wtrD/RK");
      lovinsStemmer0.stem("`H)Vv3");
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "techreport";
      lovinsStemmer0.stem("`H)Vv3");
      stringArray0[1] = "ra3gn=:mu5wtrd/rk";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("-Qk%w<ZgG~:p*|yo@");
      lovinsStemmer0.stem("R. Quinlan");
      lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.tex");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.180050271107664
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = null;
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("nQW46*W|!~75");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      String[] stringArray1 = new String[2];
      stringArray1[0] = "nQW46*W|!~75";
      stringArray1[1] = "nQW46*W|!~75";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("i[7E;r/9!5_mO");
      lovinsStemmer0.stemString("wRzNS8\"2+q},-b'");
      LovinsStemmer.main((String[]) null);
      String string0 = "d;nlN]uS q7pp+";
      lovinsStemmer1.stemString("d;nlN]uS q7pp+");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.2623222703924601
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.getRevision();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "8034";
      stringArray0[1] = "8034";
      stringArray0[2] = "8034";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "8034";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "ward";
      stringArray1[4] = "8034";
      stringArray1[5] = "8034";
      stringArray1[6] = "8034";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer1.stemString("umpt");
      assertEquals("um", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.getRevision();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer2.getRevision();
      String string2 = lovinsStemmer2.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.100105482874877
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("cis");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("YB");
      lovinsStemmer1.stem("'TxR2");
      lovinsStemmer0.stemString("tex");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("cisend");
      lovinsStemmer0.stem("cisend");
      lovinsStemmer1.stem("_[VhU?N@");
      lovinsStemmer0.stemString("istr");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("cis");
      lovinsStemmer1.stem("TH%J>sg~L7DF");
      lovinsStemmer0.stem("O");
      lovinsStemmer0.stem("The price of the document.");
      lovinsStemmer1.stemString("cisens");
      lovinsStemmer0.stemString("cisens");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.1155540222840983
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stem("age");
      assertEquals("ag", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "age";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("Induction of decision trees");
      lovinsStemmer2.toString();
      lovinsStemmer2.stem("y");
      String string1 = lovinsStemmer2.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer2.stemString("String should not finish with ");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string3 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string3);
      
      lovinsStemmer1.stem("y");
      lovinsStemmer0.stem("D^VG1BcW.");
      String string4 = lovinsStemmer3.stemString("?M[,t");
      assertEquals("?m[,t", string4);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.1242228835282038
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      lovinsStemmer0.getTechnicalInformation();
      stringArray0[0] = "WuGAQeqAYL;Im";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("bex");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("otide");
      lovinsStemmer0.stem("pF4H98~:rk<W[");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string2);
      
      String string3 = lovinsStemmer1.stemString("otide");
      assertEquals("ot", string3);
      
      lovinsStemmer0.stem("pF4H98~:rk<W[");
      lovinsStemmer0.stem("5.5 rounded: ");
      String string4 = lovinsStemmer0.stemString("yt");
      assertEquals("yt", string4);
      
      lovinsStemmer0.stemString("bic");
      lovinsStemmer0.stem("`");
      String string5 = lovinsStemmer0.stem("\tDisplays this help.");
      assertEquals("\tdisplays this help.", string5);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.1607702153073836
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[5];
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("2x]-]3s>am{qmex");
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string0);
      
      lovinsStemmer0.stem("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("rrhDW)us");
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("qm");
      lovinsStemmer1.stemString("gkJ4*A$y$#v,");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      String string1 = lovinsStemmer2.stemString("2x]-]3s>am{qmpand");
      assertEquals("2x]-]3s>am{qmpans", string1);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer1.getTechnicalInformation();
      String string3 = lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.1088078812682207
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "pand";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String[] stringArray2 = new String[5];
      stringArray2[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[4] = "";
      LovinsStemmer.main(stringArray2);
      LovinsStemmer.main(stringArray2);
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("Ftal error");
      lovinsStemmer6.globalInfo();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer6.stem("arizability");
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.1405609901830551
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pro_Redings");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("rpt");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("gNv\"W7S");
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.1374745951545693
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ens");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "ens";
      stringArray0[1] = "en";
      stringArray0[2] = "ens";
      stringArray0[3] = "T";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("correlet");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("F");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("en");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("olv");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("correlet");
      lovinsStemmer2.globalInfo();
      TechnicalInformation technicalInformation0 = lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer0.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.1160708696770474
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pro_Redin\"s");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stem("pr_redin\"s");
      lovinsStemmer0.stem("pr_redin\"");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stem("pr_redin\"s");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stem("otide");
      lovinsStemmer1.stemString("ajwajerid");
      lovinsStemmer0.stem("otide");
      lovinsStemmer1.stem("pro_Redin\"s");
      String string1 = "EQi\\uWSO6Y 35`^i2";
      String string2 = lovinsStemmer1.stemString(string1);
      assertEquals("eq\\uwso6 35`^i2", string2);
      
      lovinsStemmer0.stemString("}:@");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stem("oo5VA/Bu-");
      lovinsStemmer2.stem("anced");
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.171817338116069
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("Y9xIgVBGl=8dwuct(n");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "y9xigvbgl=8dwuct(n";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stem("iev");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer2.stem("y9xigvbgl=8dwuct(n");
      lovinsStemmer5.toString();
      lovinsStemmer5.stemString("Y9xIgVBGl=8dwuct(n");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer7.stemString("Array-Dimensions of 'new String[3][4][]': ");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1614662921410885
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("GRU:X6SBD;<uf@cl");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("gru:x6sbd;<uf@cl");
      lovinsStemmer0.stemString("gru:x6sbd;<uf@cl");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("\n\n");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("\n\n");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.stemString("lucyt");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("lucyt");
      lovinsStemmer0.stemString("age");
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2025207074945896
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[3] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("ert");
      assertEquals("ers", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.166042064253423
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("A location associated with the entry, such as the city in which a conference took place.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "a loc associ with th entr, such as th cit in which a confer took plac.";
      stringArray0[1] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[2] = "A location associated with the entry, such as the city in which a conference took place.";
      stringArray0[3] = "pod";
      stringArray0[4] = "pod";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pod");
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer5.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer8.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.toString();
      lovinsStemmer2.stemString("F=5+I");
      String string1 = lovinsStemmer4.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.2998891132033348
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "arizyz";
      stringArray0[1] = "institution";
      stringArray0[2] = "institution";
      stringArray0[3] = "institution";
      stringArray0[4] = "institution";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer2.stemString("arizyz");
      assertEquals("arizys", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string1 = lovinsStemmer2.stemString("5OC=!g?-}>O1]");
      assertEquals("5oc=!g?-}>o1]", string1);
      
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.1477071334952358
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("cis");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("cis");
      assertEquals("ci", string0);
      
      lovinsStemmer1.toString();
      lovinsStemmer2.stem("cis");
      lovinsStemmer2.stemString("scX)J");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stem("yI&+#~GP1&");
      lovinsStemmer1.stemString("tw7u62(jCZotP=pQG=J");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      lovinsStemmer4.stem("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      lovinsStemmer2.stem("cis");
      lovinsStemmer1.stemString("RjF`&yA)y}k;^");
      lovinsStemmer1.stem("lovinsstemmerex");
      lovinsStemmer4.stemString("f&5RUtV{j'IU");
      String string3 = lovinsStemmer1.stemString("ionher");
      assertEquals("ionhes", string3);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0006781307139636
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String string0 = lovinsStemmer1.stem("iev");
      assertEquals("ief", string0);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0827710066413954
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pro_Redin\"s");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("pro_Redin\"s");
      lovinsStemmer0.stem("ax");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("ax");
      lovinsStemmer0.stemString("ax");
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("Usually the address of the publisher or other type of institution. For major publishing houses, van Leunen recommends omitting the information entirely. For small publishers, on the other hand, you can help the reader by giving the complete address.");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.1306711948643042
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JOURNAL";
      lovinsStemmer0.stem("JOURNAL");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "JOURNAL";
      stringArray1[1] = "JOURNAL";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("JOURNAL");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("JOURNAL");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("T]6YVuaR}>~H08rh ");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("journ");
      lovinsStemmer1.stemString("t]6yvuar}>~h08rh ");
      lovinsStemmer0.stemString("lud");
      lovinsStemmer1.stemString("xB$wZ!=2=");
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer1.stemString("journ");
      lovinsStemmer0.stem("T]6YVuaR}>~H08rh ");
      lovinsStemmer0.stem("JOURNAL");
      lovinsStemmer0.stem("HOWPUBLISHED");
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("P.;1z*7pg");
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("ax");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer1.stemString("ax");
      lovinsStemmer1.stem("l,@@4!L");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.stem("l,@@4!l");
      lovinsStemmer1.stem("l,@@4!l");
      lovinsStemmer1.stem("ax");
      lovinsStemmer1.stem("biclud");
      lovinsStemmer0.stemString("ax");
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      String string2 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("ax");
      assertEquals("ax", string3);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.177044897163502
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.Option");
      String[] stringArray0 = new String[8];
      lovinsStemmer0.stemString("|YI+^r>W");
      lovinsStemmer0.stemString("%s|JH5X)9,vR3X)");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("%s|JH5X)9,vR3X)");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("journpex");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "et";
      stringArray1[1] = "%s|jh5x)9,vr3x)";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "pand";
      stringArray1[4] = "%s|jh5x)9,vr3x)";
      LovinsStemmer.main(stringArray1);
      assertEquals(5, stringArray1.length);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.087682293768024
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "pand";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String[] stringArray2 = new String[5];
      stringArray2[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray2[4] = "";
      LovinsStemmer.main(stringArray2);
      LovinsStemmer.main(stringArray2);
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.globalInfo();
      String string0 = lovinsStemmer3.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string1 = lovinsStemmer6.stemString("Fatal error.");
      assertEquals("fat error.", string1);
      
      lovinsStemmer6.globalInfo();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer6.globalInfo();
      LovinsStemmer.main(stringArray2);
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.110076756769848
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ious");
      assertEquals("ious", string0);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[0];
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("wugaqeqayl;imerid");
      assertEquals("wugaqeqayl;imeris", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.1877651532910756
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("ation");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("--[3o|7?Cl.sHWB\"");
      lovinsStemmer0.stemString("ation");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("<-7Nxc'/W8FTBV");
      assertEquals("<-7nxc'/w8ftbv", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("vaslid");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("arized");
      assertEquals("ariz", string2);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.1088078812682207
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("pro_Redings");
      assertEquals("pr_red", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("ialize");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.1196140076029166
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "ax";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("/s6F#Bj,4");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("pro_Redings");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.stemString("lid");
      lovinsStemmer4.globalInfo();
      String string1 = lovinsStemmer2.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.2980608176545194
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("'U=1");
      lovinsStemmer0.stem("--[3o|7]Cl.sHWB\"");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stem("weka.core.stemmers.lovinsstemmer");
      lovinsStemmer0.stem("--[3o|7]cl.shwb\"yt");
      String string0 = lovinsStemmer2.stemString("--[3o|7]cl.shwb\"yt");
      assertEquals("--[3o|7]cl.shwb\"yt", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("L=#");
      lovinsStemmer1.stemString("L=#");
      lovinsStemmer2.stem(":f$t9Eze!tWf[-V8");
      lovinsStemmer0.stem("=l(H8ze`L2LN");
      lovinsStemmer2.stemString("E-6^Gzbt<AJ K");
      String string2 = lovinsStemmer0.stemString("E-6^Gzbt<AJ K");
      assertEquals("e-6^gzbt<aj k", string2);
      
      String string3 = lovinsStemmer1.stem("i>@p7Q");
      assertEquals("i>@p7q", string3);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.219060474491381
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("");
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.stemString("cid");
      assertEquals("cis", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.1299844492144984
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[1];
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.stemString("79MuXE5t$N");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer2.stemString("mit");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.stemString("ond");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer3.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.2695005748670856
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "pand";
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.stemString("pand");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("*phVOC5KET");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer2.stemString("M-<~uw");
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer8.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.130648797589984
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JOURNAL";
      lovinsStemmer0.stem("JOURNAL");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "JOURNAL";
      stringArray1[1] = "JOURNAL";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("JOURNAL");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("JOURNAL");
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("JOURNAL");
      lovinsStemmer0.stemString("TECHREPORT");
      lovinsStemmer0.stem("vadtex");
      lovinsStemmer0.stemString("T]6YVuaR}>~H08rh ");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("TECHREPORT");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("techreport");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("techreport");
      lovinsStemmer0.stem("A link to a PDF file.");
      lovinsStemmer0.stemString("reiyo&9uix");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.24578500174416
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      String[] stringArray0 = new String[1];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString(",rAK");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer3.stemString("lovinsstemmertex");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0893362574763148
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer2.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer2.stemString("invalid CVS revision - not enough parts separated by dots!");
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      String string1 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.toString();
      String string2 = lovinsStemmer7.stemString("invalis cv revis - not enough part separ by dot!");
      assertEquals("inval cv rev - not enough part separ by dot!", string2);
      
      String string3 = lovinsStemmer7.stemString("rtjuend");
      assertEquals("rtjuens", string3);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0979051350598592
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("ious");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("end");
      assertEquals("ens", string0);
      
      String string1 = lovinsStemmer0.stemString("ens");
      assertEquals("en", string1);
      
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.130648797589984
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("encies");
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("encies");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("enci");
      lovinsStemmer0.stem("enci");
      String[] stringArray1 = new String[0];
      String string1 = lovinsStemmer0.stemString("uad");
      assertEquals("uas", string1);
      
      lovinsStemmer0.stemString("-5D(L=-P\"$");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.stemString("enci");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("ished");
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer1.stemString("$Revision: 80E80 $");
      assertEquals("$revis: 80e80 $", string2);
      
      String string3 = lovinsStemmer0.stemString("arizable");
      assertEquals("ar", string3);
      
      String string4 = lovinsStemmer0.stemString("reiyo&9uax");
      assertEquals("reiy&9uac", string4);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.1232406607762129
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("encies");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.stemString("C|?CTxNI");
      lovinsStemmer2.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.1195178402261294
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("ious");
      assertEquals("ious", string0);
      
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "ious";
      stringArray0[4] = "ious";
      stringArray0[5] = "arization";
      stringArray0[3] = "ite";
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("h08rhvad");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stem("]WvOSB8yx(_~aXa");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1475339116070784
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pro_Redings");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("pro_Redings");
      assertEquals("pr_red", string0);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("ides");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("pr_red");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      String string1 = lovinsStemmer0.stemString("aronddex");
      assertEquals("aronddic", string1);
      
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer2.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer3.globalInfo();
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.1976783572372116
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String[] stringArray1 = new String[4];
      stringArray1[0] = "prz44derid";
      stringArray1[1] = "Uk<_s~ w;8n]pi6]9OP";
      stringArray1[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[3] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("mit");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer1.stemString("prz44drud");
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.globalInfo();
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.2100814168803884
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rbyt";
      stringArray0[1] = "ond";
      stringArray0[2] = "umrud";
      stringArray0[3] = "entials";
      stringArray0[5] = "entials";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("umrud");
      assertEquals("umrus", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1201948010929301
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "The Mathematical Reviews number.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "The Mathematical Reviews number.";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[4] = "Sh7w8 |_}lxI]mf?";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer3.stemString("The database key of the entry being cross referenced. Any fields that are missig from the current record ar inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar missig from th cur record ar inherit from th field being cros refer.", string1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1475509292567447
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "JOURNAL";
      lovinsStemmer0.stemString("JOURNAL");
      lovinsStemmer0.stemString("JOURNAL");
      String[] stringArray1 = new String[5];
      stringArray1[0] = "JOURNAL";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("journ");
      lovinsStemmer1.stemString("The name of the school where a thesis was written.");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.toString();
      lovinsStemmer3.stemString("1mD,]y!pFZx2K#oWx");
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      assertFalse(stringArray0.equals((Object)stringArray1));
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1121779287159803
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[1];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("79MuXE5t$N");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("pJ[eDOaUm/q");
      assertEquals("pj[edoaum/q", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string2 = lovinsStemmer2.stemString("efully");
      assertEquals("efl", string2);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer3.stemString("TECHREPORT");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.globalInfo();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.globalInfo();
      String string3 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.1034899977331993
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "weka.core.stemmers.LovinsStemmer";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray1 = new String[6];
      stringArray1[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "8034";
      stringArray1[4] = "8034";
      stringArray1[5] = "ation";
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      lovinsStemmer3.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      String string0 = lovinsStemmer5.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.1121779287159803
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.globalInfo();
      String[] stringArray1 = new String[1];
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.stemString("79MuXE5t$N");
      LovinsStemmer.main(stringArray1);
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer1.stemString("pJ[eDOaUm/q");
      assertEquals("pj[edoaum/q", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("efully");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer3.stemString("TECHREPORT");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer5.toString();
      LovinsStemmer.main(stringArray1);
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.globalInfo();
      LovinsStemmer.main(stringArray1);
      String string2 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pro_Redin\"s");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("pro_Redin\"s");
      lovinsStemmer0.stem("ax");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("ax");
      lovinsStemmer1.stem("aically");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("!50~:4qdd#t/n4iF");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer3.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.2025207074945896
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Uk<_s~ w;8n]pi6]9OP";
      stringArray0[1] = "Uk<_s~ w;8n]pi6]9OP";
      stringArray0[2] = "Uk<_s~ w;8n]pi6]9OP";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("lux");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.toString();
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.070526800031774
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[1];
      String[] stringArray1 = new String[5];
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray1);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      String string0 = lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      assertEquals("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("ation");
      assertEquals("ation", string1);
      
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.7550851215437775
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("iouset");
      assertEquals("iouses", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1471118975086285
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "BOOKLET";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer0.stemString("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.");
      assertEquals("a stemmer ba on th lovin stemmer, describ he:\n\njl beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("(KKc.'vi");
      assertEquals("(kkc.'vi", string1);
      
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      String string2 = lovinsStemmer2.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer7.toString();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer2.toString();
      lovinsStemmer4.stemString("9wM#SqNU+}a");
      String string3 = lovinsStemmer8.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string3);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.1699287426940295
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("o0*K7M'Qe8sK6(+");
      assertEquals("o0*k7m'qe8sk6(+", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.119615049895159
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("WuGAQeqAYL;Im");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("size");
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main((String[]) null);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.146230145415185
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[0];
      lovinsStemmer0.stem("?GlR-/{xk");
      lovinsStemmer0.stem("6NJAF*GRaH1]v");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stem("{.,!Pj'9+c$hu3?bKXL");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("6njaf*grah1]v");
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("141&,");
      String string0 = "ks#`-sN_";
      lovinsStemmer0.stemString("ks#`-sN_");
      String string1 = "_rO) P$g~Cc(s;";
      lovinsStemmer1.stem("_rO) P$g~Cc(s;");
      lovinsStemmer1.stemString("ancing");
      lovinsStemmer0.globalInfo();
      String string2 = null;
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1303005157968697
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("pro_Redin\"s");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("pro_Redin\"s");
      assertEquals("pr_redin\"s", string0);
      
      lovinsStemmer0.stem("ax");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer1.stem("aically");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.stem("ing");
      String string2 = lovinsStemmer1.stem("ax");
      assertEquals("ax", string2);
      
      lovinsStemmer0.stemString("pro_Redin\"s");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stem("wugaqeqayl;imert");
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "The Internationl Stavdard Book Number (13 digits).";
      stringArray0[1] = "elily";
      stringArray0[2] = "The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.";
      stringArray0[3] = "zG";
      stringArray0[4] = "";
      lovinsStemmer0.globalInfo();
      stringArray0[5] = "The Internationl Stavdard Book Number (13 digits).";
      stringArray0[6] = "";
      stringArray0[7] = "_EVC";
      stringArray0[8] = "_cAY1T ]t";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stemString("");
      lovinsStemmer0.stem("");
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9948360687584032
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("volbexbex");
      assertEquals("volbexbic", string0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.0269528316950722
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@?*u_tSw";
      stringArray0[1] = "end";
      stringArray0[2] = "izing";
      stringArray0[3] = "Q}v@&aH";
      stringArray0[4] = "qd{ \"\"b+bex";
      stringArray0[5] = "qd{ \"\"b+erid";
      stringArray0[6] = "qd{ \"\"b+uad";
      stringArray0[7] = "qd{ \"\"b+uad";
      stringArray0[8] = "qd{ \"\"b+ert";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("A document having an author and title, but not formally published.");
      assertEquals("a docum hav an author and titl, but not form publ.", string0);
  }
}
