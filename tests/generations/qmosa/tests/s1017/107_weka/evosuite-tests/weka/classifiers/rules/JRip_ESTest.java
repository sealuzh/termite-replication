/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 15:43:08 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.DataInputStream;
import java.io.File;
import java.io.InputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.Writer;
import java.util.ArrayList;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiConsumer;
import java.util.function.BiFunction;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SGDText;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.CoverTree;
import weka.core.neighboursearch.LinearNNSearch;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.core.tokenizers.AlphabeticTokenizer;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 102);
      Attribute attribute0 = new Attribute("@data", 102);
      Attribute attribute1 = new Attribute("integer", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute1.indexOfValue((String) null);
      attribute0.indexOfValue("#MLAd<5:s");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      Attribute attribute2 = new Attribute("numeric", instances0, 4);
      String[] stringArray0 = new String[5];
      attribute1.value(1);
      DenseInstance denseInstance0 = new DenseInstance(99);
      instances0.add((Instance) denseInstance0);
      stringArray0[0] = "date";
      stringArray0[1] = "@end";
      stringArray0[2] = "relational";
      stringArray0[3] = ".arff";
      stringArray0[4] = "date";
      Attribute.main(stringArray0);
      Attribute.typeToString(attribute1);
      Instances.main(stringArray0);
      Attribute attribute3 = new Attribute("@attribute", 2);
      attribute3.addStringValue(attribute0, (-1541));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      boolean boolean0 = jRip_NumericAntd0.covers(denseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.781465648596145
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 102);
      Attribute attribute0 = new Attribute("@data", 102);
      Attribute attribute1 = new Attribute("integer", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute1.indexOfValue((String) null);
      attribute0.indexOfValue("#MLAd<5:s");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      RuleStats.partition(instances0, 4);
      Attribute attribute2 = new Attribute("numeric", instances0, 4);
      String[] stringArray0 = new String[5];
      attribute1.value(1);
      DenseInstance denseInstance0 = new DenseInstance(99);
      instances0.add((Instance) denseInstance0);
      stringArray0[0] = "date";
      stringArray0[1] = "@end";
      stringArray0[2] = "relational";
      stringArray0[3] = ".arff";
      stringArray0[4] = "date";
      Attribute.main(stringArray0);
      Attribute.typeToString(attribute1);
      Instances.main(stringArray0);
      Attribute attribute3 = new Attribute("@attribute", 2);
      attribute3.addStringValue(attribute0, (-1541));
      jRip_NominalAntd0.splitData(instances0, 2, 0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      
      String[] stringArray1 = jRip0.getOptions();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(11, stringArray1.length);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1290003949677563
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      protectedProperties1.values();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      protectedProperties5.clone();
      Properties properties1 = new Properties();
      double[] doubleArray0 = new double[4];
      protectedProperties0.keySet();
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[3] = 1.7976931348623157E308;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0);
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      protectedProperties8.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, ClassOrder> biFunction0 = (BiFunction<Object, Object, ClassOrder>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties10.replaceAll(biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties4.forEach(biConsumer0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute((String) null, protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (double) 2;
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.covers(sparseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.2907979123440496
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("tY!F:q->");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      jRip0.setUsePruning(false);
      Instances instances1 = new Instances("\nGrowing and pruning a new rule ...", arrayList0, 47);
      Attribute attribute1 = new Attribute("", instances1, 47);
      jRip0.getCheckErrorRate();
      Utils.SMALL = (-1512.71266400813);
      try { 
        jRip0.rulesetForOneClass(1147.61696467149, instances0, 1147.61696467149, 1742.884793885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.676755797914435
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      SystemInUtil.addInputLine("tY!F:q->");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip0.globalInfo();
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      arrayList0.stream();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      arrayList0.stream();
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      arrayList0.add(attribute0);
      jRip0.setUsePruning(false);
      SystemInUtil.addInputLine("string");
      Utils.SMALL = (-1512.71266400813);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = (double) 2;
      doubleArray0[1] = (double) 1;
      attribute0.addStringValue("integer");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "f[@");
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[5] = (double) 2;
      jRip0.setDebug(true);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      instances0.add((Instance) binarySparseInstance0);
      SystemInUtil.addInputLine(".bsi");
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      try { 
        jRip0.rulesetForOneClass(47, instances0, 47, 1742.884793885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "| data size: ";
      stringArray0[1] = "";
      Utils.SMALL = 1231.806692;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      stringArray0[2] = "ez5go0L";
      stringArray0[3] = "";
      stringArray0[4] = "lf{-f";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jRip0.setOptions(stringArray0);
      jRip0.setSeed(120L);
      jRip0.setMinNo((-265.905615415));
      jRip0.getMinNo();
      jRip0.seedTipText();
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.650832730697389
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("tY!F:q->", 199);
      Attribute.typeToString(attribute0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 1);
      jRip0.setUsePruning(false);
      jRip0.listOptions();
      Instances instances1 = new Instances("\nGrowing and pruning a new rule ...", arrayList0, 1);
      Attribute attribute1 = new Attribute("", instances1, 1);
      attribute1.addStringValue("");
      arrayList0.add(attribute1);
      Utils.SMALL = (-1512.71266400813);
      try { 
        jRip0.rulesetForOneClass(2, instances0, 2, 1742.884793885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setFolds((-501));
      int int0 = jRip0.getFolds();
      assertEquals((-501), int0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.199325386865874
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      jRip0.setUsePruning(false);
      Utils.SMALL = (-1512.71266400813);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1742.884793885;
      doubleArray0[1] = 1147.61696467149;
      doubleArray0[2] = (-1512.71266400813);
      doubleArray0[3] = 1742.884793885;
      doubleArray0[4] = 1742.884793885;
      doubleArray0[5] = (-1512.71266400813);
      doubleArray0[6] = 1722.61;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 1147.61696467149;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      BallNode ballNode0 = new BallNode(47, 85, 85, binarySparseInstance0, 1742.884793885);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      try { 
        jRip0.rulesetForOneClass(1147.61696467149, instances0, 1147.61696467149, 1742.884793885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      MockFile mockFile0 = new MockFile("ance", "ance");
      File file0 = MockFile.createTempFile("5m$On|`H^;N+`'", "pD,%$ V^|s", (File) mockFile0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      protectedProperties2.store((Writer) mockPrintWriter0, "pD,%$ V^|s");
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("ance/ance");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "5m$On|`H^;N+`'");
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 992.0414;
      doubleArray0[1] = Double.NaN;
      doubleArray0[3] = 992.0414;
      SparseInstance sparseInstance0 = new SparseInstance(0.3, doubleArray0);
      JRip jRip0 = new JRip();
      SystemInUtil.addInputLine("5m$On|`H^;N+`'");
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-N";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -N option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 102);
      Attribute attribute0 = new Attribute("@data", 102);
      Attribute attribute1 = new Attribute("integer", 0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute1.indexOfValue((String) null);
      attribute0.indexOfValue("#MLAd<5:s");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      RuleStats.partition(instances0, 4);
      Attribute attribute2 = new Attribute("numeric", instances0, 4);
      String[] stringArray0 = new String[5];
      attribute1.value(1);
      DenseInstance denseInstance0 = new DenseInstance(99);
      instances0.add((Instance) denseInstance0);
      stringArray0[0] = "date";
      stringArray0[1] = "@end";
      stringArray0[2] = "relational";
      stringArray0[3] = ".arff";
      stringArray0[4] = "date";
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      Attribute attribute3 = new Attribute("@end", "", protectedProperties0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => @data=", string0);
      
      JRip.NominalAntd jRip_NominalAntd1 = jRip0.new NominalAntd(attribute1);
      boolean boolean0 = jRip_NominalAntd0.covers(denseInstance0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertFalse(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.112481141109701
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JRip jRip0 = new JRip();
      SystemInUtil.addInputLine("tY!F:q->");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      arrayList0.stream();
      arrayList0.stream();
      Attribute attribute0 = new Attribute(".arff");
      instances0.toArray();
      arrayList0.add(attribute0);
      jRip0.setUsePruning(false);
      Utils.SMALL = (-1512.71266400813);
      System.setCurrentTimeMillis(3);
      try { 
        jRip0.rulesetForOneClass(1147.61696467149, instances0, 1147.61696467149, 1742.884793885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.112481141109701
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JRip jRip0 = new JRip();
      SystemInUtil.addInputLine("tY!F:q->");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      arrayList0.stream();
      arrayList0.stream();
      Attribute attribute0 = new Attribute(" | best: ", instances0, 2145615648);
      arrayList0.add(attribute0);
      jRip0.setUsePruning(false);
      Utils.SMALL = (-1512.71266400813);
      try { 
        jRip0.rulesetForOneClass(1147.61696467149, instances0, 1147.61696467149, 1742.884793885);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2145615648
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("tY!F:q->");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      Locale locale0 = Locale.CANADA_FRENCH;
      locale0.getDisplayVariant();
      Locale.getISOLanguages();
      Locale locale1 = Locale.JAPAN;
      locale0.getDisplayVariant();
      Locale.getISOLanguages();
      locale1.getDisplayScript(locale0);
      Locale locale2 = Locale.ITALY;
      Locale locale3 = Locale.FRENCH;
      Locale locale4 = Locale.JAPAN;
      locale2.getDisplayLanguage();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList1 = new LinkedList<Locale>();
      linkedList1.offerLast(locale3);
      Locale locale5 = Locale.TRADITIONAL_CHINESE;
      Locale locale6 = Locale.TAIWAN;
      Locale locale7 = Locale.FRENCH;
      JRip jRip1 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.0030424324097464
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      jRip0.setUsePruning(false);
      double double0 = 1147.61696467149;
      Utils.SMALL = (-1512.71266400813);
      try { 
        jRip0.rulesetForOneClass(1147.61696467149, instances0, 1147.61696467149, 1742.884793885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopy(jRip0);
      jRip0.setFolds((-2482));
      String string0 = jRip0.globalInfo();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute(string0, (List<String>) null, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (double) 2;
      jRip_NumericAntd0.toString();
      double double0 = Double.NaN;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = null;
      try {
        instances0 = new Instances("?hT", arrayList0, (-62));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -62
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Locale locale0 = new Locale("E|N0");
      Locale locale1 = Locale.ROOT;
      Locale locale2 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale locale3 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("E|N0", list0, (-47));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-3068.79653);
      jRip_NumericAntd0.toString();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule0.toString(attribute0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("tY!F:q->");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      jRip0.setUsePruning(false);
      Locale.getISOLanguages();
      Locale locale0 = Locale.JAPAN;
      locale0.getDisplayVariant();
      Locale.getISOLanguages();
      locale0.getDisplayScript((Locale) null);
      Locale locale1 = Locale.ITALY;
      Locale locale2 = Locale.FRENCH;
      Locale locale3 = Locale.JAPAN;
      Locale locale4 = Locale.ITALIAN;
      locale4.getDisplayLanguage();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      jRip0.getUsePruning();
      Locale locale5 = Locale.TRADITIONAL_CHINESE;
      Locale locale6 = Locale.TAIWAN;
      Locale locale7 = Locale.FRENCH;
      JRip jRip1 = new JRip();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.540448551364985
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertTrue(jRip0.getUsePruning());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "h+d*~Me|A~7k+D";
      stringArray0[1] = "Taxicab geometry";
      stringArray0[2] = "";
      jRip0.setUsePruning(false);
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.setCheckErrorRate(false);
      jRip0.getTechnicalInformation();
      jRip0.foldsTipText();
      jRip0.optimizationsTipText();
      jRip0.getOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 1.0;
      doubleArray0[1] = 1.0;
      doubleArray0[2] = 1.0;
      doubleArray0[3] = (-1135.41);
      doubleArray0[4] = 1.0;
      doubleArray0[5] = 1.0;
      doubleArray0[6] = 1.0;
      DenseInstance denseInstance0 = new DenseInstance(1.0, doubleArray0);
      boolean boolean0 = jRip_RipperRule0.covers(denseInstance0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.minNoTipText();
      jRip0.getOptions();
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2146034906));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.9401690517473154
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 68);
      Attribute attribute0 = new Attribute("@relation", instances0);
      Attribute attribute1 = attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("", arrayList0, 1);
      attribute1.addRelation(instances1);
      attribute0.indexOfValue("#MLAd<5:s");
      jRip_NumericAntd0.splitData(instances0, 0, (-1397.735043254835));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.maxInfoGain = (-108.169873277);
      jRip_NominalAntd0.splitData(instances0, 3, (-1397.735043254835));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      // Undeclared exception!
      try { 
        arrayList0.set(0, attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      int int0 = 79;
      Instances instances0 = new Instances("", arrayList0, 79);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      int[] intArray0 = new int[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(79, intArray0, 79);
      jRip_RipperRule0.covers(binarySparseInstance0);
      jRip_RipperRule0.prune(instances0, false);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(79);
      SparseInstance sparseInstance0 = new SparseInstance(122);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch(instances0);
      // Undeclared exception!
      try { 
        sparseInstance0.setValue(1161, "V|");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.304704691639832
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 68);
      Attribute attribute0 = new Attribute((String) null, instances0);
      Attribute attribute1 = attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute0.indexOfValue("#MLAd<5:s");
      arrayList0.add(attribute1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.cover = (double) 3;
      jRip_NominalAntd0.splitData(instances0, 3, (-1398.6541178128416));
      int[] intArray0 = new int[6];
      intArray0[4] = 0;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "real";
      stringArray0[1] = "string";
      stringArray0[0] = "";
      stringArray0[3] = "real";
      stringArray0[4] = "@end";
      stringArray0[5] = "@attribute";
      Locale locale0 = Locale.JAPANESE;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(1);
      JRip jRip1 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      try { 
        jRip1.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = (ProtectedProperties)protectedProperties2.clone();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(properties1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1768);
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = 103.0;
      doubleArray0[3] = 1855.376479;
      doubleArray0[4] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties3);
      Attribute attribute0 = new Attribute("", "", protectedProperties7);
      attribute0.setWeight((-330.14509));
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("real", arrayList0, 1);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Locale locale0 = new Locale("seeming");
      Locale locale1 = new Locale("#0~'5W>{?G");
      locale1.getUnicodeLocaleAttributes();
      Attribute attribute0 = new Attribute((String) null, 8);
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "string";
      stringArray0[1] = "date";
      stringArray0[2] = "#0~'5W>{?G";
      stringArray0[3] = "numeric";
      stringArray0[4] = "numeric";
      stringArray0[5] = "integer";
      stringArray0[6] = "integer";
      stringArray0[7] = "@attribute";
      stringArray0[8] = "date";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 8;
      doubleArray0[2] = (double) 4;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 2;
      doubleArray0[5] = (-2098.0);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 3;
      doubleArray0[8] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance((-422.73), doubleArray0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertFalse(boolean0);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1019336561027147
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 68);
      Attribute attribute0 = new Attribute((String) null, instances0);
      Attribute attribute1 = attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances("", arrayList0, 1);
      attribute1.addRelation(instances1);
      attribute0.indexOfValue("#MLAd<5:s");
      jRip_NumericAntd0.splitData(instances0, 0, (-1397.735043254835));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.splitData(instances0, 3, (-1397.735043254835));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 0;
      intArray0[2] = 3;
      intArray0[3] = 0;
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      Instance instance0 = null;
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.9594045983154567
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      SystemInUtil.addInputLine("tY!F:q->");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      arrayList0.stream();
      arrayList0.stream();
      Attribute attribute0 = new Attribute(".arff", instances0, 47);
      arrayList0.add(attribute0);
      jRip0.setUsePruning(false);
      SystemInUtil.addInputLine("string");
      Utils.SMALL = (-1512.71266400813);
      attribute0.addStringValue("@data");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\nEstimator options:\n\n");
      double[] doubleArray0 = new double[0];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(47, doubleArray0);
      binarySparseInstance0.setDataset(instances0);
      instances0.add((Instance) binarySparseInstance0);
      SystemInUtil.addInputLine("sV\"iKVfXR*Qb_{^)");
      try { 
        jRip0.rulesetForOneClass(272.9239182625887, instances0, (-1), 3);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = new SelectedTag(4, decisionTable0.TAGS_EVALUATION);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      DecisionTable decisionTable1 = new DecisionTable();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Instances instances0 = decisionTable0.m_theInstances;
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      decisionTable3.getEvaluationMeasure();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.563413311326071
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = jRip0.getOptions();
      jRip0.toString();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      CoverTree coverTree0 = new CoverTree();
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      PrincipalComponents principalComponents2 = new PrincipalComponents();
      PrincipalComponents principalComponents3 = new PrincipalComponents();
      PrincipalComponents principalComponents4 = new PrincipalComponents();
      PrincipalComponents principalComponents5 = new PrincipalComponents();
      principalComponents0.postProcess((int[]) null);
      principalComponents5.postProcess((int[]) null);
      jRip0.setOptions(stringArray0);
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.757637858307174
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      Utils.SMALL = (-1512.71266400813);
      jRip0.listOptions();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      linkedList0.clear();
      jRip0.getOptions();
      jRip0.checkErrorRateTipText();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(47);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList2 = new LinkedList<Locale.LanguageRange>();
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList2 = new ArrayList<Locale>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList1, (Collection<Locale>) arrayList2, locale_FilteringMode0);
      Locale.filter((List<Locale.LanguageRange>) linkedList0, (Collection<Locale>) list0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      // Undeclared exception!
      try { 
        Locale.filterTags((List<Locale.LanguageRange>) null, (Collection<String>) set0, locale_FilteringMode1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4164983843494308
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "string";
      stringArray0[1] = "numeric";
      stringArray0[2] = "";
      JRip.main(stringArray0);
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Attribute attribute1 = attribute0.copy("Inside m_Ruleset");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Properties properties0 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties2 = new Properties();
      properties2.propertyNames();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 103.0;
      doubleArray0[1] = (double) 68;
      doubleArray0[2] = 0.2;
      SparseInstance sparseInstance0 = new SparseInstance((-1041.4574076474703), doubleArray0);
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties4.forEach(biConsumer0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      Attribute attribute0 = new Attribute("", protectedProperties4);
      attribute0.setWeight(103.0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.JAPANESE;
      locale1.getUnicodeLocaleAttributes();
      Locale locale2 = Locale.TAIWAN;
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent((-207.3));
      DecisionTable decisionTable0 = new DecisionTable();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances0 = decisionTable1.m_theInstances;
      decisionTable0.getEvaluationMeasure();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      protectedProperties4.stringPropertyNames();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties6);
      protectedProperties11.entrySet();
      protectedProperties3.keySet();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 1854.6322744511701;
      doubleArray0[1] = Double.NaN;
      SparseInstance sparseInstance0 = new SparseInstance(Double.NaN, doubleArray0);
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties3);
      properties1.entrySet();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties10.forEach(biConsumer0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties1);
      Attribute attribute0 = new Attribute("", "", protectedProperties8);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.getRevision();
      assertEquals("8118", string0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertTrue(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)85;
      byteArray0[1] = (byte)60;
      byteArray0[2] = (byte) (-12);
      byteArray0[3] = (byte)8;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2, int0);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.519382346735597
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale1 = Locale.CHINESE;
      linkedList1.clear();
      locale1.getUnicodeLocaleKeys();
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) linkedList2);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode1);
      ArrayList<String> arrayList2 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd((Attribute) null);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(0.0, jRip_NumericAntd1.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertNotSame(jRip_NumericAntd1, jRip_NumericAntd0);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getCover(), 0.01);
      
      String string0 = jRip0.checkErrorRateTipText();
      assertEquals("Whether check for error rate >= 1/2 is included in stopping criterion.", string0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "115-123");
      JRip jRip0 = new JRip();
      Capabilities capabilities0 = jRip0.getCapabilities();
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, capabilities0.getMinimumNumberInstances());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8599785716462063
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule3.size();
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      jRip0.minNoTipText();
      JRip.RipperRule jRip_RipperRule5 = jRip0.new RipperRule();
      LinearNNSearch linearNNSearch0 = new LinearNNSearch();
      assertFalse(linearNNSearch0.getSkipIdentical());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      Properties properties1 = new Properties();
      BiFunction<Object, Object, DenseInstance> biFunction0 = (BiFunction<Object, Object, DenseInstance>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      Properties properties2 = new Properties();
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass(4.9E-324, (Instances) null, 2.0, Double.NaN);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      JRip jRip0 = new JRip();
      String string0 = jRip0.optimizationsTipText();
      assertEquals("The number of optimization runs.", string0);
      
      Attribute attribute0 = new Attribute("The number of optimization runs.", (List<String>) null, (-15));
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.getCover();
      double double0 = jRip_NumericAntd0.getCover();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.842607872853489
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 47);
      jRip0.toString();
      jRip0.setMinNo((-2327L));
      jRip0.setSeed((-2327L));
      jRip0.getOptions();
      jRip0.getRevision();
      Attribute attribute0 = new Attribute("wU:2B/hg.HT<&_^t?tw");
      attribute0.setStringValue("wU:2B/hg.HT<&_^t?tw");
      Attribute.typeToString(656);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Attribute.typeToString(attribute0);
      jRip_NominalAntd0.value = (double) 1;
      jRip_NominalAntd0.value = (double) (-2327L);
      jRip_NominalAntd0.getRevision();
      jRip0.setDebug(true);
      jRip0.getDebug();
      jRip0.getSeed();
      jRip0.setDebug(false);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.304960205575741
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 68);
      Attribute attribute0 = new Attribute((String) null, instances0);
      Attribute attribute1 = attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".arff", arrayList0, 1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".arff");
      attribute0.indexOfValue("#MLAd<5:s");
      jRip_NumericAntd0.splitData(instances0, 0, (-1397.735043254835));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.cover = (double) 3;
      jRip_NominalAntd0.splitData(instances0, 3, (-1397.735043254835));
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[4] = 0;
      // Undeclared exception!
      try { 
        arrayList0.set(0, attribute0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = jRip0.getDebug();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.CHINESE;
      locale1.getUnicodeLocaleKeys();
      Locale locale2 = Locale.TAIWAN;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      locale1.getDisplayCountry();
      locale0.getDisplayName();
      locale3.toLanguageTag();
      Locale locale4 = Locale.JAPAN;
      locale0.getDisplayVariant();
      Locale locale5 = Locale.JAPAN;
      locale2.getDisplayVariant();
      Locale.getISOLanguages();
      Locale locale6 = Locale.TRADITIONAL_CHINESE;
      locale3.getDisplayScript(locale6);
      Locale locale7 = Locale.UK;
      Locale locale8 = Locale.FRENCH;
      locale8.getDisplayLanguage();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale9 = Locale.CHINESE;
      Locale locale10 = Locale.TAIWAN;
      Locale.lookup(linkedList1, linkedList2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) ")");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.negate();
      predicate3.and(predicate1);
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      CostMatrix costMatrix1 = new CostMatrix(costMatrix0);
      CostMatrix costMatrix2 = new CostMatrix(costMatrix1);
      MockRandom mockRandom0 = new MockRandom();
      BayesNet bayesNet0 = new BayesNet();
      Instances instances0 = bayesNet0.m_Instances;
      System.setCurrentTimeMillis(2);
      JRip jRip0 = new JRip();
      long long0 = jRip0.getSeed();
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale locale1 = Locale.CHINESE;
      locale1.getUnicodeLocaleKeys();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      linkedList1.clear();
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(5610);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) linkedList2);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode2);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "seeming";
      stringArray0[2] = "seeming";
      stringArray0[3] = "seeming";
      stringArray0[4] = "seeming";
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      jRip_RipperRule0.hasAntds();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("seeming");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // seeming not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      properties0.propertyNames();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.add("smq.XjoMvi7Ej");
      Attribute attribute0 = new Attribute("8TF", linkedList1, protectedProperties0);
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals("8118", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale locale0 = Locale.TAIWAN;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      arrayList0.containsAll(list0);
      arrayList1.add(locale0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale locale1 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale2 = Locale.CHINESE;
      locale2.getUnicodeLocaleKeys();
      List<Locale> list2 = new ArrayList<Locale>();
      linkedList1.clear();
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(5610);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) linkedList2);
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode1);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "seeming";
      stringArray0[2] = "seeming";
      stringArray0[3] = "seeming";
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd((Attribute) null);
      String string0 = jRip_NumericAntd0.getRevision();
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertEquals(2, jRip1.getOptimizations());
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      Locale locale0 = Locale.TAIWAN;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) linkedList0);
      arrayList0.containsAll(list0);
      arrayList1.add(locale0);
      List<Locale> list1 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list1, locale_FilteringMode0);
      Locale locale1 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale locale2 = Locale.CHINESE;
      locale2.getUnicodeLocaleKeys();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      linkedList1.clear();
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(5610);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) linkedList2);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode2);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "seeming";
      stringArray0[2] = "seeming";
      stringArray0[3] = "seeming";
      JRip jRip0 = new JRip();
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd((Attribute) null);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertFalse(jRip1.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("8118", string0);
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8720520186532996
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("Set splitting criterion based on the residuals of LogitBoost. There are two possible splitting criteria for LMT: the default is to use the C4.5 splitting criterion that uses information gain on the class variable. The other splitting criterion tries to improve the purity in the residuals produces when fitting the logistic regression functions. The choice of the splitting criterion does not usually affect classification accuracy much, but can produce different trees.", arrayList0, 1393);
      jRip0.setUsePruning(false);
      try { 
        jRip0.rulesetForOneClass(1718.0, instances0, 1718.0, 1.0E-12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      Locale locale0 = new Locale("D");
      // Undeclared exception!
      try { 
        jRip0.getMeasure("measureNumRules");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.ITALIAN;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      arrayList1.trimToSize();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode0);
      locale0.getUnicodeLocaleAttributes();
      locale0.getExtension('l');
      locale0.getUnicodeLocaleKeys();
      Locale locale1 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale locale2 = Locale.CHINESE;
      locale2.getUnicodeLocaleKeys();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      locale2.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(5610);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("seeming");
      linkedList1.add(locale_LanguageRange0);
      Locale.filter((List<Locale.LanguageRange>) linkedList4, (Collection<Locale>) linkedList2);
      Locale.FilteringMode locale_FilteringMode2 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode2);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[5];
      stringArray0[3] = "seeming";
      stringArray0[1] = "seeming";
      stringArray0[2] = "seeming";
      stringArray0[3] = "seeming";
      stringArray0[4] = "seeming";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.0800261477282183
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      Object object0 = protectedProperties6.clone();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = 103.0;
      SparseInstance sparseInstance0 = new SparseInstance((-482.8573380743933), doubleArray0);
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      Attribute attribute0 = new Attribute("fY/", 3057);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      Object object1 = jRip_NominalAntd0.copy();
      protectedProperties1.remove(object1, (Object) "fY/");
      // Undeclared exception!
      try { 
        protectedProperties1.put(object0, sparseInstance0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // ProtectedProperties cannot be modified!
         //
         verifyException("weka.core.ProtectedProperties", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      protectedProperties5.values();
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties5.forEach(biConsumer0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      protectedProperties7.entrySet();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-1768);
      doubleArray0[1] = Double.NaN;
      doubleArray0[4] = Double.NaN;
      protectedProperties2.keySet();
      SparseInstance sparseInstance0 = new SparseInstance((-1768), doubleArray0);
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      properties0.entrySet();
      BiConsumer<Object, Object> biConsumer1 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties0.forEach(biConsumer1);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties3);
      Utils.SMALL = 2659.80327546;
      Attribute attribute0 = new Attribute("", "", protectedProperties7);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(" => =", string0);
      
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd0.toString();
      assertEquals(" = ", string1);
      
      boolean boolean0 = jRip_NominalAntd0.covers(sparseInstance0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(boolean0);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties2.clone();
      Properties properties1 = new Properties();
      protectedProperties5.stringPropertyNames();
      properties1.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties17);
      protectedProperties15.clone();
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties17);
      Random.setNextRandom((-2147041977));
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(">;KZc#fx", linkedList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(1569.11566465295);
      jRip_RipperRule0.hasAntds();
      int int0 = (-484);
      int[] intArray0 = new int[4];
      intArray0[0] = (-1610);
      intArray0[1] = (-22);
      intArray0[2] = 2099761789;
      intArray0[3] = (-22);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray1 = new int[3];
      intArray1[0] = 2099761789;
      intArray1[1] = (-484);
      intArray1[2] = (-22);
      principalComponents0.postProcess(intArray1);
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      SelectedTag selectedTag0 = decisionTable0.getEvaluationMeasure();
      decisionTable0.setEvaluationMeasure(selectedTag0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.hasAntds();
      Instances instances1 = decisionTable0.m_dtInstances;
      int int0 = 2385;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(2385);
      SparseInstance sparseInstance0 = new SparseInstance(3);
      LinearNNSearch linearNNSearch0 = new LinearNNSearch((Instances) null);
      LinearNNSearch linearNNSearch1 = new LinearNNSearch();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      LinearNNSearch linearNNSearch2 = new LinearNNSearch((Instances) null);
      int int1 = 4;
      int[] intArray0 = null;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-750.077045), (int[]) null, 5);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue((-198));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.048820325203473
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(297.0);
      jRip_RipperRule0.copy();
      jRip_RipperRule0.getRevision();
      Attribute attribute0 = new Attribute("<uOr8Zq\"-7Pv", "8118");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.maxInfoGain = (double) 2;
      jRip_NumericAntd0.getSplitPoint();
      attribute0.indexOfValue("po]o0`_+kvV@^bfS^");
      jRip0.getRevision();
      jRip_NumericAntd0.getAttr();
      jRip_NumericAntd0.getAccuRate();
      jRip0.setUsePruning(false);
      int[] intArray0 = new int[0];
      ClassOrder classOrder0 = new ClassOrder();
      // Undeclared exception!
      try { 
        classOrder0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(true);
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, double0, 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties2.clone();
      Properties properties1 = new Properties();
      properties1.keys();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties10);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties17 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties17);
      protectedProperties15.clone();
      ProtectedProperties protectedProperties19 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties17);
      JRip jRip0 = new JRip();
      Random.setNextRandom((-2147041977));
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      double double0 = jRip0.getMinNo();
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, double0, 0.01);
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances((String) null, arrayList0, 102);
      Attribute attribute0 = new Attribute("@data", 102);
      Attribute attribute1 = new Attribute("integer", 0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      attribute0.indexOfValue("#MLAd<5:s");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute1);
      jRip_NumericAntd0.splitData(instances0, 1, 0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[4] = 0;
      Attribute attribute2 = new Attribute("date", 1);
      double[] doubleArray0 = new double[8];
      String[] stringArray0 = new String[8];
      stringArray0[0] = "relational";
      stringArray0[1] = "string";
      stringArray0[2] = "relational";
      stringArray0[3] = null;
      stringArray0[4] = "date";
      Attribute.main(stringArray0);
      doubleArray0[1] = (double) 0;
      String[] stringArray1 = new String[9];
      stringArray1[0] = "@end";
      Attribute.typeToString(attribute2);
      stringArray1[1] = "string";
      stringArray1[2] = "@attribute";
      stringArray1[3] = "relational";
      stringArray1[4] = null;
      stringArray1[5] = "@attribute";
      stringArray1[6] = "date";
      stringArray1[7] = "string";
      stringArray1[8] = "@end";
      Instances.main(stringArray1);
      Attribute attribute3 = new Attribute(".bsi", 0);
      assertFalse(attribute3.isRelationValued());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.80276727550424
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule3 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      JRip.RipperRule jRip_RipperRule4 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule4.toString((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      byte[] byteArray0 = new byte[1];
      jRip_RipperRule0.copy();
      byteArray0[0] = (byte)6;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip_RipperRule0.hasAntds();
      int[] intArray0 = new int[4];
      intArray0[0] = (-1629);
      intArray0[1] = (-45);
      intArray0[2] = 2;
      intArray0[3] = (-45);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(64.0, intArray0, (-484));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(6);
      jRip0.debugTipText();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((-4626.423491450579), intArray0, (-11));
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance(2, intArray0, (-1629));
      // Undeclared exception!
      try { 
        binarySparseInstance3.stringValue((-45));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      SystemInUtil.addInputLine("\tOutput synopsis for classifier (use in conjunction  with -h)\n");
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties1.keys();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      protectedProperties6.clone();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      CoverTree coverTree0 = new CoverTree();
      FileSystemHandling.shouldAllThrowIOExceptions();
      coverTree0.setOptions((String[]) null);
      SGDText sGDText0 = new SGDText();
      sGDText0.setSeed((-111));
      coverTree0.setMeasurePerformance(false);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      principalComponents0.setTransformBackToOriginal(false);
      PrincipalComponents principalComponents1 = new PrincipalComponents();
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      JRip jRip0 = new JRip();
      jRip0.setOptimizations(41);
      jRip0.setOptions((String[]) null);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.CHINESE;
      Locale.Category locale_Category0 = Locale.Category.FORMAT;
      Locale.setDefault(locale_Category0, locale1);
      locale1.getUnicodeLocaleKeys();
      Locale locale2 = Locale.TAIWAN;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      locale3.getDisplayCountry();
      locale0.getDisplayCountry(locale1);
      locale0.getDisplayName();
      locale3.toLanguageTag();
      locale3.clone();
      Locale locale4 = Locale.JAPAN;
      locale0.getDisplayVariant();
      Locale.getISOLanguages();
      Locale locale5 = Locale.JAPAN;
      locale2.getDisplayVariant();
      Locale.getISOLanguages();
      locale3.getDisplayScript(locale3);
      Locale locale6 = Locale.ITALY;
      Locale locale7 = Locale.FRENCH;
      locale7.getDisplayVariant(locale6);
      locale7.getDisplayLanguage();
      LinkedList<Locale> linkedList0 = new LinkedList<Locale>();
      Locale locale8 = Locale.TRADITIONAL_CHINESE;
      Locale locale9 = Locale.TAIWAN;
      SystemInUtil.addInputLine("");
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.0761045791007673
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      int int0 = (-1768);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties2.clone();
      Properties properties1 = new Properties();
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute(" def. accuracy: ", linkedList0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      Object object0 = jRip_NumericAntd0.copy();
      properties1.put(protectedProperties3, object0);
      ProtectedProperties protectedProperties7 = null;
      try {
        protectedProperties7 = new ProtectedProperties(properties1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.JAPANESE;
      locale1.getUnicodeLocaleAttributes();
      Locale locale2 = Locale.TAIWAN;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      locale3.toLanguageTag();
      Locale locale4 = Locale.JAPAN;
      locale0.getDisplayVariant();
      Locale.getISOLanguages();
      locale0.getDisplayScript(locale4);
      locale4.getUnicodeLocaleKeys();
      Locale locale5 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale6 = Locale.CHINESE;
      Locale locale7 = Locale.TAIWAN;
      Locale.lookup(linkedList1, linkedList2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      linkedList2.removeIf(predicate0);
      UnaryOperator<Locale> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator<Locale.LanguageRange> unaryOperator1 = UnaryOperator.identity();
      linkedList1.replaceAll(unaryOperator1);
      linkedList2.replaceAll(unaryOperator0);
      linkedList1.add((Locale.LanguageRange) null);
      Locale locale8 = Locale.TRADITIONAL_CHINESE;
      locale8.getUnicodeLocaleKeys();
      locale5.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(6);
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      Attribute attribute0 = new Attribute("]r0S]6RTyt_^%+]", "");
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.copy();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(false);
      jRip0.getRevision();
      jRip0.getCheckErrorRate();
      CostMatrix costMatrix0 = null;
      try {
        costMatrix0 = new CostMatrix((-2736));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.CostMatrix", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      SelectedTag selectedTag0 = decisionTable0.getEvaluationMeasure();
      decisionTable0.setEvaluationMeasure(selectedTag0);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.getCheckErrorRate();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      try { 
        inputMappedClassifier0.constructMappedInstance(binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.misc.InputMappedClassifier", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      ArrayList<Locale> arrayList1 = new ArrayList<Locale>();
      List<Locale> list0 = Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) arrayList1);
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Locale.filter((List<Locale.LanguageRange>) arrayList0, (Collection<Locale>) list0, locale_FilteringMode0);
      Locale locale0 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      Locale locale1 = Locale.CHINESE;
      locale1.getUnicodeLocaleKeys();
      Locale.filter((List<Locale.LanguageRange>) linkedList1, (Collection<Locale>) linkedList2, locale_FilteringMode1);
      linkedList1.clear();
      locale1.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList2 = new ArrayList<Locale.LanguageRange>(5610);
      LinkedList<Locale.LanguageRange> linkedList3 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale.LanguageRange> linkedList4 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) linkedList0, locale_FilteringMode1);
      ArrayList<String> arrayList3 = new ArrayList<String>();
      LinkedList<Locale.LanguageRange> linkedList5 = new LinkedList<Locale.LanguageRange>();
      String[] stringArray0 = new String[5];
      stringArray0[1] = "seeming";
      stringArray0[2] = "seeming";
      stringArray0[3] = "seeming";
      stringArray0[4] = "seeming";
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(1L, jRip0.getSeed());
      assertFalse(boolean0);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      protectedProperties5.propertyNames();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      int int0 = jRip0.getFolds();
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(3, int0);
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JRip jRip0 = new JRip();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("tY!F:q->", arrayList0, 47);
      Utils.SMALL = (-1512.71266400813);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = 1742.884793885;
      doubleArray0[1] = 1147.61696467149;
      doubleArray0[2] = (-1512.71266400813);
      doubleArray0[3] = 1742.884793885;
      doubleArray0[4] = 1742.884793885;
      doubleArray0[5] = (-1512.71266400813);
      doubleArray0[6] = 1722.61;
      doubleArray0[7] = Double.NaN;
      doubleArray0[8] = 1147.61696467149;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1.0), doubleArray0);
      BallNode ballNode0 = new BallNode(47, 85, 85, binarySparseInstance0, 1742.884793885);
      Instance instance0 = BallNode.calcPivot(ballNode0, ballNode0, instances0);
      instances0.add(instance0);
      try { 
        jRip0.rulesetForOneClass(1147.61696467149, instances0, 1147.61696467149, 1742.884793885);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      Random.setNextRandom((-1768));
      JRip jRip0 = new JRip();
      jRip0.setMinNo(4.94E-321);
      jRip0.minNoTipText();
      assertEquals(4.94E-321, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Locale locale0 = Locale.FRANCE;
      Locale locale1 = Locale.JAPANESE;
      locale1.getUnicodeLocaleAttributes();
      Locale locale2 = Locale.TAIWAN;
      Locale locale3 = Locale.SIMPLIFIED_CHINESE;
      locale3.toLanguageTag();
      Locale locale4 = Locale.JAPAN;
      locale0.getDisplayVariant();
      String[] stringArray0 = Locale.getISOLanguages();
      locale0.getDisplayScript(locale4);
      locale4.getUnicodeLocaleKeys();
      Locale locale5 = Locale.UK;
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      LinkedList<Locale> linkedList2 = new LinkedList<Locale>();
      Locale locale6 = Locale.CHINESE;
      Locale locale7 = Locale.TAIWAN;
      Locale.lookup(linkedList1, linkedList2);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      linkedList2.removeIf(predicate0);
      UnaryOperator<Locale> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      linkedList2.replaceAll(unaryOperator0);
      linkedList1.add((Locale.LanguageRange) null);
      Locale locale8 = Locale.TRADITIONAL_CHINESE;
      locale8.getUnicodeLocaleKeys();
      locale5.getUnicodeLocaleAttributes();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>(6);
      JRip jRip0 = new JRip();
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      ClassOrder classOrder0 = new ClassOrder();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.foldsTipText();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip0.minNoTipText();
      jRip0.seedTipText();
      jRip0.usePruningTipText();
      jRip_NumericAntd0.getSplitPoint();
      jRip_NumericAntd0.getMaxInfoGain();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "relational";
      stringArray0[1] = "@attribute";
      stringArray0[2] = "integer";
      stringArray0[3] = "real";
      stringArray0[4] = "numeric";
      stringArray0[5] = "integer";
      stringArray0[6] = "(]7,18]%rt`4K";
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      DenseInstance denseInstance0 = null;
      try {
        denseInstance0 = new DenseInstance(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      AlphabeticTokenizer alphabeticTokenizer0 = new AlphabeticTokenizer();
      Locale locale0 = new Locale("E|N0");
      Locale locale1 = Locale.ROOT;
      Locale locale2 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale locale3 = Locale.ROOT;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      Locale.FilteringMode locale_FilteringMode1 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode1);
      Attribute attribute0 = new Attribute("E|N0", list0, (-47));
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("E|N0 <= NaN", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      MockFile mockFile0 = new MockFile("5m$On|`H^;N+`'");
      MockFile mockFile1 = new MockFile("5m$On|`H^;N+`'");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      protectedProperties2.store((Writer) mockPrintWriter0, "5m$On|`H^;N+`'");
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 992.0414;
      DataInputStream dataInputStream0 = new DataInputStream((InputStream) null);
      BiFunction<Object, Object, Instance> biFunction0 = (BiFunction<Object, Object, Instance>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties4.computeIfPresent(dataInputStream0, biFunction0);
      doubleArray0[1] = Double.NaN;
      doubleArray0[3] = 992.0414;
      SparseInstance sparseInstance0 = new SparseInstance(0.3, doubleArray0);
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      properties1.put("5m$On|`H^;N+`'", "5m$On|`H^;N+`'");
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("5m$On|`H^;N+`'", protectedProperties7);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals("5m$On|`H^;N+`' <= NaN", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      MockFile mockFile0 = new MockFile("ance", "ance");
      MockFile mockFile1 = new MockFile("ance");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile1);
      protectedProperties3.store((Writer) mockPrintWriter0, "pD,%$ V^|s");
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties3);
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 992.0414;
      doubleArray0[1] = Double.NaN;
      doubleArray0[3] = 992.0414;
      SparseInstance sparseInstance0 = new SparseInstance(0.3, doubleArray0);
      JRip jRip0 = new JRip();
      ClassOrder classOrder0 = new ClassOrder();
      properties1.put("Ludmila I. Kuncheva", "Ludmila I. Kuncheva");
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("Ludmila I. Kuncheva", protectedProperties9);
      attribute0.setWeight(992.0414);
      System.setCurrentTimeMillis(2);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals("Ludmila I. Kuncheva <= NaN", string0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JRip jRip0 = new JRip();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1676);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      SelectedTag selectedTag0 = new SelectedTag(4, decisionTable0.TAGS_EVALUATION);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.setConsequent(3001.2110838);
      DecisionTable decisionTable1 = new DecisionTable();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "a");
      jRip0.getUsePruning();
      Instances instances0 = decisionTable0.m_theInstances;
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      jRip_RipperRule0.size();
      decisionTable3.getEvaluationMeasure();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)6;
      byteArray0[1] = (byte) (-100);
      byteArray0[2] = (byte)69;
      byteArray0[3] = (byte)107;
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte)74;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         //  not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.8212565066006587
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      protectedProperties5.clone();
      Properties properties1 = new Properties();
      double[] doubleArray0 = new double[4];
      protectedProperties0.keySet();
      doubleArray0[0] = 0.5;
      doubleArray0[1] = 0.5;
      doubleArray0[3] = 1.7976931348623157E308;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0);
      JRip jRip0 = new JRip();
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, true);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties0);
      protectedProperties8.list((PrintStream) mockPrintStream0);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties0);
      BiFunction<Object, Object, ClassOrder> biFunction0 = (BiFunction<Object, Object, ClassOrder>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties10.replaceAll(biFunction0);
      BiConsumer<Object, Object> biConsumer0 = (BiConsumer<Object, Object>) mock(BiConsumer.class, new ViolatedAssumptionAnswer());
      protectedProperties4.forEach(biConsumer0);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute((String) null, protectedProperties3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip0.getOptions();
      System.setCurrentTimeMillis(0L);
  }
}
