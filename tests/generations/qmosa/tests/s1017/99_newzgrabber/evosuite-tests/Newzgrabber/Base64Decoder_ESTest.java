/*
 * This file was automatically generated by EvoSuite
 * Mon Nov 18 14:28:57 GMT 2019
 */

package Newzgrabber;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import Newzgrabber.Base64Decoder;
import Newzgrabber.BufferedCustomInputStream;
import Newzgrabber.Newzgrabber;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataOutputStream;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PrintStream;
import java.io.UnsupportedEncodingException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.Vector;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import javax.swing.DebugGraphics;
import javax.swing.JLayeredPane;
import javax.swing.event.RowSorterEvent;
import javax.swing.table.DefaultTableModel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Base64Decoder_ESTest extends Base64Decoder_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5461447460085638
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)47;
      byteArray0[3] = (byte)47;
      byteArray0[4] = (byte)47;
      byteArray0[5] = (byte)47;
      byteArray0[6] = (byte)10;
      byteArray0[0] = (byte)47;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(printStream0);
      UnaryOperator<RowSorterEvent.Type> unaryOperator0 = UnaryOperator.identity();
      Function<Object, RowSorterEvent.Type> function0 = (Function<Object, RowSorterEvent.Type>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, RowSorterEvent.Type> function1 = unaryOperator0.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function0);
      Function<Object, RowSorterEvent.Type> function2 = unaryOperator0.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function1);
      Function<Object, RowSorterEvent.Type> function3 = unaryOperator0.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function2);
      UnaryOperator<RowSorterEvent.Type> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<RowSorterEvent.Type> unaryOperator2 = UnaryOperator.identity();
      Function<Object, RowSorterEvent.Type> function4 = unaryOperator2.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function2);
      unaryOperator1.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function3);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, Object> function5 = unaryOperator3.compose((Function<? super Object, ?>) function2);
      unaryOperator3.andThen((Function<? super Object, ?>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function4);
      Object object0 = new Object();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      Properties properties0 = new Properties();
      Locale locale0 = Locale.CHINESE;
      Object object1 = new Object();
      Vector<RowSorterEvent.Type> vector0 = new Vector<RowSorterEvent.Type>();
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      Object object2 = new Object();
      Newzgrabber.main((String[]) null);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream1);
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.5584105701317909
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream1 = new BufferedCustomInputStream(bufferedCustomInputStream0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Object object0 = new Object();
      Object object1 = new Object();
      unaryOperator0.apply(object1);
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Newzgrabber.Base64Decoder";
      stringArray0[1] = "zWE|yO+p9&[Vn";
      stringArray0[2] = "VG]372";
      Newzgrabber.main(stringArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "zWE|yO+p9&[Vn");
      Newzgrabber.main(stringArray0);
      BufferedCustomInputStream bufferedCustomInputStream2 = new BufferedCustomInputStream(bufferedCustomInputStream0, false);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      BufferedCustomInputStream bufferedCustomInputStream3 = new BufferedCustomInputStream(byteArrayInputStream2, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream3, pipedOutputStream0);
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5785663521818436
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)45;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)45;
      byteArray0[6] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      DataOutputStream dataOutputStream2 = new DataOutputStream(printStream0);
      dataOutputStream0.write((int) (byte)45);
      DataOutputStream dataOutputStream3 = new DataOutputStream(printStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream3);
      dataOutputStream1.close();
      DataOutputStream dataOutputStream4 = new DataOutputStream(filterOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream4);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, filterOutputStream0);
      base64Decoder0.setLineCount((-2384L));
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals((-2382L), base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=0.6045403781558696
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)49;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(printStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      DataOutputStream dataOutputStream2 = new DataOutputStream(filterOutputStream0);
      DataOutputStream dataOutputStream3 = new DataOutputStream(printStream0);
      dataOutputStream3.writeChars("*&Z");
      dataOutputStream0.write((int) (byte)49);
      dataOutputStream1.writeInt((byte)49);
      DataOutputStream dataOutputStream4 = new DataOutputStream(filterOutputStream0);
      dataOutputStream4.writeFloat(3206.0F);
      dataOutputStream2.writeBoolean(true);
      dataOutputStream2.writeUTF("*&Z");
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(dataOutputStream4);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream0);
      base64Decoder0.setLineCount((byte)49);
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, filterOutputStream1);
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(51L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.5915950580657945
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)73;
      byteArray0[3] = (byte)73;
      byteArray0[4] = (byte)73;
      byteArray0[5] = (byte)73;
      byteArray0[6] = (byte)10;
      byteArray0[0] = (byte)73;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(printStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      String[] stringArray0 = new String[9];
      DebugGraphics.logStream();
      DataOutputStream dataOutputStream2 = new DataOutputStream(filterOutputStream0);
      DataOutputStream dataOutputStream3 = new DataOutputStream(dataOutputStream2);
      dataOutputStream1.write((int) (byte)73);
      DataOutputStream dataOutputStream4 = new DataOutputStream(dataOutputStream0);
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(dataOutputStream3);
      dataOutputStream4.writeByte((byte)73);
      dataOutputStream4.close();
      DataOutputStream dataOutputStream5 = new DataOutputStream(dataOutputStream4);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream1);
      Newzgrabber.main((String[]) null);
      Newzgrabber.main(stringArray0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream3);
      base64Decoder0.ProgressSet = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.6176496511936216
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " BYTE:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " BYTE:");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " BYTE:");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)60;
      byteArray0[4] = (byte)10;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " BYTE:";
      stringArray0[1] = ".";
      stringArray0[2] = " BYTE:";
      stringArray0[3] = " BYTE:";
      Newzgrabber.main(stringArray0);
      Newzgrabber.main(stringArray0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder0.updateProgress();
      base64Decoder0.ABORT = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(0L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.5326914208398718
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-94);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      byteArray0[0] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      dataOutputStream0.writeFloat((byte)49);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(printStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, bufferedOutputStream0);
      base64Decoder0.decodeStream();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(".", true);
      mockFileOutputStream0.write(byteArray0);
      mockFileOutputStream0.getChannel();
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(".");
      MockPrintStream mockPrintStream1 = null;
      try {
        mockPrintStream1 = new MockPrintStream(".", ".");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // .
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.5326914208398718
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)107;
      byteArray0[2] = (byte) (-94);
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)49;
      byteArray0[6] = (byte)49;
      byteArray0[7] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(dataOutputStream0);
      dataOutputStream1.writeFloat(0.0F);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(dataOutputStream0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(dataOutputStream0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder0.decodeStream();
      Newzgrabber.main((String[]) null);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.7154074116275893
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      byteArray0[6] = (byte) (-31);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(printStream0, true);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockPrintStream0);
      Newzgrabber.IsBatch = true;
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(0L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.6300157137504994
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)75;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)0;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)49;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.setBegin(false);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      Base64Decoder base64Decoder1 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder0.setBegin(false);
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      base64Decoder1.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      PrintStream printStream0 = DebugGraphics.logStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(printStream0);
      DataOutputStream dataOutputStream1 = new DataOutputStream(printStream0);
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(printStream0);
      String[] stringArray0 = new String[9];
      DebugGraphics.logStream();
      DataOutputStream dataOutputStream2 = new DataOutputStream(filterOutputStream0);
      DataOutputStream dataOutputStream3 = new DataOutputStream(filterOutputStream0);
      DataOutputStream dataOutputStream4 = new DataOutputStream(dataOutputStream3);
      dataOutputStream2.write((int) (byte)49);
      DataOutputStream dataOutputStream5 = new DataOutputStream(dataOutputStream2);
      FilterOutputStream filterOutputStream1 = new FilterOutputStream(dataOutputStream4);
      dataOutputStream5.writeByte((byte)49);
      dataOutputStream5.close();
      DataOutputStream dataOutputStream6 = new DataOutputStream(dataOutputStream5);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(filterOutputStream1);
      Newzgrabber.main(stringArray0);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)49;
      byteArray0[2] = (byte)49;
      byteArray0[3] = (byte)49;
      byteArray0[4] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, 1332, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, dataOutputStream1);
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.5747161745799924
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)49;
      byteArray0[1] = (byte)62;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte)10;
      byteArray0[7] = (byte)49;
      Object object0 = new Object();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("#%@r5?j^U5B", false);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<RowSorterEvent.Type> unaryOperator1 = UnaryOperator.identity();
      Function<Object, RowSorterEvent.Type> function0 = (Function<Object, RowSorterEvent.Type>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, RowSorterEvent.Type> function1 = unaryOperator1.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function0);
      unaryOperator1.compose((Function<? super String, ? extends RowSorterEvent.Type>) function1);
      Function<Object, RowSorterEvent.Type> function2 = (Function<Object, RowSorterEvent.Type>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function2).apply(any());
      Function<Object, RowSorterEvent.Type> function3 = unaryOperator1.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function2);
      Function<Object, RowSorterEvent.Type> function4 = unaryOperator1.compose((Function<? super Object, ? extends RowSorterEvent.Type>) function3);
      unaryOperator0.andThen((Function<? super Object, ?>) function3);
      Object object1 = new Object();
      Function<Object, InputStream> function5 = (Function<Object, InputStream>) mock(Function.class, new ViolatedAssumptionAnswer());
      function4.andThen((Function<? super RowSorterEvent.Type, ? extends InputStream>) function5);
      RowSorterEvent.Type rowSorterEvent_Type1 = RowSorterEvent.Type.SORTED;
      properties0.computeIfAbsent(function3, function4);
      Properties properties1 = new Properties();
      properties1.stringPropertyNames();
      byteArrayInputStream0.reset();
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0, false);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, mockFileOutputStream0);
      base64Decoder0.decodeStream();
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      byteArray0[0] = (byte)10;
      byteArray0[4] = (byte)10;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.shouldAllThrowIOExceptions();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      String[] stringArray0 = new String[14];
      stringArray0[0] = "\u0000\u0004\u0000\u0000";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      Newzgrabber.main(stringArray0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder0.decodeStream();
      assertEquals(2L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.6868359830561608
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "8b}GflVGKM%qv;S'@Y";
      objectArray0[0] = (Object) locale0;
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Properties properties0 = new Properties();
      RowSorterEvent.Type rowSorterEvent_Type0 = RowSorterEvent.Type.SORTED;
      Integer integer0 = JLayeredPane.MODAL_LAYER;
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Object object2 = new Object();
      unaryOperator0.apply(object2);
      Function<Object, Object> function1 = unaryOperator0.andThen((Function<? super Object, ?>) function0);
      properties0.computeIfAbsent(integer0, function1);
      Set<String> set0 = properties0.stringPropertyNames();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, (OutputStream) null);
      Newzgrabber.verbose = true;
      base64Decoder0.decodeStream();
      assertEquals(4L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.5788449127168476
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " BYTE:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " BYTE:");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " BYTE:");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      byte[] byteArray0 = new byte[10];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte)60;
      byteArray0[4] = (byte)10;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      String[] stringArray0 = new String[4];
      stringArray0[0] = " BYTE:";
      stringArray0[1] = ".";
      stringArray0[2] = " BYTE:";
      stringArray0[3] = " BYTE:";
      Newzgrabber.main(stringArray0);
      Newzgrabber.main(stringArray0);
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.5788449127168476
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-124);
      byteArray0[1] = (byte) (-31);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, ".");
      byte[] byteArray1 = new byte[10];
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "\u0000\u0000\u0000");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      byteArray1[0] = (byte)60;
      byteArray1[4] = (byte)10;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray1);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      BufferedCustomInputStream bufferedCustomInputStream0 = new BufferedCustomInputStream(byteArrayInputStream0);
      PrintStream printStream0 = DebugGraphics.logStream();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "\u0000\u0000\u0000");
      Base64Decoder base64Decoder0 = new Base64Decoder(bufferedCustomInputStream0, printStream0);
      base64Decoder0.decodeStream();
      assertEquals(1L, base64Decoder0.getLineCount());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      byte[] byteArray0 = new byte[5];
      Locale locale0 = Locale.ROOT;
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[2] = (Object) "";
      objectArray0[3] = (Object) locale0;
      objectArray0[4] = (Object) locale0;
      Object object1 = new Object();
      objectArray0[5] = object1;
      objectArray0[6] = (Object) "8b}GflVGKM%qv;S'@Y";
      objectArray0[0] = (Object) locale0;
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)10;
      byteArray0[2] = (byte)45;
      byteArray0[3] = (byte)10;
      byteArray0[4] = (byte)10;
      String[] stringArray0 = new String[1];
      stringArray0[0] = ")/wG,h:9a6/QY&";
      Newzgrabber.main(stringArray0);
      Newzgrabber.main(stringArray0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("/Ua~Y");
      Base64Decoder base64Decoder0 = new Base64Decoder((BufferedCustomInputStream) null, mockPrintStream0);
      // Undeclared exception!
      try { 
        base64Decoder0.decodeStream();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("Newzgrabber.Base64Decoder", e);
      }
  }
}
