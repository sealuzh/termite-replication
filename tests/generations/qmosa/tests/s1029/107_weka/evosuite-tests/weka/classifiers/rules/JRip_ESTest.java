/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:04:01 GMT 2019
 */

package weka.classifiers.rules;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.util.ArrayList;
import java.util.BitSet;
import java.util.Collection;
import java.util.Comparator;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Properties;
import java.util.Set;
import java.util.function.BiFunction;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.ASSearch;
import weka.attributeSelection.BestFirst;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Evaluation;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.SGDText;
import weka.classifiers.lazy.IBk;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.misc.InputMappedClassifier;
import weka.classifiers.rules.DecisionTable;
import weka.classifiers.rules.JRip;
import weka.classifiers.rules.RuleStats;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.ProtectedProperties;
import weka.core.SparseInstance;
import weka.core.Utils;
import weka.core.neighboursearch.balltrees.BottomUpConstructor;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.MultiFilter;
import weka.filters.supervised.attribute.ClassOrder;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JRip_ESTest extends JRip_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.209406559005219
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[16];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "@h4n-~T5X@6^7 ");
      doubleArray0[0] = 3991.0;
      doubleArray0[6] = 3991.0;
      doubleArray0[4] = 3991.0;
      doubleArray0[5] = 3991.0;
      doubleArray0[6] = 3991.0;
      SparseInstance sparseInstance0 = new SparseInstance(3991.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(3991.0, doubleArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance1);
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-F", arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.maxInfoGain = (-0.4375);
      jRip_NominalAntd0.value = (double) 3;
      jRip_NominalAntd0.covers(sparseInstance2);
      String[] stringArray0 = new String[5];
      stringArray0[1] = "";
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.graph();
      BayesNet bayesNet1 = new BayesNet();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.1425230615188013
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      jRip0.globalInfo();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.setMinNo((byte)0);
      jRip0.getTechnicalInformation();
      jRip0.globalInfo();
      jRip0.getMinNo();
      jRip0.minNoTipText();
      jRip0.getOptions();
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.6820748660026672
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = ".)U'5aqw%4bBz4;6-";
      AbstractClassifier.makeCopy(jRip0);
      stringArray0[1] = "<.8W";
      jRip0.setMinNo(4132.8843434);
      stringArray0[2] = "    Threshold    ";
      stringArray0[3] = "&xLpK$Xk(";
      stringArray0[4] = "-E";
      stringArray0[5] = "weka.classifiers.rules.JRip";
      stringArray0[6] = " }\n  }\n}\n";
      stringArray0[7] = "Weight nearest neighbours by their distance.";
      jRip0.setOptions(stringArray0);
      jRip0.foldsTipText();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" EZ", arrayList0, 67);
      MultiFilter multiFilter0 = new MultiFilter();
      // Undeclared exception!
      try { 
        multiFilter0.getFilter(67);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 67
         //
         verifyException("weka.filters.MultiFilter", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.9860493313089678
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3611.4425512130915);
      doubleArray0[1] = (-3611.4425512130915);
      doubleArray0[4] = 68.51931678;
      SparseInstance sparseInstance0 = new SparseInstance((-3611.4425512130915), doubleArray0);
      Attribute attribute0 = new Attribute("\nAr}ray: ");
      sparseInstance0.setMissing(attribute0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.value = (-2135.288317);
      jRip_NumericAntd0.covers(sparseInstance0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      bayesNet2.setBIFFile("Line ");
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      MockRandom mockRandom0 = new MockRandom();
      jRip0.getOptions();
      try { 
        jRip0.rulesetForOneClass((-1083.3228), (Instances) null, 4, (-3573.8955));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.5280883009539779
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3611.4425512130915);
      doubleArray0[1] = (-3611.4425512130915);
      doubleArray0[4] = 68.51931678;
      SparseInstance sparseInstance0 = new SparseInstance((-3611.4425512130915), doubleArray0);
      Attribute attribute0 = new Attribute("\nArray: ");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      jRip_NumericAntd0.value = (double) 3;
      jRip_NumericAntd0.covers(sparseInstance0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.toStringNoWeight(2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties2);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      protectedProperties5.values();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.add(attribute0);
      Instances instances0 = new Instances(" not supported (M5)", arrayList0, 0);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.classifiers.rules.JRip: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.elements();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties2);
      protectedProperties6.values();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      Properties properties3 = new Properties();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList0, 2529);
      Attribute attribute0 = new Attribute("@data", instances0, (-2214));
      Attribute attribute1 = attribute0.copy("+\"!5]_ds");
      arrayList0.add(attribute1);
      JRip jRip0 = new JRip();
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: Cannot handle relational attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 1131;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.385344487867632, intArray0, 1131);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1131;
      doubleArray0[1] = (double) (-2142);
      Locale locale0 = Locale.US;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("", arrayList1, 1131);
      instances0.add((Instance) binarySparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(1956.49221, doubleArray0);
      instances0.add((Instance) binarySparseInstance0);
      JRip jRip1 = new JRip();
      instances0.add((Instance) binarySparseInstance0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("ZU&({Kn?rv4", 1131);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 121.0, 1085.603167888759);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.rules.JRip$NominalAntd", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.939792811164566
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getCapabilities();
      jRip0.setSeed((-601L));
      jRip0.seedTipText();
      jRip0.checkErrorRateTipText();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Whether check for error rate >= 1/2 is included in stopping criterion.");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Utils.SMALL = 1749.3404;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      jRip0.setDebug(true);
      jRip0.getTechnicalInformation();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      jRip0.debugTipText();
      jRip0.checkErrorRateTipText();
      jRip0.getFolds();
      jRip0.getDebug();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = 1749.3404;
      doubleArray0[1] = (double) 3;
      doubleArray0[2] = 1749.3404;
      doubleArray0[3] = 1749.3404;
      doubleArray0[4] = (double) 3;
      doubleArray0[5] = 1749.3404;
      doubleArray0[6] = (double) (-601L);
      doubleArray0[7] = (double) 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1749.3404, doubleArray0);
      // Undeclared exception!
      try { 
        binarySparseInstance0.classAttribute();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JRip jRip0 = new JRip();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)0;
      byteArray0[3] = (byte) (-6);
      byteArray0[4] = (byte)0;
      byteArray0[5] = (byte) (-119);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      jRip0.setMinNo((-1345.16942236122));
      jRip0.getTechnicalInformation();
      jRip0.globalInfo();
      jRip0.getMinNo();
      jRip0.minNoTipText();
      assertEquals((-1345.16942236122), jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.2016137951617383
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = false;
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      jRip0.getOptions();
      decisionTable0.resetOptions();
      Instances instances0 = decisionTable0.m_dtInstances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 5);
      jRip0.listOptions();
      try { 
        jRip0.rulesetForOneClass(2, instances1, 4, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-17);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "bb%u=");
      byteArray0[1] = (byte)11;
      byteArray0[2] = (byte) (-128);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      JRip jRip0 = new JRip();
      jRip0.setFolds((byte) (-128));
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.hasAntds();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jRip_RipperRule0.hasAntds();
      jRip0.getSeed();
      jRip0.listOptions();
      jRip0.usePruningTipText();
      jRip0.getFolds();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedHeader();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5179872908529677
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.elements();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.propertyNames();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      protectedProperties3.keys();
      protectedProperties3.getRevision();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("8034", arrayList0, 1499);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      SparseInstance sparseInstance0 = new SparseInstance(2161);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      instances0.add((Instance) sparseInstance1);
      Attribute attribute0 = new Attribute("8034", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.splitData(instances0, 9.385344487867632, 1499);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3611.4425512130915);
      doubleArray0[1] = (-3611.4425512130915);
      doubleArray0[4] = 68.51931678;
      SparseInstance sparseInstance0 = new SparseInstance((-3611.4425512130915), doubleArray0);
      Attribute attribute0 = new Attribute("\nAr}ray: ");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      
      jRip_NumericAntd0.value = (-2135.288317);
      jRip_NumericAntd0.covers(sparseInstance0);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      bayesNet9.setBIFFile("+3BR");
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      BayesNet bayesNet14 = new BayesNet();
      Random.setNextRandom((-936));
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("\nAr}ray:  >= NaN", string0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.3120076729259056
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("jp>-#e0YZ>", protectedProperties0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("@attribute", arrayList0, 0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Properties properties1 = new Properties();
      BayesNet bayesNet0 = new BayesNet();
      JRip jRip1 = new JRip();
      jRip1.setDebug(true);
      try { 
        jRip1.rulesetForOneClass(4, instances0, 2, (-1368.33900487));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.031298644335524
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.5;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 0.5;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2142), doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.5, (int[]) null, (-2142));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Error too large: ";
      stringArray0[2] = "Error too large: ";
      stringArray0[3] = "";
      stringArray0[4] = "oT<g1-NAAQa";
      BinarySparseInstance.main(stringArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      boolean boolean0 = jRip_RipperRule0.covers(binarySparseInstance3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" h4Ukv|xLpO`", arrayList0, 739);
      boolean boolean1 = jRip_RipperRule1.hasAntds();
      assertFalse(boolean1 == boolean0);
      
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0.5, (int[]) null, (-2142));
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(1692.11731072, doubleArray0);
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      jRip_RipperRule1.prune(instances0, false);
      assertEquals(3, jRip0.getFolds());
      assertEquals((-1.0), jRip_RipperRule1.getConsequent(), 0.01);
      assertFalse(jRip0.getDebug());
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.206552161926179
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 0.5;
      doubleArray0[3] = 0.5;
      doubleArray0[4] = 0.5;
      SparseInstance sparseInstance0 = new SparseInstance(0.5, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((-2142), doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(0.5, (int[]) null, (-2142));
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "Error too large: ";
      stringArray0[2] = "Error too large: ";
      stringArray0[3] = "";
      stringArray0[4] = "";
      BinarySparseInstance.main(stringArray0);
      BinarySparseInstance binarySparseInstance3 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      jRip_RipperRule0.covers(binarySparseInstance3);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances(" h4Ukv|xLpO`", arrayList0, 739);
      jRip_RipperRule1.hasAntds();
      JRip jRip1 = new JRip();
      BinarySparseInstance binarySparseInstance4 = new BinarySparseInstance(0.5, (int[]) null, (-2142));
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      DenseInstance denseInstance0 = new DenseInstance(1692.11731072, doubleArray0);
      instances0.add((Instance) sparseInstance0);
      JRip.RipperRule jRip_RipperRule2 = jRip0.new RipperRule();
      // Undeclared exception!
      try { 
        jRip_RipperRule1.prune(instances0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      jRip0.getOptions();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-22);
      byteArray0[1] = (byte)24;
      byteArray0[2] = (byte)14;
      BitSet bitSet0 = new BitSet();
      SGDText sGDText0 = new SGDText();
      AbstractClassifier.makeCopies(sGDText0, 69);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      decisionTable4.getOptions();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      try { 
        principalComponents0.transformedData((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Principal components hasn't been built yet
         //
         verifyException("weka.attributeSelection.PrincipalComponents", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.3010386369482903
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      protectedProperties2.elements();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      protectedProperties4.propertyNames();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties6);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties8);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties9);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties11);
      Properties properties6 = new Properties();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties14);
      ProtectedProperties protectedProperties21 = new ProtectedProperties(protectedProperties5);
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
      
      Attribute attribute0 = new Attribute("v:", (String) null, (-1));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("v:", arrayList0, 0);
      Instances instances1 = new Instances(instances0, (-1));
      jRip_NominalAntd0.splitData(instances1, 2.0, 3.0);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JRip jRip0 = new JRip();
      AbstractClassifier.makeCopies(jRip0, 6);
      Attribute attribute0 = new Attribute("8$@)pX]34n]?b)", 3);
      Attribute attribute1 = attribute0.copy("\tUse stopping criterion on training set (instead of\n\tcross-validation)");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("integer", arrayList0, 3);
      jRip_NumericAntd0.splitData(instances0, 2, 1392.536078);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("L+ aw;O*Gq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // L+ aw;O*Gq not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8911601612408218
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      properties0.elements();
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      properties0.propertyNames();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties1);
      protectedProperties3.keys();
      protectedProperties3.getRevision();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties2);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(properties0);
      Locale locale0 = Locale.PRC;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("8034", arrayList0, 1499);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("8034", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      JRip.NominalAntd jRip_NominalAntd1 = (JRip.NominalAntd)jRip_NominalAntd0.copy();
      assertEquals(Double.NaN, jRip_NominalAntd1.getAttrValue(), 0.01);
      
      jRip_NominalAntd0.splitData(instances0, 9.385344487867632, 1499);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-3611.4425512130915);
      doubleArray0[1] = (-3611.4425512130915);
      doubleArray0[4] = 68.51931678;
      SparseInstance sparseInstance0 = new SparseInstance((-3611.4425512130915), doubleArray0);
      Attribute attribute0 = new Attribute("\nArray: ");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(sparseInstance0);
      assertTrue(boolean0);
      
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties0);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties1);
      JRip jRip1 = new JRip();
      Attribute attribute1 = new Attribute("@attribute");
      Attribute attribute2 = new Attribute((String) null);
      Attribute.typeToString(attribute0);
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      
      JRip jRip2 = new JRip();
      assertFalse(jRip2.getDebug());
      assertEquals(2.0, jRip2.getMinNo(), 0.01);
      assertEquals(3, jRip2.getFolds());
      assertEquals(1L, jRip2.getSeed());
      assertTrue(jRip2.getCheckErrorRate());
      assertTrue(jRip2.getUsePruning());
      assertEquals(2, jRip2.getOptimizations());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3991.0;
      doubleArray0[1] = 3991.0;
      doubleArray0[3] = 3991.0;
      doubleArray0[4] = 3991.0;
      doubleArray0[5] = 3991.0;
      SparseInstance sparseInstance0 = new SparseInstance(3991.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(3991.0, doubleArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SparseInstance sparseInstance2 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance3 = new SparseInstance(2376.57554, doubleArray0);
      SparseInstance sparseInstance4 = new SparseInstance(sparseInstance0);
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("-F", arrayList0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getRevision();
      jRip_NominalAntd0.covers(sparseInstance1);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0WUJr");
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      JRip jRip1 = new JRip();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      Random.setNextRandom((-5446));
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JRip jRip0 = new JRip();
      int int0 = jRip0.getOptimizations();
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(2, int0);
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      int[] intArray0 = new int[10];
      intArray0[0] = 1;
      intArray0[1] = 1;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("O");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.mapEquivalents(arrayList0, hashMap0);
      arrayList0.add(locale_LanguageRange0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("integer");
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleKeys();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("string", arrayList1, 0);
      JRip jRip0 = new JRip();
      try { 
        jRip0.rulesetForOneClass((-2497.5), instances0, 3.0, Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      AbstractClassifier.makeCopy(jRip0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-890);
      intArray0[1] = (-890);
      intArray0[2] = (-890);
      intArray0[3] = (-890);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Properties properties0 = new Properties();
      Properties properties1 = new Properties(properties0);
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("K8+PP65o]", protectedProperties0);
      BiFunction<Object, Object, Object> biFunction0 = (BiFunction<Object, Object, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      protectedProperties1.replaceAll(biFunction0);
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("K8+PP65o] <= NaN", string0);
      
      ClassOrder classOrder0 = new ClassOrder();
      JRip jRip2 = new JRip();
      double double0 = jRip_NumericAntd0.getAccu();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(Double.NaN, double0, 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertFalse(jRip1.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.toString();
      jRip0.setSeed(0L);
      jRip0.getSeed();
      jRip0.getSeed();
      JRip jRip1 = new JRip();
      Attribute attribute0 = new Attribute("JRIP: No model built yet.", (List<String>) null);
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      IBk iBk0 = new IBk();
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_theInstances;
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 0L;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) 2;
      doubleArray0[4] = (double) 1;
      doubleArray0[5] = (-1.0);
      doubleArray0[6] = (double) 0;
      doubleArray0[7] = (double) 1;
      doubleArray0[8] = (double) 3;
      iBk0.pruneToK((Instances) null, doubleArray0, 1021);
      AllFilter allFilter0 = new AllFilter();
      Filter filter0 = Filter.makeCopy(allFilter0);
      try { 
        Filter.useFilter((Instances) null, filter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances0 = decisionTable3.m_theInstances;
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      Instances instances1 = decisionTable0.m_theInstances;
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      assertTrue(jRip1.getUsePruning());
      
      boolean boolean0 = jRip0.getUsePruning();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.68644405381145
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      
      jRip0.setMinNo(0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-3611.4425512130915), doubleArray0);
      Attribute attribute0 = new Attribute("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.toString(attribute0);
      jRip_NumericAntd0.getAttr();
      double double0 = jRip_NumericAntd0.getAttrValue();
      assertEquals(Double.NaN, double0, 0.01);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[1] = 3991.0;
      doubleArray0[3] = 3991.0;
      doubleArray0[4] = 3991.0;
      SparseInstance sparseInstance0 = new SparseInstance(3991.0, doubleArray0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1793.6891333, doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance(1.0E-6, (int[]) null, 420);
      SparseInstance sparseInstance1 = new SparseInstance((SparseInstance) binarySparseInstance2);
      jRip0.getDebug();
      // Undeclared exception!
      try { 
        sparseInstance1.relationalValue((Attribute) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "";
      stringArray0[1] = "\tSet whether turn on the\n\tdebug mode (Default: false)";
      stringArray0[2] = "av\\Mp";
      stringArray0[3] = "31";
      stringArray0[4] = "The class that splits a node into two such that the overall sum of squared distances of points to their centres on both sides of the (axis-parallel) splitting plane is minimum.\n\nFor more information see also:\n\n";
      stringArray0[6] = "19th Conference in Uncertainty in Artificial Intelligence";
      stringArray0[7] = "The class that splits a node into two such that the overall sum of squared distances of points to their centres on both sides of the (axis-parallel) splitting plane is minimum.\n\nFor more information see also:\n\n";
      stringArray0[8] = "";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.8212565066006587
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getOptions();
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 446.27020016751635;
      doubleArray0[1] = 446.27020016751635;
      doubleArray0[2] = 4.5;
      doubleArray0[3] = 446.27020016751635;
      doubleArray0[4] = 446.27020016751635;
      doubleArray0[5] = 446.27020016751635;
      SparseInstance sparseInstance0 = new SparseInstance(446.27020016751635, doubleArray0);
      Attribute attribute0 = new Attribute("h+~=l");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.covers(sparseInstance0);
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      bayesNet9.setBIFFile("The rule covers: ");
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      Instances instances0 = bayesNet12.m_Instances;
      assertNull(instances0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      bayesNet2.setBIFFile("24f9;4Mh,^+7?<IG2");
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      Instances instances0 = bayesNet6.m_Instances;
      String[] stringArray0 = new String[9];
      stringArray0[0] = "@data";
      stringArray0[1] = "-N";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      stringArray0[5] = ".arff";
      stringArray0[6] = "@relation";
      stringArray0[7] = ".arff";
      stringArray0[8] = "@relation";
      try { 
        jRip0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8169929397370832
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.resetOptions();
      BestFirst bestFirst0 = (BestFirst)decisionTable0.getSearch();
      bestFirst0.setLookupCacheSize(0);
      decisionTable0.m_search = (ASSearch) bestFirst0;
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances1 = decisionTable3.m_theInstances;
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      DecisionTable decisionTable7 = new DecisionTable();
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      String[] stringArray0 = jRip0.getOptions();
      jRip0.setOptions(stringArray0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
      assertEquals(11, stringArray0.length);
      assertEquals(2, jRip0.getOptimizations());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(properties1);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties0);
      JRip jRip0 = new JRip();
      String string0 = jRip0.minNoTipText();
      assertEquals("The minimum total weight of the instances in a rule.", string0);
      
      Attribute attribute0 = new Attribute("", 2602);
      Attribute attribute1 = attribute0.copy("");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.7689192975524
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("integer");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("integer");
      Locale.LanguageRange.parse("integer");
      locale_LanguageRange0.equals(locale_LanguageRange1);
      arrayList0.add(locale_LanguageRange1);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Locale.LanguageRange locale_LanguageRange2 = new Locale.LanguageRange("real");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0);
      hashMap0.put("", list0);
      ArrayList<String> arrayList1 = new ArrayList<String>();
      hashMap0.put("", arrayList1);
      arrayList0.add(locale_LanguageRange2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.EXTENDED_FILTERING;
      Locale.filterTags((List<Locale.LanguageRange>) linkedList1, (Collection<String>) null, locale_FilteringMode0);
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[3];
      stringArray0[0] = "@end";
      stringArray0[1] = "real";
      stringArray0[2] = "date";
      jRip0.setOptions(stringArray0);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.8825, doubleArray0);
      binarySparseInstance0.dataset();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      boolean boolean0 = jRip_NumericAntd0.covers(binarySparseInstance0);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(boolean0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      int[] intArray0 = new int[10];
      intArray0[0] = 1;
      intArray0[1] = 1;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      arrayList0.sort(comparator0);
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("O");
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      Locale.LanguageRange.mapEquivalents(arrayList0, hashMap0);
      arrayList0.add(locale_LanguageRange0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("integer");
      arrayList0.add((Locale.LanguageRange) null);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleKeys();
      JRip jRip0 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      String string0 = jRip0.foldsTipText();
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertEquals("Determines the amount of data used for pruning. One fold is used for pruning, the rest for growing the rules.", string0);
      assertFalse(jRip0.getDebug());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip0.listOptions();
      jRip_RipperRule0.setConsequent(0.975);
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.8911601612408218
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("integer");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("integer");
      locale_LanguageRange0.equals(locale_LanguageRange1);
      arrayList0.add(locale_LanguageRange1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer1);
      Locale.LanguageRange locale_LanguageRange2 = new Locale.LanguageRange("real");
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      HashMap<String, List<String>> hashMap0 = new HashMap<String, List<String>>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      hashMap0.put("", arrayList2);
      Locale.LanguageRange.mapEquivalents(linkedList0, hashMap0);
      arrayList0.add(locale_LanguageRange2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
      Locale.filterTags((List<Locale.LanguageRange>) arrayList0, (Collection<String>) set0, locale_FilteringMode0);
      ArrayList<Attribute> arrayList3 = new ArrayList<Attribute>();
      JRip jRip0 = new JRip();
      assertFalse(jRip0.getDebug());
      
      String[] stringArray0 = new String[0];
      attribute0.value((-658));
      jRip0.setOptions(stringArray0);
      Random.setNextRandom(3);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(3, jRip0.getFolds());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.4221006252457893
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties2 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(properties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties5 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties6);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties7);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties1);
      Attribute attribute0 = new Attribute("");
      JRip jRip0 = new JRip();
      String string0 = jRip0.toString();
      assertEquals("JRIP: No model built yet.", string0);
      
      JRip jRip1 = new JRip();
      JRip.NumericAntd jRip_NumericAntd0 = jRip1.new NumericAntd(attribute0);
      JRip.NumericAntd jRip_NumericAntd1 = (JRip.NumericAntd)jRip_NumericAntd0.copy();
      assertEquals(Double.NaN, jRip_NumericAntd1.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd1.getSplitPoint(), 0.01);
      
      String string1 = jRip_NumericAntd0.toString();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertNotSame(jRip_NumericAntd0, jRip_NumericAntd1);
      assertFalse(jRip1.getDebug());
      assertEquals(" <= NaN", string1);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertTrue(jRip1.getUsePruning());
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(3, jRip1.getFolds());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      int[] intArray0 = new int[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 1;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("O");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("integer");
      locale_LanguageRange1.getWeight();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      locale_LanguageRange1.equals(linkedList0);
      locale_LanguageRange0.equals(locale_LanguageRange1);
      arrayList0.add(locale_LanguageRange1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add(locale_LanguageRange0);
      arrayList1.add(locale_LanguageRange0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer1);
      Locale.LanguageRange locale_LanguageRange2 = new Locale.LanguageRange("real");
      arrayList0.add(locale_LanguageRange2);
      LinkedList<Locale.LanguageRange> linkedList1 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/+-c)c6Ugo;OlZuL|", arrayList2, 3277);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      jRip_NominalAntd0.splitData(instances1, 1749.3404, 700.059533);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8720520186532996
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = false;
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.resetOptions();
      Instances instances0 = decisionTable0.m_theInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      Instances instances1 = decisionTable1.m_theInstances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances2 = new Instances(".bsi", arrayList0, 4);
      try { 
        jRip0.rulesetForOneClass(1, instances2, (-2423.4), 3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.199325386865874
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JRip jRip0 = new JRip();
      boolean boolean0 = false;
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.resetOptions();
      Instances instances0 = decisionTable0.m_theInstances;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances1 = new Instances(".bsi", arrayList0, 5);
      DenseInstance denseInstance0 = new DenseInstance(3);
      instances1.add((Instance) denseInstance0);
      try { 
        jRip0.rulesetForOneClass(2, instances1, 4, 4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class is not set!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3991.0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      doubleArray0[1] = 3991.0;
      doubleArray0[3] = 3991.0;
      doubleArray0[4] = 3991.0;
      doubleArray0[5] = 3991.0;
      doubleArray0[6] = 3991.0;
      SparseInstance sparseInstance0 = new SparseInstance(3991.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance((-2423.4), doubleArray0);
      SparseInstance sparseInstance2 = new SparseInstance(3991.0, doubleArray0);
      int[] intArray0 = new int[5];
      intArray0[0] = (-2142);
      intArray0[1] = (-2142);
      intArray0[2] = (-2142);
      intArray0[3] = (-2142);
      intArray0[4] = (-2142);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-2142), intArray0, 4288);
      double double0 = (-1848.3879);
      // Undeclared exception!
      try { 
        jRip0.distributionForInstance(sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.setCheckErrorRate(true);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertFalse(boolean0);
      assertEquals(1L, jRip0.getSeed());
      assertEquals(3, jRip0.getFolds());
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertTrue(jRip0.getUsePruning());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.PRC;
      Locale locale1 = Locale.FRANCE;
      Locale.setDefault(locale1);
      Set<String> set0 = locale1.getUnicodeLocaleKeys();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.MAP_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) set0, locale_FilteringMode0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      Attribute attribute0 = new Attribute("implementation in aspects of accuracy, ruleset size and running time ", protectedProperties1);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getCover();
      Attribute attribute1 = new Attribute("date", list0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute1);
      ClassOrder classOrder0 = new ClassOrder();
      assertEquals(2, ClassOrder.RANDOM);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 68.51931678;
      Attribute attribute0 = new Attribute("\nArray: ");
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      jRip_NumericAntd0.value = (-2135.288317);
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      jRip_NumericAntd0.getSplitPoint();
      Instances instances0 = bayesNet5.m_Instances;
      AbstractClassifier.makeCopies(bayesNet7, 5);
      try { 
        jRip0.rulesetForOneClass((-2423.4), (Instances) null, 0.0, 1409.9);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.05569358184064
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.resetOptions();
      BestFirst bestFirst0 = (BestFirst)decisionTable0.getSearch();
      bestFirst0.setLookupCacheSize((-21));
      decisionTable0.m_search = (ASSearch) bestFirst0;
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      Instances instances1 = decisionTable2.m_theInstances;
      DecisionTable decisionTable3 = new DecisionTable();
      DecisionTable decisionTable4 = new DecisionTable();
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute(".arff", (List<String>) null);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      jRip_NominalAntd0.toString();
      Instances instances2 = new Instances("integer", arrayList0, 1);
      jRip_NominalAntd0.splitData(instances2, 4, 4);
      int[] intArray0 = new int[8];
      intArray0[0] = 4;
      intArray0[2] = 2;
      intArray0[3] = 3;
      intArray0[4] = 1;
      intArray0[5] = (-21);
      BayesNet bayesNet0 = new BayesNet();
      bayesNet0.setUseADTree(false);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        jRip0.buildClassifier((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JRip jRip0 = new JRip();
      assertEquals(1L, jRip0.getSeed());
      
      jRip0.setSeed(0L);
      jRip0.setUsePruning(false);
      DecisionTable decisionTable0 = new DecisionTable();
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances0 = decisionTable3.m_theInstances;
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      Instances instances1 = decisionTable4.m_theInstances;
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      boolean boolean0 = jRip1.getUsePruning();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = 68.51931678;
      doubleArray0[1] = (-3611.4425512130915);
      SparseInstance sparseInstance0 = new SparseInstance(68.51931678, doubleArray0);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute((String) null, protectedProperties0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.covers(sparseInstance0);
      jRip0.getCheckErrorRate();
      jRip0.minNoTipText();
      jRip0.debugTipText();
      jRip_NominalAntd0.copy();
      jRip_NominalAntd0.getAccuRate();
      double double0 = jRip_NominalAntd0.maxInfoGain;
      MockRandom mockRandom0 = new MockRandom(2);
      BayesNet bayesNet0 = new BayesNet();
      try { 
        bayesNet0.initStructure();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.bayes.BayesNet", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.1919211688441456
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.getTechnicalInformation();
      jRip0.setMinNo(0.0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = ";HvFV0F$Emkhn:$hV";
      stringArray0[2] = "";
      stringArray0[3] = "-S";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      jRip0.getRevision();
      jRip0.setSeed(2731L);
      jRip0.setOptimizations(0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      Attribute attribute0 = new Attribute("8118", (-315));
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      jRip_NominalAntd0.getAccuRate();
      jRip_NominalAntd0.getMaxInfoGain();
      jRip_RipperRule0.getRevision();
      String string0 = jRip_NominalAntd0.toString();
      assertEquals(2731L, jRip0.getSeed());
      assertEquals("8118 = ", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      protectedProperties2.elements();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      protectedProperties4.propertyNames();
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties7);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties6);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties5);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties5);
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties3);
      Properties properties4 = new Properties();
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties14 = new ProtectedProperties(properties4);
      JRip jRip0 = new JRip();
      // Undeclared exception!
      try { 
        jRip0.getMeasure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.7825850929940454
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.globalInfo();
      jRip0.globalInfo();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getRevision();
      jRip_RipperRule0.getConsequent();
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      ArrayList<String> arrayList0 = new ArrayList<String>();
      jRip0.listOptions();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.AUTOSELECT_FILTERING;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) linkedList0, (Collection<String>) arrayList0, locale_FilteringMode0);
      Attribute attribute0 = new Attribute("d4tqK' pDlv.]jd;ayt", list0);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      // Undeclared exception!
      try { 
        jRip_NominalAntd0.toString();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      protectedProperties2.elements();
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(protectedProperties0);
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(byteArrayOutputStream0);
      protectedProperties4.propertyNames();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      ProtectedProperties protectedProperties10 = new ProtectedProperties(protectedProperties7);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties6);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties13 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties14 = new ProtectedProperties(protectedProperties3);
      ProtectedProperties protectedProperties15 = new ProtectedProperties(protectedProperties9);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties16 = new ProtectedProperties(protectedProperties10);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties17 = new ProtectedProperties(protectedProperties12);
      ProtectedProperties protectedProperties18 = new ProtectedProperties(protectedProperties6);
      ProtectedProperties protectedProperties19 = new ProtectedProperties(protectedProperties4);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties20 = new ProtectedProperties(protectedProperties2);
      JRip jRip0 = new JRip();
      Attribute attribute0 = new Attribute("weka.core.FastVector", protectedProperties1);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      
      jRip_NumericAntd0.cover = (double) 4;
      jRip_NumericAntd0.toString();
      String string0 = jRip_NumericAntd0.toString();
      assertEquals("weka.core.FastVector <= NaN", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.2654436797543704
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JRip jRip0 = new JRip();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      ProtectedProperties protectedProperties1 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties2 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties3 = new ProtectedProperties(protectedProperties1);
      ProtectedProperties protectedProperties4 = new ProtectedProperties(properties0);
      Properties properties1 = new Properties();
      ProtectedProperties protectedProperties5 = new ProtectedProperties(protectedProperties4);
      ProtectedProperties protectedProperties6 = new ProtectedProperties(protectedProperties4);
      Properties properties2 = new Properties();
      ProtectedProperties protectedProperties7 = new ProtectedProperties(protectedProperties0);
      ProtectedProperties protectedProperties8 = new ProtectedProperties(protectedProperties2);
      ProtectedProperties protectedProperties9 = new ProtectedProperties(protectedProperties8);
      Properties properties3 = new Properties();
      ProtectedProperties protectedProperties10 = new ProtectedProperties(properties3);
      Properties properties4 = new Properties();
      ProtectedProperties protectedProperties11 = new ProtectedProperties(properties0);
      Properties properties5 = new Properties();
      ProtectedProperties protectedProperties12 = new ProtectedProperties(protectedProperties8);
      Attribute attribute0 = new Attribute("");
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      JRip.RipperRule jRip_RipperRule1 = jRip0.new RipperRule();
      String string0 = jRip_RipperRule0.toString(attribute0);
      assertEquals(" => =", string0);
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      
      JRip jRip2 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip1.new NominalAntd(attribute0);
      String string1 = jRip_NominalAntd0.toString();
      assertFalse(jRip1.getDebug());
      assertEquals(" = ", string1);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertTrue(jRip1.getUsePruning());
      assertEquals(1L, jRip1.getSeed());
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals(3, jRip1.getFolds());
      assertEquals(2, jRip1.getOptimizations());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "\u0004";
      stringArray0[1] = "&Ci(>Un";
      stringArray0[2] = "L+ aw;O*Gq";
      stringArray0[3] = "L+ aw;O*Gq";
      stringArray0[4] = "L+ aw;O*Gq";
      stringArray0[5] = "L+ aw;O*Gq";
      stringArray0[6] = "L+ aw;O*Gq";
      stringArray0[7] = "";
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      bayesNet2.setBIFFile("&Ci(>Un");
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      BayesNet bayesNet13 = new BayesNet();
      Instances instances0 = bayesNet2.m_Instances;
      // Undeclared exception!
      try { 
        jRip0.getRuleStats(502);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[7];
      doubleArray0[0] = 3991.0;
      doubleArray0[1] = 3991.0;
      doubleArray0[4] = 3991.0;
      doubleArray0[5] = 3991.0;
      doubleArray0[6] = 3991.0;
      SparseInstance sparseInstance0 = new SparseInstance(3991.0, doubleArray0);
      SparseInstance sparseInstance1 = new SparseInstance(sparseInstance0);
      SparseInstance sparseInstance2 = new SparseInstance(3991.0, doubleArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      SparseInstance sparseInstance3 = new SparseInstance((Instance) sparseInstance0);
      SparseInstance sparseInstance4 = new SparseInstance(2376.57554, doubleArray0);
      SparseInstance sparseInstance5 = new SparseInstance(sparseInstance0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "VWUJr");
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("VWUJr", arrayList0, 67);
      try { 
        jRip0.buildClassifier(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.classifiers.rules.JRip: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      int[] intArray0 = new int[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 1;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("O");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("integer");
      locale_LanguageRange1.getWeight();
      locale_LanguageRange0.equals(locale_LanguageRange1);
      arrayList0.add(locale_LanguageRange1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add(locale_LanguageRange0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer1);
      Locale.LanguageRange locale_LanguageRange2 = new Locale.LanguageRange("real");
      arrayList0.add(locale_LanguageRange2);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      jRip0.setDebug(true);
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      assertEquals("Set the path from which to load a model. Loading occurs when the first test instance is received. Environment variables can be used in the supplied path.", inputMappedClassifier0.modelPathTipText());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      String string0 = "Hz*; 6OVv";
      Locale locale0 = Locale.PRC;
      JRip jRip0 = new JRip();
      jRip0.optimizationsTipText();
      locale0.getExtension('h');
      Locale locale1 = Locale.CANADA_FRENCH;
      Locale.setDefault(locale1);
      locale0.getUnicodeLocaleAttributes();
      Locale locale2 = Locale.forLanguageTag("The number of optimization runs.");
      locale0.getDisplayLanguage(locale2);
      BottomUpConstructor bottomUpConstructor0 = new BottomUpConstructor();
      MultiScheme multiScheme0 = new MultiScheme();
      // Undeclared exception!
      try { 
        multiScheme0.getClassifier(8);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 8
         //
         verifyException("weka.classifiers.meta.MultiScheme", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JRip jRip0 = new JRip();
      jRip0.listOptions();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      Utils.SMALL = 15.0;
      jRip_RipperRule0.setConsequent(15.0);
      boolean boolean0 = jRip_RipperRule0.hasAntds();
      assertEquals(15.0, jRip_RipperRule0.getConsequent(), 0.01);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<<rl34A");
      int[] intArray0 = new int[10];
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 1;
      ArrayList<Locale.LanguageRange> arrayList0 = new ArrayList<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("O");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      Locale.LanguageRange locale_LanguageRange1 = new Locale.LanguageRange("integer");
      locale_LanguageRange1.getWeight();
      locale_LanguageRange0.equals(locale_LanguageRange1);
      arrayList0.add(locale_LanguageRange1);
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      arrayList1.add(locale_LanguageRange0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList1.forEach(consumer1);
      Locale.LanguageRange locale_LanguageRange2 = new Locale.LanguageRange("real");
      arrayList0.add(locale_LanguageRange2);
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      Locale locale0 = Locale.GERMANY;
      locale0.getUnicodeLocaleAttributes();
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("/+-c)c6Ugo;OlZuL|", arrayList2, 3277);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JRip jRip0 = new JRip();
      JRip.NominalAntd jRip_NominalAntd0 = jRip0.new NominalAntd(attribute0);
      InputMappedClassifier inputMappedClassifier0 = new InputMappedClassifier();
      Instances instances1 = inputMappedClassifier0.getModelHeader(instances0);
      jRip_NominalAntd0.splitData(instances1, 1749.3404, 700.059533);
      String string0 = jRip_NominalAntd0.getRevision();
      assertEquals(0.0, jRip_NominalAntd0.getMaxInfoGain(), 0.01);
      assertEquals("8118", string0);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertTrue(jRip0.getUsePruning());
      assertFalse(jRip0.getDebug());
      assertEquals(Double.NaN, jRip_NominalAntd0.getAttrValue(), 0.01);
      assertEquals(2, jRip0.getOptimizations());
      assertEquals(Double.NaN, jRip_NominalAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccu(), 0.01);
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NominalAntd0.getAccuRate(), 0.01);
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JRip jRip0 = new JRip();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute("'cw-15/mxN7YqAi7", linkedList0, protectedProperties0);
      JRip.NumericAntd jRip_NumericAntd0 = jRip0.new NumericAntd(attribute0);
      String string0 = jRip_NumericAntd0.getRevision();
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccu(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getSplitPoint(), 0.01);
      assertEquals("8118", string0);
      assertEquals(3, jRip0.getFolds());
      assertEquals(2.0, jRip0.getMinNo(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getCover(), 0.01);
      assertEquals(Double.NaN, jRip_NumericAntd0.getAttrValue(), 0.01);
      assertEquals(0.0, jRip_NumericAntd0.getMaxInfoGain(), 0.01);
      assertFalse(jRip0.getDebug());
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(Double.NaN, jRip_NumericAntd0.getAccuRate(), 0.01);
      assertTrue(jRip0.getUsePruning());
      assertEquals(1L, jRip0.getSeed());
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JRip jRip0 = new JRip();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "whole";
      stringArray0[1] = "JRIP rules:\n===========\n\n";
      stringArray0[2] = "mKf^69J.DVr7.t";
      stringArray0[3] = "K >oXT1y&I%-";
      stringArray0[4] = "Kvc6*5E/$U'[";
      stringArray0[5] = "nominal";
      stringArray0[6] = "n/_7Ez#/l";
      stringArray0[7] = "I~P447s";
      AbstractClassifier.runClassifier(jRip0, stringArray0);
      // Undeclared exception!
      try { 
        jRip0.getMeasure("Q}Sfg'>{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Q}Sfg'>{ not supported (RIPPER)
         //
         verifyException("weka.classifiers.rules.JRip", e);
      }
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Attribute attribute0 = new Attribute("6T%:]t<rl34A");
      DecisionTable decisionTable0 = new DecisionTable();
      decisionTable0.resetOptions();
      decisionTable0.getSearch();
      BestFirst bestFirst0 = new BestFirst();
      bestFirst0.setLookupCacheSize((-450));
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances1 = decisionTable2.m_theInstances;
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      DecisionTable decisionTable7 = new DecisionTable();
      Instances instances2 = decisionTable6.m_theInstances;
      JRip jRip0 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      try { 
        jRip_RipperRule0.grow((Instances) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         //  Consequent not set yet.
         //
         verifyException("weka.classifiers.rules.JRip$RipperRule", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DecisionTable decisionTable0 = new DecisionTable();
      Evaluation evaluation0 = decisionTable0.m_evaluation;
      Instances instances0 = decisionTable0.m_dtInstances;
      DecisionTable decisionTable1 = new DecisionTable();
      DecisionTable decisionTable2 = new DecisionTable();
      DecisionTable decisionTable3 = new DecisionTable();
      Instances instances1 = decisionTable3.m_theInstances;
      JRip jRip0 = new JRip();
      jRip0.enumerateMeasures();
      DecisionTable decisionTable4 = new DecisionTable();
      DecisionTable decisionTable5 = new DecisionTable();
      DecisionTable decisionTable6 = new DecisionTable();
      DecisionTable decisionTable7 = new DecisionTable();
      Instances instances2 = decisionTable2.m_theInstances;
      JRip jRip1 = new JRip();
      JRip.RipperRule jRip_RipperRule0 = jRip1.new RipperRule();
      assertEquals(2, jRip1.getOptimizations());
      assertEquals(2.0, jRip1.getMinNo(), 0.01);
      assertEquals(1L, jRip1.getSeed());
      assertFalse(jRip1.getDebug());
      assertEquals(3, jRip1.getFolds());
      assertTrue(jRip1.getUsePruning());
      assertEquals((-1.0), jRip_RipperRule0.getConsequent(), 0.01);
      assertTrue(jRip1.getCheckErrorRate());
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JRip jRip0 = new JRip();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 68.63617890153276;
      BayesNet bayesNet0 = new BayesNet();
      BayesNet bayesNet1 = new BayesNet();
      BayesNet bayesNet2 = new BayesNet();
      BayesNet bayesNet3 = new BayesNet();
      BayesNet bayesNet4 = new BayesNet();
      BayesNet bayesNet5 = new BayesNet();
      BayesNet bayesNet6 = new BayesNet();
      BayesNet bayesNet7 = new BayesNet();
      BayesNet bayesNet8 = new BayesNet();
      BayesNet bayesNet9 = new BayesNet();
      BayesNet bayesNet10 = new BayesNet();
      BayesNet bayesNet11 = new BayesNet();
      BayesNet bayesNet12 = new BayesNet();
      bayesNet6.setBIFFile("+3BR");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      BayesNet bayesNet13 = new BayesNet();
      BayesNet bayesNet14 = new BayesNet();
      BayesNet bayesNet15 = new BayesNet();
      BayesNet bayesNet16 = new BayesNet();
      Random.setNextRandom((-936));
      double double0 = jRip0.getMinNo();
      assertEquals(2, jRip0.getOptimizations());
      assertTrue(jRip0.getUsePruning());
      assertEquals(2.0, double0, 0.01);
      assertTrue(jRip0.getCheckErrorRate());
      assertEquals(1L, jRip0.getSeed());
      assertFalse(jRip0.getDebug());
      assertEquals(3, jRip0.getFolds());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 1131;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.385344487867632, intArray0, 1131);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1131;
      intArray0[0] = (-2142);
      doubleArray0[2] = (double) 1131;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(121.0, doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.getConsequent();
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_RipperRule0.hasAntds();
      FileSystemHandling.shouldAllThrowIOExceptions();
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      DecisionTable decisionTable0 = new DecisionTable();
      Instances instances0 = decisionTable0.m_dtInstances;
      MockRandom mockRandom0 = new MockRandom(1131);
      // Undeclared exception!
      try { 
        RuleStats.stratify((Instances) null, (-2142), mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.rules.RuleStats", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.7518685126965625
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JRip jRip0 = new JRip();
      int[] intArray0 = new int[1];
      intArray0[0] = 1131;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(9.385344487867632, intArray0, 1131);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 1131;
      doubleArray0[2] = (double) 1131;
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(121.0, doubleArray0);
      JRip.RipperRule jRip_RipperRule0 = jRip0.new RipperRule();
      jRip_RipperRule0.size();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "AX45?0/.Q3F&Nz";
      jRip_RipperRule0.copy();
      stringArray0[1] = "";
      stringArray0[2] = "";
      JRip.main(stringArray0);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance1);
      jRip_RipperRule0.covers(sparseInstance0);
      jRip_RipperRule0.hasAntds();
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 3255;
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        binarySparseInstance2.toStringNoWeight(3255);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.SparseInstance", e);
      }
  }
}
