/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:27:57 GMT 2019
 */

package weka.classifiers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedReader;
import java.io.PushbackInputStream;
import java.io.SequenceInputStream;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.Properties;
import java.util.Random;
import java.util.Vector;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import weka.attributeSelection.PrincipalComponents;
import weka.classifiers.AbstractClassifier;
import weka.classifiers.Classifier;
import weka.classifiers.CostMatrix;
import weka.classifiers.Evaluation;
import weka.classifiers.Sourcable;
import weka.classifiers.bayes.BayesNet;
import weka.classifiers.functions.GaussianProcesses;
import weka.classifiers.functions.Logistic;
import weka.classifiers.functions.SGD;
import weka.classifiers.functions.SGDText;
import weka.classifiers.functions.SMO;
import weka.classifiers.functions.SMOreg;
import weka.classifiers.functions.SimpleLogistic;
import weka.classifiers.functions.supportVector.Kernel;
import weka.classifiers.functions.supportVector.RBFKernel;
import weka.classifiers.functions.supportVector.RegOptimizer;
import weka.classifiers.lazy.LWL;
import weka.classifiers.meta.AdaBoostM1;
import weka.classifiers.meta.AdditiveRegression;
import weka.classifiers.meta.CostSensitiveClassifier;
import weka.classifiers.meta.LogitBoost;
import weka.classifiers.meta.MultiScheme;
import weka.classifiers.meta.RandomSubSpace;
import weka.classifiers.meta.Vote;
import weka.classifiers.misc.SerializedClassifier;
import weka.classifiers.rules.ZeroR;
import weka.classifiers.trees.DecisionStump;
import weka.classifiers.trees.LMT;
import weka.classifiers.trees.RandomTree;
import weka.clusterers.SimpleKMeans;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.Capabilities;
import weka.core.CapabilitiesHandler;
import weka.core.ChebyshevDistance;
import weka.core.CheckOptionHandler;
import weka.core.DenseInstance;
import weka.core.DistanceFunction;
import weka.core.Environment;
import weka.core.FindWithCapabilities;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.MinkowskiDistance;
import weka.core.ProtectedProperties;
import weka.core.SelectedTag;
import weka.core.SparseInstance;
import weka.core.TestInstances;
import weka.core.Utils;
import weka.core.converters.CSVLoader;
import weka.core.converters.ConverterUtils;
import weka.core.converters.DatabaseLoader;
import weka.core.converters.SerializedInstancesLoader;
import weka.core.converters.TextDirectoryLoader;
import weka.core.converters.XRFFLoader;
import weka.core.neighboursearch.balltrees.BallNode;
import weka.filters.AllFilter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Evaluation_ESTest extends Evaluation_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.7126725926503137
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation0.numTruePositives(2);
      int[] intArray0 = new int[8];
      intArray0[1] = 1;
      intArray0[4] = 720;
      intArray0[5] = 2;
      evaluation0.m_NumClasses = (-1717986916);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      evaluation0.numFalseNegatives(1);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Evaluation evaluation2 = new Evaluation(instances0);
      testInstances0.toString();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.m_SumErr = (-2141.5629700645436);
      evaluation3.falseNegativeRate(106);
      evaluation2.recall(106);
      double double1 = evaluation0.m_SumKBInfo;
      evaluation2.relativeAbsoluteError();
      double double2 = evaluation1.m_SumSqrClass;
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1800.5184877250022), intArray0, 69);
      try { 
        evaluation1.updateStatsForIntervalEstimator(gaussianProcesses0, binarySparseInstance0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.6924955013411096
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      capabilities0.disableAllClassDependencies();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(1);
      instances0.compactify();
      evaluation0.falseNegativeRate((-1));
      evaluation0.unweightedMicroFmeasure();
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = Double.NaN;
      doubleArray0[1] = 0.0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1332.987108318795, doubleArray0);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-17);
      byteArray0[2] = (byte) (-16);
      byteArray0[3] = (byte)94;
      byteArray0[4] = (byte) (-10);
      byteArray0[5] = (byte) (-8);
      byteArray0[6] = (byte)16;
      FileSystemHandling.appendDataToFile(evoSuiteFile2, byteArray0);
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, binarySparseInstance0, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9675015645565868
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom((-1836L));
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL0.setKNN(1);
      evaluation0.truePositiveRate(84);
      evaluation0.recall(152);
      evaluation0.m_WithClass = (-1911.0);
      textDirectoryLoader0.getStructure();
      evaluation0.falseNegativeRate(84);
      evaluation0.weightedFalsePositiveRate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, true);
      evaluation0.falsePositiveRate((-2928));
      evaluation0.setPriors(instances0);
      evaluation0.getHeader();
      evaluation0.areaUnderROC(4);
      evaluation0.pctIncorrect();
      evaluation0.setNumericPriorsFromBuffer();
      evaluation0.weightedFalsePositiveRate();
      evaluation0.toSummaryString(".arff", true);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.5240735856570753
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("No actual dataset provided to use as template");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      evaluation0.equals("C6v*C1zg_");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances0);
      evaluation0.updateStatsForPredictor(0L, instance0);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      // Undeclared exception!
      try { 
        evaluation1.recall(121);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 121
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3395889682839914
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("No actual dtast provided to use as template");
      LWL lWL0 = new LWL();
      lWL0.setKNN((-1));
      CostMatrix costMatrix0 = new CostMatrix(2);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      Evaluation evaluation0 = new Evaluation(instances0, costMatrix0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.4676923464048413
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((byte)12);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances1 = textDirectoryLoader0.getDataSet();
      costSensitiveClassifier0.getCostMatrix();
      Object object0 = new Object();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Vector<String> vector0 = new Vector<String>();
      Evaluation evaluation1 = new Evaluation(instances1);
      SparseInstance sparseInstance0 = new SparseInstance(1);
      try { 
        evaluation0.evaluateModelOnce((double) 1, (Instance) sparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9440906203747663
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[7];
      charArray0[1] = 'F';
      charArray0[2] = 'a';
      charArray0[3] = 'A';
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation.makeOptionString((Classifier) null, true);
      DenseInstance denseInstance0 = new DenseInstance(621);
      Evaluation evaluation1 = new Evaluation(instances1);
      Properties properties0 = new Properties();
      ProtectedProperties protectedProperties0 = new ProtectedProperties(properties0);
      Attribute attribute0 = new Attribute(".bsi", "|~M!", protectedProperties0);
      attribute0.indexOfValue("|~M!");
      int[] intArray0 = new int[6];
      intArray0[0] = 621;
      intArray0[1] = 0;
      intArray0[2] = (int) 'a';
      intArray0[3] = (-1644);
      intArray0[4] = (int) 'F';
      intArray0[5] = (int) 'F';
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), intArray0, (-1));
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      // Undeclared exception!
      try { 
        binarySparseInstance1.attributeSparse(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.941440681433638
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      MockRandom mockRandom0 = new MockRandom((byte)119);
      mockRandom0.nextFloat();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("No actual dataset provided to use as template");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      int int0 = (-19);
      lWL0.setKNN((-19));
      FileSystemHandling.shouldAllThrowIOExceptions();
      ConverterUtils.DataSource.read((InputStream) null);
      MockRandom mockRandom1 = new MockRandom();
      MockRandom mockRandom2 = new MockRandom();
      evaluation0.numTruePositives((-1625502375));
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((byte)119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 119
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.6173467642609314
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.weightedAreaUnderPRC();
      serializedClassifier0.getCurrentModel();
      MockRandom mockRandom0 = new MockRandom(5250L);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setKNN(122);
      evaluation0.truePositiveRate(3);
      evaluation0.recall(77);
      evaluation0.falseNegativeRate((-2684));
      evaluation0.weightedFalsePositiveRate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      evaluation0.falsePositiveRate(1);
      try { 
        evaluation0.setPriors((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.6058764506142014
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.weightedAreaUnderPRC();
      serializedClassifier0.getCurrentModel();
      evaluation0.m_SumPriorEntropy = Double.NaN;
      MockRandom mockRandom0 = new MockRandom((byte)119);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL0.setKNN(4);
      evaluation0.truePositiveRate(0);
      double double0 = evaluation0.m_SumClass;
      evaluation0.falseNegativeRate((byte)119);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 2;
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.7088849533775425
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation0.weightedAreaUnderPRC();
      MockRandom mockRandom0 = new MockRandom(4);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setKNN(992);
      evaluation0.numFalsePositives(4);
      evaluation0.recall(4);
      evaluation0.falseNegativeRate(1);
      evaluation0.weightedFalsePositiveRate();
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluationForSingleInstance(doubleArray0, (Instance) null, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6753760674923666
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      textDirectoryLoader0.getDirectory();
      Vote vote1 = new Vote();
      Vote vote2 = new Vote();
      vote2.getPreBuiltClassifiers();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.m_NumClasses = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(84);
      instances0.add((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        evaluation0.falseNegativeRate(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6034205422982613
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      double double0 = evaluation0.m_SumSqrPredicted;
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.falseNegativeRate(42);
      evaluation0.truePositiveRate(3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@data");
      SMO sMO0 = new SMO();
      evaluation0.toSummaryString(".arff", true);
      MockRandom mockRandom0 = new MockRandom(1497L);
      mockRandom0.longs((long) 4);
      MockRandom mockRandom1 = new MockRandom((-1788L));
      MockRandom mockRandom2 = new MockRandom(650L);
      mockRandom2.nextFloat();
      SMOreg sMOreg1 = new SMOreg();
      sMOreg0.globalInfo();
      CostMatrix costMatrix0 = new CostMatrix(1);
      SelectedTag selectedTag0 = vote0.getCombinationRule();
      evaluation0.pctUnclassified();
      evaluation0.numFalsePositives(16);
      sMOreg1.setFilterType(selectedTag0);
      evaluation0.numFalsePositives((-207));
      evaluation0.numTrueNegatives((-1458674813));
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2452700606397866
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      int[] intArray0 = new int[8];
      intArray0[4] = (-1901);
      intArray0[6] = 2;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      evaluation0.recall(5);
      double double0 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances0);
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation1.numFalsePositives(83);
      evaluation0.falsePositiveRate((-2));
      try { 
        evaluation0.setPriors(instances1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.2660625374923433
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.useNoPriors();
      evaluation0.numFalseNegatives(1446);
      Evaluation evaluation2 = new Evaluation(instances1);
      LWL lWL0 = new LWL();
      lWL0.setKNN((-2));
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) null);
      testInstances0.setNumString(0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.confusionMatrix();
      evaluation2.toMatrixString("setEpochs");
      evaluation0.SFMeanSchemeEntropy();
      evaluation2.trueNegativeRate((-2));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      instances0.stream();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.weightedFalseNegativeRate();
      RandomSubSpace randomSubSpace0 = new RandomSubSpace();
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      int[] intArray0 = new int[1];
      intArray0[0] = 497;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(Double.NaN, intArray0, 2242);
      // Undeclared exception!
      try { 
        binarySparseInstance0.attribute(1806);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.439720770839918
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Evaluation.handleCostOption("", 478);
      BayesNet bayesNet0 = new BayesNet();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8617695709747026
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      int int0 = (-352);
      char[] charArray0 = new char[7];
      charArray0[1] = 'F';
      char char0 = '5';
      charArray0[3] = '5';
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@data");
      testInstances0.setNumNominal((-352));
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      int int1 = 2611;
      testInstances0.setNumDate((-352));
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation1.weightedPrecision();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-1);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) (-352);
      doubleArray0[3] = (double) (-2);
      doubleArray0[4] = (double) 'R';
      doubleArray0[5] = (double) (-352);
      doubleArray0[6] = (double) '5';
      doubleArray0[7] = (double) 'O';
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getNextInstance(instances1);
      try { 
        evaluation4.updateStatsForClassifier(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.826247185703239
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation0.numTruePositives(2);
      int[] intArray0 = new int[8];
      intArray0[1] = 1;
      intArray0[4] = 748;
      intArray0[5] = 2;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.falseNegativeRate(3);
      evaluation0.recall((-1));
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = 432.67;
      doubleArray0[1] = (double) 2;
      evaluation0.fMeasure((-595));
      evaluation1.makeDistribution(0.0);
      evaluation1.trueNegativeRate(2);
      evaluation1.sizeOfPredictedRegions();
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.129423398798374
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.kappa();
      MultiScheme multiScheme1 = new MultiScheme();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      testInstances0.generate("weka/core/Capabilities.props");
      evaluation0.numFalsePositives(0);
      evaluation0.numTrueNegatives(1);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.403394807908449
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      Vote vote1 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 2);
      mockRandom0.longs((long) 3);
      mockRandom0.longs();
      MockRandom mockRandom1 = new MockRandom((-1L));
      mockRandom1.nextFloat();
      RegOptimizer regOptimizer0 = new RegOptimizer();
      SMOreg sMOreg1 = new SMOreg();
      sMOreg1.setC(1570.9621475152721);
      sMOreg1.setRegOptimizer((RegOptimizer) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      evaluation0.totalCost();
      evaluation0.rootRelativeSquaredError();
      try { 
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, 4, (Random) mockRandom0, (Object[]) vote0.TAGS_RULES);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.2064162678791956
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("W^)UNRuPhFf2<BH");
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation0.kappa();
      MultiScheme multiScheme1 = new MultiScheme();
      capabilities0.disableAllClasses();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, dataInputStream0);
      pipedInputStream0.close();
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      dataInputStream1.available();
      ConverterUtils.DataSource.read((InputStream) sequenceInputStream0);
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation1.numTruePositives(22);
      evaluation0.truePositiveRate(22);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.getClassPriors();
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2963340767279288
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      capabilities0.disableAllClassDependencies();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(1);
      instances0.compactify();
      evaluation0.falseNegativeRate((-1886));
      evaluation0.weightedAreaUnderROC();
      evaluation0.getClassPriors();
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.7896922070384549
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.numFalseNegatives(1446);
      Evaluation evaluation2 = new Evaluation(instances1);
      LWL lWL0 = new LWL();
      lWL0.setKNN((-2));
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) null);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.equals((Object) null);
      double double1 = 498.0;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource((Instances) null);
      // Undeclared exception!
      try { 
        converterUtils_DataSource0.nextElement((Instances) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.converters.ConverterUtils$DataSource", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.30045221348672
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)42);
      double[] doubleArray0 = new double[2];
      LWL lWL0 = new LWL();
      SMO sMO0 = new SMO();
      Kernel kernel0 = sMO0.getKernel();
      sMOreg0.setKernel(kernel0);
      lWL0.setKNN(0);
      evaluation0.truePositiveRate(4);
      int[] intArray0 = new int[13];
      intArray0[0] = 2;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3, intArray0, 0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.368800888198532
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "&BbnM9^hX&J");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "&BbnM9^hX&J");
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      capabilities0.disableAllClassDependencies();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.trueNegativeRate(1);
      instances0.compactify();
      evaluation0.falseNegativeRate(1225);
      evaluation0.weightedAreaUnderROC();
      evaluation0.addNumericTrainClass(Double.NaN, 0);
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.3682082135274403
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("W^)UNRuPhFf2<BH");
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      MultiScheme multiScheme1 = new MultiScheme();
      capabilities0.disableAllClasses();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(pipedInputStream0, dataInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(sequenceInputStream0);
      dataInputStream1.available();
      ConverterUtils.DataSource.read((InputStream) sequenceInputStream0);
      evaluation1.unweightedMacroFmeasure();
      double double1 = evaluation1.numTruePositives(22);
      double double2 = evaluation0.truePositiveRate(22);
      assertEquals(double2, double1, 0.01);
      
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation2.addNumericTrainClass((-2), 612.766685);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, evaluation2.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.548055786830667
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      double double0 = evaluation0.numTruePositives(2);
      int[] intArray0 = new int[8];
      intArray0[4] = 748;
      intArray0[5] = 2;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double1 = evaluation0.falseNegativeRate((-19));
      assertEquals(double1, double0, 0.01);
      
      evaluation0.recall(122);
      evaluation0.SFEntropyGain();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 432.67;
      doubleArray0[2] = (double) 2;
      doubleArray0[4] = (double) 0;
      doubleArray0[5] = (double) 2;
      double double2 = evaluation1.weightedRecall();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("SHt)", linkedList0);
      instances0.insertAttributeAt(attribute0, 1);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      DenseInstance denseInstance0 = new DenseInstance((-1430.0978596), doubleArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      evaluation0.equals("SHt)");
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      try { 
        evaluation0.updateStatsForPredictor(498.0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.223271776460312
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("No actual dataset provided to use as template");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(122);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setKNN(1);
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      MockRandom mockRandom1 = new MockRandom();
      evaluation0.confusionMatrix();
      evaluation1.toMatrixString("setDontNormalize");
      double double1 = evaluation0.m_Correct;
      double double2 = evaluation1.trueNegativeRate((-473));
      assertEquals(double2, double1, 0.01);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9440906203747663
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      double double0 = 5.0;
      double double1 = 3522.9767;
      evaluation0.addNumericTrainClass(5.0, 3522.9767);
      TestInstances testInstances1 = new TestInstances();
      int int0 = (-1674);
      evaluation0.numFalseNegatives((-1674));
      Evaluation evaluation1 = new Evaluation(instances0);
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // XRFFLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.1995444093480354
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      capabilities0.disableAllClassDependencies();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(1);
      instances0.compactify();
      double double1 = evaluation0.falseNegativeRate((-1));
      assertEquals(double1, double0, 0.01);
      
      String string0 = evaluation0.toMatrixString();
      assertEquals("=== Confusion Matrix ===\n\n a b   <-- classified as\n 0 0 | a = class1\n 0 0 | b = class2\n", string0);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.565327508113586
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("-");
      Evaluation evaluation0 = new Evaluation(instances1);
      int int0 = 2418;
      evaluation0.toClassDetailsString();
      evaluation0.numFalseNegatives(2418);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN((-63));
      double[] doubleArray0 = new double[2];
      evaluation1.meanPriorAbsoluteError();
      doubleArray0[0] = (double) 5;
      char[] charArray0 = new char[2];
      charArray0[0] = '<';
      charArray0[1] = 'd';
      // Undeclared exception!
      try { 
        evaluation1.num2ShortID((-1091), charArray0, (byte)119);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.880052335546803
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numTruePositives(2);
      int[] intArray0 = new int[8];
      intArray0[3] = (-1901);
      textDirectoryLoader0.getDirectory();
      intArray0[4] = (-1901);
      intArray0[6] = 2;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate("weka/core/Capabilities.props");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      TestInstances testInstances1 = new TestInstances();
      testInstances0.getWords();
      testInstances1.generate("classifiersTipText");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation1.weightedMatthewsCorrelation();
      assertEquals(Double.NaN, double0, 0.01);
      
      evaluation1.falseNegativeRate(1);
      evaluation2.recall((-1901));
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "Dept. of Physics, Cambridge University, UK");
      evaluation2.trueNegativeRate(84);
      evaluation2.numFalsePositives(1253);
      evaluation0.numTrueNegatives((-2));
      double double1 = evaluation1.incorrect();
      assertEquals(0.0, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.2076687351203397
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      double double0 = evaluation0.m_SumSqrPredicted;
      evaluation0.m_ComplexityStatisticsAvailable = true;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("setFilterType");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances0);
      Utils.SMALL = (-45.0);
      evaluation1.falseNegativeRate((-2));
      evaluation0.recall((-2));
      evaluation2.falseNegativeRate(2);
      Evaluation evaluation3 = new Evaluation(instances0);
      double[] doubleArray0 = new double[4];
      doubleArray0[0] = (-45.0);
      doubleArray0[1] = (double) (-2);
      doubleArray0[2] = (double) 1;
      doubleArray0[3] = (double) (-1);
      DenseInstance denseInstance0 = new DenseInstance(3059.382244684778, doubleArray0);
      try { 
        evaluation3.updateStatsForClassifier(doubleArray0, denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.2745753883824205
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      char[] charArray0 = new char[5];
      charArray0[1] = 'G';
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      evaluation2.weightedPrecision();
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 3;
      doubleArray0[1] = 319.0;
      doubleArray0[2] = (double) 3;
      evaluation2.updateNumericScores(doubleArray0, doubleArray0, 3.0);
      PrincipalComponents principalComponents0 = new PrincipalComponents();
      SerializedInstancesLoader serializedInstancesLoader0 = new SerializedInstancesLoader();
      try { 
        serializedInstancesLoader0.getNextInstance((Instances) null);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.SerializedInstancesLoader", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.001144140593967
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(0L);
      LWL lWL0 = new LWL();
      lWL0.setKNN((byte)119);
      evaluation0.truePositiveRate((-1846193343));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 44;
      doubleArray0[1] = (double) (byte)119;
      doubleArray0[2] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(479.0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 6;
      SparseInstance sparseInstance1 = new SparseInstance(479.0, doubleArray0, intArray0, 1218);
      sparseInstance1.toStringMaxDecimalDigits(98);
      sparseInstance0.toStringNoWeight(3345);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) lWL0, (Instance) sparseInstance0, false);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      serializedClassifier0.getCurrentModel();
      MockRandom mockRandom0 = new MockRandom((byte)119);
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      mockRandom0.nextFloat();
      byteArray0[3] = (byte)119;
      intArray0[1] = 0;
      intArray0[3] = 16;
      intArray0[4] = (int) (byte)119;
      byteArray0[1] = (byte)119;
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-1L));
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DatabaseLoader databaseLoader0 = new DatabaseLoader();
      databaseLoader0.getStructure();
      databaseLoader0.getNextInstance((Instances) null);
      try { 
        evaluation0.evaluationForSingleInstance((Classifier) serializedClassifier0, (Instance) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.134163907688782
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numTruePositives(2);
      LWL lWL0 = new LWL();
      lWL0.setKNN((-1901));
      double double0 = evaluation0.m_SumClass;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(3);
      double[] doubleArray0 = new double[0];
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.752716370856824
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.ints(2L, 187, 644);
      mockRandom0.nextFloat();
      TestInstances testInstances0 = new TestInstances();
      testInstances0.toString();
      Instances instances0 = testInstances0.generate("No actual dataset provided to use as template");
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumPriorSqrErr;
      LWL lWL0 = new LWL();
      RBFKernel rBFKernel0 = new RBFKernel();
      Capabilities capabilities0 = Capabilities.forInstances(instances0);
      TestInstances.forCapabilities(capabilities0);
      TestInstances testInstances1 = new TestInstances();
      testInstances1.setNumDate((-1846193343));
      testInstances1.setNumDate((-1709));
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.weightedPrecision();
      evaluation1.confusionMatrix();
      evaluation1.weightedTrueNegativeRate();
      evaluation1.toMatrixString();
      double double1 = evaluation0.m_MissingClass;
      double double2 = evaluation1.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      evaluation0.areaUnderPRC((-3022));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      FileSystemHandling.setPermissions(evoSuiteFile0, false, true, false);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.createFolder(evoSuiteFile0);
      SerializedClassifier serializedClassifier2 = new SerializedClassifier();
      SerializedClassifier serializedClassifier3 = new SerializedClassifier();
      SerializedClassifier serializedClassifier4 = new SerializedClassifier();
      Classifier classifier0 = serializedClassifier4.getCurrentModel();
      assertNull(classifier0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4914763529395936
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.ONLY_MULTIINSTANCE;
      findWithCapabilities0.disable(capabilities_Capability0);
      findWithCapabilities0.find();
      Vector<String> vector0 = new Vector<String>();
      MinkowskiDistance[] minkowskiDistanceArray0 = new MinkowskiDistance[4];
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance(instances0);
      minkowskiDistanceArray0[0] = minkowskiDistance0;
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      minkowskiDistanceArray0[1] = minkowskiDistance1;
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance(instances0);
      minkowskiDistanceArray0[2] = minkowskiDistance2;
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance(instances0);
      minkowskiDistanceArray0[3] = minkowskiDistance3;
      instances0.toArray(minkowskiDistanceArray0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@data");
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(3);
      evaluation1.recall((-2166));
      evaluation1.SFEntropyGain();
      // Undeclared exception!
      try { 
        evaluation0.fMeasure((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.307469757346369
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Vector<String> vector0 = new Vector<String>();
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0, (CostMatrix) null);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(498);
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) 498;
      doubleArray0[1] = Double.NaN;
      doubleArray0[2] = (double) 498;
      doubleArray0[3] = (double) 6;
      doubleArray0[4] = (double) 498;
      doubleArray0[5] = 0.7;
      doubleArray0[6] = (double) 498;
      doubleArray0[7] = (double) 6;
      doubleArray0[8] = (double) 6;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.045073072711265
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      MinkowskiDistance[] minkowskiDistanceArray0 = new MinkowskiDistance[6];
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance();
      minkowskiDistanceArray0[0] = minkowskiDistance3;
      minkowskiDistanceArray0[1] = minkowskiDistance0;
      minkowskiDistanceArray0[2] = minkowskiDistance1;
      minkowskiDistanceArray0[3] = minkowskiDistance0;
      minkowskiDistanceArray0[4] = minkowskiDistance0;
      minkowskiDistanceArray0[5] = minkowskiDistance0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      instances0.toArray(minkowskiDistanceArray0);
      evaluation0.falseNegativeRate(2);
      evaluation0.recall(1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      evaluation1.fMeasure((-838));
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte) (-11);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      evaluation1.trueNegativeRate(490);
      evaluation0.sizeOfPredictedRegions();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) (-838);
      doubleArray0[1] = 0.0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = 0.0;
      doubleArray0[4] = (double) (byte) (-11);
      doubleArray0[5] = (double) 0;
      doubleArray0[6] = 0.0;
      doubleArray0[7] = (double) 490;
      try { 
        evaluation0.evaluateModelOnce(doubleArray0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.1100005591616533
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      MinkowskiDistance[] minkowskiDistanceArray0 = new MinkowskiDistance[6];
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance();
      minkowskiDistanceArray0[0] = minkowskiDistance3;
      minkowskiDistanceArray0[1] = minkowskiDistance0;
      minkowskiDistanceArray0[2] = minkowskiDistance1;
      minkowskiDistanceArray0[3] = minkowskiDistance0;
      minkowskiDistanceArray0[4] = minkowskiDistance0;
      minkowskiDistance1.setOrder(2);
      minkowskiDistanceArray0[5] = minkowskiDistance0;
      instances0.toArray(minkowskiDistanceArray0);
      Instances instances1 = testInstances0.generate("p");
      Evaluation evaluation0 = new Evaluation(instances1);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.SFEntropyGain();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation1.weightedPrecision();
      evaluation2.confusionMatrix();
      double double0 = evaluation0.m_SumSchemeEntropy;
      CSVLoader cSVLoader0 = new CSVLoader();
      try { 
        cSVLoader0.getNextInstance(instances0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // CSVLoader can't read data sets incrementally.
         //
         verifyException("weka.core.converters.CSVLoader", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.225155042985273
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      MinkowskiDistance[] minkowskiDistanceArray0 = new MinkowskiDistance[6];
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance();
      minkowskiDistanceArray0[0] = minkowskiDistance3;
      minkowskiDistanceArray0[1] = minkowskiDistance0;
      minkowskiDistanceArray0[2] = minkowskiDistance1;
      minkowskiDistanceArray0[3] = minkowskiDistance0;
      minkowskiDistanceArray0[4] = minkowskiDistance0;
      minkowskiDistanceArray0[5] = minkowskiDistance0;
      Vote vote0 = new Vote();
      vote0.getPreBuiltClassifiers();
      MultiScheme multiScheme0 = new MultiScheme();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(84);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.falseNegativeRate((-1029));
      evaluation0.recall(2);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.fMeasure(29);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.unweightedMacroFmeasure();
      double double0 = evaluation0.matthewsCorrelationCoefficient(25);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.SFMeanEntropyGain();
      double double2 = evaluation0.SFPriorEntropy();
      assertNotEquals(double2, double1, 0.01);
      
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.3112881430321695
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)35);
      MockRandom mockRandom1 = new MockRandom(1);
      mockRandom0.nextFloat();
      SMOreg sMOreg1 = new SMOreg();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      evaluation0.SFPriorEntropy();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 1);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg2 = new SMOreg();
      MockRandom mockRandom2 = new MockRandom();
      LMT lMT0 = new LMT();
      evaluation0.meanPriorAbsoluteError();
      GaussianProcesses gaussianProcesses0 = new GaussianProcesses();
      try { 
        evaluation0.updateStatsForConditionalDensityEstimator(gaussianProcesses0, (Instance) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.functions.GaussianProcesses", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.1277921257638543
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.weightedAreaUnderPRC();
      serializedClassifier0.getCurrentModel();
      evaluation0.m_SumPriorEntropy = Double.NaN;
      MockRandom mockRandom0 = new MockRandom((byte)119);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL0.setKNN(4);
      evaluation0.KBRelativeInformation();
      double double0 = evaluation0.recall(5);
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.falseNegativeRate((byte)119);
      double double1 = evaluation0.weightedFalsePositiveRate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.markSupported();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      MockRandom mockRandom1 = new MockRandom();
      LMT lMT0 = new LMT();
      double double2 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedTruePositiveRate();
      double double4 = evaluation0.weightedFMeasure();
      assertEquals(double4, double3, 0.01);
      
      evaluation0.makeDistribution(Double.NaN);
      assertEquals(Double.NaN, evaluation0.coverageOfTestCasesByPredictedRegions(), 0.01);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[8];
      byteArray0[2] = (byte)12;
      MockRandom mockRandom0 = new MockRandom((byte)12);
      Vector<String> vector0 = new Vector<String>();
      String[] stringArray0 = new String[0];
      Evaluation.main(stringArray0);
      SMOreg sMOreg0 = new SMOreg();
      XRFFLoader xRFFLoader0 = new XRFFLoader();
      try { 
        xRFFLoader0.getDataSet();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // No source has been specified
         //
         verifyException("weka.core.converters.XRFFLoader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.3884225197438314
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[7];
      charArray0[1] = 'F';
      charArray0[2] = 'a';
      charArray0[3] = 'F';
      textDirectoryLoader0.getStructure();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives((-206797271));
      Evaluation evaluation2 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN((-206797271));
      evaluation2.KBRelativeInformation();
      evaluation0.recall(925);
      double double0 = evaluation1.m_SumKBInfo;
      evaluation2.numTrueNegatives((-1461032992));
      evaluation2.toCumulativeMarginDistributionString();
      evaluation0.KBRelativeInformation();
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.falseNegativeRate(4);
      evaluation0.recall(925);
      evaluation1.weightedFalsePositiveRate();
      evaluation1.m_ClassIsNominal = false;
      double[] doubleArray0 = new double[0];
      evaluation0.m_TrainClassVals = doubleArray0;
      evaluation0.fMeasure(2);
      evaluation1.weightedAreaUnderROC();
      evaluation2.numFalsePositives((-1461032992));
      evaluation0.SFMeanPriorEntropy();
      evaluation1.meanAbsoluteError();
      try { 
        evaluation1.toMatrixString();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Evaluation: No confusion matrix possible!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.187631799212455
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numTruePositives(1);
      TestInstances testInstances0 = new TestInstances();
      Environment environment0 = new Environment();
      vote0.setEnvironment(environment0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate("g5+BTu1\"[Nm,lDE");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      Evaluation evaluation3 = new Evaluation(instances0);
      String string0 = evaluation3.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double0 = evaluation2.KBRelativeInformation();
      assertEquals(0.0, double0, 0.01);
      
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation2.falseNegativeRate(2);
      double double1 = evaluation3.recall(2);
      evaluation3.weightedFalsePositiveRate();
      double double2 = evaluation3.fMeasure((-1143));
      Evaluation evaluation4 = new Evaluation(instances1);
      double double3 = evaluation3.m_TotalSizeOfRegions;
      evaluation2.numFalsePositives(4);
      double double4 = evaluation3.falsePositiveRate((-1046));
      assertEquals(double4, double1, 0.01);
      
      evaluation2.setPriors(instances0);
      double double5 = evaluation2.m_SumPriorSqrErr;
      double double6 = evaluation1.trueNegativeRate((-1));
      assertEquals(double6, double2, 0.01);
      
      double double7 = evaluation3.numFalsePositives(267);
      assertEquals(0.0, double7, 0.01);
      
      double double8 = evaluation4.numTrueNegatives((-3147));
      assertEquals(double8, double1, 0.01);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.6964338652581576
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("setOptions");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.priorEntropy();
      AllFilter allFilter0 = new AllFilter();
      // Undeclared exception!
      try { 
        allFilter0.getOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output format defined.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.904866063508584
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      MockRandom mockRandom0 = new MockRandom((-1836L));
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL0.setKNN(1);
      evaluation0.truePositiveRate(84);
      evaluation0.recall(152);
      Instances instances1 = textDirectoryLoader0.getStructure();
      evaluation0.falseNegativeRate(84);
      evaluation0.weightedFalsePositiveRate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.recall(5);
      Evaluation evaluation2 = new Evaluation(instances1, (CostMatrix) null);
      evaluation2.weightedFalsePositiveRate();
      evaluation1.fMeasure(5);
      Evaluation evaluation3 = new Evaluation(instances1);
      evaluation3.weightedAreaUnderROC();
      Evaluation evaluation4 = new Evaluation(instances0);
      evaluation2.numFalsePositives(1413);
      evaluation4.SFMeanPriorEntropy();
      MockRandom mockRandom1 = new MockRandom();
      assertFalse(mockRandom1.equals((Object)mockRandom0));
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2388526125664514
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation0.numTruePositives(2);
      vote0.setDebug(true);
      int[] intArray0 = new int[8];
      intArray0[1] = 6;
      intArray0[3] = 748;
      intArray0[4] = 748;
      intArray0[5] = 2;
      BallNode.calcCentroidPivot(1614, (-206797271), intArray0, instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.falseNegativeRate(3);
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.weightedPrecision();
      double[] doubleArray0 = new double[0];
      // Undeclared exception!
      try { 
        evaluation2.updateNumericScores(doubleArray0, doubleArray0, 6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.921452559457709
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      String string0 = "=== Confusion Matrix ===\n";
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.appendStringToFile(evoSuiteFile1, "=== Confusion Matrix ===\n");
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.falseNegativeRate((-1));
      // Undeclared exception!
      try { 
        evaluation0.updateNumericScores((double[]) null, (double[]) null, 3088.0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.444105356368637
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((byte)12);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN(2);
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      evaluation1.equals(evaluation0);
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances0);
      converterUtils_DataSource0.nextElement(instances0);
      double double1 = evaluation0.m_TotalSizeOfRegions;
      evaluation0.numFalsePositives(83);
      evaluation1.falsePositiveRate(5);
      evaluation0.setPriors(instances0);
      evaluation1.getHeader();
      evaluation1.falseNegativeRate(91);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1605));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1605
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      textDirectoryLoader0.getDirectory();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1129L);
      mockRandom0.nextFloat();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.setRegOptimizer((RegOptimizer) null);
      AdaBoostM1 adaBoostM1_0 = new AdaBoostM1();
      try { 
        Evaluation.wekaStaticWrapper(adaBoostM1_0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No model built yet
         //
         verifyException("weka.classifiers.meta.AdaBoostM1", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.421847739438074
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1129L);
      String[] stringArray0 = new String[7];
      stringArray0[0] = "    s[i.classIndex()] = null;\n";
      stringArray0[1] = "@data";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@data";
      stringArray0[4] = ".arff";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@relation";
      Evaluation.main(stringArray0);
      mockRandom0.nextFloat();
      SMOreg sMOreg0 = new SMOreg();
      instances0.attributeStats((byte)0);
      evaluation0.updateNumericScores((double[]) null, (double[]) null, 0);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1129L, (int[]) null, (-789));
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((Classifier) sMOreg0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.1660899068057584
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(0L);
      LWL lWL0 = new LWL();
      SMO sMO0 = new SMO();
      Kernel kernel0 = sMO0.getKernel();
      sMOreg0.setKernel(kernel0);
      lWL0.setKNN(1);
      evaluation0.truePositiveRate(5);
      int[] intArray0 = new int[3];
      intArray0[0] = 4;
      intArray0[1] = 0;
      intArray0[2] = 3;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5, intArray0, 120);
      double double0 = evaluation0.m_SumSqrPredicted;
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction((double[]) null, (Instance) binarySparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=2.1341639076887824
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SMOreg sMOreg0 = new SMOreg();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      double double0 = evaluation0.SFPriorEntropy();
      assertEquals(0.0, double0, 0.01);
      
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(mockFileInputStream0, 484);
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      SMOreg sMOreg1 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      LMT lMT0 = new LMT();
      double double1 = evaluation0.meanPriorAbsoluteError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.SFSchemeEntropy();
      assertNotEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.5158418895721684
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation0.numTruePositives(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Logistic logistic0 = new Logistic();
      vote0.addPreBuiltClassifier(logistic0);
      vote0.setDebug(true);
      int[] intArray0 = new int[8];
      intArray0[0] = (-206797271);
      intArray0[1] = 6;
      intArray0[3] = 748;
      intArray0[5] = 2;
      BallNode.calcCentroidPivot(6, (-206797271), intArray0, instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      testInstances0.setNumRelationalNumeric(6);
      double double0 = evaluation0.falseNegativeRate(3);
      double double1 = evaluation0.recall(122);
      assertEquals(0.0, double1, 0.01);
      assertEquals(double1, double0, 0.01);
      
      evaluation2.setDiscardPredictions(true);
      double double2 = evaluation1.weightedTruePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      double double3 = evaluation0.correct();
      assertEquals(0.0, double3, 0.01);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.9280478396261032
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      SGD sGD0 = new SGD();
      MockRandom mockRandom0 = new MockRandom((byte)119);
      mockRandom0.doubles((double) 1, (double) 2);
      textDirectoryLoader0.listOptions();
      Object[] objectArray0 = new Object[0];
      int[] intArray0 = new int[4];
      mockRandom0.nextFloat();
      intArray0[1] = 0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      System.setCurrentTimeMillis((-1L));
      evaluation0.unclassified();
      try { 
        evaluation0.crossValidateModel((Classifier) serializedClassifier0, instances0, 16, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't have more folds than instances!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.0364505083678397
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.numFalseNegatives(5);
      Evaluation evaluation2 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN((-206797271));
      evaluation0.KBRelativeInformation();
      evaluation1.recall((-206797271));
      double double0 = evaluation2.m_SumPriorSqrErr;
      evaluation1.numTrueNegatives(5);
      String string0 = evaluation0.toCumulativeMarginDistributionString();
      assertEquals(" -1       0    \n", string0);
      
      double double1 = evaluation1.KBRelativeInformation();
      MultiScheme multiScheme0 = new MultiScheme();
      double double2 = evaluation1.falseNegativeRate(1);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation2.recall((-997));
      assertEquals(0.0, double3, 0.01);
      
      double double4 = evaluation2.weightedFalsePositiveRate();
      assertEquals(double4, double1, 0.01);
      
      double double5 = evaluation1.m_SumSchemeEntropy;
      Evaluation evaluation3 = new Evaluation(instances0);
      double double6 = evaluation0.m_TotalSizeOfRegions;
      evaluation3.numFalsePositives((byte)119);
      evaluation1.setPriors(instances0);
      double double7 = evaluation0.areaUnderROC(5);
      assertEquals(double7, double4, 0.01);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.0264805138932787
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      MultiScheme multiScheme0 = new MultiScheme();
      MockRandom mockRandom0 = new MockRandom();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("5R12fcZ6}N(`0P", arrayList0, 187);
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Class index is negative (not set)!
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) 1);
      sMOreg0.setC(6);
      mockRandom0.longs((long) 2);
      MockRandom mockRandom1 = new MockRandom(392L);
      mockRandom0.nextFloat();
      RegOptimizer regOptimizer0 = new RegOptimizer();
      SMOreg sMOreg1 = new SMOreg();
      RegOptimizer regOptimizer1 = sMOreg1.getRegOptimizer();
      sMOreg0.setRegOptimizer(regOptimizer1);
      // Undeclared exception!
      try { 
        evaluation0.updateMargins((double[]) null, 1908, (-1727.384729085167));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.6721945007602976
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      evaluation1.falseNegativeRate(1);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances0, (CostMatrix) null);
      double double0 = evaluation3.m_SumPriorSqrErr;
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      SparseInstance sparseInstance0 = new SparseInstance(190);
      BinarySparseInstance binarySparseInstance0 = null;
      try {
        binarySparseInstance0 = new BinarySparseInstance((-2));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.3608230818625247
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'F';
      charArray0[3] = 'R';
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate("@data");
      testInstances0.setNumNominal((-352));
      Evaluation evaluation1 = new Evaluation(instances0);
      Evaluation evaluation2 = new Evaluation(instances0);
      Evaluation evaluation3 = new Evaluation(instances1);
      testInstances0.setNumDate((-352));
      double double0 = evaluation3.falseNegativeRate(2611);
      Evaluation evaluation4 = new Evaluation(instances1);
      evaluation4.setDiscardPredictions(false);
      assertFalse(evaluation4.getDiscardPredictions());
      
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) (-2);
      doubleArray0[1] = (double) 2611;
      doubleArray0[2] = (double) (-2);
      evaluation2.falseNegativeRate((-1));
      double double1 = evaluation2.recall((-4351));
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.trueNegativeRate(13);
      assertEquals(0.0, double2, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.m_SumPriorSqrErr = (double) (byte)119;
      Predicate<Object> predicate0 = Predicate.isEqual((Object) textDirectoryLoader0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      instances0.removeIf(predicate3);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "@relation");
      int int0 = 16;
      int[] intArray0 = new int[6];
      byteArray0[3] = (byte)119;
      intArray0[1] = 0;
      intArray0[3] = 16;
      intArray0[4] = (int) (byte)119;
      intArray0[1] = (int) (byte)119;
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) (byte)119;
      // Undeclared exception!
      try { 
        evaluation0.updateMargins(doubleArray0, (-1522), 0.5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1522
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)35);
      sMOreg0.setC(319.0);
      double[] doubleArray0 = new double[2];
      mockRandom0.longs(0L);
      Evaluation.k_MarginResolution = 0;
      MockRandom mockRandom1 = new MockRandom((-3472L));
      mockRandom0.nextFloat();
      RegOptimizer regOptimizer0 = new RegOptimizer();
      sMOreg0.setRegOptimizer(regOptimizer0);
      int[] intArray0 = new int[4];
      intArray0[0] = 0;
      evaluation0.updateMargins(doubleArray0, 0, 844.0767273916633);
      try { 
        sMOreg0.distributionForInstance((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.AbstractClassifier", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.5378975319224093
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.m_SumSqrPredicted;
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.matthewsCorrelationCoefficient(2);
      TestInstances testInstances0 = new TestInstances();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation1.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.8057907880957735
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.kappa();
      assertEquals(1.0, double0, 0.01);
      
      MultiScheme multiScheme1 = new MultiScheme();
      capabilities0.disableAllClasses();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      DataInputStream dataInputStream1 = new DataInputStream(dataInputStream0);
      dataInputStream1.available();
      ConverterUtils.DataSource.read((InputStream) dataInputStream1);
      double double1 = evaluation0.unweightedMacroFmeasure();
      double double2 = evaluation0.m_TotalCost;
      double double3 = evaluation0.weightedFMeasure();
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, double3, 0.01);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.2269762206150845
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate((String) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives((byte)12);
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN(2);
      evaluation0.numFalseNegatives(1);
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      lWL2.setKNN(6);
      double double0 = evaluation1.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(pipedInputStream0, 2);
      ConverterUtils.DataSource.read((InputStream) bufferedInputStream0);
      MockRandom mockRandom0 = new MockRandom();
      evaluation0.falseNegativeRate(2);
      // Undeclared exception!
      try { 
        evaluation0.recall((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      Vote vote0 = new Vote();
      TestInstances testInstances0 = new TestInstances();
      Environment environment0 = new Environment();
      vote0.setEnvironment(environment0);
      TestInstances testInstances1 = new TestInstances();
      Instances instances0 = testInstances1.generate("g5+BTu1\"[Nm,lDE");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate((-2));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.7648213741176386
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      Evaluation evaluation1 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      boolean boolean0 = evaluation1.m_ComplexityStatisticsAvailable;
      double double0 = evaluation1.numFalseNegatives(2141);
      assertEquals(0.0, double0, 0.01);
      
      TestInstances testInstances0 = new TestInstances();
      Environment environment0 = new Environment();
      vote0.setEnvironment(environment0);
      Instances instances1 = testInstances0.generate("=== Cross-validation ===\n");
      Evaluation evaluation2 = new Evaluation(instances1);
      Evaluation evaluation3 = new Evaluation(instances0);
      double double1 = evaluation0.truePositiveRate(6);
      evaluation0.recall(483);
      double double2 = evaluation1.falseNegativeRate(1);
      assertEquals(0.0, double2, 0.01);
      
      double double3 = evaluation0.weightedFalsePositiveRate();
      MockRandom mockRandom0 = new MockRandom();
      LMT lMT0 = new LMT();
      double double4 = evaluation0.m_MissingClass;
      Evaluation evaluation4 = new Evaluation(instances1);
      double double5 = evaluation4.weightedTruePositiveRate();
      assertNotEquals(double5, double1, 0.01);
      
      double double6 = evaluation4.weightedFMeasure();
      assertEquals(double6, double3, 0.01);
      assertEquals(Double.NaN, double6, 0.01);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.2620564081603503
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      MockRandom mockRandom0 = new MockRandom(0L);
      mockRandom0.nextFloat();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("No actual dataset provided to use as template");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(2);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setKNN(1);
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      MockRandom mockRandom1 = new MockRandom();
      double double1 = evaluation0.falseNegativeRate(45);
      double double2 = evaluation0.recall(0);
      assertEquals(double2, double1, 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.7063260587210523
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      Vote vote0 = new Vote();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      Environment environment0 = new Environment();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " ");
      Environment environment1 = new Environment();
      vote0.setEnvironment(environment1);
      TestInstances testInstances1 = new TestInstances();
      String string0 = "g5+BTu1\"[Nm,lDE";
      Instances instances0 = testInstances1.generate(" ");
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.truePositiveRate(6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.539283892223418
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation0.numTruePositives(2);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      MockRandom mockRandom0 = new MockRandom(4);
      mockRandom0.doubles(0.0, (double) 5);
      instances0.resampleWithWeights((Random) mockRandom0, (boolean[]) null);
      vote0.setDebug(true);
      int[] intArray0 = new int[8];
      intArray0[0] = (-206797271);
      intArray0[1] = 6;
      intArray0[3] = 748;
      intArray0[4] = 748;
      intArray0[5] = 2;
      BallNode.calcCentroidPivot(6, (-206797271), intArray0, instances0);
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      testInstances0.setNumRelationalNumeric(6);
      double double0 = evaluation0.falseNegativeRate(3);
      testInstances0.setNumString(1981);
      evaluation0.recall(122);
      evaluation2.setDiscardPredictions(true);
      double double1 = evaluation1.weightedTruePositiveRate();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation2.trueNegativeRate(500);
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, evaluation2.unweightedMicroFmeasure(), 0.01);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=2.883321747098406
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      evaluation0.weightedAreaUnderPRC();
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
      
      serializedClassifier0.getCurrentModel();
      evaluation0.m_SumPriorEntropy = Double.NaN;
      MockRandom mockRandom0 = new MockRandom((byte)119);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL0.setKNN(4);
      evaluation0.truePositiveRate(0);
      evaluation0.recall(5);
      evaluation0.falseNegativeRate((byte)119);
      evaluation0.weightedFalsePositiveRate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      evaluation0.falsePositiveRate(500);
      evaluation0.setPriors(instances0);
      evaluation0.getHeader();
      double double0 = evaluation0.m_SumPriorEntropy;
      evaluation0.pctIncorrect();
      evaluation0.setNumericPriorsFromBuffer();
      assertEquals(Double.NaN, evaluation0.weightedFalsePositiveRate(), 0.01);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.122314391138097
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "=== Confusion Matrix ===\n");
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile1);
      FileSystemHandling.createFolder(evoSuiteFile1);
      SGDText sGDText0 = new SGDText();
      Capabilities capabilities0 = sGDText0.getCapabilities();
      Capabilities.Capability capabilities_Capability0 = Capabilities.Capability.STRING_CLASS;
      capabilities0.disableDependency(capabilities_Capability0);
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances0 = testInstances0.generate("getTechnicalInformation");
      MultiScheme multiScheme0 = new MultiScheme();
      capabilities0.disableAllClassDependencies();
      FileSystemHandling.shouldAllThrowIOExceptions();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.trueNegativeRate(1);
      instances0.compactify();
      double double1 = evaluation0.falseNegativeRate((-1));
      assertEquals(double1, double0, 0.01);
      
      evaluation0.numTrueNegatives((-2));
      double double2 = evaluation0.numTrueNegatives(15000);
      assertEquals(0.0, double2, 0.01);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.4438656505524006
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs(0L);
      LWL lWL0 = new LWL();
      lWL0.setKNN((byte)119);
      double double0 = evaluation0.truePositiveRate((-1846193343));
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 44;
      doubleArray0[1] = (double) (byte)119;
      doubleArray0[2] = (double) 4;
      SparseInstance sparseInstance0 = new SparseInstance(479.0, doubleArray0);
      int[] intArray0 = new int[3];
      intArray0[0] = 6;
      intArray0[1] = 6;
      SparseInstance sparseInstance1 = new SparseInstance(479.0, doubleArray0, intArray0, 1218);
      sparseInstance1.toStringMaxDecimalDigits(98);
      double double1 = evaluation0.recall(6);
      assertEquals(0.0, double1, 0.01);
      
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double double2 = evaluation0.m_SumPriorSqrErr;
      double double3 = evaluation0.trueNegativeRate(0);
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.numFalsePositives((byte)119);
      assertEquals(0.0, double4, 0.01);
      
      double double5 = evaluation0.numTrueNegatives(6);
      assertEquals(0.0, double5, 0.01);
      assertEquals(double5, double4, 0.01);
      assertEquals(0.0, evaluation0.SFEntropyGain(), 0.01);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.1463096566766366
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      minkowskiDistance1.setDontNormalize(false);
      MinkowskiDistance[] minkowskiDistanceArray0 = new MinkowskiDistance[6];
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance();
      minkowskiDistanceArray0[0] = minkowskiDistance3;
      minkowskiDistanceArray0[1] = minkowskiDistance0;
      minkowskiDistanceArray0[2] = minkowskiDistance0;
      minkowskiDistanceArray0[3] = minkowskiDistance0;
      minkowskiDistanceArray0[4] = minkowskiDistance0;
      minkowskiDistanceArray0[5] = minkowskiDistance0;
      Vote vote0 = new Vote();
      vote0.getPreBuiltClassifiers();
      Object object0 = new Object();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      Vector<String> vector0 = new Vector<String>();
      Evaluation evaluation1 = new Evaluation(instances0);
      double double0 = evaluation1.errorRate();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(2);
      SparseInstance sparseInstance0 = new SparseInstance((SparseInstance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(1);
      double double1 = evaluation1.rootMeanPriorSquaredError();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation1.avgCost();
      assertEquals(double2, double0, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=2.6800666257388834
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance();
      SimpleLogistic simpleLogistic0 = new SimpleLogistic();
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances1 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances1.generate("weka/core/Capabilities.props");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.listOptions();
      TestInstances.forCapabilities(capabilities0);
      testInstances1.getWords();
      evaluation0.recall((-1));
      double double0 = evaluation0.m_Unclassified;
      double double1 = evaluation0.fMeasure(116);
      Evaluation evaluation1 = new Evaluation(instances1);
      double double2 = evaluation1.m_TotalSizeOfRegions;
      evaluation0.numFalsePositives((-1));
      double double3 = evaluation1.falsePositiveRate(481);
      assertEquals(double3, double1, 0.01);
      assertEquals(Double.NaN, evaluation1.meanAbsoluteError(), 0.01);
      assertEquals(Double.NaN, evaluation1.unweightedMicroFmeasure(), 0.01);
      
      evaluation0.setPriors(instances0);
      evaluation0.getHeader();
      double double4 = evaluation0.falseNegativeRate(778);
      assertEquals(0.0, double4, 0.01);
      
      evaluation0.recall(5);
      double double5 = evaluation0.meanAbsoluteError();
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.1986563401826844
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.m_ConfLevel = (double) (byte)119;
      evaluation0.toClassDetailsString("wrU,[$l:OD");
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      Evaluation evaluation1 = new Evaluation(instances0);
      PipedReader pipedReader0 = new PipedReader((byte)119);
      evaluation1.numFalseNegatives(16);
      evaluation0.pctCorrect();
      Evaluation evaluation2 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      lWL0.setKNN(461);
      double double0 = evaluation1.m_TotalCost;
      evaluation2.recall((byte)119);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, (-2), 461);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.682786866966367
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      double double0 = evaluation0.numTruePositives(2);
      int[] intArray0 = new int[8];
      intArray0[1] = 6;
      intArray0[4] = 748;
      intArray0[5] = 2;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      Evaluation evaluation1 = new Evaluation(instances1);
      Evaluation evaluation2 = new Evaluation(instances1);
      double double1 = evaluation0.falseNegativeRate(3);
      assertEquals(double1, double0, 0.01);
      
      double double2 = evaluation0.recall(122);
      double double3 = evaluation0.SFEntropyGain();
      assertEquals(double3, double2, 0.01);
      
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 432.67;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[4] = (double) 6;
      doubleArray0[5] = (double) 2;
      double double4 = evaluation2.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double4, 0.01);
      
      double double5 = evaluation1.numInstances();
      assertEquals(0.0, double5, 0.01);
      
      evaluation2.confusionMatrix();
      assertEquals(0.0, evaluation2.numInstances(), 0.01);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.9446995951864716
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      evaluation0.numTruePositives(2);
      int[] intArray0 = new int[8];
      intArray0[3] = (-1901);
      textDirectoryLoader0.getDirectory();
      intArray0[4] = (-1901);
      intArray0[6] = 2;
      SimpleLogistic simpleLogistic0 = new SimpleLogistic(4, true, false);
      Capabilities capabilities0 = simpleLogistic0.getCapabilities();
      TestInstances testInstances0 = TestInstances.forCapabilities(capabilities0);
      Instances instances1 = testInstances0.generate(".arff");
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader1.listOptions();
      TestInstances.forCapabilities(capabilities0);
      testInstances0.getWords();
      evaluation0.recall((-1886));
      double double0 = evaluation0.m_Unclassified;
      Evaluation evaluation1 = new Evaluation(instances1);
      double double1 = evaluation1.m_TotalSizeOfRegions;
      evaluation1.numFalsePositives(4);
      evaluation1.falsePositiveRate((-1886));
      Instances instances2 = evaluation0.getHeader();
      Evaluation evaluation2 = new Evaluation(instances2, (CostMatrix) null);
      String string0 = evaluation2.toSummaryString(true);
      evaluation2.falseNegativeRate(13);
      evaluation0.recall(115);
      LogitBoost logitBoost0 = new LogitBoost();
      String string1 = Evaluation.makeOptionString(logitBoost0, true);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 85
  /*Coverage entropy=2.899054925494056
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Vector<String> vector0 = new Vector<String>();
      evaluation0.errorRate();
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      double double0 = evaluation0.recall(1);
      double double1 = evaluation0.KBMeanInformation();
      double double2 = evaluation0.fMeasure(6161);
      assertEquals(double2, double0, 0.01);
      
      double double3 = evaluation0.weightedTruePositiveRate();
      assertEquals(double3, double1, 0.01);
      
      evaluation0.trueNegativeRate((byte)119);
      evaluation0.getRevision();
      assertEquals(Double.NaN, evaluation0.weightedRecall(), 0.01);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=2.454398086663251
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation1.numTruePositives(6);
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation2 = new Evaluation(instances1);
      evaluation0.weightedMatthewsCorrelation();
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setDebug(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "@relation";
      stringArray0[1] = "@relation";
      stringArray0[2] = ".bsi";
      stringArray0[3] = "@data";
      stringArray0[4] = "@data";
      stringArray0[5] = "@relation";
      stringArray0[6] = "@data";
      stringArray0[7] = ".arff";
      AbstractClassifier.runClassifier(additiveRegression0, stringArray0);
      evaluation1.getRevision();
      evaluation0.weightedAreaUnderPRC();
      Object object0 = new Object();
      try { 
        evaluation1.evaluateModel((Classifier) additiveRegression0, instances0, (Object[]) stringArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextBoolean();
      mockRandom0.longs((long) (byte)35);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 2;
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      doubleArray0[1] = (double) 1;
      int[] intArray0 = new int[8];
      intArray0[1] = (int) (byte)35;
      intArray0[2] = 1;
      intArray0[3] = (-1);
      intArray0[4] = 4;
      intArray0[5] = 2;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      Attribute attribute0 = new Attribute("RtYH6d", linkedList0);
      instances0.insertAttributeAt(attribute0, 1);
      DenseInstance denseInstance0 = new DenseInstance(1, doubleArray0);
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      evaluation0.equals(chebyshevDistance0);
      try { 
        evaluation0.updateStatsForPredictor((-2573.0), denseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.0608185358593016
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[5];
      byteArray0[4] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate((String) null);
      Evaluation evaluation1 = new Evaluation(instances1);
      evaluation0.numFalseNegatives(1446);
      Evaluation evaluation2 = new Evaluation(instances1);
      LWL lWL0 = new LWL();
      lWL0.setKNN((-2));
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = 0.0;
      doubleArray0[3] = (double) (byte)119;
      doubleArray0[4] = 0.0;
      doubleArray0[5] = 0.0;
      doubleArray0[6] = (double) (-2);
      doubleArray0[7] = (double) 2;
      evaluation1.m_MarginCounts = doubleArray0;
      CheckOptionHandler checkOptionHandler0 = new CheckOptionHandler();
      ChebyshevDistance chebyshevDistance0 = new ChebyshevDistance();
      boolean boolean0 = evaluation2.m_ComplexityStatisticsAvailable;
      ConverterUtils.DataSource converterUtils_DataSource0 = new ConverterUtils.DataSource(instances1);
      Instance instance0 = converterUtils_DataSource0.nextElement(instances1);
      try { 
        evaluation0.updateStatsForPredictor((-2), instance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.0011441405939667
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte byte0 = (byte)35;
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.longs((long) (byte)35);
      double[] doubleArray0 = new double[2];
      LWL lWL0 = new LWL();
      AbstractClassifier.makeCopies(vote0, 498);
      int int0 = 44;
      lWL0.setKNN(44);
      evaluation0.truePositiveRate(4);
      SparseInstance sparseInstance0 = new SparseInstance((-3472L), doubleArray0);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        evaluation0.makeDistribution(4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      costSensitiveClassifier0.getCostMatrix();
      Object[][] objectArray0 = new Object[9][0];
      objectArray0[0] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Object[] objectArray1 = new Object[0];
      objectArray0[1] = objectArray1;
      objectArray0[2] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[3] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Object object0 = new Object();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Vector<String> vector0 = new Vector<String>();
      Evaluation evaluation0 = new Evaluation(instances0);
      SparseInstance sparseInstance0 = new SparseInstance(2114);
      try { 
        evaluation0.evaluateModelOnce((-1217.65), (Instance) sparseInstance0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1217
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.9354046201849306
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      int[] intArray0 = new int[2];
      intArray0[0] = 5;
      intArray0[1] = 5;
      BallNode.calcCentroidPivot((int) (byte)119, 4, intArray0, instances0);
      try { 
        evaluation1.evaluateModelOnce((Classifier) lWL0, (Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=2.1224858948253797
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 246.12282250053;
      doubleArray0[1] = (-1.0E100);
      doubleArray0[2] = 4.94E-321;
      doubleArray0[3] = 319.1350712763463;
      doubleArray0[4] = 515.9;
      doubleArray0[5] = 0.8;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(10.0, doubleArray0);
      try { 
        evaluation0.evaluateModelOnceAndRecordPrediction(doubleArray0, (Instance) binarySparseInstance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      byte[] byteArray0 = new byte[4];
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Object object0 = new Object();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      MockRandom mockRandom0 = new MockRandom();
      String[] stringArray0 = new String[3];
      stringArray0[0] = ".bsi";
      stringArray0[1] = "  ?    ";
      stringArray0[2] = ".bsi";
      try { 
        evaluation0.crossValidateModel("  ?    ", instances0, 1452, stringArray0, (Random) mockRandom0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class called:   ?    
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.465030623937304
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      MockRandom mockRandom0 = new MockRandom(1);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      lWL2.setKNN(50);
      evaluation0.truePositiveRate(102);
      evaluation0.recall(0);
      evaluation0.falseNegativeRate(113);
      evaluation0.weightedFalsePositiveRate();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      ConverterUtils.DataSource.read((InputStream) pushbackInputStream0);
      try { 
        evaluation0.evaluateModel((Classifier) lWL0, (Instances) null, (Object[]) testInstances0.DEFAULT_WORDS);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=2.814666996603186
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      evaluation0.numTruePositives(2);
      int[] intArray0 = new int[8];
      intArray0[1] = 1;
      intArray0[4] = 720;
      intArray0[5] = 2;
      TestInstances testInstances0 = new TestInstances();
      Instances instances1 = testInstances0.generate(".arff");
      evaluation0.numFalseNegatives(1);
      Evaluation evaluation1 = new Evaluation(instances1);
      LWL lWL0 = new LWL();
      lWL0.setKNN(3685);
      double double0 = evaluation0.m_SumSqrErr;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      Evaluation evaluation2 = new Evaluation(instances0);
      testInstances0.toString();
      Evaluation evaluation3 = new Evaluation(instances0);
      evaluation3.m_SumErr = (-2141.5629700645436);
      evaluation3.falseNegativeRate(106);
      evaluation2.recall(106);
      evaluation2.unweightedMacroFmeasure();
      evaluation2.relativeAbsoluteError();
      double double1 = evaluation1.m_SumSqrClass;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID(720, (char[]) null, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.7653291326451686
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.precision((-206797271));
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation((Instances) null, costMatrix0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=1.6841038364988299
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate();
      Evaluation evaluation0 = new Evaluation(instances0);
      // Undeclared exception!
      try { 
        evaluation0.precision((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      Instances instances1 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[1];
      objectArray0[0] = (Object) textDirectoryLoader0;
      try { 
        evaluation0.evaluateModel((Classifier) serializedClassifier0, instances1, objectArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.converters.TextDirectoryLoader cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.7805006998594135
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)119;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)119;
      byteArray0[3] = (byte)119;
      byteArray0[4] = (byte)119;
      byteArray0[5] = (byte)119;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Object object0 = new Object();
      Object[] objectArray0 = new Object[0];
      evaluation0.evaluateModel((Classifier) serializedClassifier0, instances0, objectArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedClassifier serializedClassifier1 = new SerializedClassifier();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Evaluation evaluation1 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      int int0 = 9;
      int[] intArray0 = new int[3];
      intArray0[0] = (int) (byte)119;
      intArray0[1] = 472;
      intArray0[2] = (int) (byte)119;
      // Undeclared exception!
      try { 
        BallNode.calcCentroidPivot(6, 9, intArray0, instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("weka.core.neighboursearch.balltrees.BallNode", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=2.4407696753202024
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      MockRandom mockRandom0 = new MockRandom((byte)35);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      costSensitiveClassifier0.getCostMatrix();
      Object[][] objectArray0 = new Object[9][0];
      objectArray0[0] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Object[] objectArray1 = new Object[0];
      objectArray0[1] = objectArray1;
      objectArray0[2] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[3] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Object object0 = new Object();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getMisses();
      Vector<String> vector0 = new Vector<String>();
      Evaluation evaluation0 = new Evaluation(instances0);
      double double0 = evaluation0.recall((byte)12);
      assertEquals(0.0, double0, 0.01);
      
      double double1 = evaluation0.KBMeanInformation();
      assertEquals(Double.NaN, double1, 0.01);
      
      double double2 = evaluation0.numFalsePositives(745);
      assertEquals(0.0, double2, 0.01);
      
      evaluation0.numTrueNegatives(2207);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.21798344858705
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      MockRandom mockRandom0 = new MockRandom((byte)35);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      Evaluation evaluation1 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.setNumDate((-781));
      Evaluation evaluation2 = new Evaluation(instances0);
      double double0 = evaluation2.weightedPrecision();
      assertEquals(Double.NaN, double0, 0.01);
      
      double double1 = evaluation1.weightedAreaUnderPRC();
      MockRandom mockRandom1 = new MockRandom();
      double double2 = evaluation1.weightedFMeasure();
      assertEquals(0.0, evaluation1.SFEntropyGain(), 0.01);
      assertEquals(double2, double1, 0.01);
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.5304078166856883
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      MockRandom mockRandom0 = new MockRandom();
      mockRandom0.nextFloat();
      TestInstances testInstances0 = new TestInstances();
      Instances instances0 = testInstances0.generate("No actual dataset provided to use as template");
      Evaluation evaluation0 = new Evaluation(instances0);
      evaluation0.numFalseNegatives(2);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setKNN(1);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      MockRandom mockRandom1 = new MockRandom();
      double double0 = evaluation0.m_SumSqrErr;
      MockRandom mockRandom2 = new MockRandom();
      evaluation0.toClassDetailsString("numFoldsTipText");
      evaluation0.fMeasure(0);
      evaluation0.falseNegativeRate(478);
      // Undeclared exception!
      try { 
        evaluation0.recall((-956));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -956
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.3074153952359477
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      double double0 = evaluation0.m_SumSqrPredicted;
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.falseNegativeRate(42);
      evaluation0.truePositiveRate(3);
      TestInstances testInstances0 = new TestInstances();
      testInstances0.generate("@data");
      SMO sMO0 = new SMO();
      evaluation0.toSummaryString(".arff", false);
      MockRandom mockRandom0 = new MockRandom(1497L);
      mockRandom0.longs((long) 4);
      MockRandom mockRandom1 = new MockRandom((-1788L));
      MockRandom mockRandom2 = new MockRandom(650L);
      mockRandom2.nextFloat();
      SMOreg sMOreg1 = new SMOreg();
      sMOreg0.globalInfo();
      SimpleKMeans simpleKMeans0 = new SimpleKMeans();
      try { 
        simpleKMeans0.setDistanceFunction((DistanceFunction) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // SimpleKMeans currently only supports the Euclidean and Manhattan distances.
         //
         verifyException("weka.clusterers.SimpleKMeans", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=1.629820911715024
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      evaluation0.numTruePositives(2);
      int[] intArray0 = new int[3];
      intArray0[0] = 1;
      intArray0[1] = (int) (byte)35;
      intArray0[2] = 748;
      BallNode.calcCentroidPivot(2569, 69, intArray0, instances0);
      double[] doubleArray0 = new double[3];
      doubleArray0[0] = (double) 6;
      doubleArray0[1] = (double) (-1127281206);
      doubleArray0[2] = (double) 3;
      SparseInstance sparseInstance0 = new SparseInstance(69, doubleArray0, intArray0, 16);
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(sparseInstance0);
      binarySparseInstance0.dataset();
      instances0.add((Instance) binarySparseInstance0);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0, (CostMatrix) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.6999732158331993
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      MockRandom mockRandom0 = new MockRandom(1);
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      LWL lWL2 = new LWL();
      lWL2.setKNN(50);
      evaluation0.truePositiveRate(102);
      evaluation0.recall(0);
      MultiScheme multiScheme0 = new MultiScheme();
      evaluation0.falseNegativeRate(1);
      double double0 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double0, 0.01);
      
      evaluation0.falsePositiveRate(2);
      evaluation0.setPriors(instances0);
      evaluation0.getHeader();
      double double1 = evaluation0.falseNegativeRate(113);
      double double2 = evaluation0.recall(2);
      assertEquals(double2, double1, 0.01);
      
      double double3 = evaluation0.weightedAreaUnderPRC();
      assertEquals(Double.NaN, double3, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.4013363139659516
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      TestInstances testInstances0 = new TestInstances();
      MinkowskiDistance minkowskiDistance0 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance1 = new MinkowskiDistance();
      MinkowskiDistance minkowskiDistance2 = new MinkowskiDistance();
      MinkowskiDistance[] minkowskiDistanceArray0 = new MinkowskiDistance[6];
      MinkowskiDistance minkowskiDistance3 = new MinkowskiDistance();
      minkowskiDistanceArray0[0] = minkowskiDistance3;
      minkowskiDistanceArray0[1] = minkowskiDistance0;
      minkowskiDistanceArray0[2] = minkowskiDistance1;
      minkowskiDistanceArray0[3] = minkowskiDistance0;
      minkowskiDistanceArray0[4] = minkowskiDistance0;
      minkowskiDistance3.setInvertSelection(false);
      minkowskiDistanceArray0[5] = minkowskiDistance0;
      Vote vote0 = new Vote();
      vote0.getPreBuiltClassifiers();
      MultiScheme multiScheme0 = new MultiScheme();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(84);
      instances0.add((Instance) binarySparseInstance0);
      evaluation0.falseNegativeRate((-1029));
      evaluation0.recall(2);
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      evaluation0.fMeasure(29);
      Evaluation evaluation1 = null;
      try {
        evaluation1 = new Evaluation(instances0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.8948221212612517
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      SMOreg sMOreg0 = new SMOreg();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      double double0 = evaluation0.weightedAreaUnderPRC();
      serializedClassifier0.getCurrentModel();
      MockRandom mockRandom0 = new MockRandom((-1185L));
      LWL lWL0 = new LWL();
      LWL lWL1 = new LWL();
      lWL1.setKNN(11);
      lWL0.setKNN(1);
      evaluation0.truePositiveRate(2);
      evaluation0.recall(1);
      double double1 = evaluation0.falseNegativeRate((-1));
      assertEquals(0.0, double1, 0.01);
      
      double double2 = evaluation0.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
      
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConverterUtils.DataSource.read((InputStream) pipedInputStream0);
      MockRandom mockRandom1 = new MockRandom();
      LMT lMT0 = new LMT();
      double double3 = evaluation0.coverageOfTestCasesByPredictedRegions();
      assertEquals(double3, double0, 0.01);
      
      double double4 = evaluation0.weightedTruePositiveRate();
      evaluation0.weightedFMeasure();
      double double5 = evaluation0.rootMeanSquaredError();
      assertEquals(double5, double4, 0.01);
      assertEquals(0.0, evaluation0.SFSchemeEntropy(), 0.01);
      assertEquals(Double.NaN, double5, 0.01);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.1050296313349124
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'F';
      charArray0[2] = 'O';
      charArray0[3] = '5';
      charArray0[4] = 'P';
      charArray0[5] = '\u008D';
      charArray0[6] = '$';
      textDirectoryLoader0.getDataSet();
      Evaluation evaluation1 = new Evaluation(instances0);
      String string0 = evaluation1.toSummaryString();
      assertEquals(0.0, evaluation1.unclassified(), 0.01);
      assertEquals("\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      int int0 = 3591;
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((-352), charArray0, 3591);
        fail("Expecting exception: ArithmeticException");
      
      } catch(ArithmeticException e) {
         //
         // / by zero
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.9753765189753083
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      Vote vote0 = new Vote();
      double double0 = evaluation0.m_SumSqrPredicted;
      SMOreg sMOreg0 = new SMOreg();
      int int0 = 496;
      evaluation0.truePositiveRate(496);
      TestInstances testInstances0 = new TestInstances();
      Evaluation evaluation1 = new Evaluation(instances0);
      try { 
        evaluation0.correlationCoefficient();
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't compute correlation coefficient: class is nominal!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.0928838823470586
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)35;
      byteArray0[1] = (byte)102;
      byteArray0[2] = (byte)12;
      byteArray0[3] = (byte)35;
      byteArray0[4] = (byte)12;
      byteArray0[5] = (byte)12;
      byteArray0[7] = (byte)12;
      TextDirectoryLoader textDirectoryLoader1 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      Evaluation evaluation0 = new Evaluation(instances0);
      String string0 = evaluation0.toSummaryString(false);
      assertEquals(0.0, evaluation0.unclassified(), 0.01);
      assertEquals(0.0, evaluation0.SFPriorEntropy(), 0.01);
      assertEquals("=== Summary ===\n\nTotal Number of Instances                0     \n", string0);
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte) (-125);
      byteArray0[2] = (byte) (-54);
      ZeroR zeroR0 = new ZeroR();
      zeroR0.toSource("costMatrixTipText");
      Evaluation.wekaStaticWrapper(zeroR0, "x#swf*T");
      CostMatrix costMatrix0 = new CostMatrix(114);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=2.7978358662388025
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      FindWithCapabilities findWithCapabilities1 = new FindWithCapabilities();
      findWithCapabilities1.getMisses();
      Vector<String> vector0 = new Vector<String>();
      Evaluation evaluation0 = new Evaluation(instances0, (CostMatrix) null);
      evaluation0.KBInformation();
      evaluation0.precision((byte)119);
      double[] doubleArray0 = new double[18];
      doubleArray0[0] = (double) (-857);
      doubleArray0[1] = 0.0;
      DenseInstance denseInstance0 = new DenseInstance(498, doubleArray0);
      denseInstance0.copy();
      evaluation0.falseNegativeRate((-4696));
      LWL lWL0 = new LWL();
      evaluation0.recall(2);
      evaluation0.KBMeanInformation();
      evaluation0.numFalsePositives(21);
      evaluation0.numTrueNegatives(1);
      boolean boolean0 = evaluation0.getDiscardPredictions();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[6];
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getDataSet();
      costSensitiveClassifier0.getCostMatrix();
      costSensitiveClassifier0.getCostMatrix();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.mark(95);
      MockRandom mockRandom0 = new MockRandom();
      Evaluation.evaluateModel((Classifier) costSensitiveClassifier0, (String[]) null);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.7094458197175149
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      MockRandom mockRandom0 = new MockRandom(987L);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[4];
      charArray0[0] = '$';
      charArray0[1] = 'G';
      charArray0[2] = 'c';
      charArray0[3] = '$';
      evaluation0.num2ShortID(1670, charArray0, 1670);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1670, 1670);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        byteArrayInputStream0.read(byteArray0, (-3), 15);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=2.3092830991834217
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      Evaluation evaluation0 = new Evaluation(instances0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TestInstances testInstances0 = new TestInstances();
      TestInstances testInstances1 = new TestInstances();
      Instances instances1 = testInstances1.generate("g5+BTu1\"[Nm,lDE");
      Evaluation evaluation1 = new Evaluation(instances1);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      double[] doubleArray0 = new double[9];
      FindWithCapabilities findWithCapabilities0 = new FindWithCapabilities();
      findWithCapabilities0.getHandler();
      testInstances0.setHandler((CapabilitiesHandler) null);
      evaluation0.m_SumPriorAbsErr = (double) (-1);
      doubleArray0[1] = 321.4546;
      instances0.enumerateInstances();
      doubleArray0[8] = (double) (-1);
      double double0 = evaluation1.falseNegativeRate((-1));
      assertEquals(0.0, double0, 0.01);
      
      LWL lWL0 = new LWL();
      double double1 = evaluation0.numFalsePositives((-2));
      assertEquals(0.0, double1, 0.01);
      
      evaluation0.numTrueNegatives((-3269));
      double double2 = evaluation1.weightedFalsePositiveRate();
      assertEquals(Double.NaN, double2, 0.01);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.5174714039166524
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      textDirectoryLoader0.getStructure();
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier((Classifier) null);
      Evaluation.getGlobalInfo(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, 1, (byte)67);
      byteArrayInputStream0.read();
      byteArrayInputStream0.mark((-919));
      ConverterUtils.DataSource.read((InputStream) byteArrayInputStream0);
      MockRandom mockRandom0 = new MockRandom();
      try { 
        Evaluation.evaluateModel((Classifier) null, (String[]) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: null
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte byte0 = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      LWL lWL0 = new LWL();
      evaluation0.priorEntropy();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1);
      // Undeclared exception!
      try { 
        binarySparseInstance0.relationalValue(4);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.049248354870898
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      RandomTree randomTree0 = new RandomTree();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "1>PjOaYk?w#2JOozGO";
      stringArray0[1] = "&E ==~";
      stringArray0[2] = "3S$LDS";
      stringArray0[3] = "pg=9";
      stringArray0[4] = "   * @return the capabilities\n";
      try { 
        Evaluation.evaluateModel((Classifier) randomTree0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Weka exception: No training file and no object input file given.
         // 
         // General options:
         // 
         // -h or -help
         // \tOutput help information.
         // -synopsis or -info
         // \tOutput synopsis for classifier (use in conjunction  with -h)
         // -t <name of training file>
         // \tSets training file.
         // -T <name of test file>
         // \tSets test file. If missing, a cross-validation will be performed
         // \ton the training data.
         // -c <class index>
         // \tSets index of class attribute (default: last).
         // -x <number of folds>
         // \tSets number of folds for cross-validation (default: 10).
         // -no-cv
         // \tDo not perform any cross validation.
         // -split-percentage <percentage>
         // \tSets the percentage for the train/test set split, e.g., 66.
         // -preserve-order
         // \tPreserves the order in the percentage split.
         // -s <random number seed>
         // \tSets random number seed for cross-validation or percentage split
         // \t(default: 1).
         // -m <name of file with cost matrix>
         // \tSets file with cost matrix.
         // -l <name of input file>
         // \tSets model input file. In case the filename ends with '.xml',
         // \ta PMML file is loaded or, if that fails, options are loaded
         // \tfrom the XML file.
         // -d <name of output file>
         // \tSets model output file. In case the filename ends with '.xml',
         // \tonly the options are saved to the XML file, not the model.
         // -v
         // \tOutputs no statistics for training data.
         // -o
         // \tOutputs statistics only, not the classifier.
         // -i
         // \tOutputs detailed information-retrieval statistics for each class.
         // -k
         // \tOutputs information-theoretic statistics.
         // -classifications \"weka.classifiers.evaluation.output.prediction.AbstractOutput + options\"
         // \tUses the specified class for generating the classification output.
         // \tE.g.: weka.classifiers.evaluation.output.prediction.PlainText
         // -p range
         // \tOutputs predictions for test instances (or the train instances if
         // \tno test instances provided and -no-cv is used), along with the 
         // \tattributes in the specified range (and nothing else). 
         // \tUse '-p 0' if no attributes are desired.
         // \tDeprecated: use \"-classifications ...\" instead.
         // -distribution
         // \tOutputs the distribution instead of only the prediction
         // \tin conjunction with the '-p' option (only nominal classes).
         // \tDeprecated: use \"-classifications ...\" instead.
         // -r
         // \tOnly outputs cumulative margin distribution.
         // -g
         // \tOnly outputs the graph representation of the classifier.
         // -xml filename | xml-string
         // \tRetrieves the options from the XML-data instead of the command line.
         // -threshold-file <file>
         // \tThe file to save the threshold data to.
         // \tThe format is determined by the extensions, e.g., '.arff' for ARFF 
         // \tformat or '.csv' for CSV.
         // -threshold-label <label>
         // \tThe class label to determine the threshold data for
         // \t(default is the first label)
         // 
         // Options specific to weka.classifiers.trees.RandomTree:
         // 
         // -K <number of attributes>
         // \tNumber of attributes to randomly investigate
         // \t(<0 = int(log_2(#attributes)+1)).
         // -M <minimum number of instances>
         // \tSet minimum number of instances per leaf.
         // -S <num>
         // \tSeed for random number generator.
         // \t(default 1)
         // -depth <num>
         // \tThe maximum depth of the tree, 0 for unlimited.
         // \t(default 0)
         // -N <num>
         // \tNumber of folds for backfitting (default 0, no backfitting).
         // -U
         // \tAllow unclassified instances.
         // -D
         // \tIf set, classifier is run in debug mode and
         // \tmay output additional info to the console
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      char[] charArray0 = new char[7];
      charArray0[1] = 'F';
      charArray0[2] = 'a';
      charArray0[3] = 'A';
      charArray0[4] = 'a';
      AdditiveRegression additiveRegression0 = new AdditiveRegression();
      additiveRegression0.setDebug(false);
      String[] stringArray0 = new String[1];
      AbstractClassifier.runClassifier(additiveRegression0, stringArray0);
      try { 
        Evaluation.evaluateModel((Classifier) additiveRegression0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte byte0 = (byte)119;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      FileSystemHandling.createFolder(evoSuiteFile0);
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[0];
      int int0 = (-3171);
      // Undeclared exception!
      try { 
        evaluation0.num2ShortID((byte)119, charArray0, (-3171));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.7552281225441584
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      char[] charArray0 = new char[7];
      charArray0[0] = 'R';
      charArray0[1] = 'F';
      charArray0[2] = 'O';
      charArray0[3] = '5';
      charArray0[4] = 'P';
      charArray0[5] = 'z';
      charArray0[6] = '$';
      evaluation0.num2ShortID((-352), charArray0, (byte)0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      byte byte1 = (byte)35;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte)35, 239);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0);
      // Undeclared exception!
      try { 
        byteArrayInputStream1.read(byteArray0, (-2144), (-1));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.ByteArrayInputStream", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=1.6999267696231979
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      Evaluation evaluation0 = new Evaluation(instances0);
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      serializedClassifier0.getCurrentModel();
      MockRandom mockRandom0 = new MockRandom((byte)119);
      Object[] objectArray0 = new Object[0];
      double[] doubleArray0 = new double[0];
      int[] intArray0 = new int[6];
      mockRandom0.nextFloat();
      intArray0[0] = (int) (byte)119;
      intArray0[1] = 119;
      intArray0[2] = (int) (byte)0;
      intArray0[3] = 16;
      intArray0[4] = (int) (byte)0;
      SparseInstance sparseInstance0 = new SparseInstance((byte)0, doubleArray0, intArray0, (-1));
      FileSystemHandling.shouldAllThrowIOExceptions();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      DataInputStream dataInputStream0 = new DataInputStream(pipedInputStream0);
      ConverterUtils.DataSource.read((InputStream) dataInputStream0);
      try { 
        Evaluation.getGlobalInfo((Classifier) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      Evaluation evaluation0 = new Evaluation(instances0);
      MockRandom mockRandom0 = new MockRandom(1129L);
      mockRandom0.nextFloat();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.setRegOptimizer((RegOptimizer) null);
      try { 
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, 2, (Random) mockRandom0, (Object[]) sMOreg0.TAGS_FILTER);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // weka.core.Tag cannot be cast to weka.classifiers.evaluation.output.prediction.AbstractOutput
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=1.7582784776371914
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      byte[] byteArray0 = new byte[4];
      byte byte0 = (byte)119;
      byteArray0[0] = (byte)119;
      MockRandom mockRandom0 = new MockRandom((byte)119);
      mockRandom0.nextFloat();
      SMOreg sMOreg0 = new SMOreg();
      sMOreg0.setRegOptimizer((RegOptimizer) null);
      Evaluation evaluation0 = new Evaluation(instances0);
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) null;
      objectArray0[1] = (Object) mockRandom0;
      objectArray0[2] = (Object) instances0;
      objectArray0[3] = (Object) sMOreg0;
      Object object0 = new Object();
      objectArray0[4] = object0;
      try { 
        evaluation0.crossValidateModel((Classifier) sMOreg0, instances0, 3200, (Random) mockRandom0, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=1.9593337382266454
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getStructure();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/termite/projects/107_weka");
      Evaluation evaluation0 = new Evaluation(instances0);
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)119;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      Object[] objectArray0 = new Object[5];
      objectArray0[1] = (Object) textDirectoryLoader0;
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[3] = (Object) instances0;
      objectArray0[4] = (Object) evoSuiteFile0;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SerializedClassifier serializedClassifier0 = new SerializedClassifier();
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      LWL lWL0 = new LWL();
      int[] intArray0 = new int[8];
      intArray0[0] = 1;
      intArray0[1] = 2;
      intArray0[2] = 0;
      intArray0[3] = 1;
      intArray0[4] = 0;
      intArray0[5] = 294;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      intArray0[6] = 472;
      intArray0[7] = 0;
      Instance instance0 = BallNode.calcCentroidPivot((int) (byte)119, 107, intArray0, instances0);
      try { 
        evaluation0.evaluateModelOnce((Classifier) serializedClassifier0, instance0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 127
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      DecisionStump decisionStump0 = new DecisionStump();
      try { 
        Evaluation.wekaStaticWrapper((Sourcable) null, "Network cannot train. Try restarting with a smaller learning rate.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 128
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "\tOutputs no statistics for training data.\n";
      stringArray0[1] = "\tOutputs no statistics for training data.\n";
      stringArray0[2] = "\tOutputs no statistics for training data.\n";
      stringArray0[3] = "\tOutputs no statistics for training data.\n";
      stringArray0[4] = "\tOutputs no statistics for training data.\n";
      stringArray0[5] = "\tOutputs no statistics for training data.\n";
      try { 
        Evaluation.evaluateModel("\tOutputs no statistics for training data.\n", stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't find class with name \tOutputs no statistics for training data.
         // .
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 129
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      int int0 = 12;
      try { 
        Evaluation.handleCostOption("", 12);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Can't open file null.
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }

  /**
  //Test case number: 130
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      int int0 = 12;
      int int1 = 3708;
      Evaluation.handleCostOption((String) null, 3708);
      double[] doubleArray0 = new double[2];
      doubleArray0[0] = (double) 3708;
      doubleArray0[1] = (double) 12;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(993.9259644860975, doubleArray0);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance(12, doubleArray0);
      BinarySparseInstance binarySparseInstance2 = new BinarySparseInstance((SparseInstance) binarySparseInstance1);
      // Undeclared exception!
      try { 
        binarySparseInstance2.relationalValue(12);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // DenseInstance doesn't have access to a dataset!
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      SMO sMO0 = new SMO();
      String string0 = Evaluation.makeOptionString(sMO0, true);
      assertNotNull(string0);
  }

  /**
  //Test case number: 132
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CostSensitiveClassifier costSensitiveClassifier0 = new CostSensitiveClassifier();
      costSensitiveClassifier0.setClassifier(costSensitiveClassifier0);
      byte[] byteArray0 = new byte[6];
      byteArray0[2] = (byte)12;
      MockRandom mockRandom0 = new MockRandom((byte)35);
      TextDirectoryLoader textDirectoryLoader0 = new TextDirectoryLoader();
      Instances instances0 = textDirectoryLoader0.getDataSet();
      CostMatrix costMatrix0 = costSensitiveClassifier0.getCostMatrix();
      Object[][] objectArray0 = new Object[9][0];
      objectArray0[0] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Object[] objectArray1 = new Object[0];
      objectArray0[1] = objectArray1;
      objectArray0[2] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[3] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Object[] objectArray2 = new Object[8];
      Object object0 = new Object();
      objectArray2[0] = object0;
      objectArray2[1] = (Object) mockRandom0;
      Object object1 = new Object();
      objectArray2[2] = object1;
      objectArray2[3] = (Object) mockRandom0;
      objectArray2[4] = (Object) mockRandom0;
      objectArray2[5] = (Object) instances0;
      objectArray2[6] = (Object) mockRandom0;
      Object object2 = new Object();
      objectArray2[5] = object2;
      objectArray0[4] = objectArray2;
      objectArray0[5] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[6] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      objectArray0[7] = (Object[]) costSensitiveClassifier0.TAGS_MATRIX_SOURCE;
      Object[] objectArray3 = new Object[6];
      objectArray3[0] = (Object) textDirectoryLoader0;
      Object object3 = new Object();
      objectArray3[1] = object3;
      objectArray3[2] = (Object) textDirectoryLoader0;
      objectArray3[3] = (Object) instances0;
      objectArray3[4] = (Object) textDirectoryLoader0;
      objectArray3[5] = (Object) costSensitiveClassifier0;
      objectArray0[8] = objectArray3;
      costMatrix0.m_matrix = objectArray0;
      Evaluation evaluation0 = null;
      try {
        evaluation0 = new Evaluation(instances0, costMatrix0);
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Cost matrix not compatible with data!
         //
         verifyException("weka.classifiers.Evaluation", e);
      }
  }
}
