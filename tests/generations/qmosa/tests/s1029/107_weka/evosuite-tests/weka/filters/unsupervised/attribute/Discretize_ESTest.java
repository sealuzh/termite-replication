/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:04:30 GMT 2019
 */

package weka.filters.unsupervised.attribute;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.util.SystemInUtil;
import org.junit.runner.RunWith;
import weka.core.AbstractInstance;
import weka.core.Attribute;
import weka.core.BinarySparseInstance;
import weka.core.DenseInstance;
import weka.core.Instance;
import weka.core.Instances;
import weka.core.Range;
import weka.core.SparseInstance;
import weka.filters.AllFilter;
import weka.filters.Filter;
import weka.filters.unsupervised.attribute.Discretize;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Discretize_ESTest extends Discretize_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.612017270034344
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 604);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 6);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      arrayList1.add(attribute0);
      discretize0.setOutputFormat();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.0494542962027764
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue("-D");
      attribute0.equals(object0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-346.9452185908102);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      doubleArray0[3] = (double) 2;
      intArray0[2] = 0;
      intArray0[5] = 1;
      intArray0[6] = 0;
      intArray0[7] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) sparseInstance0);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate0.and(predicate1);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      discretize0.input(sparseInstance0);
      assertFalse(discretize0.isNewBatch());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.getRevision();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "84HH");
      discretize0.setDesiredWeightOfInstancesPerInterval((-1097.833719));
      double[][] doubleArray0 = new double[7][7];
      double[] doubleArray1 = new double[4];
      doubleArray1[0] = (double) 4;
      doubleArray1[1] = 5.7;
      doubleArray1[2] = (-1097.833719);
      doubleArray1[3] = (double) 4;
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[1];
      doubleArray2[0] = (-1097.833719);
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[1];
      doubleArray3[0] = 5.7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[5];
      doubleArray4[0] = 100.0;
      doubleArray4[1] = 5.7;
      doubleArray2[0] = (double) 4;
      doubleArray4[3] = (-1097.833719);
      doubleArray4[4] = 5.7;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = (-1097.833719);
      doubleArray5[1] = (double) 4;
      doubleArray5[2] = 5.7;
      doubleArray5[3] = (double) 4;
      doubleArray1[0] = 100.0;
      doubleArray5[5] = (-1097.833719);
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[3];
      doubleArray6[0] = (double) 4;
      doubleArray6[1] = (-1097.833719);
      doubleArray6[2] = (double) 4;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[6];
      doubleArray7[0] = 100.0;
      doubleArray7[1] = 5.7;
      doubleArray7[2] = 100.0;
      doubleArray7[3] = (double) 4;
      doubleArray7[4] = 100.0;
      doubleArray7[5] = 5.7;
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      discretize0.getCutPoints(4);
      discretize0.findNumBinsTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Object object1 = new Object();
      Discretize discretize0 = new Discretize();
      discretize0.setIgnoreClass(true);
      attribute0.equals(discretize0);
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      attribute0.indexOfValue("-D");
      attribute0.equals(object1);
      discretize0.m_UseBinNumbers = true;
      discretize0.setMakeBinary(true);
      Instances instances0 = new Instances("N%'IFzAe", arrayList0, 3476);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Can't ignore class when changing the number of attributes!
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.594717952361189
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Object object1 = new Object();
      Discretize discretize0 = new Discretize();
      attribute0.equals(discretize0);
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      attribute0.indexOfValue("xE");
      attribute0.equals(object1);
      discretize0.m_UseBinNumbers = true;
      Instances instances0 = new Instances("N%'IFzAe", arrayList0, 3476);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      assertEquals(10, discretize1.getBins());
      
      arrayList0.iterator();
      discretize1.setBins(0);
      discretize1.setInputFormat(instances0);
      discretize1.calculateCutPoints();
      Discretize discretize2 = new Discretize();
      discretize0.getBinRangesString(1);
      discretize1.getBinRangesString(0);
      int int0 = discretize1.getBins();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.0596016129936894
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 604);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 6);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.8, intArray0, 9);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      discretize0.input(sparseInstance0);
      discretize0.batchFinished();
      Random.setNextRandom(77);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4762355193573864
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute((String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Object object1 = new Object();
      attribute0.indexOfValue("-D");
      attribute0.equals(object1);
      Instances instances0 = new Instances("@attribute", arrayList0, 3476);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      arrayList0.iterator();
      discretize0.setBins((-1));
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      Discretize discretize1 = new Discretize();
      String[] stringArray0 = new String[0];
      Filter.runFilter(discretize1, stringArray0);
      discretize0.setInvertSelection(false);
      Discretize discretize2 = new Discretize();
      discretize1.setInputFormat(instances0);
      discretize1.batchFinished();
      discretize2.useEqualFrequencyTipText();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(3566);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.331677661270088
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Object object1 = new Object();
      Discretize discretize0 = new Discretize();
      attribute0.equals(discretize0);
      Range range0 = discretize0.m_DiscretizeCols;
      discretize0.m_DiscretizeCols = range0;
      attribute0.indexOfValue("-D");
      attribute0.equals(object1);
      Instances instances0 = new Instances("numeric", arrayList0, 3476);
      discretize0.setInputFormat(instances0);
      arrayList0.iterator();
      discretize0.setBins(3604);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis(0L);
      discretize0.findNumBinsTipText();
      discretize0.getCapabilities();
      discretize0.findNumBins(0);
      discretize0.getOptions();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "@relation";
      stringArray0[1] = "numeric";
      stringArray0[2] = "numeric";
      stringArray0[3] = "date";
      stringArray0[4] = "-D";
      stringArray0[5] = "string";
      stringArray0[6] = "@relation";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.0872871537498012
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.clear();
      Attribute attribute0 = new Attribute("7`=eCE<ifaKD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue("o+");
      attribute0.equals(object0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      Attribute attribute1 = (Attribute)attribute0.copy();
      attribute1.enumerateValues();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[5];
      attribute1.toString();
      Attribute.typeToString(3600);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[2] = (double) 3;
      arrayList0.iterator();
      discretize0.setBins((-1109));
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      discretize0.mayRemoveInstanceAfterFirstBatchDone();
      // Undeclared exception!
      try { 
        discretize0.input((Instance) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.0113736767525974
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 604);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 6);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(15);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "@attribute";
      stringArray0[1] = "@data";
      stringArray0[2] = "integer";
      stringArray0[3] = "@relation";
      stringArray0[4] = "@relation";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = discretize0.getBinRangesString(0);
      assertEquals("All", string0);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.993563215225368
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Object object1 = new Object();
      attribute0.equals(object1);
      attribute0.value((-1214));
      Instances instances0 = new Instances("N%'IFzAe", arrayList0, 3476);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      MockRandom mockRandom0 = new MockRandom();
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      instances0.resampleWithWeights((java.util.Random) mockRandom0, booleanArray0);
      arrayList0.iterator();
      discretize0.setBins(3598);
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis(0L);
      discretize0.setOutputFormat();
      discretize0.calculateCutPointsByEqualWidthBinning(0);
      discretize0.batchFinished();
      assertEquals(3598, discretize0.getBins());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.062257174304032
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 5.55555;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.55555, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = null;
      try {
        binarySparseInstance1 = new BinarySparseInstance((-1776));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.928552011250276
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue("-D");
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-346.9452185908102);
      doubleArray0[1] = (double) 1355;
      doubleArray0[3] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[6] = 0;
      intArray0[7] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(3, doubleArray0, intArray0, 3481);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) sparseInstance0);
      SparseInstance sparseInstance1 = new SparseInstance(0, doubleArray0, intArray0, 3481);
      Predicate.isEqual((Object) sparseInstance1);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      arrayList0.removeIf(predicate3);
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      Discretize discretize2 = new Discretize();
      assertFalse(discretize2.getFindNumBins());
      
      discretize0.batchFinished();
      discretize0.getOptions();
      assertTrue(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2975049169006727
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 604);
      attribute0.isInRange(604);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 6);
      MockRandom mockRandom0 = new MockRandom();
      arrayList1.add(attribute0);
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '\tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9383113296830845
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      int int0 = 48;
      discretize0.setBins(48);
      int int1 = 3568;
      discretize0.m_NumBins = 3568;
      discretize0.attributeIndicesTipText();
      discretize0.useEqualFrequencyTipText();
      String[] stringArray0 = new String[4];
      discretize0.m_UseEqualFrequency = true;
      stringArray0[0] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[1] = "Specify range of attributes to act on. This is a comma separated list of attribute indices, with \"first\" and \"last\" valid values. Specify an inclusive range with \"-\". E.g: \"first-3,5,6-10,last\".";
      stringArray0[2] = "If set to true, equal-frequency binning will be used instead of equal-width binning.";
      stringArray0[3] = "-B";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No value given for -B option.
         //
         verifyException("weka.core.Utils", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.370640645235503
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Object object1 = new Object();
      attribute0.equals(object1);
      attribute0.value((-1214));
      Instances instances0 = new Instances("N%'IFzAe", arrayList0, 3476);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      UnaryOperator<Instance> unaryOperator0 = UnaryOperator.identity();
      instances0.replaceAll(unaryOperator0);
      Attribute attribute1 = new Attribute(".arff");
      attribute0.copy("XUE'>KR]qo[Ql");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Locale.FilteringMode locale_FilteringMode0 = Locale.FilteringMode.REJECT_EXTENDED_RANGES;
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) set0, locale_FilteringMode0);
      Attribute attribute2 = new Attribute("\"y]5cw`", list0);
      arrayList0.add(attribute2);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances1 = new Instances("?U/$Z", arrayList0, 2);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.446685616919928
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.clear();
      Attribute attribute0 = new Attribute("7`=eCE<ifaKD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue("Some packages no longer exist at the repository. Refreshing cache...");
      attribute0.equals(object0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      Attribute attribute1 = (Attribute)attribute0.copy();
      attribute1.enumerateValues();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[5];
      attribute1.toString();
      Attribute.typeToString(3600);
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[2] = (double) 3;
      doubleArray0[4] = (double) 3;
      int[] intArray0 = new int[9];
      intArray0[0] = 1;
      Discretize discretize1 = new Discretize("@end");
      Locale.getISOCountries();
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.3863947628563262
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("ftp://", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue("@attribute");
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (double) 1;
      doubleArray0[1] = (double) 2;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 4;
      SparseInstance sparseInstance0 = new SparseInstance(1.7976931348623157E308, doubleArray0, intArray0, 3481);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) sparseInstance0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      predicate3.negate();
      arrayList0.removeIf(predicate3);
      discretize0.calculateCutPoints();
      Discretize discretize1 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // No output instance format defined
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.0536885321841565
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8lC]2bPh5Yu");
      Discretize discretize0 = new Discretize("");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      Attribute attribute0 = new Attribute("d{q7zQp<OXVsh", 594);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("   * turns array of Objects into an Instance object\n", arrayList1, 1);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      instances0.resample(mockRandom0);
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1783);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1783
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.041623327382373
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("WnmtcuO'2nDjShZ");
      discretize0.listOptions();
      discretize0.setInvertSelection(true);
      discretize0.getCapabilities();
      int int0 = (-195225787);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      discretize0.setBins((-195225787));
      discretize0.setAttributeIndices("An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.");
      discretize0.getOptions();
      discretize0.toString();
      discretize0.getRevision();
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2949986512365124
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SystemInUtil.addInputLine("~{0_WD&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      SystemInUtil.addInputLine("~{0_WD&");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("~{0_WD&");
      arrayList0.add("d7%Qp<O`3qh");
      Attribute attribute0 = new Attribute("$Revision: 8964 $", 608);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.spliterator();
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      discretize0.findNumBins(0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.723296143691395
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      int int0 = 1568;
      Attribute attribute0 = new Attribute((String) null, (String) null, 1568);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("13,1144,126,1773,3635,0,469", arrayList1, 1731);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      attribute0.isInRange(892.6);
      int[] intArray0 = new int[8];
      intArray0[0] = 3;
      intArray0[1] = 1731;
      intArray0[2] = 2;
      intArray0[3] = 1568;
      intArray0[4] = 2;
      intArray0[5] = 0;
      intArray0[6] = 0;
      intArray0[7] = 77;
      discretize0.setAttributeIndicesArray(intArray0);
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "6|^+d#-qz22Sdr}D5");
      discretize0.setBins(2);
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("X,[8zL)-D/5");
      Attribute attribute0 = new Attribute("X,[8zL)-D/5", "X,[8zL)-D/5", 1355);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Instances instances0 = new Instances("real", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_MakeBinary = true;
      discretize0.getMakeBinary();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.setAttributeIndices((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.5054847520916343
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue("-D");
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (-346.9452185908102);
      doubleArray0[1] = (double) 1355;
      doubleArray0[3] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[1] = (-1);
      intArray0[2] = 1;
      arrayList0.add(attribute0);
      intArray0[3] = 2;
      intArray0[4] = (-1);
      intArray0[6] = 0;
      intArray0[7] = 1;
      SparseInstance sparseInstance0 = new SparseInstance(1);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) sparseInstance0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.or(predicate2);
      arrayList0.removeIf(predicate3);
      Discretize discretize1 = new Discretize();
      discretize0.setInputFormat(instances0);
      Discretize discretize2 = new Discretize();
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Attribute names are not unique! Causes: '7`meCE<ifaV?KD' 
         //
         verifyException("weka.core.Instances", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props/Capabilities.props");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "n*[7x@");
      arrayList1.add("X,[8zL)-D/5");
      Attribute attribute0 = new Attribute("X,[8zL)-D/5", (String) null, (-2853));
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("Invert: ", arrayList0, 68);
      attribute0.setWeight((-1206.469));
      arrayList0.add(attribute0);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile1, ".bsi");
      Discretize discretize0 = new Discretize();
      Attribute attribute1 = new Attribute("@relation");
      discretize0.setInputFormat(instances0);
      Discretize discretize1 = new Discretize("'All'");
      String[] stringArray0 = Locale.getISOLanguages();
      assertEquals(188, stringArray0.length);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.022779172951947
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("Tr!L,");
      ArrayList<Locale.LanguageRange> arrayList1 = new ArrayList<Locale.LanguageRange>();
      List<String> list0 = Locale.filterTags((List<Locale.LanguageRange>) arrayList1, (Collection<String>) arrayList0);
      arrayList0.addAll((Collection<? extends String>) list0);
      arrayList0.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 604);
      ArrayList<Attribute> arrayList2 = new ArrayList<Attribute>();
      arrayList2.add(attribute0);
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList2, 6);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0);
      discretize0.convertInstance(binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.findNumBins(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.492172955032197
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 604);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 6);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      int[] intArray0 = new int[1];
      intArray0[0] = 9;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(4.8, intArray0, 9);
      SparseInstance sparseInstance0 = new SparseInstance((Instance) binarySparseInstance0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.994350483281337
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Instances instances0 = new Instances((String) null, arrayList0, 3);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) "'B2of2'");
      predicate3.and(predicate1);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      predicate5.negate();
      Object object2 = new Object();
      Object object3 = new Object();
      Integer integer0 = new Integer(786);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) integer0);
      predicate0.or(predicate6);
      Predicate<Object> predicate7 = Predicate.isEqual(object2);
      predicate7.and(predicate6);
      discretize0.setOutputFormat();
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      System.setCurrentTimeMillis((-493L));
      discretize0.calculateCutPointsByEqualFrequencyBinning(0);
      discretize0.calculateCutPoints();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2347976094737034
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      SystemInUtil.addInputLine("#~{0_WD&");
      ArrayList<String> arrayList0 = new ArrayList<String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      arrayList0.add("d7%Qp<O`3qh");
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 594);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      arrayList1.spliterator();
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 2);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      discretize0.calculateCutPoints();
      Discretize discretize1 = new Discretize();
      System.setCurrentTimeMillis(22L);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning(3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.327877822043587
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.m_UseEqualFrequency = false;
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.setUseBinNumbers(true);
      discretize0.getUseBinNumbers();
      discretize0.globalInfo();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[1] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[2] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[3] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[4] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[5] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[6] = "An instance filter that discretizes a range of numeric attributes in the dataset into nominal attributes. Discretization is by simple binning. Skips the class attribute if set.";
      stringArray0[7] = "}{s:UD";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      discretize0.setOptions(stringArray0);
      discretize0.getCutPoints((-1214));
      discretize0.getAttributeIndices();
      discretize0.makeBinaryTipText();
      discretize0.useEqualFrequencyTipText();
      discretize0.globalInfo();
      discretize0.getCapabilities();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.9840558475999788
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("'B2of2'");
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 526);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) attribute0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate1.and(predicate0);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      predicate0.negate();
      Predicate<Object> predicate6 = predicate1.negate();
      Object object1 = new Object();
      Object object2 = new Object();
      predicate2.or(predicate6);
      Predicate.isEqual((Object) "real");
      predicate5.and(predicate2);
      discretize0.setOutputFormat();
      discretize0.batchFinished();
      System.setCurrentTimeMillis(1067L);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualFrequencyBinning(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.948983719687279
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList2, 124);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("real", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      boolean boolean1 = discretize0.batchFinished();
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.067648843266804
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList2, 124);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("real", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      attribute0.copy(".bsi");
      discretize0.setInputFormat(instances0);
      double double0 = 0.0;
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 0;
      String[] stringArray0 = new String[3];
      stringArray0[0] = "date";
      stringArray0[1] = "date";
      stringArray0[2] = "@data";
      try { 
        Filter.filterFile(discretize0, stringArray0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // 
         // Illegal options: date date @data 
         // Filter options:
         // 
         // -unset-class-temporarily
         // \tUnsets the class index temporarily before the filter is
         // \tapplied to the data.
         // \t(default: no)
         // -B <num>
         // \tSpecifies the (maximum) number of bins to divide numeric attributes into.
         // \t(default = 10)
         // -M <num>
         // \tSpecifies the desired weight of instances per bin for
         // \tequal-frequency binning. If this is set to a positive
         // \tnumber then the -B option will be ignored.
         // \t(default = -1)
         // -F
         // \tUse equal-frequency instead of equal-width discretization.
         // -O
         // \tOptimize number of bins using leave-one-out estimate
         // \tof estimated entropy (for equal-width discretization).
         // \tIf this is set then the -B option will be ignored.
         // -R <col1,col2-col4,...>
         // \tSpecifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         // -V
         // \tInvert matching sense of column indexes.
         // -D
         // \tOutput binary attributes for discretized attributes.
         // -Y
         // \tUse bin numbers rather than ranges for discretized attributes.
         // 
         // General options:
         // 
         // -h
         // \tGet help on available options.
         // \t(use -b -h for help on batch mode.)
         // -i <file>
         // \tThe name of the file containing input instances.
         // \tIf not supplied then instances will be read from stdin.
         // -o <file>
         // \tThe name of the file output instances will be written to.
         // \tIf not supplied then instances will be written to stdout.
         // -c <class index>
         // \tThe number of the attribute to use as the class.
         // \t\"first\" and \"last\" are also valid entries.
         // \tIf not supplied then no class is assigned.
         //
         verifyException("weka.filters.Filter", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.417081986935427
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("ftp://", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue("-D");
      attribute0.equals(object0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = (-346.9452185908102);
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      intArray0[1] = (-1);
      intArray0[2] = 1;
      intArray0[3] = 2;
      intArray0[4] = 0;
      intArray0[5] = 1;
      intArray0[6] = 4;
      intArray0[1] = 1;
      discretize0.setInputFormat(instances0);
      SparseInstance sparseInstance0 = new SparseInstance((-716.00225291652), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Instance has no dataset assigned!!
         //
         verifyException("weka.core.RelationalLocator", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.275181643202798
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meCE<ifaKD", (String) null, 1355);
      arrayList0.add(attribute0);
      attribute0.indexOfValue(":oT");
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      attribute0.copy();
      discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 0;
      doubleArray0[1] = (double) 2;
      doubleArray0[2] = (double) 2;
      doubleArray0[3] = (double) 3;
      doubleArray0[4] = (double) 3;
      int[] intArray0 = new int[8];
      intArray0[0] = 0;
      Locale.getISOLanguages();
      discretize0.calculateCutPoints();
      System.setCurrentTimeMillis(3099L);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=2.948983719687279
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      ArrayList<String> arrayList2 = new ArrayList<String>();
      arrayList2.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attribute attribute0 = new Attribute("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList2, 124);
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("real", arrayList1, 0);
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.setInputFormat(instances0);
      double[] doubleArray0 = new double[1];
      doubleArray0[0] = (double) 1;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(0.0, doubleArray0);
      boolean boolean1 = discretize0.batchFinished();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertTrue(boolean1 == boolean0);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertTrue(discretize0.isNewBatch());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.021984470505606
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("7`meePCE<ifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Instances instances0 = new Instances((String) null, arrayList0, 3);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getMakeBinary());
      
      discretize0.setInputFormat(instances0);
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) "'B2of2'");
      predicate3.and(predicate1);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Object object2 = new Object();
      Object object3 = new Object();
      Integer integer0 = new Integer(786);
      Predicate<Object> predicate7 = Predicate.isEqual((Object) integer0);
      predicate0.or(predicate7);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate8.and(predicate7);
      Discretize discretize1 = new Discretize();
      discretize1.setInputFormat(instances0);
      boolean boolean0 = discretize0.batchFinished();
      assertFalse(boolean0);
      
      Random.setNextRandom(2);
      discretize1.input((Instance) null);
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize0 = new Discretize("");
      double[][] doubleArray0 = new double[1][7];
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 2499.20993;
      doubleArray1[2] = 822.17527123;
      doubleArray1[3] = (-3401.575049723238);
      doubleArray1[4] = 3.0;
      doubleArray1[5] = 1847.847;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = "YSb";
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      // Undeclared exception!
      try { 
        discretize0.getCutPoints(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ArrayList<String> arrayList0 = new ArrayList<String>();
      arrayList0.add((String) null);
      arrayList0.add("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.");
      String string0 = "General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.";
      Attribute attribute0 = new Attribute("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)", 604);
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      arrayList1.add(attribute0);
      Instances instances0 = new Instances("General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.", arrayList1, 6);
      Discretize discretize0 = new Discretize("\tSpecifies list of columns to Discretize. First and last are valid indexes.\n\t(default: first-last)");
      attribute0.copy();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid range list at Specifies list of columns to Discretize. First and last are valid indexes.
         // \t(default: first-last)
         //
         verifyException("weka.core.Range", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hsPmh");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[1][7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relatioy98nal");
      double[] doubleArray1 = new double[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray1[0] = 100.0;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)18;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray1[1] = 100.0;
      doubleArray1[3] = 100.0;
      doubleArray1[5] = 3.0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hsPmh");
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.getBinRangesString(1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5158519776570625
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hsPmh");
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[2][7];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relatioy98nal");
      double[] doubleArray1 = new double[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray1[0] = 100.0;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray1[1] = 100.0;
      doubleArray1[3] = 100.0;
      doubleArray1[5] = 3.0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hsPmh");
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      String string0 = discretize0.getBinRangesString(1);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.5197611019057504
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_IgnoreClass = false;
      discretize0.getOptions();
      String[] stringArray0 = discretize0.getOptions();
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(4, stringArray0.length);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[][] doubleArray0 = new double[7][0];
      double[] doubleArray1 = new double[0];
      doubleArray0[0] = doubleArray1;
      double[] doubleArray2 = new double[4];
      doubleArray2[1] = 5.7;
      doubleArray2[1] = 3241.839038;
      doubleArray2[2] = (-3263.037);
      doubleArray2[3] = 0.0;
      doubleArray0[1] = doubleArray2;
      double[] doubleArray3 = new double[5];
      doubleArray3[0] = (-3263.037);
      doubleArray3[1] = 3241.839038;
      doubleArray3[2] = 5.7;
      doubleArray3[3] = 3241.839038;
      doubleArray3[4] = 5.7;
      doubleArray0[2] = doubleArray3;
      double[] doubleArray4 = new double[13];
      doubleArray4[0] = 0.0;
      doubleArray4[1] = (-3263.037);
      doubleArray4[2] = 5.7;
      doubleArray0[3] = doubleArray4;
      double[] doubleArray5 = new double[6];
      doubleArray5[0] = 0.0;
      doubleArray5[1] = 5.7;
      doubleArray5[2] = 5.7;
      doubleArray5[4] = (-3263.037);
      doubleArray5[5] = 3241.839038;
      doubleArray0[4] = doubleArray5;
      double[] doubleArray6 = new double[4];
      doubleArray6[0] = 0.0;
      doubleArray6[1] = 5.7;
      doubleArray6[2] = (-3263.037);
      doubleArray6[3] = 5.7;
      doubleArray0[5] = doubleArray6;
      double[] doubleArray7 = new double[0];
      doubleArray0[6] = doubleArray7;
      discretize0.m_CutPoints = doubleArray0;
      // Undeclared exception!
      try { 
        discretize0.setOutputFormat();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.202824444765752
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Invalid range list at ");
      Discretize discretize0 = new Discretize("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Discretize discretize1 = new Discretize("Invalid range list at ");
      discretize1.setDesiredWeightOfInstancesPerInterval(2129.43448);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "Invalid range list at ";
      stringArray0[3] = "Invalid range list at ";
      stringArray0[4] = "";
      stringArray0[5] = "Invalid range list at ";
      stringArray0[6] = "";
      stringArray0[7] = "";
      Filter.runFilter(discretize0, stringArray0);
      discretize0.getBinRangesString(1);
      discretize1.attributeIndicesTipText();
      discretize1.makeBinaryTipText();
      discretize1.getDesiredWeightOfInstancesPerInterval();
      discretize0.useEqualFrequencyTipText();
      discretize1.useBinNumbersTipText();
      assertEquals(2129.43448, discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      arrayList0.clear();
      Attribute attribute0 = new Attribute("7`meCE<ifaKD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      attribute0.indexOfValue(":oT");
      attribute0.equals(object0);
      Instances instances0 = new Instances("real", arrayList0, 0);
      Discretize discretize0 = new Discretize();
      discretize0.m_FindNumBins = true;
      arrayList0.add((Attribute) null);
      attribute0.copy();
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.7123731985734945
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      SystemInUtil.addInputLine("All");
      Discretize discretize0 = new Discretize("-B");
      discretize0.getBins();
      discretize0.m_UseEqualFrequency = true;
      discretize0.getOptions();
      discretize0.setFindNumBins(true);
      discretize0.getFindNumBins();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((-15));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.51195622385697
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      int[] intArray0 = new int[9];
      intArray0[0] = 1625;
      intArray0[1] = (-1);
      double[] doubleArray0 = new double[5];
      doubleArray0[0] = (double) 1625;
      doubleArray0[1] = (double) 0;
      doubleArray0[2] = (double) 0;
      doubleArray0[3] = 2870.61993087128;
      doubleArray0[4] = 2870.61993087128;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((-1), doubleArray0);
      Discretize discretize0 = new Discretize();
      assertFalse(discretize0.getUseBinNumbers());
      
      discretize0.m_UseBinNumbers = true;
      discretize0.getOptions();
      assertTrue(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Discretize discretize0 = new Discretize("");
      discretize0.m_UseEqualFrequency = true;
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)93;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Discretize discretize1 = (Discretize)Filter.makeCopy(discretize0);
      discretize1.setUseBinNumbers(true);
      discretize0.m_IgnoreClass = false;
      discretize0.getBinRangesString((byte)93);
      discretize0.getBins();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = null;
      stringArray0[2] = null;
      stringArray0[3] = null;
      stringArray0[4] = "";
      Filter.runFilter(discretize1, stringArray0);
      discretize0.getFindNumBins();
      discretize0.getUseEqualFrequency();
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance((byte)93);
      int int0 = (-1431655763);
      // Undeclared exception!
      try { 
        binarySparseInstance0.setValue((Attribute) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.AbstractInstance", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.4461755171495705
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Discretize discretize0 = new Discretize("7`meCE<ifaV?KD");
      String[] stringArray0 = new String[9];
      discretize0.m_IgnoreClass = true;
      stringArray0[8] = "]W";
      stringArray0[2] = "7`meCE<ifaV?KD";
      stringArray0[3] = "7`meCE<ifaV?KD";
      stringArray0[4] = "7`meCE<ifaV?KD";
      stringArray0[5] = "7`meCE<ifaV?KD";
      discretize0.isFirstBatchDone();
      double[] doubleArray0 = new double[6];
      doubleArray0[0] = 262.2313397;
      doubleArray0[1] = 262.2313397;
      doubleArray0[2] = 262.2313397;
      doubleArray0[3] = (-2159.5);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "7`meCE<ifaV?KD");
      doubleArray0[4] = 262.2313397;
      String[] stringArray1 = discretize0.getOptions();
      assertEquals(7, stringArray1.length);
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize0.getBins());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(allFilter0, (String[]) null);
      Filter.runFilter(allFilter0, (String[]) null);
      Discretize discretize0 = new Discretize("");
      Locale.getISOLanguages();
      double[] doubleArray0 = new double[0];
      SparseInstance sparseInstance0 = new SparseInstance((-341.707), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.input(sparseInstance0);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String string0 = "Zf GOm#b;N:VY=6 7)";
      int[] intArray0 = new int[2];
      intArray0[0] = 365;
      intArray0[1] = 365;
      discretize0.setAttributeIndicesArray(intArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>(365);
      Instances instances0 = new Instances("Zf GOm#b;N:VY=6 7)", arrayList0, 365);
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.748058988887039
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setBins((-1636));
      discretize0.m_MakeBinary = false;
      discretize0.getCapabilities();
      discretize0.setMakeBinary(true);
      discretize0.setOutputFormat();
      discretize0.getBins();
      discretize0.setUseBinNumbers(false);
      discretize0.listOptions();
      Random.setNextRandom(11);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[1] = "Z9WCaw9`L";
      stringArray0[2] = "rZA";
      stringArray0[3] = "/dCF D0^IWe";
      String string0 = "D2\\uA";
      stringArray0[4] = string0;
      stringArray0[5] = "f!4}EY84WBvK";
      stringArray0[6] = "~{0_WD&";
      stringArray0[7] = "~{0_WD&";
      stringArray0[8] = "{ expected at beginning of enumeration";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-R";
      stringArray0[1] = "Z9WCaw9`L";
      stringArray0[2] = "rZ%j";
      stringArray0[3] = "/dCF D0^IWe";
      String string0 = "D2\\uA";
      stringArray0[4] = string0;
      stringArray0[5] = "f!4}EY84WBvK";
      stringArray0[6] = "~{0_WD&";
      stringArray0[7] = "`du6m6.Plsl";
      stringArray0[8] = "{ expected at beginning of enumeration";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.5719579500515657
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "wwJLxQMg18tP&";
      stringArray0[1] = "^55P'2+rFR]oglm";
      stringArray0[2] = "_";
      stringArray0[3] = "General options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" are also valid entries.\n\tIf not supplied then no class is assigned.";
      stringArray0[4] = "-B";
      stringArray0[5] = "ftp://";
      try { 
        discretize0.setOptions(stringArray0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"ftp://\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.1360570143460755
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      double double0 = 5.55555;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.55555, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      String string0 = "~{0_WD&";
      AbstractInstance.s_numericAfterDecimalPoint = (-1776);
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-1776));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Discretize discretize0 = new Discretize("/`i8>=&yZn)OS/B;");
      String string0 = discretize0.invertSelectionTipText();
      assertFalse(discretize0.getFindNumBins());
      assertEquals("Set attribute selection mode. If false, only selected (numeric) attributes in the range will be discretized; if true, only non-selected attributes will be discretized.", string0);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getMakeBinary();
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(boolean0);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      AllFilter allFilter0 = new AllFilter();
      Filter.runFilter(allFilter0, (String[]) null);
      Filter.runFilter(allFilter0, (String[]) null);
      Discretize discretize0 = new Discretize("");
      Locale.getISOLanguages();
      String string0 = discretize0.findNumBinsTipText();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals("Optimize number of equal-width bins using leave-one-out. Doesn't work for equal-frequency binning", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Object object0 = new Object();
      ArrayList<Attribute> arrayList1 = new ArrayList<Attribute>();
      MockRandom mockRandom0 = new MockRandom();
      MockRandom mockRandom1 = new MockRandom();
      Discretize discretize0 = new Discretize();
      int[] intArray0 = new int[3];
      intArray0[2] = 604;
      // Undeclared exception!
      try { 
        discretize0.batchFinished();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // No input instance format defined
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[5];
      doubleArray0[4] = 1982.642;
      doubleArray0[1] = 1982.642;
      doubleArray0[2] = 1982.642;
      doubleArray0[3] = 1982.642;
      doubleArray0[4] = 2870.61993087128;
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(1982.642, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SystemInUtil.addInputLine("i");
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-1776));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "";
      Discretize discretize0 = new Discretize();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)81;
      byteArray0[1] = (byte) (-71);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = discretize0.getUseBinNumbers();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseEqualFrequency());
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      double[] doubleArray0 = new double[8];
      doubleArray0[0] = (-709.1520678735358);
      doubleArray0[1] = (-709.1520678735358);
      doubleArray0[2] = (-709.1520678735358);
      doubleArray0[3] = (-709.1520678735358);
      doubleArray0[4] = (-709.1520678735358);
      doubleArray0[5] = (-709.1520678735358);
      doubleArray0[6] = (-709.1520678735358);
      doubleArray0[7] = (-709.1520678735358);
      DenseInstance denseInstance0 = new DenseInstance((-709.1520678735358), doubleArray0);
      // Undeclared exception!
      try { 
        discretize0.convertInstance(denseInstance0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.7184338046341003
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      SystemInUtil.addInputLine("All");
      Discretize discretize0 = new Discretize("-B");
      discretize0.m_MakeBinary = true;
      discretize0.getBins();
      discretize0.m_UseEqualFrequency = true;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "All");
      discretize0.getOptions();
      discretize0.setFindNumBins(false);
      discretize0.getFindNumBins();
      discretize0.getAttributeIndices();
      discretize0.getOptions();
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.55555, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      SystemInUtil.addInputLine("~{0_WD&");
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-1776));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hsPmh");
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relatioy98nal");
      double[] doubleArray0 = new double[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray0[0] = 100.0;
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-34);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPointsByEqualWidthBinning((byte) (-34));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.225106742646451
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6|^+d#-qz22Sdr}D5");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Random.setNextRandom(2147483645);
      Discretize discretize0 = new Discretize("6|^+d#-qz22Sdr}D5");
      discretize0.setUseEqualFrequency(true);
      discretize0.setMakeBinary(true);
      discretize0.makeBinaryTipText();
      int[] intArray0 = new int[4];
      intArray0[0] = 2147483645;
      intArray0[1] = 2147483645;
      intArray0[2] = 86;
      intArray0[3] = 2147483645;
      discretize0.setAttributeIndicesArray(intArray0);
      discretize0.useEqualFrequencyTipText();
      discretize0.getInvertSelection();
      discretize0.getOptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      discretize0.getInvertSelection();
      discretize0.getCapabilities();
      discretize0.makeBinaryTipText();
      discretize0.globalInfo();
      System.setCurrentTimeMillis(0L);
      discretize0.binsTipText();
      discretize0.makeBinaryTipText();
      discretize0.desiredWeightOfInstancesPerIntervalTipText();
      System.setCurrentTimeMillis(2147483645);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      boolean boolean0 = discretize0.getUseEqualFrequency();
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getFindNumBins());
      assertEquals(10, discretize0.getBins());
      assertFalse(boolean0);
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fR<miKlX:rs");
      double[] doubleArray0 = new double[9];
      doubleArray0[0] = (double) (-2300);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "fR<miKlX:rs");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "!nJ@D_]f=MIvw`|");
      Discretize discretize0 = new Discretize();
      double double0 = discretize0.getDesiredWeightOfInstancesPerInterval();
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals((-1.0), double0, 0.01);
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      byte[] byteArray0 = new byte[4];
      byteArray0[1] = (byte) (-3);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)73;
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      ArrayList<String> arrayList1 = new ArrayList<String>();
      FileSystemHandling.createFolder(evoSuiteFile0);
      Attribute attribute0 = new Attribute("X,[8zL)-D/5", "X,[8zL)-D/5", 1355);
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("/home/ubuntu/wekafiles");
      byte[] byteArray1 = new byte[17];
      attribute0.indexOfValue("relational");
      byteArray1[9] = (byte)79;
      byteArray1[2] = (byte)119;
      FileSystemHandling.appendDataToFile(evoSuiteFile1, byteArray1);
      Consumer<Attribute> consumer0 = (Consumer<Attribute>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      arrayList0.forEach(consumer0);
      arrayList0.add(attribute0);
      Instances instances0 = new Instances("real", arrayList0, 1);
      EvoSuiteFile evoSuiteFile2 = new EvoSuiteFile("/home/ubuntu/wekafiles/props");
      FileSystemHandling.appendStringToFile(evoSuiteFile2, "@attribute");
      Discretize discretize0 = new Discretize();
      attribute0.addStringValue(attribute0, 635);
      attribute0.value(1);
      discretize0.m_MakeBinary = true;
      try { 
        discretize0.setInputFormat(instances0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: Class attribute not set!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.069820752039947
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "hsPmh");
      Discretize discretize0 = new Discretize();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Discretize discretize1 = new Discretize();
      boolean boolean0 = discretize1.m_UseBinNumbers;
      Range range0 = discretize1.m_DiscretizeCols;
      range0.getInvert();
      Discretize discretize2 = new Discretize("hsPmh");
      int int0 = discretize2.m_ClassIndex;
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Instances instances0 = new Instances("hsPmh", arrayList0, 3476);
      Discretize discretize3 = new Discretize();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "hsPmh";
      stringArray0[1] = "@data";
      stringArray0[2] = "@data";
      stringArray0[3] = "@relation";
      stringArray0[4] = ".arff";
      stringArray0[5] = "hsPmh";
      Filter.runFilter(discretize3, stringArray0);
      arrayList0.iterator();
      Discretize discretize4 = new Discretize("N%'IFzAe");
      discretize4.setDesiredWeightOfInstancesPerInterval(470.55472421191);
      discretize4.setBins(3633);
      try { 
        discretize2.setInputFormat(instances0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // weka.filters.unsupervised.attribute.Discretize: No attributes!
         //
         verifyException("weka.core.Capabilities", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      double[] doubleArray0 = new double[6];
      BinarySparseInstance binarySparseInstance0 = new BinarySparseInstance(5.6, doubleArray0);
      BinarySparseInstance binarySparseInstance1 = new BinarySparseInstance((Instance) binarySparseInstance0);
      String string0 = "~{0_WD&";
      SystemInUtil.addInputLine("~{0_WD&");
      BinarySparseInstance binarySparseInstance2 = null;
      try {
        binarySparseInstance2 = new BinarySparseInstance((-1776));
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.core.BinarySparseInstance", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=2.419594359581629
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f`<miKlXN:rs");
      discretize0.setOutputFormat();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String[] stringArray0 = new String[3];
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)14;
      byteArray0[3] = (byte)2;
      byteArray0[4] = (byte)124;
      System.setCurrentTimeMillis(0L);
      byteArray0[5] = (byte) (-64);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringArray0[0] = "f`<miKlXN:rs";
      Discretize.main(stringArray0);
      stringArray0[1] = "f`<miKlXN:rs";
      stringArray0[2] = "f`<miKlXN:rs";
      discretize0.getBinRangesString(1572);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "f`<miKlXN:rs");
      discretize0.getCutPoints(1572);
      // Undeclared exception!
      try { 
        discretize0.findNumBins((-1952257859));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.616658115912942
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "-R";
      stringArray0[1] = "Z9WCaw9`L";
      stringArray0[2] = "rZ%j";
      stringArray0[3] = "rZ%j";
      String string0 = "D2\\uA";
      stringArray0[4] = string0;
      stringArray0[5] = "f!4}EY84WBvK";
      stringArray0[6] = "~{0_WD&";
      stringArray0[7] = "`du6m6.Plsl";
      stringArray0[8] = "{ expected at beginning of enumeration";
      discretize0.setOptions(stringArray0);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.6410011474522856
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8lC]2bPh5Yu");
      Discretize discretize0 = new Discretize("8lC]2bPh5Yu");
      double[][] doubleArray0 = new double[2][7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relational");
      double[] doubleArray1 = new double[7];
      doubleArray1[0] = 100.0;
      doubleArray1[1] = 2499.20993;
      doubleArray1[3] = 2499.20993;
      doubleArray1[0] = 3.0;
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      discretize0.m_CutPoints = doubleArray0;
      assertFalse(discretize0.getUseEqualFrequency());
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "8lC]2bPh5Yu";
      stringArray0[1] = "8lC]2bPh5Yu";
      Filter.runFilter(discretize0, stringArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      discretize0.m_ClassIndex = 990;
      String string0 = discretize0.getBinRangesString(1);
      assertEquals("(-inf-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-0],(0-inf)", string0);
      assertFalse(discretize0.getUseBinNumbers());
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      discretize0.setAttributeIndices("\"k%0D");
      discretize0.m_MakeBinary = true;
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5531577432135641
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      Discretize discretize1 = new Discretize();
      discretize1.setUseEqualFrequency(false);
      assertFalse(discretize1.getMakeBinary());
      assertFalse(discretize1.getFindNumBins());
      assertEquals((-1.0), discretize1.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertEquals(10, discretize1.getBins());
      assertFalse(discretize1.getUseBinNumbers());
      assertFalse(discretize1.getUseEqualFrequency());
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "8lC]2bP5u");
      double[][] doubleArray0 = new double[2][7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "relatioy98nal");
      double[] doubleArray1 = new double[7];
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      doubleArray1[0] = 100.0;
      byte[] byteArray0 = new byte[9];
      byteArray0[1] = (byte)6;
      byteArray0[2] = (byte) (-34);
      byteArray0[3] = (byte)9;
      byteArray0[4] = (byte) (-47);
      byteArray0[5] = (byte)61;
      byteArray0[6] = (byte)26;
      byteArray0[7] = (byte)123;
      byteArray0[8] = (byte)23;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      doubleArray1[1] = 100.0;
      doubleArray1[3] = 100.0;
      doubleArray1[5] = 3.0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "8lC]2bP5u");
      doubleArray1[6] = 0.0;
      doubleArray0[0] = doubleArray1;
      Discretize discretize0 = new Discretize("relatioy98nal");
      discretize0.getCutPoints((byte)9);
      assertEquals(10, discretize0.getBins());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertFalse(discretize0.getUseBinNumbers());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      ArrayList<Attribute> arrayList0 = new ArrayList<Attribute>();
      Attribute attribute0 = new Attribute("c`meePCEhifaV?KD", (String) null, 1355);
      arrayList0.add(attribute0);
      Object object0 = new Object();
      Instances instances0 = new Instances((String) null, arrayList0, 3);
      MockRandom mockRandom0 = new MockRandom();
      instances0.randomize(mockRandom0);
      Discretize discretize0 = new Discretize();
      discretize0.setInputFormat(instances0);
      Object object1 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) "'B2of2'");
      predicate3.and(predicate1);
      predicate0.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      predicate5.negate();
      Object object2 = new Object();
      Object object3 = new Object();
      Integer integer0 = new Integer(786);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) integer0);
      predicate0.or(predicate6);
      Discretize discretize1 = null;
      try {
        discretize1 = new Discretize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "bD;%Q27_kT";
      stringArray0[3] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.\n";
      stringArray0[4] = "";
      Random.setNextRandom(61);
      Discretize discretize0 = new Discretize("");
      discretize0.getAttributeIndices();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getMakeBinary());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getFindNumBins());
      assertFalse(discretize0.getUseEqualFrequency());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[3] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.\n";
      stringArray0[4] = "";
      Discretize discretize0 = new Discretize();
      discretize0.getInvertSelection();
      assertEquals(10, discretize0.getBins());
      assertFalse(discretize0.getUseEqualFrequency());
      assertEquals((-1.0), discretize0.getDesiredWeightOfInstancesPerInterval(), 0.01);
      assertFalse(discretize0.getUseBinNumbers());
      assertFalse(discretize0.getMakeBinary());
      assertFalse(discretize0.getFindNumBins());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=2.820853215871297
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Discretize discretize0 = new Discretize();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "bD;%Q27_kT";
      stringArray0[3] = "\nGeneral options:\n\n-h\n\tGet help on available options.\n\t(se -b -h for help on batch mode.)\n-i <file>\n\tThe name of the file containing input instances.\n\tIf not supplied then instances will be read from stdin.\n-o <file>\n\tThe name of the file output instances will be written to.\n\tIf not supplied then instances will be written to stdout.\n-c <class index>\n\tThe number of the attribute to use as the class.\n\t\"first\" and \"last\" abe also valid entries.\n\tIf not supplied then no class is assigned.\n";
      stringArray0[4] = "";
      Filter.runFilter(discretize0, stringArray0);
      // Undeclared exception!
      try { 
        discretize0.calculateCutPoints();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("weka.filters.unsupervised.attribute.Discretize", e);
      }
  }
}
