/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:01:39 GMT 2019
 */

package weka.core.stemmers;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import weka.core.TechnicalInformation;
import weka.core.stemmers.LovinsStemmer;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LovinsStemmer_ESTest extends LovinsStemmer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.632617584392728
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer3.stemString("The year of publication or, for an unpublished work, the year it was written. Generally it should consist of four numerals, such as 1984, although the standard styles can handle any year whose last four nonpunctuation characters are numerals, such as `hbox{(about 1984)}'.");
      lovinsStemmer4.getTechnicalInformation();
      lovinsStemmer1.getRevision();
      lovinsStemmer4.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer4.getRevision();
      lovinsStemmer3.stemString("1pc6{]ulI");
      lovinsStemmer2.getRevision();
      LovinsStemmer.main((String[]) null);
      String string0 = lovinsStemmer4.getRevision();
      assertEquals("8034", string0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6545828368025397
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("ISBN-13");
      assertEquals("isbn-13", string0);
      
      String string1 = lovinsStemmer0.stemString("ationher");
      assertEquals("ationhes", string1);
      
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[3];
      stringArray0[0] = "(7khiKe";
      stringArray0[1] = "KgY4d'";
      stringArray0[2] = "VJ)ID. 2+-Nt^FFAN";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.toString();
      lovinsStemmer1.getTechnicalInformation();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.stemString("ical");
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.7208585738255542
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      lovinsStemmer0.stem("XBJf'`e");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.getRevision();
      lovinsStemmer2.toString();
      lovinsStemmer3.getRevision();
      lovinsStemmer2.getRevision();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer3.getRevision();
      lovinsStemmer1.stemString("wFPp>B3QypJ O");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.getRevision();
      lovinsStemmer3.getRevision();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5977699719563945
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("en");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("]q[.)>!H-");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("en");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer2.stemString("en");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      lovinsStemmer0.stemString("First option split up:");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("The number of a journal, magazine, technical report, or of a work in a series. An issue of a journal or magazine is usually identified by its volume and number; the organization that issues a technical report usually gives it a number; and sometimes books are given numbers in a named series.");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.stemString("th number of a journ, magaz, techn report, or of a work in a ser. an issu of a journ or magaz is usu identif by it volum and number; th organ that issu a techn report usu giv it a number; and sometim book ar giv number in a nam ser.");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer5.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.6201537543557585
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rus";
      stringArray0[1] = "yz";
      stringArray0[2] = "2V!0jR??oenFWhww";
      stringArray0[3] = "lovinsstemmerpand";
      stringArray0[4] = "The price of the document.";
      stringArray0[5] = "\tUses lowercas8 strings.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("\tUses lowercas8 strings.");
      String string0 = lovinsStemmer0.stemString("yz");
      assertEquals("yz", string0);
      
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("The price of the document.");
      assertEquals("th pric of th docum.", string1);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("ond");
      lovinsStemmer2.stemString("I");
      lovinsStemmer2.stemString("th pric of th docum.");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      lovinsStemmer2.toString();
      lovinsStemmer0.stemString("idkllux");
      lovinsStemmer2.stemString("hes");
      String string3 = lovinsStemmer0.stemString("lovinsstemmerpand");
      assertEquals("lovinsstemmerpans", string3);
      
      lovinsStemmer0.stem("\tUses lowercas8 strings.");
      lovinsStemmer0.stem("\tUses lowercas8 strings.");
      String string4 = lovinsStemmer1.stem("|Yr$H7s");
      assertEquals("|yr$h7", string4);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5779637287589017
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("$Reviion:a034 $");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("fm21'fgoend");
      lovinsStemmer1.stemString("$revi:a034 $");
      lovinsStemmer0.stemString("dex");
      lovinsStemmer1.stemString("dic");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer3.stemString("metr");
      lovinsStemmer2.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "meter";
      stringArray0[1] = "meter";
      stringArray0[2] = "dex";
      stringArray0[3] = "dic";
      stringArray0[4] = "$rev:a034 $";
      stringArray0[5] = "gaix";
      stringArray0[6] = "$rev:a034 $";
      stringArray0[7] = "fm21'fgoens";
      LovinsStemmer.main(stringArray0);
      assertEquals(8, stringArray0.length);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.6945742888840123
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("d9Y");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.toString();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.globalInfo();
      String string0 = lovinsStemmer1.stemString("(Jbb;@MpiU");
      assertEquals("(jb;@mpiu", string0);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "8034";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.getRevision();
      String string3 = lovinsStemmer4.stemString("hs%'Fu5CaESB.wRn");
      assertEquals("hs%'fu5caesb.wrn", string3);
      
      lovinsStemmer4.stemString("HyUu");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer3.getTechnicalInformation();
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.7382853215337142
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("umpt");
      assertEquals("um", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "antiality";
      stringArray0[1] = "antiality";
      stringArray0[2] = "j9ra.~>G0";
      stringArray0[3] = "um";
      lovinsStemmer0.stemString("olv");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stem("um");
      lovinsStemmer0.stemString("antiality");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string2 = lovinsStemmer1.stemString("A'rtI&n,w9");
      assertEquals("a'rt&n,w9", string2);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.stemString("mt");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      String string3 = lovinsStemmer0.getRevision();
      assertEquals("8034", string3);
      
      String string4 = lovinsStemmer1.stem("um");
      assertTrue(string4.equals((Object)string0));
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.618160734934138
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("/Lndj`V`Og-y");
      lovinsStemmer0.stem("The sponsoring institution of a technical report.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.getTechnicalInformation();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string1);
      
      lovinsStemmer1.getRevision();
      lovinsStemmer0.stem("8034");
      lovinsStemmer1.stem("ation");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      String string2 = lovinsStemmer1.stemString("String should not finish with ");
      assertEquals("string should not finish with ", string2);
      
      lovinsStemmer0.stem("String should not finish with ");
      String string3 = lovinsStemmer0.stem("String should not finish with ");
      assertEquals("string should not finish with ", string3);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.670872057657329
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("umpt");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "antiality";
      stringArray0[1] = "antiality";
      stringArray0[2] = "j9ra.~>G0";
      stringArray0[3] = "um";
      lovinsStemmer0.stem("PC4!^?W}DE,!-Jbi84+");
      stringArray0[4] = "um";
      stringArray0[5] = "umpt";
      stringArray0[6] = "um";
      lovinsStemmer0.stemString("JUB8X|<pqxXXJ+952");
      lovinsStemmer0.stemString("umpt");
      lovinsStemmer0.stemString("j9ra.~>G0");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stemString("um");
      lovinsStemmer0.stemString("um");
      lovinsStemmer0.stemString("umpt");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[1];
      stringArray1[0] = "The name of a series or set of books. When citing an entire book, the the title field gives its title and an optional series field gives the name of a series or multi-volume set in which the book is published.";
      LovinsStemmer.main(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.599454080608813
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "d9Y";
      lovinsStemmer0.stemString("d9Y");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("iev");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      assertEquals(TechnicalInformation.Type.ARTICLE, technicalInformation0.getType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6179085652535208
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[2];
      stringArray0[0] = "F|x33Z]_0BJh-";
      stringArray0[1] = "endcid";
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("F|x33Z]_0BJh-");
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.stemString("F|x33Z]_0BJh-");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer6.globalInfo();
      lovinsStemmer4.globalInfo();
      lovinsStemmer0.stemString("I");
      String string1 = lovinsStemmer5.stemString("BU+CSqLSK)]+<5d,>^t");
      assertEquals("bu+csqlsk)]+<5d,>^t", string1);
      
      lovinsStemmer1.stemString("A part of a book having its own title.");
      lovinsStemmer2.toString();
      lovinsStemmer5.globalInfo();
      String string2 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5764163009190832
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray0 = new String[1];
      LovinsStemmer.main(stringArray0);
      stringArray0[0] = "d9Y";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("^[iMjEn5:C<\u0006@!+j");
      lovinsStemmer0.stemString("Used for alphabetizing, cross referencing, and creating a label when the ``author'' information is missing. This field should not be confused with the key that appears in the cite command and at the beginning of the database entry.");
      lovinsStemmer1.toString();
      lovinsStemmer0.stemString("us for alphabes, cros refer, and creat a label when th ``author'' inform is mis. th field should not be confus with th key that appear in th cit command and at th begin of th databas entr.");
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.63333576184823
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "";
      stringArray0[1] = ",9_0_M^y+*Qih";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("");
      String string0 = lovinsStemmer1.stemString("ental");
      assertEquals("ent", string0);
      
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("ix");
      assertEquals("ix", string2);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6719323884575714
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      String string0 = lovinsStemmer0.stemString("algorithmher");
      assertEquals("algorithmhes", string0);
      
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6618093860000536
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.getRevision();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.stemString("8034");
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.stemString("rpT`rjk<+3T");
      lovinsStemmer1.stemString("ex");
      lovinsStemmer2.getRevision();
      LovinsStemmer.main(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6533138312528226
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("Lpv8bZQZr");
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      TechnicalInformation technicalInformation0 = lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("techreport");
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.stemString("weka.core.Option");
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer2.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer2.getTechnicalInformation();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "wek.cor.opt";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("ZGG");
      lovinsStemmer1.globalInfo();
      TechnicalInformation technicalInformation1 = lovinsStemmer3.getTechnicalInformation();
      assertFalse(technicalInformation1.equals((Object)technicalInformation0));
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.669725287906864
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String string0 = lovinsStemmer0.stemString("Can't construct a path to file relative to user dir.");
      assertEquals("can't construc a path to fil rel to user dir.", string0);
      
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      lovinsStemmer0.stemString("weka.core.stemmers.LovinsStemmer");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("wek.cor.stemmer.lovinsstemmer");
      lovinsStemmer1.stemString("wek.cor.stemmer.lovinsstemmer");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer2.stemString("k[,4PbD),!V@iS");
      assertEquals("k[,4pbd),!v@is", string1);
      
      String string2 = lovinsStemmer2.stemString("the physical dimensions of a work.pand");
      assertEquals("th phys dimens of a work.pans", string2);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer.main((String[]) null);
      String string3 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer3.stemString("ish");
      assertEquals("ish", string4);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.6288255895431825
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.stemString("lux");
      lovinsStemmer0.stemString("luc");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.stemString("lux");
      String string2 = lovinsStemmer0.stemString("INBOOK");
      assertEquals("inbook", string2);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5934241006276901
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer4.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer6.stemString("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capit, as shown he; th standard styl conver to lower ca when nec.");
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.globalInfo();
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer8.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "7DgEu\"&0";
      stringArray0[1] = "The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "lux";
      stringArray0[4] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[6] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[7] = "unpublished";
      stringArray0[8] = "8IV.lMzq#u";
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.644355838093115
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("KGmFG=qtT#I'y=CmHJQ");
      assertEquals("kgmfg=qt#i'y=cmhjq", string0);
      
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer5.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer5.stemString("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.", string2);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6172179699832483
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("8IV.lMzq#u");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "$Reviion: a034 $";
      stringArray0[3] = "$Reviion: a034 $";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("Ev$@/+\"W");
      String string0 = lovinsStemmer0.stemString("a stemmer based on the lovins stemmer, described here:\n\njulie beth lovins (1968). development of a stemming algorithm. mechanical translation and computational linguistics. 11:22-31.rud");
      assertEquals("a stemmer bas on th lovin stemmer, describ hes:\n\njuli beth lovin (1968). developm of a stem algorithm. mechan transl and comput lingu. 11:22-31.rus", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("8iv.lmzq#u");
      assertEquals("8iv.lmzq#u", string2);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.6275832002039163
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("ond");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.toString();
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer2.stemString("ons");
      assertEquals("on", string1);
      
      lovinsStemmer2.getTechnicalInformation();
      String string2 = lovinsStemmer0.stemString("Induction of decision trees");
      assertEquals("induc of decis tree", string2);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.5776437269422683
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Re=";
      stringArray0[1] = "isbnvad";
      stringArray0[2] = "/n\"=<+2";
      stringArray0[3] = "The authors affiliation.";
      stringArray0[4] = "isbnerid";
      stringArray0[5] = "KgY4d'";
      stringArray0[6] = "VJ)ID. 2+-Nt^FFAN";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String[] stringArray1 = new String[5];
      stringArray1[0] = "";
      stringArray1[1] = ",9_0_M^y+*Qih";
      stringArray1[2] = "";
      stringArray1[4] = "The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.";
      String string0 = lovinsStemmer0.stemString("ecntal");
      assertEquals("ecnt", string0);
      
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7697638233999613
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer2.getRevision();
      lovinsStemmer1.toString();
      lovinsStemmer1.getRevision();
      lovinsStemmer1.getRevision();
      lovinsStemmer0.stemString("");
      String string0 = lovinsStemmer3.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer0.getRevision();
      lovinsStemmer2.getRevision();
      String string1 = lovinsStemmer4.stemString("istr");
      assertEquals("ister", string1);
      
      lovinsStemmer5.getTechnicalInformation();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer2.getRevision();
      String string2 = lovinsStemmer0.getRevision();
      assertEquals("8034", string2);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.7036056829976614
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("1984vad");
      String string0 = lovinsStemmer0.stemString("1984vad");
      assertEquals("1984vas", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main((String[]) null);
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.globalInfo();
      lovinsStemmer2.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.635836099773683
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.");
      assertEquals("th edit of a book---for exampl, ``second''. th should be an ordin, and should hav th first letter capital, as shown hes; th standard styl convers to lower cas when neces.", string0);
      
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("vadpex");
      assertEquals("vadpic", string1);
      
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "The edition of a book---for example, ``Second''. This should be an ordinal, and should have the first letter capitalized, as shown here; the standard styles convert to lower case when necessary.";
      stringArray0[1] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[2] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[3] = "8IV.lMzq#u";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.globalInfo();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.6144549486194606
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      String[] stringArray0 = new String[0];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("entally");
      assertEquals("ent", string1);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("affiliend");
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("affiliend");
      assertEquals("affiliens", string2);
      
      String string3 = lovinsStemmer0.stemString("mI");
      assertEquals("mi", string3);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.6812312926941635
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.stemString(":8rc");
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("7DgEu\"&0");
      String string0 = lovinsStemmer1.stemString("fm21'fgoend");
      assertEquals("fm21'fgoens", string0);
      
      lovinsStemmer2.stemString("Lid-F}x.");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer4.stemString("ensend");
      String string1 = lovinsStemmer1.stemString("lis-f}x.");
      assertEquals("li-f}x.", string1);
      
      lovinsStemmer5.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "fm21'fgoens";
      stringArray0[1] = "lis-f}x.";
      stringArray0[2] = "Lid-F}x.";
      stringArray0[3] = "fm21'fgoend";
      stringArray0[4] = "7dgeu\"&0";
      stringArray0[5] = "ensens";
      stringArray0[6] = "li-f}x.";
      stringArray0[7] = "fm21'fgoens";
      stringArray0[8] = "fm21'fgoens";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer5.toString();
      lovinsStemmer6.toString();
      lovinsStemmer4.globalInfo();
      String string2 = lovinsStemmer6.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.6837385585635485
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rus";
      stringArray0[1] = "yz";
      stringArray0[2] = "2V!0jR??oenFWhww";
      String string0 = lovinsStemmer0.stemString("erid");
      stringArray0[3] = "lovinsstemmerpand";
      stringArray0[4] = "The price of the document.";
      stringArray0[5] = "\tUses lowercas8 strings.";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("lovinsstemmerpand");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.8079024085883129
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("GX-`['97lV9/.gkYR");
      assertEquals("gx-`['97lv9/.gkyr", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      String string1 = lovinsStemmer3.stemString("hu98myt");
      assertEquals("hu98mys", string1);
      
      lovinsStemmer0.stemString("XBJf'`e");
      lovinsStemmer0.globalInfo();
      lovinsStemmer3.toString();
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.6893581709000003
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("XBJf'`e");
      lovinsStemmer0.stemString("tex");
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("qju{j8h0j(\"mit");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("xbjf'`");
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("icide");
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.stemString("ic");
      lovinsStemmer1.getTechnicalInformation();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.stemString("MLVBbW~|zQ'btoKp");
      lovinsStemmer1.stemString("xbjf'`");
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6668802748351632
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "rus";
      stringArray0[1] = "yz";
      stringArray0[2] = "2V!0jR??oenFWhww";
      stringArray0[3] = "lovinsstemmerpand";
      stringArray0[4] = "The price of the document.";
      stringArray0[5] = "\tUses lowercas8 strings.";
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.stemString("The price of the document.");
      String string0 = lovinsStemmer1.stemString("ond");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("cjcrcid");
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.6105655945285395
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[1];
      stringArray0[0] = ";HmpDkULh+t7^6=";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.getTechnicalInformation();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      lovinsStemmer4.stemString("Problem reading local properties: ");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.stemString("uas");
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer6.toString();
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer7.globalInfo();
      String string0 = lovinsStemmer1.toString();
      assertEquals("weka.core.stemmers.LovinsStemmer", string0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.508111570879787
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("seret");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "seret";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.stemString("acies");
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer2.stemString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.6821896759333215
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("seret");
      assertEquals("seres", string0);
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[2] = "seret";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.407130939675643
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "antiaDhty";
      stringArray0[2] = "xyylud";
      lovinsStemmer0.stem("PC4!^?W}DE,!-Jbi84+");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer1.toString();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "xyylud";
      stringArray1[1] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[2] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[3] = "xyylud";
      stringArray1[4] = "antiaDhty";
      stringArray1[5] = "weka.core.stemmers.LovinsStemmer";
      stringArray1[6] = "JUB8X|<pqxXXJ+952";
      stringArray1[7] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stem("xyylud");
      assertEquals("xyylus", string1);
      
      String string2 = lovinsStemmer0.stem("xyylus");
      assertEquals("xyylus", string2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.50857967170949
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "GX-`['97lV9/.gkYR";
      stringArray0[1] = "qju{j8h0j(\"mit";
      stringArray0[2] = "qju{j8h0j(\"mit";
      stringArray0[3] = "Use this type when nothing else fits.";
      stringArray0[4] = "sumpt";
      stringArray0[5] = "tex";
      stringArray0[6] = "sumpt";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer1.stem("qju{j8h0j(\"mit");
      assertEquals("qju{j8h0j(\"mis", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stem("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.");
      String string2 = lovinsStemmer0.stem("weka.core.stemmers.LovinsStemmer");
      assertEquals("weka.core.stemmers.lovinsstemmer", string2);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7859540957162316
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      stringArray0[5] = "D*w+rtoP=r_";
      LovinsStemmer.main(stringArray0);
      stringArray0[1] = "cU";
      stringArray0[2] = "&#/=Z^!my$L?yU";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "8034ix";
      stringArray0[6] = "The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.";
      stringArray0[7] = "entiality";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "D*w+rtoP=r_";
      stringArray1[1] = "entiality";
      LovinsStemmer.main(stringArray0);
      stringArray1[2] = "cU";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("&#/=Z^!my$L?yU");
      assertEquals("&#/=z^!my$l?yu", string1);
      
      String string2 = lovinsStemmer0.stemString("8034ix");
      assertEquals("8034ic", string2);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.812336409081869
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("<vPi'OfWO2>G");
      assertEquals("<vpi'ofwo2>g", string0);
      
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.stemString("W");
      lovinsStemmer3.stemString("7DgEu\"&0");
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string1 = lovinsStemmer1.stemString("whZ1ZZ#'j");
      assertEquals("whz1zz#'j", string1);
      
      LovinsStemmer lovinsStemmer7 = new LovinsStemmer();
      lovinsStemmer5.stemString("whz1zz#'j");
      LovinsStemmer lovinsStemmer8 = new LovinsStemmer();
      lovinsStemmer0.stemString("7DgEu\"&0");
      lovinsStemmer4.stemString("7dgeu\"&0");
      lovinsStemmer8.globalInfo();
      LovinsStemmer lovinsStemmer9 = new LovinsStemmer();
      lovinsStemmer9.toString();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray0[1] = "7dgeu\"&0";
      stringArray0[2] = "7dgeu\"&0";
      stringArray0[3] = "%";
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer9.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer5.stemString("linguex");
      assertEquals("linguec", string3);
      
      String string4 = lovinsStemmer7.stemString("w");
      assertEquals("w", string4);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.5855540094022873
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer1.toString();
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("journal");
      assertEquals("journ", string0);
      
      String string1 = lovinsStemmer2.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string1);
      
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString("classnamax");
      assertEquals("classnamac", string2);
      
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer3.globalInfo();
      lovinsStemmer5.toString();
      String string3 = lovinsStemmer4.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.5040821714986778
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("sumpt");
      assertEquals("sum", string0);
      
      String[] stringArray0 = new String[7];
      stringArray0[0] = "antiaDhty";
      stringArray0[1] = "sumpt";
      stringArray0[2] = "xyylud";
      stringArray0[3] = "sum";
      lovinsStemmer0.stem("PC4!^?W}DE,!-Jbi84+");
      stringArray0[4] = "sum";
      stringArray0[0] = "sumpt";
      stringArray0[6] = "sum";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("xyylud");
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.684900540037939
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stemString("xbjf'dex");
      assertEquals("xbjf'dic", string0);
      
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stemString("ings");
      lovinsStemmer0.stemString("xbjf'dic");
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.stemString("xbjf'dic");
      assertEquals("xbjf'd", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stemString(".on`2");
      assertEquals(".on`2", string2);
      
      lovinsStemmer0.globalInfo();
      String string3 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stemString("Zmzf");
      assertEquals("zmzf", string4);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.6100383195952401
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("en");
      String string0 = lovinsStemmer0.stemString("Proceeding of the Sixteenth International Conference on Machine Learning");
      assertEquals("proceed of th sixteenth intern confer on mach learn", string0);
      
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "en";
      stringArray0[1] = "en";
      stringArray0[2] = "proceed of th sixteenth intern confer on mach learn";
      stringArray0[3] = "Proceeding of the Sixteenth International Conference on Machine Learning";
      stringArray0[4] = "en";
      stringArray0[5] = "1w+oUX$fREn";
      stringArray0[7] = "weka.core.stemmers.LovinsStemmer";
      stringArray0[8] = ",9_0_M^y+*Qih";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      String string2 = lovinsStemmer0.stemString("strigluspex");
      assertEquals("strigluspic", string2);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7746893160538737
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string0 = lovinsStemmer1.stemString("null");
      assertEquals("nl", string0);
      
      lovinsStemmer1.globalInfo();
      LovinsStemmer lovinsStemmer2 = new LovinsStemmer();
      lovinsStemmer2.globalInfo();
      LovinsStemmer lovinsStemmer3 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      LovinsStemmer lovinsStemmer4 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("Ky6RYM ]gVyR7'KMw*");
      assertEquals("ky6rym ]gvyr7'kmw*", string1);
      
      lovinsStemmer3.stemString("\\~");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "\\~";
      stringArray0[1] = "nl";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer1.stemString("nl");
      LovinsStemmer lovinsStemmer5 = new LovinsStemmer();
      lovinsStemmer3.globalInfo();
      lovinsStemmer5.globalInfo();
      lovinsStemmer2.toString();
      LovinsStemmer lovinsStemmer6 = new LovinsStemmer();
      String string2 = lovinsStemmer6.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.6295434437484284
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Re=";
      stringArray0[1] = "isbnvad";
      stringArray0[2] = "/n\"=<+2";
      stringArray0[3] = "The authors affiliation.";
      stringArray0[4] = "isbnerid";
      stringArray0[5] = "KgY4d'";
      stringArray0[6] = "VJ)ID. 2+-Nt^FFAN";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.toString();
      lovinsStemmer0.getTechnicalInformation();
      String string0 = lovinsStemmer0.stemString("KgY4d'");
      assertEquals("kgy4d'", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String string1 = lovinsStemmer0.stemString("uad");
      assertEquals("uas", string1);
      
      String string2 = lovinsStemmer1.stemString("weka.core.stemmers.LovinsStemmer");
      assertEquals("wek.cor.stemmer.lovinsstemmer", string2);
      
      lovinsStemmer1.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      String string3 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string3);
      
      String string4 = lovinsStemmer0.stemString("uas");
      assertEquals("ua", string4);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.4895670196028525
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      String string0 = lovinsStemmer0.stem("bex");
      assertEquals("bic", string0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "PC4!^?W}DE,!-Jbi84+";
      stringArray0[1] = "bex";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.4388437142969763
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.stem("8034icyz");
      lovinsStemmer0.stem("NOTE");
      lovinsStemmer0.stem("NOTE");
      lovinsStemmer0.globalInfo();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8034icyz";
      stringArray0[1] = "NOTE";
      stringArray0[2] = "NOTE";
      stringArray0[3] = "8034icyz";
      stringArray0[4] = "not";
      stringArray0[5] = "8034icys";
      stringArray0[6] = "5})g'";
      stringArray0[7] = "8034icyz";
      stringArray0[8] = "cFJ-";
      LovinsStemmer.main(stringArray0);
      assertEquals(9, stringArray0.length);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.4417494224244805
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("fully");
      assertEquals("fl", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      String string2 = lovinsStemmer0.stem("end");
      assertEquals("ens", string2);
      
      String string3 = lovinsStemmer0.stem("9~Oq-");
      assertEquals("9~oq-", string3);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.8117434924861942
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "baggqax";
      stringArray0[1] = "'N}Y$^!2r_[r<.dv";
      stringArray0[2] = "D*w+rtoP=r_";
      stringArray0[3] = "$Reviion:a034 $";
      stringArray0[4] = "D*w+rtoP=r_";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "baggqax";
      stringArray1[1] = "";
      stringArray1[2] = "cU";
      stringArray1[3] = "&#/=Z^!my$L?yU";
      String string0 = lovinsStemmer0.stemString("j7B3'eLj");
      assertEquals("j7b3'elj", string0);
      
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray1);
      String string1 = lovinsStemmer0.stemString("'N}Y$^!2r_[r<.dv");
      assertEquals("'n}y$^!2r_[r<.dv", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.6709395924024075
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lid");
      assertEquals("lis", string0);
      
      lovinsStemmer0.stem("/Lndj`V`Og-y");
      String string1 = lovinsStemmer0.stem("1E%x_[HE");
      lovinsStemmer0.toString();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "1e%x_[h";
      stringArray0[1] = "lid";
      stringArray0[2] = "1E%x_[HE";
      stringArray0[3] = "lis";
      stringArray0[4] = "1E%x_[HE";
      stringArray0[5] = "/lndj`v`og-";
      stringArray0[6] = "1E%x_[HE";
      stringArray0[7] = "1e%x_[h";
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("3H;q;");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getTechnicalInformation();
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stemString("1e%x_[h");
      assertTrue(string3.equals((Object)string1));
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ation");
      lovinsStemmer0.stem("The name(s) of the author(s), in the format described in the LaTeX book.");
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("dlusend");
      lovinsStemmer0.getTechnicalInformation();
      String string4 = lovinsStemmer0.getRevision();
      assertEquals("8034", string4);
      
      lovinsStemmer0.getTechnicalInformation();
      String string5 = lovinsStemmer0.stemString("3H;q;");
      assertEquals("3h;q;", string5);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.7772805991677298
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("lid");
      LovinsStemmer.main((String[]) null);
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.stemString("&#/=Z^!my$L?yU");
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer0.toString();
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5794534915570808
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stemString("lid");
      lovinsStemmer0.stem("/Lndj`V`Og-y");
      lovinsStemmer0.stem("lid");
      lovinsStemmer0.toString();
      lovinsStemmer0.stem("3H;q;");
      lovinsStemmer0.getRevision();
      LovinsStemmer.main((String[]) null);
      lovinsStemmer0.getTechnicalInformation();
      lovinsStemmer0.stem("3H;q;");
      String string0 = lovinsStemmer0.stemString("lis");
      assertEquals("li", string0);
      
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stem("ation");
      lovinsStemmer0.stem("The name(s) of the author(s), in the format described in the LaTeX book.");
      lovinsStemmer0.stemString("cid");
      lovinsStemmer0.getTechnicalInformation();
      String string1 = lovinsStemmer0.getRevision();
      assertEquals("8034", string1);
      
      lovinsStemmer0.stemString("dlusend");
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
      
      String string3 = lovinsStemmer0.stem("cid");
      assertEquals("cis", string3);
      
      String string4 = lovinsStemmer0.stem("BV%,>|l+{!10Z");
      assertEquals("bv%,>|l+{!10z", string4);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.4917752423807193
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Nwbxa?Q");
      assertEquals("nwbx?q", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[21];
      LovinsStemmer.main(stringArray0);
      stringArray0[1] = "cU";
      stringArray0[2] = "&#/=Z^!my$L?yU";
      lovinsStemmer0.toString();
      stringArray0[4] = "";
      stringArray0[5] = "oides";
      stringArray0[6] = "The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.";
      lovinsStemmer0.toString();
      stringArray0[7] = "entiality";
      String[] stringArray1 = new String[14];
      stringArray1[1] = "entiality";
      stringArray1[2] = "cU";
      stringArray1[3] = "cU";
      stringArray1[5] = "oides";
      LovinsStemmer.main(stringArray0);
      // Undeclared exception!
      try { 
        lovinsStemmer0.stemString(stringArray1[4]);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.6243083052711227
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[8];
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stemString("en");
      String[] stringArray1 = new String[2];
      stringArray1[0] = "The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.";
      stringArray1[1] = "The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.";
      String string0 = lovinsStemmer0.stemString("The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.");
      assertEquals("th databas key of th entr being cros refer. any field that ar mis from th cur record ar inherit from th field being cros refer.", string0);
      
      LovinsStemmer.main(stringArray1);
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      String string1 = lovinsStemmer0.stemString("Xc%2XirM5l|.b");
      assertEquals("xc%2xirm5l|.b", string1);
      
      String string2 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string2);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.6428379595390226
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("probToLogOdds: probability must be in [0,1] ");
      assertEquals("probtologod: prob must be in [0,1] ", string0);
      
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[3] = "probToLogOdds: probability must be in [0,1] ";
      lovinsStemmer0.globalInfo();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      lovinsStemmer0.toString();
      lovinsStemmer0.globalInfo();
      String string1 = lovinsStemmer1.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.762619697442577
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      String[] stringArray0 = new String[9];
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.globalInfo();
      lovinsStemmer0.toString();
      String[] stringArray1 = new String[8];
      stringArray1[0] = "tex";
      stringArray1[2] = "$Revision: 8080 $";
      stringArray1[3] = "$Revision: 8080 $";
      stringArray1[4] = "XBJf'`e";
      stringArray1[5] = "A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.";
      stringArray1[6] = "GX-`['97lV9/.gkYR";
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stemString("a'2hgR{");
      assertEquals("a'2hgr{", string1);
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.2206024556333217
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.stem("sumpt");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "antiaDhty";
      stringArray0[1] = "sum";
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      // Undeclared exception!
      try { 
        lovinsStemmer1.stem((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.4528750734004796
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "ialist";
      lovinsStemmer0.toString();
      stringArray0[2] = "x";
      stringArray0[3] = "Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.";
      stringArray0[4] = "IWI7@w`UIO*-o-";
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
      
      String string1 = lovinsStemmer0.stem("arizations");
      assertEquals("ar", string1);
      
      LovinsStemmer.main(stringArray0);
      LovinsStemmer.main(stringArray0);
      lovinsStemmer0.stem("x");
      String string2 = lovinsStemmer0.stem("IWI7@w`UIO*-o-");
      assertEquals("iwi7@w`uio*-o-", string2);
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.7827527488150405
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[5];
      stringArray0[0] = "bggqa";
      stringArray0[1] = "'N}Y$^!2r_[r<.dv";
      LovinsStemmer.main(stringArray0);
      stringArray0[2] = "D*w+rtoP=r_";
      stringArray0[3] = "$Reviion:a034 $";
      stringArray0[4] = "D*w+rtoP=r_";
      LovinsStemmer.main(stringArray0);
      String[] stringArray1 = new String[9];
      stringArray1[0] = "bggqa";
      stringArray1[1] = "";
      stringArray1[2] = "cU";
      stringArray1[3] = "&#/=Z^!my$L?yU";
      stringArray1[4] = "D*w+rtoP=r_";
      stringArray1[5] = "The database key of the entry being cross referenced. Any fields that are missing from the current record are inherited from the field being cross referenced.";
      stringArray1[4] = "oides";
      LovinsStemmer.main(stringArray1);
      String string0 = lovinsStemmer0.stemString("D*w+rtoP=r_");
      assertEquals("d*w+rtop=r_", string0);
      
      String string1 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string1);
      
      lovinsStemmer0.toString();
      String string2 = lovinsStemmer0.stemString("");
      assertFalse(string2.equals((Object)string0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Re=";
      lovinsStemmer0.stem("");
      LovinsStemmer lovinsStemmer1 = new LovinsStemmer();
      lovinsStemmer0.globalInfo();
      lovinsStemmer1.toString();
      LovinsStemmer.main(stringArray0);
      String string0 = lovinsStemmer0.globalInfo();
      assertEquals("A stemmer based on the Lovins stemmer, described here:\n\nJulie Beth Lovins (1968). Development of a stemming algorithm. Mechanical Translation and Computational Linguistics. 11:22-31.", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.5542291813660285
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "Re=";
      stringArray0[1] = "isbnvad";
      stringArray0[2] = "/n\"=<+2";
      stringArray0[3] = "The authors affiliation.";
      stringArray0[4] = "isbnerid";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      lovinsStemmer0.toString();
      lovinsStemmer0.stemString("Name(s) of editor(s), typed as indicated in the LaTeX book. If there is also an author field, then the editor field gives the editor of the book or collection in which the reference appears.");
      lovinsStemmer0.getRevision();
      lovinsStemmer0.stemString("\tuses lowercas8 strings.ex");
      LovinsStemmer.main(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.217575619028075
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("contents");
      assertEquals("content", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.2155879330020052
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stem("B2h5%[75kHE");
      assertEquals("b2h5%[75kh", string0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5024298963698737
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      String[] stringArray0 = new String[5];
      stringArray0[0] = "Q!SeHFt}DPBy\"AG/Y";
      stringArray0[1] = "Q!SeHFt}DPBy\"AG/Y";
      stringArray0[2] = "Q!SeHFt}DPBy\"AG/Y";
      stringArray0[3] = "Q!SeHFt}DPBy\"AG/Y";
      stringArray0[4] = "Q!SeHFt}DPBy\"AG/Y";
      LovinsStemmer lovinsStemmer0 = new LovinsStemmer();
      String string0 = lovinsStemmer0.stemString("Q!SeHFt}DPBy\"AG/Y");
      assertEquals("q!sehft}dpb\"ag/y", string0);
  }
}
