/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 03:09:32 GMT 2019
 */

package accessories.plugins.time;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import accessories.plugins.time.JDayChooser;
import accessories.plugins.time.JMonthChooser;
import accessories.plugins.time.JYearChooser;
import freemind.extensions.ExportHook;
import java.awt.AWTEventMulticaster;
import java.awt.Color;
import java.awt.ComponentOrientation;
import java.awt.Font;
import java.awt.HeadlessException;
import java.awt.SystemColor;
import java.awt.color.ColorSpace;
import java.awt.event.ActionEvent;
import java.awt.event.FocusEvent;
import java.awt.event.InputMethodListener;
import java.awt.event.KeyEvent;
import java.awt.image.DirectColorModel;
import java.awt.image.IndexColorModel;
import java.sql.Timestamp;
import java.text.ParsePosition;
import java.util.Calendar;
import java.util.Comparator;
import java.util.Date;
import java.util.Locale;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.Vector;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.SynchronousQueue;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.TimeUnit;
import javax.swing.Action;
import javax.swing.JDialog;
import javax.swing.JPasswordField;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JTable;
import javax.swing.KeyStroke;
import javax.swing.ListSelectionModel;
import javax.swing.MenuElement;
import javax.swing.MenuSelectionManager;
import javax.swing.event.MenuKeyEvent;
import javax.swing.plaf.ColorUIResource;
import javax.swing.table.DefaultTableColumnModel;
import javax.swing.table.DefaultTableModel;
import org.apache.batik.bridge.BridgeContext;
import org.apache.batik.bridge.DocumentLoader;
import org.apache.batik.bridge.SVGBridgeExtension;
import org.apache.batik.bridge.SVGColorProfileElementBridge;
import org.apache.batik.bridge.UserAgentAdapter;
import org.apache.batik.ext.awt.color.NamedProfileCache;
import org.apache.batik.gvt.CanvasGraphicsNode;
import org.apache.batik.gvt.CompositeGraphicsNode;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.apache.batik.script.InterpreterPool;
import org.apache.batik.util.ParsedURL;
import org.apache.xalan.templates.ElemTemplateElement;
import org.apache.xalan.templates.StylesheetRoot;
import org.apache.xalan.transformer.TransformerImpl;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.text.MockSimpleDateFormat;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JDayChooser_ESTest extends JDayChooser_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.2023409777124368
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDay(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Met~l");
      Integer integer0 = new Integer(1335);
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, (InputMethodListener) null);
      AWTEventMulticaster.remove(inputMethodListener2, (InputMethodListener) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(1);
      assertEquals(1, jDayChooser0.getMaxDayCharacters());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setMonth(1335);
      jDayChooser1.setFocus();
      jDayChooser1.drawDays();
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3828762838029194
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDay(1);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate();
      Timestamp timestamp0 = new Timestamp(169);
      mockDate0.after(timestamp0);
      Date date0 = jDayChooser0.setMinSelectableDate(timestamp0);
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 1, 3300L, 21, 95, 'E');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      jDayChooser0.setEnabled(true);
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.303634387468374
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate(209, 209, 209, 209, 209, 209);
      mockDate0.clone();
      Timestamp timestamp0 = new Timestamp(209);
      mockDate0.after(timestamp0);
      jDayChooser0.setMinSelectableDate(timestamp0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HL4.qg$%FHfH1N");
      FileSystemHandling.shouldAllThrowIOExceptions();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 37, 12, 12, 37, 'E');
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getDaysInMonth();
      JDayChooser jDayChooser1 = new JDayChooser(false);
      int int0 = 515;
      jDayChooser0.setMonth(515);
      byte[] byteArray0 = new byte[0];
      IndexColorModel indexColorModel0 = null;
      try {
        indexColorModel0 = new IndexColorModel((-2028), 209, byteArray0, byteArray0, byteArray0, byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Number of pixel bits must be > 0
         //
         verifyException("java.awt.image.ColorModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.134872868605743
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      MockCalendar.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "30");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      Date date0 = jDayChooser2.maxSelectableDate;
      jDayChooser2.setMaxSelectableDate(date0);
      assertFalse(jDayChooser2.isDecorationBordersVisible());
      assertEquals(14, jDayChooser2.getDay());
      assertFalse(jDayChooser2.isWeekOfYearVisible());
      assertTrue(jDayChooser2.isDayBordersVisible());
      assertTrue(jDayChooser2.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Color color0 = Color.cyan;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxSelectableDate((Date) null);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, (InputMethodListener) null);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.remove(inputMethodListener2, (InputMethodListener) null);
      AWTEventMulticaster.add(inputMethodListener2, inputMethodListener3);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener2);
      AWTEventMulticaster.add(inputMethodListener3, inputMethodListener2);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener3);
      MockSimpleDateFormat mockSimpleDateFormat0 = new MockSimpleDateFormat();
      ParsePosition parsePosition0 = new ParsePosition(12);
      mockSimpleDateFormat0.parse("", parsePosition0);
      jDayChooser0.setMinSelectableDate((Date) null);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.1711766902745504
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      Integer integer0 = new Integer(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate((-2885), 12, 2658, (-1709), 12, 145);
      jDayChooser0.updateUI();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMaxDayCharacters(0);
      JDayChooser jDayChooser2 = new JDayChooser(false);
      ComponentOrientation componentOrientation0 = ComponentOrientation.UNKNOWN;
      jDayChooser2.applyComponentOrientation(componentOrientation0);
      jDayChooser2.isDecorationBackgroundVisible();
      assertEquals(14, jDayChooser2.getDay());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.1963031322539246
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      Color color0 = Color.cyan;
      jDayChooser0.decorationBackgroundColor = color0;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.setMonth(9999);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      jDayChooser0.setSelectableDateRange((Date) null, (Date) null);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.1962914038371437
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Color color0 = Color.cyan;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      Locale locale0 = Locale.JAPANESE;
      NamedProfileCache namedProfileCache0 = new NamedProfileCache();
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setMaxDayCharacters(37);
      jDayChooser0.setMonth(1180);
      boolean boolean0 = jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.2055218749828893
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Warning: popContextNodeList when stack is empty!");
      Integer integer0 = new Integer(2435);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.setMonth(16);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      jDayChooser0.isWeekOfYearVisible();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2001041616734947
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDay(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Met~l");
      Integer integer0 = new Integer(1335);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      SVGBridgeExtension sVGBridgeExtension0 = new SVGBridgeExtension();
      userAgentAdapter0.registerExtension(sVGBridgeExtension0);
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter0, interpreterPool0, documentLoader0);
      ElemTemplateElement elemTemplateElement0 = new ElemTemplateElement();
      jDayChooser0.getDay();
      ParsedURL parsedURL0 = new ParsedURL("", "30");
      ParsedURL parsedURL1 = new ParsedURL("5");
      UserAgentAdapter userAgentAdapter1 = new UserAgentAdapter();
      userAgentAdapter1.checkLoadScript("", parsedURL1, parsedURL1);
      jDayChooser0.setDay(1335);
      jDayChooser0.setMonth(2);
      jDayChooser0.drawDays();
      jDayChooser0.isDecorationBordersVisible();
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.200115126225099
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      jDayChooser0.requestFocus();
      jDayChooser0.setDay(703);
      jDayChooser0.setMonth(703);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      Color color0 = Color.white;
      jDayChooser0.setSundayForeground(color0);
      assertEquals(31, jDayChooser0.getDay());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isValidateRoot();
      SystemColor systemColor0 = SystemColor.textInactiveText;
      Color color0 = systemColor0.darker();
      jDayChooser0.selectedColor = color0;
      jDayChooser0.addListeners(14);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.1549770795697887
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.setDay(8232);
      jDayChooser1.setMonth(8232);
      Boolean boolean0 = new Boolean("day");
      jDayChooser1.getDayPanel();
      assertEquals(31, jDayChooser1.getDay());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      JMonthChooser jMonthChooser0 = new JMonthChooser();
      jDayChooser0.setMonthChooser(jMonthChooser0);
      jDayChooser0.requestFocus();
      jDayChooser0.setDay(1);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Met~l");
      FileSystemHandling.shouldAllThrowIOExceptions();
      MockDate mockDate0 = new MockDate(1335, 2408, 1335, (-2871), 443, 2658);
      ExportHook exportHook0 = new ExportHook();
      TransformerImpl transformerImpl0 = null;
      try {
        transformerImpl0 = new TransformerImpl((StylesheetRoot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.transformer.TransformerImpl", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.091803330640885
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDay((-3));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "MeU~");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "17");
      Integer integer0 = new Integer(1335);
      MockDate mockDate0 = new MockDate(1335, 2408, 1335, (-2871), 443, 2658);
      ExportHook exportHook0 = new ExportHook();
      TransformerImpl transformerImpl0 = null;
      try {
        transformerImpl0 = new TransformerImpl((StylesheetRoot) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xalan.transformer.TransformerImpl", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.1509516053141597
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      MockCalendar.getInstance();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      Locale locale0 = Locale.JAPANESE;
      Locale locale1 = Locale.SIMPLIFIED_CHINESE;
      JDayChooser jDayChooser0 = new JDayChooser();
      // Undeclared exception!
      try { 
        jDayChooser0.setLocale((Locale) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.removeInputMethodListener((InputMethodListener) null);
      jDayChooser0.getFocusTraversalPolicy();
      MockDate mockDate0 = new MockDate();
      Date date0 = jDayChooser0.getMaxSelectableDate();
      jDayChooser0.setSelectableDateRange(mockDate0, date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.274246544102149
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      Color color0 = Color.cyan;
      SystemColor systemColor0 = SystemColor.window;
      jDayChooser0.removeNotify();
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      jDayChooser0.setMonth(41);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      jDayChooser0.getDecorationBackgroundColor();
      int int0 = jDayChooser0.getDay();
      assertEquals(14, int0);
      
      int int1 = jDayChooser0.getMaxDayCharacters();
      assertEquals(0, int1);
      
      jDayChooser0.getDecorationBackgroundColor();
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.1864012788224234
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      MockCalendar.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      jDayChooser0.setDayBordersVisible(false);
      jDayChooser0.updateUI();
      jDayChooser0.setMaxDayCharacters(6);
      assertTrue(jDayChooser0.isDayBordersVisible());
      
      JDayChooser jDayChooser1 = new JDayChooser(true);
      jDayChooser1.isDecorationBackgroundVisible();
      assertTrue(jDayChooser1.isDayBordersVisible());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.2054607286107037
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      jDayChooser0.setYear((-1921));
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "14");
      jDayChooser0.setWeekOfYearVisible(true);
      // Undeclared exception!
      try { 
        jDayChooser0.keyPressed((KeyEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.2404282305331034
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.requestFocus();
      jDayChooser0.setDay(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, (-4632), (-4632), 1, 1, 'f');
      keyEvent0.consume();
      jDayChooser0.keyPressed(keyEvent0);
      jDayChooser0.isDayBordersVisible();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "day";
      stringArray0[1] = null;
      stringArray0[2] = "day";
      stringArray0[3] = "day";
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.170017960567567
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.TAIWAN;
      jDayChooser0.drawDays();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      KeyStroke keyStroke0 = KeyStroke.getKeyStroke(19, (-1921));
      jDayChooser0.getActionForKeyStroke(keyStroke0);
      jDayChooser0.setYear((-1921));
      jDayChooser0.getLocale();
      jDayChooser0.setDecorationBordersVisible(false);
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.132643849015092
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockCalendar.getInstance();
      Color color0 = Color.cyan;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "ZVuPNZ5s#!a@");
      SystemColor systemColor0 = SystemColor.window;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      NamedProfileCache.getDefaultCache();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      sVGColorProfileElementBridge0.cache.request("28");
      jDayChooser0.initDecorations();
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel((ColorSpace) null, 2, 272, 210, 3, 1556, true, 14);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (110
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.205497927762563
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setAlignmentY(1230.3876F);
      jDayChooser0.getFont();
      jDayChooser0.setFont((Font) null);
      float[] floatArray0 = new float[5];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 0;
      Vector<String> vector0 = new Vector<String>();
      CompositeGraphicsNode compositeGraphicsNode0 = new CompositeGraphicsNode();
      SynchronousQueue<String> synchronousQueue0 = new SynchronousQueue<String>();
      Locale.lookupTag(compositeGraphicsNode0, synchronousQueue0);
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      jDayChooser0.setLocale(locale0);
      jDayChooser0.setAlwaysFireDayProperty(false);
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.ARABIC_FORM;
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      doReturn((Thread) null).when(threadFactory0).newThread(any(java.lang.Runnable.class));
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(1230, threadFactory0);
      Callable<MockCalendar> callable0 = (Callable<MockCalendar>) mock(Callable.class, new ViolatedAssumptionAnswer());
      TimeUnit timeUnit0 = TimeUnit.SECONDS;
      ScheduledFuture<MockCalendar> scheduledFuture0 = scheduledThreadPoolExecutor0.schedule(callable0, (long) gVTAttributedCharacterIterator_TextAttribute0.WRITING_MODE_RTL, timeUnit0);
      ActionEvent actionEvent0 = new ActionEvent(scheduledFuture0, (-608), (String) null, (-608));
      Object object0 = jDayChooser0.getTreeLock();
      ActionEvent actionEvent1 = new ActionEvent(object0, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL, (String) null, 19);
      // Undeclared exception!
      try { 
        jDayChooser0.actionPerformed(actionEvent1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.awt.Component$AWTTreeLock cannot be cast to javax.swing.JButton
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.169941939028131
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.resetKeyboardActions();
      JYearChooser jYearChooser0 = new JYearChooser();
      jDayChooser0.setYearChooser(jYearChooser0);
      jDayChooser0.getComponentListeners();
      // Undeclared exception!
      try { 
        jDayChooser0.getTemporaryCalendar();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.1608966978625985
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.add((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, inputMethodListener1);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add(inputMethodListener1, (InputMethodListener) null);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.add(inputMethodListener1, inputMethodListener1);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove(inputMethodListener3, inputMethodListener3);
      AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener1);
      AWTEventMulticaster.add(inputMethodListener2, (InputMethodListener) null);
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.remove(inputMethodListener1, (InputMethodListener) null);
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.add(inputMethodListener3, (InputMethodListener) null);
      AWTEventMulticaster.remove(inputMethodListener5, inputMethodListener4);
      jDayChooser0.getFocusTraversalPolicy();
      MockDate mockDate0 = new MockDate();
      jDayChooser0.setSelectableDateRange(mockDate0, mockDate0);
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDayChooser jDayChooser0 = new JDayChooser();
      Color color0 = jDayChooser0.getSundayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertEquals(164, color0.getRed());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.2401997224773753
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.contains((-3387), (-3387));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3387));
      jDayChooser0.resetKeyboardActions();
      JYearChooser jYearChooser0 = new JYearChooser();
      jYearChooser0.getGraphics();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem((Action) null);
      FocusEvent focusEvent1 = new FocusEvent(jDayChooser0, (-3387), false, jRadioButtonMenuItem0);
      focusEvent0.getOppositeComponent();
      jDayChooser0.focusLost(focusEvent0);
      jDayChooser0.isDayBordersVisible();
      jDayChooser0.getSundayForeground();
      KeyEvent keyEvent0 = new KeyEvent(jDayChooser0, 61446, 2569, (-3387), 10, 'k');
      JPasswordField jPasswordField0 = new JPasswordField("");
      KeyEvent.getKeyModifiersText(0);
      jDayChooser0.keyReleased(keyEvent0);
      jDayChooser0.getSundayForeground();
      Locale locale0 = new Locale("", "\"glZ2yK");
      MockCalendar.getInstance(locale0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-2240), 15, 10);
      jDayChooser0.setCalendar(mockGregorianCalendar0);
      assertEquals(14, jDayChooser0.getDay());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=?,areFieldsSet=false,areAllFieldsSet=false,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"GMT\",offset=0,dstSavings=0,useDaylight=false,transitions=0,lastRule=null],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=?,YEAR=-2240,MONTH=15,WEEK_OF_YEAR=?,WEEK_OF_MONTH=?,DAY_OF_MONTH=10,DAY_OF_YEAR=?,DAY_OF_WEEK=?,DAY_OF_WEEK_IN_MONTH=?,AM_PM=0,HOUR=0,HOUR_OF_DAY=0,MINUTE=0,SECOND=0,MILLISECOND=?,ZONE_OFFSET=?,DST_OFFSET=?]", mockGregorianCalendar0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.133877146667982
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      jDayChooser0.updateUI();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "day");
      jDayChooser0.getInheritsPopupMenu();
      FileSystemHandling.shouldAllThrowIOExceptions();
      jDayChooser0.getSelectedDay();
      jDayChooser0.getHierarchyBoundsListeners();
      jDayChooser0.monthChooser = null;
      jDayChooser0.validate();
      jDayChooser0.setDayBordersVisible(true);
      jDayChooser0.getSelectedDay();
      Calendar calendar0 = MockCalendar.getInstance();
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.setCalendar(calendar0);
      jDayChooser0.drawWeeks();
      Locale locale0 = Locale.ITALIAN;
      MockSimpleDateFormat mockSimpleDateFormat0 = null;
      try {
        mockSimpleDateFormat0 = new MockSimpleDateFormat("Ib?5\"dYvZ^HloG%^0<=", locale0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal pattern character 'I'
         //
         verifyException("java.text.SimpleDateFormat", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      
      MockDate mockDate0 = new MockDate((-287), 136, 0, 0, 28, 4076);
      jDayChooser0.setWeekOfYearVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.0965652109688846
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      Locale locale0 = Locale.ITALY;
      jDayChooser0.setDecorationBackgroundVisible(false);
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.196255230930651
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      Color.getColor((String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      jDayChooser0.setWeekdayForeground((Color) null);
      Locale locale0 = Locale.CANADA;
      Stack<Locale.LanguageRange> stack0 = new Stack<Locale.LanguageRange>();
      Locale.LanguageRange locale_LanguageRange0 = new Locale.LanguageRange("Metal");
      stack0.add(locale_LanguageRange0);
      stack0.sort((Comparator<? super Locale.LanguageRange>) null);
      CanvasGraphicsNode canvasGraphicsNode0 = new CanvasGraphicsNode();
      Locale.lookup(stack0, canvasGraphicsNode0);
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-57), false);
      jDayChooser0.focusLost(focusEvent0);
      java.sql.Date date0 = new java.sql.Date((-57));
      jDayChooser0.setSelectableDateRange(date0, date0);
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.1656169131191403
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      MockCalendar.getInstance();
      jDayChooser0.requestFocus();
      assertEquals(14, jDayChooser0.getDay());
      
      jDayChooser0.setDay(703);
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener1);
      AWTEventMulticaster.remove(inputMethodListener2, inputMethodListener2);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.remove((InputMethodListener) null, (InputMethodListener) null);
      AWTEventMulticaster.add(inputMethodListener2, (InputMethodListener) null);
      JDayChooser jDayChooser1 = new JDayChooser(false);
      jDayChooser1.setMonth(2437);
      jDayChooser0.setFocus();
      jDayChooser0.drawDays();
      assertEquals(28, jDayChooser0.getDay());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getSelectedDay();
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isDecorationBordersVisible());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.0965518909555647
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(true);
      // Undeclared exception!
      try { 
        jDayChooser0.setCalendar((Calendar) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("accessories.plugins.time.JDayChooser", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.1609952673725847
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.getMouseMotionListeners();
      jDayChooser0.init();
      jDayChooser0.getPropertyChangeListeners();
      int int0 = 27;
      jDayChooser0.setMaxDayCharacters(27);
      jDayChooser0.getDaysInMonth();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      int int1 = 5;
      int int2 = (-6732);
      int int3 = 42;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(5, "day", 2077, 1005, (-6732), 27, 8866, (-1), 42, 2077);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal start month 2077
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.1509776724370013
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.setMaxDayCharacters((-2906));
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      MockCalendar.getInstance();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      JDialog jDialog0 = null;
      try {
        jDialog0 = new JDialog();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.1336798095581577
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      JDayChooser jDayChooser0 = new JDayChooser();
      JDayChooser.DecoratorButton jDayChooser_DecoratorButton0 = jDayChooser0.new DecoratorButton();
      jDayChooser_DecoratorButton0.getTransferHandler();
      jDayChooser_DecoratorButton0.isFocusable();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
  }

  /**
  //Test case number: 39
  /*Coverage entropy=3.133692749014442
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Vector<MockGregorianCalendar> vector0 = new Vector<MockGregorianCalendar>(48, 48);
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(vector0, vector0);
      DefaultTableColumnModel defaultTableColumnModel0 = new DefaultTableColumnModel();
      JTable jTable0 = new JTable(defaultTableModel0, defaultTableColumnModel0, (ListSelectionModel) null);
      Color color0 = jTable0.getGridColor();
      jDayChooser0.setForeground(color0);
      jDayChooser0.getWeekdayForeground();
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.096538374336882
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser(false);
      MenuKeyEvent menuKeyEvent0 = new MenuKeyEvent(jDayChooser0, 677, 677, 0, 0, '3', (MenuElement[]) null, (MenuSelectionManager) null);
      jDayChooser0.keyTyped(menuKeyEvent0);
      assertEquals(14, jDayChooser0.getDay());
      assertFalse(jDayChooser0.isWeekOfYearVisible());
      assertTrue(jDayChooser0.isDayBordersVisible());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      String[] stringArray0 = new String[18];
      stringArray0[0] = "14";
      // Undeclared exception!
      try { 
        JDayChooser.main(stringArray0);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.1336533618782805
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      jDayChooser0.isRequestFocusEnabled();
      jDayChooser0.contains((-3387), (-3387));
      FocusEvent focusEvent0 = new FocusEvent(jDayChooser0, (-3387));
      jDayChooser0.resetKeyboardActions();
      JMonthChooser jMonthChooser0 = new JMonthChooser(false);
      focusEvent0.setSource(jDayChooser0);
      focusEvent0.setSource("day");
      focusEvent0.getOppositeComponent();
      jDayChooser0.getComponentListeners();
      jDayChooser0.focusGained(focusEvent0);
      ColorUIResource colorUIResource0 = (ColorUIResource)jDayChooser0.oldDayBackgroundColor;
      jDayChooser0.getHierarchyListeners();
      assertEquals(14, jDayChooser0.getDay());
      assertTrue(jDayChooser0.isDayBordersVisible());
      assertTrue(jDayChooser0.isDecorationBackgroundVisible());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.133766650651363
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      MockCalendar.getInstance();
      Color color0 = Color.cyan;
      SystemColor systemColor0 = SystemColor.window;
      JDayChooser jDayChooser0 = new JDayChooser(false);
      UserAgentAdapter userAgentAdapter0 = new UserAgentAdapter();
      DocumentLoader documentLoader0 = new DocumentLoader(userAgentAdapter0);
      SVGBridgeExtension sVGBridgeExtension0 = new SVGBridgeExtension();
      userAgentAdapter0.registerExtension(sVGBridgeExtension0);
      UserAgentAdapter userAgentAdapter1 = new UserAgentAdapter();
      InterpreterPool interpreterPool0 = new InterpreterPool();
      BridgeContext bridgeContext0 = new BridgeContext(userAgentAdapter1, interpreterPool0, documentLoader0);
      ElemTemplateElement elemTemplateElement0 = new ElemTemplateElement();
      jDayChooser0.getDay();
      ParsedURL parsedURL0 = new ParsedURL("document", "document");
      ParsedURL parsedURL1 = new ParsedURL("Start point cannot equalendpoint");
      userAgentAdapter0.checkLoadScript("?5>.2-NN_Rof{;D!DO", parsedURL1, parsedURL0);
      jDayChooser0.setDay(1);
      jDayChooser0.setMonth(47);
      jDayChooser0.drawDays();
      assertEquals(1, jDayChooser0.getDay());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.1348698575597207
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JDayChooser jDayChooser0 = new JDayChooser();
      FileSystemHandling.shouldAllThrowIOExceptions();
      InputMethodListener inputMethodListener0 = mock(InputMethodListener.class, new ViolatedAssumptionAnswer());
      InputMethodListener inputMethodListener1 = AWTEventMulticaster.add(inputMethodListener0, inputMethodListener0);
      AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener1);
      InputMethodListener inputMethodListener2 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener0);
      InputMethodListener inputMethodListener3 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener2);
      InputMethodListener inputMethodListener4 = AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener3);
      InputMethodListener inputMethodListener5 = AWTEventMulticaster.remove(inputMethodListener1, inputMethodListener2);
      AWTEventMulticaster.remove(inputMethodListener5, inputMethodListener2);
      AWTEventMulticaster.add(inputMethodListener5, (InputMethodListener) null);
      InputMethodListener inputMethodListener6 = AWTEventMulticaster.add(inputMethodListener4, inputMethodListener4);
      AWTEventMulticaster.remove(inputMethodListener6, inputMethodListener5);
      AWTEventMulticaster.add((InputMethodListener) null, inputMethodListener5);
      AWTEventMulticaster.remove(inputMethodListener4, (InputMethodListener) null);
      MockDate mockDate0 = new MockDate();
      JDayChooser jDayChooser1 = new JDayChooser();
      JDayChooser jDayChooser2 = new JDayChooser();
      jDayChooser1.getMinSelectableDate();
      assertTrue(jDayChooser1.isDayBordersVisible());
      assertEquals(14, jDayChooser1.getDay());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1326303323964093
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      MockCalendar.getInstance();
      Color color0 = Color.cyan;
      SystemColor systemColor0 = SystemColor.window;
      JDayChooser jDayChooser0 = new JDayChooser(true);
      jDayChooser0.setDecorationBackgroundColor(systemColor0);
      NamedProfileCache.getDefaultCache();
      SVGColorProfileElementBridge sVGColorProfileElementBridge0 = new SVGColorProfileElementBridge();
      sVGColorProfileElementBridge0.cache.request("f");
      DirectColorModel directColorModel0 = null;
      try {
        directColorModel0 = new DirectColorModel((ColorSpace) null, 2533, (-3), 200, 3, 200, true, (-585));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Noncontiguous red mask (fffffffd
         //
         verifyException("java.awt.image.PackedColorModel", e);
      }
  }
}
