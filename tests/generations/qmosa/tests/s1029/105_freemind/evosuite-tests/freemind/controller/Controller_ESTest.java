/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 00:49:44 GMT 2019
 */

package freemind.controller;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import freemind.controller.Controller;
import freemind.main.FreeMindApplet;
import freemind.main.FreeMindMain;
import freemind.modes.filemode.FileMode;
import freemind.preferences.FreemindPropertyListener;
import java.awt.Color;
import java.awt.HeadlessException;
import java.awt.event.InputEvent;
import java.awt.event.KeyEvent;
import java.awt.event.WindowEvent;
import javax.swing.DefaultListCellRenderer;
import javax.swing.JFormattedTextField;
import javax.swing.JList;
import javax.swing.JProgressBar;
import javax.swing.JToolTip;
import javax.swing.text.DefaultFormatterFactory;
import javax.swing.text.InternationalFormatter;
import org.apache.batik.gvt.text.GVTAttributedCharacterIterator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import plugins.collaboration.database.DatabaseStarter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Controller_ESTest extends Controller_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Controller.addPropertyChangeListener((FreemindPropertyListener) null);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      JToolTip jToolTip0 = new JToolTip();
      long long0 = 90L;
      jToolTip0.firePropertyChange("standalone", 90L, (-685L));
      jToolTip0.setOpaque(false);
      jToolTip0.setSize((-1), (-2619));
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LENGTH_ADJUST;
      KeyEvent.getExtendedKeyCodeForChar((int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_INITIAL);
      jToolTip0.getTipText();
      jToolTip0.contains(0, (int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_AUTO);
      InputEvent.getModifiersExText((int) gVTAttributedCharacterIterator_TextAttribute0.ORIENTATION_ANGLE);
      Controller.removePropertyChangeListener((FreemindPropertyListener) null);
      FreeMindApplet freeMindApplet0 = null;
      try {
        freeMindApplet0 = new FreeMindApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      JList<DatabaseStarter> jList0 = new JList<DatabaseStarter>();
      JToolTip jToolTip0 = new JToolTip();
      jToolTip0.setOpaque(false);
      jToolTip0.setSize((-2838), 2654);
      KeyEvent keyEvent0 = new KeyEvent(defaultListCellRenderer_UIResource0, (-2838), 0L, (-2838), 2394, 'x');
      GVTAttributedCharacterIterator.TextAttribute gVTAttributedCharacterIterator_TextAttribute0 = GVTAttributedCharacterIterator.TextAttribute.LENGTH_ADJUST;
      keyEvent0.paramString();
      JProgressBar jProgressBar0 = new JProgressBar();
      keyEvent0.setSource(jProgressBar0);
      KeyEvent.getExtendedKeyCodeForChar(289);
      jToolTip0.getTipText();
      jToolTip0.contains((int) gVTAttributedCharacterIterator_TextAttribute0.ADJUST_SPACING, (int) gVTAttributedCharacterIterator_TextAttribute0.ARABIC_MEDIAL);
      InputEvent.getModifiersExText(1);
      keyEvent0.setKeyChar('x');
      keyEvent0.setSource(gVTAttributedCharacterIterator_TextAttribute0);
      Controller.DisposeOnClose controller_DisposeOnClose0 = new Controller.DisposeOnClose();
      // Undeclared exception!
      try { 
        controller_DisposeOnClose0.componentHidden(keyEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$DisposeOnClose", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Controller.Closer controller_Closer0 = new Controller.Closer();
      controller_Closer0.windowGainedFocus((WindowEvent) null);
      // Undeclared exception!
      try { 
        controller_Closer0.windowClosing((WindowEvent) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$Closer", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      FileMode fileMode0 = new FileMode();
      fileMode0.getController();
      Controller.CloseAction controller_CloseAction0 = null;
      try {
        controller_CloseAction0 = new Controller.CloseAction((Controller) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller$CloseAction", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      // Undeclared exception!
      try { 
        Controller.addPropertyChangeListenerAndPropagate((FreemindPropertyListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Controller controller0 = null;
      try {
        controller0 = new Controller((FreeMindMain) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("freemind.controller.Controller", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      InternationalFormatter internationalFormatter0 = new InternationalFormatter();
      internationalFormatter0.getCommitsOnValidEdit();
      DefaultFormatterFactory defaultFormatterFactory0 = new DefaultFormatterFactory(internationalFormatter0, internationalFormatter0);
      JFormattedTextField jFormattedTextField0 = new JFormattedTextField((JFormattedTextField.AbstractFormatterFactory) defaultFormatterFactory0);
      defaultFormatterFactory0.setNullFormatter(internationalFormatter0);
      Color color0 = Color.magenta;
      jFormattedTextField0.getMouseMotionListeners();
      Color color1 = color0.darker();
      try { 
        Controller.showCommonJColorChooserDialog(jFormattedTextField0, (String) null, color1);
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.awt.GraphicsEnvironment", e);
      }
  }
}
