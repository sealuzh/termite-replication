/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:43:45 GMT 2019
 */

package wheel.json;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StringWriter;
import java.io.Writer;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Map;
import java.util.function.BiFunction;
import java.util.function.Predicate;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import wheel.json.JSONArray;
import wheel.json.JSONObject;
import wheel.json.JSONTokener;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSONObject_ESTest extends JSONObject_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.3354435943704392
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Float float0 = new Float(1.0);
      JSONObject.numberToString(float0);
      Byte byte0 = new Byte((byte) (-19));
      Byte byte1 = new Byte((byte) (-19));
      Integer.remainderUnsigned((byte)47, 2335);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte.toUnsignedInt((byte)27);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.toUnsignedLong((byte)47);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Float float1 = new Float((double) 2335);
      linkedList3.removeFirstOccurrence(linkedList0);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer0 = new Integer(47);
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      JSONObject jSONObject0 = new JSONObject(linkedList5);
      jSONObject0.optBoolean("is", true);
      jSONObject0.append("?i=", linkedList4);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.758596644690653
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean boolean0 = Boolean.valueOf(true);
      Float.isFinite(2192);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.poll();
      JSONObject jSONObject2 = jSONObject0.put("Expeced a ':' after a ke", (Collection) linkedList1);
      jSONObject0.putOpt("/Ty`JAP0sS4EW%NpJ.%", linkedList0);
      JSONObject.getNames((Object) jSONObject2);
      Short short0 = new Short((short) (-2812));
      JSONObject jSONObject3 = jSONObject2.append("A JSONObject text must begin with '{'", (Object) null);
      jSONObject2.isNull("/Ty`JAP0sS4EW%NpJ.%");
      jSONObject0.optJSONArray("0");
      stringWriter0.append('{');
      JSONObject jSONObject4 = new JSONObject(boolean0);
      jSONObject3.toJSONArray((JSONArray) null);
      jSONObject3.getJSONArray("Expeced a ':' after a ke");
      assertEquals(3, jSONObject2.length());
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.3261029578469845
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.toJSONArray(jSONArray0);
      jSONObject0.put("false", true);
      jSONObject0.accumulate("false", stringWriter2);
      JSONObject jSONObject1 = jSONObject0.accumulate("false", stringWriter4);
      assertSame(jSONObject1, jSONObject0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.6438250020560705
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      jSONObject0.optInt("0.0", 125);
      JSONObject jSONObject1 = jSONObject0.put("Jxs=[m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("jjQ0/Sn3-:JV,s{[", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optInt(stringArray0[0], 125);
      jSONObject0.optDouble("4v^+yQ^'fhW");
      Boolean boolean0 = Boolean.TRUE;
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject3 = jSONObject0.optJSONObject("jjQ0/Sn3-:JV,s{[");
      jSONObject3.optJSONObject("4v^+yQ^'fhW");
      JSONArray jSONArray1 = jSONObject2.names();
      assertEquals(2, jSONArray1.length());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.7927684350784725
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean.valueOf(true);
      Float.isFinite(2192);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.poll();
      JSONObject jSONObject2 = jSONObject0.put("Expeced a ':' after a ke", (Collection) linkedList1);
      jSONObject0.putOpt("/Ty`JAP0sS4EW%NpJ.%", linkedList0);
      JSONObject.valueToString(linkedList1);
      Short short0 = new Short((short) (-2812));
      jSONObject2.append("A JSONObject text must begin with '{'", (Object) null);
      jSONObject2.isNull("/Ty`JAP0sS4EW%NpJ.%");
      jSONObject0.optJSONArray("0");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.containsAll(linkedList3);
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject3.getLong((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.888889565815087
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optInt("Null key.");
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject1 = jSONObject0.put("j[SJy_ SWH", (Map) hashMap0);
      JSONObject jSONObject2 = jSONObject1.accumulate("Null key.", hashMap0);
      jSONObject0.toString(55, 55);
      jSONObject0.put("j[SJy_ SWH", true);
      LinkedList<Float> linkedList0 = new LinkedList<Float>();
      JSONObject jSONObject3 = jSONObject2.put("Null key.", (Collection) linkedList0);
      HashMap<Object, JSONArray> hashMap1 = new HashMap<Object, JSONArray>();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      linkedList0.removeIf(predicate0);
      Boolean boolean0 = Boolean.valueOf(true);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      hashMap1.put(boolean0, jSONArray0);
      jSONObject2.put("GwCZ*&SDt][w", (Map) hashMap1);
      jSONObject3.getBoolean("j[SJy_ SWH");
      try { 
        jSONObject2.getString("W@>|{]CB");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"W@>|{]CB\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.89668383090432
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wi", "wi");
      Integer integer0 = new Integer(23);
      JSONObject jSONObject2 = jSONObject1.accumulate("wi", integer0);
      JSONObject.valueToString(jSONObject1, 23, 23);
      jSONObject2.put("va", (-5556L));
      jSONObject1.optInt("va", 23);
      jSONObject1.optDouble((String) null, (double) 23);
      jSONObject2.optDouble("va");
      JSONObject.quote("va");
      JSONObject.quote("{\"java.lang.String@0000000002\": [\n                                              \"java.lang.String@0000000002\",\n                                              java.lang.Integer@0000000004\n                       ]}");
      jSONObject1.optLong("va", (-511L));
      jSONObject2.put("", true);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.820662333029113
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer(23);
      JSONObject jSONObject1 = jSONObject0.accumulate("wi", integer0);
      JSONObject.valueToString(jSONObject0, 23, 23);
      jSONObject0.optInt("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", 23);
      jSONObject0.optDouble((String) null, (double) 23);
      jSONObject1.optDouble("wi");
      JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
      JSONObject.quote("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}");
      jSONObject0.optLong("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", (-511L));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.613129842728147
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      jSONObject0.put("N'rv11PV", (Object) null);
      String string0 = "val";
      try { 
        jSONObject0.getLong("{");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.2956922263061337
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "wi";
      JSONObject jSONObject1 = jSONObject0.putOpt("wi", "wi");
      int int0 = 23;
      JSONObject jSONObject2 = jSONObject1.putOpt("isnext", jSONObject0);
      // Undeclared exception!
      jSONObject2.toString(23);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.8133224558281076
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Long.getLong("wheel.json.JSONTokener");
      hashMap0.put((Long) null, "wheel.json.JSONTokener");
      Object object0 = new Object();
      Integer integer0 = new Integer(55);
      Integer integer1 = new Integer(55);
      // Undeclared exception!
      try { 
        JSONObject.valueToString(hashMap0, 55, 55);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0126200936538066
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("^!h", 0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write("^!h", 0, 0);
      stringWriter0.append((CharSequence) "^!h");
      JSONObject.quote("^!h");
      JSONObject jSONObject1 = jSONObject0.accumulate("Substringlbounds error", "\"^!h\"");
      stringWriter0.append((CharSequence) "\"^!h\"");
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      Double double0 = new Double(0);
      Double.min(1367.915, 0.0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double double1 = new Double(683.413660532);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyDouble());
      hashMap1.compute(double1, biFunction0);
      int int0 = jSONObject1.getInt("^!h");
      assertEquals(2, jSONObject0.length());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.0135941302281792
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(55);
      hashMap1.put(integer0, (Integer) null);
      Integer.sum((-108916131), 55);
      Integer integer1 = new Integer(55);
      Object object1 = JSONObject.NULL;
      String string0 = JSONObject.valueToString((Object) null);
      assertEquals("null", string0);
      
      Integer.sum(55, (-108916131));
      JSONObject.valueToString(hashMap1, 55, (-210));
      String string1 = JSONObject.doubleToString((-108916131));
      assertEquals("-1.08916131E8", string1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.7696178169873487
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("istoString");
      Boolean boolean0 = Boolean.TRUE;
      boolean boolean1 = Boolean.getBoolean("");
      JSONObject jSONObject1 = jSONObject0.append("istoString", boolean0);
      String[] stringArray0 = JSONObject.getNames((Object) "\r");
      jSONObject1.optLong(":c");
      jSONObject0.optInt("\r");
      Object object0 = new Object();
      jSONObject0.optInt(":c");
      Byte.compare((byte)74, (byte) (-100));
      jSONObject1.optLong("JSONObject[");
      JSONObject jSONObject2 = new JSONObject("JSONObject[", stringArray0);
      jSONObject2.optInt("?nwO!hK^n p'#");
      Double double0 = new Double(0);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "");
      Predicate<Integer> predicate1 = predicate0.negate();
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate1.negate();
      Predicate<Integer> predicate4 = predicate2.negate();
      predicate3.negate();
      predicate4.or(predicate3);
      predicate4.negate();
      JSONObject jSONObject3 = new JSONObject();
      boolean boolean2 = jSONObject3.optBoolean((String) null, false);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.9417968132656287
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Integer integer0 = new Integer((-1502));
      jSONObject0.accumulate("hDQ", integer0);
      JSONObject.quote("hDQ");
      JSONObject jSONObject1 = new JSONObject();
      JSONObject.doubleToString((-61.9608458600861));
      jSONObject0.getInt("hDQ");
      jSONObject0.toString();
      jSONObject0.toString((-1502));
      Integer integer1 = new Integer((-1502));
      JSONObject jSONObject2 = jSONObject0.append("{\"java.lang.String@0000000002\": java.lang.Integer@0000000003}", integer1);
      assertSame(jSONObject0, jSONObject2);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.791860588242525
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Byte byte0 = new Byte((byte) (-6));
      JSONObject jSONObject1 = jSONObject0.putOpt("iscompare", byte0);
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(34);
      Integer.getInteger("iscompare", 1);
      hashMap1.put("iscompare", integer0);
      Integer integer1 = new Integer(55);
      JSONObject jSONObject2 = jSONObject1.putOpt("iscompare", hashMap0);
      Short short0 = new Short((short) (-2812));
      Short.compare((short) (-2812), (short) (-2844));
      JSONObject jSONObject3 = jSONObject1.append("6M5@V@\"\"", integer1);
      jSONObject0.isNull("/Ty`JAP0sS4EW%NpJ.%");
      jSONObject3.optJSONArray("A JSONObject text must begin with '{'");
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      linkedList2.containsAll(linkedList0);
      JSONObject jSONObject4 = new JSONObject();
      jSONObject2.getJSONArray("6M5@V@\"\"");
      assertEquals(2, jSONObject2.length());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.446532019925912
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate1);
      predicate7.or(predicate6);
      Object object0 = new Object();
      Predicate.isEqual(object0);
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) predicate3);
      Predicate<Integer> predicate9 = predicate8.or(predicate4);
      Predicate<Integer> predicate10 = predicate8.and(predicate5);
      predicate10.and(predicate9);
      JSONObject jSONObject1 = jSONObject0.append("", predicate6);
      jSONObject1.put(":JdM2W2JE", 1865);
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.put("LV5n?#rF1nkKl\"/WCa", 315.0);
      JSONObject jSONObject3 = jSONObject1.put("in", true);
      try { 
        jSONObject2.accumulate((String) null, jSONObject3);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.4232763223737264
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "hDQ";
      Integer integer0 = new Integer(40);
      Integer.min(28, 28);
      jSONObject0.accumulate("hDQ", integer0);
      JSONObject.quote("hDQ");
      JSONObject jSONObject1 = new JSONObject();
      jSONObject1.optLong("\"hDQ\"", (long) 28);
      JSONObject.valueToString(jSONObject1);
      JSONObject.quote("hDQ");
      jSONObject0.getInt("hDQ");
      LinkedList<Object> linkedList0 = new LinkedList<Object>();
      jSONObject1.put("JSONArray[", (Collection) linkedList0);
      try { 
        jSONObject0.getBoolean("mi");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"mi\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long((-1038L));
      Short short0 = new Short((short)10);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) short0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.negate();
      Predicate<Object> predicate3 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.or(predicate2);
      Predicate<Object> predicate6 = predicate4.and(predicate5);
      predicate2.or(predicate5);
      Predicate<Object> predicate7 = predicate5.and(predicate1);
      Predicate<Object> predicate8 = predicate1.negate();
      predicate4.or(predicate6);
      predicate1.and(predicate6);
      Integer integer0 = new Integer(110);
      Predicate.isEqual((Object) integer0);
      Predicate<Integer> predicate9 = Predicate.isEqual((Object) jSONObject0);
      Predicate<Integer> predicate10 = predicate9.or(predicate3);
      Predicate<Integer> predicate11 = predicate9.and(predicate8);
      Predicate<Integer> predicate12 = predicate10.and(predicate1);
      predicate7.test(long0);
      Predicate<Integer> predicate13 = predicate12.negate();
      Predicate<Integer> predicate14 = predicate10.negate();
      predicate14.or(predicate1);
      predicate13.or(predicate7);
      predicate11.negate();
      Boolean boolean0 = new Boolean(false);
      String[] stringArray0 = JSONObject.getNames((Object) null);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.156496413892256
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      JSONObject jSONObject1 = jSONObject0.accumulate("&7cJ", "&7cJ");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "isfloatToIntBits");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      predicate0.or(predicate3);
      JSONArray jSONArray1 = new JSONArray();
      jSONObject1.accumulate("<ERV{O]T8IKfb5{h-(", jSONArray1);
      jSONObject0.optJSONArray("gettoString");
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.3597473990481395
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean.logicalOr(true, true);
      boolean boolean1 = false;
      String string0 = "n\\b";
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject("n\b");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of n\b
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.3789267893363286
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      Integer integer0 = new Integer(55);
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[7] = '3';
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      Float float0 = new Float((float) 55);
      JSONObject jSONObject1 = jSONObject0.append("toH", float0);
      jSONObject0.isNull("oC#");
      jSONObject0.keys();
      JSONArray jSONArray1 = jSONObject1.optJSONArray("toH");
      try { 
        jSONArray1.getJSONObject(28);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[28] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.0888032729045807
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      String string0 = "";
      stringArray0[0] = "";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean.logicalXor(true, true);
      jSONObject0.optBoolean("", false);
      jSONObject1.put("", (-1561.0947));
      Boolean boolean1 = new Boolean("");
      jSONObject1.getLong("");
      boolean boolean2 = true;
      Boolean.compare(true, true);
      jSONObject0.optJSONObject("isnext");
      Byte.compare((byte) (-59), (byte) (-59));
      HashMap<Double, Double> hashMap0 = new HashMap<Double, Double>();
      JSONTokener jSONTokener0 = new JSONTokener("isnext");
      JSONObject jSONObject2 = null;
      try {
        jSONObject2 = new JSONObject(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of isnext
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=2.888247735926316
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wi", "wi");
      Integer integer0 = new Integer(23);
      JSONObject jSONObject2 = jSONObject1.accumulate("wi", integer0);
      JSONObject.valueToString(jSONObject1, 23, 23);
      jSONObject0.put("wi", (long) 23);
      jSONObject1.optInt("va", 23);
      jSONObject1.optDouble((String) null, (double) 23);
      jSONObject2.optDouble("va");
      JSONObject.quote("va");
      JSONObject.quote("{\"java.lang.String@0000000002\": [\n                                              \"java.lang.String@0000000002\",\n                                              java.lang.Integer@0000000004\n                       ]}");
      jSONObject1.optLong("va", (-511L));
      jSONObject2.put(".", (Object) null);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.4871451385467114
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wi", "wi");
      int int0 = 23;
      jSONObject1.putOpt("isnext", jSONObject0);
      Integer integer0 = new Integer(23);
      jSONObject1.accumulate("wi", integer0);
      // Undeclared exception!
      JSONObject.valueToString(jSONObject1, 23, 23);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.991475123849225
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      jSONObject0.optInt("0.0", 125);
      JSONObject jSONObject1 = jSONObject0.put("JxM=m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("{}", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optInt("", 125);
      jSONObject2.optDouble("JxM=m/Te+'taW?");
      jSONObject2.toString(125, (-1332));
      jSONObject1.optInt("2nHV,");
      Double double0 = new Double(0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean(true);
      Boolean.compare(true, true);
      hashMap0.put("[]", boolean0);
      jSONObject1.optLong("4v^+yQ^'fhW", (-3144L));
      jSONObject2.put("2nHV,", 0.0);
      try { 
        jSONObject0.getLong("C@7i5w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C@7i5w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String[] stringArray0 = new String[1];
      stringArray0[0] = "";
      Byte.compare((byte) (-59), (byte) (-59));
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      // Undeclared exception!
      try { 
        JSONObject.getNames((JSONObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.819516316525786
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "u],!Hwb2AOXd\\";
      jSONObject0.putOpt("u],!Hwb2AOXd", "u],!Hwb2AOXd");
      Float float0 = new Float(Double.NaN);
      try { 
        JSONObject.numberToString(float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.131945482927921
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      char[] charArray0 = new char[14];
      charArray0[0] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      StringWriter stringWriter3 = new StringWriter('3');
      StringWriter stringWriter4 = new StringWriter();
      jSONObject0.optInt("4m/CxyV]57[7hLwP~]");
      Double double0 = new Double((-2595.75042048));
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean(true);
      Boolean.compare(false, true);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.put("[]", boolean0);
      jSONObject0.optLong("[]", (long) 0);
      jSONObject0.put("[]", (-738.439));
      try { 
        jSONObject0.get("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.492957834421075
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("Substring bounds error", (Object) null);
      Integer integer0 = new Integer(23);
      jSONObject1.accumulate("Substring bounds error", jSONObject0);
      JSONObject.valueToString(integer0, 23, 26);
      Float float0 = new Float((double) 26);
      jSONObject0.put("getnext", (double) 0);
      assertEquals(2, jSONObject0.length());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.8777333143348334
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      jSONObject0.optInt("0.0", 125);
      JSONObject jSONObject1 = jSONObject0.put("", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = new JSONObject((Object) "");
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optInt("", 125);
      jSONObject0.optDouble((String) null);
      jSONObject2.toString(125, (-1332));
      jSONObject1.optInt("2nHV,");
      Double double0 = new Double(0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean(true);
      Boolean.compare(true, true);
      hashMap0.put("[]", boolean0);
      jSONObject1.optLong("4v^+yQ^'fhW", (-3144L));
      jSONObject2.put("2nHV,", 0.0);
      long long0 = jSONObject0.getLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.9433761826171116
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(34);
      hashMap1.put(integer0, (Integer) null);
      Integer integer1 = new Integer(34);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString((Object) null);
      JSONObject.getNames(jSONObject0);
      JSONArray jSONArray0 = new JSONArray();
      String string0 = null;
      jSONObject0.opt((String) null);
      jSONArray0.optJSONObject(34);
      Integer.getInteger("<[t5`(s'<3FS", 34);
      Integer integer2 = new Integer(34);
      int int0 = 11;
      jSONObject0.optInt((String) null, 11);
      try { 
        jSONObject0.getJSONObject(".");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\".\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Short short0 = new Short((short)9);
      Float.max((-558.8F), (-558.8F));
      Integer integer0 = new Integer(678);
      int int0 = (-2658);
      Integer integer1 = new Integer(678);
      String string0 = null;
      Integer integer2 = new Integer((short)9);
      Integer integer3 = new Integer((-2658));
      Integer.getInteger((String) null, integer3);
      Integer integer4 = new Integer((-2658));
      Integer integer5 = new Integer((short)9);
      Integer.getInteger((String) null, 678);
      Integer.getInteger((String) null, integer5);
      Integer integer6 = new Integer((-2658));
      Integer.getInteger("Expected '", integer4);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer.toUnsignedLong(10);
      Integer integer7 = new Integer(10);
      Integer integer8 = new Integer((short)9);
      Integer integer9 = new Integer((-517));
      Integer integer10 = new Integer((-684));
      Integer.getInteger((String) null, integer10);
      try { 
        jSONObject0.put((String) null, (long) (-517));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.9045137735534627
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      char[] charArray0 = new char[14];
      charArray0[0] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      StringWriter stringWriter3 = new StringWriter('3');
      StringWriter stringWriter4 = new StringWriter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4m/CxyV]57[7hLwP~]";
      stringArray0[1] = "4m/CxyV]57[7hLwP~]";
      jSONArray0.put((int) '3', true);
      jSONArray0.put((Object) null);
      stringWriter3.append('{');
      stringArray0[3] = "4m/CxyV]57[7hLwP~]";
      JSONObject jSONObject1 = new JSONObject(stringWriter3);
      try { 
        jSONObject1.toJSONArray(jSONArray0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray[52] not found.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.105092687462102
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      char[] charArray0 = new char[14];
      charArray0[0] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      StringWriter stringWriter4 = new StringWriter('3');
      StringWriter stringWriter5 = new StringWriter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4m/CxyV]57[7hLwP~]";
      stringArray0[1] = "4m/CxyV]57[7hLwP~]";
      jSONArray0.put((int) '3', true);
      stringWriter4.append('{');
      stringArray0[3] = "4m/CxyV]57[7hLwP~]";
      JSONObject jSONObject1 = new JSONObject(stringWriter4);
      jSONObject1.toJSONArray(jSONArray0);
      try { 
        jSONObject1.getJSONArray("4m/CxyV]57[7hLwP~]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"4m/CxyV]57[7hLwP~]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.6137909276120137
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      StringWriter stringWriter2 = stringWriter1.append('2');
      jSONArray0.write(stringWriter2);
      Writer writer0 = jSONArray0.write(stringWriter2);
      HashMap<Boolean, String> hashMap0 = new HashMap<Boolean, String>();
      jSONObject1.put("", (Map) hashMap0);
      jSONObject2.write(writer0);
      JSONObject jSONObject3 = jSONObject1.put("", 0.0);
      Short short0 = new Short((short)57);
      JSONObject.valueToString(short0);
      jSONObject2.optDouble("\"\"", (-2636.9957114));
      try { 
        jSONObject3.getJSONObject("DXUS/mv4\"");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"DXUS/mv4\\\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.034626756459324
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = jSONObject0.put("", 5862.5);
      JSONObject jSONObject2 = jSONObject0.put(",", (Map) hashMap0);
      jSONObject0.optInt("1v910A;0h@mOQW4riE", 330);
      HashMap<Integer, Float> hashMap1 = new HashMap<Integer, Float>();
      JSONObject jSONObject3 = new JSONObject((Map) hashMap0);
      jSONObject1.toString(69);
      jSONObject1.optInt("");
      jSONObject2.optLong("\r");
      jSONObject1.optString("wr", "wr");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap3 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap4 = new HashMap<Integer, String>(9);
      jSONObject3.put("JSONArray initial value should be a string or collection or array.", (Map) hashMap4);
      Boolean boolean1 = Boolean.TRUE;
      Float float0 = new Float((float) 59);
      JSONObject.valueToString(jSONObject3);
      JSONArray jSONArray1 = jSONObject3.optJSONArray("U.Un[uR>a");
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.307316227018637
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      int int0 = jSONObject0.optInt("isvalueOf");
      assertEquals(0, int0);
      
      Double double0 = new Double(1490.53577);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean(true);
      Boolean.compare(true, true);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      hashMap0.put("", boolean0);
      long long0 = jSONObject0.optLong("[]", (-1934L));
      assertEquals((-1934L), long0);
      
      jSONObject0.put("", 3739.0911815);
      jSONObject0.get("");
      long long1 = jSONObject0.getLong("");
      assertEquals(3739L, long1);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.707641660796905
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = jSONObject0.put("Jxs=[m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("jjQ0/Sn3-:JV,s{[", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject0.optDouble("4v^+yQ^'fhW");
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put("Jxs=[m/Te+'taW?", boolean0);
      jSONObject2.optLong(" at character ");
      jSONObject1.optInt("2nHV,");
      Double double0 = new Double(0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Boolean boolean1 = new Boolean(false);
      Boolean.compare(true, false);
      jSONObject1.optLong("4v^+yQ^'fhW", (long) 125);
      JSONObject jSONObject3 = jSONObject2.put("2nHV,", 0.0);
      try { 
        jSONObject3.get("x]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"x]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.951527277452731
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("", 125);
      jSONObject1.optInt("");
      jSONObject1.optLong((String) null);
      jSONObject0.optString("1.0", (String) null);
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>(2439);
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject2 = new JSONObject(boolean0, stringArray0);
      jSONObject2.put("7wN0mV;7j%E{Iw-^%H:", (Map) hashMap0);
      Boolean boolean1 = Boolean.TRUE;
      Float float0 = new Float((-197.8F));
      JSONObject.valueToString("7wN0mV;7j%E{Iw-^%H:");
      JSONArray jSONArray1 = jSONObject1.optJSONArray((String) null);
      assertNull(jSONArray1);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.9524934001382785
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONObject jSONObject2 = jSONObject1.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      JSONObject.doubleToString(1.0);
      JSONObject jSONObject3 = jSONObject2.accumulate("Substring bounds error", "1");
      jSONObject3.optInt("s)@0iZr$ '_b5A^7*Ov");
      jSONObject3.optLong("Substring bounds error");
      jSONObject1.optString("~v|.-7*qb`", "");
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>(125);
      jSONObject2.put("ylA+wiI/! +waav/", (Map) hashMap1);
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float((-838.9177F));
      JSONObject.valueToString("isformat");
      JSONArray jSONArray2 = jSONObject2.optJSONArray((String) null);
      assertNull(jSONArray2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.4921780197874424
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("Expeced a ':' after a ke", (Object) "Expeced a ':' after a ke");
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      JSONObject jSONObject2 = new JSONObject();
      jSONObject0.optBoolean("Expeced a ':' after a ke", true);
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean.valueOf(true);
      Float.isFinite(2192);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject3 = jSONObject1.put("Expeced a ':' after a ke", (Collection) linkedList1);
      jSONObject1.putOpt("va", linkedList0);
      Short short0 = new Short((short) (-2812));
      Short.compare((short) (-2812), (short) (-2812));
      jSONObject3.append("A JSONObject text must begin with '{'", (Object) null);
      boolean boolean0 = new Boolean(true);
      jSONObject1.optJSONArray("0");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.containsAll(linkedList3);
      try { 
        jSONObject3.getString("0");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"0\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = null;
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.2344281389559963
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.optDouble("");
      String string1 = "4v^+yQ^'fhW";
      try { 
        jSONObject0.put("", Double.NaN);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSON does not allow non-finite numbers.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.229288537426763
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject0 = new JSONObject(jSONTokener0);
      jSONObject0.remove("{}");
      JSONObject jSONObject1 = jSONObject0.put("\r", (-1222));
      jSONObject0.optJSONArray("\r");
      jSONObject0.remove("\r");
      jSONObject1.optJSONObject("true");
      try { 
        jSONObject0.getInt("$HWBceDSm9?\"6");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"$HWBceDSm9?\\\"6\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.343679987341
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Short short0 = new Short((short)9);
      Float.max((-558.8F), (-558.8F));
      Integer integer0 = new Integer(678);
      Integer integer1 = new Integer(678);
      Integer integer2 = new Integer((short)9);
      Integer integer3 = new Integer((-2658));
      Integer.getInteger((String) null, integer3);
      Integer integer4 = new Integer((-2658));
      Integer integer5 = new Integer((short)9);
      Integer.getInteger((String) null, integer5);
      Integer integer6 = new Integer((-2658));
      Integer.getInteger("Expected '", integer4);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "Expected '";
      stringArray0[1] = null;
      stringArray0[2] = "YW$h[-`f;=kuU;Z";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONArray jSONArray0 = jSONObject0.toJSONArray((JSONArray) null);
      assertNull(jSONArray0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      String string0 = null;
      JSONObject jSONObject1 = null;
      try {
        jSONObject1 = new JSONObject((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      JSONObject jSONObject1 = new JSONObject();
      int int0 = 2192;
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean.valueOf(true);
      Float.isFinite(2192);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.poll();
      try { 
        jSONObject1.put((String) null, (Collection) linkedList1);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.60864262403751
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      Integer integer0 = new Integer(55);
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      charArray0[7] = '3';
      stringWriter1.append('3');
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[3] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getJSONArray("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.073011196363045
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      long long0 = jSONObject0.getLong("");
      assertEquals(0L, long0);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long1 = Long.getLong("", (long) 0);
      String string0 = hashMap0.put(long1, "");
      JSONObject jSONObject2 = jSONObject1.put("$-lMcAmD8", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject0.put("Z|_r", (Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "Z|_r";
      stringArray0[3] = "Z6yTB";
      stringArray0[4] = "";
      stringArray0[5] = "$-lMcAmD8";
      stringArray0[6] = "@]P:/3a@T";
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      assertEquals(3, jSONObject4.length());
      
      double double0 = jSONObject3.optDouble((String) null, (-734.600756214));
      assertEquals((-734.600756214), double0, 0.01);
      
      int int0 = jSONObject0.optInt(string0, 83);
      assertEquals(83, int0);
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Boolean boolean1 = new Boolean("rv:R^uuk0%u~oyp5?");
      String string0 = JSONObject.quote("a)zA/Q5=yj(cLqtM");
      assertEquals("\"a)zA/Q5=yj(cLqtM\"", string0);
      
      String string1 = JSONObject.quote((String) null);
      assertEquals("\"\"", string1);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.500272168748763
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      stringArray0[0] = "~wh;n.]RrGc";
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = jSONObject0.put("~wh;n.]RrGc", (-1561.0947));
      jSONObject0.getString("~wh;n.]RrGc");
      Byte.compare((byte) (-59), (byte) (-59));
      jSONObject0.optLong("~wh;n.]RrGc");
      jSONObject1.optInt("\r");
      Double double0 = new Double((-2423.12206004868));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.and(predicate0);
      Predicate<Integer> predicate4 = predicate0.negate();
      Predicate<Integer> predicate5 = predicate0.and(predicate4);
      predicate5.or(predicate0);
      Predicate<Integer> predicate6 = predicate3.negate();
      assertFalse(predicate6.equals((Object)predicate5));
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.655487492669889
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("");
      JSONObject jSONObject1 = jSONObject0.append("", boolean0);
      JSONObject.getNames((Object) "\r");
      jSONObject1.optLong(":c");
      jSONObject0.optInt("\r");
      Object object0 = new Object();
      jSONObject0.optInt(":c");
      jSONObject1.optString("");
      jSONObject0.optInt("|%nDMc\"lEAMycf}t");
      Double double0 = new Double((-2423.12206004868));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "\r");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      Predicate<Integer> predicate5 = predicate0.or(predicate4);
      Predicate<Integer> predicate6 = predicate0.and(predicate3);
      Predicate<Integer> predicate7 = predicate6.negate();
      predicate6.and(predicate7);
      // Undeclared exception!
      try { 
        predicate5.or((Predicate<? super Integer>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expece a ':' after a ke";
      try { 
        jSONObject0.put((String) null, (Object) "Expece a ':' after a ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.602536706222233
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wi", "wi");
      Integer integer0 = new Integer(23);
      JSONObject jSONObject2 = jSONObject1.accumulate("wi", integer0);
      JSONObject.valueToString(jSONObject1, 23, 23);
      jSONObject1.optInt("va", 23);
      jSONObject2.optJSONArray("toL");
      try { 
        jSONObject2.get("{\"java.lang.String@0000000002\": [\n                                              \"java.lang.String@0000000002\",\n                                              java.lang.Integer@0000000004\n                       ]}");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"{\\\"java.lang.String@0000000002\\\": [\\n                                              \\\"java.lang.String@0000000002\\\",\\n                                              java.lang.Integer@0000000004\\n                       ]}\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      int int0 = Boolean.compare(false, false);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) boolean0);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate2);
      predicate1.and(predicate0);
      predicate4.negate();
      Byte.toUnsignedInt((byte)44);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.removeFirstOccurrence(predicate4);
      Integer integer0 = new Integer((-1034));
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.toUnsignedLong((-1427));
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Object object0 = JSONObject.NULL;
      predicate2.test(object0);
      Float float0 = new Float(0.0);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.removeFirstOccurrence(predicate3);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList6 = new LinkedList<Integer>();
      Integer integer1 = new Integer(57);
      LinkedList<Long> linkedList7 = new LinkedList<Long>();
      LinkedList<Integer> linkedList8 = new LinkedList<Integer>();
      LinkedList<Long> linkedList9 = new LinkedList<Long>();
      linkedList8.containsAll(linkedList9);
      JSONObject jSONObject0 = new JSONObject();
      int int1 = jSONObject0.length();
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.682828719976844
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean.valueOf("gG6.5W.1(<");
      Float.isFinite(0.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject0.put("java.lang.Long@0000000010", (Collection) linkedList1);
      jSONObject0.putOpt("", "gG6.5W.1(<");
      Short short0 = new Short((short)26);
      Short.compare((short)26, (short)26);
      JSONObject jSONObject1 = jSONObject0.append("M5!L[R1j_PxIW _V", short0);
      jSONObject0.isNull("");
      jSONObject0.keys();
      jSONObject0.optJSONArray("BI\"=)X");
      jSONObject0.get("M5!L[R1j_PxIW _V");
      jSONObject0.optJSONObject("java.lang.Long@0000000010");
      int int0 = jSONObject1.length();
      assertEquals(6, int0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String[] stringArray0 = new String[0];
      JSONObject jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
      // Undeclared exception!
      try { 
        jSONObject0.write((Writer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.567637005227583
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      JSONArray jSONArray1 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      jSONObject0.put("wheel.json.JSONObject$Null", 21);
      Integer integer0 = new Integer(2722);
      jSONObject1.accumulate("wai", "wai");
      Object object0 = JSONObject.NULL;
      JSONObject.valueToString(object0, 39, 39);
      Float float0 = new Float((double) 2722);
      try { 
        jSONObject0.put((String) null, (-2370.6));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      Boolean.compare(true, true);
      Object object0 = new Object();
      Integer.toUnsignedLong(1274);
      LinkedList<Long> linkedList0 = new LinkedList<Long>();
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Integer integer0 = new Integer(2);
      Boolean boolean1 = Boolean.FALSE;
      Integer integer1 = new Integer(0);
      linkedList3.add(integer1);
      linkedList3.removeFirstOccurrence(boolean1);
      LinkedList<Long> linkedList4 = new LinkedList<Long>();
      linkedList3.containsAll(linkedList4);
      HashMap<Boolean, Float> hashMap0 = new HashMap<Boolean, Float>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject0.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.613041078405035
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      JSONObject jSONObject1 = new JSONObject(iterator0);
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean boolean0 = new Boolean(true);
      Float.isFinite(0.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      Boolean.valueOf("/rI}>!sD");
      Boolean.compare(true, true);
      jSONObject1.put("java.lang.Long@0000000010", (Collection) linkedList1);
      jSONObject1.putOpt("UCvQBWfZ_T&z}J}#", "gG6.5W.1(<");
      Short short0 = new Short((short)26);
      Short.compare((short)26, (short)26);
      jSONObject1.append("M5!L[R1j_PxIW _V", short0);
      jSONObject1.isNull("UCvQBWfZ_T&z}J}#");
      jSONObject0.keys();
      jSONObject1.optInt("getoptInt", 0);
      jSONObject0.optJSONArray("B\"=)X");
      jSONObject1.get("M5!L[R1j_PxIW _V");
      jSONObject1.optJSONObject("java.lang.Long@0000000010");
      try { 
        jSONObject1.getInt("/rI}>!sD");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"/rI}>!sD\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.3326598731784283
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      int int0 = 0;
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "");
      JSONObject.doubleToString(1.0);
      jSONObject1.accumulate("Substring bounds error", "1");
      Integer integer0 = new Integer(58);
      Short short0 = new Short((short)97);
      Float float0 = new Float((double) (short)97);
      jSONObject0.accumulate("", float0);
      jSONObject0.getDouble("Substring bounds error");
      JSONTokener jSONTokener0 = new JSONTokener("wheel.json.JSONArray");
      JSONArray jSONArray1 = null;
      try {
        jSONArray1 = new JSONArray(jSONTokener0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of wheel.json.JSONArray
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.099379004690238
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Short short0 = new Short((short)2);
      JSONObject.valueToString(short0, 2065, (-1271));
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      JSONObject.valueToString(boolean0, (-1596), 0);
      jSONObject0.remove("W-");
      String string1 = jSONObject1.optString(" rlF> v]8 STM5");
      assertEquals("", string1);
      
      Float float0 = new Float(357.73F);
      JSONObject.numberToString(float0);
      jSONObject0.put("", (-2233.912312));
      jSONObject0.getDouble("");
      long long0 = jSONObject1.optLong("");
      assertEquals(0L, long0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.433818098163737
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "] is not a JSONObject.";
      int int0 = 0;
      JSONObject jSONObject1 = jSONObject0.put("] is not a JSONObject.", 0);
      Boolean boolean0 = Boolean.TRUE;
      jSONObject1.optBoolean("] is not a JSONObject.", true);
      jSONObject1.optDouble("] is not a JSONObject.", (double) 0);
      JSONObject.doubleToString((-61.9608458600861));
      try { 
        jSONObject1.getJSONArray("A JSONObject text must end with '}'");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"A JSONObject text must end with '}'\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      JSONTokener jSONTokener0 = new JSONTokener((String) null);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(jSONTokener0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.8651577443804213
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      String string0 = "] is not a Boolean.";
      jSONObject0.optDouble("] is not a Boolean.", 0.0);
      String string1 = "mw*!zj0d\\\\dRpoxPq";
      jSONObject0.optLong("] is not a Boolean.");
      String string2 = "GtT4f8_);r*X <rvp";
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray("GtT4f8_);r*X <rvp");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONArray text must start with '[' at character 1 of GtT4f8_);r*X <rvp
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.951136918484965
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.optDouble("");
      Boolean boolean0 = Boolean.TRUE;
      Boolean.getBoolean("");
      JSONObject jSONObject1 = jSONObject0.append("", boolean0);
      JSONObject.getNames((Object) "\r");
      String string1 = ":c";
      jSONObject1.optLong(":c");
      jSONObject0.optInt(":c");
      Object object0 = new Object();
      jSONObject0.optInt(":c");
      jSONObject1.optString("");
      jSONObject0.names();
      jSONObject0.put("wheel.json.JSONArray@0000000002", (Object) "\r");
      try { 
        jSONObject1.getDouble("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.507949694759748
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Map) null);
      JSONObject jSONObject1 = jSONObject0.put("", (-1447.11026710926));
      double double0 = jSONObject1.optDouble("ER3 6F.TH`", (-2939.6595));
      assertEquals((-2939.6595), double0, 0.01);
      
      int int0 = jSONObject1.optInt("", 83);
      assertEquals((-1447), int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.7426959658299292
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean boolean0 = new Boolean(true);
      Float.isFinite(0.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      JSONObject jSONObject1 = jSONObject0.put("java.lang.Long@0000000010", (Collection) linkedList1);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.write((String) null);
      jSONObject1.write(stringWriter0);
      jSONObject0.putOpt("", "gG6.5W.1(<");
      Short short0 = new Short((short)26);
      Short.compare((short)26, (short)26);
      jSONObject0.append("M5!L[R1j_PxIW _V", short0);
      jSONObject0.isNull("");
      jSONObject0.keys();
      jSONObject0.optJSONArray("B\"=)X");
      jSONObject0.get("M5!L[R1j_PxIW _V");
      jSONObject0.optJSONObject("java.lang.Long@0000000010");
      assertEquals(6, jSONObject0.length());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.5482985022557
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      JSONObject jSONObject1 = new JSONObject();
      try { 
        jSONObject1.getInt("X+C^:");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"X+C^:\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.289166745115769
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      JSONObject jSONObject1 = new JSONObject(iterator0);
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      jSONObject0.optBoolean("null", false);
      Boolean boolean0 = new Boolean(true);
      jSONObject1.remove((String) null);
      String string0 = null;
      int int0 = (-1);
      try { 
        jSONObject0.put((String) null, (-1));
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.2309805302266845
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList0);
      HashMap<Integer, Boolean> hashMap0 = new HashMap<Integer, Boolean>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      int int0 = jSONObject0.optInt((String) null, (-1028));
      assertEquals((-1028), int0);
      
      jSONObject0.accumulate("]npsxl.B`q", (Object) null);
      jSONObject0.optLong("<8w#D.G", 0L);
      assertEquals(0, jSONObject0.length());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7653327875937666
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.put("wheel.json.JSONObject$1", (Object) "wheel.json.JSONObject$1");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "wheel.json.JSONObject$1");
      stringWriter2.append((CharSequence) "wheel.json.JSONObject$1");
      JSONObject.doubleToString(Double.NaN);
      StringWriter stringWriter3 = new StringWriter();
      // Undeclared exception!
      try { 
        stringWriter3.append((CharSequence) "null", 1644, 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      String string0 = JSONObject.quote("");
      assertEquals("\"\"", string0);
      
      String string1 = JSONObject.quote("A JSONObjecttext must beg8n with '{I");
      assertEquals("\"A JSONObjecttext must beg8n with '{I\"", string1);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.3609510106329856
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      jSONObject0.names();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      jSONObject0.put("!3_xJ}|", (Map) hashMap1);
      Boolean boolean0 = Boolean.TRUE;
      String string0 = JSONObject.valueToString(boolean0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Boolean.compare(true, true);
      Byte.toUnsignedInt((byte)2);
      Integer integer0 = new Integer(22);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      LinkedList<Integer> linkedList2 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList0.removeFirstOccurrence(boolean0);
      Integer integer1 = new Integer(2540);
      LinkedList<Long> linkedList5 = new LinkedList<Long>();
      linkedList0.containsAll(linkedList2);
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject(linkedList2, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      stringArray0[1] = "^{98lQntE'.P#P7U@-";
      stringArray0[2] = "dj5{dohG_@<PCwc";
      stringArray0[3] = " at character ";
      stringArray0[4] = " at character ";
      stringArray0[5] = "w";
      stringArray0[6] = "re";
      stringArray0[7] = "jt<MQ]'E(Qh\\CZM";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject((JSONObject) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.9913740596968106
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      JSONObject.valueToString(jSONObject0);
      Byte.compare((byte) (-59), (byte) (-59));
      Double double0 = new Double((-2423.12206004868));
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) double0);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<Integer> predicate2 = predicate0.or(predicate1);
      Predicate<Integer> predicate3 = predicate2.and(predicate0);
      Predicate<Integer> predicate4 = predicate0.negate();
      Predicate<Integer> predicate5 = predicate0.and(predicate4);
      predicate5.or(predicate0);
      Predicate<Integer> predicate6 = predicate3.negate();
      assertNotSame(predicate6, predicate4);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=2.434375596540632
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("hnLi:$(", "hnLi:$(");
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      JSONObject jSONObject1 = jSONObject0.put("wheel.json.JSONObject$1", (Map) hashMap0);
      jSONObject1.has("wheel.json.JSONObject$1");
      Long long0 = new Long((-1065L));
      Long long1 = Long.getLong((String) null, long0);
      JSONObject jSONObject2 = jSONObject1.putOpt("wheel.json.JSONObject$1", long1);
      try { 
        jSONObject2.getJSONObject("hnLi:$(");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"hnLi:$(\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.8849360792575744
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[5];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean.logicalOr(true, true);
      boolean boolean1 = true;
      String string0 = "HX2fMyp'i,0ud9/P4";
      jSONObject0.optBoolean("HX2fMyp'i,0ud9/P4", true);
      Predicate.isEqual((Object) "HX2fMyp'i,0ud9/P4");
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray((Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Boolean boolean1 = new Boolean("a)zA/Q%5=y-j(cLqtM");
      String string0 = JSONObject.quote("a)zA/Q%5=y-j(cLqtM");
      assertEquals("\"a)zA/Q%5=y-j(cLqtM\"", string0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.073011196363045
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.put("", 0);
      long long0 = jSONObject0.getLong("");
      assertEquals(0L, long0);
      
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Long long1 = Long.getLong("", (long) 0);
      String string0 = hashMap0.put(long1, "");
      Long.compareUnsigned(0L, 0L);
      JSONObject jSONObject2 = jSONObject1.put("$-lMcAmD8", (Map) hashMap0);
      JSONObject jSONObject3 = jSONObject0.put("Z|_r", (Map) hashMap0);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "Z|_r";
      stringArray0[3] = "Z6yTB";
      stringArray0[4] = "";
      stringArray0[5] = "$-lMcAmD8";
      stringArray0[6] = "@]P:/3a@T";
      JSONObject jSONObject4 = new JSONObject(jSONObject2, stringArray0);
      assertEquals(3, jSONObject4.length());
      
      double double0 = jSONObject3.optDouble((String) null, (-734.600756214));
      assertEquals((-734.600756214), double0, 0.01);
      
      int int0 = jSONObject0.optInt(string0, 83);
      assertEquals(83, int0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.3291016900199226
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      JSONTokener jSONTokener0 = new JSONTokener("{}");
      JSONObject jSONObject1 = new JSONObject("{}");
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      JSONObject jSONObject2 = new JSONObject(jSONTokener0);
      String string0 = "~ZnWV#0o/n_!;x1E<";
      int int0 = (-1659);
      try { 
        Integer.valueOf("~ZnWV#0o/n_!;x1E<", (-1659));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // radix -1659 less than Character.MIN_RADIX
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.934551794074474
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(3638);
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate0.or(predicate2);
      predicate1.negate();
      Predicate<Object> predicate4 = predicate1.and(predicate0);
      Predicate<Object> predicate5 = predicate3.or(predicate1);
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate7 = predicate6.or(predicate0);
      Predicate<Integer> predicate8 = predicate7.negate();
      Predicate<Integer> predicate9 = predicate8.and(predicate7);
      predicate9.or(predicate2);
      predicate7.or(predicate1);
      Predicate<Integer> predicate10 = predicate7.and(predicate4);
      predicate10.and(predicate4);
      Predicate<Integer> predicate11 = predicate9.negate();
      predicate11.negate();
      predicate10.negate();
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertEquals(3, stringArray0.length);
      assertEquals(3, jSONObject0.length());
      assertNotNull(stringArray0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=2.582490055231104
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      JSONObject jSONObject1 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean.valueOf(true);
      Float.isFinite(2192);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.poll();
      JSONObject jSONObject2 = jSONObject0.put("Expeced a ':' after a ke", (Collection) linkedList1);
      JSONObject jSONObject3 = jSONObject0.putOpt("/Ty`JAP0sS4EW%NpJ.%", linkedList0);
      Short short0 = new Short((short) (-2812));
      jSONObject2.append("A JSONObject text must begin with '{'", (Object) null);
      jSONObject2.isNull("/Ty`JAP0sS4EW%NpJ.%");
      jSONObject0.optJSONArray("/0");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.containsAll(linkedList3);
      linkedList4.containsAll(linkedList2);
      jSONObject3.toString();
      assertEquals(3, jSONObject3.length());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Boolean boolean1 = new Boolean("Z+ rM}\"_5>~k3xjrH");
      String string0 = JSONObject.quote("Z+ rM}\"_5>~k3xjrH");
      assertEquals("\"Z+ rM}\\\"_5>~k3xjrH\"", string0);
      
      String string1 = JSONObject.quote("PDud(&S&0z^2G;");
      assertEquals("\"PDud(&S&0z^2G;\"", string1);
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9429543435482035
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "u],!HwbeAOKd\\";
      JSONObject jSONObject1 = jSONObject0.putOpt("u],!HwbeAOKd", "u],!HwbeAOKd");
      String string1 = "6r|ei,[bQ0_FH-'CI";
      try { 
        jSONObject1.getLong("u],!HwbeAOKd");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"u],!HwbeAOKd\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.107535896999073
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      char[] charArray0 = new char[14];
      charArray0[0] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[5] = '3';
      charArray0[6] = '3';
      StringWriter stringWriter3 = new StringWriter('3');
      StringWriter stringWriter4 = new StringWriter();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4m/CxyV]57[7hLwP~]";
      stringArray0[1] = "4m/CxyV]57[7hLwP~]";
      jSONArray0.put((int) '3', true);
      stringWriter3.append('{');
      stringArray0[3] = "4m/CxyV]57[7hLwP~]";
      JSONObject jSONObject1 = jSONObject0.put("4m/CxyV]57[7hLwP~]", 816.194719966);
      assertEquals(1, jSONObject0.length());
      
      jSONObject0.get("4m/CxyV]57[7hLwP~]");
      long long0 = jSONObject1.getLong("4m/CxyV]57[7hLwP~]");
      assertEquals(816L, long0);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.455394993624801
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      JSONObject jSONObject1 = jSONObject0.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('%');
      stringWriter0.append((CharSequence) "");
      StringWriter stringWriter1 = new StringWriter();
      try { 
        jSONObject1.getInt("");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] is not a number.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=1.7646308653001808
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      JSONObject jSONObject0 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean.valueOf(true);
      Float.isFinite(2192);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList1.poll();
      Short short0 = new Short((short) (-2812));
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.containsAll(linkedList3);
      JSONObject jSONObject1 = new JSONObject();
      linkedList4.containsAll(linkedList2);
      Float float0 = new Float((double) 2192);
      try { 
        jSONObject0.append((String) null, float0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=2.1753883477247387
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.keys();
      Float.isFinite(0.0F);
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean boolean0 = new Boolean(true);
      Float.isFinite(0.0F);
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject0.put("java.lang.Long@0000000010", (Collection) linkedList1);
      jSONObject0.putOpt("", "gG6.5W.1(<");
      Short short0 = new Short((short)26);
      Short.compare((short)26, (short)26);
      try { 
        jSONObject0.append("", short0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[] is not a JSONArray.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=2.435989325039834
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wi", "wi");
      Integer integer0 = new Integer(23);
      StringWriter stringWriter0 = new StringWriter();
      JSONObject jSONObject2 = new JSONObject();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean.valueOf(false);
      Float.isFinite((-1606.0391F));
      LinkedList<String> linkedList1 = new LinkedList<String>();
      jSONObject1.remove("M");
      linkedList1.poll();
      jSONObject0.put("wi", (Collection) linkedList0);
      Byte byte0 = new Byte((byte)102);
      JSONObject jSONObject3 = jSONObject1.putOpt((String) null, byte0);
      Short short0 = new Short((short) (-2812));
      Short.compare((byte)102, (short)120);
      String string0 = "A JSONObject text must begin with '{'";
      jSONObject0.append("wi", linkedList0);
      jSONObject3.isNull("to");
      jSONObject2.optJSONArray("/Ty`JAP0sS4EW%NpJ.%");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      linkedList4.containsAll(linkedList1);
      JSONObject jSONObject4 = new JSONObject();
      try { 
        jSONObject4.get("to");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"to\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      Float float0 = new Float(0.0);
      Integer integer0 = new Integer(9);
      Integer integer1 = Integer.getInteger("~xpk/e|}I\"f&ZH@", integer0);
      JSONObject.numberToString(integer1);
      Byte byte0 = new Byte((byte) (-19));
      Byte.toUnsignedInt((byte) (-19));
      Integer.remainderUnsigned(237, 114);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Byte.toUnsignedInt((byte) (-64));
      Integer integer2 = new Integer((byte)47);
      LinkedList<Integer> linkedList1 = new LinkedList<Integer>();
      Integer.toUnsignedLong(2335);
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Integer> linkedList3 = new LinkedList<Integer>();
      Float float1 = new Float(508.2182196528);
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList3);
      boolean boolean1 = linkedList0.removeFirstOccurrence(jSONArray0);
      LinkedList<Integer> linkedList4 = new LinkedList<Integer>();
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      Integer integer3 = new Integer(10);
      LinkedList<Long> linkedList6 = new LinkedList<Long>();
      boolean boolean2 = linkedList4.containsAll(linkedList6);
      assertFalse(boolean2 == boolean1);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2475075403426374
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[1];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optBoolean("HX2fMyp'i,0ud9/P4", false);
      jSONObject0.opt("getjoin");
      jSONObject1.optInt("Expected a ',' or ']'");
      HashMap<Object, String> hashMap0 = new HashMap<Object, String>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      try { 
        jSONObject2.get("HX2fMyp'i,0ud9/P4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"HX2fMyp'i,0ud9/P4\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.names();
      StringWriter stringWriter0 = new StringWriter();
      try { 
        JSONObject.numberToString((Number) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null pointer
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.8701172757423308
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Short short0 = new Short((short)108);
      JSONObject jSONObject0 = new JSONObject(short0);
      JSONArray jSONArray0 = jSONObject0.names();
      assertEquals(1, jSONObject0.length());
      assertNotNull(jSONArray0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=3.032338856078591
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      jSONObject0.optInt("0.0", 125);
      JSONObject jSONObject1 = jSONObject0.put("Jxs=[m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("jjQ0/Sn3-:JV,s{[", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optInt(stringArray0[0], 125);
      jSONObject0.optDouble("4v^+yQ^'fhW");
      Boolean boolean0 = Boolean.TRUE;
      hashMap0.put("Jxs=[m/Te+'taW?", boolean0);
      String string0 = " at character ";
      jSONObject2.optLong(" at character ");
      jSONObject2.toString(125, (-1332));
      jSONObject1.optInt("2nHV,");
      Double double0 = new Double(0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      boolean boolean1 = true;
      Boolean boolean2 = new Boolean(true);
      Boolean.compare(true, true);
      hashMap0.put("[]", boolean2);
      jSONObject1.optLong("4v^+yQ^'fhW", (long) 125);
      JSONObject jSONObject3 = jSONObject2.put("2nHV,", 0.0);
      try { 
        jSONObject3.get("[]");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"[]\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate5.or(predicate1);
      predicate7.or(predicate6);
      Object object0 = new Object();
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) predicate3);
      Predicate<Integer> predicate9 = predicate8.or(predicate4);
      Predicate<Integer> predicate10 = predicate8.and(predicate5);
      Predicate<Integer> predicate11 = predicate10.and(predicate9);
      Predicate<Integer> predicate12 = Predicate.isEqual(object0);
      Predicate<Integer> predicate13 = Predicate.isEqual((Object) predicate0);
      predicate13.negate();
      predicate11.or(predicate4);
      Predicate<Integer> predicate14 = predicate10.or(predicate12);
      predicate8.or(predicate4);
      predicate14.negate();
      JSONObject jSONObject1 = new JSONObject((Map) null);
      boolean boolean0 = jSONObject1.optBoolean("", false);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=2.970488676780148
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      jSONObject0.optDouble("");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[2] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      jSONObject0.optInt("0.0", 125);
      JSONObject jSONObject1 = jSONObject0.put("JxM=m/Te+'taW?", 0L);
      HashMap<String, Boolean> hashMap0 = new HashMap<String, Boolean>();
      JSONObject jSONObject2 = jSONObject0.put("{}", (Map) hashMap0);
      JSONArray jSONArray0 = new JSONArray();
      jSONObject1.optInt("", 125);
      jSONObject0.optDouble((String) null);
      jSONObject2.toString(125, 125);
      jSONObject1.optInt("2nHV,");
      Double double0 = new Double(0L);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      Boolean boolean0 = new Boolean(false);
      Boolean.compare(true, false);
      hashMap0.put("[]", boolean0);
      jSONObject1.optLong("4v^+yQ^'fhW", (-3144L));
      jSONObject2.put("2nHV,", 0.0);
      try { 
        jSONObject0.getLong("C@7i5w");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"C@7i5w\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      Float.isFinite(0.0F);
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      LinkedList<Byte> linkedList0 = new LinkedList<Byte>();
      Boolean boolean0 = new Boolean(true);
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.remove("a7}Q;");
      Long long0 = new Long((-1));
      assertEquals((-1L), (long)long0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.8824970896344015
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Byte byte0 = new Byte((byte) (-37));
      String[] stringArray0 = new String[9];
      stringArray0[0] = "_";
      stringArray0[1] = "c";
      stringArray0[2] = "jo";
      stringArray0[3] = " of ";
      stringArray0[4] = "je@,ME>";
      stringArray0[5] = "getcopyValueOf";
      stringArray0[6] = "tV=pIoYYP'vUi;)";
      stringArray0[7] = "j7fT8-%hrzih";
      stringArray0[8] = " od~.fj{#%k1*0S";
      JSONObject jSONObject0 = new JSONObject(byte0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      try { 
        jSONObject1.getBoolean("t!@Piw 5");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"t!@Piw 5\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.859785873349755
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      JSONObject jSONObject0 = new JSONObject();
      HashMap<Long, String> hashMap1 = new HashMap<Long, String>();
      Boolean boolean0 = Boolean.TRUE;
      JSONObject.valueToString(hashMap0);
      JSONObject jSONObject1 = jSONObject0.put(",", (Map) hashMap0);
      jSONObject0.optInt("na7", 97);
      HashMap<Integer, Float> hashMap2 = new HashMap<Integer, Float>();
      JSONObject jSONObject2 = new JSONObject((Map) hashMap0);
      Byte byte0 = new Byte((byte) (-102));
      JSONObject.valueToString(byte0);
      jSONObject0.optInt("\f");
      jSONObject0.optLong(",\n");
      jSONObject0.optString((String) null, "");
      JSONArray jSONArray0 = new JSONArray();
      HashMap<Integer, String> hashMap3 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap4 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap5 = new HashMap<Integer, String>(0);
      jSONObject1.put("", (Map) hashMap4);
      Boolean boolean1 = Boolean.TRUE;
      Float float0 = new Float((float) 59);
      JSONObject.valueToString(hashMap0);
      jSONObject2.optJSONArray("na7");
      jSONObject0.put("{}", (long) 59);
      try { 
        jSONObject2.get(",\n");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",\\n\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "";
      jSONObject0.put("", (Object) "");
      JSONArray jSONArray0 = new JSONArray();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "");
      stringWriter1.append('2');
      HashMap<JSONObject, JSONObject> hashMap0 = new HashMap<JSONObject, JSONObject>();
      String string1 = "getlogicalAnd";
      jSONObject0.optString("", "\"iVN4ZCED@|YY");
      JSONArray jSONArray1 = new JSONArray();
      HashMap<Integer, String> hashMap1 = new HashMap<Integer, String>();
      HashMap<Integer, String> hashMap2 = new HashMap<Integer, String>();
      int int0 = 61;
      HashMap<Integer, String> hashMap3 = new HashMap<Integer, String>(61);
      // Undeclared exception!
      try { 
        hashMap1.putAll((Map<? extends Integer, ? extends String>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.HashMap", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.5758105668439413
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Iterator iterator0 = jSONObject0.keys();
      Float.isFinite(0.0F);
      jSONObject0.optString("gG6.5W.1(<", "] is not a number.");
      String string0 = "o*i{1kZxOdxXr";
      HashMap<Object, Byte> hashMap0 = new HashMap<Object, Byte>();
      jSONObject0.put("o*i{1kZxOdxXr", (Map) hashMap0);
      jSONObject0.has("] is not a number.");
      jSONObject0.putOpt((String) null, iterator0);
      try { 
        jSONObject0.getJSONObject((String) null);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.5107240834020366
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Byte.toUnsignedInt((byte)8);
      Integer integer0 = new Integer(8);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<Long> linkedList1 = new LinkedList<Long>();
      boolean boolean1 = jSONObject0.isNull((String) null);
      assertTrue(boolean1);
      
      Long long0 = new Long(1334L);
      linkedList1.add(long0);
      jSONObject0.optJSONArray("0");
      LinkedList<Long> linkedList2 = new LinkedList<Long>();
      LinkedList<Long> linkedList3 = new LinkedList<Long>();
      LinkedList<JSONArray> linkedList4 = new LinkedList<JSONArray>();
      JSONArray jSONArray0 = new JSONArray((Collection) linkedList4);
      Short short0 = new Short((short)1250);
      linkedList1.removeLastOccurrence(short0);
      Long long1 = new Long(1L);
      linkedList2.offerLast(long1);
      LinkedList<Integer> linkedList5 = new LinkedList<Integer>();
      linkedList5.containsAll(linkedList2);
      LinkedList<String> linkedList6 = new LinkedList<String>();
      boolean boolean2 = linkedList5.containsAll(linkedList6);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 105
  /*Coverage entropy=1.11602243172598
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      try { 
        jSONObject0.getLong(",:]}/\"[{;=#");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\",:]}/\\\"[{;=#\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.2932859341245404
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "000");
      jSONObject0.optLong("000");
      jSONObject0.optInt("\r");
      Double double0 = new Double((-61.9608458600861));
      Object object0 = new Object();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) "000");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "\r");
      Byte byte0 = new Byte((byte)97);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) byte0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate1.or(predicate3);
      Predicate<Object> predicate5 = predicate2.negate();
      predicate2.and(predicate5);
      Predicate<Integer> predicate6 = predicate0.or(predicate4);
      Predicate<Integer> predicate7 = predicate0.and(predicate4);
      predicate7.and(predicate0);
      Predicate<Integer> predicate8 = predicate7.or(predicate2);
      Predicate<Integer> predicate9 = predicate8.negate();
      predicate1.or(predicate5);
      Predicate<Integer> predicate10 = predicate9.negate();
      Predicate<Integer> predicate11 = predicate6.and(predicate10);
      predicate10.or(predicate7);
      Predicate<Integer> predicate12 = predicate11.negate();
      assertFalse(predicate12.equals((Object)predicate8));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.9896217341979852
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      Float float0 = new Float((-3705.05227));
      jSONObject0.accumulate("2h[zPZl>;T`5NcS", "2h[zPZl>;T`5NcS");
      String string0 = "[(jE}";
      jSONObject0.opt("2h[zPZl>;T`5NcS");
      Long long0 = new Long(2409L);
      JSONArray jSONArray0 = null;
      try {
        jSONArray0 = new JSONArray(long0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONArray initial value should be a string or collection or array.
         //
         verifyException("wheel.json.JSONArray", e);
      }
  }

  /**
  //Test case number: 108
  /*Coverage entropy=1.4986122886681095
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      Integer integer0 = new Integer(192);
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) integer0);
      Object object0 = new Object();
      Predicate<Object> predicate1 = Predicate.isEqual(object0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate1);
      predicate0.or(predicate4);
      Predicate<Integer> predicate5 = predicate0.and(predicate0);
      Predicate<Integer> predicate6 = predicate0.or(predicate5);
      predicate6.negate();
      String string0 = "Zkjq^@Q_wKjwU%";
      JSONObject jSONObject0 = null;
      try {
        jSONObject0 = new JSONObject("Zkjq^@Q_wKjwU%");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // A JSONObject text must begin with '{' at character 1 of Zkjq^@Q_wKjwU%
         //
         verifyException("wheel.json.JSONTokener", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.8553697931156137
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      String string0 = JSONObject.valueToString("");
      Double double0 = new Double(0L);
      String string1 = JSONObject.valueToString(double0, (-724), 989);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 110
  /*Coverage entropy=2.36441101860286
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "Expece a ':' after a ke";
      JSONObject jSONObject1 = jSONObject0.put("Expece a ':' after a ke", (Object) "Expece a ':' after a ke");
      jSONObject0.toString((-1902), 47);
      jSONObject1.put("{\"java.lang.String@0000000002\": \"java.lang.String@0000000002\"}", (double) (-1902));
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append((CharSequence) "Expece a ':' after a ke");
      try { 
        jSONObject0.getJSONObject("Expece a ':' after a ke");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"Expece a ':' after a ke\"] is not a JSONObject.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=2.6353680046429577
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Byte byte0 = new Byte((byte) (-4));
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(55);
      Integer integer1 = new Integer(34);
      Integer.getInteger("iscompare", 1);
      hashMap1.put("iscompare", integer1);
      hashMap1.put(integer0, (Integer) null);
      Integer integer2 = new Integer(55);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString((Object) null);
      Integer.sum(55, (-108916131));
      Integer.min((-210), (-108916076));
      JSONObject.valueToString(hashMap1, 55, (-210));
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000003,\n\"java.lang.Integer@0000000004\": null\n}");
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.9925623248862889
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Boolean boolean1 = new Boolean("rvz:R^uuk0~oyp5?");
      String string0 = JSONObject.quote("a)zA/Q5=yj(cLqtM");
      assertEquals("\"a)zA/Q5=yj(cLqtM\"", string0);
      
      JSONObject jSONObject0 = new JSONObject((Map) hashMap1);
      String string1 = jSONObject0.toString(35, (-93));
      assertEquals("{}", string1);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringWriter stringWriter0 = new StringWriter();
      HashMap<String, Double> hashMap0 = new HashMap<String, Double>();
      JSONObject jSONObject0 = new JSONObject((Map) hashMap0);
      jSONObject0.write(stringWriter0);
      HashMap<Double, Double> hashMap1 = new HashMap<Double, Double>();
      Double double0 = new Double(1238.578102073);
      Double.min(952.015930695255, 934.6233643905408);
      BiFunction<Object, Double, Double> biFunction0 = (BiFunction<Object, Double, Double>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(biFunction0).apply(any() , anyDouble());
      Double double1 = hashMap1.compute(double0, biFunction0);
      assertNull(double1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=1.513760041539079
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      LinkedList<String> linkedList1 = new LinkedList<String>();
      linkedList0.containsAll(linkedList1);
      HashMap<String, Short> hashMap0 = new HashMap<String, Short>();
      Boolean boolean0 = Boolean.TRUE;
      Float float0 = new Float(0.0F);
      String string0 = JSONObject.valueToString(float0);
      assertNotNull(string0);
  }

  /**
  //Test case number: 115
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[9];
      stringArray0[0] = "Mh%ZBC";
      stringArray0[1] = "Mh%ZBC";
      stringArray0[2] = "Mh%ZBC";
      stringArray0[3] = "Mh%ZBC";
      stringArray0[4] = "Mh%ZBC";
      stringArray0[5] = "Mh%ZBC";
      stringArray0[6] = "Mh%ZBC";
      stringArray0[7] = "Mh%ZBC";
      stringArray0[8] = "e-3= ;";
      JSONObject jSONObject0 = new JSONObject("Mh%ZBC", stringArray0);
      jSONObject0.put("Dwx.sG-7:Yn*ZN", 125);
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 116
  /*Coverage entropy=1.3987405541121611
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      jSONObject0.optJSONObject("RM0I:R]E-:?)faxkT");
      try { 
        jSONObject0.getJSONObject("RM0I:R]E-:?)faxkT");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"RM0I:R]E-:?)faxkT\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=1.9694687512829039
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      double double0 = jSONObject0.optDouble("");
      assertEquals(Double.NaN, double0, 0.01);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "4v^+yQ^'fhW";
      stringArray0[2] = "";
      stringArray0[3] = "4v^+yQ^'fhW";
      stringArray0[4] = "4v^+yQ^'fhW";
      stringArray0[5] = "";
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      jSONObject0.optInt("0.0", 125);
      double double1 = jSONObject1.optDouble("", 1307.76709874372);
      assertEquals(1307.76709874372, double1, 0.01);
      
      int int0 = jSONObject1.optInt("5itXy94\"n$?ZJ;", 125);
      assertEquals(125, int0);
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      JSONObject.testValidity((Object) null);
      Double.min(1.0, 1271.7);
      LinkedList<Double> linkedList0 = new LinkedList<Double>();
      assertFalse(linkedList0.contains(1.0));
  }

  /**
  //Test case number: 119
  /*Coverage entropy=1.840827283190615
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(3656);
      Long long0 = new Long((-3L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate3.negate();
      Predicate<Object> predicate5 = predicate1.and(predicate0);
      Predicate<Object> predicate6 = predicate3.or(predicate1);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) predicate6);
      Predicate<Integer> predicate8 = predicate7.or(predicate0);
      predicate4.or(predicate1);
      Predicate<Integer> predicate9 = predicate8.negate();
      Predicate<Integer> predicate10 = predicate9.and(predicate8);
      predicate10.or(predicate2);
      predicate8.or(predicate1);
      Predicate<Integer> predicate11 = predicate8.and(predicate5);
      predicate11.and(predicate5);
      Integer integer1 = new Integer(13);
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter(3656);
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      JSONArray jSONArray0 = new JSONArray();
      String string0 = jSONObject0.optString("yUCX[G&d\"3*eJ4sFc");
      assertEquals(3, jSONObject0.length());
      assertEquals("", string0);
  }

  /**
  //Test case number: 120
  /*Coverage entropy=1.9896977110172656
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      String[] stringArray0 = new String[9];
      JSONObject jSONObject0 = new JSONObject(boolean0, stringArray0);
      JSONObject jSONObject1 = new JSONObject(jSONObject0, stringArray0);
      Boolean.logicalOr(true, true);
      Boolean.compare(false, false);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSONObject1);
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      predicate3.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate2);
      Boolean boolean1 = Boolean.FALSE;
      Predicate<Integer> predicate6 = Predicate.isEqual((Object) boolean1);
      Predicate<Integer> predicate7 = predicate6.and(predicate6);
      Predicate<Integer> predicate8 = predicate7.or(predicate1);
      Predicate<Integer> predicate9 = predicate8.negate();
      predicate9.or(predicate4);
      Predicate<Object> predicate10 = predicate5.and(predicate1);
      predicate6.and(predicate10);
      Float float0 = new Float((double) 0);
      Predicate<Object> predicate11 = Predicate.isEqual((Object) float0);
      Predicate<Object> predicate12 = predicate3.and(predicate0);
      predicate8.and(predicate12);
      predicate8.or(predicate11);
      predicate7.or(predicate12);
      predicate9.negate();
      boolean boolean2 = jSONObject1.optBoolean(".", true);
      assertTrue(boolean2);
  }

  /**
  //Test case number: 121
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject((Object) "s\u0002");
      jSONObject0.put("Zl\b0!U$O\"1", false);
      assertEquals(4, jSONObject0.length());
  }

  /**
  //Test case number: 122
  /*Coverage entropy=1.5726694994129984
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      jSONObject0.put("] is not a Boolean.", true);
      Integer integer0 = new Integer(3638);
      Integer integer1 = new Integer(46);
      int int0 = (-1233);
      Integer integer2 = new Integer((-1233));
      Integer integer3 = new Integer((-1233));
      Integer integer4 = new Integer(90);
      Integer.getInteger("isflush", integer3);
      Integer integer5 = new Integer(6);
      Integer integer6 = new Integer(46);
      Integer integer7 = new Integer(6);
      Integer.getInteger("isflush", (Integer) null);
      LinkedList<Integer> linkedList0 = new LinkedList<Integer>();
      linkedList0.add((Integer) null);
      // Undeclared exception!
      try { 
        Integer.decode((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.Integer", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=2.0325330653044436
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Integer integer0 = new Integer(3638);
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate2);
      predicate2.and(predicate1);
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate0.or(predicate4);
      Predicate.isEqual((Object) predicate3);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate8 = predicate7.or(predicate2);
      Predicate<Integer> predicate9 = predicate8.and(predicate6);
      Predicate<Integer> predicate10 = predicate9.and(predicate2);
      predicate10.negate();
      predicate8.or(predicate5);
      predicate9.or(predicate8);
      predicate9.negate();
      boolean boolean0 = jSONObject0.optBoolean("equ", true);
      assertTrue(boolean0);
      assertEquals(3, jSONObject0.length());
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.574896781857419
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = jSONObject0.putOpt("wi", "wi");
      Integer integer0 = new Integer(23);
      JSONObject jSONObject2 = jSONObject1.accumulate("wi", integer0);
      JSONObject.valueToString(jSONObject1, 23, 23);
      HashMap<String, JSONObject> hashMap0 = new HashMap<String, JSONObject>();
      hashMap0.put("!GxBX5\u0002{J}-", jSONObject2);
      Boolean.valueOf("wi");
      int int0 = 80;
      JSONObject.valueToString(hashMap0, 80, (-1693));
      jSONObject1.putOpt((String) null, "wi");
      JSONObject jSONObject3 = new JSONObject();
      try { 
        jSONObject3.put((String) null, (Map) hashMap0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.6353680046429577
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      Byte byte0 = new Byte((byte) (-4));
      HashMap<Object, Integer> hashMap1 = new HashMap<Object, Integer>();
      Object object0 = new Object();
      Integer integer0 = new Integer(55);
      Integer integer1 = new Integer(34);
      Integer.divideUnsigned(381, 1486);
      Integer.getInteger("iscompare", 1);
      hashMap1.put("iscompare", integer1);
      hashMap1.put(integer0, (Integer) null);
      Integer integer2 = new Integer(55);
      Object object1 = JSONObject.NULL;
      JSONObject.valueToString((Object) null);
      Integer.sum(55, (-108916131));
      Integer.min((-210), (-108916076));
      JSONObject.valueToString(hashMap1, 55, (-210));
      JSONObject jSONObject0 = new JSONObject("{\n\"java.lang.String@0000000002\": java.lang.Integer@0000000003,\n\"java.lang.Integer@0000000004\": null\n}");
      try { 
        jSONObject0.put((String) null, true);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Null key.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=2.24970069723459
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Float float0 = new Float(0.0F);
      Float.isFinite(0.0F);
      JSONObject jSONObject0 = new JSONObject(float0);
      Long long0 = new Long(0L);
      Boolean boolean0 = new Boolean(true);
      Double double0 = new Double(0.0);
      // Undeclared exception!
      jSONObject0.toString(2659, 2659);
  }

  /**
  //Test case number: 127
  /*Coverage entropy=1.7361810872582275
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONObject jSONObject1 = new JSONObject();
      String string0 = JSONObject.valueToString(jSONObject1, 2354, 45);
      String string1 = JSONObject.valueToString(jSONObject0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 128
  /*Coverage entropy=2.227208669525718
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Boolean boolean0 = Boolean.FALSE;
      HashMap<Long, String> hashMap0 = new HashMap<Long, String>();
      HashMap<String, Short> hashMap1 = new HashMap<String, Short>();
      Boolean boolean1 = new Boolean("rv:R^uuk0%u~oyp5?");
      String string0 = JSONObject.quote("a)zA/Q5=yj(cLqtM");
      assertEquals("\"a)zA/Q5=yj(cLqtM\"", string0);
      
      Byte byte0 = new Byte((byte) (-37));
      JSONObject jSONObject0 = new JSONObject(byte0);
      jSONObject0.toString((-5569));
      assertEquals(1, jSONObject0.length());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=1.52138000510499
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      JSONArray jSONArray0 = new JSONArray();
      boolean boolean0 = jSONObject0.optBoolean("{}");
      assertFalse(boolean0);
      
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      char[] charArray0 = new char[8];
      charArray0[0] = '3';
      charArray0[1] = '3';
      charArray0[2] = '3';
      charArray0[3] = '3';
      charArray0[4] = '3';
      charArray0[5] = '3';
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.and(predicate1);
      Predicate<Object> predicate4 = predicate3.or(predicate3);
      Predicate<Object> predicate5 = predicate2.and(predicate3);
      Predicate<Object> predicate6 = predicate0.negate();
      predicate2.or(predicate6);
      Predicate.isEqual((Object) predicate2);
      Predicate<Integer> predicate7 = Predicate.isEqual((Object) stringWriter1);
      Predicate<Integer> predicate8 = predicate7.or(predicate1);
      Predicate<Integer> predicate9 = predicate8.and(predicate4);
      Predicate<Object> predicate10 = predicate5.negate();
      Predicate<Integer> predicate11 = predicate9.and(predicate10);
      Predicate<Integer> predicate12 = predicate11.negate();
      predicate12.or(predicate7);
      predicate8.negate();
      boolean boolean1 = jSONObject0.optBoolean("", false);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 130
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      Long long0 = new Long(0L);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) long0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      Predicate<Object> predicate4 = predicate0.or(predicate1);
      Predicate<Object> predicate5 = predicate0.and(predicate4);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate2.or(predicate5);
      Predicate<Integer> predicate8 = Predicate.isEqual((Object) predicate5);
      Predicate<Integer> predicate9 = predicate8.or(predicate7);
      Predicate<Integer> predicate10 = predicate9.negate();
      predicate8.and(predicate9);
      predicate10.or(predicate3);
      Predicate<Integer> predicate11 = predicate9.or(predicate4);
      Predicate<Integer> predicate12 = predicate8.and(predicate4);
      Predicate<Integer> predicate13 = predicate12.and(predicate3);
      predicate13.negate();
      Predicate<Integer> predicate14 = predicate11.negate();
      predicate14.negate();
      Predicate<Object> predicate15 = predicate4.negate();
      Predicate<Object> predicate16 = predicate1.or(predicate15);
      predicate5.and(predicate6);
      Predicate<Integer> predicate17 = predicate9.or(predicate4);
      predicate9.or(predicate16);
      predicate11.and(predicate17);
      predicate11.or(predicate2);
      predicate11.negate();
      Boolean boolean0 = new Boolean(false);
      Double double0 = new Double((-351.70173151866));
      JSONObject.getNames((Object) predicate14);
      String[] stringArray0 = JSONObject.getNames(jSONObject0);
      assertNull(stringArray0);
  }

  /**
  //Test case number: 131
  /*Coverage entropy=1.977183323425756
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Boolean boolean0 = Boolean.TRUE;
      JSONObject jSONObject0 = new JSONObject();
      String string0 = "toO";
      jSONObject0.put("toO", 1.0);
      try { 
        jSONObject0.getBoolean("toO");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"toO\"] is not a Boolean.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=1.2322067503076204
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      JSONObject jSONObject0 = new JSONObject();
      StringWriter stringWriter0 = new StringWriter();
      StringWriter stringWriter1 = new StringWriter();
      StringWriter stringWriter2 = new StringWriter();
      StringWriter stringWriter3 = new StringWriter();
      StringWriter stringWriter4 = new StringWriter();
      StringWriter stringWriter5 = new StringWriter();
      try { 
        jSONObject0.getJSONArray("getfloatToIntBits");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // JSONObject[\"getfloatToIntBits\"] not found.
         //
         verifyException("wheel.json.JSONObject", e);
      }
  }
}
