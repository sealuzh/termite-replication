/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 02:32:45 GMT 2019
 */

package org.pdfsam.guiclient.commons.models;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.lowagie.text.pdf.PdfGraphics2D;
import java.awt.AWTEventMulticaster;
import java.awt.AWTKeyStroke;
import java.awt.DefaultFocusTraversalPolicy;
import java.awt.FocusTraversalPolicy;
import java.awt.HeadlessException;
import java.awt.Point;
import java.awt.RenderingHints;
import java.awt.color.ICC_Profile;
import java.awt.event.ComponentListener;
import java.awt.event.FocusEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Point2D;
import java.awt.image.AffineTransformOp;
import java.awt.image.BufferedImage;
import java.awt.image.Kernel;
import java.awt.image.RescaleOp;
import java.awt.image.renderable.ParameterBlock;
import java.io.ByteArrayInputStream;
import java.io.FilterInputStream;
import java.io.IOException;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.time.temporal.ChronoField;
import java.util.ArrayDeque;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Comparator;
import java.util.ConcurrentModificationException;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.PriorityQueue;
import java.util.Set;
import java.util.Stack;
import java.util.Vector;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import javax.media.jai.CollectionOp;
import javax.media.jai.OperationRegistry;
import javax.media.jai.PlanarImage;
import javax.media.jai.SnapshotImage;
import javax.media.jai.operator.FPXDescriptor;
import javax.media.jai.operator.IIPResolutionDescriptor;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JApplet;
import javax.swing.JComboBox;
import javax.swing.JLayeredPane;
import javax.swing.JList;
import javax.swing.JTextField;
import javax.swing.plaf.metal.MetalLabelUI;
import javax.swing.plaf.multi.MultiListUI;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockRandomAccessFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;
import org.pdfsam.guiclient.commons.models.VisualListModel;
import org.pdfsam.guiclient.dto.VisualPageListItem;
import sun.awt.SunHints;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class VisualListModel_ESTest extends VisualListModel_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.4122179895997884
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[1] = 1519;
      intArray0[2] = 1519;
      int int0 = 11;
      intArray0[1] = 11;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int1 = 29;
      stack0.setSize(29);
      visualListModel0.removeElements(1, 29, false);
      int[] intArray1 = new int[15];
      intArray1[0] = 11;
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel1.removeElements(intArray1, true);
      visualListModel0.removeElements(11, 1, false);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel1.reverseElements(intArray1);
      visualListModel1.removeElements(intArray0, false);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray1, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(11) > toIndex(1)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.data = null;
      visualListModel0.addElementAt((VisualPageListItem) null, 4);
      visualListModel0.getValidElements();
      byte[] byteArray0 = null;
      int int0 = 15;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 15, 7070);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.460685998915806
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.setSize(2);
      visualListModel0.addElementAt((VisualPageListItem) null, 2);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.updateElementAt(1, (VisualPageListItem) null);
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer.sum(2, 32);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      linkedHashSet0.add(integer1);
      linkedHashSet0.add(integer0);
      stack0.add((VisualPageListItem) null);
      visualListModel1.clearData();
      Boolean boolean0 = new Boolean(false);
      visualListModel1.setData((Vector<VisualPageListItem>) stack0);
      Vector<Object> vector0 = new Vector<Object>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[2] = null;
      visualListModel1.setData(visualPageListItemArray0);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, integer1);
      visualListModel1.moveUpIndex(2);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1, 0.0, 637.714, (double) 32);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(68, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (68) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.465053187904615
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[1] = 1519;
      intArray0[2] = 1519;
      intArray0[1] = 11;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      stack0.setSize(29);
      visualListModel0.removeElements((-13), 29, false);
      int[] intArray1 = new int[15];
      intArray1[0] = (-13);
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel1.removeElements(intArray1, true);
      visualListModel0.removeElements((-13), (-13), false);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel1.reverseElements(intArray1);
      visualListModel1.removeElements(intArray0, false);
      try { 
        visualListModel0.removeElements(intArray1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -13
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.439720770839918
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      OperationRegistry operationRegistry0 = new OperationRegistry();
      Vector<Object> vector0 = new Vector<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(vector0, vector0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_TEXT_ANTIALIASING;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, vector0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "org.pdfsam.guiclient.commons.models.VisualListModel", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.prependAllElements(collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"org.pdfsam.guiclient.commons.models.VisualListModel\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.2454564350114947
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[1] = 1519;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      stack0.setSize(2);
      visualListModel0.removeElements(1, 2, false);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.removeElements(intArray0, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.reverseElements(intArray1);
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(0, 1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.6157771565458856
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[1] = 1519;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      stack0.setSize(2);
      visualListModel0.removeElements(1, 2, false);
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.removeElements(intArray0, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.reverseElements(intArray1);
      assertEquals(2, visualListModel0.getSize());
      
      visualListModel0.removeElements(0, 1, true);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.removeElements(intArray0, true);
      visualListModel0.removeElements(2, (-4), true);
      visualListModel0.undeleteElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.rotateClockwiseElements(intArray0);
      visualListModel0.removeElements(1, 1519, false);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.520580909604715
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[5] = 5000;
      intArray0[1] = 1519;
      intArray0[2] = 1519;
      intArray0[5] = 1519;
      intArray0[5] = 4;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      stack0.setSize(2);
      visualListModel0.removeElements(1, 2, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel1.removeElements(intArray1, true);
      visualListModel0.removeElements(1, 1, false);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel1.reverseElements(intArray1);
      visualListModel0.removeElements(intArray1, true);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.undeleteElements(intArray1);
      visualListModel0.removeElements(2, 0, false);
      visualListModel2.undeleteElements(intArray1);
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4592045174343244
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.setSize(2);
      visualListModel0.addElementAt((VisualPageListItem) null, 2);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel1.updateElementAt(1, (VisualPageListItem) null);
      intArray0[0] = 1;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer.sum(1, 32);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      linkedHashSet0.add(integer1);
      linkedHashSet0.add(integer0);
      visualListModel1.clearData();
      Boolean boolean0 = new Boolean(false);
      visualListModel1.setData((Vector<VisualPageListItem>) stack0);
      Vector<Object> vector0 = new Vector<Object>();
      visualListModel1.moveDownIndexes(intArray0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[2] = null;
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, integer1);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      visualListModel1.moveUpIndex(1);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1, 0.0, 637.714, 0.0);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(68, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (68) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.3990387379280094
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer0;
      Integer integer1 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      integerArray0[4] = integer4;
      Integer integer5 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[5] = integer5;
      Integer integer6 = JLayeredPane.DRAG_LAYER;
      integerArray0[6] = integer6;
      Integer integer7 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[7] = integer7;
      Integer integer8 = JLayeredPane.POPUP_LAYER;
      integerArray0[8] = integer8;
      stack0.toArray(integerArray0);
      intArray0[1] = (int) integerArray0[5];
      intArray0[2] = (-1);
      intArray0[5] = 13;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int0 = 34;
      stack0.setSize(34);
      visualListModel0.removeElements(1, 34, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.removeElements(intArray1, true);
      boolean boolean0 = false;
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.reverseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.removeElements(intArray1, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      Consumer<VisualPageListItem> consumer0 = (Consumer<VisualPageListItem>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.add((VisualPageListItem) null);
      vector0.forEach(consumer0);
      vector0.spliterator();
      visualListModel0.moveDownIndex(0);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int[] intArray0 = new int[6];
      intArray0[0] = 3956;
      intArray0[3] = 874;
      intArray0[4] = 0;
      Point point0 = new Point();
      Point point1 = new Point(point0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      assertNotNull(sunHints_Key0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.0211196177983384
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      int int0 = 15;
      FileSystemHandling.shouldAllThrowIOExceptions();
      intArray0[0] = 15;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.updateElementAt(431, (VisualPageListItem) null);
      visualListModel1.undeleteElements(intArray0);
      OperationRegistry operationRegistry0 = new OperationRegistry();
      operationRegistry0.clearOperationPreferences(" +ukLfAAnSL==", " +ukLfAAnSL==");
      Stack<Object> stack0 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack0);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, operationRegistry0);
      visualListModel0.moveUpIndex(28);
      parameterBlock0.setSources(stack0);
      CollectionOp collectionOp0 = new CollectionOp(operationRegistry0, "@K/tVq<`*'%K:zP{", parameterBlock0, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) collectionOp0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No descriptor by name \"@K/tVq<`*'%K:zP{\" is registered under mode \"collection\".
         //
         verifyException("javax.media.jai.OperationRegistry", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.6658714750329806
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer0;
      Integer integer1 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      integerArray0[4] = integer4;
      Integer integer5 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[5] = integer5;
      Integer integer6 = JLayeredPane.DRAG_LAYER;
      integerArray0[6] = integer6;
      Integer integer7 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[7] = integer7;
      Integer integer8 = JLayeredPane.POPUP_LAYER;
      integerArray0[8] = integer8;
      stack0.toArray(integerArray0);
      intArray0[1] = (int) integerArray0[5];
      intArray0[2] = (-1);
      intArray0[5] = 13;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      stack0.setSize(34);
      visualListModel0.removeElements(1, 34, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.removeElements(intArray1, true);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.reverseElements(intArray1);
      visualListModel0.removeElements(intArray1, true);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.removeElements(34, (-4), false);
      visualListModel1.undeleteElements(intArray1);
      visualListModel1.rotateAnticlockwiseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6172452880430224
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(2);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(stack0);
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[2] = 2;
      intArray0[0] = 2;
      visualListModel0.moveDownIndexes(intArray1);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      FocusEvent focusEvent0 = new FocusEvent(jComboBox0, 1896, true);
      focusEvent0.setSource((Object) null);
      componentListener1.componentHidden(focusEvent0);
      defaultFocusTraversalPolicy0.getLastComponent(jComboBox0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      jComboBox0.addComponentListener((ComponentListener) null);
      jComboBox0.setVerifyInputWhenFocusTarget(true);
      jComboBox0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      try { 
        visualListModel0.moveUpIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.534275354163933
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[1] = 1519;
      intArray0[2] = 1519;
      intArray0[1] = 11;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      stack0.setSize(29);
      visualListModel0.removeElements(1, 29, false);
      int[] intArray1 = new int[15];
      intArray1[0] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel1.removeElements(intArray1, true);
      visualListModel0.removeElements(1, 1, false);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel1.reverseElements(intArray1);
      visualListModel1.removeElements(intArray0, false);
      visualListModel0.removeElements(intArray1, true);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.274876229760063
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(2);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(stack0);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[2] = 2;
      intArray1[6] = 2;
      visualListModel0.moveDownIndexes(intArray1);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      defaultFocusTraversalPolicy0.getDefaultComponent(jComboBox0);
      FocusEvent focusEvent0 = new FocusEvent(jComboBox0, 1896, true);
      focusEvent0.setSource((Object) null);
      componentListener1.componentHidden(focusEvent0);
      defaultFocusTraversalPolicy0.getLastComponent(jComboBox0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      jComboBox0.addComponentListener((ComponentListener) null);
      jComboBox0.setVerifyInputWhenFocusTarget(true);
      jComboBox0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.moveUpIndexes(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=2.4221471834150052
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(2);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(stack0);
      int[] intArray0 = new int[1];
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[2] = 2;
      intArray1[6] = 2;
      visualListModel0.moveDownIndexes(intArray1);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      jComboBox0.transferFocusDownCycle();
      FocusEvent focusEvent0 = new FocusEvent(jComboBox0, 1896, true);
      focusEvent0.setSource((Object) null);
      jComboBox0.isDoubleBuffered();
      componentListener1.componentHidden(focusEvent0);
      defaultFocusTraversalPolicy0.getLastComponent(jComboBox0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      jComboBox0.addComponentListener((ComponentListener) null);
      jComboBox0.setVerifyInputWhenFocusTarget(true);
      jComboBox0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray1);
      System.setCurrentTimeMillis(2);
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.172031691593465
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer0;
      Integer integer1 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      integerArray0[4] = integer4;
      Integer integer5 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[5] = integer5;
      Integer integer6 = JLayeredPane.DRAG_LAYER;
      integerArray0[6] = integer6;
      Integer integer7 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[7] = integer7;
      Integer integer8 = JLayeredPane.POPUP_LAYER;
      integerArray0[8] = integer8;
      stack0.toArray(integerArray0);
      integerArray0[2] = integerArray0[5];
      intArray0[2] = 0;
      integerArray0[1] = (Integer) 13;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int0 = 34;
      stack0.setSize(34);
      int int1 = 1;
      visualListModel0.removeElements(1, 34, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 34;
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      try { 
        visualListModel0.removeElements(intArray1, true);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // toIndex = 35
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.5434454298906781
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getElements();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(208);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.prependAllElements(stack0);
      int[] intArray0 = new int[6];
      intArray0[0] = 0;
      intArray0[1] = 208;
      intArray0[2] = 208;
      intArray0[3] = 1880;
      intArray0[4] = (int) (byte)114;
      intArray0[5] = (int) (byte)114;
      try { 
        visualListModel0.moveDownIndexes(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1880
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6b");
      visualListModel0.setData(visualPageListItemArray0);
      ChronoField[] chronoFieldArray0 = new ChronoField[15];
      ChronoField chronoField0 = ChronoField.NANO_OF_SECOND;
      chronoFieldArray0[0] = chronoField0;
      ChronoField chronoField1 = ChronoField.CLOCK_HOUR_OF_AMPM;
      chronoFieldArray0[1] = chronoField1;
      ChronoField chronoField2 = ChronoField.NANO_OF_DAY;
      chronoFieldArray0[2] = chronoField2;
      ChronoField chronoField3 = ChronoField.MILLI_OF_SECOND;
      chronoFieldArray0[3] = chronoField3;
      ChronoField chronoField4 = ChronoField.DAY_OF_YEAR;
      chronoFieldArray0[4] = chronoField4;
      ChronoField chronoField5 = ChronoField.SECOND_OF_DAY;
      chronoFieldArray0[5] = chronoField5;
      ChronoField chronoField6 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      chronoFieldArray0[6] = chronoField6;
      ChronoField chronoField7 = ChronoField.DAY_OF_WEEK;
      chronoFieldArray0[7] = chronoField7;
      JList<ChronoField> jList0 = new JList<ChronoField>(chronoFieldArray0);
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      stack0.stream();
      JList<ChronoField> jList1 = new JList<ChronoField>(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      visualListModel0.getListDataListeners();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      parameterBlock0.clone();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      vector0.add((Object) chronoField5);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      int[] intArray0 = new int[1];
      visualListModel0.removeListDataListener(jComboBox0);
      int int0 = 14;
      intArray0[0] = 14;
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 14
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      byte[] byteArray0 = new byte[1];
      byteArray0[0] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6b");
      visualListModel0.setData(visualPageListItemArray0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateClockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.7646308653001805
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Integer.getInteger("T*I");
      visualListModel0.getSize();
      Integer.compare((-1), (-1));
      Integer.getInteger("T*I", (-708));
      Integer.sum((-708), (-1876));
      Integer integer1 = new Integer((-750));
      Integer.divideUnsigned((-708), (-708));
      Integer.divideUnsigned(8, (-750));
      Integer integer2 = new Integer((-750));
      Integer integer3 = Integer.valueOf((int) integer2);
      Integer.getInteger("", integer3);
      linkedHashSet0.add(integer3);
      linkedHashSet0.add(integer0);
      linkedHashSet0.iterator();
      linkedHashSet0.add((Integer) null);
      Integer.compareUnsigned(0, (-1876));
      Integer.toUnsignedLong((-1876));
      linkedHashSet0.clear();
      stack0.add((VisualPageListItem) null);
      visualListModel0.clearData();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int[] intArray0 = new int[1];
      intArray0[0] = (-708);
      try { 
        visualListModel0.removeElements(intArray0, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -708
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.190530388242245
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.ensureCapacity(102);
      stack0.iterator();
      stack0.setSize(10);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(stack0);
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 10;
      visualListModel1.elementsChanged();
      intArray1[1] = 10;
      intArray1[2] = 10;
      intArray1[4] = 10;
      intArray1[5] = 10;
      intArray1[6] = 10;
      intArray1[7] = 10;
      visualListModel0.moveDownIndexes(intArray1);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      visualListModel0.removeListDataListener(jComboBox0);
      try { 
        visualListModel0.rotateClockwiseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 10
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.getValidElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.elementChanged((VisualPageListItem) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      visualListModel0.removeElementAt(0, true);
      int int1 = (-1433);
      SnapshotImage snapshotImage0 = null;
      try {
        snapshotImage0 = new SnapshotImage((PlanarImage) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("javax.media.jai.ImageLayout", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.659334098393565
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6b");
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.1380501687234124
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      int int0 = (-1881);
      int int1 = (-720);
      stack0.add((VisualPageListItem) null);
      Integer.divideUnsigned((-720), (-720));
      Integer.toUnsignedLong((-1881));
      linkedHashSet0.add(integer0);
      linkedHashSet0.clear();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      int int2 = (-257);
      Vector<Object> vector0 = new Vector<Object>();
      vector0.removeElement(stack0);
      vector0.add((Object) linkedHashSet0);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(vector0);
      int int3 = 9;
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndex((-720));
      visualListModel1.clearData();
      int[] intArray0 = new int[14];
      // Undeclared exception!
      try { 
        visualListModel0.appendAllElements(stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.0499251260871434
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      stack0.add((VisualPageListItem) null);
      Integer.divideUnsigned((-651), (-651));
      Integer.toUnsignedLong((-1881));
      linkedHashSet0.add(integer0);
      linkedHashSet0.clear();
      stack0.add((VisualPageListItem) null);
      stack0.add((VisualPageListItem) null);
      stack0.listIterator();
      visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) stack0);
      visualListModel0.clearData();
      int[] intArray0 = new int[26];
      intArray0[0] = 0;
      intArray0[1] = (-1881);
      intArray0[2] = 270;
      intArray0[7] = (-1881);
      intArray0[4] = (-1881);
      intArray0[5] = (-1881);
      intArray0[7] = 0;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.elementChanged((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.setData((VisualPageListItem[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[5];
      visualListModel0.setData(visualPageListItemArray0);
      ChronoField chronoField0 = ChronoField.MICRO_OF_DAY;
      ChronoField[] chronoFieldArray0 = new ChronoField[8];
      chronoFieldArray0[3] = chronoField0;
      chronoFieldArray0[4] = chronoField0;
      chronoFieldArray0[7] = chronoField0;
      JList<ChronoField> jList0 = new JList<ChronoField>(chronoFieldArray0);
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      stack0.stream();
      JList<ChronoField> jList1 = new JList<ChronoField>(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack1);
      parameterBlock0.clone();
      parameterBlock0.getParameters();
      FileSystemHandling.shouldAllThrowIOExceptions();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      visualListModel0.setData(vector0);
      assertEquals("[]", vector0.toString());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.498884008557752
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      int[] intArray0 = new int[0];
      int int0 = 4;
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int1 = 2;
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(1519);
      visualListModel0.removeElements(5000, (-1942), false);
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.removeElements(intArray0, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.removeElements(1519, (-1942), true);
      VisualListModel visualListModel3 = new VisualListModel();
      visualListModel2.moveUpIndexes(intArray0);
      visualListModel1.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.removeElements(intArray0, false);
      VisualListModel visualListModel4 = new VisualListModel();
      int[] intArray1 = new int[1];
      intArray1[0] = 5000;
      try { 
        visualListModel0.undeleteElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 5000
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.281893773619712
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(2);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[4] = 2;
      intArray1[5] = 2;
      intArray1[6] = 2;
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      defaultComboBoxModel0.addListDataListener(jComboBox0);
      Stack<FilterInputStream> stack1 = new Stack<FilterInputStream>();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      stack1.sort(comparator0);
      JComboBox<FilterInputStream> jComboBox1 = new JComboBox<FilterInputStream>(stack1);
      Set<AWTKeyStroke> set0 = jComboBox1.getFocusTraversalKeys(2);
      jComboBox0.setFocusTraversalKeys(2, set0);
      defaultComboBoxModel0.getIndexOf(stack0);
      jComboBox0.getToolTipText();
      jComboBox0.getModel();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.prependAllElements(stack0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=2.4874901043786624
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      intArray0[1] = 1519;
      intArray0[2] = 1519;
      intArray0[5] = 1519;
      intArray0[5] = 4;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      int int0 = 2;
      stack0.setSize(2);
      visualListModel0.removeElements(1, 2, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel0.removeElements(intArray1, true);
      boolean boolean0 = false;
      visualListModel0.removeElements(1, 1, false);
      visualListModel0.moveUpIndexes(intArray1);
      try { 
        visualListModel0.reverseElements(intArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.977500522076773
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6b");
      visualListModel0.setData(visualPageListItemArray0);
      int[] intArray0 = new int[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "fHCv1/\"oL}.ve4z");
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      Object object0 = new Object();
      MockFile mockFile0 = new MockFile("d%If S w");
      MockRandomAccessFile mockRandomAccessFile0 = null;
      try {
        mockRandomAccessFile0 = new MockRandomAccessFile(mockFile0, "?;>UHX-I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal mode \"?;>UHX-I\" must be one of \"r\", \"rw\", \"rws\", or \"rwd\"
         //
         verifyException("java.io.RandomAccessFile", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.236336453127151
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(2);
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[2];
      visualListModel0.moveDownIndexes(intArray0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel1.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[5] = 2;
      intArray1[5] = 2;
      intArray1[6] = 2;
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(defaultComboBoxModel0);
      jComboBox0.getModel();
      visualListModel0.removeListDataListener(jComboBox0);
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.prependAllElements(stack0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      // Undeclared exception!
      try { 
        visualListModel0.undeleteElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 0;
      visualListModel0.elementChanged((VisualPageListItem) null);
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      VisualPageListItem visualPageListItem0 = null;
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Boolean.valueOf("");
      ChronoField chronoField0 = ChronoField.ALIGNED_WEEK_OF_MONTH;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      ChronoField[] chronoFieldArray0 = new ChronoField[9];
      chronoFieldArray0[0] = chronoField1;
      chronoFieldArray0[1] = chronoField1;
      ChronoField chronoField2 = ChronoField.INSTANT_SECONDS;
      chronoFieldArray0[8] = chronoField2;
      chronoFieldArray0[3] = chronoField1;
      ChronoField chronoField3 = ChronoField.DAY_OF_YEAR;
      chronoFieldArray0[4] = chronoField3;
      chronoFieldArray0[5] = chronoField0;
      chronoFieldArray0[6] = chronoField1;
      chronoFieldArray0[7] = chronoField1;
      chronoFieldArray0[4] = chronoField0;
      JList<ChronoField> jList0 = new JList<ChronoField>(chronoFieldArray0);
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      UnaryOperator<ChronoField> unaryOperator0 = UnaryOperator.identity();
      stack0.replaceAll(unaryOperator0);
      stack0.stream();
      JList<ChronoField> jList1 = new JList<ChronoField>(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      OperationRegistry operationRegistry0 = new OperationRegistry();
      // Undeclared exception!
      try { 
        visualListModel0.moveDownIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point((-134), (-134));
      AffineTransform affineTransform0 = new AffineTransform();
      Point point1 = (Point)affineTransform0.transform((Point2D) point0, (Point2D) point0);
      point1.move(3909, 3909);
      Point point2 = new Point(3909, 3909);
      Point point3 = new Point(point0);
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-134);
      floatArray0[1] = (float) (-134);
      floatArray0[2] = (float) 3909;
      floatArray0[3] = (float) (-134);
      point3.translate(3909, 1786);
      floatArray0[4] = (float) 3909;
      point0.move(1652, 2837);
      floatArray0[5] = (float) 1652;
      floatArray0[6] = (float) 3909;
      affineTransform0.transform(doubleArray0, 2837, floatArray0, 3909, (-134));
      point2.move(1652, 2837);
      Point point4 = new Point();
      point0.move(1652, 1652);
      point0.setLocation(point1);
      point1.x = 2837;
      affineTransform0.setToRotation((double) 2837);
      point1.move(2837, 2837);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      // Undeclared exception!
      try { 
        visualListModel0.reverseElements((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.460685998915806
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.add((VisualPageListItem) null);
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      stack0.setSize(2);
      visualListModel0.addElementAt((VisualPageListItem) null, 2);
      VisualListModel visualListModel1 = new VisualListModel();
      int[] intArray0 = new int[1];
      visualListModel1.updateElementAt(1, (VisualPageListItem) null);
      intArray0[0] = 1;
      Integer integer0 = JLayeredPane.PALETTE_LAYER;
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer.sum(1, 32);
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      linkedHashSet0.add(integer1);
      linkedHashSet0.add(integer0);
      stack0.add((VisualPageListItem) null);
      visualListModel1.clearData();
      Boolean boolean0 = new Boolean(false);
      visualListModel1.setData((Vector<VisualPageListItem>) stack0);
      Vector<Object> vector0 = new Vector<Object>();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[3];
      visualPageListItemArray0[0] = null;
      visualPageListItemArray0[2] = null;
      visualListModel1.setData(visualPageListItemArray0);
      PdfGraphics2D.HyperLinkKey pdfGraphics2D_HyperLinkKey0 = PdfGraphics2D.HyperLinkKey.KEY_INSTANCE;
      RenderingHints renderingHints0 = new RenderingHints(pdfGraphics2D_HyperLinkKey0, integer1);
      visualListModel1.moveUpIndex(1);
      AffineTransform affineTransform0 = AffineTransform.getRotateInstance((double) 1, 0.0, 637.714, (double) 32);
      AffineTransformOp affineTransformOp0 = new AffineTransformOp(affineTransform0, renderingHints0);
      BufferedImage bufferedImage0 = null;
      try {
        bufferedImage0 = new BufferedImage(68, 0, 2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Width (68) and height (0) cannot be <= 0
         //
         verifyException("java.awt.image.DirectColorModel", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[6];
      visualListModel0.setData(visualPageListItemArray0);
      ChronoField chronoField0 = ChronoField.MINUTE_OF_HOUR;
      ChronoField chronoField1 = ChronoField.MICRO_OF_DAY;
      ChronoField[] chronoFieldArray0 = new ChronoField[6];
      chronoFieldArray0[0] = chronoField1;
      ChronoField chronoField2 = ChronoField.YEAR_OF_ERA;
      chronoFieldArray0[1] = chronoField2;
      chronoFieldArray0[2] = chronoField0;
      chronoFieldArray0[3] = chronoField0;
      chronoFieldArray0[4] = chronoField0;
      chronoFieldArray0[5] = chronoField1;
      JList<ChronoField> jList0 = new JList<ChronoField>(chronoFieldArray0);
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      JList<ChronoField> jList1 = new JList<ChronoField>(stack0);
      Point point0 = new Point((-170), (-170));
      AffineTransform affineTransform0 = AffineTransform.getShearInstance((-170), (-848.9737065448713));
      Point2D point2D0 = affineTransform0.transform((Point2D) point0, (Point2D) point0);
      point0.setLocation(point2D0);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.clearData();
      assertFalse(visualListModel0.equals((Object)visualListModel1));
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.856882596414008
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.removeAllElements();
      visualListModel0.setData(vector0);
      visualListModel0.subList(0, 0);
      visualListModel0.clearData();
      visualListModel0.subList((-1241), 1187);
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem((-1241), "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.209605810084551
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.add((VisualPageListItem) null);
      vector0.spliterator();
      visualListModel0.moveDownIndex(0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      int[] intArray0 = new int[6];
      intArray0[0] = 3956;
      intArray0[3] = 874;
      intArray0[4] = 0;
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 874;
      intArray1[1] = 0;
      intArray1[2] = 874;
      intArray1[3] = 3956;
      intArray1[4] = 874;
      intArray1[5] = 3956;
      intArray1[6] = 3956;
      intArray1[7] = 3956;
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.moveUpIndex(1);
      visualListModel0.updateElementAt((-2354), (VisualPageListItem) null);
      assertEquals(1, visualListModel0.getSize());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = JLayeredPane.FRAME_CONTENT_LAYER;
      Integer integer1 = Integer.getInteger("NU", 20);
      stack0.add((VisualPageListItem) null);
      Integer.divideUnsigned((-720), (-720));
      linkedHashSet0.clear();
      Integer integer2 = JLayeredPane.PALETTE_LAYER;
      linkedHashSet0.add(integer2);
      stack0.removeAll(linkedHashSet0);
      Integer integer3 = IIPResolutionDescriptor.MAX_RESOLUTION;
      linkedHashSet0.add(integer3);
      linkedHashSet0.iterator();
      linkedHashSet0.add(integer1);
      Integer.compareUnsigned(1, 1);
      Integer integer4 = IIPResolutionDescriptor.MAX_RESOLUTION;
      Integer.compare(20, 0);
      Integer.toUnsignedLong(1);
      Integer integer5 = JLayeredPane.MODAL_LAYER;
      linkedHashSet0.add(integer5);
      linkedHashSet0.clear();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      visualListModel0.clearData();
      Boolean boolean0 = Boolean.FALSE;
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      Vector<Object> vector0 = new Vector<Object>();
      int int0 = visualListModel0.getSize();
      assertEquals(1, int0);
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.8475757923898373
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getListDataListeners();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = JLayeredPane.DEFAULT_LAYER;
      stack0.add((VisualPageListItem) null);
      Integer.divideUnsigned((-720), (-720));
      linkedHashSet0.add(integer0);
      linkedHashSet0.clear();
      Integer integer1 = JLayeredPane.PALETTE_LAYER;
      linkedHashSet0.add(integer1);
      stack0.removeAll(linkedHashSet0);
      stack0.add((VisualPageListItem) null);
      stack0.listIterator();
      visualListModel0.setData((Vector<VisualPageListItem>) stack0);
      linkedHashSet0.clear();
      visualListModel0.elementsChanged();
      int[] intArray0 = new int[4];
      intArray0[0] = (-720);
      intArray0[1] = (-257);
      intArray0[2] = (-257);
      intArray0[3] = (-257);
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      visualListModel0.addElementAt((VisualPageListItem) null, (-257));
      linkedHashSet0.add((Integer) (-257));
      int[] intArray1 = new int[0];
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel0.addElementAt((VisualPageListItem) null, (-257));
      visualListModel0.addElementAt((VisualPageListItem) null, (-1207));
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.elementChanged((VisualPageListItem) null);
      visualListModel0.reverseElements(intArray0);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.moveUpIndex(1);
      visualListModel0.updateElementAt(1, (VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.640469894674223
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      int[] intArray0 = new int[7];
      Integer[] integerArray0 = new Integer[9];
      Integer integer0 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[0] = integer0;
      Integer integer1 = IIPResolutionDescriptor.MAX_RESOLUTION;
      integerArray0[1] = integer1;
      Integer integer2 = JLayeredPane.DRAG_LAYER;
      integerArray0[2] = integer2;
      Integer integer3 = JLayeredPane.MODAL_LAYER;
      integerArray0[3] = integer3;
      Integer integer4 = JLayeredPane.PALETTE_LAYER;
      integerArray0[4] = integer4;
      Integer integer5 = FPXDescriptor.MAX_RESOLUTION;
      integerArray0[5] = integer5;
      Integer integer6 = JLayeredPane.DRAG_LAYER;
      integerArray0[6] = integer6;
      Integer integer7 = JLayeredPane.DEFAULT_LAYER;
      integerArray0[7] = integer7;
      Integer integer8 = JLayeredPane.POPUP_LAYER;
      integerArray0[8] = integer8;
      stack0.toArray(integerArray0);
      intArray0[1] = 1519;
      intArray0[2] = 1519;
      intArray0[5] = 13;
      visualListModel0.rotateAnticlockwiseElements(intArray0);
      stack0.setSize(34);
      visualListModel0.removeElements(1, 34, false);
      int[] intArray1 = new int[1];
      intArray1[0] = 1;
      visualListModel0.moveDownIndexes(intArray1);
      VisualListModel visualListModel1 = new VisualListModel();
      visualListModel0.addAllElements((Collection<VisualPageListItem>) stack0);
      visualListModel1.removeElements(intArray1, true);
      visualListModel0.removeElements(1, 1, false);
      visualListModel0.moveUpIndexes(intArray1);
      visualListModel1.reverseElements(intArray1);
      visualListModel0.removeElements(intArray1, true);
      VisualListModel visualListModel2 = new VisualListModel();
      visualListModel2.undeleteElements(intArray1);
      visualListModel0.removeElements(34, (-4), false);
      visualListModel2.undeleteElements(intArray1);
      visualListModel2.rotateAnticlockwiseElements(intArray1);
      visualListModel1.rotateClockwiseElements(intArray1);
      // Undeclared exception!
      try { 
        visualListModel0.rotateAnticlockwiseElements(intArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      LinkedHashSet<VisualPageListItem> linkedHashSet0 = new LinkedHashSet<VisualPageListItem>();
      int[] intArray0 = new int[5];
      intArray0[0] = (-570);
      intArray0[1] = (-2085);
      intArray0[1] = 0;
      intArray0[3] = 637;
      intArray0[4] = 39;
      visualListModel0.removeElements(intArray0, false);
      visualListModel0.removeElements(22, 0, true);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.4568661615489042
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      stack0.setSize(2);
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(stack0);
      int[] intArray0 = new int[1];
      visualListModel0.moveDownIndexes(intArray0);
      visualListModel0.reverseElements(intArray0);
      int[] intArray1 = new int[8];
      intArray1[0] = 2;
      intArray1[1] = 2;
      intArray1[2] = 2;
      intArray1[2] = 2;
      intArray1[6] = 2;
      visualListModel0.moveDownIndexes(intArray1);
      DefaultComboBoxModel<Object> defaultComboBoxModel0 = new DefaultComboBoxModel<Object>();
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      DefaultFocusTraversalPolicy defaultFocusTraversalPolicy0 = new DefaultFocusTraversalPolicy();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      FocusEvent focusEvent0 = new FocusEvent(jComboBox0, 1896, true);
      focusEvent0.setSource((Object) null);
      componentListener1.componentHidden(focusEvent0);
      defaultFocusTraversalPolicy0.getLastComponent(jComboBox0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      jComboBox0.addComponentListener((ComponentListener) null);
      jComboBox0.setVerifyInputWhenFocusTarget(true);
      jComboBox0.setFocusTraversalPolicy((FocusTraversalPolicy) null);
      visualListModel0.rotateClockwiseElements(intArray1);
      visualListModel0.moveUpIndexes(intArray0);
      visualListModel0.rotateAnticlockwiseElements(intArray1);
      visualListModel0.undeleteElements(intArray1);
      System.setCurrentTimeMillis(2);
      System.setCurrentTimeMillis(2);
      visualListModel0.getElements();
      assertEquals(2, visualListModel0.getSize());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Vector<VisualPageListItem> vector0 = visualListModel0.data;
      vector0.spliterator();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      vector0.forEach(consumer0);
      vector0.add((VisualPageListItem) null);
      // Undeclared exception!
      try { 
        visualListModel0.addAllElements(0, (Collection<VisualPageListItem>) vector0);
        fail("Expecting exception: ConcurrentModificationException");
      
      } catch(ConcurrentModificationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Vector$Itr", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      OperationRegistry operationRegistry0 = new OperationRegistry();
      OperationRegistry operationRegistry1 = new OperationRegistry();
      OperationRegistry operationRegistry2 = new OperationRegistry();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.undeleteElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      PriorityQueue<VisualPageListItem> priorityQueue0 = new PriorityQueue<VisualPageListItem>();
      visualListModel0.addAllElements((-1017), (Collection<VisualPageListItem>) priorityQueue0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addAllElements(1816, (Collection<VisualPageListItem>) stack0);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Boolean boolean0 = new Boolean(">fo-.wa_jAM");
      // Undeclared exception!
      try { 
        visualListModel0.moveUpIndexes((int[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex((-487));
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_RENDERING;
      VisualPageListItem visualPageListItem0 = null;
      try {
        visualPageListItem0 = new VisualPageListItem(9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // input == null!
         //
         verifyException("javax.imageio.ImageIO", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      ChronoField chronoField0 = ChronoField.OFFSET_SECONDS;
      ChronoField chronoField1 = ChronoField.DAY_OF_YEAR;
      ChronoField[] chronoFieldArray0 = new ChronoField[9];
      chronoFieldArray0[0] = chronoField1;
      ChronoField chronoField2 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_MONTH;
      chronoFieldArray0[1] = chronoField2;
      chronoFieldArray0[2] = chronoField1;
      chronoFieldArray0[3] = chronoField0;
      chronoFieldArray0[4] = chronoField0;
      chronoFieldArray0[5] = chronoField0;
      ChronoField chronoField3 = ChronoField.YEAR_OF_ERA;
      chronoFieldArray0[6] = chronoField3;
      chronoFieldArray0[7] = chronoField1;
      chronoFieldArray0[8] = chronoField1;
      JList<ChronoField> jList0 = new JList<ChronoField>(chronoFieldArray0);
      Vector<ChronoField> vector0 = new Vector<ChronoField>();
      ChronoField chronoField4 = ChronoField.MINUTE_OF_DAY;
      vector0.add(chronoField4);
      JList<ChronoField> jList1 = new JList<ChronoField>(vector0);
      Point point0 = new Point(0, 0);
      point0.clone();
      point0.move(1707, (-669));
      // Undeclared exception!
      try { 
        visualListModel0.setData((Vector<VisualPageListItem>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.addElement((VisualPageListItem) null);
      Boolean boolean0 = new Boolean((String) null);
      ChronoField chronoField0 = ChronoField.DAY_OF_YEAR;
      ChronoField chronoField1 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      ChronoField chronoField2 = ChronoField.NANO_OF_SECOND;
      ChronoField chronoField3 = ChronoField.DAY_OF_YEAR;
      ChronoField[] chronoFieldArray0 = new ChronoField[9];
      ChronoField chronoField4 = ChronoField.MILLI_OF_DAY;
      chronoFieldArray0[0] = chronoField4;
      chronoFieldArray0[1] = chronoField3;
      chronoFieldArray0[2] = chronoField0;
      chronoFieldArray0[3] = chronoField1;
      chronoFieldArray0[4] = chronoField2;
      chronoFieldArray0[5] = chronoField3;
      chronoFieldArray0[6] = chronoField0;
      ChronoField chronoField5 = ChronoField.YEAR_OF_ERA;
      chronoFieldArray0[7] = chronoField5;
      chronoFieldArray0[8] = chronoField3;
      JList<ChronoField> jList0 = new JList<ChronoField>(chronoFieldArray0);
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      stack0.stream();
      JList<ChronoField> jList1 = new JList<ChronoField>(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock();
      ParameterBlock parameterBlock1 = parameterBlock0.add(219.8);
      parameterBlock1.clone();
      ParameterBlock parameterBlock2 = new ParameterBlock(stack1);
      parameterBlock2.getParameters();
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      assertEquals(0, vector0.size());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[1];
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "6b");
      visualListModel0.setData(visualPageListItemArray0);
      ChronoField[] chronoFieldArray0 = new ChronoField[8];
      ChronoField chronoField0 = ChronoField.NANO_OF_SECOND;
      chronoFieldArray0[0] = chronoField0;
      ChronoField chronoField1 = ChronoField.CLOCK_HOUR_OF_AMPM;
      chronoFieldArray0[1] = chronoField1;
      ChronoField chronoField2 = ChronoField.NANO_OF_DAY;
      chronoFieldArray0[2] = chronoField2;
      ChronoField chronoField3 = ChronoField.MILLI_OF_SECOND;
      chronoFieldArray0[3] = chronoField3;
      ChronoField chronoField4 = ChronoField.DAY_OF_YEAR;
      chronoFieldArray0[4] = chronoField4;
      ChronoField chronoField5 = ChronoField.SECOND_OF_DAY;
      chronoFieldArray0[5] = chronoField5;
      ChronoField chronoField6 = ChronoField.ALIGNED_DAY_OF_WEEK_IN_YEAR;
      chronoFieldArray0[6] = chronoField6;
      ChronoField chronoField7 = ChronoField.DAY_OF_WEEK;
      chronoFieldArray0[7] = chronoField7;
      JList<ChronoField> jList0 = new JList<ChronoField>(chronoFieldArray0);
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      stack0.stream();
      JList<ChronoField> jList1 = new JList<ChronoField>(stack0);
      Stack<Object> stack1 = new Stack<Object>();
      ParameterBlock parameterBlock0 = new ParameterBlock(stack1);
      parameterBlock0.clone();
      Vector<Object> vector0 = parameterBlock0.getParameters();
      vector0.add((Object) chronoField5);
      JComboBox<Object> jComboBox0 = new JComboBox<Object>();
      Vector<VisualPageListItem> vector1 = visualListModel0.data;
      visualListModel0.setData(vector1);
      assertEquals(10, vector1.capacity());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      int int0 = 1519;
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      RenderingHints renderingHints0 = new RenderingHints(sunHints_Key0, sunHints_Key0);
      RescaleOp rescaleOp0 = new RescaleOp(1519, 30.0F, renderingHints0);
      // Undeclared exception!
      try { 
        visualListModel0.subList(1519, (-1291));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(1519) > toIndex(-1291)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(0);
      visualListModel0.getElementAt(0);
      VisualPageListItem[] visualPageListItemArray0 = new VisualPageListItem[8];
      float[] floatArray0 = new float[3];
      floatArray0[0] = (float) 0;
      floatArray0[1] = (float) 0;
      floatArray0[2] = (float) 3;
      Kernel kernel0 = null;
      try {
        kernel0 = new Kernel(2284, 3, floatArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Data array too small (is 3 and should be 6852
         //
         verifyException("java.awt.image.Kernel", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveUpIndex((-388));
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.getValidElements();
      byte[] byteArray0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PipedOutputStream pipedOutputStream1 = null;
      try {
        pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedOutputStream", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.subList((-4), (-4), true);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      MetalLabelUI metalLabelUI1 = new MetalLabelUI();
      MetalLabelUI metalLabelUI2 = new MetalLabelUI();
      MetalLabelUI metalLabelUI3 = new MetalLabelUI();
      MetalLabelUI metalLabelUI4 = new MetalLabelUI();
      MetalLabelUI metalLabelUI5 = new MetalLabelUI();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.394714983677679
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList((-3190), 226, true);
      visualListModel0.subList(2254, 2254);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(2254);
      PipedOutputStream pipedOutputStream1 = new PipedOutputStream(pipedInputStream0);
      assertFalse(pipedOutputStream1.equals((Object)pipedOutputStream0));
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.data = null;
      // Undeclared exception!
      try { 
        visualListModel0.clearData();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.pdfsam.guiclient.commons.models.VisualListModel", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.moveDownIndex(90);
      Boolean boolean0 = new Boolean("org.apache.log4j.CategoryKey");
      ChronoField chronoField0 = ChronoField.MINUTE_OF_HOUR;
      ChronoField[] chronoFieldArray0 = new ChronoField[9];
      chronoFieldArray0[0] = chronoField0;
      chronoFieldArray0[1] = chronoField0;
      chronoFieldArray0[5] = chronoField0;
      chronoFieldArray0[7] = chronoField0;
      chronoFieldArray0[8] = chronoField0;
      JList<ChronoField> jList0 = new JList<ChronoField>();
      Stack<ChronoField> stack0 = new Stack<ChronoField>();
      ChronoField chronoField1 = ChronoField.SECOND_OF_MINUTE;
      stack0.add(chronoField1);
      stack0.add(chronoFieldArray0[3]);
      stack0.add(chronoField0);
      Point point0 = new Point();
      int[] intArray0 = new int[28];
      point0.x = 2588;
      intArray0[0] = 3909;
      intArray0[9] = 2588;
      intArray0[1] = (-170);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-23);
      byteArray0[1] = (byte)0;
      // Undeclared exception!
      try { 
        visualListModel0.subList(4729, (int) (byte) (-23), false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(4729) > toIndex(-23)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      LinkedHashSet<Integer> linkedHashSet0 = new LinkedHashSet<Integer>();
      Integer integer0 = JLayeredPane.DRAG_LAYER;
      Integer.getInteger("T*I");
      linkedHashSet0.iterator();
      Integer.sum((-713), (-1893));
      Integer.min(4279, (-750));
      Integer integer1 = new Integer((-750));
      Integer.divideUnsigned((-713), (-713));
      Integer.divideUnsigned(8, (-750));
      Integer integer2 = new Integer((-750));
      Integer integer3 = Integer.valueOf((int) integer2);
      linkedHashSet0.add(integer3);
      linkedHashSet0.add(integer2);
      linkedHashSet0.add(integer0);
      linkedHashSet0.iterator();
      linkedHashSet0.add((Integer) null);
      Boolean boolean0 = new Boolean("T*I");
      Integer.toUnsignedLong((-1893));
      Boolean boolean1 = Boolean.FALSE;
      linkedHashSet0.clear();
      stack0.add((VisualPageListItem) null);
      Boolean.valueOf((boolean) boolean1);
      stack0.listIterator();
      int[] intArray0 = new int[1];
      intArray0[0] = (-713);
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt((-764), false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      // Undeclared exception!
      try { 
        visualListModel0.removeElementAt(2, true);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 2
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements((Collection<VisualPageListItem>) null);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Stack<VisualPageListItem> stack0 = new Stack<VisualPageListItem>();
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.prependAllElements(stack0);
      byte[] byteArray0 = null;
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      int int0 = (-364);
      PipedInputStream pipedInputStream0 = null;
      try {
        pipedInputStream0 = new PipedInputStream((PipedOutputStream) null, (-364));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe Size <= 0
         //
         verifyException("java.io.PipedInputStream", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        visualListModel0.subList(0, (-1201), true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // fromIndex(0) > toIndex(-1201)
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      MetalLabelUI metalLabelUI1 = new MetalLabelUI();
      MetalLabelUI metalLabelUI2 = new MetalLabelUI();
      MetalLabelUI metalLabelUI3 = new MetalLabelUI();
      MetalLabelUI metalLabelUI4 = new MetalLabelUI();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      visualListModel0.subList(25, 25, true);
      SunHints.Key sunHints_Key0 = (SunHints.Key)RenderingHints.KEY_ALPHA_INTERPOLATION;
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      MetalLabelUI metalLabelUI1 = new MetalLabelUI();
      MetalLabelUI metalLabelUI2 = new MetalLabelUI();
      MetalLabelUI metalLabelUI3 = new MetalLabelUI();
      MetalLabelUI metalLabelUI4 = new MetalLabelUI();
      MetalLabelUI metalLabelUI5 = new MetalLabelUI();
      MetalLabelUI metalLabelUI6 = new MetalLabelUI();
      MetalLabelUI metalLabelUI7 = new MetalLabelUI();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) visualListModel0;
      objectArray0[1] = (Object) visualListModel0;
      JComboBox<Object> jComboBox0 = new JComboBox<Object>(objectArray0);
      jComboBox0.getKeyListeners();
      visualListModel0.addListDataListener(jComboBox0);
      visualListModel0.addAllElements(49, (Collection<VisualPageListItem>) null);
      visualListModel0.addAllElements((Collection<VisualPageListItem>) null);
      VisualPageListItem[] visualPageListItemArray0 = visualListModel0.getElements();
      visualListModel0.setData(visualPageListItemArray0);
      int int0 = 1515;
      ICC_Profile[] iCC_ProfileArray0 = new ICC_Profile[9];
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte)5;
      byte byte0 = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte)7;
      byteArray0[3] = (byte)116;
      byteArray0[4] = (byte)78;
      // Undeclared exception!
      try { 
        ICC_Profile.getInstance(byteArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      visualListModel0.subList(0, 0, true);
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      MetalLabelUI metalLabelUI1 = new MetalLabelUI();
      MetalLabelUI metalLabelUI2 = new MetalLabelUI();
      MetalLabelUI metalLabelUI3 = new MetalLabelUI();
      MetalLabelUI metalLabelUI4 = new MetalLabelUI();
      JApplet jApplet0 = null;
      try {
        jApplet0 = new JApplet();
        fail("Expecting exception: HeadlessException");
      
      } catch(HeadlessException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.applet.Applet", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)14;
      byteArray0[1] = (byte) (-45);
      byteArray0[2] = (byte) (-27);
      byteArray0[3] = (byte) (-81);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      VisualListModel visualListModel0 = new VisualListModel();
      Object object0 = visualListModel0.getElementAt(6);
      assertNull(object0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)10;
      byteArray0[1] = (byte)110;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)14;
      byteArray0[5] = (byte)10;
      byteArray0[6] = (byte) (-69);
      byteArray0[7] = (byte)60;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Boolean boolean0 = new Boolean("");
      MultiListUI multiListUI0 = new MultiListUI();
      MetalLabelUI metalLabelUI0 = new MetalLabelUI();
      JTextField jTextField0 = new JTextField();
      MetalLabelUI metalLabelUI1 = new MetalLabelUI();
      MetalLabelUI metalLabelUI2 = new MetalLabelUI();
      MetalLabelUI metalLabelUI3 = new MetalLabelUI();
      MetalLabelUI metalLabelUI4 = new MetalLabelUI();
      MetalLabelUI metalLabelUI5 = new MetalLabelUI();
      MetalLabelUI metalLabelUI6 = new MetalLabelUI();
      // Undeclared exception!
      try { 
        visualListModel0.getElementAt((-3390));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      SunHints.LCDContrastKey sunHints_LCDContrastKey0 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      SunHints.LCDContrastKey sunHints_LCDContrastKey1 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      FileSystemHandling.shouldAllThrowIOExceptions();
      SunHints.LCDContrastKey sunHints_LCDContrastKey2 = (SunHints.LCDContrastKey)RenderingHints.KEY_TEXT_LCD_CONTRAST;
      OperationRegistry operationRegistry0 = new OperationRegistry();
      OperationRegistry operationRegistry1 = new OperationRegistry();
      VisualListModel visualListModel0 = new VisualListModel();
      int[] intArray0 = new int[0];
      visualListModel0.rotateClockwiseElements(intArray0);
      assertEquals(0, visualListModel0.getSize());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      ArrayDeque<VisualPageListItem> arrayDeque0 = new ArrayDeque<VisualPageListItem>();
      visualListModel0.appendAllElements(arrayDeque0);
      List<VisualPageListItem> list0 = new ArrayList<VisualPageListItem>();
      byte[] byteArray0 = null;
      int int0 = 15;
      ByteArrayInputStream byteArrayInputStream0 = null;
      try {
        byteArrayInputStream0 = new ByteArrayInputStream((byte[]) null, 15, 7070);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      VisualListModel visualListModel0 = new VisualListModel();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Point point0 = new Point((-134), (-134));
      AffineTransform affineTransform0 = new AffineTransform();
      Point point1 = (Point)affineTransform0.transform((Point2D) point0, (Point2D) point0);
      point1.move(3909, 3909);
      Point point2 = new Point(3909, 3909);
      Point point3 = new Point(point0);
      double[] doubleArray0 = new double[0];
      float[] floatArray0 = new float[7];
      floatArray0[0] = (float) (-134);
      floatArray0[1] = (float) (-134);
      floatArray0[2] = (float) 3909;
      floatArray0[3] = (float) (-134);
      floatArray0[4] = (float) 3909;
      point0.move((-134), 2837);
      floatArray0[5] = (float) (-134);
      floatArray0[6] = (float) 3909;
      affineTransform0.transform(doubleArray0, 2837, floatArray0, 3909, (-134));
      point2.move((-134), 2837);
      Point point4 = new Point();
      point0.move((-134), (-134));
      point0.setLocation(point1);
      point1.x = 2837;
      affineTransform0.setToRotation((double) 2837);
      point1.move(2837, 2837);
      affineTransform0.setToShear((-134), 2837);
      Integer integer0 = JLayeredPane.POPUP_LAYER;
      Vector<VisualPageListItem> vector0 = new Vector<VisualPageListItem>();
      visualListModel0.setData(vector0);
      assertEquals(0, visualListModel0.getSize());
  }
}
