/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 02:46:25 GMT 2019
 */

package org.jcvi.jillion.core;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.function.Consumer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.jcvi.jillion.core.Range;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.343352673748023
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      long long0 = 255L;
      Range.Builder range_Builder1 = new Range.Builder(255L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      long long1 = (-2874L);
      range_Builder0.contractBegin((-2156L));
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.build();
      long long2 = 9223372036854775807L;
      Range.Builder range_Builder4 = new Range.Builder(9223372036854775807L, (-2156L));
      // Undeclared exception!
      try { 
        range_Builder4.build();
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2156 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.7334509235676583
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967297L, 9223372036854775807L);
      Range range1 = Range.of(4294967297L);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object0));
  }

  /**
  //Test case number: 2
  /*Coverage entropy=3.2054994864857265
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.expandBegin(318L);
      Integer integer0 = new Integer((-822));
      Integer integer1 = new Integer(363);
      Object object0 = new Object();
      range0.equals(range1);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.JillionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.JillionUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.689027510619996
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range range0 = Range.of(0L);
      Range.of(0L);
      Range range1 = Range.ofLength(0L);
      Integer integer0 = new Integer(2611);
      Integer integer1 = new Integer(3274);
      range1.equals((Object) null);
      assertTrue(range1.isEmpty());
      
      Integer integer2 = new Integer(3653);
      Object object0 = new Object();
      range0.equals(integer1);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.55116216920892
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Range.of(4294967297L, 9223372036854775807L);
      Range range0 = Range.of(4294967297L);
      assertFalse(range0.isEmpty());
      
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(254L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=3.354932314980694
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 514L, 514L);
      Range range1 = Range.of(514L);
      boolean boolean0 = range0.equals("");
      Long long0 = new Long((-1928L));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      Object object3 = new Object();
      boolean boolean1 = range1.equals(range0);
      assertFalse(range0.equals((Object)range1));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=4.130319903990302
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range range1 = Range.of((-3752L));
      range1.endsBefore(range0);
      range1.intersection(range0);
      range1.startsBefore(range0);
      Range.of((-3752L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9986L, 2147483647L);
      range0.equals(range_CoordinateSystem0);
      Range.of((-128L), (-128L));
      Range range3 = Range.of(range_CoordinateSystem0, 9987L, 2147483647L);
      range3.equals(range1);
      List<Range> list0 = range3.complement(range2);
      //  // Unstable assertion: assertEquals(1, list0.size());
      //  // Unstable assertion: assertFalse(list0.contains(range3));
      //  // Unstable assertion: assertNotSame(range3, range2);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.84294520421389
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Long long0 = new Long(1055L);
      Long.remainderUnsigned(1055L, 1055L);
      Long.getLong("");
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.of(65595L, 4294967326L);
      Range range1 = Range.of(9223372036854775807L);
      // Undeclared exception!
      try { 
        range0.intersection(range1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2157 would make range [9223372036854775807 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.7630348302673555
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      long long0 = (-48L);
      Range range0 = Range.of((-48L));
      Range range1 = Range.of((-48L));
      Range range2 = Range.of((-48L), 127L);
      Range range3 = Range.ofLength(127L);
      Range.Builder range_Builder0 = new Range.Builder(range3);
      range2.getLength();
      range0.intersects(range1);
      Long long1 = new Long(4294967295L);
      // Undeclared exception!
      try { 
        Range.of(176L, (-2145200490L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.6382695055424485
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Range range0 = Range.of((long) (-2147407476));
      Range.Builder range_Builder0 = new Range.Builder((-2147407476), 1205L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range0.equals(range1);
      range_Builder0.shift((-95L));
      range_Builder2.expandBegin(1205L);
      Integer integer0 = new Integer(1);
      Integer integer1 = new Integer(1);
      Object object0 = new Object();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("org.jcvi.jillion.internal.core.util.JillionUtil");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.org.jcvi.jillion.internal.core.util.JillionUtil
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.272960547769848
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Range range0 = Range.of(9223372036854774431L);
      Integer integer0 = new Integer((-1440));
      Integer integer1 = new Integer((-694));
      Integer integer2 = new Integer((-694));
      range0.spliterator();
      range0.equals((Object) null);
      Long.valueOf((-3534L));
      Long long0 = new Long((-1440));
      Integer integer3 = new Integer((-1994091957));
      Integer integer4 = new Integer((-1440));
      assertEquals((-1440), (int)integer4);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.9558505135318787
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-2147483681L), (-2147483681L));
      Object object0 = new Object();
      boolean boolean0 = range0.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Long long0 = new Long(1226L);
      range1.equals(object3);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.429337202466295
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Range range1 = Range.of((-1586L));
      Integer integer0 = new Integer(1129);
      Object object0 = new Object();
      boolean boolean0 = range1.equals(object0);
      assertFalse(boolean0);
      
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean1 = range0.equals(range1);
      assertFalse(range0.isEmpty());
      
      Range range2 = Range.of(1205L);
      boolean boolean2 = range2.equals((Object) null);
      assertTrue(boolean2 == boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.8894594566976393
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Range.CoordinateSystem.values();
      Integer integer0 = new Integer((-2147407476));
      Range range0 = Range.of(9223372034707292161L);
      range0.getLength();
      Integer integer1 = new Integer((-2147407476));
      Integer integer2 = new Integer((-567));
      range0.split(2147483647L);
      Range range1 = Range.ofLength(1L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("&!.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.&!.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.6291078637382
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Range range1 = Range.of(4294967295L);
      range1.intersection(range0);
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.326461083331474
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967291L, 9223372036854775807L);
      Integer integer0 = new Integer((-2147415371));
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=3.815051133687925
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range range1 = Range.of((-3752L));
      range1.endsBefore(range0);
      Range range2 = range1.intersection(range0);
      assertTrue(range2.isEmpty());
      
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range range3 = Range.of((-3752L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 9986L, 2147483647L);
      range0.equals(range_CoordinateSystem0);
      Long.divideUnsigned(4294967295L, (-128L));
      range1.equals(range0);
      assertSame(range1, range3);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=4.034783164994748
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Range.Builder range_Builder0 = new Range.Builder((-4112L), (-2157L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      range_Builder1.copy();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      range1.equals(range0);
      range1.complement(range0);
      range_Builder3.copy();
      Range range2 = Range.of((long) 0);
      range0.intersection(range2);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("~iR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.~iR
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=3.5975207717540494
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Range.Builder range_Builder0 = new Range.Builder((-2157L), (-2157L));
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      int int0 = 0;
      Integer integer0 = new Integer(0);
      Integer integer1 = new Integer(0);
      Object object0 = new Object();
      range1.equals(range0);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("The second parameter in the comparison is null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.The second parameter in the comparison is null.
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.7436406829100886
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 553L, 553L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem1, 553L, 553L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      range_Builder0.expandBegin((-489L));
      Integer integer0 = new Integer(1);
      range1.equals(range_Builder2);
      String string0 = "org.jcvi.jillion.internal.core.util.JillionUtil";
      range0.complement(range1);
      // Undeclared exception!
      try { 
        range_Builder0.copy();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=3.3217462837363456
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 553L, 553L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Object object0 = new Object();
      Range range0 = Range.of(range_CoordinateSystem0, 553L, 553L);
      Object object1 = new Object();
      String string0 = null;
      range0.equals((Object) null);
      Object object2 = new Object();
      // Undeclared exception!
      try { 
        range0.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.752241316373288
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3787L), (-3787L));
      Range range1 = Range.of((-3787L));
      boolean boolean0 = range0.endsBefore(range0);
      Range range2 = range1.intersection(range0);
      boolean boolean1 = range1.startsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      Range range3 = Range.of((-3787L));
      Integer integer0 = new Integer((-1840700268));
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(range2);
      long long0 = new Long((-1840700268));
      String string0 = range2.toString();
      assertSame(range1, range3);
      assertFalse(range2.equals((Object)range0));
      assertEquals("[ -3787 .. -3788 ]/0B", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.9107604034828185
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 553L, 9223372036854775807L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Long long0 = new Long(553L);
      Long.getLong("", long0);
      Range range1 = Range.ofLength(871L);
      Consumer<Long> consumer1 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer1);
      Range.of(4294967295L, 9223372036854775807L);
      Range range2 = range0.intersection(range1);
      assertFalse(range2.isEmpty());
      
      Long long1 = new Long(4294967295L);
      Object object0 = new Object();
      Integer integer0 = new Integer(256);
      range0.equals((Object) null);
      Range.of(4294967295L);
      Range.ofLength(368L);
      Range range3 = Range.of((long) 256);
      assertFalse(range3.isEmpty());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.7398799354614027
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 553L, 553L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(553L);
      range0.equals(range1);
      Range.of(553L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 3067L, 65535L);
      Long long0 = new Long(65535L);
      range2.equals(range1);
      Range range3 = Range.of(249L);
      range2.intersection(range3);
      range1.complement(range3);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem2, 861L, (-2597L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.470302529646168
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.ofLength(553L);
      Range range0 = Range.of(553L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      Long long0 = new Long(1239L);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("I]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.I]
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=3.9556589317778332
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Range range0 = Range.of((long) (-2147407476));
      Range.Builder range_Builder0 = new Range.Builder((-2147407476), 1205L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder2 = new Range.Builder(range1);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (long) (-2147407476), 65535L);
      range0.equals((Object) null);
      Long long0 = new Long(1021L);
      range1.equals(range_Builder2);
      Range range3 = Range.of(9223372036854775095L);
      Range range4 = range2.intersection(range1);
      range3.complement(range4);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem1, 2147483647L, (-2597L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.650703368216006
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Range range0 = Range.of(4448L);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.of((-128L), (long) 7);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, 784L, 910L);
      range1.equals(range0);
      range1.equals(range_Builder0);
      Long long0 = new Long((-3379L));
      Object object0 = new Object();
      range0.equals(object0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.7438393754659645
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range range1 = Range.of((-3752L));
      range1.endsBefore(range0);
      Range range2 = range1.intersection(range0);
      boolean boolean0 = range1.startsBefore(range0);
      assertFalse(boolean0);
      
      Range.of((-3752L));
      range2.equals((Object) null);
      range2.equals(range_CoordinateSystem0);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.8763873871460133
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      boolean boolean0 = range0.endsBefore(range0);
      boolean boolean1 = range0.startsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      Range range1 = Range.of((-3752L));
      boolean boolean2 = range0.intersects(range1);
      assertFalse(range1.isEmpty());
      
      Long long0 = new Long(569L);
      range0.equals(long0);
      Long long1 = new Long(2147473662L);
      boolean boolean3 = range0.isSubRangeOf(range0);
      assertFalse(boolean3 == boolean2);
      assertFalse(range0.equals((Object)range1));
      
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 2147473662L, 2147473662L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      Range range2 = Range.of(range_CoordinateSystem2, (-3752L), 569L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=3.4446444745885296
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Range range0 = Range.of(2147483663L, 2147483663L);
      Range range1 = Range.of(2147483663L);
      Integer integer0 = new Integer(7);
      Long long0 = new Long(255L);
      range0.equals(long0);
      Long long1 = new Long(2147483663L);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer(7);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=3.697534171400334
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      Range range2 = range1.intersection(range0);
      Range.ofLength(0L);
      boolean boolean0 = range0.isSubRangeOf(range0);
      assertTrue(boolean0);
      
      Range range3 = Range.of(112L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 0L, 584L);
      boolean boolean1 = range0.equals(range4);
      Long long0 = new Long(255L);
      boolean boolean2 = range3.equals(range1);
      assertTrue(boolean2 == boolean1);
      
      Range range5 = range0.intersection(range4);
      assertFalse(range5.equals((Object)range3));
      assertFalse(range5.isEmpty());
      assertSame(range5, range0);
      assertFalse(range4.equals((Object)range2));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.9471612229305078
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Range range0 = Range.of(2147483663L, 2147483663L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      List<Range> list0 = range0.complement(range0);
      //  // Unstable assertion: assertTrue(list0.contains(range0));
      
      Range range1 = Range.ofLength(2147483663L);
      boolean boolean0 = range0.isSubRangeOf(range1);
      Range.of(1080L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, 112L, 584L);
      boolean boolean1 = range1.equals((Object) null);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      Long long0 = new Long(445L);
      Object object0 = new Object();
      range2.equals(object0);
      Range range3 = range1.intersection(range2);
      //  // Unstable assertion: assertFalse(range3.isEmpty());
      //  // Unstable assertion: assertSame(range3, range2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=3.2613657195200565
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer((-2199));
      Integer integer1 = new Integer(2645);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(integer1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.396301188920746
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Long.getLong("org.jcvi.jillion.core.Ranges", (Long) null);
      Range.ofLength(624L);
      Range range1 = Range.of(26L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals((Object) null);
      Object object2 = new Object();
      range1.equals((Object) null);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.core.Ranges");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.core.Ranges
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.2268644446946753
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Range range0 = Range.of(4448L);
      Integer integer0 = new Integer(7);
      range0.equals("byte array can not be null");
      Long long0 = new Long(7);
      Integer integer1 = new Integer(7);
      Integer integer2 = new Integer((-567));
      range0.equals(integer2);
      // Undeclared exception!
      try { 
        range0.complementFrom((Collection<Range>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.653146234295646
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      range0.complement(range0);
      // Undeclared exception!
      try { 
        range0.endsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=3.6948619578747177
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      Range range2 = range1.intersection(range0);
      assertFalse(range2.isEmpty());
      assertSame(range2, range1);
      
      boolean boolean0 = range0.isSubRangeOf(range0);
      Range range3 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range4 = Range.of(range_CoordinateSystem0, 9986L, 9986L);
      boolean boolean1 = range4.equals((Object) null);
      assertFalse(boolean1);
      
      Long long0 = new Long(259L);
      boolean boolean2 = range0.equals(range3);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=3.3269000155302577
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(2810L);
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer((-2157));
      Integer integer1 = new Integer(2035);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Integer integer2 = new Integer((-2157));
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(object2);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.139267334682442
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Range range0 = Range.of((-20L));
      Integer integer0 = new Integer((-1440));
      range0.equals(integer0);
      Integer integer1 = new Integer((-1440));
      Integer integer2 = new Integer((-1440));
      range0.equals((Object) null);
      Range.Comparators range_Comparators0 = Range.Comparators.DEPARTURE;
  }

  /**
  //Test case number: 39
  /*Coverage entropy=4.061852832125572
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      long long0 = 127L;
      long long1 = 4294967295L;
      Range range0 = Range.of(127L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(4294967295L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(1592L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.contractBegin((-14L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      Range.of((-4111L));
      Range range1 = Range.ofLength(4294967295L);
      List<Range> list0 = range0.complement(range1);
      range0.complementFrom(list0);
      Range.Builder range_Builder4 = null;
      try {
        range_Builder4 = new Range.Builder(0L, 9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=3.422480155336859
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 9223372036854775807L, (-2640L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -2641 would make range [9223372036854775806 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=3.8470798305326124
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 553L, 553L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range1 = Range.of(553L);
      Range range2 = Range.of(553L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      range2.equals(object1);
      Object object2 = new Object();
      range0.complement(range2);
      Object object3 = new Object();
      Object object4 = new Object();
      range0.equals(range_CoordinateSystem0);
      Long long0 = new Long(1226L);
      range1.equals((Object) null);
      //  // Unstable assertion: assertTrue(range1.isEmpty());
      
      Range range3 = range0.intersection(range2);
      //  // Unstable assertion: assertFalse(range2.isEmpty());
      //  // Unstable assertion: assertTrue(range3.equals((Object)range1));
  }

  /**
  //Test case number: 42
  /*Coverage entropy=4.066626232970671
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of(4294967295L, 4294967295L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.contractBegin((-2874L));
      Range range2 = Range.of((-2874L));
      Range.Builder range_Builder2 = new Range.Builder(1L, 127L);
      range_Builder2.build();
      range_Builder0.expandBegin(553L);
      range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder3 = new Range.Builder(range_CoordinateSystem0, 652L, 1873L);
      range_Builder1.expandEnd(2873L);
      Range.Builder range_Builder4 = new Range.Builder(range_Builder3);
      List<Range> list0 = range1.complement(range2);
      assertTrue(list0.contains(range0));
      
      Range range3 = Range.ofLength(65535L);
      assertFalse(range3.isEmpty());
      
      Range range4 = range2.intersection(range1);
      assertTrue(range4.isEmpty());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=3.6954186213280003
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Long long0 = new Long(1055L);
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.ofLength(4294967295L);
      Consumer<Object> consumer1 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range2 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      range1.equals(consumer1);
      assertFalse(range1.isEmpty());
      assertFalse(range1.equals((Object)range2));
      
      Object object2 = new Object();
      boolean boolean0 = range0.equals("org.jcvi.jillion.core.Ranges");
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=3.822508325957137
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = range_Builder1.contractBegin((-2874L));
      range_Builder0.build();
      Object object0 = new Object();
      Range.Builder range_Builder3 = new Range.Builder(9223372036854775807L, (-274L));
      Range.Builder range_Builder4 = new Range.Builder(range_Builder2);
      range_Builder2.build();
      Range.Builder range_Builder5 = range_Builder4.expandEnd(1941L);
      Range.Builder range_Builder6 = range_Builder5.copy();
      range_Builder6.build();
      Range range1 = range_Builder0.build();
      Range.of(549L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      range1.getBegin(range_CoordinateSystem0);
      // Undeclared exception!
      range1.split(549L);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=3.1860594162939453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Long long0 = new Long(1024L);
      Long.getLong("", long0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range0 = Range.of((-32768L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.9587108951744114
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = Range.of((-2853L), (-2853L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      range1.startsBefore(range2);
      linkedList0.offerFirst(range2);
      linkedList0.offerFirst(range1);
      range0.getEnd();
      range2.getEnd();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList0.add(range0);
      range2.complementFrom(linkedList0);
      range2.complement(range2);
      range0.getLength();
      long long0 = (-3139L);
      long long1 = 1100L;
      Range.Builder range_Builder1 = null;
      try {
        range_Builder1 = new Range.Builder(1100L, (-2853L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.8225882298399805
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range.of(0L);
      Range range0 = Range.of(0L);
      Range.ofLength(0L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      long long0 = range0.getEnd();
      assertEquals(0L, long0);
      
      range0.getLength();
      Range range1 = range_Builder1.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1316L);
      range_Builder1.build();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of(1L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range range2 = range_Builder2.build();
      assertSame(range2, range1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=3.448019630908292
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Long long0 = new Long(1055L);
      Long.compareUnsigned(2147483647L, (-2816L));
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-2156L), long1);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.5100772805713656
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range.of(0L);
      Integer integer0 = new Integer(64);
      Range range1 = Range.of(0L);
      boolean boolean0 = range1.equals((Object) null);
      assertFalse(boolean0);
      
      Long long0 = new Long(0L);
      Integer integer1 = new Integer(64);
      Integer integer2 = new Integer((-567));
      Integer integer3 = new Integer((-567));
      range1.equals(integer3);
      assertSame(range1, range0);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.608599660761584
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Range.of((long) (-2147407476));
      Range range0 = Range.of((-1122L), 2147483647L);
      range0.intersection(range0);
      Object object0 = new Object();
      range0.equals(range0);
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
  }

  /**
  //Test case number: 51
  /*Coverage entropy=4.012107621304746
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Range range0 = Range.of(259L);
      Range range1 = Range.of((-4034L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(259L);
      range1.startsBefore(range2);
      range2.isSubRangeOf(range1);
      //  // Unstable assertion: assertTrue(range2.isEmpty());
      
      Range range4 = Range.of(255L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range5 = Range.of(range_CoordinateSystem0, (-4881L), 259L);
      boolean boolean0 = range5.startsBefore(range0);
      Long long0 = new Long(112L);
      boolean boolean1 = range3.equals(range4);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      Range range6 = range0.intersection(range3);
      //  // Unstable assertion: assertFalse(range6.isEmpty());
      //  // Unstable assertion: assertNotSame(range6, range0);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=3.7678030500358592
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Range range0 = Range.of(22L, 22L);
      Range range1 = Range.of(22L);
      Range range2 = Range.ofLength(22L);
      boolean boolean0 = range0.startsBefore(range2);
      assertFalse(range2.isEmpty());
      
      boolean boolean1 = range0.isSubRangeOf(range0);
      assertTrue(boolean1);
      
      Range range3 = Range.of(112L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 259L, 584L);
      range0.endsBefore(range0);
      boolean boolean2 = range3.equals(range1);
      assertTrue(boolean2 == boolean0);
      
      Range range4 = range0.intersection(range1);
      assertFalse(range4.isEmpty());
      assertSame(range4, range0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.616430063254428
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Long long0 = new Long((-2157L));
      Long.remainderUnsigned((-2157L), (-2157L));
      Long.compareUnsigned((-2157L), (-2184L));
      Long.getLong("DK'");
      Long long1 = new Long((-2184L));
      Long.getLong("Jv~eg=C|b%@m`b![J", long1);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      // Undeclared exception!
      try { 
        Range.of(9223372036854775553L, (-1923L));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // given length -1923 would make range [9223372036854775553 - ? ] beyond max allowed end offset
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=4.0270652910378555
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1330L), (-1330L));
      Range range0 = Range.of(1L, 2658L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      range0.getEnd();
      long long0 = range0.getEnd();
      assertEquals(2658L, long0);
      
      linkedList0.add(range0);
      List<Range> list0 = range0.complementFrom(linkedList0);
      range0.getLength();
      Range range1 = range_Builder0.build();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      range1.complementFrom(linkedList1);
      boolean boolean0 = range1.equals(list0);
      assertFalse(boolean0);
      assertEquals(0, list0.size());
      
      List<Range> list1 = range1.complement(range0);
      assertTrue(list1.contains(range1));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=3.928339007226951
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, (-1330L), (-1330L));
      Range range0 = Range.of(1L, 2658L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range.of((-1330L));
      Range range1 = Range.of((-1L));
      range1.intersection(range0);
      Range.Builder range_Builder1 = new Range.Builder(range1);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      Range range2 = range_Builder2.build();
      Long long0 = new Long((-1232L));
      boolean boolean0 = range1.isSubRangeOf(range0);
      assertFalse(range1.isEmpty());
      assertSame(range1, range2);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=3.924849852793101
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Range range0 = Range.of(32786L, 32786L);
      Range range1 = range0.asRange();
      Range.of(0L);
      Range range2 = Range.of(0L);
      range0.equals(range1);
      range0.complement(range2);
      Range.of(0L);
      range0.endsBefore(range2);
      long long0 = 65535L;
      Range range3 = Range.of(65535L);
      range0.intersection(range2);
      Range.of(0L, 0L);
      Range.of(32786L, 9223372036854773478L);
      range1.intersects(range3);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        linkedList0.add(1061, range2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1061, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.5971238937443886
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      range1.equals(range0);
      Range.of(3077L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 259L, 108L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=4.07958305710112
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Long long0 = new Long(1055L);
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Range range1 = Range.ofLength(4294967295L);
      long long1 = range1.getLength();
      assertEquals(4294967295L, long1);
      
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range2 = Range.ofLength(1055L);
      Range range3 = range2.intersection(range0);
      Long long2 = new Long((-4294967294L));
      Object object0 = new Object();
      Integer integer0 = new Integer((-129));
      range3.equals(integer0);
      assertTrue(range3.isEmpty());
      assertFalse(range2.isEmpty());
      
      Range range4 = Range.of((-1600L), 32767L);
      assertNotSame(range4, range0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.355245540750526
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      range0.split(2147483664L);
      Long long0 = new Long(0L);
      range0.equals(long0);
      Range.Builder range_Builder0 = new Range.Builder(2147483664L);
      range_Builder0.expandEnd(0L);
      Range range1 = range_Builder0.build();
      // Undeclared exception!
      try { 
        range1.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.3127787005250524
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      long long0 = 1350L;
      Integer integer0 = new Integer((-1440));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1350L, 2147483647L);
      range0.equals(integer0);
      Long long1 = new Long((-1440));
      // Undeclared exception!
      try { 
        range0.isSubRangeOf((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.753349994178044
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractEnd(1896L);
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder1.copy();
      Range.Builder range_Builder3 = null;
      try {
        range_Builder3 = new Range.Builder(372L, 339L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=3.783461028883284
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Range range0 = Range.of(22L, 22L);
      Range range1 = Range.of(22L);
      Range range2 = Range.ofLength(22L);
      boolean boolean0 = range0.startsBefore(range2);
      assertFalse(range2.isEmpty());
      
      range0.isSubRangeOf(range0);
      Range.of(112L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range3 = Range.of(range_CoordinateSystem0, 259L, 584L);
      boolean boolean1 = range0.endsBefore(range0);
      assertTrue(boolean1 == boolean0);
      
      range3.intersects(range1);
      Range range4 = range0.intersection(range1);
      assertSame(range4, range1);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 63
  /*Coverage entropy=4.048970038239613
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(0L);
      range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      range0.startsBefore(range1);
      Range.of(127L);
      Range.of((-1669L), 0L);
      long long0 = 4294967295L;
      Range.of(0L, 4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, (-1669L), 4294967295L);
      Range range3 = Range.of((-2147483647L), 4294967295L);
      range2.isSubRangeOf(range3);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null, range_CoordinateSystem2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.916933897956829
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range0.complement(range1);
      Range range2 = Range.of((-2147483648L), 921L);
      range2.getBegin();
      long long0 = 4577L;
      Range range3 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=4.001963195581777
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 0L, 3153L);
      Range range1 = Range.of(3153L, 3153L);
      Range range2 = Range.ofLength(9223372036854772363L);
      range0.startsBefore(range2);
      Range range3 = range0.intersection(range1);
      range0.toString(range_CoordinateSystem0);
      range0.startsBefore(range1);
      Range range4 = Range.of(127L);
      Range range5 = Range.parseRange("[ 0 .. 3153 ]/SB", range_CoordinateSystem0);
      range1.toString(range_CoordinateSystem0);
      range5.isSubRangeOf(range3);
      range2.complement(range4);
      range2.getBegin();
      range1.toString();
      // Undeclared exception!
      try { 
        Range.of((Range.CoordinateSystem) null, 2725L, 3153L);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // CoordinateSystem can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=3.9453670018692883
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.ofLength(3769L);
      range1.startsBefore(range0);
      Range range2 = range1.intersection(range0);
      range0.startsBefore(range1);
      Range.of(127L);
      Range range3 = Range.of((-1669L), 3769L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      long long0 = 4294967295L;
      Range.of(0L, 4294967295L);
      range3.complementFrom(linkedList0);
      long long1 = 255L;
      Range range4 = Range.of((-2147483647L), 255L);
      range2.isSubRangeOf(range4);
      // Undeclared exception!
      try { 
        linkedList0.add(2809, range0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2809, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=3.1392673346824425
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Long long0 = new Long(2147483647L);
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(9223372036854765822L);
      Object object0 = new Object();
      Object object1 = new Object();
      range0.equals(object1);
      Object object2 = new Object();
      assertFalse(object2.equals((Object)object1));
  }

  /**
  //Test case number: 68
  /*Coverage entropy=3.8450204227787217
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Range range0 = Range.of(32767L, 32767L);
      Range range1 = Range.of(32767L);
      Range range2 = Range.of(32767L);
      range1.intersection(range0);
      range2.intersects(range1);
      range1.complement(range2);
      Range.of(4086L);
      // Undeclared exception!
      try { 
        Range.parseRange("ZM!wM%t&Ez.@Qa6hWL6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse ZM!wM%t&Ez.@Qa6hWL6 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.922624767510655
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Range.of((-2157L));
      Long long0 = new Long((-2157L));
      Long.remainderUnsigned((-2157L), (-2157L));
      Range range0 = Range.of(65535L);
      Range.ofLength(2844L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range0.getLength();
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, 65535L, 65535L);
      range_Builder0.build();
      Range.Builder range_Builder1 = new Range.Builder((-4460L), 1L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder1.shift((-4460L));
      Range.Builder range_Builder3 = new Range.Builder(range0);
      range_Builder3.build();
      Range.Builder range_Builder4 = new Range.Builder((-611L), 2844L);
      Range.Builder range_Builder5 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder6 = new Range.Builder();
      Range.Builder range_Builder7 = new Range.Builder(range_Builder6);
      range_Builder1.copy();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Name is null
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.6739666546362306
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Range range0 = Range.of(2147483664L, 2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractBegin((-2874L));
      range_Builder0.expandBegin(0L);
      assertFalse(range0.isEmpty());
      
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder1 = new Range.Builder(range_CoordinateSystem0, 0L, 0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range range1 = Range.ofLength(0L);
      boolean boolean0 = range1.isEmpty();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=3.575524228960468
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.ofLength(4294967297L);
      Range range1 = Range.of(4294967297L);
      Range range2 = range1.intersection(range0);
      range2.complement(range0);
      Object object0 = new Object();
      boolean boolean0 = range0.intersects(range2);
      Object object1 = new Object();
      boolean boolean1 = range2.equals(object1);
      assertFalse(range1.isEmpty());
      assertTrue(range2.isEmpty());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 72
  /*Coverage entropy=3.241711887398469
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-128L));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range0.getEnd(range_CoordinateSystem0);
      assertEquals((-127L), long0);
      
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = range0.getBegin(range_CoordinateSystem1);
      assertEquals((-128L), long1);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=3.953980770076822
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 0L, (-2147483648L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=3.6994059125876233
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Range.CoordinateSystem.values();
      long long0 = 9223372036854775807L;
      Range range0 = Range.of(9223372036854775807L);
      range0.toString();
      Range range1 = Range.parseRange("[ 9223372036854775807 .. 9223372036854775807 ]/0B");
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 9223372036854775807L, 9223372036854775807L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      range_CoordinateSystem2.toString();
      range2.intersection(range1);
      range2.toString(range_CoordinateSystem2);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, (-2509L));
      // Undeclared exception!
      try { 
        range0.intersects((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=3.1651294905433627
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Range range0 = Range.of((-48L));
      Integer integer0 = new Integer((-1440));
      Integer integer1 = new Integer((-1440));
      range0.equals(integer1);
      Long.valueOf((-48L));
      Long long0 = new Long((-1440));
      Integer integer2 = new Integer((-1440));
      Integer integer3 = new Integer(1941);
      assertFalse(integer3.equals((Object)integer1));
  }

  /**
  //Test case number: 76
  /*Coverage entropy=3.577691353972052
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Integer integer0 = new Integer((-2199));
      Integer integer1 = new Integer(2645);
      Object object0 = new Object();
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Integer integer2 = new Integer((-2147450190));
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem0, (-254L), (-254L));
      Range range0 = Range.of((long) (-2147450190), (-254L));
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=4.011714769433426
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-2147483681L), (-2147483681L));
      Object object0 = new Object();
      Object object1 = new Object();
      range0.complement(range1);
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Long long0 = new Long(1226L);
      range1.equals(object3);
      Range range2 = range1.intersection(range0);
      range2.iterator();
      Range range3 = range0.asRange();
      assertFalse(range3.equals((Object)range2));
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.6893114299693126
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      Range range2 = range1.intersection(range0);
      range2.startsBefore(range1);
      range0.isSubRangeOf(range0);
      Range range3 = Range.of(112L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 259L, 584L);
      boolean boolean0 = range3.startsBefore(range2);
      assertFalse(boolean0);
      
      Long long0 = new Long(255L);
      Range range4 = range0.intersection(range2);
      assertSame(range2, range1);
      assertNotSame(range4, range3);
      assertFalse(range4.isEmpty());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=3.667802242649689
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = Range.of((-2853L));
      Range range3 = Range.of((-2097L));
      Range range4 = range3.intersection(range1);
      assertFalse(range3.isEmpty());
      assertTrue(range4.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder0.expandBegin((-2097L));
      Range.Builder range_Builder2 = new Range.Builder();
      range_Builder2.build();
      Long long0 = new Long((-2097L));
      boolean boolean0 = range2.isSubRangeOf(range1);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=3.2838685127595846
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1361L, 4460L);
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer((-949));
      Integer integer1 = new Integer((-949));
      range0.equals("org.jcvi.jillion.core.Range$UnsignedByteStartIntLengthRange");
      Long long0 = new Long((-1124L));
      Integer integer2 = new Integer((-2130706431));
      Integer integer3 = new Integer(587);
      assertFalse(integer3.equals((Object)integer1));
  }

  /**
  //Test case number: 81
  /*Coverage entropy=3.2158154900383082
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      range0.split(2147483664L);
      long long0 = 0L;
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      range0.getEnd(range_CoordinateSystem0);
      range_CoordinateSystem0.getAbbreviatedName();
      try { 
        Long.parseUnsignedLong("j?$[58L~6C)H>'>");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"j?$[58L~6C)H>'>\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.947525072226388
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      Object object0 = new Object();
      range0.equals(object0);
      Object object1 = new Object();
      List<Range> list0 = range0.complement(range1);
      assertTrue(list0.contains(range0));
      
      Object object2 = new Object();
      Object object3 = new Object();
      range1.equals(object3);
      Long long0 = new Long(1226L);
      boolean boolean0 = range1.equals(object3);
      assertFalse(boolean0);
      
      range1.intersection(range0);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=3.1521629584690243
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(range0.isEmpty());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=3.3404630968646387
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.of(256L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=3.8602317156353507
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      long long0 = 4294967295L;
      Range range0 = Range.of(4294967295L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-6998L), (-229L));
      range0.endsBefore(range1);
      Range range2 = Range.of((-6998L), 4294967295L);
      range0.intersects(range2);
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(4294967295L, 4294967295L);
      // Undeclared exception!
      try { 
        range_Builder1.contractEnd(4294967295L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=3.833229507053634
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Range range0 = Range.of(713L);
      Range range1 = Range.of(4294967342L, 4294967342L);
      boolean boolean0 = range1.endsBefore(range1);
      Long long0 = new Long(713L);
      Object object0 = new Object();
      Range range2 = Range.of((long) long0, 4294967342L);
      Range range3 = Range.of(4294967342L, 4294967342L);
      Range range4 = Range.ofLength(4294967342L);
      assertFalse(range4.isEmpty());
      
      boolean boolean1 = range2.startsBefore(range0);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      
      Range range5 = Range.ofLength(713L);
      range1.isSubRangeOf(range5);
      assertFalse(range5.isEmpty());
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      boolean boolean2 = range2.startsBefore(range3);
      assertFalse(boolean2 == boolean0);
      
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range range6 = range_Builder2.build();
      Range range7 = range_Builder0.build();
      assertSame(range2, range6);
      assertSame(range7, range2);
  }

  /**
  //Test case number: 87
  /*Coverage entropy=3.873027265680436
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(0L, 0L);
      Range range0 = Range.of(0L);
      long long0 = range0.getBegin();
      assertEquals(0L, long0);
      
      Range range1 = Range.of(0L);
      Range range2 = Range.ofLength(0L);
      assertTrue(range2.isEmpty());
      
      long long1 = range1.getLength();
      assertEquals(1L, long1);
      
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 0L, 1316L);
      Range.Builder range_Builder1 = new Range.Builder(0L, 0L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      Range range3 = range_Builder0.build();
      assertSame(range3, range1);
  }

  /**
  //Test case number: 88
  /*Coverage entropy=3.712105229334494
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Range range0 = Range.of((-48L));
      Range.of((-48L), 4294967295L);
      Long.getLong("");
      Long long0 = new Long((-48L));
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Consumer<Long> consumer0 = (Consumer<Long>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      long long1 = 4294967326L;
      long long2 = 9223372036854775255L;
      Range.of(4294967326L, 9223372036854775255L);
      Integer integer0 = new Integer(334);
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf(",F E\"9I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.,F E\"9I
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=3.681132340076725
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.of((-2316L), 2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      assertFalse(range_Builder1.equals((Object)range_Builder0));
  }

  /**
  //Test case number: 90
  /*Coverage entropy=3.5541142531025223
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Range range0 = Range.of((-20L));
      Integer integer0 = new Integer((-1440));
      Range.Builder range_Builder0 = new Range.Builder(range0);
      range_Builder0.contractEnd((-20L));
      Range.Builder range_Builder1 = range_Builder0.shift((-20L));
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.copy();
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.597984120841252
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Range.of((-2157L));
      Long long0 = new Long((-2157L));
      Long.getLong("");
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Range.Builder range_Builder0 = new Range.Builder();
      range_Builder0.copy();
      Range.Builder range_Builder1 = new Range.Builder((-1236L), 961L);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      range_Builder2.copy();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder2.copy();
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("Uf#U~=il0>/ZJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.Uf#U~=il0>/ZJ
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=3.2691345039275346
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      long long0 = 0L;
      Range.Builder range_Builder1 = new Range.Builder(range0);
      // Undeclared exception!
      try { 
        range_Builder1.contractBegin(9223372036854775807L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=3.5787669958421615
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775794L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(255L);
      range_Builder1.shift(9223372036854775794L);
      Integer integer0 = new Integer((-2147407480));
      Long long0 = new Long((-1893L));
      Range range0 = range_Builder0.build();
      Range.Builder range_Builder2 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder1);
      Range range1 = range0.asRange();
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=3.6030263709990606
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Range range0 = Range.of((-20L));
      Range range1 = Range.of((-20L));
      Range range2 = range0.intersection(range1);
      Range range3 = Range.ofLength(3770L);
      range3.intersects(range2);
      Range range4 = Range.of(2147483647L);
      range1.startsBefore(range4);
      Range range5 = Range.ofLength(3770L);
      // Undeclared exception!
      try { 
        range5.complement((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.8396567422039016
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range range0 = Range.of((-148L));
      Range range1 = Range.of(4294967295L, 4294967295L);
      range0.intersection(range1);
      range0.spliterator();
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      // Undeclared exception!
      try { 
        range0.intersection((Range) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Range used in intersection operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      long long0 = 514L;
      // Undeclared exception!
      try { 
        Range.parseRange((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.7562436533001553
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      range2.intersects(range1);
      range2.getBegin();
      range2.startsBefore(range1);
      range2.complement(range1);
      Long long0 = new Long(1L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.387294299601126
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(1024L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range range0 = range_Builder1.build();
      Object object0 = new Object();
      Object object1 = new Object();
      Object object2 = new Object();
      boolean boolean0 = range0.equals(range_Builder1);
      assertFalse(boolean0);
      assertFalse(range0.isEmpty());
  }

  /**
  //Test case number: 99
  /*Coverage entropy=3.6278916517396316
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      boolean boolean0 = range2.intersects(range1);
      assertTrue(boolean0);
      
      range2.startsBefore(range1);
      range1.split(1L);
      Long long0 = new Long(1L);
      boolean boolean1 = range2.isSubRangeOf(range1);
      assertTrue(boolean1);
      assertSame(range2, range0);
  }

  /**
  //Test case number: 100
  /*Coverage entropy=3.2577903234896874
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(65535L, 2147483647L);
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer((-2147411812));
      Integer integer1 = new Integer(2362);
      range0.equals(range_Builder0);
      Long long0 = new Long(4294967296L);
      Integer integer2 = new Integer((-2147066416));
      Integer integer3 = new Integer((-3272));
      assertFalse(integer3.equals((Object)integer2));
  }

  /**
  //Test case number: 101
  /*Coverage entropy=3.789919586308797
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Range range0 = Range.of(0L, 0L);
      Range range1 = Range.of(0L);
      Range range2 = range1.intersection(range0);
      Range range3 = Range.of(127L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem0, 9986L, 9986L);
      List<Range> list0 = range1.complement(range3);
      List<Range> list1 = range2.complementFrom(list0);
      assertFalse(list1.equals((Object)list0));
      assertSame(range2, range0);
      assertEquals(1, list0.size());
  }

  /**
  //Test case number: 102
  /*Coverage entropy=3.1839496223518067
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Long long0 = new Long(0L);
      Range range0 = Range.of(256L);
      range0.getEnd();
      range0.split(897L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=3.1825257970077154
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Integer integer0 = new Integer(2362);
      Long long0 = new Long(2362);
      Range range0 = Range.of(65535L);
      List<Range> list0 = range0.split(6442450977L);
      assertFalse(list0.isEmpty());
  }

  /**
  //Test case number: 104
  /*Coverage entropy=3.408385208188493
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Range range0 = Range.of((-2157L), (-2157L));
      // Undeclared exception!
      try { 
        range0.split((-2157L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // max splitLength must be >= 1
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=3.667821739170744
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(2966L, 9223372036854775807L);
      Object object0 = new Object();
      Object object1 = new Object();
      Range range1 = range0.intersection(range0);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.add(range1);
      range0.complementFrom(linkedList0);
      assertTrue(linkedList0.contains(range0));
  }

  /**
  //Test case number: 106
  /*Coverage entropy=4.003392765579467
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Range range0 = Range.of(2147483664L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      range_Builder1.contractBegin((-2874L));
      range_Builder0.build();
      range_Builder0.build();
      range_Builder1.expandBegin(0L);
      Range range1 = range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder2 = new Range.Builder(range_CoordinateSystem0, 0L, 1283L);
      range_Builder0.expandEnd(2147483663L);
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      List<Range> list0 = range1.complement(range0);
      assertEquals(2, list0.size());
      
      Range range2 = Range.ofLength(1283L);
      Range range3 = range1.intersection(range2);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      long long0 = range2.getBegin(range_CoordinateSystem1);
      assertSame(range2, range3);
      assertEquals(0L, long0);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 107
  /*Coverage entropy=3.2166993796228414
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Long long0 = new Long(1055L);
      Integer integer0 = new Integer((-4560));
      Object object0 = new Object();
      range0.equals(object0);
      Long long1 = new Long((-4560));
      Object object1 = new Object();
      Integer integer1 = new Integer((-4560));
      boolean boolean0 = range0.equals(long1);
      assertFalse(boolean0);
      
      Integer integer2 = new Integer(3);
      boolean boolean1 = range0.equals((Object) null);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=3.7280115938707903
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 0L;
      Range range0 = Range.of(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = 1785L;
      Range range1 = Range.of(range_CoordinateSystem0, 1785L, 1785L);
      range1.toString(range_CoordinateSystem0);
      Object object0 = new Object();
      range0.isEmpty();
      Range range2 = Range.parseRange("[ 1785 .. 1785 ]/0B");
      range1.startsBefore(range2);
      Range.Builder range_Builder0 = new Range.Builder(1785L);
      long long2 = 1043L;
      range_Builder0.expandEnd(1043L);
      range0.intersects(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.SPACE_BASED;
      range0.equals(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.parseRange("cu:y I1t57", range_CoordinateSystem1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse cu:y I1t57 into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=3.581921383724106
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Range range0 = Range.of(2147483669L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(2147483669L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      range_Builder2.expandBegin(0L);
      Range range1 = range_Builder1.build();
      boolean boolean0 = range0.isEmpty();
      Long long0 = new Long(9223372036854775807L);
      boolean boolean1 = range1.isSubRangeOf(range0);
      assertTrue(boolean1 == boolean0);
      
      Range range2 = Range.of(255L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.3628719553445716
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long0 = (-3752L);
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem1);
      Range.Comparators range_Comparators0 = Range.Comparators.LONGEST_TO_SHORTEST;
      Range.CoordinateSystem.values();
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.SPACE_BASED;
      long long1 = (-1645L);
      Range.of(range_CoordinateSystem2, (-3752L), (-1645L));
      Range range1 = null;
      // Undeclared exception!
      try { 
        range0.startsBefore((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null Range used in range comparison operation.
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=3.3220462778038224
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 1L, 3066L);
      range0.getEnd(range_CoordinateSystem0);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=3.3355333968737
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer((-2199));
      Integer integer1 = new Integer((-2147450878));
      Object object0 = new Object();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Integer integer2 = new Integer(2142454412);
      range_Builder0.expandBegin(552L);
      Object object1 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long0 = range0.getBegin(range_CoordinateSystem0);
      assertFalse(range0.isEmpty());
      assertEquals(1L, long0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=3.06633045170451
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer((-948));
      Integer integer1 = new Integer(2144802644);
      Object object0 = new Object();
      Long.divideUnsigned((-1L), 180L);
      long long0 = new Long(102481911520608620L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      long long1 = range0.getEnd(range_CoordinateSystem0);
      assertTrue(range0.isEmpty());
      assertEquals(0L, long1);
  }

  /**
  //Test case number: 114
  /*Coverage entropy=3.810960193419361
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Range.Comparators.values();
      long long0 = 0L;
      Range.ofLength(0L);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      long long1 = (-210L);
      Range.of(range_CoordinateSystem0, (-210L), 1785L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range0 = Range.ofLength(1785L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.ZERO_BASED;
      range0.toString(range_CoordinateSystem2);
      Object object0 = new Object();
      Range range1 = Range.parseRange("[ 0 .. 1784 ]/0B", range_CoordinateSystem1);
      range1.equals("[ 0 .. 1784 ]/0B");
      // Undeclared exception!
      try { 
        Range.Comparators.valueOf("[ 0 .. 1784 ]/0B");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.Comparators.[ 0 .. 1784 ]/0B
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=3.404501751309648
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range.CoordinateSystem.values();
      Range.of(range_CoordinateSystem0, (-3752L), (-1645L));
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-3752L), 1624L);
      Range.CoordinateSystem range_CoordinateSystem2 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem2, (-3752L), 119L);
      Long long0 = new Long(1624L);
      Range.CoordinateSystem range_CoordinateSystem3 = Range.CoordinateSystem.SPACE_BASED;
      Range.of(range_CoordinateSystem3, (-9223372036854775808L), (-3752L));
      Range.CoordinateSystem range_CoordinateSystem4 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem4, (-128L), (-1645L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 116
  /*Coverage entropy=3.837496572237425
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Range range0 = Range.of(713L);
      Range range1 = Range.of(4294967328L, 4294967328L);
      boolean boolean0 = range1.endsBefore(range1);
      Long long0 = new Long(713L);
      Object object0 = new Object();
      Range range2 = Range.of((long) long0, 4294967328L);
      Range.of(32767L);
      Range range3 = Range.ofLength(4294967328L);
      assertFalse(range3.isEmpty());
      
      boolean boolean1 = range2.startsBefore(range0);
      assertFalse(boolean1);
      assertFalse(range0.isEmpty());
      
      Range range4 = Range.ofLength(713L);
      boolean boolean2 = range1.isSubRangeOf(range4);
      assertTrue(boolean2 == boolean0);
      
      Range.Builder range_Builder0 = new Range.Builder(range2);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder(range2);
      Range range5 = range_Builder2.build();
      assertSame(range5, range2);
  }

  /**
  //Test case number: 117
  /*Coverage entropy=3.383336531722156
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder((-2157L), 2147483647L);
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer((-2146891237));
      Integer integer1 = new Integer((-2147411812));
      range0.equals(range_Builder0);
      Long long0 = new Long(2362);
      Integer integer2 = new Integer((-96));
      Integer integer3 = new Integer(2675);
      assertFalse(integer3.equals((Object)integer0));
  }

  /**
  //Test case number: 118
  /*Coverage entropy=3.82602181676269
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Range range1 = range_Builder0.build();
      Range range2 = Range.of((-2853L), (-2853L));
      Range range3 = Range.of((-2097L));
      Range range4 = range3.intersection(range3);
      assertSame(range4, range3);
      assertFalse(range4.isEmpty());
      
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder(range_Builder1);
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder3.build();
      Long long0 = new Long((-2097L));
      range2.isSubRangeOf(range1);
      assertTrue(range1.isEmpty());
  }

  /**
  //Test case number: 119
  /*Coverage entropy=2.267949945418531
  */
  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range.Builder range_Builder0 = new Range.Builder(range_CoordinateSystem0, 9223372036854775807L, 9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      // Undeclared exception!
      try { 
        range_Builder1.build();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 120
  /*Coverage entropy=3.1961168350995233
  */
  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.build();
      range_Builder0.expandBegin((-128L));
      String string0 = "`Av4G,";
      // Undeclared exception!
      try { 
        Range.parseRange("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse  into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 121
  /*Coverage entropy=3.4754353767904087
  */
  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 514L, 514L);
      long long0 = 65595L;
      Range range1 = Range.of(514L, 65595L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      range0.intersects(range1);
      Range.of(range_CoordinateSystem1, 1161L, 65595L);
      // Undeclared exception!
      try { 
        Range.ofLength((-4112L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 122
  /*Coverage entropy=3.4355066231116167
  */
  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Range range0 = Range.of(1L);
      Range range1 = Range.of(1L);
      Range range2 = range0.intersection(range1);
      range0.spliterator();
      range2.intersects(range1);
      range2.startsBefore(range1);
      range0.isSubRangeOf(range1);
      range1.startsBefore(range2);
      Range.Comparators.values();
      range1.toString();
      range0.isEmpty();
      Range.CoordinateSystem.values();
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("~JE~1D#7M%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.~JE~1D#7M%
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 123
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      long long0 = (-32768L);
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((-32768L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 124
  /*Coverage entropy=2.6488041417305412
  */
  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = new Range.Builder(range_Builder0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      range_Builder1.expandEnd(2147483663L);
      // Undeclared exception!
      try { 
        range_Builder3.contractEnd(2147483663L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 125
  /*Coverage entropy=2.5168760810714366
  */
  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range.Builder range_Builder1 = new Range.Builder(4224L, 4224L);
      // Undeclared exception!
      try { 
        range_Builder0.contractBegin(4224L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 126
  /*Coverage entropy=3.9318481479690215
  */
  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      boolean boolean0 = range0.endsBefore(range0);
      range0.startsBefore(range0);
      Range range1 = Range.of((-3752L));
      boolean boolean1 = range0.intersects(range1);
      Long long0 = new Long(569L);
      boolean boolean2 = range1.endsBefore(range1);
      assertFalse(boolean2 == boolean0);
      
      Long long1 = new Long(2147473662L);
      boolean boolean3 = range0.isSubRangeOf(range0);
      assertFalse(boolean3 == boolean1);
      
      Range.Builder range_Builder0 = new Range.Builder(range0);
      Range.Builder range_Builder1 = range_Builder0.expandEnd(2147473662L);
      range_Builder1.copy();
      range_Builder1.build();
      assertFalse(range0.equals((Object)range1));
  }

  /**
  //Test case number: 127
  /*Coverage entropy=3.611560269785174
  */
  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, (-3752L), (-3752L));
      boolean boolean0 = range0.endsBefore(range0);
      Range range1 = range0.intersection(range0);
      boolean boolean1 = range0.startsBefore(range0);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = range0.intersects(range0);
      assertFalse(boolean2);
      
      Long long0 = new Long(2147473662L);
      range1.isSubRangeOf(range0);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem1, 2147473662L, 2147473662L);
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 128
  /*Coverage entropy=3.770464089536606
  */
  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      Long long0 = new Long((-2157L));
      Long.remainderUnsigned((-2157L), (-2157L));
      Long.compareUnsigned(0L, (-2157L));
      Long.getLong("");
      Long.getLong("org.jcvi.jillion.core.Ranges", (Long) null);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      Range range1 = Range.of(0L, (long) (-1));
      assertTrue(range1.isEmpty());
      
      Range range2 = Range.of((-2157L));
      assertFalse(range2.isEmpty());
  }

  /**
  //Test case number: 129
  /*Coverage entropy=3.485672651603057
  */
  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.SPACE_BASED;
      Range range0 = Range.of(range_CoordinateSystem0, 553L, 553L);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      Range range1 = Range.of(9223372036854772057L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 130
  /*Coverage entropy=3.8072257252670116
  */
  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Range range0 = Range.of(2147483687L, 2147483687L);
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range range1 = Range.of(2147483687L);
      List<Range> list0 = range0.complement(range1);
      range1.complementFrom(list0);
      Range.Builder range_Builder1 = new Range.Builder(range0);
      Range.Builder range_Builder2 = new Range.Builder();
      Range.Builder range_Builder3 = new Range.Builder(range_Builder2);
      // Undeclared exception!
      try { 
        range_Builder3.contractEnd(2147483687L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 131
  /*Coverage entropy=3.926786072220737
  */
  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Range range0 = Range.of(1643L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range0.complement(range1);
      Range.of((-2147483648L), 921L);
      long long0 = new Long((-2147483648L));
      long long1 = 4577L;
      Range range2 = null;
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder((Range) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // range can not be null
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 132
  /*Coverage entropy=3.414331766225351
  */
  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Range range0 = Range.of(4448L);
      Integer integer0 = new Integer(7);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      range0.forEach(consumer0);
      range0.intersection(range0);
      Long long0 = new Long(6212L);
      Integer integer1 = new Integer(2049870754);
      assertEquals(2049870754, (int)integer1);
  }

  /**
  //Test case number: 133
  /*Coverage entropy=3.5002767629080385
  */
  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range range0 = Range.of(4294967295L, 9223372036854775807L);
      Range range1 = Range.of(255L);
      assertFalse(range1.equals((Object)range0));
  }

  /**
  //Test case number: 134
  /*Coverage entropy=3.296118686193898
  */
  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range.of(range_CoordinateSystem0, 514L, 514L);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, 1L, 65595L);
      // Undeclared exception!
      try { 
        Range.CoordinateSystem.valueOf("org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // No enum constant org.jcvi.jillion.core.Range.CoordinateSystem.org.jcvi.jillion.internal.core.util.Caches$SoftReferenceCache
         //
         verifyException("java.lang.Enum", e);
      }
  }

  /**
  //Test case number: 135
  /*Coverage entropy=3.670165506279609
  */
  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Range range0 = Range.of((-2853L), (-2853L));
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      linkedList0.offerFirst(range0);
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      long long0 = range0.getLength();
      assertEquals(1L, long0);
      
      LinkedList<Range> linkedList2 = new LinkedList<Range>();
      Range range1 = Range.of(1L);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 136
  /*Coverage entropy=3.2995793963713953
  */
  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Range range0 = Range.of(713L);
      range0.getEnd();
      Object object0 = new Object();
      Range.Builder range_Builder0 = null;
      try {
        range_Builder0 = new Range.Builder(4294967295L, 691L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 137
  /*Coverage entropy=4.102317005371441
  */
  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range.of((-2147483681L), (-2147483681L));
      Object object0 = new Object();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      Range range1 = Range.of(range_CoordinateSystem0, (-2147483681L), 65535L);
      Long long0 = new Long((-2147483681L));
      range0.equals("");
      Range.of(65535L);
      Range range2 = Range.ofLength(1941L);
      Range range3 = range0.intersection(range2);
      range3.getLength();
      range3.complement(range1);
      Range.CoordinateSystem range_CoordinateSystem1 = Range.CoordinateSystem.ZERO_BASED;
      Range.of(range_CoordinateSystem1, (-2680L), 2837L);
      Range.CoordinateSystem[] range_CoordinateSystemArray0 = Range.CoordinateSystem.values();
      assertEquals(3, range_CoordinateSystemArray0.length);
  }

  /**
  //Test case number: 138
  /*Coverage entropy=3.9224958351694843
  */
  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Range range0 = Range.of(4294967295L);
      Range range1 = Range.of((-2147483648L), (-2147483648L));
      range0.complement(range1);
      LinkedList<Range> linkedList0 = new LinkedList<Range>();
      LinkedList<Range> linkedList1 = new LinkedList<Range>();
      linkedList1.offerFirst(range0);
      range1.getEnd();
      linkedList0.add(range0);
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.ZERO_BASED;
      Range range2 = Range.of(range_CoordinateSystem0, (-2147483648L), (-2147483648L));
      range2.getEnd();
      Range.Builder range_Builder0 = new Range.Builder((-2147483648L), (-2147483648L));
      range0.complement(range1);
      // Undeclared exception!
      try { 
        Range.of(range_CoordinateSystem0, 4294967295L, 801L);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length can not be negative
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 139
  /*Coverage entropy=3.6786104077158903
  */
  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Range range0 = Range.of((-2157L));
      assertFalse(range0.isEmpty());
      
      Long long0 = new Long((-2157L));
      Long.remainderUnsigned((-2157L), (-2157L));
      Long.compareUnsigned(1L, 0L);
      Long.getLong("");
      Long.getLong("org.jcvi.jillion.core.Ranges", long0);
      Range range1 = Range.of(0L, (long) 1);
      assertFalse(range1.isEmpty());
  }

  /**
  //Test case number: 140
  /*Coverage entropy=3.955087282320793
  */
  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Range.CoordinateSystem.values();
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      Range.Builder range_Builder1 = range_Builder0.contractBegin(255L);
      Range range0 = Range.ofLength(255L);
      Range.Builder range_Builder2 = new Range.Builder(range0);
      Range range1 = range_Builder1.build();
      Range.Builder range_Builder3 = new Range.Builder();
      range_Builder1.expandBegin(3338L);
      Range range2 = range_Builder3.build();
      range2.split(2147483647L);
      Range range3 = Range.of((-764L), 18L);
      assertFalse(range3.equals((Object)range1));
  }

  /**
  //Test case number: 141
  /*Coverage entropy=3.065083259884217
  */
  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      long long0 = 9223372036854775807L;
      Range.Builder range_Builder0 = new Range.Builder(9223372036854775807L);
      range_Builder0.build();
      Range.CoordinateSystem range_CoordinateSystem0 = Range.CoordinateSystem.RESIDUE_BASED;
      // Undeclared exception!
      try { 
        Range.parseRange("`Av4G,", range_CoordinateSystem0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // can not parse `Av4G, into a Range
         //
         verifyException("org.jcvi.jillion.core.Range", e);
      }
  }

  /**
  //Test case number: 142
  /*Coverage entropy=3.1108011541345713
  */
  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      int int0 = (-129);
      Range.ofLength(255L);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        Range.ofLength((-2125L));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // must be >=0
         //
         verifyException("org.jcvi.jillion.core.Range$Builder", e);
      }
  }

  /**
  //Test case number: 143
  /*Coverage entropy=3.3600616852657748
  */
  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Range.of((-2125L));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Range.of(255L);
      Long long0 = new Long((-4294967294L));
      Object object0 = new Object();
  }

  /**
  //Test case number: 144
  /*Coverage entropy=3.0479998912648156
  */
  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Range.Builder range_Builder0 = new Range.Builder();
      Range range0 = range_Builder0.build();
      Integer integer0 = new Integer(2362);
      Integer integer1 = new Integer((-948));
      range0.equals(integer1);
      Long long0 = new Long((-948));
      Integer integer2 = new Integer((-948));
      Integer integer3 = new Integer(0);
      assertFalse(integer3.equals((Object)integer1));
  }
}
