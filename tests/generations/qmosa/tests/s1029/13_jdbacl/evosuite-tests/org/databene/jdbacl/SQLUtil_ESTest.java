/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 02:17:45 GMT 2019
 */

package org.databene.jdbacl;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintWriter;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.LinkedList;
import java.util.List;
import java.util.Vector;
import javax.management.remote.JMXPrincipal;
import org.apache.derby.diag.ErrorMessages;
import org.apache.derby.iapi.services.context.ContextManager;
import org.apache.derby.iapi.services.context.ContextService;
import org.apache.derby.iapi.services.loader.GeneratedClass;
import org.apache.derby.iapi.sql.Activation;
import org.apache.derby.iapi.sql.dictionary.ConstraintDescriptorList;
import org.apache.derby.iapi.sql.dictionary.GenericDescriptorList;
import org.apache.derby.iapi.store.access.TransactionController;
import org.apache.derby.iapi.store.raw.xact.RawTransaction;
import org.apache.derby.impl.db.BasicDatabase;
import org.apache.derby.impl.db.SlaveDatabase;
import org.apache.derby.impl.sql.GenericLanguageFactory;
import org.apache.derby.impl.sql.catalog.DataDictionaryImpl;
import org.apache.derby.impl.sql.compile.CreateIndexNode;
import org.apache.derby.impl.sql.compile.FromVTI;
import org.apache.derby.impl.sql.compile.HalfOuterJoinNode;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionContext;
import org.apache.derby.impl.sql.conn.GenericLanguageConnectionFactory;
import org.apache.derby.impl.sql.execute.ConstantActionActivation;
import org.apache.derby.impl.store.access.btree.BTreeController;
import org.databene.commons.version.VersionNumber;
import org.databene.commons.version.VersionNumberComponent;
import org.databene.jdbacl.NameSpec;
import org.databene.jdbacl.SQLUtil;
import org.databene.jdbacl.model.CompositeDBObject;
import org.databene.jdbacl.model.ContainerComponent;
import org.databene.jdbacl.model.DBCatalog;
import org.databene.jdbacl.model.DBCheckConstraint;
import org.databene.jdbacl.model.DBColumn;
import org.databene.jdbacl.model.DBConstraint;
import org.databene.jdbacl.model.DBDataType;
import org.databene.jdbacl.model.DBForeignKeyConstraint;
import org.databene.jdbacl.model.DBNotNullConstraint;
import org.databene.jdbacl.model.DBObject;
import org.databene.jdbacl.model.DBPackage;
import org.databene.jdbacl.model.DBPrimaryKeyConstraint;
import org.databene.jdbacl.model.DBProcedure;
import org.databene.jdbacl.model.DBSchema;
import org.databene.jdbacl.model.DBSequence;
import org.databene.jdbacl.model.DBTable;
import org.databene.jdbacl.model.DBTrigger;
import org.databene.jdbacl.model.DBUniqueConstraint;
import org.databene.jdbacl.model.DBUniqueIndex;
import org.databene.jdbacl.model.DefaultDBColumn;
import org.databene.jdbacl.model.DefaultDBTable;
import org.databene.jdbacl.model.DefaultDatabase;
import org.databene.jdbacl.model.FKChangeRule;
import org.databene.jdbacl.model.TableContainer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.h2.jdbcx.JdbcDataSource;
import org.hsqldb.lib.FileUtil;
import org.junit.runner.RunWith;
import org.postgresql.ds.PGConnectionPoolDataSource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SQLUtil_ESTest extends SQLUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)41;
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "/*";
      // Undeclared exception!
      SQLUtil.isQuery("/*");
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.5669499167988556
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      VersionNumber.valueOf("jUQ^VqJl>9P?CW");
      VersionNumber versionNumber0 = VersionNumber.valueOf("(onAtrain]");
      VersionNumber.valueOf("(onAtrain]");
      VersionNumber.valueOf((String) null);
      VersionNumber.valueOf("/ftlL&t");
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("ParameterMetaData");
      assertNull(boolean0);
      
      String string0 = SQLUtil.renderValue(versionNumber0);
      assertEquals("", string0);
      
      DBTrigger dBTrigger0 = new DBTrigger("drop table$kckizlmd09<", (DBSchema) null);
      String string1 = SQLUtil.ownerDotComponent(dBTrigger0);
      assertEquals("drop table$kckizlmd09<", string1);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.9314830515574797
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "begin parameter #";
      SQLUtil.removeComments("eX2R:T^a'!lZZqi");
      String string1 = "alter session";
      SQLUtil.mutatesDataOrStructure("alter session");
      SQLUtil.isDML(" on ");
      String string2 = "TempFileDeleter.deleteFile";
      SQLUtil.isProcedureCall("TempFileDeleter.deleteFile");
      // Undeclared exception!
      try { 
        ContextService.getFactory();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // 
         //
         verifyException("org.apache.derby.iapi.services.context.ContextService", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.0093476833251094
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("f{te?p<8_|m");
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("f{te?p<8_|m", true, defaultDBTable0, (String[]) null, defaultDBTable0, (String[]) null);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      defaultDBTable0.getColumnNames();
      NameSpec nameSpec1 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec1);
      SQLUtil.mutatesDataOrStructure("f{te?p<8_|m");
      SQLUtil.mutatesStructure("n|kefilds");
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize("CONSTRAINT f{te?p<8_|m FOREIGN KEY () REFERENCES f{te?p<8_|m()");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.675152719098472
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1045), " REFERENCES ");
      Integer integer0 = RawTransaction.ABORT;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer1, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " REFERENCES ");
      FileUtil.canonicalFile("select into~=ilbmd\"y^-xw{~");
      Integer.remainderUnsigned((-1045), 436);
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      DefaultDBColumn defaultDBColumn1 = new DefaultDBColumn("select into~=ilbmd\"y^-xw{~", defaultDBTable0, dBDataType0);
      defaultDBColumn1.setFractionDigits(integer1);
      defaultDBColumn1.getForeignKeyConstraint();
      SQLUtil.renderColumn(defaultDBColumn1);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.996099995371364
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String[] stringArray0 = new String[2];
      stringArray0[0] = "rename";
      stringArray0[1] = "Z[xQvA#";
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("Z[xQvA#");
      String[] stringArray1 = new String[9];
      stringArray1[0] = "B~F%1Q";
      stringArray1[1] = "Z[xQvA#";
      stringArray1[2] = "rename";
      stringArray1[3] = "rename";
      stringArray1[4] = "rename";
      stringArray1[5] = " = ";
      stringArray1[6] = "rename = 'rename' AND Z[xQvA# = 'Z[xQvA#'";
      stringArray1[7] = "Z[xQvA#";
      stringArray1[8] = "rename = 'rename' AND Z[xQvA# = 'Z[xQvA#'";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, " = ", true, stringArray1);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("rename = 'rename' AND Z[xQvA# = 'Z[xQvA#'", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-1022), "rename = 'rename' AND Z[xQvA# = 'Z[xQvA#'");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("rename", dBTable0, dBDataType0, (Integer) null, (Integer) null);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      SQLUtil.mutatesStructure("^q1=5%Jn7hTKWAx");
      SQLUtil.mutatesStructure("B~F%1Q");
      Object[] objectArray0 = new Object[7];
      objectArray0[0] = (Object) dBPrimaryKeyConstraint0;
      objectArray0[1] = (Object) "rename = 'rename' AND Z[xQvA# = 'Z[xQvA#'";
      objectArray0[2] = (Object) "Z[xQvA#";
      objectArray0[3] = (Object) "rename = 'rename' AND Z[xQvA# = 'Z[xQvA#'";
      objectArray0[4] = (Object) " = ";
      objectArray0[5] = (Object) dBDataType0;
      objectArray0[6] = (Object) dBUniqueIndex0;
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery(dBTable0, stringArray1, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnListWithTableName("callselect into", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.8207751622034678
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$L+oi.";
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBDataType dBDataType0 = DBDataType.getInstance(2624, "4c%W/g$L+oi.");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("P1xHeve4G?7G.*mtri&", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnTypeWithSize(dBColumnArray0[0]);
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)88;
      byteArray0[0] = (byte)88;
      Integer.remainderUnsigned(2524, (-378));
      Integer integer1 = RawTransaction.ABORT;
      defaultDBColumn0.setFractionDigits(integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumn(defaultDBColumn0);
      List<DBColumn> list0 = defaultDBTable0.getColumns();
      SQLUtil.renderColumnNames(list0);
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter((PipedReader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.6675530205253588
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1045), " REFERENCES ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer1, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " REFERENCES ");
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-60);
      byteArray0[2] = (byte)6;
      byteArray0[3] = (byte)7;
      byteArray0[4] = (byte) (-1);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileUtil.canonicalFile("select into~=ilbmd\"y^-xw{~");
      Integer.remainderUnsigned((-1045), (-1045));
      Integer integer2 = RawTransaction.LOCK_ESCALATE;
      defaultDBColumn0.setFractionDigits(integer1);
      defaultDBColumn0.getForeignKeyConstraint();
      SQLUtil.renderColumn(defaultDBColumn0);
      List<DBColumn> list0 = new Vector<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(list0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      StringReader stringReader0 = new StringReader("renamealter materialized viewu!q:xye'#l@j%(=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1.0;
      streamTokenizer1.parseNumbers();
      stringReader0.reset();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.whitespaceChars((-4), (-1793));
      stringReader0.ready();
      streamTokenizer1.commentChar((-1793));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.parseNumbers();
      streamTokenizer1.ordinaryChars(48, (-4));
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.lowerCaseMode(true);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer3.pushBack();
      stringReader0.read();
      FileSystemHandling.shouldAllThrowIOExceptions();
      StringBuilder stringBuilder0 = null;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "";
      stringArray0[1] = null;
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, (String) null, true, stringArray0);
      SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint0, (StringBuilder) null);
      SQLUtil.renderNumber(streamTokenizer2);
      // Undeclared exception!
      try { 
        defaultDBTable0.getUniqueConstraint("B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DefaultDBTable", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begin paramehter #");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(4);
      streamTokenizer0.nval = (double) 4;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars((-4), (-2040902945));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.ordinaryChars((-4), (-4));
      streamTokenizer3.slashStarComments(true);
      streamTokenizer1.ttype = (-366310306);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.nextToken();
      streamTokenizer5.eolIsSignificant(false);
      streamTokenizer5.nextToken();
      streamTokenizer3.quoteChar(4);
      streamTokenizer5.parseNumbers();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer0.nextToken();
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("4", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.6082873972465446
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "select into";
      SQLUtil.parseColumnTypeAndSize("select into");
      SQLUtil.isQuery("select into");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "select into";
      String string1 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.3419004922628597
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      StringReader stringReader0 = new StringReader("renamealter materialized viewu!q:xye'#l@j%(=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-922));
      streamTokenizer0.quoteChar(42);
      stringReader0.markSupported();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      streamTokenizer0.parseNumbers();
      byteArray0[0] = (byte) (-102);
      byteArray0[1] = (byte) (-48);
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intoselect into");
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      DBDataType.getInstance((-476316184), "b.E8Oz#'lz$.y,stDf");
      System.setCurrentTimeMillis(1L);
      boolean boolean1 = SQLUtil.isQuery("selectmjeittypb");
      assertTrue(boolean1);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "4c%W/g$L+oi.";
      String[] stringArray0 = new String[0];
      SQLUtil.renderColumnListWithTableName("create unique indexmjeittypb", stringArray0);
      TableContainer tableContainer0 = new TableContainer("+pTY*3Zej");
      // Undeclared exception!
      try { 
        tableContainer0.getCatalog();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.TableContainer", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.4001443355569787
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance(71, " REFERENCES ");
      defaultDBTable0.getColumns();
      Integer integer0 = RawTransaction.ABORT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer0, integer0);
      defaultDBColumn0.setDefaultValue("4c%W/g$L+oi.");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" REFERENCES   REFERENCES (1,1) DEFAULT 4c%W/g$L+oi. NULL", string0);
      
      Random.setNextRandom(71);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      String string1 = SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      assertEquals(" REFERENCES (1,1)", string1);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.551846880035912
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      SQLUtil.isDDL("drop tablemerge into join x0y77.s as merge into on i},jyt}\"tgwxxn,*<;.i},jyt}\"tgwxxn,*<; = merge into .i},jyt}\"tgwxxn,*<; and i},jyt}\"tgwxxn,*<;.merge into = merge into .merge into");
      SQLUtil.removeComments("wB7+mr");
      SQLUtil.removeComments("drop tablemerge into join x0y77.s as merge into on i},jyt}\"tgwxxn,*<;.i},jyt}\"tgwxxn,*<; = merge into .i},jyt}\"tgwxxn,*<; and i},jyt}\"tgwxxn,*<;.merge into = merge into .merge into");
      SQLUtil.mutatesDataOrStructure("alter indexobjec\typ0");
      String string0 = "create uniqueindex8>zyb";
      SQLUtil.isDML("~=ilbmd\"y^-");
      String string1 = null;
      SQLUtil.isProcedureCall("alter indexobjec\typ0");
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.renderNumber((StreamTokenizer) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      StringReader stringReader0 = new StringReader("renamealter materialized viewu!q:xye'#l@j%(=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      byte[] byteArray0 = new byte[4];
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      streamTokenizer0.parseNumbers();
      stringReader0.reset();
      streamTokenizer0.ordinaryChars((-2), (-2));
      byteArray0[0] = (byte) (-102);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.resetSyntax();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      byteArray0[1] = (byte) (-48);
      streamTokenizer0.wordChars(329, (-2));
      streamTokenizer0.nval = (-1.0);
      streamTokenizer0.whitespaceChars(28, (byte) (-102));
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.pushBack();
      Integer integer0 = new Integer((byte) (-100));
      streamTokenizer0.wordChars((byte) (-100), (-1151395887));
      byteArray0[3] = (byte)85;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      stringReader0.skip(28);
      String string0 = SQLUtil.renderNumber(streamTokenizer0);
      assertEquals("- 1", string0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "OBJECTTYPE";
      // Undeclared exception!
      try { 
        SQLUtil.isQuery((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      StringReader stringReader0 = new StringReader("renamealter materialized viewu!q:xye'#l@j%(=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar(42);
      stringReader0.markSupported();
      streamTokenizer0.ordinaryChar(42);
      streamTokenizer0.whitespaceChars(42, 7);
      stringReader0.ready();
      streamTokenizer0.commentChar((-2176));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChars(34, 931);
      streamTokenizer0.quoteChar((-2176));
      streamTokenizer2.lowerCaseMode(true);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-2208));
      streamTokenizer1.quoteChar(1876);
      streamTokenizer1.pushBack();
      stringReader0.read();
      FileSystemHandling.shouldAllThrowIOExceptions();
      stringReader0.skip((-4));
      // Undeclared exception!
      try { 
        SQLUtil.removeComments((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.53772231676108
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      SQLUtil.isDDL("8>zYb");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.isProcedureCall("OBJEITTYPE");
      SQLUtil.isDML("~=ilbMd\"y^-xw{~");
      PipedWriter pipedWriter0 = new PipedWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedWriter0, false);
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(pipedWriter0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      NameSpec nameSpec0 = NameSpec.NEVER;
      MockPrintWriter mockPrintWriter2 = new MockPrintWriter(pipedWriter0);
      Object[] objectArray0 = new Object[2];
      Object object0 = new Object();
      objectArray0[0] = object0;
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8>zYb";
      char[] charArray0 = new char[5];
      charArray0[0] = 'C';
      charArray0[1] = 'h';
      charArray0[2] = 'E';
      charArray0[3] = 'T';
      charArray0[4] = 'e';
      mockPrintWriter0.write(charArray0, 90139, 220);
      stringArray0[1] = "~=ilbMd\"y^-xw{~";
      stringArray0[2] = "org.apache.derby.impl.sql.compile.DB2LengthOperatorNode";
      stringArray0[3] = "8>zYb";
      stringArray0[4] = "8>zYb";
      stringArray0[5] = "NO:RsK8]QNL?MfGW";
      String[] stringArray1 = new String[1];
      stringArray1[0] = "OBJEITTYPE";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("~=ilbMd\"y^-xw{~", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray1);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, mockPrintWriter0);
      assertFalse(dBForeignKeyConstraint0.isNameDeterministic());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "drop table";
      String string1 = "(-POWAR,X>1))";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(-POWAR,X>1))");
      DBCheckConstraint dBCheckConstraint0 = null;
      SQLUtil.renderValue("(-POWAR,X>1))");
      DBSchema dBSchema0 = new DBSchema("org.apache.derby.");
      dBSchema0.getTable("select intoparametermetadata");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "select intoparametermetadata";
      stringArray0[1] = "org.apache.derby.";
      stringArray0[2] = "select intoparametermetadata";
      stringArray0[3] = "drop table";
      stringArray0[4] = "(-POWAR,X>1))";
      stringArray0[5] = "org.apache.derby.";
      stringArray0[6] = "select intoparametermetadata";
      stringArray0[7] = "n";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = null;
      try {
        dBForeignKeyConstraint0 = new DBForeignKeyConstraint("drop table", false, (DBTable) null, stringArray0, defaultDBTable0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.model.DBForeignKeyConstraint", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.978644858599489
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1075), "call");
      Integer integer0 = RawTransaction.ABORT;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.compare(41, (-1075));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer1, integer2);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" REFERENCES  : CALL(1,2)", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer.max(2484, 634);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      byteArray0[2] = (byte) (-119);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      Boolean boolean0 = SQLUtil.mutatesStructure("call");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.117456111453701
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      SQLUtil.isDML("8>zyb");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[9];
      stringArray0[0] = "8>zyb";
      stringArray0[1] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      stringArray0[2] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      stringArray0[3] = "<";
      stringArray0[4] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      stringArray0[6] = "create unique indexdrop index:3yz|vge6<p3+pi>[";
      DefaultDBTable defaultDBTable1 = new DefaultDBTable("/*", (DBSchema) null);
      // Undeclared exception!
      SQLUtil.isDML("/*");
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.873029116491111
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "~Q/v]uM7";
      String string0 = SQLUtil.renderColumnListWithTableName("~Q/v]uM7", stringArray0);
      assertEquals("~Q/v]uM7.~Q/v]uM7, ~Q/v]uM7.null, ~Q/v]uM7.null, ~Q/v]uM7.null, ~Q/v]uM7.null, ~Q/v]uM7.null, ~Q/v]uM7.null", string0);
      
      TableContainer tableContainer0 = new TableContainer("~Q/v]uM7");
      tableContainer0.getTables();
      TableContainer tableContainer1 = new TableContainer("~Q/v]uM7", tableContainer0);
      tableContainer1.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("~Q/v]uM7");
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "referen", false, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string1 = SQLUtil.pkSpec(dBPrimaryKeyConstraint0, nameSpec0);
      assertEquals("PRIMARY KEY (~Q/v]uM7, , , , , , )", string1);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.1558769833329054
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      SQLUtil.isDML("8>zyb");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      SQLUtil.isDML("8>zyb");
      SQLUtil.isProcedureCall("$");
      SQLUtil.isDDL("create unique indexdrop index:3yz|vge6<p3+pi>[");
      SQLUtil.mutatesStructure("rnL{rrK8y");
      DefaultDBTable defaultDBTable1 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "4>F!x:'J";
      stringArray0[1] = ";\"@&-lmHg/Ee#7]Y>";
      stringArray0[2] = ";\"@&-lmHg/Ee#7]Y>";
      stringArray0[3] = "p,j";
      stringArray0[4] = "rnL{rrK8y";
      stringArray0[5] = "$";
      stringArray0[6] = "p,j";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable1, "p,j", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("p,j", false, dBUniqueConstraint0);
      DBUniqueIndex dBUniqueIndex1 = new DBUniqueIndex("rnL{rrK8y", false, dBUniqueConstraint0);
      dBUniqueIndex1.getTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("8>zyb", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      JdbcDataSource jdbcDataSource0 = new JdbcDataSource();
      jdbcDataSource0.getLogWriter();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.renderAddForeignKey(dBForeignKeyConstraint0, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(4462);
      // Undeclared exception!
      try { 
        SQLUtil.addOptionalCondition((String) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      SQLUtil.removeComments("create materialized viewk1v p ~ f / / de arlofm");
      Random.setNextRandom(126);
      Character character0 = new Character('<');
      String string0 = SQLUtil.renderValue(character0);
      assertEquals("'<'", string0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.324621476365503
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[1] = 'G';
      charArray0[5] = 'L';
      String[] stringArray0 = new String[7];
      stringArray0[1] = "iW,y}\"Ghxn,*<;";
      stringArray0[1] = "MERGE INTO ";
      boolean boolean0 = SQLUtil.isProcedureCall("MERGE INTO ");
      SQLUtil sQLUtil0 = new SQLUtil();
      SQLUtil.isProcedureCall("MERGE");
      Boolean boolean1 = SQLUtil.mutatesStructure("iW,y}\"Ghxn,*<;");
      assertTrue(boolean1.equals((Object)boolean0));
      
      Character character0 = new Character('G');
      String string0 = SQLUtil.substituteMarkers("MERGE INTO ", "--", character0);
      assertEquals("MERGE INTO ", string0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.9289738521096165
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      PipedWriter pipedWriter0 = new PipedWriter();
      long long0 = 4109L;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" (");
      DBDataType dBDataType0 = DBDataType.getInstance((-1045), "call");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      Integer integer2 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" (", defaultDBTable0, dBDataType0, integer1, (Integer) null);
      defaultDBColumn0.toString();
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      ContextService contextService0 = null;
      try {
        contextService0 = new ContextService();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.monitor.Monitor", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4834915965575728
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("derby.softDataDictionaryVersion", compositeDBObject0);
      List<DBSequence> list0 = tableContainer0.getSequences(true);
      tableContainer0.equals("derby.softDataDictionaryVersion");
      DBSchema dBSchema0 = new DBSchema("java.lang.Object@3b8e4d7f");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "derby.softDataDictionaryVersion");
      dBSchema0.getSequences(false);
      System.setCurrentTimeMillis(1740L);
      SQLUtil.typeAndName(dBSchema0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "x\"l5n`vl";
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      constraintDescriptorList0.add((Object) list0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) constraintDescriptorList0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.ArrayList cannot be cast to org.databene.jdbacl.model.DBColumn
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SQLUtil.isDML("update");
      PipedWriter pipedWriter0 = new PipedWriter();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      genericLanguageConnectionFactory0.getTypeCompilerFactory();
      System.setCurrentTimeMillis(577L);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.272336416778445
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4cW/J$L+oi.";
      SQLUtil.isQuery("n|KeFilds");
      String string0 = "para";
      SQLUtil.isDML("para");
      SQLUtil.isProcedureCall("4cW/J$L+oi.");
      SQLUtil sQLUtil0 = new SQLUtil();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begZn parameter #");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(4);
      streamTokenizer1.wordChars(6, (-4));
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        SQLUtil.normalize((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("create unique index", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(2);
      StringBuilder stringBuilder1 = SQLUtil.addOptionalCondition("L=MdgH9e1", stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.insert(2, 468);
      StringBuffer stringBuffer0 = new StringBuffer(stringBuilder2);
      stringBuilder2.append(stringBuffer0);
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'u';
      charArray0[3] = 'L';
      charArray0[1] = 'l';
      charArray0[4] = '3';
      System.setCurrentTimeMillis(0L);
      DBColumn[] dBColumnArray0 = new DBColumn[0];
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      SQLUtil.normalize("t>e)", true);
      Random.setNextRandom(126);
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      StringReader stringReader0 = new StringReader("renamealter materialized viewu!q:xye'#l@j%(=");
      String string0 = SQLUtil.normalize("renamealter materialized viewu!q:xye'#l@j%(=", true);
      assertEquals("renamealter materialized viewu ! q : xye '#l@j%(='", string0);
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begi\" parameter ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.quoteChar((-4));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.eolIsSignificant(false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      streamTokenizer0.whitespaceChars(42, (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      streamTokenizer4.pushBack();
      streamTokenizer4.quoteChar((-1581));
      streamTokenizer0.ordinaryChars(94, 39);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      streamTokenizer1.sval = "begi\" parameter ";
      streamTokenizer1.whitespaceChars(90124, (-4));
      streamTokenizer2.parseNumbers();
      stringArray0[2] = "begi\" parameter ";
      stringArray0[3] = null;
      stringArray0[4] = "begi\" parameter ";
      streamTokenizer4.ttype = 26;
      streamTokenizer4.wordChars((-4), 26);
      stringArray0[5] = null;
      stringArray0[6] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String string0 = SQLUtil.typeAndName((DBObject) null);
      assertNull(string0);
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        SQLUtil.substituteMarkers("create materialized viewsq*kg'o>a", (String) null, object0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      boolean boolean0 = SQLUtil.isProcedureCall("execb~f%1q");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begin parameter #");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(4);
      streamTokenizer0.nval = (double) 4;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-4), 387);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.sval = null;
      streamTokenizer4.parseNumbers();
      streamTokenizer0.resetSyntax();
      streamTokenizer2.commentChar(0);
      streamTokenizer3.ordinaryChars(48, 122);
      streamTokenizer4.slashStarComments(false);
      streamTokenizer2.ttype = (-1140);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars(48, (-1576));
      streamTokenizer4.quoteChar(122);
      streamTokenizer6.parseNumbers();
      streamTokenizer1.quoteChar((-4));
      // Undeclared exception!
      try { 
        SQLUtil.mutatesStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.964763373583426
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "rciTlu!g^9vRj#GC|y3");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("rciTlu!g^9vRj#GC|y3", (DBSchema) null);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "4c%W/g$L+oi.";
      stringArray0[1] = "4c%W/g$L+oi.";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      stringArray0[2] = " REFEREJNCES ";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(" REFEREJNCES ", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      dBForeignKeyConstraint0.toString();
      dBForeignKeyConstraint0.isIdentical((DBObject) null);
      dBForeignKeyConstraint0.setName("page=");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      System.setCurrentTimeMillis(2224L);
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        SQLUtil.join("b66DPwk~ oGsld&D", "b66DPwk~ oGsld&D", (String[]) null, (String) null, "b66DPwk~ oGsld&D", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      String[] stringArray0 = new String[6];
      stringArray0[0] = "4cW/J$L+oi.";
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray1 = new String[7];
      stringArray1[0] = "n|KeFilds";
      stringArray1[1] = "$sC>$\bJH&7d'Mw";
      stringArray1[2] = "4cW/J$L+oi.";
      stringArray1[3] = "4cW/J$L+oi.";
      stringArray1[4] = "$sC>$\bJH&7d'Mw";
      stringArray1[5] = "drop index";
      stringArray1[6] = "n|KeFilds";
      // Undeclared exception!
      try { 
        SQLUtil.join("4cW/J$L+oi.", "n|KeFilds", stringArray1, (String) null, "|Yi6NV96zSi=drq8U", stringArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 6
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "g\"+qo;HD(";
      stringArray0[1] = "Hc609aq;~+MpiFsyG";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      stringArray0[2] = "9223372036854775807";
      stringArray0[3] = "";
      SQLUtil.renderColumnNames(stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnTypeWithSize((DBColumn) null, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      DBCatalog dBCatalog0 = new DBCatalog();
      DBSchema dBSchema0 = new DBSchema("AwJdN{d", dBCatalog0);
      dBSchema0.getTable("~Lx{j'e{{=&#%P6B.");
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      PGConnectionPoolDataSource pGConnectionPoolDataSource0 = new PGConnectionPoolDataSource();
      pGConnectionPoolDataSource0.getLogWriter();
      // Undeclared exception!
      try { 
        SQLUtil.renderCreateTable((DBTable) null, true, nameSpec0, (PrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("4c%W/g$L+oi.");
      MockPrintWriter mockPrintWriter1 = new MockPrintWriter(mockPrintWriter0);
      Object object0 = new Object();
      PrintWriter printWriter0 = mockPrintWriter1.printf("X@,IEGC2+7(fJT!)M$", (Object[]) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4c%W/g$L+oi.");
      NameSpec nameSpec0 = NameSpec.NEVER;
      SQLUtil.renderCreateTable(defaultDBTable0, false, nameSpec0, printWriter0);
      assertSame(printWriter0, mockPrintWriter1);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("left", (DBSchema) null);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "callse";
      stringArray0[1] = "{DJ^*m:qwf/";
      stringArray0[2] = "{DJ^*m:qwf/";
      stringArray0[3] = "{DJ^*m:qwf/";
      stringArray0[4] = "{DJ^*m:qwf/";
      stringArray0[5] = "callse";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "callse", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("{DJ^*m:qwf/", false, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DBDataType dBDataType0 = DBDataType.getInstance((-360100737), "8>zyb");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("left", dBTable0, dBDataType0);
      defaultDBColumn0.getForeignKeyConstraint();
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.fkSpec((DBForeignKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=2.0217997374003334
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      String string0 = "4c%W/g$L+oi.";
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$L+oi.";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SQLUtil.join("4c%W/g$L+oi.", "e", stringArray0, ";N-M^FxH$", "OREA!tx*$:Ya", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4c%W/g$L+oi.");
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("[1?+)", defaultDBTable0, (-3902), "4c%W/g$L+oi.");
      StringBuilder stringBuilder0 = new StringBuilder("constraint");
      StringBuffer stringBuffer0 = new StringBuffer("DEFERRABLE");
      StringBuilder stringBuilder1 = stringBuilder0.append(stringBuffer0);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0, stringBuilder0);
      StringBuilder stringBuilder2 = stringBuilder1.append(true);
      SQLUtil.addRequiredCondition("4c%W/g$L+oi. join ;N-M^FxH$ as OREA!tx*$:Ya on e.4c%W/g$L+oi. = OREA!tx*$:Ya.4c%W/g$L+oi. and e.null = OREA!tx*$:Ya.null and e.null = OREA!tx*$:Ya.null and e.null = OREA!tx*$:Ya.null", stringBuilder2);
      StringBuilder stringBuilder3 = stringBuilder0.append((-3902));
      // Undeclared exception!
      try { 
        stringBuilder3.delete(3193, (-3902));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("XRE07");
      String[] stringArray0 = new String[3];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "", true, stringArray0);
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex("^&+_R|D=<", true, dBPrimaryKeyConstraint0);
      DBTable dBTable0 = dBUniqueIndex0.getTable();
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("XRE07", dBTable0, (-834), "");
      String string0 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals("XRE07  NULL", string0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.676873966140993
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      String[] stringArray0 = new String[4];
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1045), " REFERENCES ");
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.ABORT;
      EvoSuiteRemoteAddress evoSuiteRemoteAddress0 = new EvoSuiteRemoteAddress("delete", 12345);
      NetworkHandling.openRemoteTcpServer(evoSuiteRemoteAddress0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer1, integer1);
      SQLUtil.renderColumnTypeWithSize((DBColumn) defaultDBColumn0);
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint(" REFERENCES (1,1)", false, "selectobjecttype", "rename");
      defaultDBTable0.addCheckConstraint(dBCheckConstraint0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      File file0 = FileUtil.canonicalFile("selec into~ilbmd\"y^-x{~");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, " REFERENCES (1,1)");
      File file1 = FileUtil.canonicalFile(file0);
      file1.getAbsolutePath();
      file1.mkdirs();
      MockFile mockFile0 = new MockFile("1Qoo\"J,j~r&/", "selec into~ilbmd\"y^-x{~");
      mockFile0.mkdir();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      mockFile0.toURL();
      mockFile0.setReadOnly();
      mockPrintWriter0.print(1L);
      SQLUtil.renderCreateTable(defaultDBTable0, true, nameSpec0, mockPrintWriter0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      String string0 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  REFERENCES  WHERE null = null AND null = null AND null = null AND null = null", string0);
      
      String string1 = SQLUtil.renderColumn(defaultDBColumn0);
      assertEquals(" REFERENCES   REFERENCES (1,1) NULL", string1);
      
      String string2 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(, , , )", string2);
  }

  /**
  //Test case number: 52
  /*Coverage entropy=2.2449402220507104
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$L+oi.";
      stringArray0[1] = "4c%W/g$L+oi.";
      stringArray0[2] = "4c%W/g$L+oi.";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4c%W/g$L+oi.");
      stringArray0[3] = " REFERENCES ";
      SQLUtil.join("4c%W/g$L+oi.", " REFERENCES ", stringArray0, "4c%W/g$L+oi.", "4c%W/g$L+oi.", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("4c%W/g$L+oi.");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("4c%W/g$L+oi. join 4c%W/g$L+oi. as 4c%W/g$L+oi. on  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES . REFERENCES  = 4c%W/g$L+oi.. REFERENCES ", "4c%W/g$L+oi. = '4c%W/g$L+oi.' AND 4c%W/g$L+oi. = '4c%W/g$L+oi.' AND 4c%W/g$L+oi. = '4c%W/g$L+oi.' AND  REFERENCES  = ' REFERENCES '", versionNumber0);
      DBSchema dBSchema0 = new DBSchema("4c%W/g$L+oi. join 4c%W/g$L+oi. as 4c%W/g$L+oi. on  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES . REFERENCES  = 4c%W/g$L+oi.. REFERENCES ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder("URYi]i");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4c%W/g$L+oi.", true, "4c%W/g$L+oi.", "deleteobjecttype");
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      assertEquals("URYi]iCONSTRAINT 4c%W/g$L+oi. ", stringBuilder0.toString());
      
      SQLUtil.normalize("4c%W/g$L+oi.", false);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      SQLUtil.constraintSpec(dBCheckConstraint0, nameSpec0);
      String string0 = SQLUtil.renderColumnNames(stringArray0);
      assertEquals("(4c%W/g$L+oi., 4c%W/g$L+oi., 4c%W/g$L+oi.,  REFERENCES )", string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "BLOB";
      stringArray0[1] = "BLOB";
      stringArray0[2] = "BLOB";
      stringArray0[3] = "BLOB";
      stringArray0[4] = "BLOB";
      stringArray0[5] = "BLOB";
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "BLOB", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      String string0 = SQLUtil.ukSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT BLOB UNIQUE (BLOB, BLOB, BLOB, BLOB, BLOB, BLOB)", string0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.948720592834763
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("begin parameter #", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setName("8>zyb");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "DEC", true, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("UNIQUE (, , , )", string0);
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.4620975966507315
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      SQLUtil.isDML("Hostname of the PostgreSQL server; may be specified directly in the JDBC URL.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      FileSystemHandling.shouldAllThrowIOExceptions();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "Hostname of the PostgreSQL server; may be specified directly in the JDBC URL.";
      stringArray0[2] = "8>zyb";
      stringArray0[3] = "y";
      stringArray0[4] = "8>zyb";
      stringArray0[0] = "y";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8>zyb", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("8>zyb");
      dBPrimaryKeyConstraint0.toString();
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[1], false, dBPrimaryKeyConstraint0);
      dBUniqueIndex0.setDoc("execute");
      int int0 = 230;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("Hostname of the PostgreSQL server; may be specified directly in the JDBC URL.", defaultDBTable0, 230, "|(yURBxT+hhvh4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: |(yURBxT+hhvh4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.1944064129383247
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "~- ");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("#G#|fFfHs\"5%.]0Tt5", (DBSchema) null);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "~- ";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "~- ", false, stringArray0);
      defaultDBTable0.setPrimaryKey(dBPrimaryKeyConstraint0);
      stringArray0[1] = "#G#|fFfHs\"5%.]0Tt5";
      stringArray0[2] = "#G#|fFfHs\"5%.]0Tt5";
      DBUniqueConstraint dBUniqueConstraint0 = defaultDBTable0.getUniqueConstraint(stringArray0);
      DBUniqueConstraint dBUniqueConstraint1 = new DBUniqueConstraint(defaultDBTable0, "delete", false, stringArray0);
      defaultDBTable0.getColumnNames();
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      String string0 = SQLUtil.constraintSpec(dBUniqueConstraint0, nameSpec0);
      assertEquals("CONSTRAINT \"~- \" PRIMARY KEY (~- , #G#|fFfHs\"5%.]0Tt5, #G#|fFfHs\"5%.]0Tt5, )", string0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begin parameter ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.quoteChar((-4));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer2.eolIsSignificant(false);
      streamTokenizer0.whitespaceChars(42, (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      streamTokenizer4.pushBack();
      streamTokenizer4.quoteChar((-1581));
      streamTokenizer0.ordinaryChars(94, 39);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      streamTokenizer1.sval = "begin parameter ";
      streamTokenizer1.whitespaceChars(90124, (-4));
      streamTokenizer2.parseNumbers();
      stringArray0[2] = "begin parameter ";
      stringArray0[3] = null;
      stringArray0[4] = "begin parameter ";
      streamTokenizer4.ttype = 26;
      streamTokenizer4.wordChars((-4), 26);
      stringArray0[5] = null;
      stringArray0[6] = null;
      defaultDBTable0.getUniqueConstraint(stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      // Undeclared exception!
      try { 
        SQLUtil.constraintSpec((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "create table=q0[;az`m8ktagf40";
      stringArray0[1] = "ALTER TABLE ";
      stringArray0[2] = "4c%W/g$ZL+oi.";
      stringArray0[3] = "4c%W/g$ZL+oi.";
      stringArray0[4] = "4c%W/g$ZL+oi.";
      stringArray0[5] = "4c%W/g$ZL+oi.";
      stringArray0[6] = "4c%W/g$ZL+oi.";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("4c%W/g$ZL+oi.", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      FKChangeRule fKChangeRule0 = FKChangeRule.CASCADE;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setName("i");
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.9982695885852573
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("begin parameter #", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("begin parameter #");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("begin parameter #", "begin parameter #", versionNumber0);
      defaultDatabase0.getCatalog("drop `ndexreferences");
      dBForeignKeyConstraint0.isIdentical((DBObject) null);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setName("8>zyb");
      FKChangeRule fKChangeRule1 = FKChangeRule.SET_DEFAULT;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[0] = "8>zyb";
      stringArray0[1] = "begin parameter #";
      stringArray0[2] = "8>zyb";
      stringArray0[3] = "8>zyb";
      stringArray0[4] = "8>zyb";
      stringArray0[5] = "truncatezbv.k~.zd`ty_";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("begin parameter #", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("8>zyb");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("begin parameter #", "8>zyb", versionNumber0);
      defaultDatabase0.getCatalog("truncatezbv.k~.zd`ty_");
      dBForeignKeyConstraint0.isIdentical((DBObject) null);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      DBForeignKeyConstraint dBForeignKeyConstraint1 = defaultDBTable0.getForeignKeyConstraint(stringArray0);
      dBForeignKeyConstraint1.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setName("t !J.dL");
      dBForeignKeyConstraint1.setUpdateRule(fKChangeRule0);
      NameSpec nameSpec0 = NameSpec.IF_REPRODUCIBLE;
      StringBuilder stringBuilder0 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
      assertNull(stringBuilder0);
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "F9w*VM";
      stringArray0[1] = "exec";
      stringArray0[2] = "e^@XsHnvox+";
      stringArray0[3] = "-{";
      stringArray0[4] = "delete";
      stringArray0[5] = "updateRef";
      String string0 = "delete";
      stringArray0[6] = "delete";
      defaultDBTable0.getUniqueConstraint(stringArray0);
      String[] stringArray1 = new String[1];
      stringArray1[0] = "-{";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("e^@XsHnvox+", false, defaultDBTable0, stringArray1, defaultDBTable0, stringArray1);
      StringBuilder stringBuilder0 = new StringBuilder();
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder1 = SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, stringBuilder0, nameSpec0);
      int int0 = 980;
      // Undeclared exception!
      try { 
        stringBuilder1.insert(980, (float) 980);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 980
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9263548464292743
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("begin p rameter #", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("begin p rameter #");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("begin p rameter #", "begin p rameter #", versionNumber0);
      VersionNumber versionNumber1 = VersionNumber.valueOf("jUQ^VqJl>9P?CW");
      dBForeignKeyConstraint0.setOwner(defaultDatabase0);
      versionNumber1.compareTo(versionNumber0);
      VersionNumber.valueOf((String) null);
      versionNumber0.toString();
      defaultDatabase0.getCatalogs();
      versionNumber1.compareTo(versionNumber0);
      defaultDatabase0.getPackages();
      defaultDatabase0.getTables();
      versionNumber1.toString();
      defaultDatabase0.getCatalog((String) null);
      versionNumber1.toString();
      versionNumber0.toString();
      versionNumber1.toString();
      dBForeignKeyConstraint0.isIdentical(defaultDatabase0);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setDoc("rext");
      dBForeignKeyConstraint0.setName("jUQ^VqJl>9P?CW");
      Random.setNextRandom((-1954659280));
      FKChangeRule fKChangeRule1 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      String string0 = SQLUtil.constraintSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, , , ) REFERENCES null(, , , )", string0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begin parameter ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.quoteChar((-4));
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(42, (-4));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      streamTokenizer0.parseNumbers();
      streamTokenizer4.pushBack();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      streamTokenizer0.ordinaryChars(94, 39);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = "begin parameter ";
      stringArray0[2] = null;
      stringArray0[4] = null;
      streamTokenizer4.ttype = 26;
      stringArray0[5] = null;
      stringArray0[6] = null;
      NameSpec nameSpec0 = NameSpec.NEVER;
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint(stringArray0[3], false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      String string0 = SQLUtil.fkSpec(dBForeignKeyConstraint0, nameSpec0);
      assertEquals("FOREIGN KEY (, begin parameter , , , , , ) REFERENCES null(, begin parameter , , , , , )", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.8545607627328535
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "T<>7|4pW0=r>%";
      stringArray0[2] = "T<>7|4pW0=r>%";
      SQLUtil.leftJoin("T<>7|4pW0=r>%", stringArray0, "1pt5tRA0b$Z<l4I", "p'sLs''R;bVc(,X:$R}", stringArray0);
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("left join 1pt5tRA0b$Z<l4I as p'sLs''R;bVc(,X:$R} on T<>7|4pW0=r>%.T<>7|4pW0=r>% = p'sLs''R;bVc(,X:$R}.T<>7|4pW0=r>% and T<>7|4pW0=r>%.null = p'sLs''R;bVc(,X:$R}.null and T<>7|4pW0=r>%.T<>7|4pW0=r>% = p'sLs''R;bVc(,X:$R}.T<>7|4pW0=r>% and T<>7|4pW0=r>%.null = p'sLs''R;bVc(,X:$R}.null and T<>7|4pW0=r>%.null = p'sLs''R;bVc(,X:$R}.null and T<>7|4pW0=r>%.null = p'sLs''R;bVc(,X:$R}.null and T<>7|4pW0=r>%.null = p'sLs''R;bVc(,X:$R}.null", stringArray0, "rrwIwAEj<(_f~I", "T<>7|4pW0=r>%", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.3190095981344987
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure("callselect into");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(5, (-2247), (-331), (-1508), 34, (-2247));
      BasicDatabase basicDatabase0 = new BasicDatabase();
      HalfOuterJoinNode halfOuterJoinNode0 = new HalfOuterJoinNode();
      HalfOuterJoinNode halfOuterJoinNode1 = new HalfOuterJoinNode();
      ErrorMessages errorMessages0 = new ErrorMessages();
      try { 
        errorMessages0.getUnicodeStream((-305));
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getUnicodeStream
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("begin p rameter #", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("begin p rameter #");
      VersionNumber versionNumber1 = VersionNumber.valueOf("jUQ^VqJl>9P?CW");
      versionNumber0.compareTo(versionNumber1);
      versionNumber1.compareTo(versionNumber0);
      versionNumber1.compareTo(versionNumber0);
      VersionNumber versionNumber2 = VersionNumber.valueOf((String) null);
      versionNumber0.toString();
      versionNumber0.compareTo(versionNumber2);
      versionNumber1.compareTo(versionNumber0);
      versionNumber1.toString();
      versionNumber1.toString();
      versionNumber0.toString();
      versionNumber1.toString();
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setDoc("rext");
      dBForeignKeyConstraint0.setName("jUQ^VqJl>9P?CW");
      Random.setNextRandom((-1954659280));
      FKChangeRule fKChangeRule1 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "^j@yO\"%}|$(liy3 =|";
      stringArray0[1] = "^j@yO\"%}|$(liy3 =|";
      stringArray0[2] = "^j@yO\"%}|$(liy3 =|";
      stringArray0[3] = "^j@yO\"%}|$(liy3 =|";
      stringArray0[4] = "^j@yO\"%}|$(liy3 =|";
      stringArray0[5] = "^j@yO\"%}|$(liy3 =|";
      stringArray0[6] = "^j@yO\"%}|$(liy3 =|";
      stringArray0[7] = "^j@yO\"%}|$(liy3 =|";
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.leftJoin("^j@yO\"%}|$(liy3 =|", stringArray0, "`", "^j@yO\"%}|$(liy3 =|", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begin parameter #");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-4), 387);
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.sval = null;
      streamTokenizer4.parseNumbers();
      streamTokenizer2.commentChar(0);
      streamTokenizer3.ordinaryChars(48, 122);
      streamTokenizer4.slashStarComments(true);
      streamTokenizer2.ttype = (-1140);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer6.ordinaryChars(48, (-1576));
      streamTokenizer4.quoteChar(122);
      streamTokenizer6.parseNumbers();
      streamTokenizer1.quoteChar((-4));
      streamTokenizer3.pushBack();
      streamTokenizer3.parseNumbers();
      streamTokenizer1.nextToken();
      String[] stringArray0 = new String[2];
      stringArray0[0] = null;
      stringArray0[1] = null;
      String[] stringArray1 = new String[0];
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("uX6HXbm\"{aj-]^Ng]", stringArray0, (String) null, "begin parameter #", stringArray1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      StringReader stringReader0 = new StringReader("begin parameter #");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(4);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.whitespaceChars((-4), 387);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.parseNumbers();
      streamTokenizer3.ordinaryChars(48, 122);
      streamTokenizer0.quoteChar((-190052748));
      streamTokenizer3.lowerCaseMode(true);
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChars((-139772966), (-4));
      streamTokenizer5.quoteChar((-4));
      streamTokenizer5.parseNumbers();
      streamTokenizer5.quoteChar((-1516));
      streamTokenizer0.pushBack();
      streamTokenizer5.parseNumbers();
      stringReader0.skip(0L);
      SQLUtil.renderNumber(streamTokenizer3);
      // Undeclared exception!
      try { 
        SQLUtil.innerJoin("WIN", (String[]) null, (String) null, (String) null, (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=2.1950865325403197
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Boolean boolean0 = SQLUtil.mutatesDataOrStructure("select intocreate uniqueindex8>zyb");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      String string0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.isDML((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.constraintName((DBConstraint) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Object object0 = new Object();
      SQLUtil.renderValue(object0);
      CompositeDBObject<DBForeignKeyConstraint> compositeDBObject0 = (CompositeDBObject<DBForeignKeyConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      TableContainer tableContainer0 = new TableContainer("derby.softDataDictionaryVersion", compositeDBObject0);
      DBSchema dBSchema0 = new DBSchema("derby.softDataDictionaryVersion");
      dBSchema0.isIdentical(tableContainer0);
      // Undeclared exception!
      try { 
        SQLUtil.parseColumnTypeAndSize(" (");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format:  (
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      VersionNumber.valueOf("=UQ^VqJl>9PNCW");
      VersionNumber.valueOf((String) null);
      VersionNumber.valueOf("(onAtr'fain]");
      VersionNumber.valueOf("&-etVGgqe");
      VersionNumber.valueOf("(onAtr'fain]");
      // Undeclared exception!
      try { 
        SQLUtil.mutatesDataOrStructure((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.4399756932787804
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      SQLUtil.isDDL("8>zyb");
      Boolean boolean0 = new Boolean("8>zyb");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      String[] stringArray0 = new String[6];
      stringArray0[3] = " AND ";
      stringArray0[2] = "8>zyb";
      stringArray0[3] = "8>zyb";
      stringArray0[4] = "8>zyb";
      stringArray0[0] = "y";
      DBPrimaryKeyConstraint dBPrimaryKeyConstraint0 = new DBPrimaryKeyConstraint(defaultDBTable0, "8>zyb", false, stringArray0);
      dBPrimaryKeyConstraint0.setName("8>zyb");
      DBUniqueIndex dBUniqueIndex0 = new DBUniqueIndex(stringArray0[1], false, dBPrimaryKeyConstraint0);
      dBPrimaryKeyConstraint0.isIdentical(dBUniqueIndex0);
      defaultDBTable0.removeIndex(dBUniqueIndex0);
      CompositeDBObject<DBNotNullConstraint> compositeDBObject0 = (CompositeDBObject<DBNotNullConstraint>) mock(CompositeDBObject.class, new ViolatedAssumptionAnswer());
      dBUniqueIndex0.setDoc(")");
      dBUniqueIndex0.setName("8>zyb");
      dBUniqueIndex0.setOwner(compositeDBObject0);
      dBUniqueIndex0.setDoc("left");
      defaultDBTable0.removeUniqueConstraint(dBPrimaryKeyConstraint0);
      int int0 = 230;
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn(" AND ", defaultDBTable0, 230, "|(yURBxT+hhvh4");
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Illegal column type format: |(yURBxT+hhvh4
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      String string0 = "drop table";
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("(-POWER(0, -1))");
      int int0 = (-425);
      DefaultDBColumn defaultDBColumn0 = null;
      try {
        defaultDBColumn0 = new DefaultDBColumn("drop table", defaultDBTable0, (-425), "(-POWER(0, -1))");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-POWER(0\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.1641933683302232
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = 'L';
      charArray0[2] = 'L';
      String[] stringArray0 = new String[7];
      stringArray0[1] = "iW,y}\"Ghxn,*<;";
      stringArray0[1] = "MERGE INTO ";
      SQLUtil.join("MERGE", "iW,y}\"Ghxn,*<;", stringArray0, "drop materialized view", "MERGE INTO ", stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("^b+2|u!");
      versionNumber0.toString();
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber1.toString();
      versionNumber0.compareTo(versionNumber0);
      VersionNumber.valueOf("^b+2|u!");
      genericDescriptorList0.setScanned(false);
      versionNumber0.toString();
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("", "MERGE INTO ", versionNumber1);
      Random.setNextRandom(48);
      SQLUtil.ownerDotComponent(defaultDatabase0);
      Object[] objectArray0 = SQLUtil.parseColumnTypeAndSize("^b+2|u!");
      assertEquals(1, objectArray0.length);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$L+oi.";
      SQLUtil sQLUtil0 = new SQLUtil();
      DBColumn[] dBColumnArray0 = new DBColumn[7];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFER+ENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance(2624, "4c%W/g$L+oi.");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("xHeve4G?G.*Qmtri&", defaultDBTable0, dBDataType0, integer0);
      defaultDBColumn0.setOwner(defaultDBTable0);
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames(dBColumnArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$L+oi.";
      DBColumn[] dBColumnArray0 = new DBColumn[1];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("4c%W/g$L+oi.");
      DBDataType dBDataType0 = DBDataType.getInstance(2624, "4c%W/g$L+oi.");
      Integer integer0 = RawTransaction.COMMIT;
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("4c%W/g$L+oi.", defaultDBTable0, dBDataType0, integer0);
      dBDataType0.isAlpha();
      dBColumnArray0[0] = (DBColumn) defaultDBColumn0;
      SQLUtil.renderColumnNames(dBColumnArray0);
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)102;
      GenericDescriptorList genericDescriptorList0 = new GenericDescriptorList();
      VersionNumber versionNumber0 = VersionNumber.valueOf("org.apache.derby.impl.io.BaseStorageFactory");
      VersionNumber versionNumber1 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber0.compareTo(versionNumber1);
      versionNumber0.compareTo(versionNumber1);
      VersionNumber versionNumber2 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      VersionNumber versionNumber3 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber3.toString();
      versionNumber1.toString();
      VersionNumber versionNumber4 = new VersionNumber(genericDescriptorList0, genericDescriptorList0);
      versionNumber3.compareTo(versionNumber1);
      LinkedList<VersionNumberComponent> linkedList0 = new LinkedList<VersionNumberComponent>();
      VersionNumberComponent versionNumberComponent0 = mock(VersionNumberComponent.class, new ViolatedAssumptionAnswer());
      linkedList0.add(versionNumberComponent0);
      VersionNumber versionNumber5 = new VersionNumber(linkedList0, genericDescriptorList0);
      VersionNumber versionNumber6 = new VersionNumber(genericDescriptorList0);
      // Undeclared exception!
      try { 
        versionNumber2.compareTo(versionNumber6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.commons.version.VersionNumber", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer(" ADD ");
      tableContainer0.getSequences(false);
      tableContainer0.getComponents();
      tableContainer0.setName((String) null);
      ArrayList<ContainerComponent> arrayList0 = new ArrayList<ContainerComponent>();
      tableContainer0.getTables(true);
      TableContainer tableContainer1 = new TableContainer((String) null, tableContainer0);
      tableContainer1.isIdentical(tableContainer0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "select intoizz*(re60fu=isy1fm");
      tableContainer1.getTables(false);
      tableContainer1.getTables(false);
      tableContainer0.toString();
      tableContainer0.getTables();
      tableContainer1.toString();
      String string0 = SQLUtil.typeAndName(tableContainer0);
      assertEquals("container null", string0);
      assertNotNull(string0);
      
      String string1 = SQLUtil.ownerDotComponent(tableContainer0);
      assertEquals("null", string1);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      StringReader stringReader0 = new StringReader("renamealter materialized viewu!q:xye'#l@j%(=");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      stringReader0.ready();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = 1.0;
      streamTokenizer1.parseNumbers();
      streamTokenizer0.whitespaceChars((-375488746), (-375488746));
      stringReader0.reset();
      streamTokenizer0.parseNumbers();
      streamTokenizer0.whitespaceChars((-4), (-4));
      String string0 = SQLUtil.normalize("-->\n", false);
      assertEquals("-- >", string0);
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      SQLUtil.normalize("Y8%l1c(I|`MS8", true);
      Random.setNextRandom((-2201));
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = SQLUtil.normalize("drop tablemerge into join x0y77.s as merge into on i},jyt}\"tgwxxn,*<;.i},jyt}\"tgwxxn,*<; = merge into .i},jyt}\"tgwxxn,*<; and i},jyt}\"tgwxxn,*<;.merge into = merge into .merge into", true);
      assertEquals("drop tablemerge into join x0y77.s as merge into on i }, jyt } \"tgwxxn,*<;.i},jyt}\" tgwxxn, * < ; = merge into.i }, jyt } \"tgwxxn,*<; and i},jyt}\" tgwxxn, * < ;.merge into = merge into.merge into", string0);
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      String string0 = SQLUtil.normalize("", false);
      assertEquals("", string0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String[] stringArray0 = new String[4];
      SQLUtil sQLUtil0 = new SQLUtil();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("IE #kS:%jm");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "CONTA4INED_ROLES", false, stringArray0);
      Boolean boolean0 = new Boolean(false);
      SQLUtil.constraintName(dBUniqueConstraint0);
      DataDictionaryImpl dataDictionaryImpl0 = new DataDictionaryImpl();
      CreateIndexNode createIndexNode0 = new CreateIndexNode();
      // Undeclared exception!
      try { 
        dataDictionaryImpl0.getTransactionCompile();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.catalog.DataDictionaryImpl", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      SQLUtil.normalize("create mayeriawized viewk1vp ~ f / / de arlofm", true);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getGC();
      constantActionActivation0.setParentActivation((Activation) null);
      constantActionActivation0.setGC((GeneratedClass) null);
      // Undeclared exception!
      try { 
        constantActionActivation0.getResultSetFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      SQLUtil.normalize("create mayeriawized v/ewk1vp ~ f / / de arlofm", true);
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getResultSetFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.203195655962931
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$L+oi.";
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      stringArray0[1] = "4c%W/g$L+oi.";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "4c%W/g$L+oi.");
      SQLUtil.join("4c%W/g$L+oi.", " REFERENCES ", stringArray0, "4c%W/g$L+oi.", "4c%W/g$L+oi.", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("4c%W/g$L+oi.");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("4c%W/g$L+oi. join 4c%W/g$L+oi. as 4c%W/g$L+oi. on  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .null = 4c%W/g$L+oi..null and  REFERENCES .null = 4c%W/g$L+oi..null", "4c%W/g$L+oi. = '4c%W/g$L+oi.' AND 4c%W/g$L+oi. = '4c%W/g$L+oi.' AND null = null AND null = null", versionNumber0);
      DBSchema dBSchema0 = new DBSchema("4c%W/g$L+oi. join 4c%W/g$L+oi. as 4c%W/g$L+oi. on  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .4c%W/g$L+oi. = 4c%W/g$L+oi..4c%W/g$L+oi. and  REFERENCES .null = 4c%W/g$L+oi..null and  REFERENCES .null = 4c%W/g$L+oi..null");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder("4c%W/g$L+oi.");
      DBCheckConstraint dBCheckConstraint0 = new DBCheckConstraint("4c%W/g$L+oi.", true, "4c%W/g$L+oi.", "deleteobjecttype");
      DBCheckConstraint dBCheckConstraint1 = new DBCheckConstraint(stringArray0[2], false, "#cF&(L", "insertdelete");
      dBCheckConstraint0.isEquivalent(dBCheckConstraint1);
      SQLUtil.appendConstraintName((DBConstraint) dBCheckConstraint0, stringBuilder0);
      System.setCurrentTimeMillis(0L);
      SQLUtil.join(" REFERENCES ", "=l", stringArray0, "select into", "inner", stringArray0);
      System.setCurrentTimeMillis(0L);
      SQLUtil.addOptionalCondition("select into", stringBuilder0);
      LinkedList<DBColumn> linkedList0 = new LinkedList<DBColumn>();
      // Undeclared exception!
      try { 
        SQLUtil.renderColumnNames((List<DBColumn>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.360380995184394
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = " REFERENCES ";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("truncate~y{*");
      DBUniqueConstraint dBUniqueConstraint0 = new DBUniqueConstraint(defaultDBTable0, "rO!oGo,Oi", true, stringArray0);
      dBUniqueConstraint0.setDoc("rO!oGo,Oi");
      dBUniqueConstraint0.isIdentical(defaultDBTable0);
      SQLUtil.constraintName(dBUniqueConstraint0);
      DBUniqueConstraint dBUniqueConstraint1 = defaultDBTable0.getUniqueConstraint(stringArray0);
      dBUniqueConstraint1.isIdentical(defaultDBTable0);
      dBUniqueConstraint1.setOwner(defaultDBTable0);
      dBUniqueConstraint1.setDoc("truncate~y{*");
      dBUniqueConstraint1.toString();
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBUniqueConstraint1, (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("yyyy-MM-dd'T'HH:mm:ss.");
      tableContainer0.getSchema();
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("yyyy-MM-dd'T'HH:mm:ss.", (DBSchema) null);
      defaultDBTable0.getUniqueConstraint((String[]) null);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.createConstraintSpecBuilder((DBConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 91
  /*Coverage entropy=1.8976492786748422
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      int int0 = 39;
      DefaultDBTable defaultDBTable0 = new DefaultDBTable((String) null);
      String[] stringArray0 = new String[7];
      stringArray0[0] = null;
      stringArray0[1] = null;
      stringArray0[2] = "G7$3MYb]0";
      stringArray0[3] = "";
      stringArray0[4] = null;
      stringArray0[5] = "create materialized viewk1v p ~ f / / de arlofm";
      stringArray0[6] = "create materialized viewk1v p ~ f / / de arlofm";
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("create materialized viewk1v p ~ f / / de arlofm", false, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      NameSpec nameSpec0 = NameSpec.NEVER;
      StringBuilder stringBuilder0 = SQLUtil.createConstraintSpecBuilder(dBForeignKeyConstraint0, nameSpec0);
      DBForeignKeyConstraint dBForeignKeyConstraint1 = new DBForeignKeyConstraint("G7$3MYb]0", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(39, (Object) dBForeignKeyConstraint1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 39
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String[] stringArray0 = new String[6];
      SQLUtil.join((String) null, "delete", stringArray0, "delete", "4cW/J$L+oi.", stringArray0);
      FromVTI fromVTI0 = new FromVTI();
      FromVTI fromVTI1 = new FromVTI();
      // Undeclared exception!
      try { 
        fromVTI1.getNodeFactory();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.compile.QueryTreeNode", e);
      }
  }

  /**
  //Test case number: 93
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder();
      JMXPrincipal jMXPrincipal0 = new JMXPrincipal("42Y09");
      String string0 = SQLUtil.substituteMarkers("fm(#L#TZ,s*~fd", "FIXED_PREC_SCALE", jMXPrincipal0);
      assertEquals("fm(#L#TZ,s*~fd", string0);
  }

  /**
  //Test case number: 94
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      String[] stringArray0 = new String[8];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("begin p rameter #", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("begin p rameter #");
      VersionNumber versionNumber1 = VersionNumber.valueOf("begin p rameter #");
      versionNumber0.compareTo(versionNumber1);
      versionNumber1.compareTo(versionNumber0);
      versionNumber1.compareTo(versionNumber0);
      VersionNumber versionNumber2 = VersionNumber.valueOf((String) null);
      VersionNumber.valueOf("?, ?");
      versionNumber0.toString();
      versionNumber0.compareTo(versionNumber2);
      versionNumber1.compareTo(versionNumber0);
      versionNumber1.toString();
      versionNumber1.toString();
      versionNumber0.toString();
      versionNumber1.toString();
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setName("begin p rameter #");
      FKChangeRule fKChangeRule1 = FKChangeRule.NO_ACTION;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.appendConstraintName((DBConstraint) dBForeignKeyConstraint0, (StringBuilder) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 95
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Random.setNextRandom(42);
      // Undeclared exception!
      try { 
        SQLUtil.isDDL((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 96
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-6);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      String[] stringArray0 = new String[4];
      stringArray0[0] = "4c%W/g$ZL+oi.";
      boolean boolean0 = SQLUtil.isDDL(" REFERENCES ");
      assertFalse(boolean0);
  }

  /**
  //Test case number: 97
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-36);
      byteArray0[1] = (byte) (-5);
      byteArray0[2] = (byte) (-97);
      byteArray0[3] = (byte)41;
      byteArray0[4] = (byte)10;
      byteArray0[5] = (byte) (-28);
      byteArray0[6] = (byte) (-29);
      byteArray0[7] = (byte) (-6);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      DBSchema dBSchema0 = new DBSchema("S/S&'+Y#Q=$Pr");
      DefaultDBTable defaultDBTable0 = new DefaultDBTable("S/S&'+Y#Q=$Pr", dBSchema0);
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn("org.hsqldb.jdbc.jdbcResultSetMetaData", defaultDBTable0, (byte) (-29), "4c%W/g$ZL+oi.");
      defaultDBColumn0.getNotNullConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.ownerDotComponent((DBObject) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 98
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      String[] stringArray0 = new String[7];
      stringArray0[0] = "alter indexselect intose";
      stringArray0[1] = "alter indexselect intose";
      stringArray0[2] = "alter indexselect intose";
      stringArray0[3] = "alter indexselect intose";
      stringArray0[4] = "alter indexselect intose";
      stringArray0[5] = "alter indexselect intose";
      stringArray0[6] = "alter indexselect intose";
      Boolean boolean0 = SQLUtil.mutatesStructure("alter indexselect intose");
      assertTrue(boolean0);
  }

  /**
  //Test case number: 99
  /*Coverage entropy=2.322122307526584
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      SQLUtil.mutatesDataOrStructure(" REFERENCES ");
      PipedReader pipedReader0 = new PipedReader();
      ErrorMessages errorMessages0 = new ErrorMessages();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1532, 481, 481, (-2556), 75, 75);
      String string0 = "`";
      try { 
        errorMessages0.getTimestamp("`", (Calendar) mockGregorianCalendar0);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getTimestamp
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.7315797140115936
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      ErrorMessages errorMessages0 = new ErrorMessages();
      VersionNumber versionNumber0 = VersionNumber.valueOf("exccute%?d");
      String string0 = "alter tableorg.apache.derby.impl.store.access.sort.sortbuffer";
      SQLUtil.mutatesDataOrStructure("alter tableorg.apache.derby.impl.store.access.sort.sortbuffer");
      ConstraintDescriptorList constraintDescriptorList0 = new ConstraintDescriptorList();
      VersionNumber versionNumber1 = new VersionNumber(constraintDescriptorList0);
      versionNumber0.toString();
      try { 
        errorMessages0.getUnicodeStream(3355);
        fail("Expecting exception: SQLException");
      
      } catch(SQLException e) {
         //
         // getUnicodeStream
         //
         verifyException("org.apache.derby.vti.VTITemplate", e);
      }
  }

  /**
  //Test case number: 101
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      // Undeclared exception!
      try { 
        SQLUtil.renderColumn((DBColumn) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      NameSpec nameSpec0 = NameSpec.ALWAYS;
      // Undeclared exception!
      try { 
        SQLUtil.ukSpec((DBUniqueConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 103
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String[] stringArray0 = new String[4];
      DefaultDBTable defaultDBTable0 = new DefaultDBTable();
      DBForeignKeyConstraint dBForeignKeyConstraint0 = new DBForeignKeyConstraint("begin parameter #", true, defaultDBTable0, stringArray0, defaultDBTable0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("begin parameter #");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase("begin parameter #", "begin parameter #", versionNumber0);
      VersionNumber versionNumber1 = VersionNumber.valueOf("begin parameter #");
      versionNumber0.compareTo(versionNumber1);
      versionNumber0.toString();
      defaultDatabase0.getCatalogs();
      defaultDatabase0.getTables();
      defaultDatabase0.getCatalog("dr=p indereferenceOs");
      versionNumber1.toString();
      dBForeignKeyConstraint0.isIdentical((DBObject) null);
      FKChangeRule fKChangeRule0 = FKChangeRule.SET_NULL;
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule0);
      dBForeignKeyConstraint0.setName("43X03.U");
      FKChangeRule fKChangeRule1 = FKChangeRule.SET_DEFAULT;
      Random.setNextRandom(0);
      dBForeignKeyConstraint0.setUpdateRule(fKChangeRule1);
      NameSpec nameSpec0 = NameSpec.NEVER;
      defaultDBTable0.getPrimaryKeyConstraint();
      // Undeclared exception!
      try { 
        SQLUtil.pkSpec((DBPrimaryKeyConstraint) null, nameSpec0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 104
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      SQLUtil.removeComments("");
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      constantActionActivation0.getContextManager();
      BTreeController bTreeController0 = new BTreeController();
      bTreeController0.getXactMgr();
      GenericLanguageFactory genericLanguageFactory0 = new GenericLanguageFactory();
      GenericLanguageConnectionFactory genericLanguageConnectionFactory0 = new GenericLanguageConnectionFactory();
      SlaveDatabase slaveDatabase0 = new SlaveDatabase();
      GenericLanguageConnectionContext genericLanguageConnectionContext0 = null;
      try {
        genericLanguageConnectionContext0 = new GenericLanguageConnectionContext((ContextManager) null, (TransactionController) null, genericLanguageFactory0, genericLanguageConnectionFactory0, slaveDatabase0, " COMMENT ", (-1610612734), "", " COMMENT ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.iapi.services.context.ContextImpl", e);
      }
  }

  /**
  //Test case number: 105
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      char[] charArray0 = new char[6];
      charArray0[0] = '3';
      charArray0[1] = 'u';
      charArray0[4] = 'L';
      charArray0[5] = '0';
      DBSchema dBSchema0 = new DBSchema("nestedReadOnlyUserTransaction");
      DBPackage dBPackage0 = new DBPackage("create unique indexp}6k<oatnmtt_f_=0", dBSchema0);
      DBProcedure dBProcedure0 = new DBProcedure("4c%W/g$L+oi.", dBPackage0);
      String string0 = SQLUtil.ownerDotComponent(dBProcedure0);
      assertEquals("create unique indexp}6k<oatnmtt_f_=0.4c%W/g$L+oi.", string0);
  }

  /**
  //Test case number: 106
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      SQLUtil.isQuery("OBJECTTYPE");
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      ConstantActionActivation constantActionActivation1 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation1.getMethod("OBJECTTYPE");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 107
  /*Coverage entropy=1.6593340983935647
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      DefaultDBTable defaultDBTable0 = new DefaultDBTable(" REFERENCES ");
      DBDataType dBDataType0 = DBDataType.getInstance((-1075), "call");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Integer integer0 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer integer1 = RawTransaction.SAVEPOINT_ROLLBACK;
      Integer.compare(41, (-1075));
      DefaultDBColumn defaultDBColumn0 = new DefaultDBColumn(" REFERENCES ", defaultDBTable0, dBDataType0, integer0, integer1);
      defaultDBColumn0.isEquivalent(defaultDBTable0);
      String string0 = defaultDBColumn0.toString();
      assertEquals(" REFERENCES  : CALL(2,2)", string0);
      
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Integer.max(2484, 634);
      byte[] byteArray0 = new byte[3];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      NetworkHandling.sendDataOnTcp((EvoSuiteLocalAddress) null, byteArray0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, " REFERENCES ");
      System.setCurrentTimeMillis(3434L);
      String[] stringArray0 = new String[1];
      stringArray0[0] = " REFERENCES  : CALL(2,2)";
      String string1 = SQLUtil.renderQuery(defaultDBTable0, stringArray0, stringArray0);
      assertEquals("SELECT * FROM  REFERENCES  WHERE  REFERENCES  : CALL(2,2) = ' REFERENCES  : CALL(2,2)'", string1);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.588216618879624
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      SQLUtil.isDML("8>zyb");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "<");
      String[] stringArray0 = new String[0];
      SQLUtil.join("{BNUqi9u\"xg`", "8>zyb", stringArray0, "YReA", "MERGE INTO ", stringArray0);
      SQLUtil.renderWhereClause(stringArray0, stringArray0);
      VersionNumber versionNumber0 = VersionNumber.valueOf("{BNUqi9u\"xg` join YReA as MERGE INTO  on ");
      DefaultDatabase defaultDatabase0 = new DefaultDatabase((String) null, "--", versionNumber0);
      DBSchema dBSchema0 = new DBSchema("{BNUqi9u\"xg` join YReA as MERGE INTO  on ");
      String string0 = "select into";
      SQLUtil.mutatesDataOrStructure("select into");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      StringBuilder stringBuilder0 = new StringBuilder("{BNUqi9u\"xg` join YReA as MERGE INTO  on ");
      // Undeclared exception!
      try { 
        SQLUtil.isProcedureCall((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 109
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[0] = object0;
      Object object1 = new Object();
      objectArray0[1] = object1;
      Object object2 = new Object();
      objectArray0[2] = object2;
      Object object3 = new Object();
      objectArray0[3] = object3;
      Object object4 = new Object();
      objectArray0[4] = object4;
      Object object5 = new Object();
      objectArray0[5] = object5;
      Object object6 = new Object();
      objectArray0[6] = object6;
      Object object7 = new Object();
      objectArray0[7] = object7;
      Object object8 = new Object();
      objectArray0[8] = object8;
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause((String[]) null, objectArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 110
  /*Coverage entropy=1.1273525491449161
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "m')";
      stringArray0[1] = "callcall";
      stringArray0[2] = "create materialized view";
      stringArray0[3] = "select";
      stringArray0[4] = "{&ILua5$x3.Q^m&&})";
      stringArray0[5] = "u#Sv}S!N#'W";
      stringArray0[6] = "";
      stringArray0[7] = "\"f";
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "\"f";
      objectArray0[2] = (Object) "m')";
      // Undeclared exception!
      try { 
        SQLUtil.renderWhereClause(stringArray0, objectArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 111
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      String string0 = " REFERENCES ";
      String string1 = "<;5Ni";
      StringBuilder stringBuilder0 = null;
      // Undeclared exception!
      try { 
        SQLUtil.addRequiredCondition("create materialized view", (StringBuilder) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }

  /**
  //Test case number: 112
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String[] stringArray0 = new String[4];
      stringArray0[0] = ".ED+CezTI";
      stringArray0[1] = ".ED+CezTI";
      stringArray0[2] = ".ED+CezTI";
      stringArray0[3] = ".ED+CezTI";
      String string0 = SQLUtil.innerJoin(".ED+CezTI", stringArray0, ".ED+CezTI", "LJwSEa+4/SDnuq", stringArray0);
      assertEquals(".ED+CezTI as LJwSEa+4/SDnuq on .ED+CezTI..ED+CezTI = LJwSEa+4/SDnuq..ED+CezTI and .ED+CezTI..ED+CezTI = LJwSEa+4/SDnuq..ED+CezTI and .ED+CezTI..ED+CezTI = LJwSEa+4/SDnuq..ED+CezTI and .ED+CezTI..ED+CezTI = LJwSEa+4/SDnuq..ED+CezTI", string0);
  }

  /**
  //Test case number: 113
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder(0);
      stringBuilder0.codePoints();
      stringBuilder0.appendCodePoint(1006);
      stringBuilder0.appendCodePoint(543);
      stringBuilder0.append(1357.6297132);
      SQLUtil.addRequiredCondition("truncate", stringBuilder0);
      assertEquals("\u03EE\u021F1357.6297132 and truncate", stringBuilder0.toString());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      int int0 = 4462;
      StringBuilder stringBuilder0 = new StringBuilder(4462);
      String string0 = " ";
      SQLUtil.addRequiredCondition(" ", stringBuilder0);
      int int1 = (-2);
      int int2 = 170;
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-2), 170);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 115
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String[] stringArray0 = new String[8];
      stringArray0[0] = "execrnl{rrk8y";
      stringArray0[1] = "execrnl{rrk8y";
      stringArray0[2] = "execrnl{rrk8y";
      stringArray0[3] = "execrnl{rrk8y";
      stringArray0[4] = "execrnl{rrk8y";
      stringArray0[5] = "execrnl{rrk8y";
      stringArray0[6] = "execrnl{rrk8y";
      stringArray0[7] = "execrnl{rrk8y";
      String string0 = SQLUtil.innerJoin("execrnl{rrk8y", stringArray0, "lT6>ve74_Ys", "lT6>ve74_Ys", stringArray0);
      assertEquals("lT6>ve74_Ys as lT6>ve74_Ys on execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y and execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y and execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y and execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y and execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y and execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y and execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y and execrnl{rrk8y.execrnl{rrk8y = lT6>ve74_Ys.execrnl{rrk8y", string0);
  }

  /**
  //Test case number: 116
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "4c%W/g$L+oi.";
      String string1 = "truncate";
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append("truncate");
      StringBuilder stringBuilder2 = SQLUtil.addOptionalCondition("truncate", stringBuilder1);
      // Undeclared exception!
      try { 
        stringBuilder2.delete((-534558422), (-534558422));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -534558422
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  /**
  //Test case number: 117
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      String string0 = "callselect into";
      SQLUtil.isDML("callselect into");
      int int0 = 1532;
      int int1 = 4741;
      ConstantActionActivation constantActionActivation0 = new ConstantActionActivation();
      // Undeclared exception!
      try { 
        constantActionActivation0.getMethod("callselect into");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.derby.impl.sql.execute.BaseActivation", e);
      }
  }

  /**
  //Test case number: 118
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      TableContainer tableContainer0 = new TableContainer("alter indexkv@ja0px");
      tableContainer0.getTable("FULL");
      String[] stringArray0 = new String[9];
      stringArray0[0] = "alter indexkv@ja0px";
      stringArray0[1] = "alter indexkv@ja0px";
      stringArray0[2] = "E|gLq}`7jq";
      stringArray0[3] = "FULL";
      stringArray0[4] = "alter indexkv@ja0px";
      stringArray0[5] = "FULL";
      stringArray0[6] = "alter indexkv@ja0px";
      stringArray0[7] = "FULL";
      stringArray0[8] = "alter indexkv@ja0px";
      // Undeclared exception!
      try { 
        SQLUtil.renderQuery((DBTable) null, stringArray0, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.databene.jdbacl.SQLUtil", e);
      }
  }
}
