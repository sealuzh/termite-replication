/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 02:33:16 GMT 2019
 */

package com.werken.saxpath;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.werken.saxpath.Token;
import com.werken.saxpath.XPathLexer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XPathLexer_ESTest extends XPathLexer_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.6851214780864807
  */
  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.consume(118);
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer(" dxew0M9+o");
      xPathLexer1.isIdentifierStartChar('^');
      xPathLexer1.identifier();
      xPathLexer1.colon();
      xPathLexer1.identifier();
      xPathLexer1.operatorName();
      xPathLexer1.minus();
      xPathLexer1.consume();
      xPathLexer1.consume((-2334));
      xPathLexer1.minus();
      xPathLexer1.star();
      xPathLexer1.at();
      // Undeclared exception!
      try { 
        xPathLexer1.dots();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.6310476799532583
  */
  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" n$e;)f9Jq/");
      xPathLexer0.consume();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.identifier();
      xPathLexer0.dollar();
      xPathLexer0.number();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer0.LA(65535);
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-4268));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.1116524612569587
  */
  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.not();
      String string0 = token1.toString();
      assertEquals("[ (23) (V)", string0);
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.notEquals();
      String string1 = token3.toString();
      assertEquals("[ (22) (m,)", string1);
      
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("EEh8Ul0=,0E", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.dollar();
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.dollar();
      xPathLexer0.and();
      xPathLexer2.dollar();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token6 = xPathLexer5.pipe();
      assertEquals("A", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("[ (22) (m,)");
      Token token7 = xPathLexer5.nextToken();
      assertEquals("V", token7.getTokenText());
      assertEquals(15, token7.getTokenType());
      
      Token token8 = xPathLexer6.dollar();
      assertEquals(26, token8.getTokenType());
      
      Token token9 = xPathLexer0.equals();
      assertEquals(21, token9.getTokenType());
      assertEquals("E", token9.getTokenText());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer6.doubleColon();
      assertEquals(19, token10.getTokenType());
      assertEquals(" (", token10.getTokenText());
      
      Token token11 = xPathLexer5.leftBracket();
      assertEquals(3, token11.getTokenType());
      assertEquals("|", token11.getTokenText());
      
      boolean boolean0 = xPathLexer7.isIdentifierStartChar('V');
      assertTrue(boolean0);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.616579503168439
  */
  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      xPathLexer0.slashes();
      xPathLexer0.whitespace();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.not();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer0.not();
      xPathLexer0.mod();
      xPathLexer0.consume(118);
      xPathLexer0.consume();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.getPreviousToken();
      xPathLexer0.plus();
      XPathLexer xPathLexer1 = new XPathLexer(" dxew0M9+o");
      xPathLexer1.isIdentifierStartChar('^');
      xPathLexer1.identifier();
      xPathLexer1.dollar();
      xPathLexer1.colon();
      xPathLexer1.operatorName();
      xPathLexer1.consume();
      xPathLexer1.consume((-2334));
      xPathLexer1.minus();
      xPathLexer1.star();
      // Undeclared exception!
      try { 
        xPathLexer1.div();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=3.366425613004362
  */
  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-1829));
      xPathLexer0.rightParen();
      xPathLexer0.leftParen();
      xPathLexer0.star();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        xPathLexer0.mod();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.3480317535846464
  */
  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.comma();
      assertEquals("<", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("xb", token3.getTokenText());
      assertEquals(19, token3.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(30, token4.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      Token token5 = xPathLexer0.dollar();
      assertEquals("c", token5.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.consume();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      assertEquals("N", token6.getTokenText());
      
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token7 = xPathLexer1.plus();
      assertEquals("2", token7.getTokenText());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("j#=#v}fPr%|");
      xPathLexer0.nextToken();
      Token token9 = xPathLexer4.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer3.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer4.equals();
      assertEquals("#", token11.getTokenText());
      
      xPathLexer0.mod();
      Token token12 = xPathLexer3.pipe();
      assertEquals(17, token12.getTokenType());
      
      Token token13 = xPathLexer3.dots();
      assertEquals(13, token13.getTokenType());
      
      Token token14 = xPathLexer3.at();
      assertEquals(16, token14.getTokenType());
      
      Token token15 = xPathLexer2.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer1.star();
      assertEquals(20, token16.getTokenType());
      assertEquals("U", token16.getTokenText());
      
      Token token17 = xPathLexer3.identifier();
      assertEquals(15, token17.getTokenType());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.1105740442694625
  */
  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",RDYyOZ<{p5");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.hasMoreChars();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer1.pipe();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer(",RDYyOZ<{p5");
      xPathLexer3.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer(",RDYyOZ<{p5");
      xPathLexer0.dollar();
      xPathLexer4.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.minus();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.doubleColon();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      xPathLexer7.leftBracket();
      xPathLexer4.slashes();
      xPathLexer7.notEquals();
      xPathLexer2.comma();
      xPathLexer5.rightParen();
      Token token0 = xPathLexer1.div();
      assertNull(token0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.2421949430946224
  */
  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("4W", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      xPathLexer0.colon();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("*ZLGk#H!0,+\"");
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("bFIVB", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.minus();
      assertEquals(6, token3.getTokenType());
      
      xPathLexer0.dollar();
      Token token4 = xPathLexer1.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("Z", token4.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      xPathLexer0.operatorName();
      Token token6 = xPathLexer1.dollar();
      assertEquals("L", token6.getTokenText());
      
      xPathLexer2.div();
      Token token7 = xPathLexer1.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("G", token7.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("@4WMbFIVB");
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer3.consume();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.comma();
      assertEquals(32, token8.getTokenType());
      
      Token token9 = xPathLexer4.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer4.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer1.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer4.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer2.or();
      xPathLexer1.identifier();
      xPathLexer3.doubleColon();
      xPathLexer0.and();
      Token token13 = xPathLexer1.rightParen();
      assertEquals("!", token13.getTokenText());
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer3.doubleColon();
      assertEquals("Mb", token14.getTokenText());
      assertEquals(19, token14.getTokenType());
      
      Token token15 = xPathLexer1.slashes();
      assertEquals(11, token15.getTokenType());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9340788813727547
  */
  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      xPathLexer1.relationalOperator();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer("=6$a,R<8;y[dkhsF*r)");
      xPathLexer3.div();
      xPathLexer1.dollar();
      xPathLexer0.mod();
      xPathLexer0.consume();
      XPathLexer xPathLexer4 = new XPathLexer("=6$a,R<8;y[dkhsF*r)");
      xPathLexer4.consume();
      xPathLexer1.slashes();
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer0.plus();
      xPathLexer0.rightBracket();
      xPathLexer3.pipe();
      xPathLexer4.consume((-4146));
      xPathLexer4.star();
      XPathLexer xPathLexer6 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer6.nextToken();
      xPathLexer3.dollar();
      xPathLexer4.equals();
      // Undeclared exception!
      try { 
        xPathLexer4.mod();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.973221983885811
  */
  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token0 = xPathLexer0.leftBracket();
      Token token1 = xPathLexer0.minus();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.at();
      xPathLexer0.notEquals();
      String string0 = token1.toString();
      assertEquals("[ (6) (2)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (16) (<)", string1);
      
      Token token3 = xPathLexer0.leftParen();
      assertEquals("b", token3.getTokenText());
      assertEquals(1, token3.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("[ (6) (2)");
      Token token5 = xPathLexer1.colon();
      assertEquals("[", token5.getTokenText());
      assertEquals(18, token5.getTokenType());
      
      String string2 = token0.toString();
      assertEquals("[ (3) (N)", string2);
      
      Token token6 = xPathLexer0.slashes();
      String string3 = token6.toString();
      assertEquals("[ (11) (I)", string3);
      
      Token token7 = xPathLexer0.star();
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals(" ", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token9 = xPathLexer1.identifier();
      xPathLexer2.relationalOperator();
      Token token10 = xPathLexer2.whitespace();
      assertEquals((-2), token10.getTokenType());
      
      xPathLexer2.setPreviousToken(token9);
      assertEquals(15, token9.getTokenType());
      
      xPathLexer0.setPreviousToken(token7);
      assertEquals(20, token7.getTokenType());
      
      xPathLexer1.at();
      xPathLexer1.nextToken();
      Token token11 = xPathLexer2.not();
      assertEquals(23, token11.getTokenType());
      
      Token token12 = xPathLexer2.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      xPathLexer2.slashes();
      Token token13 = xPathLexer0.comma();
      assertEquals(32, token13.getTokenType());
      
      Token token14 = xPathLexer0.number();
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5176791420007127
  */
  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("N", token0.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token1 = xPathLexer1.nextToken();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer1.rightParen();
      assertEquals("<", token2.getTokenText());
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer1.at();
      assertEquals(16, token3.getTokenType());
      assertEquals("9", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token4 = xPathLexer4.leftBracket();
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer1.slashes();
      assertEquals("x", token5.getTokenText());
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals("<9", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token7 = xPathLexer5.comma();
      assertEquals(32, token7.getTokenType());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.789071579480532
  */
  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-2152));
      // Undeclared exception!
      try { 
        xPathLexer0.number();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.121627603217228
  */
  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|OGl47e8'5Qw%");
      xPathLexer0.at();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("|OGl47e8'5Qw%");
      xPathLexer1.colon();
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer1.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.dollar();
      xPathLexer1.colon();
      xPathLexer1.operatorName();
      xPathLexer2.relationalOperator();
      xPathLexer2.colon();
      xPathLexer1.operatorName();
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("kPky X.OAk>m");
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer3.equals();
      xPathLexer3.and();
      xPathLexer1.dollar();
      xPathLexer1.nextToken();
      xPathLexer3.dots();
      xPathLexer1.equals();
      xPathLexer3.rightBracket();
      xPathLexer0.comma();
      XPathLexer xPathLexer4 = new XPathLexer("kPky X.OAk>m");
      xPathLexer0.slashes();
      Token token0 = xPathLexer3.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2310727396943997
  */
  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.consume();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("#f*}K={wk{YK");
      xPathLexer2.slashes();
      xPathLexer1.dollar();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer1.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer2.slashes();
      xPathLexer3.mod();
      xPathLexer1.dots();
      xPathLexer2.at();
      XPathLexer xPathLexer5 = new XPathLexer("eA1pHl#2fZ g&");
      xPathLexer5.consume((-1100));
      xPathLexer5.leftBracket();
      XPathLexer xPathLexer6 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer6.equals();
      xPathLexer5.rightBracket();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.093989815497029
  */
  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",RDYyOZ<{p5");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer1.pipe();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer(",RDYyOZ<{p5");
      Token token2 = xPathLexer3.nextToken();
      assertEquals(",", token2.getTokenText());
      
      xPathLexer1.dollar();
      XPathLexer xPathLexer4 = new XPathLexer(",RDYyOZ<{p5");
      Token token3 = xPathLexer0.dollar();
      assertEquals("5", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      Token token4 = xPathLexer4.equals();
      assertEquals(21, token4.getTokenType());
      assertEquals(",", token4.getTokenText());
      
      Token token5 = xPathLexer4.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("R", token5.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token6 = xPathLexer5.minus();
      assertEquals(6, token6.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token7 = xPathLexer6.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token8 = xPathLexer7.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer4.slashes();
      assertEquals(11, token9.getTokenType());
      assertEquals("D", token9.getTokenText());
      
      Token token10 = xPathLexer7.notEquals();
      assertEquals(22, token10.getTokenType());
      
      Token token11 = xPathLexer2.comma();
      assertEquals(32, token11.getTokenType());
      
      xPathLexer3.mod();
      Token token12 = xPathLexer4.not();
      assertEquals("Y", token12.getTokenText());
      assertEquals(23, token12.getTokenType());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.9056866966024417
  */
  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      xPathLexer0.relationalOperator();
      xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.number();
      xPathLexer0.pipe();
      xPathLexer0.dots();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume();
      xPathLexer0.setXPath("@4WMbFIVB");
      xPathLexer0.slashes();
      xPathLexer0.nextToken();
      xPathLexer0.not();
      xPathLexer0.rightParen();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      Token token0 = new Token(32, "", 1935, 28);
      XPathLexer xPathLexer1 = new XPathLexer("w*k");
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("w*k");
      xPathLexer2.endPosition();
      XPathLexer xPathLexer3 = new XPathLexer("Wa2!oaAA[J%1{");
      xPathLexer3.pipe();
      xPathLexer3.nextToken();
      xPathLexer1.consume((-53));
      xPathLexer1.not();
      // Undeclared exception!
      try { 
        xPathLexer1.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9632625100068495
  */
  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer1.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      Token token0 = xPathLexer0.dollar();
      assertEquals("\"", token0.getTokenText());
      
      Token token1 = xPathLexer0.colon();
      assertEquals(18, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      xPathLexer2.operatorName();
      xPathLexer2.relationalOperator();
      Token token2 = xPathLexer2.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      xPathLexer2.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("");
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer0.pipe();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.nextToken();
      Token token4 = xPathLexer3.dollar();
      assertEquals(26, token4.getTokenType());
      
      xPathLexer4.relationalOperator();
      Token token5 = xPathLexer1.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      xPathLexer3.or();
      xPathLexer1.equals();
      Token token7 = xPathLexer4.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (");
      Token token8 = xPathLexer1.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("?", token9.getTokenText());
      
      Token token10 = xPathLexer1.minus();
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer4.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer1.equals();
      assertEquals(21, token12.getTokenType());
      
      Token token13 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token13);
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.093350605574723
  */
  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.colon();
      assertEquals("M", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      
      xPathLexer0.div();
      Token token3 = xPathLexer0.dollar();
      assertEquals("<", token3.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.dollar();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("MLpv8bZQZr<g| 3");
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token4 = xPathLexer0.pipe();
      assertEquals(" ", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer3.dollar();
      assertEquals(26, token6.getTokenType());
      
      xPathLexer1.equals();
      Token token7 = xPathLexer2.leftBracket();
      assertEquals("M", token7.getTokenText());
      
      xPathLexer2.and();
      xPathLexer3.or();
      Token token8 = xPathLexer3.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      xPathLexer0.and();
      Token token10 = xPathLexer3.rightParen();
      assertEquals(2, token10.getTokenType());
      
      Token token11 = xPathLexer2.rightBracket();
      assertEquals("L", token11.getTokenText());
      assertEquals(4, token11.getTokenType());
      
      Token token12 = xPathLexer3.plus();
      assertEquals(5, token12.getTokenType());
      
      xPathLexer0.leftBracket();
      Token token13 = xPathLexer0.leftParen();
      assertEquals(1, token13.getTokenType());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.91678860253606
  */
  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.number();
      Token token1 = xPathLexer0.pipe();
      assertEquals("M", token1.getTokenText());
      
      Token token2 = xPathLexer0.dots();
      assertEquals("b", token2.getTokenText());
      assertEquals(13, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      assertEquals("F", token3.getTokenText());
      assertEquals(20, token3.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("@4WMbFIVB");
      Token token4 = xPathLexer0.slashes();
      assertEquals("@", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(30, token5.getTokenType());
      
      Token token6 = xPathLexer0.colon();
      assertEquals(18, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightParen();
      assertEquals("M", token7.getTokenText());
      assertEquals(2, token7.getTokenType());
      
      xPathLexer0.notEquals();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals("IV", token8.getTokenText());
      assertEquals(19, token8.getTokenType());
      
      String string0 = token0.toString();
      assertEquals("[ (22) (@4)", string0);
      
      Token token9 = xPathLexer0.leftParen();
      assertEquals("B", token9.getTokenText());
      
      Token token10 = xPathLexer0.comma();
      assertEquals(32, token10.getTokenType());
      
      Token token11 = xPathLexer0.dollar();
      assertEquals(26, token11.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token12 = xPathLexer1.pipe();
      assertEquals(17, token12.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("`^4!e?YAf8NcW`D>");
      Token token13 = xPathLexer2.nextToken();
      assertEquals("`^4!e?YAf8NcW`D>", token13.getTokenText());
      
      xPathLexer1.notEquals();
      Token token14 = xPathLexer2.equals();
      assertEquals("`", token14.getTokenText());
      assertEquals(21, token14.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (22) (@4)");
      XPathLexer xPathLexer4 = new XPathLexer("`^4!e?YAf8NcW`D>");
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.or();
      xPathLexer5.relationalOperator();
      XPathLexer xPathLexer6 = new XPathLexer("`^4!e?YAf8NcW`D>");
      xPathLexer1.consume();
      xPathLexer2.consume(2);
      Token token15 = xPathLexer2.minus();
      assertEquals(6, token15.getTokenType());
      assertEquals("!", token15.getTokenText());
      
      Token token16 = xPathLexer4.at();
      assertEquals(16, token16.getTokenType());
      assertEquals("`", token16.getTokenText());
      
      Token token17 = xPathLexer3.nextToken();
      assertEquals("[", token17.getTokenText());
      assertEquals(3, token17.getTokenType());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.148162755959086
  */
  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.literal();
      xPathLexer0.plus();
      xPathLexer0.not();
      xPathLexer0.div();
      xPathLexer0.literal();
      xPathLexer0.consume();
      xPathLexer0.dollar();
      xPathLexer0.consume((-2036));
      xPathLexer0.colon();
      xPathLexer0.plus();
      // Undeclared exception!
      try { 
        xPathLexer0.whitespace();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.8921799822098277
  */
  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.at();
      assertEquals(16, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("bg-|2.290Ol-n1@]Ezd");
      Token token1 = xPathLexer1.rightBracket();
      assertEquals("b", token1.getTokenText());
      assertEquals(4, token1.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer1.nextToken();
      assertEquals(6, token2.getTokenType());
      assertEquals("-", token2.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.dollar();
      Token token3 = xPathLexer0.not();
      assertEquals(23, token3.getTokenType());
      assertEquals(",", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      xPathLexer1.consume();
      xPathLexer1.currentPosition();
      Token token4 = xPathLexer1.slashes();
      assertEquals("2", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token5 = xPathLexer3.dollar();
      assertEquals(26, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals(".", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer("s4-w?&1IvI.q*Re$>");
      Token token7 = xPathLexer4.nextToken();
      assertEquals((-1), token7.getTokenType());
      
      Token token8 = xPathLexer2.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("NC){s%");
      Token token9 = xPathLexer0.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("Eh", token9.getTokenText());
      
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token11 = xPathLexer7.rightParen();
      assertEquals("A", token11.getTokenText());
      
      Token token12 = xPathLexer2.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer0.identifier();
      assertEquals("Ul0", token13.getTokenText());
      assertEquals(15, token13.getTokenType());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.818182611256504
  */
  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.or();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer1.colon();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      xPathLexer0.dollar();
      Token token0 = xPathLexer0.not();
      xPathLexer3.comma();
      xPathLexer1.consume();
      xPathLexer3.literal();
      xPathLexer2.dollar();
      xPathLexer3.doubleColon();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer1.pipe();
      xPathLexer3.leftBracket();
      xPathLexer2.and();
      xPathLexer4.or();
      xPathLexer1.equals();
      xPathLexer0.plus();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer0.and();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer4.comma();
      xPathLexer1.rightBracket();
      xPathLexer4.at();
      xPathLexer0.dots();
      xPathLexer2.comma();
      Token token1 = xPathLexer6.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.8289197954811751
  */
  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.at();
      Token token0 = xPathLexer0.not();
      assertEquals("V", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.whitespace();
      Token token2 = xPathLexer1.notEquals();
      assertEquals(22, token2.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (-2) ()", string0);
      
      xPathLexer1.currentPosition();
      Token token3 = xPathLexer0.identifierOrOperatorName();
      xPathLexer0.setPreviousToken(token3);
      assertEquals("m", token3.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("XgIa>t}/");
      xPathLexer2.identifierOrOperatorName();
      Token token4 = xPathLexer2.rightBracket();
      assertEquals(4, token4.getTokenType());
      assertEquals(">", token4.getTokenText());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("NPZ>VDsl");
      xPathLexer3.and();
      Token token5 = xPathLexer2.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("t", token5.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.whitespace();
      Token token6 = xPathLexer3.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer1.minus();
      assertEquals(6, token7.getTokenType());
      
      Token token8 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer2.dots();
      assertEquals("}", token9.getTokenText());
      
      Token token10 = xPathLexer5.dots();
      assertEquals(13, token10.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer6.getPreviousToken();
      xPathLexer2.and();
      char char0 = xPathLexer6.LA(111);
      assertEquals('\uFFFF', char0);
      
      Token token11 = xPathLexer4.at();
      assertEquals(16, token11.getTokenType());
      
      xPathLexer4.div();
      Token token12 = xPathLexer2.nextToken();
      assertEquals("/", token12.getTokenText());
      assertEquals(11, token12.getTokenType());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4602273600783087
  */
  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer1.nextToken();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer0.identifierOrOperatorName();
      Token token0 = xPathLexer1.equals();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.1966331836375286
  */
  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      xPathLexer2.rightBracket();
      xPathLexer1.consume(3593);
      xPathLexer0.consume();
      xPathLexer2.pipe();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.nextToken();
      xPathLexer1.dollar();
      xPathLexer1.equals();
      xPathLexer0.mod();
      xPathLexer2.at();
      xPathLexer0.plus();
      xPathLexer1.and();
      xPathLexer3.comma();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.208816235514552
  */
  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.colon();
      xPathLexer0.doubleColon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = new XPathLexer("#f*}K={wk{YK");
      xPathLexer2.slashes();
      xPathLexer1.dollar();
      xPathLexer0.consume();
      xPathLexer1.notEquals();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      xPathLexer3.identifierOrOperatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer3.pipe();
      xPathLexer2.slashes();
      xPathLexer3.mod();
      xPathLexer1.dots();
      xPathLexer2.at();
      XPathLexer xPathLexer5 = new XPathLexer("eA&1+pHl#fZ g&");
      xPathLexer5.consume((-1100));
      xPathLexer5.leftBracket();
      xPathLexer5.equals();
      xPathLexer5.rightBracket();
      Token token0 = xPathLexer2.and();
      assertNull(token0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.4567873725260063
  */
  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.rightBracket();
      xPathLexer0.and();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("MLpv8bZQZr<g| 3");
      token0.toString();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.and();
      Token token2 = xPathLexer0.comma();
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer1.equals();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=2.1011021361751694
  */
  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      xPathLexer0.leftBracket();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      Token token1 = xPathLexer0.doubleColon();
      xPathLexer0.or();
      Token token2 = xPathLexer0.colon();
      xPathLexer0.and();
      token2.toString();
      Token token3 = xPathLexer0.comma();
      String string0 = token3.toString();
      assertEquals("[ (32) (9)", string0);
      
      xPathLexer0.setPreviousToken(token3);
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.equals();
      String string1 = token2.toString();
      assertEquals("[ (18) (M)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (19) (w0)", string2);
      
      String string3 = token4.toString();
      assertEquals("[ (21) (+)", string3);
      
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("o", token5.getTokenText());
      
      xPathLexer0.comma();
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer(" dxew0M9+o");
      Token token8 = xPathLexer2.nextToken();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer2.equals();
      assertEquals("+", token9.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.doubleColon();
      Token token10 = xPathLexer1.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer0.dots();
      assertEquals(13, token12.getTokenType());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.0071832454119565
  */
  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("mV|m,EEh8Ul0T,0E");
      xPathLexer0.identifier();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("bg-|2.290Ol-n1@]Ezd");
      Token token0 = xPathLexer2.rightBracket();
      assertEquals("b", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer2.dollar();
      assertEquals(26, token1.getTokenType());
      assertEquals("g", token1.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer("d");
      xPathLexer3.and();
      xPathLexer3.pipe();
      Token token2 = xPathLexer3.slashes();
      assertEquals(11, token2.getTokenType());
      
      Token token3 = xPathLexer2.comma();
      assertEquals(32, token3.getTokenType());
      assertEquals("-", token3.getTokenText());
      
      xPathLexer3.pipe();
      xPathLexer3.at();
      Token token4 = xPathLexer1.whitespace();
      assertEquals((-2), token4.getTokenType());
      
      xPathLexer2.identifier();
      xPathLexer3.dots();
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("m", token5.getTokenText());
      
      Token token6 = xPathLexer2.minus();
      assertEquals("|", token6.getTokenText());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer0.dots();
      Token token7 = xPathLexer0.dots();
      assertEquals(13, token7.getTokenType());
      assertEquals("E", token7.getTokenText());
      
      Token token8 = xPathLexer0.identifierOrOperatorName();
      assertEquals("Eh8Ul0T", token8.getTokenText());
      
      xPathLexer0.getPreviousToken();
      xPathLexer2.and();
      Token token9 = xPathLexer3.identifierOrOperatorName();
      assertNotNull(token9);
      assertEquals(15, token9.getTokenType());
      
      char char0 = xPathLexer3.LA(111);
      assertEquals('\uFFFF', char0);
      
      xPathLexer2.and();
      xPathLexer2.at();
      xPathLexer2.div();
      Token token10 = xPathLexer2.nextToken();
      assertEquals(".290", token10.getTokenText());
      assertEquals(31, token10.getTokenType());
      
      Token token11 = xPathLexer3.minus();
      assertEquals(6, token11.getTokenType());
      
      Token token12 = xPathLexer2.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("O", token12.getTokenText());
      
      Token token13 = xPathLexer3.plus();
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer1.leftBracket();
      assertEquals(3, token14.getTokenType());
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.023034141932846
  */
  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      assertEquals(" ", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      assertEquals("", token1.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("w0M9", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      Token token3 = xPathLexer0.dollar();
      assertEquals("+", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer1.leftParen();
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer3.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer0.equals();
      Token token8 = xPathLexer2.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer3.and();
      xPathLexer1.or();
      Token token9 = xPathLexer2.equals();
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer2.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("");
      xPathLexer4.and();
      Token token11 = xPathLexer1.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer1.plus();
      assertEquals(5, token12.getTokenType());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.143021077123979
  */
  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("4W", token1.getTokenText());
      
      Token token2 = xPathLexer0.whitespace();
      assertEquals((-2), token2.getTokenType());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("IVB", token5.getTokenText());
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("@4WMbFIVB");
      Token token6 = xPathLexer2.doubleColon();
      assertEquals("@4", token6.getTokenText());
      
      xPathLexer0.rightBracket();
      xPathLexer1.dollar();
      xPathLexer1.and();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token7 = xPathLexer3.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer4.relationalOperator();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer1.at();
      xPathLexer1.at();
      Token token9 = xPathLexer2.plus();
      assertEquals("W", token9.getTokenText());
      assertEquals(5, token9.getTokenType());
      
      Token token10 = xPathLexer1.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      xPathLexer0.and();
      xPathLexer1.equals();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token11 = xPathLexer0.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer3.rightParen();
      assertEquals(2, token12.getTokenType());
      
      xPathLexer6.minus();
      Token token13 = xPathLexer0.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer0.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.953451335623793
  */
  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.equals();
      assertEquals(21, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      Token token1 = xPathLexer1.colon();
      assertEquals(18, token1.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer2.nextToken();
      assertEquals((-1), token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.div();
      Token token3 = xPathLexer0.dollar();
      assertEquals(".", token3.getTokenText());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      assertEquals("w", token4.getTokenText());
      
      Token token5 = xPathLexer3.comma();
      assertEquals(32, token5.getTokenType());
      
      xPathLexer1.consume();
      Token token6 = xPathLexer3.literal();
      assertNull(token6);
      
      xPathLexer2.dollar();
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token7 = xPathLexer1.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.nextToken();
      assertEquals("erken.saxpath.Token", token8.getTokenText());
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer3.dollar();
      assertEquals(26, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("Tf~7}}a$;js7Y=4g7");
      Token token10 = xPathLexer0.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer0.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token12 = xPathLexer6.leftBracket();
      assertEquals(3, token12.getTokenType());
      assertEquals("T", token12.getTokenText());
      
      xPathLexer1.dots();
      xPathLexer0.plus();
      xPathLexer0.nextToken();
      xPathLexer1.mod();
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token13 = xPathLexer8.dots();
      assertEquals(13, token13.getTokenType());
      assertEquals("c", token13.getTokenText());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.6841745685150735
  */
  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.notEquals();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.0226527177112246
  */
  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.or();
      Token token0 = xPathLexer0.not();
      assertEquals("L", token0.getTokenText());
      assertEquals(23, token0.getTokenType());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("pv8bZQZr", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      Token token2 = xPathLexer1.dollar();
      assertEquals(26, token2.getTokenType());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer3.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      Token token4 = xPathLexer2.at();
      assertEquals(16, token4.getTokenType());
      
      Token token5 = xPathLexer4.identifier();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("MLpv8bZQZr<g| 3");
      Token token6 = xPathLexer5.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("ML", token6.getTokenText());
      
      xPathLexer3.and();
      xPathLexer3.equals();
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer1.rightParen();
      assertEquals(2, token8.getTokenType());
      
      Token token9 = xPathLexer0.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("g", token9.getTokenText());
      
      Token token10 = xPathLexer1.rightBracket();
      assertEquals(4, token10.getTokenType());
      
      Token token11 = xPathLexer3.equals();
      assertEquals(21, token11.getTokenType());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.9870704720190582
  */
  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.at();
      Token token0 = xPathLexer0.not();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.notEquals();
      token1.toString();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      token1.toString();
      xPathLexer2.dollar();
      xPathLexer1.colon();
      xPathLexer1.operatorName();
      token1.toString();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("kPky X.OAk>m");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      Token token2 = xPathLexer1.equals();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        token2.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.799982994886288
  */
  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("bg-|2.290Ol-n1@]Ezd");
      xPathLexer2.rightBracket();
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.and();
      xPathLexer0.dollar();
      xPathLexer3.pipe();
      xPathLexer2.endPosition();
      Token token0 = xPathLexer0.nextToken();
      xPathLexer2.not();
      xPathLexer2.relationalOperator();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer2.pipe();
      xPathLexer2.mod();
      xPathLexer2.dots();
      xPathLexer3.at();
      Token token1 = xPathLexer3.leftParen();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.918212832445647
  */
  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      assertEquals(" ", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("x", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals("e", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      xPathLexer0.dollar();
      xPathLexer0.and();
      String string0 = token4.toString();
      assertEquals("[ (19) (w0)", string0);
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("9", token5.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.relationalOperator();
      Token token6 = xPathLexer0.nextToken();
      assertEquals(5, token6.getTokenType());
      assertEquals("+", token6.getTokenText());
      
      xPathLexer0.operatorName();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer("");
      XPathLexer xPathLexer2 = new XPathLexer("R");
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer2.dollar();
      assertEquals("R", token8.getTokenText());
      assertEquals(26, token8.getTokenType());
      
      xPathLexer0.equals();
      Token token9 = xPathLexer1.leftBracket();
      assertEquals(3, token9.getTokenType());
      
      Token token10 = xPathLexer0.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      xPathLexer0.or();
      xPathLexer1.equals();
      xPathLexer0.doubleColon();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token11 = xPathLexer1.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer1.rightParen();
      assertEquals(2, token12.getTokenType());
      
      Token token13 = xPathLexer2.minus();
      assertEquals(6, token13.getTokenType());
      
      Token token14 = xPathLexer3.rightBracket();
      assertEquals(4, token14.getTokenType());
      
      Token token15 = xPathLexer0.equals();
      assertEquals(21, token15.getTokenType());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.9336121813108225
  */
  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.or();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer1.colon();
      xPathLexer0.or();
      xPathLexer0.not();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token0 = xPathLexer2.nextToken();
      assertEquals((-1), token0.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.mod();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer3.comma();
      assertEquals(32, token2.getTokenType());
      
      xPathLexer1.consume();
      Token token3 = xPathLexer3.literal();
      assertNull(token3);
      
      xPathLexer2.dollar();
      XPathLexer xPathLexer4 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token4 = xPathLexer1.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(13, token5.getTokenType());
      
      xPathLexer3.dollar();
      XPathLexer xPathLexer6 = new XPathLexer("Tf~7}}a$;js7Y=4g7");
      Token token6 = xPathLexer6.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("T", token6.getTokenText());
      
      Token token7 = xPathLexer0.star();
      assertEquals("w", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("er", token8.getTokenText());
      
      Token token9 = xPathLexer6.leftBracket();
      assertEquals("f", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
      
      xPathLexer1.dots();
      Token token10 = xPathLexer0.plus();
      assertEquals("k", token10.getTokenText());
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer0.nextToken();
      assertEquals((-1), token11.getTokenType());
      assertEquals("en.saxpath.Token", token11.getTokenText());
      
      xPathLexer1.mod();
      XPathLexer xPathLexer7 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token12 = xPathLexer2.dollar();
      assertEquals(26, token12.getTokenType());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.7475922910811674
  */
  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.leftBracket();
      xPathLexer0.slashes();
      xPathLexer0.at();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.equals();
      xPathLexer0.leftParen();
      xPathLexer0.colon();
      xPathLexer0.at();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.operatorName();
      xPathLexer0.rightParen();
      xPathLexer0.comma();
      xPathLexer0.literal();
      xPathLexer0.notEquals();
      xPathLexer0.leftBracket();
      xPathLexer0.nextToken();
      xPathLexer0.or();
      xPathLexer0.mod();
      xPathLexer0.equals();
      xPathLexer0.whitespace();
      xPathLexer0.slashes();
      xPathLexer0.and();
      xPathLexer0.doubleColon();
      xPathLexer0.rightBracket();
      xPathLexer0.getPreviousToken();
      // Undeclared exception!
      try { 
        xPathLexer0.LA((-3090));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.2896431534976176
  */
  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals("v", token1.getTokenText());
      assertEquals(23, token1.getTokenType());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.dollar();
      assertEquals("b", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      Token token4 = xPathLexer0.slashes();
      assertEquals("Z", token4.getTokenText());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      Token token5 = xPathLexer2.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer1.consume(3593);
      xPathLexer0.consume();
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer2.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("MLv8bZQZr<g| 3");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("<", token8.getTokenText());
      
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
      
      xPathLexer0.mod();
      Token token10 = xPathLexer2.at();
      assertEquals(16, token10.getTokenType());
      
      Token token11 = xPathLexer0.plus();
      assertEquals("g", token11.getTokenText());
      assertEquals(5, token11.getTokenType());
      
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer("MLv8bZQZr<g| 3");
      Token token12 = xPathLexer3.nextToken();
      assertEquals("MLv8bZQZr", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.2471568787050833
  */
  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.slashes();
      assertEquals("M", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.literal();
      assertNull(token1);
      
      Token token2 = xPathLexer0.rightBracket();
      assertEquals(4, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("MLpv8bZQZr<g| 3");
      Token token3 = xPathLexer1.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("M", token3.getTokenText());
      
      Token token4 = xPathLexer1.notEquals();
      assertEquals("Lp", token4.getTokenText());
      assertEquals(22, token4.getTokenType());
      
      xPathLexer0.div();
      Token token5 = xPathLexer1.whitespace();
      token5.toString();
      xPathLexer0.star();
      xPathLexer1.dollar();
      xPathLexer0.and();
      Token token6 = xPathLexer1.dollar();
      assertEquals("b", token6.getTokenText());
      
      Token token7 = xPathLexer0.pipe();
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer3.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer0.operatorName();
      Token token9 = xPathLexer2.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("X?*)XpTR~nORu6CNL");
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token11 = xPathLexer5.star();
      assertEquals(20, token11.getTokenType());
      
      Token token12 = xPathLexer5.doubleColon();
      assertEquals(19, token12.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token13 = xPathLexer4.leftBracket();
      assertEquals(3, token13.getTokenType());
      
      xPathLexer6.dots();
      Token token14 = xPathLexer4.plus();
      assertEquals(5, token14.getTokenType());
      assertEquals("?", token14.getTokenText());
      
      Token token15 = xPathLexer1.nextToken();
      assertEquals("ZQZr", token15.getTokenText());
      
      xPathLexer5.mod();
      Token token16 = xPathLexer4.dots();
      assertEquals(13, token16.getTokenType());
      assertEquals("*", token16.getTokenText());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.11639322032863
  */
  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer0.number();
      token0.toString();
      Token token1 = xPathLexer0.pipe();
      xPathLexer0.dots();
      token0.toString();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("[ (30) ()");
      xPathLexer0.setPreviousToken(token1);
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token2 = xPathLexer0.identifierOrOperatorName();
      xPathLexer2.and();
      xPathLexer3.dollar();
      xPathLexer1.and();
      xPathLexer1.dollar();
      xPathLexer2.pipe();
      xPathLexer3.identifier();
      XPathLexer xPathLexer4 = new XPathLexer("1?");
      xPathLexer2.nextToken();
      token2.toString();
      xPathLexer2.leftParen();
      xPathLexer1.comma();
      xPathLexer3.not();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.notEquals();
      Token token3 = xPathLexer1.nextToken();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=2.0004498706101237
  */
  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("<", token0.getTokenText());
      assertEquals(4, token0.getTokenType());
      
      Token token1 = xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token1);
      assertEquals("g", token1.getTokenText());
      assertEquals(26, token1.getTokenType());
      
      Token token2 = xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.equals();
      token3.toString();
      token3.toString();
      token3.toString();
      token3.toString();
      token2.toString();
      String string0 = token3.toString();
      assertEquals("[ (21) (|)", string0);
      
      String string1 = token2.toString();
      assertEquals("[ (15) ()", string1);
      
      Token token4 = xPathLexer0.leftParen();
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      assertEquals("3", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals(23, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer1.notEquals();
      assertEquals(22, token7.getTokenType());
      
      String string2 = token4.toString();
      assertEquals("[ (1) ( )", string2);
      
      xPathLexer0.or();
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.1065594276097235
  */
  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer1.dollar();
      xPathLexer0.colon();
      xPathLexer1.rightParen();
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.operatorName();
      xPathLexer0.dollar();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("u88_uSXPkYi(E'");
      xPathLexer3.pipe();
      xPathLexer0.nextToken();
      xPathLexer1.dollar();
      xPathLexer3.equals();
      xPathLexer2.leftBracket();
      xPathLexer1.or();
      xPathLexer2.doubleColon();
      xPathLexer3.leftParen();
      xPathLexer0.and();
      xPathLexer0.rightParen();
      xPathLexer2.rightBracket();
      xPathLexer1.plus();
      xPathLexer2.leftBracket();
      xPathLexer3.leftParen();
      Token token0 = xPathLexer3.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.9805948161205236
  */
  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer1.notEquals();
      assertEquals("co", token0.getTokenText());
      assertEquals(22, token0.getTokenType());
      
      Token token1 = xPathLexer0.identifierOrOperatorName();
      String string0 = token1.toString();
      assertEquals("[ (15) (com.werken.saxpath.XPathLexer)", string0);
      
      xPathLexer1.currentPosition();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.plus();
      xPathLexer1.slashes();
      Token token2 = xPathLexer1.slashes();
      assertEquals("w", token2.getTokenText());
      assertEquals(11, token2.getTokenType());
      
      xPathLexer1.and();
      Token token3 = xPathLexer1.dollar();
      assertEquals("e", token3.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer2.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("T");
      xPathLexer4.operatorName();
      xPathLexer4.nextToken();
      xPathLexer4.leftParen();
      XPathLexer xPathLexer5 = new XPathLexer("");
      xPathLexer5.operatorName();
      Token token5 = xPathLexer2.colon();
      assertEquals(18, token5.getTokenType());
      
      xPathLexer0.dollar();
      XPathLexer xPathLexer6 = new XPathLexer("T");
      Token token6 = xPathLexer6.star();
      assertEquals("T", token6.getTokenText());
      assertEquals(20, token6.getTokenType());
      
      Token token7 = xPathLexer6.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token8 = xPathLexer7.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer7.dots();
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("r", token9.getTokenText());
      
      Token token10 = xPathLexer7.nextToken();
      assertEquals((-1), token10.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token11 = xPathLexer6.comma();
      assertEquals(32, token11.getTokenType());
      
      Token token12 = xPathLexer5.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer1.at();
      assertEquals(16, token13.getTokenType());
      
      Token token14 = xPathLexer4.dots();
      assertEquals(13, token14.getTokenType());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.1895083652522027
  */
  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.not();
      assertEquals(23, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals("", token1.getTokenText());
      assertEquals((-2), token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      XPathLexer xPathLexer2 = new XPathLexer();
      token2.toString();
      xPathLexer2.dollar();
      xPathLexer1.colon();
      String string0 = token2.toString();
      assertEquals("[ (22) (|m)", string0);
      
      xPathLexer1.relationalOperator();
      xPathLexer0.div();
      XPathLexer xPathLexer3 = new XPathLexer("kPky X.OAk>m");
      Token token3 = xPathLexer0.pipe();
      assertEquals("E", token3.getTokenText());
      assertEquals(17, token3.getTokenType());
      
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      xPathLexer1.equals();
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      xPathLexer0.or();
      Token token7 = xPathLexer3.equals();
      assertEquals(21, token7.getTokenType());
      
      Token token8 = xPathLexer1.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer3.plus();
      assertEquals(5, token9.getTokenType());
      assertEquals("P", token9.getTokenText());
      
      xPathLexer1.and();
      XPathLexer xPathLexer4 = new XPathLexer("[ (22) (|m)");
      Token token10 = xPathLexer4.comma();
      assertEquals("[", token10.getTokenText());
      
      Token token11 = xPathLexer4.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals(" ", token11.getTokenText());
      
      Token token12 = xPathLexer3.at();
      assertEquals(16, token12.getTokenType());
      assertEquals("k", token12.getTokenText());
      
      Token token13 = xPathLexer1.dots();
      assertEquals(13, token13.getTokenType());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.2575052778398557
  */
  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      assertEquals(" ", token0.getTokenText());
      assertEquals(11, token0.getTokenType());
      
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("x", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      Token token4 = xPathLexer0.doubleColon();
      xPathLexer0.and();
      token4.toString();
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("M", token5.getTokenText());
      
      Token token6 = xPathLexer0.pipe();
      assertEquals(17, token6.getTokenType());
      assertEquals("9", token6.getTokenText());
      
      xPathLexer0.endPosition();
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      assertEquals("+o", token7.getTokenText());
      
      String string0 = token3.toString();
      assertEquals("[ (20) (e)", string0);
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer(" dxew0M9+o");
      xPathLexer0.whitespace();
      String string1 = token4.toString();
      assertEquals("[ (19) (w0)", string1);
      
      token1.toString();
      xPathLexer0.star();
      xPathLexer0.equals();
      XPathLexer xPathLexer2 = new XPathLexer("");
      Token token8 = xPathLexer2.minus();
      assertEquals(6, token8.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer2.whitespace();
      xPathLexer2.setPreviousToken(token3);
      xPathLexer2.identifierOrOperatorName();
      Token token9 = xPathLexer1.nextToken();
      assertEquals(15, token9.getTokenType());
      assertEquals("dxew0M9", token9.getTokenText());
      
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.mod();
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer2.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer2.plus();
      assertEquals(5, token13.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("[ (19) (w0)");
      xPathLexer3.star();
      xPathLexer0.comma();
      Token token14 = xPathLexer0.leftBracket();
      assertEquals(3, token14.getTokenType());
      
      Token token15 = xPathLexer0.leftParen();
      assertEquals(1, token15.getTokenType());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.1566265872164387
  */
  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals("x", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      assertEquals("e", token3.getTokenText());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("w0", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals("M", token5.getTokenText());
      
      Token token6 = xPathLexer0.not();
      assertEquals("9", token6.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.nextToken();
      assertEquals("+", token7.getTokenText());
      assertEquals(5, token7.getTokenType());
      
      xPathLexer0.div();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("o", token8.getTokenText());
      
      Token token9 = xPathLexer0.not();
      assertEquals(23, token9.getTokenType());
      
      Token token10 = xPathLexer0.colon();
      assertEquals(18, token10.getTokenType());
      
      xPathLexer0.identifierOrOperatorName();
      Token token11 = xPathLexer0.notEquals();
      assertEquals(22, token11.getTokenType());
      
      Token token12 = xPathLexer0.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer0.minus();
      assertEquals(6, token13.getTokenType());
      
      xPathLexer0.rightParen();
      Token token14 = xPathLexer0.pipe();
      assertEquals(17, token14.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token15 = xPathLexer1.literal();
      assertNull(token15);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token16 = xPathLexer2.identifierOrOperatorName();
      assertEquals(15, token16.getTokenType());
      
      Token token17 = xPathLexer2.dots();
      assertEquals(13, token17.getTokenType());
      
      Token token18 = xPathLexer2.rightParen();
      assertEquals(2, token18.getTokenType());
      
      xPathLexer1.getPreviousToken();
      xPathLexer1.and();
      char char0 = xPathLexer2.LA(1284);
      assertEquals('\uFFFF', char0);
      
      Token token19 = xPathLexer2.at();
      assertEquals(16, token19.getTokenType());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.6447793396111252
  */
  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.star();
      Token token1 = xPathLexer0.number();
      token0.toString();
      xPathLexer0.pipe();
      String string0 = token1.toString();
      assertEquals("[ (30) ()", string0);
      
      Token token2 = xPathLexer0.notEquals();
      assertEquals(22, token2.getTokenType());
      assertEquals("pv", token2.getTokenText());
      
      String string1 = token0.toString();
      assertEquals("[ (20) (M)", string1);
      
      XPathLexer xPathLexer1 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token3 = xPathLexer2.rightBracket();
      assertEquals(4, token3.getTokenType());
      
      xPathLexer2.dollar();
      xPathLexer0.and();
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer0.pipe();
      assertEquals("b", token4.getTokenText());
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer(") (");
      Token token5 = xPathLexer4.nextToken();
      assertEquals(")", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("Z", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.equals();
      assertEquals("Q", token7.getTokenText());
      assertEquals(21, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      assertEquals("Zr", token8.getTokenText());
      
      Token token9 = xPathLexer1.leftBracket();
      assertEquals("M", token9.getTokenText());
      assertEquals(3, token9.getTokenType());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.838379169646685
  */
  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.at();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      token1.toString();
      xPathLexer0.leftParen();
      xPathLexer0.leftBracket();
      xPathLexer0.notEquals();
      xPathLexer0.doubleColon();
      Token token2 = new Token(5, "AV|m,EEh8Ul0=,0E", 5, 5);
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (EE)");
      xPathLexer1.endPosition();
      xPathLexer1.nextToken();
      xPathLexer0.consume((-2619));
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.consume(5);
      xPathLexer1.equals();
      xPathLexer1.rightBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.or();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=2.041816512440626
  */
  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.operatorName();
      xPathLexer0.colon();
      xPathLexer0.or();
      Token token0 = xPathLexer0.not();
      assertEquals("p", token0.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("v8bZQZr", token1.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer1.dollar();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer1.dollar();
      assertEquals(26, token3.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer3.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer3.dots();
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token6 = xPathLexer4.at();
      assertEquals(16, token6.getTokenType());
      
      xPathLexer1.doubleColon();
      Token token7 = xPathLexer4.identifier();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("");
      Token token8 = xPathLexer2.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer2.leftBracket();
      xPathLexer2.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer1.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("MLpv8bZQZr<g| 3");
      Token token10 = xPathLexer8.leftBracket();
      assertEquals("M", token10.getTokenText());
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer7.slashes();
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer1.notEquals();
      assertEquals(22, token12.getTokenType());
      
      Token token13 = xPathLexer6.comma();
      assertEquals(32, token13.getTokenType());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=2.857186997743457
  */
  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.mod();
      xPathLexer0.star();
      xPathLexer0.leftBracket();
      xPathLexer0.consume((-2152));
      // Undeclared exception!
      try { 
        xPathLexer0.slashes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8905468862463635
  */
  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("AV", token0.getTokenText());
      
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.at();
      assertEquals("|", token1.getTokenText());
      assertEquals(16, token1.getTokenType());
      
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (22) (m,)", string0);
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.dollar();
      assertEquals("E", token3.getTokenText());
      assertEquals(26, token3.getTokenType());
      
      xPathLexer0.and();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("*lkT'^ekQ-cB_n^");
      Token token4 = xPathLexer0.nextToken();
      assertEquals("Eh8Ul0=,0E", token4.getTokenText());
      
      Token token5 = xPathLexer0.equals();
      assertEquals("E", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      
      xPathLexer2.div();
      Token token7 = xPathLexer2.star();
      assertEquals(20, token7.getTokenType());
      assertEquals("*", token7.getTokenText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=2.2021205592107873
  */
  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer1.colon();
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.operatorName();
      xPathLexer0.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("Eh-DL^");
      xPathLexer0.pipe();
      xPathLexer0.nextToken();
      xPathLexer1.dollar();
      xPathLexer2.nextToken();
      xPathLexer0.equals();
      xPathLexer1.rightBracket();
      xPathLexer0.comma();
      XPathLexer xPathLexer3 = new XPathLexer("&NaW=?I36\",{");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.slashes();
      Token token0 = xPathLexer1.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.330051556875417
  */
  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.leftParen();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      Token token1 = xPathLexer0.rightParen();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer2.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.whitespace();
      xPathLexer0.plus();
      xPathLexer1.equals();
      xPathLexer2.pipe();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.pipe();
      xPathLexer0.mod();
      xPathLexer0.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer4.at();
      xPathLexer2.plus();
      xPathLexer4.doubleColon();
      xPathLexer3.and();
      xPathLexer3.equals();
      xPathLexer1.star();
      xPathLexer1.rightParen();
      Token token2 = xPathLexer4.minus();
      assertFalse(token2.equals((Object)token1));
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.182649121853081
  */
  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.at();
      xPathLexer0.not();
      xPathLexer0.whitespace();
      Token token0 = xPathLexer0.notEquals();
      int int0 = xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.pipe();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.slashes();
      xPathLexer2.doubleColon();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.plus();
      xPathLexer0.plus();
      xPathLexer1.equals();
      xPathLexer2.pipe();
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.pipe();
      xPathLexer0.mod();
      xPathLexer0.dots();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.at();
      xPathLexer4.at();
      xPathLexer2.plus();
      xPathLexer4.doubleColon();
      xPathLexer3.and();
      xPathLexer3.equals();
      xPathLexer1.star();
      xPathLexer1.rightParen();
      xPathLexer4.minus();
      int int1 = xPathLexer4.currentPosition();
      assertTrue(int1 == int0);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.20763191121547
  */
  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|OGl47e8'5Qw%");
      xPathLexer0.at();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer("|OGl47e8'5Qw%");
      xPathLexer1.colon();
      xPathLexer1.or();
      xPathLexer0.not();
      xPathLexer1.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer0.dollar();
      xPathLexer1.colon();
      xPathLexer1.operatorName();
      xPathLexer2.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer1.operatorName();
      xPathLexer2.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("kPky X.OAk>m");
      xPathLexer0.pipe();
      xPathLexer1.nextToken();
      xPathLexer1.dollar();
      xPathLexer1.nextToken();
      xPathLexer1.equals();
      xPathLexer3.rightBracket();
      xPathLexer0.comma();
      XPathLexer xPathLexer4 = new XPathLexer("|OGl47e8'5Qw%");
      xPathLexer4.slashes();
      Token token0 = xPathLexer2.operatorName();
      assertNull(token0);
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.466786873079844
  */
  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      xPathLexer0.equals();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.or();
      xPathLexer0.slashes();
      xPathLexer0.literal();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.consume();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.operatorName();
      xPathLexer2.consume(1);
      xPathLexer0.colon();
      XPathLexer xPathLexer3 = new XPathLexer("{?>KerA");
      xPathLexer3.identifierOrOperatorName();
      xPathLexer1.identifier();
      xPathLexer3.rightBracket();
      xPathLexer3.minus();
      xPathLexer3.doubleColon();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer1.slashes();
      xPathLexer2.hasMoreChars();
      xPathLexer2.getXPath();
      xPathLexer2.consume((-660));
      XPathLexer xPathLexer4 = new XPathLexer();
      // Undeclared exception!
      try { 
        xPathLexer2.identifier();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=1.7855416939407514
  */
  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.at();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      token1.toString();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      xPathLexer0.leftBracket();
      xPathLexer0.notEquals();
      xPathLexer0.and();
      Token token2 = new Token(5, "AV|m,EEh8Ul0=,0E", 5, 5);
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (EE)");
      xPathLexer1.endPosition();
      xPathLexer1.nextToken();
      xPathLexer0.consume((-2586));
      xPathLexer1.identifierOrOperatorName();
      xPathLexer1.consume(5);
      // Undeclared exception!
      try { 
        xPathLexer0.identifier();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.8062260166788509
  */
  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.rightBracket();
      assertEquals("A", token0.getTokenText());
      
      Token token1 = xPathLexer0.identifier();
      assertEquals(15, token1.getTokenType());
      
      Token token2 = xPathLexer0.at();
      assertEquals(16, token2.getTokenType());
      assertEquals("|", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      token3.toString();
      String string0 = token3.toString();
      assertEquals("[ (22) (m,)", string0);
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(4, token4.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("*lkT'^ekQ-cB_n^");
      Token token6 = xPathLexer0.nextToken();
      assertEquals("8", token6.getTokenText());
      assertEquals(30, token6.getTokenType());
      
      Token token7 = xPathLexer2.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token8 = xPathLexer3.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer2.doubleColon();
      assertEquals(19, token9.getTokenType());
      assertEquals("lk", token9.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer("");
      XPathLexer xPathLexer7 = new XPathLexer();
      Token token10 = xPathLexer7.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer3.slashes();
      assertEquals(11, token11.getTokenType());
      
      xPathLexer3.notEquals();
      Token token12 = xPathLexer0.comma();
      assertEquals(32, token12.getTokenType());
      assertEquals("U", token12.getTokenText());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=2.0764230452975267
  */
  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token0 = xPathLexer0.leftBracket();
      xPathLexer0.identifier();
      Token token1 = xPathLexer0.whitespace();
      Token token2 = xPathLexer0.notEquals();
      assertEquals("9x", token2.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (3) (N)", string0);
      
      int int0 = xPathLexer0.currentPosition();
      assertEquals(14, int0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token3 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      String string1 = token3.toString();
      assertEquals("[ (15) (b7c)", string1);
      
      String string2 = token1.toString();
      assertEquals("[ (-2) ()", string2);
      
      Token token4 = xPathLexer0.leftParen();
      assertEquals("]", token4.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      xPathLexer0.leftBracket();
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("K>6e4DpB|ncvI^ds");
      xPathLexer1.whitespace();
      token0.toString();
      Token token7 = xPathLexer1.slashes();
      token7.toString();
      String string3 = token7.toString();
      assertEquals("[ (11) (>)", string3);
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer2.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer2.equals();
      XPathLexer xPathLexer3 = new XPathLexer("[ (15) (b7c)");
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      
      xPathLexer1.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer1.setPreviousToken(token5);
      assertEquals("I", token5.getTokenText());
      
      xPathLexer1.identifierOrOperatorName();
      xPathLexer3.nextToken();
      Token token10 = xPathLexer0.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer3.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals(" ", token11.getTokenText());
      
      Token token12 = xPathLexer1.slashes();
      assertEquals("|", token12.getTokenText());
      
      Token token13 = xPathLexer2.colon();
      assertEquals(18, token13.getTokenType());
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.8670986700015968
  */
  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.nextToken();
      xPathLexer0.identifier();
      xPathLexer0.at();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      xPathLexer0.operatorName();
      xPathLexer0.rightBracket();
      xPathLexer0.operatorName();
      token0.toString();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("Zafk:X");
      xPathLexer2.dollar();
      xPathLexer1.div();
      XPathLexer xPathLexer3 = new XPathLexer("[ (22) (m,)");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.minus();
      xPathLexer4.pipe();
      xPathLexer3.nextToken();
      xPathLexer2.dollar();
      xPathLexer3.equals();
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer1.equals();
      xPathLexer3.doubleColon();
      xPathLexer0.and();
      XPathLexer xPathLexer5 = null;
      try {
        xPathLexer5 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.239378308619825
  */
  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|OGl47e8'5Qw%");
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.identifier();
      Token token2 = xPathLexer0.whitespace();
      token2.toString();
      Token token3 = xPathLexer0.minus();
      token3.toString();
      Token token4 = xPathLexer0.identifierOrOperatorName();
      token4.toString();
      token2.toString();
      xPathLexer0.leftParen();
      xPathLexer0.notEquals();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (47e8)");
      xPathLexer1.colon();
      token1.toString();
      token2.toString();
      xPathLexer0.star();
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer2.not();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.setPreviousToken(token0);
      xPathLexer2.at();
      xPathLexer1.nextToken();
      xPathLexer2.not();
      xPathLexer0.slashes();
      xPathLexer2.doubleColon();
      xPathLexer1.number();
      xPathLexer1.identifierOrOperatorName();
      Token token5 = xPathLexer2.relationalOperator();
      assertNull(token5);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.1823030741538556
  */
  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.identifier();
      Token token2 = xPathLexer0.whitespace();
      Token token3 = xPathLexer0.notEquals();
      String string0 = token3.toString();
      assertEquals("[ (22) (m,)", string0);
      
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token3);
      Token token4 = xPathLexer0.identifierOrOperatorName();
      token4.toString();
      token4.toString();
      token2.toString();
      Token token5 = xPathLexer0.leftParen();
      assertEquals(1, token5.getTokenType());
      assertEquals("=", token5.getTokenText());
      
      Token token6 = xPathLexer0.comma();
      assertEquals(32, token6.getTokenType());
      
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("0", token7.getTokenText());
      
      xPathLexer0.notEquals();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (EE)");
      xPathLexer1.whitespace();
      String string1 = token1.toString();
      assertEquals("[ (15) (V)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (-2) ()", string2);
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer1.equals();
      XPathLexer xPathLexer2 = new XPathLexer("iUjZw#(%(n+|>.P");
      Token token9 = xPathLexer2.minus();
      assertEquals(6, token9.getTokenType());
      assertEquals("i", token9.getTokenText());
      
      xPathLexer2.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer1.setPreviousToken(token0);
      assertEquals("A", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token10 = xPathLexer1.nextToken();
      assertEquals(30, token10.getTokenType());
      assertEquals("15", token10.getTokenText());
      
      Token token11 = xPathLexer2.equals();
      assertEquals("U", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      Token token12 = xPathLexer1.rightBracket();
      assertEquals(4, token12.getTokenType());
      
      Token token13 = xPathLexer0.slashes();
      assertEquals(11, token13.getTokenType());
  }

  /**
  //Test case number: 64
  /*Coverage entropy=2.201022095001549
  */
  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.mod();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.slashes();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      xPathLexer2.rightBracket();
      xPathLexer1.consume(3593);
      xPathLexer2.pipe();
      xPathLexer2.leftBracket();
      XPathLexer xPathLexer3 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.nextToken();
      xPathLexer1.dollar();
      xPathLexer1.equals();
      xPathLexer0.mod();
      xPathLexer2.dots();
      xPathLexer2.at();
      xPathLexer0.plus();
      xPathLexer0.star();
      xPathLexer3.comma();
      Token token0 = xPathLexer1.relationalOperator();
      assertNull(token0);
  }

  /**
  //Test case number: 65
  /*Coverage entropy=2.005734477490456
  */
  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer1.nextToken();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer1.nextToken();
      assertEquals("", token1.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dollar();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer2.operatorName();
      Token token3 = xPathLexer2.plus();
      assertEquals(5, token3.getTokenType());
      
      xPathLexer2.relationalOperator();
      Token token4 = xPathLexer2.nextToken();
      assertEquals((-1), token4.getTokenType());
      
      xPathLexer2.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token5 = xPathLexer1.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer0.nextToken();
      assertEquals(">", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      xPathLexer3.equals();
      Token token8 = xPathLexer1.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer2.or();
      xPathLexer1.equals();
      Token token9 = xPathLexer3.doubleColon();
      assertEquals(19, token9.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (");
      Token token10 = xPathLexer1.star();
      assertEquals(20, token10.getTokenType());
      
      Token token11 = xPathLexer0.rightParen();
      assertEquals(2, token11.getTokenType());
      
      Token token12 = xPathLexer1.minus();
      assertEquals(6, token12.getTokenType());
      
      Token token13 = xPathLexer3.rightBracket();
      assertEquals(4, token13.getTokenType());
      
      Token token14 = xPathLexer1.equals();
      assertEquals(21, token14.getTokenType());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.9454256835522536
  */
  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.pipe();
      assertEquals("U", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("l", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("Pkvdb5q", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      Token token3 = xPathLexer0.relationalOperator();
      assertEquals(7, token3.getTokenType());
      assertEquals("<", token3.getTokenText());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("9", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("x", token5.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token6 = xPathLexer1.slashes();
      assertEquals("N", token6.getTokenText());
      assertEquals(11, token6.getTokenType());
      
      xPathLexer1.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer0.or();
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("7", token7.getTokenText());
      
      Token token8 = xPathLexer1.rightBracket();
      assertEquals(4, token8.getTokenType());
      assertEquals("2", token8.getTokenText());
      
      xPathLexer2.pipe();
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.nextToken();
      Token token9 = xPathLexer3.dollar();
      assertEquals("c", token9.getTokenText());
      assertEquals(26, token9.getTokenType());
      
      xPathLexer1.comma();
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.mod();
      xPathLexer2.pipe();
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer1.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer3.plus();
      assertEquals("m", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      Token token14 = xPathLexer2.star();
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer0.dots();
      assertEquals("c", token15.getTokenText());
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.742056938166719
  */
  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      Token token0 = xPathLexer1.nextToken();
      xPathLexer1.rightParen();
      xPathLexer0.at();
      token0.toString();
      xPathLexer0.slashes();
      xPathLexer1.comma();
      xPathLexer0.leftBracket();
      xPathLexer1.notEquals();
      xPathLexer1.div();
      XPathLexer xPathLexer2 = new XPathLexer("[ (-1) ()");
      xPathLexer0.whitespace();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer1.setXPath((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.2518745200693697
  */
  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      assertEquals(6, token1.getTokenType());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.comma();
      assertEquals("<", token2.getTokenText());
      
      xPathLexer0.consume();
      Token token3 = xPathLexer0.doubleColon();
      assertEquals("xb", token3.getTokenText());
      
      xPathLexer0.or();
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      assertEquals("7", token4.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.div();
      xPathLexer1.dollar();
      Token token5 = xPathLexer0.not();
      assertEquals(23, token5.getTokenType());
      assertEquals("c", token5.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer1.consume();
      xPathLexer1.consume();
      xPathLexer1.currentPosition();
      Token token6 = xPathLexer1.slashes();
      assertEquals(11, token6.getTokenType());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer2.div();
      xPathLexer0.div();
      xPathLexer2.consume(12);
      Token token9 = xPathLexer0.nextToken();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer2.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer2.leftParen();
      Token token11 = xPathLexer2.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer2.leftBracket();
      assertEquals(3, token12.getTokenType());
      
      xPathLexer1.rightParen();
      XPathLexer xPathLexer3 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token13 = xPathLexer3.plus();
      assertEquals("N", token13.getTokenText());
      assertEquals(5, token13.getTokenType());
      
      xPathLexer2.mod();
      Token token14 = xPathLexer1.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer0.rightParen();
      assertEquals("I", token15.getTokenText());
      assertEquals(2, token15.getTokenType());
  }

  /**
  //Test case number: 69
  /*Coverage entropy=2.0871884152256523
  */
  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.comma();
      assertEquals(32, token1.getTokenType());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals("7", token3.getTokenText());
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.or();
      xPathLexer0.and();
      Token token4 = xPathLexer0.dollar();
      assertEquals("]", token4.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      xPathLexer1.endPosition();
      XPathLexer xPathLexer2 = new XPathLexer("#f*}K={wk{YK");
      Token token5 = xPathLexer2.slashes();
      assertEquals(11, token5.getTokenType());
      assertEquals("#", token5.getTokenText());
      
      Token token6 = xPathLexer2.nextToken();
      assertEquals("f", token6.getTokenText());
      
      Token token7 = xPathLexer1.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.operatorName();
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token8 = xPathLexer4.plus();
      assertEquals(5, token8.getTokenType());
      
      xPathLexer3.relationalOperator();
      xPathLexer2.identifierOrOperatorName();
      Token token9 = xPathLexer2.pipe();
      assertEquals("*", token9.getTokenText());
      assertEquals(17, token9.getTokenType());
      
      xPathLexer1.mod();
      Token token10 = xPathLexer3.leftParen();
      assertEquals(1, token10.getTokenType());
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.9317370294047869
  */
  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      xPathLexer0.identifier();
      xPathLexer0.at();
      Token token0 = xPathLexer0.notEquals();
      token0.toString();
      token0.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.identifierOrOperatorName();
      token1.toString();
      token1.toString();
      xPathLexer0.leftParen();
      xPathLexer0.comma();
      Token token2 = new Token(5, "AV|m,EEh8Ul0=,0E", 5, 5);
      xPathLexer0.notEquals();
      xPathLexer0.and();
      Token token3 = new Token(5, "AV|m,EEh8Ul0=,0E", 5, 5);
      xPathLexer0.pipe();
      xPathLexer0.endPosition();
      xPathLexer0.nextToken();
      xPathLexer0.consume((-2586));
      // Undeclared exception!
      try { 
        xPathLexer0.identifierOrOperatorName();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.088481904183964
  */
  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      xPathLexer0.operatorName();
      Token token0 = xPathLexer0.colon();
      assertEquals("M", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.div();
      xPathLexer1.dollar();
      Token token2 = xPathLexer0.colon();
      assertEquals(18, token2.getTokenType());
      
      xPathLexer1.rightParen();
      xPathLexer1.operatorName();
      xPathLexer1.relationalOperator();
      Token token3 = xPathLexer0.nextToken();
      assertEquals("g| 3", token3.getTokenText());
      
      xPathLexer1.operatorName();
      Token token4 = xPathLexer0.dollar();
      assertEquals("g", token4.getTokenText());
      
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("u88_uSXPkYi(E'");
      xPathLexer3.pipe();
      Token token5 = xPathLexer0.nextToken();
      assertEquals("|", token5.getTokenText());
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer1.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer3.equals();
      assertEquals(21, token7.getTokenType());
      assertEquals("8", token7.getTokenText());
      
      xPathLexer2.leftBracket();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer1.or();
      Token token8 = xPathLexer2.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      xPathLexer0.and();
      xPathLexer0.rightParen();
      Token token9 = xPathLexer2.rightBracket();
      assertEquals(4, token9.getTokenType());
      
      Token token10 = xPathLexer1.plus();
      assertEquals(5, token10.getTokenType());
      
      Token token11 = xPathLexer2.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer3.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("8", token12.getTokenText());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.7791328593948554
  */
  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wtKQ%0?s[CD8Km/I");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.star();
      Token token0 = xPathLexer0.doubleColon();
      assertEquals("0?", token0.getTokenText());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token1 = xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token2 = xPathLexer1.nextToken();
      assertEquals("om.werken.saxpath.Token", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.relationalOperator();
      String string0 = token1.toString();
      assertEquals("[ (26) (c)", string0);
      
      XPathLexer xPathLexer4 = new XPathLexer("wtKQ%0?s[CD8Km/I");
      Token token3 = xPathLexer0.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer1.dollar();
      XPathLexer xPathLexer5 = new XPathLexer("9CE7Q/2Bf|&*Ni");
      Token token4 = xPathLexer1.not();
      assertEquals(23, token4.getTokenType());
      
      xPathLexer2.leftBracket();
      Token token5 = xPathLexer5.equals();
      assertEquals("9", token5.getTokenText());
      assertEquals(21, token5.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token6 = xPathLexer1.notEquals();
      assertEquals(22, token6.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.Token");
      Token token7 = xPathLexer0.leftBracket();
      assertEquals(3, token7.getTokenType());
      assertEquals("[", token7.getTokenText());
      
      Token token8 = xPathLexer0.doubleColon();
      assertEquals(19, token8.getTokenType());
      
      Token token9 = xPathLexer8.star();
      assertEquals(20, token9.getTokenType());
      assertEquals("c", token9.getTokenText());
      
      Token token10 = xPathLexer1.dollar();
      assertEquals(26, token10.getTokenType());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.445929921539726
  */
  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer1.notEquals();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.at();
      assertEquals("c", token0.getTokenText());
      assertEquals(16, token0.getTokenType());
      
      Token token1 = xPathLexer0.notEquals();
      token1.toString();
      String string0 = token1.toString();
      assertEquals("[ (22) (om)", string0);
      
      xPathLexer1.operatorName();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.dollar();
      Token token2 = xPathLexer1.dollar();
      assertEquals("m", token2.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token3 = xPathLexer3.pipe();
      assertEquals(17, token3.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (22) (om)");
      Token token4 = xPathLexer5.slashes();
      assertEquals(11, token4.getTokenType());
      assertEquals("[", token4.getTokenText());
      
      Token token5 = xPathLexer0.nextToken();
      assertEquals(13, token5.getTokenType());
      assertEquals(".", token5.getTokenText());
      
      Token token6 = xPathLexer4.leftParen();
      assertEquals(1, token6.getTokenType());
      
      Token token7 = xPathLexer3.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("iyK/\"L;.M5$|n");
      Token token8 = xPathLexer6.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer8 = new XPathLexer();
      XPathLexer xPathLexer9 = new XPathLexer("iyK/\"L;.M5$|n");
      xPathLexer9.notEquals();
      XPathLexer xPathLexer10 = new XPathLexer();
      Token token9 = xPathLexer10.comma();
      assertEquals(32, token9.getTokenType());
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.223589764584088
  */
  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wtKQ%0?s[CD8Km/I");
      Token token0 = xPathLexer0.at();
      xPathLexer0.identifier();
      xPathLexer0.whitespace();
      Token token1 = xPathLexer0.minus();
      token1.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.identifierOrOperatorName();
      String string0 = token0.toString();
      assertEquals("[ (16) (w)", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (6) (0)", string1);
      
      xPathLexer0.leftParen();
      Token token3 = xPathLexer0.comma();
      assertEquals("s", token3.getTokenText());
      assertEquals(32, token3.getTokenType());
      
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("[", token4.getTokenText());
      assertEquals(3, token4.getTokenType());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals(22, token5.getTokenType());
      
      xPathLexer0.leftParen();
      XPathLexer xPathLexer1 = new XPathLexer(",m8!j85+O*:wbG@T");
      Token token6 = xPathLexer0.colon();
      assertEquals("K", token6.getTokenText());
      assertEquals(18, token6.getTokenType());
      
      token2.toString();
      String string2 = token2.toString();
      assertEquals("[ (15) ()", string2);
      
      Token token7 = xPathLexer1.star();
      assertEquals(",", token7.getTokenText());
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      assertEquals("m", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (");
      xPathLexer0.minus();
      xPathLexer0.relationalOperator();
      Token token9 = xPathLexer2.whitespace();
      assertEquals("", token9.getTokenText());
      assertEquals((-2), token9.getTokenType());
      
      Token token10 = xPathLexer1.rightParen();
      xPathLexer0.setPreviousToken(token10);
      assertEquals(2, token10.getTokenType());
      assertEquals("8", token10.getTokenText());
      
      Token token11 = xPathLexer0.identifierOrOperatorName();
      assertNull(token11);
      
      XPathLexer xPathLexer3 = new XPathLexer("");
      xPathLexer3.nextToken();
      Token token12 = xPathLexer3.not();
      assertEquals(23, token12.getTokenType());
      
      xPathLexer3.rightBracket();
      Token token13 = xPathLexer2.slashes();
      assertEquals("(", token13.getTokenText());
      
      Token token14 = xPathLexer1.plus();
      assertEquals("!", token14.getTokenText());
      assertEquals(5, token14.getTokenType());
      
      Token token15 = xPathLexer2.nextToken();
      assertEquals((-1), token15.getTokenType());
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.0062624877196384
  */
  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.leftBracket();
      xPathLexer0.or();
      xPathLexer0.colon();
      Token token0 = xPathLexer0.pipe();
      assertEquals("U", token0.getTokenText());
      
      xPathLexer0.identifier();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      Token token1 = xPathLexer0.nextToken();
      assertEquals("9", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.colon();
      assertEquals("x", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.and();
      Token token3 = xPathLexer0.number();
      assertEquals(30, token3.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      Token token4 = xPathLexer2.pipe();
      assertEquals(17, token4.getTokenType());
      
      Token token5 = xPathLexer2.dots();
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.at();
      Token token6 = xPathLexer1.at();
      assertEquals(16, token6.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token7 = xPathLexer4.identifier();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token8 = xPathLexer3.not();
      assertEquals(23, token8.getTokenType());
      
      xPathLexer1.leftBracket();
      Token token9 = xPathLexer5.equals();
      assertEquals(21, token9.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token10 = xPathLexer4.doubleColon();
      assertEquals(19, token10.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token11 = xPathLexer5.leftBracket();
      assertEquals("2", token11.getTokenText());
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer6.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer0.notEquals();
      assertEquals(22, token13.getTokenType());
      assertEquals("b7", token13.getTokenText());
      
      Token token14 = xPathLexer1.comma();
      assertEquals(32, token14.getTokenType());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=2.820573297765967
  */
  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      Token token0 = xPathLexer0.identifier();
      xPathLexer0.consume();
      xPathLexer0.mod();
      xPathLexer0.at();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.mod();
      xPathLexer0.setXPath("k.8DNDvT>");
      Token token1 = xPathLexer0.whitespace();
      xPathLexer0.rightParen();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.star();
      xPathLexer0.hasMoreChars();
      xPathLexer0.getXPath();
      xPathLexer0.identifierOrOperatorName();
      token2.toString();
      xPathLexer0.literal();
      xPathLexer0.doubleColon();
      xPathLexer0.getXPath();
      xPathLexer0.consume((-1058));
      int int0 = 1;
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.setPreviousToken(token1);
      xPathLexer0.rightBracket();
      xPathLexer0.pipe();
      // Undeclared exception!
      try { 
        xPathLexer0.literal();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.6307173072035446
  */
  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.or();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.doubleColon();
      xPathLexer1.colon();
      xPathLexer0.or();
      xPathLexer0.not();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.nextToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.rightBracket();
      xPathLexer0.rightBracket();
      xPathLexer0.dollar();
      xPathLexer1.and();
      xPathLexer1.dollar();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.pipe();
      XPathLexer xPathLexer5 = new XPathLexer("*lkT'^ekQ-cB_n^");
      xPathLexer5.nextToken();
      xPathLexer0.dollar();
      xPathLexer0.equals();
      XPathLexer xPathLexer6 = new XPathLexer();
      xPathLexer1.doubleColon();
      XPathLexer xPathLexer7 = new XPathLexer();
      xPathLexer7.leftBracket();
      xPathLexer0.leftParen();
      xPathLexer3.comma();
      Token token0 = xPathLexer7.mod();
      assertNull(token0);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=3.131302392869925
  */
  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.setPreviousToken((Token) null);
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.div();
      xPathLexer0.or();
      xPathLexer0.doubleColon();
      Token token1 = xPathLexer0.whitespace();
      assertEquals((-2), token1.getTokenType());
      
      xPathLexer0.rightBracket();
      xPathLexer0.getXPath();
      xPathLexer0.leftBracket();
      xPathLexer0.doubleColon();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.consume();
      Token token2 = xPathLexer0.not();
      assertEquals(23, token2.getTokenType());
      
      xPathLexer0.number();
      Token token3 = xPathLexer0.leftBracket();
      assertEquals(3, token3.getTokenType());
      
      xPathLexer0.currentPosition();
      xPathLexer0.colon();
      Token token4 = xPathLexer0.number();
      assertEquals(30, token4.getTokenType());
      
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer0.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.identifier();
      assertEquals(15, token8.getTokenType());
      
      Token token9 = xPathLexer0.comma();
      assertEquals(32, token9.getTokenType());
      
      xPathLexer0.literal();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.6872569764293004
  */
  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("QD;&3F");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifier();
      xPathLexer0.at();
      Token token2 = xPathLexer0.notEquals();
      token0.toString();
      token2.toString();
      token1.toString();
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token2);
      xPathLexer0.identifierOrOperatorName();
      Token token3 = xPathLexer0.colon();
      // Undeclared exception!
      try { 
        token3.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=2.1797736235289475
  */
  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      xPathLexer0.nextToken();
      Token token0 = xPathLexer0.notEquals();
      assertEquals("4W", token0.getTokenText());
      
      xPathLexer0.colon();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("*ZLGk#H!0,+\"");
      Token token1 = xPathLexer1.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("*", token1.getTokenText());
      
      xPathLexer0.relationalOperator();
      Token token2 = xPathLexer0.nextToken();
      assertEquals("bFIVB", token2.getTokenText());
      assertEquals(15, token2.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dollar();
      Token token3 = xPathLexer1.colon();
      assertEquals("Z", token3.getTokenText());
      assertEquals(18, token3.getTokenType());
      
      xPathLexer0.operatorName();
      xPathLexer2.and();
      Token token4 = xPathLexer2.dollar();
      assertEquals(26, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token5 = xPathLexer2.pipe();
      assertEquals(17, token5.getTokenType());
      
      xPathLexer3.relationalOperator();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.at();
      xPathLexer4.at();
      Token token6 = xPathLexer0.plus();
      assertEquals(5, token6.getTokenType());
      
      Token token7 = xPathLexer1.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      xPathLexer1.and();
      xPathLexer3.equals();
      XPathLexer xPathLexer5 = new XPathLexer("*ZLGk#H!0,+\"");
      Token token8 = xPathLexer2.star();
      assertEquals(20, token8.getTokenType());
      
      Token token9 = xPathLexer5.rightParen();
      assertEquals(2, token9.getTokenType());
      assertEquals("*", token9.getTokenText());
      
      Token token10 = xPathLexer1.minus();
      assertEquals("k", token10.getTokenText());
      assertEquals(6, token10.getTokenType());
      
      Token token11 = xPathLexer4.rightBracket();
      assertEquals(4, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      Token token12 = xPathLexer6.equals();
      assertEquals(21, token12.getTokenType());
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.966268474037014
  */
  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("A|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.nextToken();
      assertEquals(15, token0.getTokenType());
      assertEquals("A", token0.getTokenText());
      
      xPathLexer0.at();
      Token token1 = xPathLexer0.rightParen();
      assertEquals(2, token1.getTokenType());
      assertEquals("m", token1.getTokenText());
      
      xPathLexer0.at();
      Token token2 = xPathLexer0.notEquals();
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (22) (EE)", string0);
      
      xPathLexer0.operatorName();
      Token token3 = xPathLexer0.rightBracket();
      assertEquals("h", token3.getTokenText());
      
      xPathLexer0.dollar();
      xPathLexer0.and();
      Token token4 = xPathLexer0.at();
      assertEquals("U", token4.getTokenText());
      assertEquals(16, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer1.colon();
      assertEquals(18, token5.getTokenType());
      
      Token token6 = xPathLexer1.pipe();
      assertEquals(17, token6.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("*lkT'^ekQ-cB_n^");
      Token token7 = xPathLexer0.nextToken();
      assertEquals("l0=,0E", token7.getTokenText());
      
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      assertEquals("l", token8.getTokenText());
      
      Token token9 = xPathLexer0.equals();
      assertEquals("0", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer0.doubleColon();
      assertEquals(19, token10.getTokenType());
      assertEquals("=,", token10.getTokenText());
      
      Token token11 = xPathLexer0.leftBracket();
      assertEquals("0", token11.getTokenText());
      assertEquals(3, token11.getTokenType());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=3.2326894160685695
  */
  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("1?");
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.and();
      xPathLexer1.dollar();
      xPathLexer0.and();
      Token token0 = xPathLexer0.dollar();
      assertEquals("1", token0.getTokenText());
      
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer("[ (");
      Token token2 = xPathLexer2.dollar();
      assertEquals(26, token2.getTokenType());
      
      Token token3 = xPathLexer2.equals();
      assertEquals(21, token3.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token5 = xPathLexer5.slashes();
      assertEquals(11, token5.getTokenType());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      
      Token token7 = xPathLexer3.comma();
      assertEquals("[", token7.getTokenText());
      assertEquals(32, token7.getTokenType());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=2.8295215462155836
  */
  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("om.werken.saxpath.%athLexer");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      Token token1 = xPathLexer0.number();
      assertEquals(30, token1.getTokenType());
      
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      String string0 = token0.toString();
      assertEquals("[ (21) (o)", string0);
      
      xPathLexer0.setPreviousToken(token0);
      Token token2 = xPathLexer0.plus();
      assertEquals(5, token2.getTokenType());
      assertEquals("m", token2.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals(".", token3.getTokenText());
      
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      Token token4 = xPathLexer0.minus();
      assertEquals(6, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals("t", token5.getTokenText());
      assertEquals(2, token5.getTokenType());
      
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("hL", token6.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.relationalOperator();
      Token token7 = xPathLexer0.pipe();
      assertEquals("e", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      Token token8 = xPathLexer0.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer0.at();
      assertEquals("e", token9.getTokenText());
      assertEquals(16, token9.getTokenType());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.9139971091783492
  */
  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("wtKQ%0?s[CD8Km/I");
      xPathLexer0.star();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer1 = new XPathLexer("com.werken.saxpath.Token");
      Token token0 = xPathLexer1.rightParen();
      assertEquals(2, token0.getTokenType());
      assertEquals("c", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("%", token1.getTokenText());
      
      Token token2 = xPathLexer0.doubleColon();
      assertEquals("0?", token2.getTokenText());
      assertEquals(19, token2.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      Token token3 = xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token4 = xPathLexer1.nextToken();
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer3.relationalOperator();
      String string0 = token3.toString();
      assertEquals("[ (26) (o)", string0);
      
      XPathLexer xPathLexer4 = new XPathLexer("wtKQ%0?s[CD8Km/I");
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      assertEquals("s", token5.getTokenText());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals("", token6.getTokenText());
      
      xPathLexer1.dollar();
      XPathLexer xPathLexer5 = new XPathLexer("9CE7Q/2Bf|&*Ni");
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer2.leftBracket();
      Token token8 = xPathLexer5.equals();
      assertEquals("9", token8.getTokenText());
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token9 = xPathLexer1.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer8.or();
      Token token10 = xPathLexer0.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer4.slashes();
      assertEquals("w", token11.getTokenText());
      assertEquals(11, token11.getTokenType());
      
      Token token12 = xPathLexer6.comma();
      assertEquals(32, token12.getTokenType());
      
      xPathLexer1.dollar();
      Token token13 = xPathLexer7.minus();
      assertEquals(6, token13.getTokenType());
  }

  /**
  //Test case number: 85
  /*Coverage entropy=1.6457349152089027
  */
  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = " dxew0M9+o";
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      xPathLexer0.slashes();
      xPathLexer0.star();
      xPathLexer0.nextToken();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token0 = xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.relationalOperator();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.9721425530232257
  */
  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      Token token1 = xPathLexer0.leftBracket();
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      
      Token token3 = xPathLexer0.star();
      Token token4 = xPathLexer0.doubleColon();
      assertEquals("w0", token4.getTokenText());
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.operatorName();
      Token token5 = xPathLexer0.colon();
      assertEquals(18, token5.getTokenType());
      assertEquals("M", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals("9+", token6.getTokenText());
      assertEquals(22, token6.getTokenType());
      
      xPathLexer0.whitespace();
      xPathLexer0.whitespace();
      String string0 = token0.toString();
      assertEquals("[ (11) ( )", string0);
      
      String string1 = token1.toString();
      assertEquals("[ (3) (d)", string1);
      
      String string2 = token3.toString();
      assertEquals("[ (20) (e)", string2);
      
      xPathLexer0.star();
      xPathLexer0.pipe();
      boolean boolean0 = xPathLexer0.isIdentifierChar('Q');
      assertTrue(boolean0);
      
      Token token7 = xPathLexer0.equals();
      xPathLexer0.div();
      xPathLexer0.relationalOperator();
      xPathLexer0.slashes();
      xPathLexer0.setPreviousToken(token7);
      Token token8 = xPathLexer0.whitespace();
      assertEquals((-2), token8.getTokenType());
      
      Token token9 = xPathLexer0.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer0.minus();
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token10 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token10.getTokenType());
      
      xPathLexer1.dots();
      Token token11 = xPathLexer1.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer0.getPreviousToken();
      assertEquals(21, token12.getTokenType());
      
      xPathLexer1.and();
      char char0 = xPathLexer1.LA(111);
      assertEquals('\uFFFF', char0);
      
      Token token13 = xPathLexer0.at();
      assertEquals(16, token13.getTokenType());
      
      xPathLexer0.div();
      Token token14 = xPathLexer0.nextToken();
      assertEquals((-1), token14.getTokenType());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=2.97547268752385
  */
  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",h");
      xPathLexer0.or();
      xPathLexer0.at();
      xPathLexer0.notEquals();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.pipe();
      XPathLexer xPathLexer2 = null;
      try {
        xPathLexer2 = new XPathLexer((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=2.102350365325485
  */
  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      Token token0 = xPathLexer0.dots();
      assertEquals("M", token0.getTokenText());
      
      Token token1 = xPathLexer0.leftBracket();
      assertEquals(3, token1.getTokenType());
      assertEquals("L", token1.getTokenText());
      
      Token token2 = xPathLexer0.minus();
      assertEquals("p", token2.getTokenText());
      assertEquals(6, token2.getTokenType());
      
      Token token3 = xPathLexer0.identifier();
      Token token4 = xPathLexer0.at();
      assertEquals("<", token4.getTokenText());
      
      Token token5 = xPathLexer0.notEquals();
      assertEquals("g|", token5.getTokenText());
      assertEquals(22, token5.getTokenType());
      
      String string0 = token3.toString();
      assertEquals("[ (15) (v8bZQZr)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token6 = xPathLexer2.rightBracket();
      assertEquals(4, token6.getTokenType());
      
      Token token7 = xPathLexer0.nextToken();
      assertEquals("3", token7.getTokenText());
      assertEquals(30, token7.getTokenType());
      
      xPathLexer1.and();
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer1.pipe();
      assertEquals(17, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (15) (v8bZQZr)");
      Token token9 = xPathLexer2.nextToken();
      assertEquals((-1), token9.getTokenType());
      
      Token token10 = xPathLexer0.dollar();
      assertEquals(26, token10.getTokenType());
      
      Token token11 = xPathLexer4.equals();
      assertEquals("[", token11.getTokenText());
      assertEquals(21, token11.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token12 = xPathLexer4.doubleColon();
      assertEquals(" (", token12.getTokenText());
      assertEquals(19, token12.getTokenType());
      
      Token token13 = xPathLexer3.plus();
      assertEquals(5, token13.getTokenType());
      
      xPathLexer2.rightParen();
      boolean boolean0 = xPathLexer1.isIdentifierStartChar('k');
      assertTrue(boolean0);
      
      Token token14 = xPathLexer2.dots();
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer0.identifier();
      assertEquals(15, token15.getTokenType());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.3486193543471083
  */
  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.leftBracket();
      Token token0 = xPathLexer0.minus();
      assertEquals(6, token0.getTokenType());
      assertEquals("2", token0.getTokenText());
      
      xPathLexer0.nextToken();
      Token token1 = xPathLexer0.comma();
      assertEquals("<", token1.getTokenText());
      
      xPathLexer0.consume();
      Token token2 = xPathLexer0.doubleColon();
      assertEquals(19, token2.getTokenType());
      assertEquals("xb", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      assertEquals("7", token3.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.identifierOrOperatorName();
      Token token4 = xPathLexer0.leftBracket();
      assertEquals("c", token4.getTokenText());
      
      Token token5 = xPathLexer0.dollar();
      assertEquals("]", token5.getTokenText());
      
      xPathLexer0.or();
      Token token6 = xPathLexer0.pipe();
      assertEquals("I", token6.getTokenText());
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer0.not();
      assertEquals(23, token7.getTokenType());
      
      xPathLexer0.equals();
      Token token8 = xPathLexer0.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      xPathLexer0.dollar();
      xPathLexer0.identifier();
      xPathLexer0.mod();
      Token token9 = xPathLexer0.rightParen();
      assertEquals(2, token9.getTokenType());
      
      Token token10 = xPathLexer0.leftParen();
      assertEquals(1, token10.getTokenType());
      
      Token token11 = xPathLexer0.equals();
      assertEquals(21, token11.getTokenType());
      
      xPathLexer0.getPreviousToken();
      boolean boolean0 = xPathLexer0.isIdentifierStartChar('^');
      assertFalse(boolean0);
      
      Token token12 = xPathLexer0.dollar();
      assertEquals(26, token12.getTokenType());
      
      Token token13 = xPathLexer0.number();
      assertEquals(30, token13.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token14 = xPathLexer1.identifierOrOperatorName();
      assertEquals(15, token14.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      xPathLexer0.literal();
      xPathLexer1.div();
      Token token15 = xPathLexer2.star();
      assertEquals("N", token15.getTokenText());
      assertEquals(20, token15.getTokenType());
      
      Token token16 = xPathLexer1.dots();
      assertEquals(13, token16.getTokenType());
      assertEquals("<", token16.getTokenText());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.9650340996732407
  */
  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      XPathLexer xPathLexer1 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer1.nextToken();
      xPathLexer0.relationalOperator();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dollar();
      xPathLexer0.colon();
      xPathLexer2.operatorName();
      xPathLexer2.relationalOperator();
      Token token0 = xPathLexer2.nextToken();
      xPathLexer2.operatorName();
      xPathLexer0.dollar();
      xPathLexer0.dollar();
      xPathLexer2.slashes();
      xPathLexer2.getPreviousToken();
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer0.or();
      xPathLexer0.rightBracket();
      xPathLexer3.pipe();
      XPathLexer xPathLexer4 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      xPathLexer1.nextToken();
      xPathLexer1.dollar();
      xPathLexer0.comma();
      xPathLexer1.equals();
      xPathLexer0.mod();
      xPathLexer1.pipe();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.dots();
      xPathLexer0.at();
      xPathLexer4.plus();
      Token token1 = xPathLexer2.star();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 91
  /*Coverage entropy=3.47515271582925
  */
  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-1829));
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      // Undeclared exception!
      try { 
        xPathLexer0.div();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 92
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      int int0 = xPathLexer0.currentPosition();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 93
  /*Coverage entropy=2.2681531014830867
  */
  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("4W", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      Token token2 = xPathLexer0.comma();
      assertEquals("M", token2.getTokenText());
      
      Token token3 = xPathLexer0.colon();
      assertEquals(18, token3.getTokenType());
      
      Token token4 = xPathLexer0.not();
      assertEquals(23, token4.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token5 = xPathLexer0.nextToken();
      assertEquals(15, token5.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("@4WMbFIVB");
      Token token6 = xPathLexer2.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("@4", token6.getTokenText());
      
      Token token7 = xPathLexer0.dollar();
      assertEquals(26, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token8 = xPathLexer0.pipe();
      assertEquals(17, token8.getTokenType());
      
      xPathLexer2.endPosition();
      Token token9 = xPathLexer2.nextToken();
      assertEquals("WMbFIVB", token9.getTokenText());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer0.relationalOperator();
      xPathLexer0.literal();
      xPathLexer2.identifierOrOperatorName();
      xPathLexer4.or();
      xPathLexer0.nextToken();
      xPathLexer0.equals();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer2.leftBracket();
      xPathLexer0.and();
      xPathLexer1.or();
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      Token token12 = xPathLexer5.rightParen();
      assertEquals(2, token12.getTokenType());
      
      xPathLexer6.and();
      XPathLexer xPathLexer7 = new XPathLexer("@4WMbFIVB");
      xPathLexer5.comma();
      Token token13 = xPathLexer7.rightBracket();
      assertEquals("@", token13.getTokenText());
      
      xPathLexer2.at();
      Token token14 = xPathLexer7.dots();
      assertEquals(13, token14.getTokenType());
      assertEquals("4", token14.getTokenText());
      
      xPathLexer5.comma();
      xPathLexer4.leftParen();
      Token token15 = xPathLexer1.minus();
      assertEquals(6, token15.getTokenType());
  }

  /**
  //Test case number: 94
  /*Coverage entropy=2.134594967375671
  */
  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|OGl47e8'5Qw%");
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.identifier();
      Token token2 = xPathLexer0.whitespace();
      token2.toString();
      Token token3 = xPathLexer0.minus();
      String string0 = token3.toString();
      assertEquals("[ (6) (5)", string0);
      
      xPathLexer0.currentPosition();
      xPathLexer0.setPreviousToken(token3);
      Token token4 = xPathLexer0.identifierOrOperatorName();
      String string1 = token4.toString();
      assertEquals("[ (15) (Qw)", string1);
      
      token2.toString();
      xPathLexer0.leftParen();
      Token token5 = new Token(5, "[ (6) (l)", 5, 5);
      Token token6 = xPathLexer0.leftBracket();
      assertEquals(3, token6.getTokenType());
      
      Token token7 = xPathLexer0.notEquals();
      assertEquals(22, token7.getTokenType());
      
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (47e8)");
      Token token8 = xPathLexer1.colon();
      assertEquals("[", token8.getTokenText());
      assertEquals(18, token8.getTokenType());
      
      String string2 = token1.toString();
      assertEquals("[ (15) (OGl47e8)", string2);
      
      String string3 = token2.toString();
      assertEquals("[ (-2) ()", string3);
      
      Token token9 = xPathLexer0.star();
      assertEquals(20, token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(" ", token10.getTokenText());
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.setPreviousToken(token0);
      assertEquals("|", token0.getTokenText());
      
      Token token11 = xPathLexer2.at();
      assertEquals(16, token11.getTokenType());
      
      Token token12 = xPathLexer1.nextToken();
      assertEquals("(", token12.getTokenText());
      
      Token token13 = xPathLexer2.not();
      assertEquals(23, token13.getTokenType());
      
      Token token14 = xPathLexer1.rightBracket();
      assertEquals(4, token14.getTokenType());
      assertEquals("1", token14.getTokenText());
      
      Token token15 = xPathLexer0.slashes();
      assertEquals(11, token15.getTokenType());
      
      Token token16 = xPathLexer1.comma();
      assertEquals(32, token16.getTokenType());
      assertEquals("5", token16.getTokenText());
  }

  /**
  //Test case number: 95
  /*Coverage entropy=3.052111479243784
  */
  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("");
      xPathLexer0.identifier();
      xPathLexer0.colon();
      xPathLexer0.rightBracket();
      xPathLexer0.mod();
      xPathLexer0.number();
      xPathLexer0.mod();
      xPathLexer0.number();
      xPathLexer0.dots();
      xPathLexer0.operatorName();
      xPathLexer0.operatorName();
      xPathLexer0.equals();
      xPathLexer0.doubleColon();
      xPathLexer0.rightParen();
      xPathLexer0.and();
      xPathLexer0.hasMoreChars();
      xPathLexer0.whitespace();
      xPathLexer0.leftBracket();
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.and();
      assertNull(token0);
  }

  /**
  //Test case number: 96
  /*Coverage entropy=1.9916978224323731
  */
  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals(3, token0.getTokenType());
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      xPathLexer0.identifier();
      Token token2 = xPathLexer0.at();
      assertEquals("<", token2.getTokenText());
      
      Token token3 = xPathLexer0.notEquals();
      assertEquals(22, token3.getTokenType());
      
      String string0 = token1.toString();
      assertEquals("[ (6) (2)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer1.dollar();
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token4 = xPathLexer0.nextToken();
      assertEquals(15, token4.getTokenType());
      
      xPathLexer2.pipe();
      xPathLexer1.endPosition();
      xPathLexer1.nextToken();
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.relationalOperator();
      xPathLexer0.literal();
      XPathLexer xPathLexer5 = new XPathLexer("[ (6) (2)");
      xPathLexer5.identifierOrOperatorName();
      xPathLexer2.or();
      Token token5 = xPathLexer2.nextToken();
      assertEquals((-1), token5.getTokenType());
      
      Token token6 = xPathLexer3.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer0.comma();
      assertEquals(32, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer();
      XPathLexer xPathLexer7 = new XPathLexer("bGl~J;aqc,354=}B};");
      Token token8 = xPathLexer7.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals("b", token8.getTokenText());
      
      Token token9 = new Token(0, "", 99, 1125);
      Token token10 = xPathLexer3.pipe();
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer3.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer5.at();
      assertEquals(16, token12.getTokenType());
      
      xPathLexer2.plus();
      Token token13 = xPathLexer7.star();
      assertEquals(20, token13.getTokenType());
      assertEquals("G", token13.getTokenText());
  }

  /**
  //Test case number: 97
  /*Coverage entropy=3.0572033174478612
  */
  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("\"gg1>?N)*8,+Me&?n{");
      Token token0 = xPathLexer0.identifierOrOperatorName();
      assertEquals(15, token0.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.pipe();
      Token token1 = xPathLexer0.equals();
      assertEquals(21, token1.getTokenType());
      assertEquals("1", token1.getTokenText());
      
      xPathLexer0.getPreviousToken();
      Token token2 = xPathLexer0.rightParen();
      xPathLexer0.or();
      Token token3 = xPathLexer0.slashes();
      assertEquals("?", token3.getTokenText());
      
      xPathLexer0.rightParen();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals(")", token4.getTokenText());
      
      xPathLexer0.and();
      xPathLexer0.or();
      xPathLexer0.colon();
      Token token5 = xPathLexer0.colon();
      assertEquals("8", token5.getTokenText());
      
      Token token6 = xPathLexer0.notEquals();
      assertEquals(22, token6.getTokenType());
      assertEquals(",+", token6.getTokenText());
      
      xPathLexer0.div();
      Token token7 = xPathLexer0.doubleColon();
      assertEquals(19, token7.getTokenType());
      
      token2.toString();
      String string0 = token2.toString();
      assertEquals("[ (2) (>)", string0);
      
      Token token8 = xPathLexer0.star();
      assertEquals(20, token8.getTokenType());
      
      xPathLexer0.isIdentifierChar('^');
      Token token9 = xPathLexer0.not();
      assertEquals("", token9.getTokenText());
      assertEquals(23, token9.getTokenType());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.setPreviousToken(token2);
      Token token10 = xPathLexer0.pipe();
      assertEquals("?", token10.getTokenText());
      assertEquals(17, token10.getTokenType());
      
      Token token11 = xPathLexer0.literal();
      assertNull(token11);
      
      Token token12 = xPathLexer0.identifierOrOperatorName();
      assertNull(token12);
      
      xPathLexer0.dots();
      Token token13 = xPathLexer0.dots();
      assertEquals(13, token13.getTokenType());
      
      xPathLexer0.colon();
      XPathLexer xPathLexer1 = new XPathLexer("[ (2) (>)");
      Token token14 = xPathLexer1.at();
      assertEquals(16, token14.getTokenType());
      assertEquals("[", token14.getTokenText());
      
      xPathLexer1.plus();
      Token token15 = xPathLexer1.plus();
      assertEquals(5, token15.getTokenType());
      
      Token token16 = xPathLexer0.rightBracket();
      assertEquals(4, token16.getTokenType());
      
      Token token17 = xPathLexer0.rightParen();
      assertEquals(2, token17.getTokenType());
  }

  /**
  //Test case number: 98
  /*Coverage entropy=3.5248844192193602
  */
  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.colon();
      xPathLexer0.div();
      xPathLexer0.colon();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.consume((-1829));
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.equals();
      xPathLexer0.leftBracket();
      xPathLexer0.equals();
      xPathLexer0.pipe();
      xPathLexer0.comma();
      xPathLexer0.dollar();
      xPathLexer0.leftBracket();
      xPathLexer0.dollar();
      // Undeclared exception!
      try { 
        xPathLexer0.relationalOperator();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 99
  /*Coverage entropy=1.8592880292819762
  */
  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.getPreviousToken();
      xPathLexer0.rightParen();
      xPathLexer0.star();
      xPathLexer0.doubleColon();
      xPathLexer0.dots();
      xPathLexer0.or();
      xPathLexer0.colon();
      xPathLexer0.equals();
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer1 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer1.nextToken();
      xPathLexer0.div();
      xPathLexer0.dollar();
      xPathLexer1.not();
      xPathLexer1.mod();
      xPathLexer0.consume();
      xPathLexer1.consume();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.dots();
      xPathLexer0.dots();
      xPathLexer1.getPreviousToken();
      xPathLexer1.and();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.XPathLexer");
      xPathLexer2.identifierOrOperatorName();
      // Undeclared exception!
      try { 
        xPathLexer2.LA((-891));
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 100
  /*Coverage entropy=1.857639056746601
  */
  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer0.relationalOperator();
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.div();
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("c", token0.getTokenText());
      assertEquals(3, token0.getTokenType());
      
      Token token1 = xPathLexer0.nextToken();
      assertEquals("om.werken.saxpath.Token", token1.getTokenText());
      assertEquals(15, token1.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      XPathLexer xPathLexer2 = new XPathLexer("com.werken.saxpath.Token");
      xPathLexer2.plus();
      xPathLexer2.relationalOperator();
      Token token2 = xPathLexer2.plus();
      assertEquals("o", token2.getTokenText());
      
      Token token3 = xPathLexer1.equals();
      assertEquals(21, token3.getTokenType());
      
      Token token4 = xPathLexer2.pipe();
      assertEquals(17, token4.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer2.mod();
      Token token5 = xPathLexer1.dots();
      assertEquals(13, token5.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer4.and();
      char char0 = xPathLexer0.LA(124);
      assertEquals('\uFFFF', char0);
      
      xPathLexer0.at();
      Token token6 = xPathLexer0.minus();
      assertEquals(6, token6.getTokenType());
      
      Token token7 = xPathLexer0.at();
      assertEquals(16, token7.getTokenType());
      
      Token token8 = xPathLexer4.rightBracket();
      assertEquals(4, token8.getTokenType());
      
      Token token9 = xPathLexer1.plus();
      assertEquals(5, token9.getTokenType());
  }

  /**
  //Test case number: 101
  /*Coverage entropy=2.6197778474345412
  */
  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.consume();
      Token token0 = xPathLexer0.star();
      xPathLexer0.notEquals();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.number();
      xPathLexer0.number();
      xPathLexer0.star();
      xPathLexer0.plus();
      xPathLexer0.slashes();
      xPathLexer0.consume();
      xPathLexer0.getXPath();
      xPathLexer0.notEquals();
      xPathLexer0.or();
      // Undeclared exception!
      try { 
        token0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 102
  /*Coverage entropy=1.9231727929000826
  */
  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      xPathLexer0.relationalOperator();
      Token token0 = xPathLexer0.notEquals();
      xPathLexer0.star();
      xPathLexer0.number();
      Token token1 = xPathLexer0.pipe();
      assertEquals("M", token1.getTokenText());
      
      xPathLexer0.dots();
      Token token2 = xPathLexer0.star();
      assertEquals("F", token2.getTokenText());
      assertEquals(20, token2.getTokenType());
      
      xPathLexer0.consume();
      xPathLexer0.setXPath("@4WMbFIVB");
      xPathLexer0.slashes();
      Token token3 = xPathLexer0.nextToken();
      assertEquals(30, token3.getTokenType());
      
      Token token4 = xPathLexer0.colon();
      assertEquals(18, token4.getTokenType());
      
      Token token5 = xPathLexer0.rightParen();
      assertEquals(2, token5.getTokenType());
      
      xPathLexer0.notEquals();
      Token token6 = xPathLexer0.doubleColon();
      assertEquals(19, token6.getTokenType());
      assertEquals("IV", token6.getTokenText());
      
      String string0 = token0.toString();
      assertEquals("[ (22) (@4)", string0);
      
      Token token7 = xPathLexer0.leftParen();
      assertEquals("B", token7.getTokenText());
      
      xPathLexer0.comma();
      Token token8 = xPathLexer0.dollar();
      assertEquals(26, token8.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token9 = xPathLexer1.pipe();
      assertEquals(17, token9.getTokenType());
      
      xPathLexer1.nextToken();
      xPathLexer1.notEquals();
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (22) (@4)");
      XPathLexer xPathLexer3 = new XPathLexer("`^4!e?YAf8NcW`D>");
      XPathLexer xPathLexer4 = new XPathLexer();
      xPathLexer2.dots();
      Token token11 = xPathLexer1.plus();
      assertEquals(5, token11.getTokenType());
      
      Token token12 = xPathLexer4.nextToken();
      assertEquals((-1), token12.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer("[ (22) (@4)");
      xPathLexer0.comma();
      Token token13 = xPathLexer5.rightBracket();
      assertEquals("[", token13.getTokenText());
      assertEquals(4, token13.getTokenType());
      
      xPathLexer0.at();
      Token token14 = xPathLexer3.dots();
      assertEquals("`", token14.getTokenText());
      assertEquals(13, token14.getTokenType());
      
      Token token15 = xPathLexer0.identifier();
      assertEquals(15, token15.getTokenType());
      
      Token token16 = xPathLexer4.comma();
      assertEquals(32, token16.getTokenType());
  }

  /**
  //Test case number: 103
  /*Coverage entropy=2.328868946917175
  */
  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.number();
      xPathLexer0.pipe();
      XPathLexer xPathLexer1 = new XPathLexer("*lkT'^ekQ-cB_n^");
      xPathLexer1.plus();
      xPathLexer1.minus();
      xPathLexer1.dollar();
      XPathLexer xPathLexer2 = new XPathLexer();
      assertFalse(xPathLexer2.equals((Object)xPathLexer1));
  }

  /**
  //Test case number: 104
  /*Coverage entropy=2.270193160125552
  */
  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("|OGl47e8'5Qw%");
      Token token0 = xPathLexer0.at();
      Token token1 = xPathLexer0.identifier();
      Token token2 = xPathLexer0.whitespace();
      token2.toString();
      Token token3 = xPathLexer0.minus();
      String string0 = token3.toString();
      assertEquals("[ (6) (5)", string0);
      
      xPathLexer0.setPreviousToken(token3);
      Token token4 = xPathLexer0.identifierOrOperatorName();
      token4.toString();
      token2.toString();
      xPathLexer0.leftParen();
      Token token5 = xPathLexer0.leftBracket();
      assertEquals(3, token5.getTokenType());
      
      xPathLexer0.notEquals();
      xPathLexer0.div();
      XPathLexer xPathLexer1 = new XPathLexer("[ (15) (47e8)");
      Token token6 = xPathLexer1.colon();
      assertEquals(18, token6.getTokenType());
      assertEquals("[", token6.getTokenText());
      
      String string1 = token1.toString();
      assertEquals("[ (15) (OGl47e8)", string1);
      
      String string2 = token2.toString();
      assertEquals("[ (-2) ()", string2);
      
      Token token7 = xPathLexer0.star();
      assertEquals(20, token7.getTokenType());
      
      Token token8 = xPathLexer1.equals();
      assertEquals(21, token8.getTokenType());
      assertEquals(" ", token8.getTokenText());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.identifier();
      xPathLexer2.relationalOperator();
      xPathLexer0.whitespace();
      xPathLexer1.setPreviousToken((Token) null);
      xPathLexer1.setPreviousToken(token0);
      assertEquals("|", token0.getTokenText());
      
      Token token9 = xPathLexer2.at();
      assertEquals(16, token9.getTokenType());
      
      xPathLexer1.nextToken();
      Token token10 = xPathLexer2.not();
      assertEquals(23, token10.getTokenType());
      
      Token token11 = xPathLexer1.rightBracket();
      assertEquals(4, token11.getTokenType());
      assertEquals("1", token11.getTokenText());
      
      Token token12 = xPathLexer0.slashes();
      assertEquals(11, token12.getTokenType());
      
      Token token13 = xPathLexer1.comma();
      assertEquals(32, token13.getTokenType());
      assertEquals("5", token13.getTokenText());
      
      Token token14 = xPathLexer1.number();
      assertEquals("", token14.getTokenText());
      assertEquals(30, token14.getTokenType());
  }

  /**
  //Test case number: 105
  /*Coverage entropy=2.1572178357813194
  */
  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(",RDYyOZ<{p5");
      xPathLexer0.equals();
      Token token0 = xPathLexer0.star();
      assertEquals(20, token0.getTokenType());
      assertEquals("R", token0.getTokenText());
      
      Token token1 = xPathLexer0.plus();
      assertEquals(5, token1.getTokenType());
      assertEquals("D", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(15, token2.getTokenType());
      assertEquals("YyOZ", token2.getTokenText());
      
      xPathLexer0.hasMoreChars();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.and();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.dollar();
      Token token3 = xPathLexer1.pipe();
      assertEquals(17, token3.getTokenType());
      
      xPathLexer0.relationalOperator();
      XPathLexer xPathLexer2 = new XPathLexer("");
      XPathLexer xPathLexer3 = new XPathLexer(",RDYyOZ<{p5");
      Token token4 = xPathLexer3.nextToken();
      assertEquals(",", token4.getTokenText());
      
      xPathLexer1.dollar();
      XPathLexer xPathLexer4 = new XPathLexer(",RDYyOZ<{p5");
      Token token5 = xPathLexer0.dollar();
      assertEquals(26, token5.getTokenType());
      assertEquals("5", token5.getTokenText());
      
      Token token6 = xPathLexer4.equals();
      assertEquals(21, token6.getTokenType());
      assertEquals(",", token6.getTokenText());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      Token token7 = xPathLexer5.minus();
      assertEquals(6, token7.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.or();
      xPathLexer6.doubleColon();
      XPathLexer xPathLexer7 = new XPathLexer();
      XPathLexer xPathLexer8 = new XPathLexer("");
      Token token8 = xPathLexer7.leftBracket();
      assertEquals(3, token8.getTokenType());
      
      Token token9 = xPathLexer4.slashes();
      assertEquals("R", token9.getTokenText());
      assertEquals(11, token9.getTokenType());
      
      xPathLexer7.notEquals();
      Token token10 = xPathLexer2.comma();
      assertEquals(32, token10.getTokenType());
      
      xPathLexer3.mod();
      Token token11 = xPathLexer4.not();
      assertEquals(23, token11.getTokenType());
      assertEquals("D", token11.getTokenText());
  }

  /**
  //Test case number: 106
  /*Coverage entropy=2.133022988769198
  */
  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      xPathLexer0.nextToken();
      xPathLexer0.notEquals();
      xPathLexer0.colon();
      xPathLexer0.or();
      XPathLexer xPathLexer1 = new XPathLexer("*ZLGk#H!0,+\"");
      xPathLexer1.not();
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.div();
      xPathLexer0.dollar();
      XPathLexer xPathLexer3 = new XPathLexer("@4WMbFIVB");
      xPathLexer3.mod();
      xPathLexer2.consume();
      XPathLexer xPathLexer4 = new XPathLexer("*ZLGk#H!0,+\"");
      xPathLexer4.not();
      xPathLexer4.consume();
      xPathLexer2.slashes();
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer3.or();
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer6.rightBracket();
      xPathLexer0.pipe();
      XPathLexer xPathLexer7 = new XPathLexer("");
      xPathLexer6.nextToken();
      xPathLexer5.dollar();
      Token token0 = xPathLexer0.comma();
      xPathLexer5.equals();
      xPathLexer0.mod();
      xPathLexer3.pipe();
      xPathLexer5.dots();
      xPathLexer3.at();
      xPathLexer6.plus();
      Token token1 = xPathLexer6.star();
      assertFalse(token1.equals((Object)token0));
  }

  /**
  //Test case number: 107
  /*Coverage entropy=2.945470594129494
  */
  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("com.werken.saxpath.XPathLexer");
      Token token0 = xPathLexer0.equals();
      token0.toString();
      xPathLexer0.number();
      token0.toString();
      token0.toString();
      xPathLexer0.minus();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      token0.toString();
      xPathLexer0.setPreviousToken(token0);
      Token token1 = xPathLexer0.plus();
      xPathLexer0.and();
      xPathLexer0.operatorName();
      xPathLexer0.consume(0);
      xPathLexer0.colon();
      xPathLexer0.leftParen();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.identifier();
      xPathLexer0.rightBracket();
      xPathLexer0.dots();
      xPathLexer0.minus();
      xPathLexer0.rightParen();
      xPathLexer0.doubleColon();
      xPathLexer0.and();
      xPathLexer0.number();
      xPathLexer0.doubleColon();
      xPathLexer0.slashes();
      xPathLexer0.hasMoreChars();
      xPathLexer0.getXPath();
      xPathLexer0.star();
      xPathLexer0.setPreviousToken(token1);
      Token token2 = xPathLexer0.div();
      assertNull(token2);
  }

  /**
  //Test case number: 108
  /*Coverage entropy=2.2259301699622407
  */
  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      xPathLexer0.or();
      Token token0 = xPathLexer0.colon();
      assertEquals(18, token0.getTokenType());
      assertEquals("L", token0.getTokenText());
      
      xPathLexer0.or();
      Token token1 = xPathLexer0.not();
      assertEquals(23, token1.getTokenType());
      assertEquals("v", token1.getTokenText());
      
      Token token2 = xPathLexer0.nextToken();
      assertEquals(30, token2.getTokenType());
      assertEquals("8", token2.getTokenText());
      
      xPathLexer0.relationalOperator();
      xPathLexer0.nextToken();
      Token token3 = xPathLexer0.dollar();
      assertEquals("b", token3.getTokenText());
      
      xPathLexer0.mod();
      xPathLexer0.consume();
      XPathLexer xPathLexer1 = new XPathLexer("MLv8bZQZr<g| 3");
      xPathLexer0.consume();
      Token token4 = xPathLexer0.slashes();
      assertEquals("Z", token4.getTokenText());
      assertEquals(11, token4.getTokenType());
      
      xPathLexer0.getPreviousToken();
      XPathLexer xPathLexer2 = new XPathLexer();
      xPathLexer2.plus();
      Token token5 = xPathLexer2.rightBracket();
      assertEquals(4, token5.getTokenType());
      
      xPathLexer1.consume(3593);
      Token token6 = xPathLexer2.pipe();
      assertEquals(17, token6.getTokenType());
      
      Token token7 = xPathLexer2.leftBracket();
      assertEquals(3, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer("MLv8bZQZr<g| 3");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("r<g| 3", token8.getTokenText());
      
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer1.equals();
      assertEquals(21, token10.getTokenType());
      
      xPathLexer0.mod();
      Token token11 = xPathLexer2.dots();
      assertEquals(13, token11.getTokenType());
      
      Token token12 = xPathLexer2.at();
      assertEquals(16, token12.getTokenType());
      
      Token token13 = xPathLexer0.plus();
      assertEquals(5, token13.getTokenType());
      assertEquals("r", token13.getTokenText());
      
      Token token14 = xPathLexer0.star();
      assertEquals("<", token14.getTokenText());
      assertEquals(20, token14.getTokenType());
      
      Token token15 = xPathLexer3.comma();
      assertEquals(32, token15.getTokenType());
      assertEquals("M", token15.getTokenText());
      
      xPathLexer1.relationalOperator();
      Token token16 = xPathLexer2.minus();
      assertEquals(6, token16.getTokenType());
  }

  /**
  //Test case number: 109
  /*Coverage entropy=1.9183396504853962
  */
  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("N2UlPkvdb5q<9xb7c]I");
      Token token0 = xPathLexer0.leftBracket();
      assertEquals("N", token0.getTokenText());
      
      Token token1 = xPathLexer0.minus();
      Token token2 = xPathLexer0.identifier();
      assertEquals("UlPkvdb5q", token2.getTokenText());
      
      Token token3 = xPathLexer0.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.notEquals();
      assertEquals(22, token4.getTokenType());
      assertEquals("9x", token4.getTokenText());
      
      String string0 = token1.toString();
      assertEquals("[ (6) (2)", string0);
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.operatorName();
      XPathLexer xPathLexer2 = new XPathLexer("[ (6) (2)");
      Token token5 = xPathLexer2.rightBracket();
      assertEquals("[", token5.getTokenText());
      assertEquals(4, token5.getTokenType());
      
      xPathLexer1.dollar();
      xPathLexer0.and();
      Token token6 = xPathLexer2.dollar();
      assertEquals(" ", token6.getTokenText());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token7 = xPathLexer3.identifierOrOperatorName();
      assertEquals(15, token7.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer("[ (6) (2)");
      Token token8 = xPathLexer1.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      Token token9 = xPathLexer1.dollar();
      assertEquals(26, token9.getTokenType());
      
      Token token10 = xPathLexer4.not();
      assertEquals(23, token10.getTokenType());
      assertEquals("[", token10.getTokenText());
      
      Token token11 = xPathLexer1.doubleColon();
      assertEquals(19, token11.getTokenType());
      
      Token token12 = xPathLexer0.plus();
      assertEquals("b", token12.getTokenText());
      assertEquals(5, token12.getTokenType());
      
      Token token13 = xPathLexer1.rightParen();
      assertEquals(2, token13.getTokenType());
      
      Token token14 = xPathLexer2.literal();
      assertEquals("6) ", token14.getTokenText());
      assertNotNull(token14);
      assertEquals(27, token14.getTokenType());
  }

  /**
  //Test case number: 110
  /*Coverage entropy=3.2815437243487775
  */
  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer();
      xPathLexer0.operatorName();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.rightBracket();
      Token token0 = xPathLexer0.dollar();
      assertEquals(26, token0.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer();
      Token token1 = xPathLexer1.pipe();
      assertEquals(17, token1.getTokenType());
      
      Token token2 = xPathLexer2.dots();
      assertEquals(13, token2.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token3 = xPathLexer3.at();
      assertEquals(16, token3.getTokenType());
      
      Token token4 = xPathLexer0.plus();
      assertEquals(5, token4.getTokenType());
      
      xPathLexer1.equals();
      XPathLexer xPathLexer4 = new XPathLexer("");
      Token token5 = xPathLexer4.star();
      assertEquals(20, token5.getTokenType());
      
      Token token6 = xPathLexer4.rightParen();
      assertEquals(2, token6.getTokenType());
      
      Token token7 = xPathLexer1.rightBracket();
      assertEquals(4, token7.getTokenType());
      
      Token token8 = xPathLexer0.equals();
      assertEquals(21, token8.getTokenType());
      
      Token token9 = xPathLexer0.notEquals();
      assertEquals(22, token9.getTokenType());
  }

  /**
  //Test case number: 111
  /*Coverage entropy=1.8869124740075973
  */
  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer(" dxew0M9+o");
      Token token0 = xPathLexer0.slashes();
      assertEquals(11, token0.getTokenType());
      assertEquals(" ", token0.getTokenText());
      
      Token token1 = xPathLexer0.star();
      assertEquals("d", token1.getTokenText());
      
      xPathLexer0.nextToken();
      Token token2 = xPathLexer0.rightParen();
      assertEquals(2, token2.getTokenType());
      assertEquals("+", token2.getTokenText());
      
      Token token3 = xPathLexer0.star();
      assertEquals(20, token3.getTokenType());
      
      Token token4 = xPathLexer0.doubleColon();
      assertEquals(19, token4.getTokenType());
      
      xPathLexer0.or();
      xPathLexer0.and();
      xPathLexer0.dollar();
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer0.nextToken();
      XPathLexer xPathLexer2 = new XPathLexer(" dxew0M9+o");
      xPathLexer2.relationalOperator();
      XPathLexer xPathLexer3 = new XPathLexer("");
      Token token5 = xPathLexer0.pipe();
      assertEquals(17, token5.getTokenType());
      
      Token token6 = xPathLexer1.nextToken();
      assertEquals((-1), token6.getTokenType());
      
      Token token7 = xPathLexer2.dollar();
      assertEquals(" ", token7.getTokenText());
      
      xPathLexer3.leftBracket();
      Token token8 = xPathLexer3.equals();
      assertEquals(21, token8.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      Token token9 = xPathLexer3.notEquals();
      assertEquals(22, token9.getTokenType());
      
      XPathLexer xPathLexer5 = new XPathLexer();
      XPathLexer xPathLexer6 = new XPathLexer(" dxew0M9+o");
      Token token10 = xPathLexer2.leftBracket();
      assertEquals(3, token10.getTokenType());
      
      Token token11 = xPathLexer6.minus();
      assertEquals(" ", token11.getTokenText());
      assertEquals(6, token11.getTokenType());
      
      XPathLexer xPathLexer7 = new XPathLexer(" dxew0M9+o");
      Token token12 = xPathLexer7.nextToken();
      assertEquals("dxew0M9", token12.getTokenText());
      assertEquals(15, token12.getTokenType());
  }

  /**
  //Test case number: 112
  /*Coverage entropy=2.021461531816714
  */
  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("@4WMbFIVB");
      Token token0 = xPathLexer0.nextToken();
      assertEquals("@", token0.getTokenText());
      
      Token token1 = xPathLexer0.notEquals();
      assertEquals("4W", token1.getTokenText());
      assertEquals(22, token1.getTokenType());
      
      xPathLexer0.or();
      Token token2 = xPathLexer0.colon();
      assertEquals("M", token2.getTokenText());
      assertEquals(18, token2.getTokenType());
      
      xPathLexer0.or();
      Token token3 = xPathLexer0.not();
      assertEquals("b", token3.getTokenText());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      xPathLexer1.relationalOperator();
      Token token4 = xPathLexer0.nextToken();
      assertEquals("FIVB", token4.getTokenText());
      assertEquals(15, token4.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("@4WMbFIVB");
      Token token5 = xPathLexer2.doubleColon();
      assertEquals("@4", token5.getTokenText());
      assertEquals(19, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals(26, token6.getTokenType());
      
      Token token7 = xPathLexer1.not();
      assertEquals(23, token7.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      xPathLexer3.relationalOperator();
      Token token8 = xPathLexer3.nextToken();
      assertEquals((-1), token8.getTokenType());
      
      xPathLexer1.plus();
      Token token9 = xPathLexer2.equals();
      assertEquals("W", token9.getTokenText());
      assertEquals(21, token9.getTokenType());
      
      Token token10 = xPathLexer1.pipe();
      assertEquals(17, token10.getTokenType());
      
      XPathLexer xPathLexer4 = new XPathLexer();
      XPathLexer xPathLexer5 = new XPathLexer();
      xPathLexer5.mod();
      Token token11 = xPathLexer2.dots();
      assertEquals("M", token11.getTokenText());
      assertEquals(13, token11.getTokenType());
      
      XPathLexer xPathLexer6 = new XPathLexer("");
      xPathLexer0.at();
      Token token12 = xPathLexer6.plus();
      assertEquals(5, token12.getTokenType());
  }

  /**
  //Test case number: 113
  /*Coverage entropy=1.9146113047686555
  */
  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("AV|m,EEh8Ul0=,0E");
      Token token0 = xPathLexer0.nextToken();
      Token token1 = xPathLexer0.identifier();
      assertEquals("", token1.getTokenText());
      
      Token token2 = xPathLexer0.at();
      Token token3 = xPathLexer0.notEquals();
      String string0 = token3.toString();
      assertEquals("[ (22) (m,)", string0);
      
      xPathLexer0.operatorName();
      Token token4 = xPathLexer0.rightBracket();
      assertEquals("E", token4.getTokenText());
      
      token0.toString();
      String string1 = token2.toString();
      assertEquals("[ (16) (|)", string1);
      
      String string2 = token0.toString();
      assertEquals("[ (15) (AV)", string2);
      assertEquals("AV", token0.getTokenText());
      
      Token token5 = xPathLexer0.comma();
      assertEquals(32, token5.getTokenType());
      
      Token token6 = xPathLexer0.dollar();
      assertEquals("h", token6.getTokenText());
      assertEquals(26, token6.getTokenType());
      
      XPathLexer xPathLexer1 = new XPathLexer();
      Token token7 = xPathLexer0.pipe();
      assertEquals("8", token7.getTokenText());
      assertEquals(17, token7.getTokenType());
      
      XPathLexer xPathLexer2 = new XPathLexer("[ (16) (|)");
      Token token8 = xPathLexer0.nextToken();
      assertEquals("Ul0=,0E", token8.getTokenText());
      
      Token token9 = xPathLexer1.equals();
      assertEquals(21, token9.getTokenType());
      
      XPathLexer xPathLexer3 = new XPathLexer();
      Token token10 = xPathLexer2.doubleColon();
      assertEquals(19, token10.getTokenType());
      assertEquals("[ ", token10.getTokenText());
      
      Token token11 = xPathLexer1.leftBracket();
      assertEquals(3, token11.getTokenType());
      
      Token token12 = xPathLexer2.rightParen();
      assertEquals(2, token12.getTokenType());
      assertEquals("(", token12.getTokenText());
  }

  /**
  //Test case number: 114
  /*Coverage entropy=2.3243573187881914
  */
  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      XPathLexer xPathLexer0 = new XPathLexer("MLpv8bZQZr<g| 3");
      Token token0 = xPathLexer0.slashes();
      xPathLexer0.literal();
      Token token1 = xPathLexer0.rightBracket();
      xPathLexer0.or();
      xPathLexer0.dollar();
      xPathLexer0.and();
      xPathLexer0.setPreviousToken(token0);
      xPathLexer0.identifierOrOperatorName();
      xPathLexer0.equals();
      // Undeclared exception!
      try { 
        token1.toString();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }
}
