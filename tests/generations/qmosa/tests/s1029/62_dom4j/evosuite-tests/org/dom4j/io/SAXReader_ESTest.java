/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 03:44:24 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FileDescriptor;
import java.io.InputStream;
import java.io.PipedInputStream;
import java.io.PipedOutputStream;
import java.io.PushbackInputStream;
import java.io.Reader;
import java.io.SequenceInputStream;
import java.io.StringReader;
import java.net.URL;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.Future;
import java.util.concurrent.TimeUnit;
import java.util.function.BiFunction;
import org.dom4j.DefaultDocumentFactory;
import org.dom4j.DocumentFactory;
import org.dom4j.Element;
import org.dom4j.ElementHandler;
import org.dom4j.Namespace;
import org.dom4j.QName;
import org.dom4j.bean.BeanMetaData;
import org.dom4j.dom.DOMNamespace;
import org.dom4j.io.DispatchHandler;
import org.dom4j.io.PruningDispatchHandler;
import org.dom4j.io.SAXContentHandler;
import org.dom4j.io.SAXReader;
import org.dom4j.tree.BaseElement;
import org.dom4j.tree.NamespaceStack;
import org.dom4j.util.NonLazyElement;
import org.dom4j.util.UserDataElement;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.evosuite.runtime.mock.java.lang.MockException;
import org.evosuite.runtime.mock.java.net.MockURL;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteURL;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.xml.sax.EntityResolver;
import org.xml.sax.ErrorHandler;
import org.xml.sax.InputSource;
import org.xml.sax.SAXException;
import org.xml.sax.SAXNotRecognizedException;
import org.xml.sax.SAXNotSupportedException;
import org.xml.sax.SAXParseException;
import org.xml.sax.XMLFilter;
import org.xml.sax.XMLReader;
import org.xml.sax.ext.DefaultHandler2;
import org.xml.sax.ext.Locator2Impl;
import org.xml.sax.helpers.DefaultHandler;
import org.xml.sax.helpers.LocatorImpl;
import org.xml.sax.helpers.ParserAdapter;
import org.xml.sax.helpers.XMLFilterImpl;
import org.xml.sax.helpers.XMLReaderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class SAXReader_ESTest extends SAXReader_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "http:/xml.rg/sax/features/string-interning");
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("*+-Uxm8[t6'");
      sAXReader0.setEncoding("+}(i)+h*o[c-7");
      try { 
        sAXReader0.read((Reader) stringReader0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.3753827031053296
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      UserDataElement userDataElement3 = userDataElement2.clone();
      UserDataElement userDataElement4 = new UserDataElement((String) null);
      UserDataElement userDataElement5 = new UserDataElement("V68m[:$B:HooRoQVy");
      UserDataElement userDataElement6 = userDataElement5.clone();
      userDataElement2.clone();
      userDataElement5.clone();
      userDataElement2.asXML();
      UserDataElement userDataElement7 = new UserDataElement((String) null);
      UserDataElement userDataElement8 = new UserDataElement("<Qa/>");
      userDataElement6.clone();
      userDataElement8.asXML();
      UserDataElement userDataElement9 = new UserDataElement("<<Qa/>/>");
      userDataElement3.isTextOnly();
      UserDataElement userDataElement10 = new UserDataElement("gGE");
      MockFile.createTempFile("//tmp/\"0Q0]o9B1 8>#", "z.%sG?8;UayiO]t");
      StringReader stringReader0 = new StringReader("<Qa/>");
      sAXReader0.read((Reader) stringReader0);
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      hashMap0.put("JTNvAica_u", "JTNvAica_u");
      hashMap0.replace((String) null, "JTNvAica_u");
      Namespace.get("//tmp/#s{u`Rd{KZS@L]d,s0Unhandled operator in createRelationalExpr(): ");
      QName.get("uPWYY*", (Namespace) null, "JTNvAica_u");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(":.|ACvR{&nc", biFunction0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("R^)0q-d;%|QB](");
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, ":.|ACvR{&nc");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "JTNvAica_u");
      StringReader stringReader0 = new StringReader("R^)0q-d;%|QB](");
  }

  /**
  //Test case number: 3
  /*Coverage entropy=3.366179761890393
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("//tmp/ltTfW7/R>%/Ye5\u0000ltTfW7/R>%/Ye5");
      char[] charArray0 = new char[4];
      charArray0[0] = 'S';
      charArray0[1] = 's';
      charArray0[2] = 'n';
      charArray0[3] = '7';
      stringReader0.read(charArray0);
      stringReader0.skip((-190L));
      sAXReader0.setIncludeExternalDTDDeclarations(true);
      try { 
        sAXReader0.read((Reader) stringReader0, "@re3Vld");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/@re3Vld : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "iN+u=J y6#");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "FOD5_}E");
      SAXReader sAXReader0 = new SAXReader(false);
      try { 
        sAXReader0.setFeature("http://xml.org/sax/features/string-interning", false);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // False state for feature 'http://xml.org/sax/features/string-interning' is not supported.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.376742981833967
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      sAXReader0.installXMLFilter(xMLFilterImpl0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      locatorImpl1.setColumnNumber(18);
      Locator2Impl locator2Impl1 = new Locator2Impl(locator2Impl0);
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      MockException mockException0 = new MockException((String) null);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[1] = (byte)58;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader0.getEntityResolver();
      sAXReader0.getXMLFilter();
      sAXReader0.createContentHandler(xMLFilterImpl0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.4383740327894543
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = "";
      boolean boolean0 = false;
      SAXReader sAXReader0 = new SAXReader(false);
      DefaultHandler defaultHandler0 = new DefaultHandler();
      sAXReader0.setEntityResolver(defaultHandler0);
      sAXReader0.getXMLReader();
      sAXReader0.resetHandlers();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity("", "");
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createCDATA("/BT");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 47, 47);
      byteArrayInputStream0.mark(47);
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      Object object0 = new Object();
      try { 
        sAXReader0.setProperty("http://xml.org/sax/properties/lexical-handler", object0);
        fail("Expecting exception: SAXNotSupportedException");
      
      } catch(SAXNotSupportedException e) {
         //
         // The value specified for property 'http://xml.org/sax/properties/lexical-handler' cannot be casted to org.xml.sax.ext.LexicalHandler.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=3.472760947585117
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      sAXReader0.getDispatchHandler();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.installXMLFilter(parserAdapter0);
      String string0 = "5/4FJc~Ve\\.i'lH.5V";
      sAXReader0.setEncoding("5/4FJc~Ve.i'lH.5V");
      String string1 = null;
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.3917728512041743
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl0.setLineNumber(35);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locatorImpl1.setPublicId("//tmp/+lj(5QKn_`H0");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl1);
      locator2Impl7.setColumnNumber(0);
      locator2Impl7.setPublicId("//tmp/+lj(5QKn_`H0");
      locatorImpl1.getPublicId();
      locator2Impl7.setLineNumber(0);
      locator2Impl0.getSystemId();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      locatorImpl1.setColumnNumber((-1388));
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      UserDataElement userDataElement0 = new UserDataElement((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      UserDataElement userDataElement1 = userDataElement0.clone();
      userDataElement1.getPath((Element) userDataElement0);
      userDataElement0.isTextOnly();
      userDataElement0.clone();
      StringReader stringReader0 = new StringReader("//tmp/+lj(5QKn_`H0");
      stringReader0.reset();
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      sAXReader0.setErrorHandler(defaultHandler2_0);
      try { 
        sAXReader0.read((Reader) stringReader0, (String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=3.2487663399462696
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/0tmp/sdj{P00/0tmp/sdj{P0");
      byteArray0[1] = (byte) (-93);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      byteArray0[2] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      InputSource inputSource0 = sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.334527382023145
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      userDataElement2.clone();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      UserDataElement userDataElement3 = new UserDataElement((String) null);
      UserDataElement userDataElement4 = new UserDataElement("V68m[:$B:HooRoQVy");
      UserDataElement userDataElement5 = userDataElement4.clone();
      UserDataElement userDataElement6 = userDataElement2.clone();
      userDataElement4.clone();
      userDataElement2.asXML();
      UserDataElement userDataElement7 = new UserDataElement((String) null);
      UserDataElement userDataElement8 = new UserDataElement("<Qa/>");
      userDataElement5.clone();
      userDataElement6.getUniquePath();
      userDataElement8.asXML();
      StringReader stringReader0 = new StringReader("<Qa/>");
      sAXReader0.read((Reader) stringReader0, "9TL");
      sAXReader0.createContentHandler((XMLReader) null);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=3.443045305328072
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locator2Impl0.setLineNumber(35);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locatorImpl1.setPublicId("//tmp/+lj(5QKn_`H0");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl1);
      locator2Impl7.setColumnNumber(0);
      locator2Impl7.setPublicId("//tmp/+lj(5QKn_`H0");
      locator2Impl7.setLineNumber(0);
      locator2Impl0.getSystemId();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl8.getXMLVersion();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl8);
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl0);
      MockException mockException0 = new MockException("<%e@");
      Locator2Impl locator2Impl10 = new Locator2Impl(locator2Impl2);
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      sAXReader0.setIncludeInternalDTDDeclarations(true);
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.070976373972562
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      SAXReader sAXReader0 = new SAXReader(true);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      MockException mockException0 = new MockException("R3WY");
      locator2Impl0.getSystemId();
      SAXParseException sAXParseException0 = new SAXParseException(" of document ", locator2Impl0, mockException0);
      mockException0.printStackTrace();
      sAXReader0.isValidating();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      try { 
        sAXReader0.setProperty("\");$lSFW]%PjMMj3", mockException0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property '\");$lSFW]%PjMMj3' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3087432950398514
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'T';
      charArray0[1] = 'T';
      charArray0[2] = '9';
      xMLFilterImpl0.characters(charArray0, 1, 4014);
      SAXReader sAXReader1 = new SAXReader(false);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader2 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.read("vviR?<jc{+-vF.'>7.P");
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3579626045413535
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter();
      documentFactory0.createDocument("//tmp/sdj{P0");
      xMLReaderAdapter0.endDocument();
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl0);
      SAXReader sAXReader1 = new SAXReader(documentFactory0, true);
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)27;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)126;
      byteArray0[3] = (byte) (-95);
      byteArray0[4] = (byte) (-127);
      byteArray0[5] = (byte)8;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, (byte)92, (byte)27);
      byteArrayInputStream1.reset();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      // Undeclared exception!
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream1);
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9296217656001493
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      sAXReader0.setXMLFilter(xMLFilterImpl1);
      sAXReader0.installXMLFilter(xMLFilterImpl1);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      locatorImpl1.getSystemId();
      locatorImpl0.setColumnNumber(39);
      LocatorImpl locatorImpl2 = new LocatorImpl(locatorImpl1);
      Locator2Impl locator2Impl0 = new Locator2Impl();
      XMLFilterImpl xMLFilterImpl2 = new XMLFilterImpl();
      Class<Object> class0 = Object.class;
      BeanMetaData.get(class0);
      NonLazyElement nonLazyElement0 = new NonLazyElement("jDv#f\"u*}YRipY-B*N%");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      MockException mockException0 = new MockException("R3WY");
      locator2Impl0.getPublicId();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setSystemId("Validation not supported for XMLReader: ");
      MockException mockException1 = new MockException("/");
      MockException mockException2 = new MockException("/");
      MockException mockException3 = new MockException();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("/");
      sAXReader_SAXEntityResolver0.resolveEntity("R3WY", "//tmp/org.dom4j.dom.DOMText0/tmp/I ,6=6T0JTNvAica_u/tmp/tmp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P0");
      SAXReader sAXReader0 = new SAXReader((XMLReader) null);
      sAXReader0.installXMLFilter((XMLReader) null);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMNamespace dOMNamespace0 = new DOMNamespace(":.|ACvR{&nc", ":.|ACvR{&nc");
      Namespace.get("//tmp/#s{u`Rd{KZS@L]d,s0Unhandled operator in createRelationalExpr(): ");
      dOMNamespace0.createXPath("JTNvAica_u");
      QName.get("uPWYY*", (Namespace) null, "JTNvAica_u");
      hashMap0.put("uPWYY*", ":.|ACvR{&nc");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(":.|ACvR{&nc", biFunction0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/L}\u0002PMGjgn/Gs`0http:/xml.org/sax/properties/lexical-handler");
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("R^)0q-d;%|QB](");
      sAXReader_SAXEntityResolver0.resolveEntity(":.|ACvR{&nc", (String) null);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "+7-_x`\"VJVT4ck<ZDy");
      SAXReader sAXReader0 = new SAXReader();
      String string0 = null;
      sAXReader0.setIgnoreComments(false);
      // Undeclared exception!
      try { 
        sAXReader0.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.076104579100767
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.resolveEntity("", "");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locatorImpl2.setColumnNumber(83);
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl2);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl4);
      locator2Impl2.setPublicId("count() requires one argument.");
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl1);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E");
      byte[] byteArray0 = new byte[0];
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      try { 
        sAXReader0.configureReader(xMLFilterImpl0, (DefaultHandler) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Validation not supported for XMLReader: org.xml.sax.helpers.XMLFilterImpl@44bd4b00 Nested exception: Feature: http://xml.org/sax/features/validation
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      MockFile mockFile0 = new MockFile("Z5|");
      File file0 = MockFile.createTempFile("Z5|", "$[@qAci3c", (File) mockFile0);
      MockFile mockFile1 = new MockFile(file0, "JTNvAica_u");
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = sAXReader0.isMergeAdjacentText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.964532803443662
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("");
      sAXReader_SAXEntityResolver0.uriPrefix = "";
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)58;
      sAXReader_SAXEntityResolver0.resolveEntity("", "//tmp/0tmp/sdj{P00/0tmp/sdj{P0");
      byteArray0[1] = (byte) (-93);
      byteArray0[2] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      sAXReader_SAXEntityResolver0.resolveEntity((String) null, "");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      sAXReader0.removeHandler("");
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.3381239155780884
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("//tmp/tmp/tmp/#s{u`Rd{KZS@L]d,s0Unhandled operator in createRelationalExpr(): 0[0/tmp/+!,Kse&0+!,Kse&");
      sAXReader_SAXEntityResolver0.resolveEntity(".dt(S4)WkwO5? }rF", "//tmp/tmp/tmp/#s{u`Rd{KZS@L]d,s0Unhandled operator in createRelationalExpr(): 0[0/tmp/+!,Kse&0+!,Kse&");
      LocatorImpl locatorImpl0 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locatorImpl0.setColumnNumber(83);
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locatorImpl0);
      locatorImpl3.setPublicId("=ffAfyC{tE@QK y~");
      Locator2Impl locator2Impl3 = new Locator2Impl(locator2Impl0);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl2.setLineNumber(41);
      locator2Impl3.getSystemId();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl3);
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl6);
      MockException mockException0 = new MockException("//tmp/-I.ix>6%5qTS>jU930\"?O");
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      try { 
        sAXReader0.read((InputStream) mockFileInputStream0, "]@%@-E");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=3.278600407264681
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createCDATA("/BT");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 54, 54);
      byteArrayInputStream0.mark(54);
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream2 = new ByteArrayInputStream(byteArray0);
      StringReader stringReader0 = new StringReader("starts-with() requires two arguments.");
      InputSource inputSource0 = new InputSource(stringReader0);
      try { 
        sAXReader0.read(inputSource0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      boolean boolean1 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(boolean1 == boolean0);
      
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      assertNotNull(xMLReader0);
      
      sAXReader0.getErrorHandler();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      sAXReader0.getDocumentFactory();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      MockException mockException0 = new MockException();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl2.setPublicId("");
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl0.setColumnNumber((-1164));
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl2.setLineNumber(76);
      LocatorImpl locatorImpl5 = new LocatorImpl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl6);
      MockException mockException1 = new MockException((String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=3.3367045838905973
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      MockException mockException0 = new MockException();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl2.setPublicId("");
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl0.setColumnNumber((-1164));
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl2.setLineNumber(76);
      locatorImpl1.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl6);
      MockException mockException1 = new MockException((String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document  : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.7214787039105834
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      MockException mockException0 = new MockException((String) null);
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl0.setColumnNumber((-1144));
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locatorImpl1.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl6);
      MockException mockException1 = new MockException();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      EntityResolver entityResolver0 = sAXReader0.createDefaultEntityResolver("");
      entityResolver0.resolveEntity("HuQae9-,B[+SxDV", "//tmp/-8j[^-Ya}me6<W0.tmp");
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("JTNvAica_u", (String) null);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent((String) null, biFunction0);
      SAXReader sAXReader0 = new SAXReader(false);
      // Undeclared exception!
      try { 
        sAXReader0.setProperty((String) null, "JTNvAica_u");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      UserDataElement userDataElement3 = userDataElement2.clone();
      UserDataElement userDataElement4 = new UserDataElement((String) null);
      UserDataElement userDataElement5 = new UserDataElement("V68m[:$B:HooRoQVy");
      userDataElement5.clone();
      userDataElement2.clone();
      UserDataElement userDataElement6 = userDataElement5.clone();
      userDataElement2.asXML();
      UserDataElement userDataElement7 = new UserDataElement((String) null);
      UserDataElement userDataElement8 = new UserDataElement("<Qa/>");
      userDataElement4.clone();
      userDataElement8.getUniquePath();
      userDataElement0.asXML();
      UserDataElement userDataElement9 = new UserDataElement("<Qa/>");
      userDataElement3.clone();
      userDataElement6.clone();
      userDataElement3.getPath((Element) userDataElement1);
      userDataElement3.clone();
      UserDataElement userDataElement10 = new UserDataElement("e6ca]G==");
      userDataElement10.clone();
      UserDataElement userDataElement11 = new UserDataElement("byCode");
      userDataElement10.isTextOnly();
      UserDataElement userDataElement12 = new UserDataElement("E");
      SAXReader sAXReader1 = new SAXReader(documentFactory0);
      // Undeclared exception!
      try { 
        sAXReader1.setXMLReaderClassName((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setValidation(true);
      byte[] byteArray1 = new byte[1];
      byteArray1[0] = (byte) (-94);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray1);
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-94);
      byteArray2[1] = (byte) (-94);
      byteArray2[2] = (byte) (-94);
      byteArray2[3] = (byte) (-94);
      byteArray2[4] = (byte) (-94);
      byteArray2[5] = (byte) (-94);
      byteArray2[6] = (byte) (-94);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl3.setPublicId("9;,w");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl1);
      locator2Impl7.setPublicId("9;,w");
      locatorImpl0.setLineNumber(0);
      locator2Impl4.getSystemId();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      LocatorImpl locatorImpl4 = new LocatorImpl(locator2Impl5);
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl5);
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl7);
      MockException mockException0 = new MockException((String) null);
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      sAXReader0.getEncoding();
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      MockException mockException0 = new MockException((String) null);
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl0.setColumnNumber((-1144));
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locatorImpl1.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl6);
      MockException mockException1 = new MockException();
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      SAXReader sAXReader0 = new SAXReader((String) null);
      try { 
        sAXReader0.read("d.o!og");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/d.o!og (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/d.o!og (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      QName.get("KI[%>)ZA", namespace0, (String) null);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)57;
      byteArray0[1] = (byte)0;
      byteArray0[2] = (byte) (-23);
      byteArray0[3] = (byte) (-81);
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0, (byte) (-81), (byte) (-23));
      byteArrayInputStream0.mark((byte) (-23));
      byteArrayInputStream0.reset();
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(byteArrayInputStream0);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      pipedInputStream0.mark((byte) (-23));
      MockURL.getFtpExample();
      SAXReader sAXReader0 = new SAXReader(true);
      SAXReader sAXReader1 = new SAXReader(true);
      // Undeclared exception!
      try { 
        sAXReader1.read((File) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      userDataElement2.clone();
      UserDataElement userDataElement3 = new UserDataElement((String) null);
      UserDataElement userDataElement4 = new UserDataElement("V68m[:$B:HooRoQVy");
      UserDataElement userDataElement5 = userDataElement4.clone();
      UserDataElement userDataElement6 = userDataElement2.clone();
      userDataElement4.clone();
      userDataElement2.asXML();
      UserDataElement userDataElement7 = new UserDataElement((String) null);
      UserDataElement userDataElement8 = new UserDataElement("<Qa/>");
      userDataElement5.clone();
      userDataElement6.getUniquePath();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "V68m[:$B:HooRoQVy");
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)30;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(boolean0);
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      sAXReader0.getDispatchHandler();
      xMLFilterImpl0.getErrorHandler();
      sAXReader0.setErrorHandler((ErrorHandler) null);
      sAXReader0.getDispatchHandler();
      sAXReader0.isIncludeInternalDTDDeclarations();
      try { 
        sAXReader0.setXMLReaderClassName("//tmp/tmp/Ua2y}2|djantA<w0/tmp/text()0/tmp/I ,6=6T0JTNvAica_u/tmp/tmp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P00/tmp/Ua2y}2|djantA<w0/tmp/text()0/tmp/I ,6=6T0JTNvAica_u/tmp/tmp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P0");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class //tmp/tmp/Ua2y}2|djantA<w0/tmp/text()0/tmp/I ,6=6T0JTNvAica_u/tmp/tmp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P00/tmp/Ua2y}2|djantA<w0/tmp/text()0/tmp/I ,6=6T0JTNvAica_u/tmp/tmp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P0 not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=3.2631550402832814
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locatorImpl1.setPublicId("//tmp/+lj(5QKn_`H0");
      Locator2Impl locator2Impl5 = new Locator2Impl(locator2Impl2);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      Locator2Impl locator2Impl7 = new Locator2Impl();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl8 = new Locator2Impl();
      locator2Impl3.setPublicId("//tmp/+lj(5QKn_`H0");
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl3);
      locator2Impl2.setColumnNumber(418);
      Locator2Impl locator2Impl10 = new Locator2Impl();
      locator2Impl6.setLineNumber((-1164));
      LocatorImpl locatorImpl4 = new LocatorImpl();
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl4);
      Locator2Impl locator2Impl11 = new Locator2Impl(locator2Impl8);
      MockException mockException0 = new MockException("//tmp/+lj(5QKn_`H0");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl1, false);
      Object object0 = new Object();
      Object object1 = new Object();
      try { 
        sAXReader0.read((String) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // No parent for filter Nested exception: No parent for filter
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      UserDataElement userDataElement0 = new UserDataElement("/BT");
      defaultDocumentFactory0.createDocType("/BT", " : ", "/BT");
      UserDataElement userDataElement1 = new UserDataElement(" of type: ");
      UserDataElement userDataElement2 = new UserDataElement("/BT");
      UserDataElement userDataElement3 = new UserDataElement(" of type: ");
      userDataElement3.asXML();
      UserDataElement userDataElement4 = new UserDataElement("< of type: />");
      userDataElement4.clone();
      userDataElement1.isTextOnly();
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)19;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      byteArray0[3] = (byte)19;
      byteArray0[4] = (byte)19;
      byteArray0[5] = (byte)19;
      byteArray0[6] = (byte)19;
      byteArray0[7] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      boolean boolean0 = sAXReader0.isIncludeInternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, false);
      PruningDispatchHandler pruningDispatchHandler0 = new PruningDispatchHandler();
      sAXReader0.addHandler("http://xml.org/sax/handlers/LexicalHandler", pruningDispatchHandler0);
      sAXReader0.setDefaultHandler(pruningDispatchHandler0);
      Enumeration<BufferedInputStream> enumeration0 = (Enumeration<BufferedInputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(enumeration0).hasMoreElements();
      SequenceInputStream sequenceInputStream0 = new SequenceInputStream(enumeration0);
      NamespaceStack namespaceStack0 = new NamespaceStack();
      namespaceStack0.getAttributeQName("http://xml.org/sax/handlers/LexicalHandler", "http://xml.org/sax/handlers/LexicalHandler", "http://xml.org/sax/handlers/LexicalHandler");
      String string0 = "@V%5";
      MockFile mockFile0 = new MockFile("@V%5");
      File file0 = MockFile.createTempFile("@V%5", "@V%5");
      MockFile mockFile1 = new MockFile(file0, "iN`oCNPM46");
      try { 
        sAXReader0.read((File) mockFile1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      boolean boolean0 = true;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      EvoSuiteFile evoSuiteFile0 = null;
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/R(07!0R(07!");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "\" because: ");
      SAXReader sAXReader0 = new SAXReader(true);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      sAXReader0.setXMLReader(parserAdapter0);
      boolean boolean1 = true;
      try { 
        sAXReader0.setFeature("lowe-cae() requires at least~pne a:gument.", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature: lowe-cae() requires at least~pne a:gument.
         //
         verifyException("org.xml.sax.helpers.ParserAdapter", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=3.3497427651978415
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      UserDataElement userDataElement0 = new UserDataElement("/BT");
      UserDataElement userDataElement1 = new UserDataElement(" of type: ");
      UserDataElement userDataElement2 = new UserDataElement("/BT");
      UserDataElement userDataElement3 = new UserDataElement(" of type: ");
      userDataElement3.asXML();
      UserDataElement userDataElement4 = new UserDataElement("< of type: />");
      sAXReader0.setDocumentFactory(defaultDocumentFactory0);
      Namespace namespace0 = Namespace.get("hUE6?J5hC", "Given node cannot be a child of an entity reference");
      userDataElement1.add(namespace0);
      userDataElement4.clone();
      userDataElement1.isTextOnly();
      File file0 = MockFile.createTempFile("< of type: />", "< of type: />");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/R(07!0R(07!");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lower-case() requires at least one argument.");
      SAXReader sAXReader0 = new SAXReader(false);
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        sAXReader0.setFeature((String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      MockException mockException0 = new MockException();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl2.setPublicId("");
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl0.setColumnNumber((-1156));
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl2.setLineNumber(73);
      locatorImpl1.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl6);
      MockException mockException1 = new MockException((String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0, true);
      sAXReader0.getXMLReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/R(07!0R(07!");
      Locator2Impl locator2Impl0 = new Locator2Impl();
      locator2Impl0.getColumnNumber();
      LocatorImpl locatorImpl0 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl1 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setColumnNumber(0);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/R(07!0R(07!");
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl2);
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl1);
      locator2Impl2.setPublicId("org.dom4j.dom.DOMNodeHelper");
      Locator2Impl locator2Impl4 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locatorImpl3.setLineNumber((-627));
      locator2Impl4.getSystemId();
      LocatorImpl locatorImpl4 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl6 = new Locator2Impl();
      LocatorImpl locatorImpl5 = new LocatorImpl(locator2Impl2);
      MockException mockException0 = new MockException((String) null);
      LocatorImpl locatorImpl6 = new LocatorImpl();
      Locator2Impl locator2Impl7 = new Locator2Impl(locatorImpl6);
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileInputStream mockFileInputStream0 = new MockFileInputStream(fileDescriptor0);
      boolean boolean0 = sAXReader0.isIgnoreComments();
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          Namespace namespace0 = Namespace.NO_NAMESPACE;
          FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
          DOMNamespace dOMNamespace0 = new DOMNamespace(":F|ACvR{&nc", ":F|ACvR{&nc");
          dOMNamespace0.getLocalName();
          Namespace namespace1 = Namespace.XML_NAMESPACE;
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
          sAXReader0.setEncoding("'a 9ecFHDiK");
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor313.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor313.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=3.2786004072646815
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      FileSystemHandling.appendStringToFile(evoSuiteFile0, "[");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      defaultDocumentFactory0.createCDATA("");
      QName qName0 = new QName("[");
      FileSystemHandling.setPermissions(evoSuiteFile0, false, false, false);
      BaseElement baseElement0 = new BaseElement("org.dom4j.tree.AbstractElement");
      baseElement0.additionalNamespaces();
      baseElement0.element("//tmp/PI nodes cannot have children0/tmp/=&@vK>Ms0/tmp/sdj{P0");
      defaultDocumentFactory0.createDocument((Element) null);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0, true);
      DefaultHandler2 defaultHandler2_0 = new DefaultHandler2();
      defaultHandler2_0.notationDecl("//tmp/org.dom4j.dom.DOMText0;]", "[(DefaultAllNodeStep): ", "");
      sAXReader0.setEntityResolver(defaultHandler2_0);
      try { 
        sAXReader0.read("");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      userDataElement2.clone();
      UserDataElement userDataElement3 = new UserDataElement((String) null);
      UserDataElement userDataElement4 = new UserDataElement("V68[:$:HooRoQVy");
      UserDataElement userDataElement5 = new UserDataElement("Qa");
      UserDataElement userDataElement6 = userDataElement5.clone();
      userDataElement1.clone();
      userDataElement1.clone();
      userDataElement1.asXML();
      UserDataElement userDataElement7 = new UserDataElement("//tmp/ti);Mmh1Rv2U87WQkP0}iK");
      UserDataElement userDataElement8 = new UserDataElement("<?^/>");
      UserDataElement userDataElement9 = userDataElement5.clone();
      userDataElement5.getUniquePath();
      userDataElement4.asXML();
      UserDataElement userDataElement10 = new UserDataElement("Error on line ");
      userDataElement8.clone();
      userDataElement9.clone();
      UserDataElement userDataElement11 = new UserDataElement(">qv");
      userDataElement7.hasContent();
      userDataElement8.getPath((Element) userDataElement11);
      userDataElement0.clone();
      userDataElement6.declaredNamespaces();
      MockFile mockFile0 = new MockFile((String) null, "Error on line ");
      try { 
        sAXReader0.read((File) mockFile0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=3.268841958134965
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/tmp/I ,6=6T0JTNvAica_u/tmp/tmp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P00org.dom4j.dom.DOMText");
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      File file0 = MockFile.createTempFile("//tmp/I ,6=6T0JTNvAica_u/tmp/tmp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P0", "org.dom4j.dom.DOMText");
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Simulated IOException Nested exception: Simulated IOException
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=3.4189303209052606
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      dispatchHandler0.removeHandler("");
      dispatchHandler0.addHandler("", (ElementHandler) null);
      dispatchHandler0.setDefaultHandler((ElementHandler) null);
      sAXReader0.addHandler("^Cbd~lgwQYZ+N", dispatchHandler0);
      Enumeration<InputStream> enumeration0 = (Enumeration<InputStream>) mock(Enumeration.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      byte[] byteArray0 = new byte[0];
      StringReader stringReader0 = new StringReader("N!8`ufHX2kn&9i'T%");
      stringReader0.reset();
      try { 
        sAXReader0.read((Reader) stringReader0, "N!8`ufHX2kn&9i'T%");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document N!8`ufHX2kn&9i'T% : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      userDataElement2.clone();
      UserDataElement userDataElement3 = new UserDataElement((String) null);
      UserDataElement userDataElement4 = new UserDataElement("V68m[:$B:HooRoQVy");
      UserDataElement userDataElement5 = userDataElement4.clone();
      UserDataElement userDataElement6 = userDataElement2.clone();
      UserDataElement userDataElement7 = userDataElement4.clone();
      userDataElement2.asXML();
      UserDataElement userDataElement8 = new UserDataElement((String) null);
      UserDataElement userDataElement9 = new UserDataElement("<Qa/>");
      userDataElement5.clone();
      userDataElement6.getUniquePath();
      userDataElement9.asXML();
      UserDataElement userDataElement10 = new UserDataElement("/Qa");
      userDataElement6.clone();
      UserDataElement userDataElement11 = userDataElement7.clone();
      UserDataElement userDataElement12 = new UserDataElement((String) null);
      userDataElement5.hasContent();
      userDataElement11.getPath((Element) userDataElement0);
      UserDataElement userDataElement13 = userDataElement0.clone();
      userDataElement13.declaredNamespaces();
      userDataElement13.clone();
      UserDataElement userDataElement14 = new UserDataElement("e6ca]G==");
      StringReader stringReader0 = new StringReader("//tmp/Z0NuaBt''N]~0e6ca]G==");
      stringReader0.reset();
      try { 
        sAXReader0.read((Reader) stringReader0, "");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:///home/ubuntu/termite/projects/62_dom4j/ : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("contains");
      sAXReader_SAXEntityResolver0.resolveEntity("org.dom4j.io.SAXReader$SAXEntityResolver", "//tmp/sdj{P0/tmp/b_(GZp0");
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl0);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      SAXReader sAXReader0 = new SAXReader(parserAdapter0);
      sAXReader0.createXMLReader();
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=3.3881291941663134
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      boolean boolean0 = true;
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.setMergeAdjacentText(true);
      String string0 = "'Fb@NkWzgA1GE";
      try { 
        sAXReader0.read("'Fb@NkWzgA1GE");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/'Fb@NkWzgA1GE (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/'Fb@NkWzgA1GE (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setLineNumber((-324));
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      MockException mockException0 = new MockException();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      locator2Impl2.setPublicId("");
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl0.setColumnNumber((-1156));
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl2.setLineNumber(73);
      locatorImpl1.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl6);
      MockException mockException1 = new MockException((String) null);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader(xMLFilterImpl0);
      try { 
        sAXReader0.setProperty((String) null, locator2Impl0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property: null
         //
         verifyException("org.xml.sax.helpers.XMLFilterImpl", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      // Undeclared exception!
      try { 
        sAXReader0.read((URL) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.net.MockURL", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locator2Impl1.setPublicId("xc5c{h");
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl3.setColumnNumber(0);
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locator2Impl0.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      locator2Impl6.getPublicId();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl7);
      Locator2Impl locator2Impl8 = new Locator2Impl();
      Locator2Impl locator2Impl9 = new Locator2Impl(locator2Impl8);
      LocatorImpl locatorImpl7 = new LocatorImpl(locator2Impl2);
      SAXReader sAXReader0 = new SAXReader((String) null, false);
      sAXReader0.createDefaultEntityResolver((String) null);
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
  }

  /**
  //Test case number: 57
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Namespace namespace0 = Namespace.NO_NAMESPACE;
      DOMNamespace dOMNamespace0 = new DOMNamespace(":.|ACvR{&nc", ":.|ACvR{&nc");
      Namespace.get("//tmp/#s{u`Rd{KZS@L]d,s0Unhandled operator in createRelationalExpr(): ");
      dOMNamespace0.createXPath("JTNvAica_u");
      QName.get("uPWYY*", (Namespace) null, "JTNvAica_u");
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      hashMap0.put("uPWYY*", ":.|ACvR{&nc");
      BiFunction<Object, Object, String> biFunction0 = (BiFunction<Object, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      hashMap0.computeIfPresent(":.|ACvR{&nc", biFunction0);
      SAXReader sAXReader0 = new SAXReader(true);
      try { 
        sAXReader0.read("uPWYY*");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // /home/ubuntu/termite/projects/62_dom4j/uPWYY* (No such file or directory) Nested exception: /home/ubuntu/termite/projects/62_dom4j/uPWYY* (No such file or directory)
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=3.2953696157561723
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      userDataElement2.clone();
      UserDataElement userDataElement3 = new UserDataElement((String) null);
      UserDataElement userDataElement4 = new UserDataElement("V68m[:$B:HooRoQVy");
      UserDataElement userDataElement5 = userDataElement4.clone();
      UserDataElement userDataElement6 = userDataElement2.clone();
      UserDataElement userDataElement7 = userDataElement4.clone();
      userDataElement2.asXML();
      UserDataElement userDataElement8 = new UserDataElement((String) null);
      UserDataElement userDataElement9 = new UserDataElement("<Qa/>");
      userDataElement5.clone();
      userDataElement6.getUniquePath();
      userDataElement9.asXML();
      UserDataElement userDataElement10 = new UserDataElement("/Qa");
      userDataElement6.clone();
      UserDataElement userDataElement11 = userDataElement7.clone();
      UserDataElement userDataElement12 = new UserDataElement((String) null);
      userDataElement5.hasContent();
      userDataElement11.getPath((Element) userDataElement0);
      UserDataElement userDataElement13 = userDataElement0.clone();
      userDataElement13.declaredNamespaces();
      File file0 = MockFile.createTempFile("?qc*t=*sQ`NpSmtfYRX", "6&J'K!X76");
      try { 
        sAXReader0.read(file0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=3.3111802789964604
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(false);
      UserDataElement userDataElement0 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement1 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement2 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement3 = userDataElement0.clone();
      UserDataElement userDataElement4 = userDataElement1.clone();
      UserDataElement userDataElement5 = userDataElement3.clone();
      userDataElement5.asXML();
      UserDataElement userDataElement6 = new UserDataElement("<e6ca]G==/>");
      UserDataElement userDataElement7 = new UserDataElement("//tmptmp/tmp/GGJ*l|Tr+X=0GJ*l|Tr+X=0E.E0$=G:VT\u0000< of type: />");
      userDataElement4.clone();
      userDataElement7.asXML();
      UserDataElement userDataElement8 = new UserDataElement("<//tmptmp/tmp/GGJ*l|Tr+X=0GJ*l|Tr+X=0E.E0$=G:VT\u0000< of type: />/>");
      userDataElement2.clone();
      userDataElement0.getPath((Element) userDataElement3);
      try { 
        sAXReader0.read("/");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line 1 of document file:/// : Content is not allowed in prolog. Nested exception: Content is not allowed in prolog.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=3.336704583890597
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl3 = new LocatorImpl(locatorImpl2);
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      MockException mockException0 = new MockException(".");
      LocatorImpl locatorImpl5 = new LocatorImpl();
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.setPublicId("[");
      Locator2Impl locator2Impl3 = new Locator2Impl(locatorImpl3);
      Locator2Impl locator2Impl4 = new Locator2Impl();
      locator2Impl4.setLineNumber(0);
      LocatorImpl locatorImpl6 = new LocatorImpl();
      LocatorImpl locatorImpl7 = new LocatorImpl();
      LocatorImpl locatorImpl8 = new LocatorImpl(locatorImpl6);
      Locator2Impl locator2Impl5 = new Locator2Impl(locatorImpl6);
      LocatorImpl locatorImpl9 = new LocatorImpl(locatorImpl8);
      LocatorImpl locatorImpl10 = new LocatorImpl(locator2Impl5);
      MockException mockException1 = new MockException();
      MockException mockException2 = new MockException(".");
      LocatorImpl locatorImpl11 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl6 = new Locator2Impl(locatorImpl11);
      LocatorImpl locatorImpl12 = new LocatorImpl();
      Object object0 = new Object();
      SAXReader sAXReader0 = new SAXReader();
      StringReader stringReader0 = new StringReader("");
      StringReader stringReader1 = new StringReader("");
      try { 
        sAXReader0.read((Reader) stringReader1);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      String string0 = "lower-case() requires at least one argument.";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lower-case() requires at least one argument.");
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("lower-case() requires at least one argument.");
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class lower-case() requires at least one argument. not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lower-case() requires at least~pne a:gument.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      SAXReader sAXReader0 = new SAXReader((XMLReader) null, false);
      sAXReader0.getDispatchHandler();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)19;
      byteArray0[2] = (byte)19;
      boolean boolean1 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertTrue(boolean1 == boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=2.6401461330725327
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/R(07!0R(07!");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lowe-cae() requires at least~pne a:gument.");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.resetHandlers();
      XMLReader xMLReader0 = sAXReader0.getXMLReader();
      sAXReader0.createContentHandler(xMLReader0);
      try { 
        sAXReader0.setFeature("file:/", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'file:/' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=3.418521658670515
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locatorImpl0.setLineNumber(1898);
      LocatorImpl locatorImpl4 = new LocatorImpl();
      LocatorImpl locatorImpl5 = new LocatorImpl(locatorImpl1);
      MockException mockException0 = new MockException();
      MockException mockException1 = new MockException("//tmp/tmp/I ,6=6T0JTNvAica_u/tmp/tp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P00org.dom4j.dom.DOMText");
      MockException mockException2 = new MockException(mockException1);
      Locator2Impl locator2Impl2 = new Locator2Impl(locator2Impl1);
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getEntityResolver();
      sAXReader0.setEntityResolver((EntityResolver) null);
      try { 
        sAXReader0.read((InputStream) byteArrayInputStream0, "//tmp/tmp/I ,6=6T0JTNvAica_u/tmp/tp/TKkt)3%&JZ)FmKJq0evaluate() requires one argument0.tmp0/tmp/=&@vK>Ms0/tmp/sdj{P00org.dom4j.dom.DOMText");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Error on line -1 of document  : Premature end of file. Nested exception: Premature end of file.
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      NetworkHandling.createRemoteTextFile((EvoSuiteURL) null, "//tmp/dYNxCXme<0E500http:/xml.org/sax/features/string-interning");
      SAXReader sAXReader0 = new SAXReader(true);
      sAXReader0.getEntityResolver();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertTrue(sAXReader0.isValidating());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader(true);
      assertTrue(sAXReader0.isStringInternEnabled());
      
      sAXReader0.setStringInternEnabled(false);
      boolean boolean0 = sAXReader0.isStringInternEnabled();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 67
  /*Coverage entropy=2.41257681572198
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      SAXReader sAXReader0 = new SAXReader(false);
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      assertNotNull(dispatchHandler0);
      
      DocumentFactory documentFactory0 = sAXReader0.getDocumentFactory();
      assertNotNull(documentFactory0);
      
      sAXReader0.setIncludeExternalDTDDeclarations(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      sAXReader0.isIncludeInternalDTDDeclarations();
      boolean boolean0 = sAXReader0.isStripWhitespaceText();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(boolean0);
      assertFalse(sAXReader0.isIgnoreComments());
      assertFalse(sAXReader0.isValidating());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertTrue(sAXReader0.isStringInternEnabled());
  }

  /**
  //Test case number: 68
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl2 = new LocatorImpl();
      LocatorImpl locatorImpl3 = new LocatorImpl(locator2Impl0);
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locatorImpl0.setLineNumber(1898);
      MockException mockException0 = new MockException("R3WY");
      LocatorImpl locatorImpl5 = new LocatorImpl();
      locator2Impl1.setLineNumber(1872);
      LocatorImpl locatorImpl6 = new LocatorImpl(locatorImpl4);
      MockException mockException1 = new MockException();
      MockException mockException2 = new MockException();
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      SAXReader sAXReader0 = new SAXReader();
      try { 
        sAXReader0.read((InputSource) null);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // null Nested exception: null
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=3.333443371183037
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
    Future<?> future = executor.submit(new Runnable(){ 
            @Override public void run() { 
        try {
          DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
          Namespace namespace0 = Namespace.NO_NAMESPACE;
          DOMNamespace dOMNamespace0 = new DOMNamespace(":F|ACvR{&nc", ":F|ACvR{&nc");
          dOMNamespace0.getLocalName();
          Namespace namespace1 = Namespace.XML_NAMESPACE;
          DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
          SAXReader sAXReader0 = new SAXReader(documentFactory0, false);
          URL uRL0 = MockURL.getFtpExample();
          try { 
            sAXReader0.read(uRL0);
            fail("Expecting exception: Exception");
          
          } catch(Exception e) {
             //
             // Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor313.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //  Nested exception: Security manager blocks (\"java.lang.RuntimePermission\" \"ftpClientProvider\")
             // java.lang.Thread.getStackTrace(Thread.java:1559)
             // org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:434)
             // sun.net.ftp.FtpClientProvider.<init>(FtpClientProvider.java:60)
             // sun.net.ftp.impl.DefaultFtpClientProvider.<init>(DefaultFtpClientProvider.java:31)
             // sun.net.ftp.FtpClientProvider$1.run(FtpClientProvider.java:151)
             // java.security.AccessController.doPrivileged(Native Method)
             // sun.net.ftp.FtpClientProvider.provider(FtpClientProvider.java:141)
             // sun.net.ftp.FtpClient.create(FtpClient.java:108)
             // sun.net.www.protocol.ftp.FtpURLConnection.connect(FtpURLConnection.java:286)
             // sun.net.www.protocol.ftp.FtpURLConnection.getInputStream(FtpURLConnection.java:400)
             // org.apache.xerces.impl.XMLEntityManager.setupCurrentEntity(Unknown Source)
             // org.apache.xerces.impl.XMLVersionDetector.determineDocVersion(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XML11Configuration.parse(Unknown Source)
             // org.apache.xerces.parsers.XMLParser.parse(Unknown Source)
             // org.apache.xerces.parsers.AbstractSAXParser.parse(Unknown Source)
             // org.apache.xerces.jaxp.SAXParserImpl$JAXPSAXParser.parse(Unknown Source)
             // org.dom4j.io.SAXReader.read(SAXReader.java:436)
             // org.dom4j.io.SAXReader.read(SAXReader.java:288)
             // sun.reflect.GeneratedMethodAccessor313.invoke(Unknown Source)
             // sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
             // java.lang.reflect.Method.invoke(Method.java:498)
             // org.evosuite.testcase.statements.MethodStatement$1.execute(MethodStatement.java:257)
             // org.evosuite.testcase.statements.AbstractStatement.exceptionHandler(AbstractStatement.java:169)
             // org.evosuite.testcase.statements.MethodStatement.execute(MethodStatement.java:220)
             // org.evosuite.testcase.execution.TestRunnable.executeStatements(TestRunnable.java:307)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:213)
             // org.evosuite.testcase.execution.TestRunnable.call(TestRunnable.java:55)
             // java.util.concurrent.FutureTask.run(FutureTask.java:266)
             // java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
             // java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
             // java.lang.Thread.run(Thread.java:748)
             //
             verifyException("org.dom4j.io.SAXReader", e);
          }
        } catch(Throwable t) {
            // Need to catch declared exceptions
        }
      } 
    });
    future.get(4000, TimeUnit.MILLISECONDS);
  }

  /**
  //Test case number: 70
  /*Coverage entropy=3.100594093959749
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl((XMLReader) null);
      SAXReader sAXReader1 = new SAXReader(xMLFilterImpl0);
      char[] charArray0 = new char[0];
      sAXReader1.setXMLFilter((XMLFilter) null);
      xMLFilterImpl0.characters(charArray0, 3, 4014);
      SAXReader sAXReader2 = new SAXReader(true);
      SAXContentHandler sAXContentHandler0 = sAXReader2.createContentHandler((XMLReader) null);
      sAXReader2.setStripWhitespaceText(false);
      sAXReader1.setMergeAdjacentText(true);
      sAXReader1.createXMLReader();
      String string0 = "al}=0\\q[f]_UcW";
      SAXReader.SAXEntityResolver sAXReader_SAXEntityResolver0 = new SAXReader.SAXEntityResolver("al}=0q[f]_UcW");
      sAXReader_SAXEntityResolver0.resolveEntity("IHdACP_pprLwU$", "al}=0q[f]_UcW");
      sAXReader_SAXEntityResolver0.resolveEntity("al}=0q[f]_UcW", "");
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream((InputStream) null, 3801);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte)4;
      byteArray0[1] = (byte)10;
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl();
      sAXReader0.configureReader(xMLFilterImpl1, sAXContentHandler0);
      try { 
        sAXReader0.setProperty(";5GV'HOWx_L&^et", byteArrayInputStream0);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Property ';5GV'HOWx_L&^et' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/R(07!0R(07!");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lower-case() requires at least one argument.");
      SAXReader sAXReader0 = new SAXReader(false);
      sAXReader0.setIncludeInternalDTDDeclarations(false);
      try { 
        sAXReader0.setFeature("file:/", false);
        fail("Expecting exception: SAXNotRecognizedException");
      
      } catch(SAXNotRecognizedException e) {
         //
         // Feature 'file:/' is not recognized.
         //
         verifyException("org.apache.xerces.parsers.AbstractSAXParser", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      DispatchHandler dispatchHandler0 = sAXReader0.getDispatchHandler();
      sAXReader0.setDispatchHandler(dispatchHandler0);
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      userDataElement2.clone();
      UserDataElement userDataElement3 = new UserDataElement((String) null);
      UserDataElement userDataElement4 = new UserDataElement("V68m[:$B:HooRoQVy");
      UserDataElement userDataElement5 = userDataElement4.clone();
      userDataElement5.additionalNamespaces();
      UserDataElement userDataElement6 = userDataElement2.clone();
      UserDataElement userDataElement7 = userDataElement4.clone();
      UserDataElement userDataElement8 = new UserDataElement((String) null);
      userDataElement5.clone();
      userDataElement6.getUniquePath();
      UserDataElement userDataElement9 = new UserDataElement("/Qa");
      userDataElement6.clone();
      userDataElement7.clone();
      UserDataElement userDataElement10 = new UserDataElement((String) null);
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement1 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement2 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement3 = userDataElement1.clone();
      UserDataElement userDataElement4 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement5 = userDataElement1.clone();
      UserDataElement userDataElement6 = userDataElement4.clone();
      UserDataElement userDataElement7 = userDataElement2.clone();
      userDataElement6.asXML();
      UserDataElement userDataElement8 = new UserDataElement("e6ca]G==");
      UserDataElement userDataElement9 = new UserDataElement((String) null);
      userDataElement7.clone();
      userDataElement5.asXML();
      UserDataElement userDataElement10 = new UserDataElement("org.dom4j.xpath.DefaultXPath");
      userDataElement3.clone();
      userDataElement8.getPath((Element) userDataElement10);
      userDataElement3.clone();
      UserDataElement userDataElement11 = new UserDataElement("org.dom4j.xpath.DefaultXPath");
      userDataElement9.isTextOnly();
      UserDataElement userDataElement12 = new UserDataElement("<e6ca]G==/>");
      try { 
        sAXReader0.setXMLReaderClassName("<e6ca]G==/>");
        fail("Expecting exception: SAXException");
      
      } catch(SAXException e) {
         //
         // SAX2 driver class <e6ca]G==/> not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      LocatorImpl locatorImpl0 = new LocatorImpl();
      LocatorImpl locatorImpl1 = new LocatorImpl(locatorImpl0);
      Locator2Impl locator2Impl0 = new Locator2Impl(locatorImpl0);
      Locator2Impl locator2Impl1 = new Locator2Impl();
      locatorImpl0.getColumnNumber();
      LocatorImpl locatorImpl2 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl2 = new Locator2Impl();
      locator2Impl2.getPublicId();
      Locator2Impl locator2Impl3 = new Locator2Impl();
      locatorImpl0.getPublicId();
      MockException mockException0 = new MockException((String) null);
      LocatorImpl locatorImpl3 = new LocatorImpl();
      Locator2Impl locator2Impl4 = new Locator2Impl();
      LocatorImpl locatorImpl4 = new LocatorImpl();
      Locator2Impl locator2Impl5 = new Locator2Impl();
      Locator2Impl locator2Impl6 = new Locator2Impl(locator2Impl2);
      locatorImpl0.setColumnNumber((-1134));
      Locator2Impl locator2Impl7 = new Locator2Impl();
      locatorImpl1.getLineNumber();
      LocatorImpl locatorImpl5 = new LocatorImpl();
      LocatorImpl locatorImpl6 = new LocatorImpl(locator2Impl6);
      Locator2Impl locator2Impl8 = new Locator2Impl(locatorImpl1);
      LocatorImpl locatorImpl7 = new LocatorImpl();
      LocatorImpl locatorImpl8 = new LocatorImpl(locator2Impl1);
      Locator2Impl locator2Impl9 = new Locator2Impl(locatorImpl5);
      LocatorImpl locatorImpl9 = new LocatorImpl(locatorImpl0);
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)92;
      byteArray0[1] = (byte)92;
      byteArray0[2] = (byte)92;
      SAXReader sAXReader0 = null;
      try {
        sAXReader0 = new SAXReader("ME", false);
        fail("Expecting exception: SAXException");
      
      } catch(Throwable e) {
         //
         // SAX2 driver class ME not found
         //
         verifyException("org.xml.sax.helpers.XMLReaderFactory", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader();
      UserDataElement userDataElement0 = new UserDataElement("Qa");
      UserDataElement userDataElement1 = new UserDataElement("?^");
      UserDataElement userDataElement2 = new UserDataElement("Qa");
      userDataElement2.clone();
      UserDataElement userDataElement3 = new UserDataElement((String) null);
      UserDataElement userDataElement4 = new UserDataElement("V68m[:$B:HooRoQVy");
      UserDataElement userDataElement5 = userDataElement4.clone();
      UserDataElement userDataElement6 = userDataElement2.clone();
      UserDataElement userDataElement7 = userDataElement4.clone();
      userDataElement2.asXML();
      UserDataElement userDataElement8 = new UserDataElement((String) null);
      UserDataElement userDataElement9 = new UserDataElement("<Qa/>");
      userDataElement5.clone();
      userDataElement6.getUniquePath();
      userDataElement9.asXML();
      UserDataElement userDataElement10 = new UserDataElement("/Qa");
      userDataElement6.clone();
      userDataElement7.clone();
      UserDataElement userDataElement11 = new UserDataElement((String) null);
      userDataElement5.hasContent();
      sAXReader0.getXMLFilter();
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      SAXContentHandler sAXContentHandler0 = sAXReader0.createContentHandler(xMLFilterImpl0);
      // Undeclared exception!
      try { 
        sAXReader0.configureReader((XMLReader) null, sAXContentHandler0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.dom4j.io.SAXHelper", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      SAXReader sAXReader0 = new SAXReader(documentFactory0);
      XMLFilterImpl xMLFilterImpl0 = new XMLFilterImpl();
      XMLFilterImpl xMLFilterImpl1 = new XMLFilterImpl(xMLFilterImpl0);
      XMLReaderAdapter xMLReaderAdapter0 = new XMLReaderAdapter(xMLFilterImpl1);
      ParserAdapter parserAdapter0 = new ParserAdapter(xMLReaderAdapter0);
      char[] charArray0 = new char[3];
      charArray0[0] = '^';
      charArray0[1] = 'F';
      charArray0[2] = 'Z';
      parserAdapter0.characters(charArray0, 25, 72);
      sAXReader0.createContentHandler(parserAdapter0);
      assertFalse(sAXReader0.isIncludeExternalDTDDeclarations());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isIgnoreComments());
  }

  /**
  //Test case number: 77
  /*Coverage entropy=3.3334433711830367
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      DocumentFactory documentFactory0 = DefaultDocumentFactory.getInstance();
      documentFactory0.createCDATA("/BT");
      SAXReader sAXReader0 = new SAXReader(documentFactory0, true);
      byte[] byteArray0 = new byte[9];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      byteArrayInputStream0.read(byteArray0);
      ByteArrayInputStream byteArrayInputStream1 = new ByteArrayInputStream(byteArray0, 9, 2583);
      byteArrayInputStream1.reset();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      PipedInputStream pipedInputStream0 = new PipedInputStream(pipedOutputStream0);
      PushbackInputStream pushbackInputStream0 = new PushbackInputStream(pipedInputStream0);
      PipedInputStream pipedInputStream1 = new PipedInputStream();
      try { 
        sAXReader0.read((InputStream) pipedInputStream1, "jZ>wJ.48'St");
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Pipe not connected Nested exception: Pipe not connected
         //
         verifyException("org.dom4j.io.SAXReader", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "//tmp/R(07!0R(07!");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "lower-case() requires at least one argument.");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "E");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)30;
      byteArray0[1] = (byte)19;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      DefaultDocumentFactory defaultDocumentFactory0 = new DefaultDocumentFactory();
      SAXReader sAXReader0 = new SAXReader(defaultDocumentFactory0);
      boolean boolean0 = sAXReader0.isIncludeExternalDTDDeclarations();
      assertFalse(sAXReader0.isIncludeInternalDTDDeclarations());
      assertFalse(sAXReader0.isStripWhitespaceText());
      assertFalse(sAXReader0.isMergeAdjacentText());
      assertFalse(sAXReader0.isIgnoreComments());
      assertTrue(sAXReader0.isStringInternEnabled());
      assertFalse(boolean0);
  }
}
