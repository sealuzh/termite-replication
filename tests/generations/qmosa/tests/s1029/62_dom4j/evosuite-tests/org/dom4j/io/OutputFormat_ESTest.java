/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 02:32:12 GMT 2019
 */

package org.dom4j.io;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import org.dom4j.io.OutputFormat;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutputFormat_ESTest extends OutputFormat_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.929538535746656
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmlEbQXB/;~o");
      OutputFormat outputFormat1 = new OutputFormat("-omitEncoding");
      assertFalse(outputFormat1.isOmitEncoding());
      
      String[] stringArray0 = new String[5];
      stringArray0[0] = "VwuRaRCm(";
      stringArray0[1] = "-omitEncoding";
      stringArray0[2] = "R8FR{V[hf~\"<Wb";
      stringArray0[3] = "-omitEncoding";
      stringArray0[4] = "-lineSeparator";
      int int0 = outputFormat1.parseOptions(stringArray0, 1);
      assertTrue(outputFormat1.isOmitEncoding());
      assertEquals(2, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.1431128238477373
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-ahtml`");
      int int0 = 1;
      String[] stringArray0 = new String[9];
      stringArray0[1] = "-xhtml-ahtml`";
      stringArray0[2] = "-xhtml-ahtml`";
      stringArray0[3] = "-indent";
      stringArray0[5] = stringArray0[0];
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.3922586132057637
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("&vB%%<nK8");
      String string0 = "-fxpandEmptyvli attr";
      String[] stringArray0 = new String[7];
      stringArray0[0] = "&vB%%<nK8";
      stringArray0[1] = "-fxpandEmptyvli attr";
      stringArray0[6] = "-xhtklE~bQXB/;o";
      outputFormat0.setIndentSize(2557);
      outputFormat0.setIndentSize(865);
      outputFormat0.setIndentSize(3299);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.setIndent("-expandEmpty");
      String string1 = "&v_B%%";
      outputFormat0.setIndent("&v_B%%");
      outputFormat0.setIndent("-expandEmpty&v_B%%<nK8");
      outputFormat0.setIndent("-expandEmpty");
      // Undeclared exception!
      outputFormat0.setIndentSize(3299);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4383788332536491
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = new OutputFormat("-expandEmpty-trimText");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml-xhtmlEbQXB/;~o";
      stringArray0[1] = "";
      stringArray0[2] = "-expandEmpty-trimText";
      stringArray0[3] = "-xhtml-xhtmlEbQXB/;~o";
      stringArray0[4] = "-newlines";
      stringArray0[5] = "-expandEmpty-trimText";
      stringArray0[6] = "-expandEmpty-trimText";
      stringArray0[7] = "-newlines";
      int int0 = outputFormat1.parseOptions(stringArray0, 2);
      assertTrue(outputFormat1.isXHTML());
      assertTrue(outputFormat1.isExpandEmptyElements());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.3522408182433385
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmlEbQXB/;~o");
      String[] stringArray0 = new String[5];
      stringArray0[0] = "-suppressDeclaration";
      stringArray0[1] = "-expandEmpty-expandEmpty";
      stringArray0[2] = "-expandEmpty-xhtmlEbQXB/;~o";
      stringArray0[3] = "-expandEmpty-expandEmpty";
      stringArray0[4] = "-expandEmpty-xhtmlEbQXB/;~o";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertTrue(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isSuppressDeclaration());
      assertEquals(5, int0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.9078580032708745
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expad*mSHy-xhUmlEbQX/;~o");
      String[] stringArray0 = new String[8];
      stringArray0[1] = "-expad*mSHy-xhUmlEbQX/;~o";
      stringArray0[2] = "-expad*mSHy-xhUmlEbQX/;~o";
      stringArray0[5] = "-xtmlxhtml`";
      stringArray0[6] = "-suppr)KssDeclartioM";
      stringArray0[1] = "-xtmlxhtml`";
      String[] stringArray1 = new String[6];
      outputFormat0.parseOptions(stringArray0, 1230);
      assertFalse(outputFormat0.isPadText());
      
      stringArray1[0] = "-xtmlxhtml`";
      stringArray1[1] = "%\"Zww^]]h,c.zNw-Q`/";
      String[] stringArray2 = new String[4];
      stringArray2[0] = "-padText";
      stringArray2[1] = "-expad*mSHy-xhUmlEbQX/;~o";
      stringArray2[2] = "-expad*mSHy-xhUmlEbQX/;~o";
      stringArray2[3] = "-expad*mSHy-xhUmlEbQX/;~o";
      int int0 = outputFormat0.parseOptions(stringArray2, 0);
      assertTrue(outputFormat0.isPadText());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9548106552143232
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[4];
      outputFormat0.setNewLineAfterNTags(1912);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setLineSeparator("-encoding");
      outputFormat0.setLineSeparator("TR\"Achkoz)N{#");
      outputFormat0.setLineSeparator("-encoding");
      stringArray0[0] = "TR\"Achkoz)N{#";
      stringArray0[1] = "TR\"Achkoz)N{#";
      outputFormat0.setIndentSize((-1069));
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setIndentSize((-1069));
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setIndent("h");
      outputFormat0.setIndent(stringArray0[2]);
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.setIndent("XR['YkJW,kBtaW_h5B");
      outputFormat0.setIndent("Oz}'d4tqK' p");
      outputFormat0.setNewLineAfterNTags(1);
      outputFormat0.setIndent("-lineSeparator");
      outputFormat0.getLineSeparator();
      assertEquals(1, outputFormat0.getNewLineAfterNTags());
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.583990197958617
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("OF,f&E ", true, (String) null);
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent(true);
      outputFormat1.setOmitEncoding(true);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "OF,f&E ";
      stringArray0[1] = "OF,f&E ";
      stringArray0[2] = "OF,f&E ";
      outputFormat0.parseOptions(stringArray0, 1089);
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat2.getIndent());
      
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setIndentSize((-4425));
      outputFormat2.setIndent("OF,f&E ");
      OutputFormat outputFormat4 = OutputFormat.createCompactFormat();
      outputFormat4.setEncoding("-indentSize");
      outputFormat4.setOmitEncoding(false);
      outputFormat4.setIndent("OF,f&E ");
      outputFormat4.setIndent("OF,f&E ");
      OutputFormat outputFormat5 = OutputFormat.createPrettyPrint();
      outputFormat5.parseOptions(stringArray0, 0);
      outputFormat2.setIndent("OF,f&E ");
      outputFormat0.getEncoding();
      OutputFormat outputFormat6 = OutputFormat.createCompactFormat();
      outputFormat2.getEncoding();
      outputFormat6.setIndent("");
      OutputFormat.createPrettyPrint();
      outputFormat3.setIndentSize(1089);
      OutputFormat.createPrettyPrint();
      outputFormat3.setIndent("OF,f&E ");
      OutputFormat.createCompactFormat();
      OutputFormat outputFormat7 = OutputFormat.createCompactFormat();
      assertFalse(outputFormat7.isPadText());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4331681174219253
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-xhtmlEbQXB/;~o";
      stringArray0[1] = "-expandEmpty-encoding";
      stringArray0[2] = "-expandEmpty-encoding";
      stringArray0[3] = "-expandEmpty-encoding";
      stringArray0[4] = "-indentSize";
      stringArray0[5] = "-ahtml`";
      stringArray0[6] = "-expandEmpty-encoding";
      stringArray0[7] = "-ahtml`";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"-ahtml`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4352579815807553
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      OutputFormat.createPrettyPrint();
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-indentSize";
      stringArray0[1] = "-indentSize";
      stringArray0[2] = "-expandEmpty-encoding";
      stringArray0[3] = "-expandEmpty-encoding";
      stringArray0[4] = "-expandEmpty-encoding";
      stringArray0[5] = "-expandEmpty-encoding";
      stringArray0[6] = "-indentSize";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, 2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 7
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.634471697417873
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat1.setIndentSize(1);
      outputFormat1.setNewLineAfterNTags(1);
      OutputFormat outputFormat2 = OutputFormat.createCompactFormat();
      outputFormat2.setTrimText(false);
      outputFormat2.setEncoding("");
      outputFormat2.isPadText();
      outputFormat1.setOmitEncoding(true);
      OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      stringArray0[1] = "";
      stringArray0[2] = "";
      stringArray0[3] = "";
      outputFormat2.parseOptions(stringArray0, 0);
      outputFormat1.isOmitEncoding();
      assertTrue(outputFormat1.isOmitEncoding());
      
      OutputFormat outputFormat3 = OutputFormat.createCompactFormat();
      outputFormat3.setIndent(false);
      outputFormat0.setIndentSize((-1097548142));
      OutputFormat.createCompactFormat();
      OutputFormat.createPrettyPrint();
      String string0 = outputFormat2.getEncoding();
      assertEquals("", string0);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.913474475326688
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setLineSeparator("nvalid MttF");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "-xhtml`";
      stringArray0[2] = "-lineSeparator";
      stringArray0[3] = "nvalid MttF";
      stringArray0[4] = "-expandEmpty>oL}*nO";
      stringArray0[5] = "-xhtml`";
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.parseOptions(stringArray0, 1355);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('!');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (!)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setNewLineAfterNTags((-925));
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals((-925), int0);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.6336466306435344
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[8];
      outputFormat0.setNewLineAfterNTags(34);
      outputFormat0.setNewLineAfterNTags(1912);
      outputFormat0.setLineSeparator("-encoding");
      outputFormat0.setLineSeparator("-encoding");
      outputFormat0.setLineSeparator("y^W");
      outputFormat0.setIndentSize(1912);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndentSize(34);
      outputFormat0.parseOptions(stringArray0, 1912);
      outputFormat0.setLineSeparator("");
      outputFormat0.setIndent("Pqm<c!Y4?:<!^QZi-)i");
      outputFormat0.setIndentSize(34);
      outputFormat0.setIndent("TR\"Achkoz)N{#");
      outputFormat0.setIndent("=W5");
      outputFormat0.setIndent("&");
      outputFormat0.setIndent("y^W");
      outputFormat0.setIndent("y^W");
      outputFormat0.getLineSeparator();
      assertEquals("y^W", outputFormat0.getIndent());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.8689434973781704
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isSuppressDeclaration());
      
      outputFormat0.setSuppressDeclaration(true);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "";
      outputFormat0.getNewLineAfterNTags();
      stringArray0[0] = "-ineSepaator";
      stringArray0[2] = "<[TG=c&C\"zOA(wM}.Z";
      outputFormat0.parseOptions(stringArray0, 974);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setIndent("-iGndent");
      outputFormat0.getNewLineAfterNTags();
      OutputFormat outputFormat1 = new OutputFormat("-trimText", true);
      outputFormat0.isSuppressDeclaration();
      String[] stringArray1 = new String[5];
      outputFormat1.getNewLineAfterNTags();
      stringArray1[0] = "(|/jsuA?W";
      stringArray1[2] = stringArray0[1];
      stringArray0[0] = stringArray1[2];
      stringArray1[4] = "";
      outputFormat0.parseOptions(stringArray1, 0);
      assertTrue(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.3643247268937695
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      outputFormat0.setLineSeparator("3Eom6{fDz1");
      outputFormat0.setNewLineAfterNTags(1912);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "";
      stringArray0[2] = "Oz}'d4tqK' p";
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterNTags(1912);
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(true);
      outputFormat0.setIndentSize(0);
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("3Eom6{fDz1", outputFormat0.getLineSeparator());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-omitEncoding", true, "ds:ASk");
      outputFormat0.setEncoding((String) null);
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('-');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (-)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.3659681399654566
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmlEbQXB/;~o");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-xhtmlEbQXB/;~o";
      stringArray0[1] = "-xhtml-xhtml`";
      stringArray0[2] = "-expandEmpty-xhtmlEbQXB/;~o";
      stringArray0[3] = "-encoding";
      stringArray0[4] = "-suppressDeclaration";
      stringArray0[5] = "-xhtml-xhtml`";
      stringArray0[6] = "-encoding";
      stringArray0[2] = "-xhtml-xhtml`";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals("-suppressDeclaration", outputFormat0.getEncoding());
      assertEquals(8, int0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.4894270028816674
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      outputFormat0.setNewLineAfterNTags(1912);
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "";
      stringArray0[2] = "Oz}'d4tqK' p";
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterNTags(1912);
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(0);
      outputFormat0.setIndent("");
      boolean boolean0 = outputFormat0.isExpandEmptyElements();
      assertEquals(1912, outputFormat0.getNewLineAfterNTags());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.6360378310261265
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      outputFormat0.setExpandEmptyElements(true);
      outputFormat0.setIndentSize((-1447140115));
      outputFormat0.isExpandEmptyElements();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat1.setIndent("{CU'~G9xvo,>C;Ee~");
      String string0 = OutputFormat.STANDARD_INDENT;
      outputFormat1.setIndentSize((-354117425));
      outputFormat1.setTrimText(true);
      outputFormat0.setIndent("d5,DyRrAi>DM$f/CD&1");
      assertEquals("d5,DyRrAi>DM$f/CD&1", outputFormat0.getIndent());
      
      OutputFormat outputFormat2 = OutputFormat.createPrettyPrint();
      assertTrue(outputFormat2.isNewLineAfterDeclaration());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.015255863586861
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`", true);
      String[] stringArray0 = new String[19];
      stringArray0[0] = "`";
      stringArray0[1] = "`";
      stringArray0[2] = "`";
      stringArray0[3] = "`";
      stringArray0[2] = "`";
      stringArray0[2] = "`";
      outputFormat0.setIndent(true);
      stringArray0[6] = "`";
      stringArray0[7] = "`";
      outputFormat0.setNewlines(true);
      outputFormat0.isNewlines();
      char char0 = 'q';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('q');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (q)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-xhtmlEbQXB/;~o");
      outputFormat0.getAttributeQuoteCharacter();
      outputFormat0.setAttributeQuoteCharacter('\"');
      outputFormat0.setAttributeQuoteCharacter('\"');
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("-expandEmpty-xhtmlEbQXB/;~o", outputFormat0.getIndent());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isTrimText());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertEquals("UTF-8", outputFormat0.getEncoding());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("mjC/Q\"OM)_lE");
      outputFormat0.setAttributeQuoteCharacter('\'');
      assertEquals('\'', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.088208711523111
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-xhtmlEbQXB/;~o");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-expandEmpty-xhtmlEbQXB/;~o";
      String[] stringArray1 = new String[6];
      stringArray1[0] = "-lineSeparator";
      stringArray1[1] = "-xhtml-xhtml`";
      stringArray1[2] = "-xhtml-xhtml`";
      stringArray1[3] = "-suppr)ssDeclaratioM";
      stringArray1[4] = "-xhtml-xhtml`";
      stringArray1[5] = "-suppr)ssDeclaratioM";
      outputFormat0.parseOptions(stringArray1, 0);
      int int0 = outputFormat0.parseOptions(stringArray0, 712);
      assertEquals("-xhtml-xhtml`", outputFormat0.getLineSeparator());
      assertEquals(712, int0);
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.6454371383635378
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createCompactFormat();
      outputFormat0.setPadText(false);
      boolean boolean0 = outputFormat0.isTrimText();
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isNewlines());
      assertTrue(boolean0);
      
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      assertEquals("  ", outputFormat1.getIndent());
      assertEquals("\n", outputFormat1.getLineSeparator());
      assertEquals(0, outputFormat1.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat1.getEncoding());
      assertTrue(outputFormat1.isTrimText());
      assertTrue(outputFormat1.isNewLineAfterDeclaration());
      assertFalse(outputFormat1.isExpandEmptyElements());
      assertTrue(outputFormat1.isNewlines());
      assertFalse(outputFormat1.isOmitEncoding());
      assertFalse(outputFormat1.isSuppressDeclaration());
      assertTrue(outputFormat1.isPadText());
      assertEquals('\"', outputFormat1.getAttributeQuoteCharacter());
      assertFalse(outputFormat1.isXHTML());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=2.3626867252557675
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      outputFormat0.setLineSeparator("3Eom6{fDz1");
      outputFormat0.setNewLineAfterNTags(1912);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterNTags(0);
      stringArray0[0] = "Invalid attribute quote character (";
      stringArray0[1] = "";
      stringArray0[2] = "Oz}'d4tqK' p";
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setNewLineAfterNTags(1912);
      stringArray0[3] = "";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.isOmitEncoding();
      outputFormat0.setIndent(false);
      outputFormat0.setIndentSize(0);
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.92819476520619
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[7];
      stringArray0[0] = "-gxhtl";
      outputFormat0.setNewLineAfterDeclaration(false);
      stringArray0[3] = "-lineSeparator";
      stringArray0[3] = "-lineSeparator";
      stringArray0[5] = "";
      outputFormat0.setLineSeparator("5${nei6FfWm_3)Fs\"l?");
      stringArray0[6] = "org.dom4j.io.OutputFormat";
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.getIndent();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setEncoding(">o})*nO");
      outputFormat1.setEncoding("-gxhtl");
      outputFormat1.setEncoding("org.dom4j.io.OutputFormat");
      outputFormat1.setIndentSize(1128);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.setIndent("-lineSeparator");
      outputFormat1.setIndent("OTHx{tWX<!YmY\"");
      assertEquals("org.dom4j.io.OutputFormat", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=3.127429422638514
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("D2(XTs|~K");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndentSize((-1));
      outputFormat0.setNewlines(false);
      outputFormat0.setTrimText(true);
      outputFormat0.setTrimText(false);
      OutputFormat outputFormat1 = OutputFormat.createCompactFormat();
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setEncoding("C");
      outputFormat1.setEncoding("D2(XTs|~K");
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat1.setTrimText(false);
      outputFormat0.getIndent();
      outputFormat1.getIndent();
      outputFormat1.isNewlines();
      outputFormat1.setPadText(false);
      outputFormat1.setOmitEncoding(true);
      assertEquals("D2(XTs|~K", outputFormat1.getEncoding());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      String[] stringArray0 = new String[3];
      stringArray0[0] = ">bQXB/;To";
      stringArray0[2] = "<[TG=c&C\"zOA(wM}.^";
      OutputFormat outputFormat0 = new OutputFormat();
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('#');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (#)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4990104312963837
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";^oBA7Q/VP");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(1135);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "EbQXB/;To";
      stringArray0[2] = "<[TG=c&C\"zOA(wM}.Z";
      outputFormat0.parseOptions(stringArray0, 1135);
      outputFormat0.setIndent("<[TG=c&C\"zOA(wM}.Z");
      outputFormat0.setXHTML(true);
      outputFormat0.isXHTML();
      outputFormat0.isSuppressDeclaration();
      int int0 = outputFormat0.parseOptions(stringArray0, 1135);
      assertEquals("<[TG=c&C\"zOA(wM}.Z", outputFormat0.getIndent());
      assertEquals(1135, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.4232778782430542
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "-trimText";
      outputFormat0.setNewLineAfterNTags(2535);
      int int0 = 0;
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.getNewLineAfterNTags();
      outputFormat0.parseOptions(stringArray0, 2591);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-196));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -196
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      assertFalse(outputFormat0.isPadText());
      
      outputFormat0.setPadText(true);
      assertTrue(outputFormat0.isPadText());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty-expandEmpty-xhtmlEbQXB/;~o");
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-expandEmpty-expandEmpty-xhtmlEbQXB/;~o";
      stringArray0[1] = "-expandEmpty-expandEmpty-xhtmlEbQXB/;~o";
      stringArray0[1] = "-expandEmpty-expandEmpty-xhtmlEbQXB/;~o";
      stringArray0[3] = "-suppr)ssDeclaratioM";
      stringArray0[4] = "-expandEmpty-fxpandEmpt?vli attr";
      stringArray0[5] = "-xhtml-xhtml`";
      stringArray0[6] = "-suppr)ssDeclaratioM";
      stringArray0[2] = "-xhtml-xhtml`";
      int int0 = outputFormat0.getNewLineAfterNTags();
      assertEquals(0, int0);
      assertEquals("-expandEmpty-expandEmpty-xhtmlEbQXB/;~o", outputFormat0.getIndent());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=3.305663096808308
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      OutputFormat outputFormat1 = OutputFormat.createPrettyPrint();
      outputFormat0.setIndent(true);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setNewlines(true);
      outputFormat0.setIndentSize(0);
      outputFormat0.setLineSeparator("e_2P?`Pwk");
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setOmitEncoding(true);
      outputFormat1.setNewLineAfterNTags(0);
      outputFormat0.getIndent();
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.setLineSeparator("");
      outputFormat1.isXHTML();
      OutputFormat outputFormat2 = new OutputFormat("e_2P?`Pwk");
      outputFormat2.setLineSeparator("e_2P?`Pwk");
      outputFormat0.setPadText(false);
      String[] stringArray0 = new String[5];
      stringArray0[0] = "'yhpeU'.B ~S9";
      stringArray0[1] = "";
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setNewLineAfterNTags(0);
      // Undeclared exception!
      try { 
        outputFormat2.parseOptions(stringArray0, (-2399));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2399
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=3.1021170635140374
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      OutputFormat outputFormat0 = OutputFormat.createPrettyPrint();
      String[] stringArray0 = new String[4];
      outputFormat0.setLineSeparator("3EFm67f$/1");
      outputFormat0.setNewLineAfterNTags(1912);
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.isPadText();
      outputFormat0.setOmitEncoding(true);
      outputFormat0.setPadText(true);
      boolean boolean0 = false;
      outputFormat0.setNewLineAfterDeclaration(true);
      outputFormat0.setXHTML(true);
      outputFormat0.setExpandEmptyElements(false);
      String string0 = null;
      outputFormat0.setLineSeparator((String) null);
      int int0 = (-2964);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-2964));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -2964
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.1757412430371352
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-expandEmpty", false, (String) null);
      outputFormat0.getLineSeparator();
      outputFormat0.setIndentSize((-1));
      outputFormat0.setLineSeparator((String) null);
      outputFormat0.setExpandEmptyElements(false);
      outputFormat0.setNewLineAfterDeclaration(false);
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setTrimText(false);
      outputFormat0.setIndent(false);
      outputFormat0.setPadText(false);
      outputFormat0.setIndentSize(0);
      outputFormat0.setNewLineAfterNTags(0);
      outputFormat0.setIndent("Invalid attribute quote character (");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndent(":03?._~!rdXc<u#e");
      OutputFormat outputFormat1 = new OutputFormat(":03?._~!rdXc<u#e", false, (String) null);
      outputFormat0.getIndent();
      outputFormat1.setPadText(true);
      outputFormat1.getNewLineAfterNTags();
      outputFormat1.setPadText(false);
      outputFormat1.setTrimText(false);
      outputFormat1.isNewLineAfterDeclaration();
      outputFormat0.setIndent("E&MOyH");
      outputFormat0.setIndent("\n");
      assertEquals("\n", outputFormat0.getIndent());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      boolean boolean0 = outputFormat0.isTrimText();
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isPadText());
      assertEquals("", outputFormat0.getIndent());
      assertFalse(boolean0);
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=2.372821413206516
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("");
      outputFormat0.setEncoding("Q]ZRJLh(&v");
      outputFormat0.setOmitEncoding(false);
      outputFormat0.setIndentSize(1);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.isNewLineAfterDeclaration();
      outputFormat0.setNewlines(true);
      assertEquals(" ", outputFormat0.getIndent());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-^\"zag]9Q");
      char char0 = ':';
      // Undeclared exception!
      try { 
        outputFormat0.setAttributeQuoteCharacter('V');
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid attribute quote character (V)
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("w:soN2ro[qjk[wK#&Y", false);
      char char0 = outputFormat0.getAttributeQuoteCharacter();
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', char0);
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("w:soN2ro[qjk[wK#&Y", outputFormat0.getIndent());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isExpandEmptyElements());
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4356998911125343
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";^oBA7/VP");
      outputFormat0.setIndent(" s'Hzm:yPR{,Vr]D&");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(" s'Hzm:yPR{,Vr]D&");
      outputFormat0.setIndent(";^oBA7/VP");
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent((String) null);
      outputFormat0.setIndent(":tPyygA");
      assertEquals(":tPyygA", outputFormat0.getIndent());
      
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      outputFormat0.setIndent("");
      assertFalse(outputFormat0.isOmitEncoding());
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6711893730418441
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("-xp<ndEmpy-fxpancEmpxyli attr");
      String[] stringArray0 = new String[6];
      stringArray0[0] = "";
      stringArray0[1] = "-xp<ndEmpy-fxpancEmptyli attr";
      stringArray0[2] = "-xp<ndEmpy-fxpancEmpxyli attr";
      stringArray0[3] = "-xp<ndEmpy-fxpancEmpxyli attr";
      stringArray0[4] = "Invalid attribute quote character (";
      stringArray0[5] = "%\"Zww^]]h,c.zNw-Q`/";
      int int0 = outputFormat0.parseOptions(stringArray0, 0);
      assertEquals(0, int0);
      assertFalse(outputFormat0.isPadText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isNewlines());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertEquals("-xp<ndEmpy-fxpancEmpxyli attr", outputFormat0.getIndent());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isXHTML());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.7156338174862886
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      String[] stringArray0 = new String[10];
      stringArray0[0] = "-trmTxt";
      outputFormat0.parseOptions(stringArray0, 0);
      outputFormat0.parseOptions(stringArray0, 0);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-1798129371));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1798129371
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.963354960867429
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = "-xhtml-ahtml`";
      OutputFormat outputFormat0 = new OutputFormat("-xhtml-ahtml`");
      int int0 = 1;
      String[] stringArray0 = new String[6];
      stringArray0[1] = "-xhtml-ahtml`";
      stringArray0[2] = "-xhtml-ahtml`";
      stringArray0[3] = "-ahtml`";
      stringArray0[5] = stringArray0[0];
      int int1 = (-1104);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      outputFormat0.parseOptions(stringArray0, 1);
      int int2 = (-496);
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray0, (-496));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -496
         //
         verifyException("org.dom4j.io.OutputFormat", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.501516696960544
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";^oBA7Q/VP");
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndentSize(1135);
      String[] stringArray0 = new String[3];
      stringArray0[0] = ";^oBA7Q/VP";
      stringArray0[2] = "<[TG=c&C\"zOA(wM}.Z";
      outputFormat0.parseOptions(stringArray0, 1135);
      outputFormat0.setIndent("<[TG=c&C\"zOA(wM}.Z");
      outputFormat0.setXHTML(false);
      outputFormat0.isXHTML();
      outputFormat0.isSuppressDeclaration();
      outputFormat0.parseOptions(stringArray0, 1135);
      outputFormat0.setIndent("<[TG=c&C\"zOA(wM}.Z");
      assertEquals("<[TG=c&C\"zOA(wM}.Z", outputFormat0.getIndent());
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.5364016494676256
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setIndent(false);
      outputFormat0.setIndent(true);
      outputFormat0.setIndent("meVLw>u=-0\"h)pg<a8");
      outputFormat0.setIndent(true);
      outputFormat0.setIndent(false);
      outputFormat0.setIndent("-encoding");
      outputFormat0.setIndent("-expandEmpty-newlines");
      outputFormat0.setIndent("meVLw>u=-0\"h)pg<a8");
      outputFormat0.setIndent("-expan");
      outputFormat0.setIndent("meVLw>");
      outputFormat0.setIndent("-expan");
      outputFormat0.setIndent("-expandEmpty-newlines");
      assertEquals("-expandEmpty-newlines", outputFormat0.getIndent());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.279755450851913
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat(";^oB/7Q:VP", true, ";^oB/7Q:VP");
      outputFormat0.setEncoding(";^oB/7Q:VP");
      outputFormat0.isPadText();
      outputFormat0.setPadText(true);
      outputFormat0.setLineSeparator(";^oB/7Q:VP");
      String[] stringArray0 = new String[3];
      outputFormat0.setEncoding(";^oB/7Q:VP");
      stringArray0[0] = ";^oB/7Q:VP";
      outputFormat0.setNewlines(false);
      stringArray0[1] = ";^oB/7Q:VP";
      outputFormat0.setOmitEncoding(true);
      stringArray0[2] = ";^oB/7Q:VP";
      outputFormat0.parseOptions(stringArray0, 2);
      outputFormat0.setIndent(false);
      outputFormat0.setSuppressDeclaration(true);
      outputFormat0.setIndent("{pfP8");
      outputFormat0.setIndent("");
      assertEquals(";^oB/7Q:VP", outputFormat0.getLineSeparator());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.9840358060118528
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat();
      outputFormat0.setSuppressDeclaration(false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "-xhtml";
      outputFormat0.parseOptions(stringArray0, 1040);
      stringArray0[1] = "-ineSepaator";
      stringArray0[2] = "<[TG=c&C\"zOA(wM}.Z";
      outputFormat0.parseOptions(stringArray0, 974);
      outputFormat0.setIndent("-indent");
      outputFormat0.setNewLineAfterDeclaration(false);
      String string0 = "";
      outputFormat0.setIndent("");
      outputFormat0.parseOptions(stringArray0, 2);
      int int0 = 0;
      outputFormat0.parseOptions(stringArray0, 0);
      String string1 = "EbQXB/;To";
      OutputFormat outputFormat1 = new OutputFormat("EbQXB/;To", false);
      outputFormat0.isSuppressDeclaration();
      outputFormat1.setIndentSize((-1805703608));
      String[] stringArray1 = new String[5];
      String string2 = "(|/jsuA?W";
      // Undeclared exception!
      try { 
        outputFormat0.parseOptions(stringArray1, 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=1.830738805564335
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("`", false);
      String[] stringArray0 = new String[8];
      stringArray0[0] = "`";
      stringArray0[1] = "`";
      stringArray0[2] = "`";
      stringArray0[3] = "`";
      stringArray0[4] = "`";
      stringArray0[2] = "`";
      stringArray0[6] = "`";
      stringArray0[7] = "`";
      outputFormat0.setNewlines(false);
      outputFormat0.isNewlines();
      String string0 = outputFormat0.getEncoding();
      assertEquals("\n", outputFormat0.getLineSeparator());
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("`", outputFormat0.getIndent());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isNewlines());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isOmitEncoding());
      assertEquals("UTF-8", string0);
      assertFalse(outputFormat0.isXHTML());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertFalse(outputFormat0.isPadText());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      OutputFormat outputFormat0 = new OutputFormat("xtf.uG[64o5O");
      String string0 = outputFormat0.getLineSeparator();
      assertEquals(0, outputFormat0.getNewLineAfterNTags());
      assertEquals("UTF-8", outputFormat0.getEncoding());
      assertFalse(outputFormat0.isXHTML());
      assertFalse(outputFormat0.isExpandEmptyElements());
      assertFalse(outputFormat0.isSuppressDeclaration());
      assertFalse(outputFormat0.isTrimText());
      assertFalse(outputFormat0.isOmitEncoding());
      assertFalse(outputFormat0.isPadText());
      assertEquals("\n", string0);
      assertFalse(outputFormat0.isNewlines());
      assertEquals('\"', outputFormat0.getAttributeQuoteCharacter());
      assertTrue(outputFormat0.isNewLineAfterDeclaration());
      assertEquals("xtf.uG[64o5O", outputFormat0.getIndent());
  }
}
