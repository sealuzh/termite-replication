/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 11:58:02 GMT 2020
 */

package org.firebirdsql.jdbc;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.Charset;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.Spliterator;
import java.util.concurrent.DelayQueue;
import java.util.concurrent.Delayed;
import java.util.concurrent.LinkedBlockingDeque;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.ThreadFactory;
import java.util.concurrent.ThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import java.util.function.Predicate;
import javax.management.remote.JMXPrincipal;
import javax.security.auth.Subject;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThread;
import org.firebirdsql.gds.DatabaseParameterBuffer;
import org.firebirdsql.gds.GDS;
import org.firebirdsql.gds.IscDbHandle;
import org.firebirdsql.gds.XSQLVAR;
import org.firebirdsql.gds.impl.GDSHelper;
import org.firebirdsql.gds.impl.wire.DatabaseParameterBufferImp;
import org.firebirdsql.gds.impl.wire.JavaGDSImpl;
import org.firebirdsql.gds.impl.wire.isc_stmt_handle_impl;
import org.firebirdsql.jca.FBConnectionRequestInfo;
import org.firebirdsql.jca.FBManagedConnection;
import org.firebirdsql.jdbc.FBCachedFetcher;
import org.firebirdsql.jdbc.FBConnection;
import org.firebirdsql.jdbc.FBFetcher;
import org.firebirdsql.jdbc.FBObjectListener;
import org.firebirdsql.jdbc.FBResultSet;
import org.firebirdsql.jdbc.FBSQLException;
import org.firebirdsql.jdbc.InternalTransactionCoordinator;
import org.firebirdsql.jdbc.field.FBLongVarCharField;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FBCachedFetcher_ESTest extends FBCachedFetcher_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      Integer.compareUnsigned(82, 82);
      linkedList0.removeLastOccurrence(integer0);
      linkedList0.removeLastOccurrence(integer0);
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.setFetchSize(82);
      fBCachedFetcher0.absolute((-2170));
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(82, int0);
  }

  /**
  //Test case number: 1
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      Integer.compareUnsigned(82, 82);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.relative(0);
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[4];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.relative((-1114));
      try { 
        fBCachedFetcher0.absolute((-1));
        fail("Expecting exception: FBSQLException");
      
      } catch(FBSQLException e) {
         //
         // You cannot position to the row 0 with absolute() method.
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      Integer.sum(924, (-955));
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.absolute(2);
      fBCachedFetcher0.previous();
      boolean boolean0 = fBCachedFetcher0.previous();
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.378466514501777
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.relative(32664);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isFirst();
      boolean boolean0 = fBCachedFetcher0.absolute(2);
      assertTrue(fBCachedFetcher0.isAfterLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.316755030306057
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      Integer.sum(924, (-955));
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.isFirst();
      fBCachedFetcher0.absolute(2);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.previous();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.2510486588729868
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      Integer.sum(82, 82);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.last();
      assertTrue(fBCachedFetcher0.isLast());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.1321922400878854
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.isAfterLast();
      assertEquals(2, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.9813325147239833
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.getRowNum();
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(fBCachedFetcher0.isLast());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=1.7201934592198251
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      Integer.max(1003, 1003);
      Object object0 = new Object();
      fBCachedFetcher0.insertRow((byte[][]) null);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl isc_stmt_handle_impl1 = new isc_stmt_handle_impl();
      fBCachedFetcher0.updateRow((byte[][]) null);
      assertFalse(fBCachedFetcher0.isEmpty());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.5832584594204766
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte byte0 = (byte) (-17);
      byte[][] byteArray0 = new byte[0][8];
      linkedList0.add(byteArray0);
      linkedList0.offer(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      linkedList0.add((byte[][]) null);
      fBCachedFetcher0.absolute((byte) (-17));
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.4735023850806486
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(79, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup1, "qc7ty|$*XG7Zf]c");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "b/=!&Uo@IXMgx0,G");
      MockThread mockThread2 = new MockThread(mockThread1, "|-BP");
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread2, 0L, 79, timeUnit0);
      linkedList0.removeLastOccurrence(scheduledFuture0);
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[7] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[8] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.first();
      fBCachedFetcher0.getFetchSize();
      int int0 = fBCachedFetcher0.getFetchSize();
      assertEquals(0, int0);
      
      boolean boolean0 = fBCachedFetcher0.relative(0);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(79, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup1, "qc7ty|$*XG7Zf]c");
      MockThread mockThread1 = new MockThread(threadGroup0, mockThread0, "b/=!&Uo@IXMgx0,G");
      MockThread mockThread2 = new MockThread(mockThread1, "|-BP");
      MockThread.reset();
      mockThread1.run();
      TimeUnit timeUnit0 = TimeUnit.MINUTES;
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread2, 79, 79, timeUnit0);
      linkedList0.removeLastOccurrence(scheduledFuture0);
      byte[][] byteArray0 = new byte[2][4];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)72;
      byteArray1[1] = (byte) (-1);
      byteArray1[2] = (byte) (-117);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[8];
      byteArray2[0] = (byte)72;
      byteArray2[1] = (byte)72;
      byteArray2[2] = (byte)72;
      byteArray2[3] = (byte)72;
      byteArray2[4] = (byte) (-25);
      byteArray2[5] = (byte) (-117);
      byteArray2[6] = (byte) (-117);
      byteArray2[7] = (byte) (-117);
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      linkedList0.spliterator();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.last();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[2];
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.add("3");
      linkedList0.retainAll(linkedBlockingDeque0);
      linkedList0.clone();
      byteArray1[0] = (byte)79;
      byteArray1[1] = (byte)44;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      linkedList0.add(byteArray0);
      FBObjectListener.FetcherListener fBObjectListener_FetcherListener0 = null;
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.afterLast();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.6731183626432506
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread(threadGroup0, "&[wF8");
      MockThread mockThread1 = new MockThread(mockThread0, "&[wF8");
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(79, threadPoolExecutor_DiscardPolicy0);
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, scheduledThreadPoolExecutor0);
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor1 = new ScheduledThreadPoolExecutor(79, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup2 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[2][4];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)22;
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.beforeFirst();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.add((byte[][]) null);
      linkedList1.add((byte[][]) null);
      LinkedList<byte[][]> linkedList2 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.absolute((-1304));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[7][4];
      byte[] byteArray1 = new byte[2];
      byteArray1[0] = (byte) (-1);
      byteArray1[1] = (byte) (-21);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[9];
      byteArray2[0] = (byte) (-21);
      byteArray2[1] = (byte) (-1);
      byteArray2[2] = (byte) (-21);
      byteArray2[3] = (byte) (-1);
      byteArray2[4] = (byte) (-1);
      byteArray2[5] = (byte) (-1);
      byteArray2[6] = (byte) (-1);
      byteArray2[7] = (byte) (-1);
      byteArray2[8] = (byte) (-21);
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[7];
      byteArray3[0] = (byte) (-1);
      byteArray3[1] = (byte)0;
      byteArray3[2] = (byte) (-21);
      byteArray3[3] = (byte) (-1);
      byteArray3[4] = (byte) (-21);
      byteArray3[5] = (byte) (-1);
      byteArray3[6] = (byte)88;
      byteArray0[2] = byteArray3;
      byte[] byteArray4 = new byte[7];
      byteArray4[0] = (byte) (-1);
      byteArray4[1] = (byte) (-1);
      byteArray4[2] = (byte) (-21);
      byteArray4[3] = (byte)28;
      byteArray4[4] = (byte) (-1);
      byteArray4[5] = (byte)0;
      byteArray4[6] = (byte)0;
      byteArray0[3] = byteArray4;
      byte[] byteArray5 = new byte[0];
      byteArray0[4] = byteArray5;
      byte[] byteArray6 = new byte[9];
      byteArray6[0] = (byte)88;
      byteArray6[1] = (byte)28;
      byteArray6[2] = (byte) (-21);
      byteArray6[3] = (byte)88;
      byteArray6[4] = (byte) (-21);
      byteArray6[5] = (byte) (-21);
      byteArray6[6] = (byte) (-10);
      byteArray6[7] = (byte)88;
      byteArray6[8] = (byte)28;
      byteArray0[5] = byteArray6;
      byte[] byteArray7 = new byte[3];
      byteArray7[0] = (byte)0;
      byteArray7[1] = (byte)28;
      byteArray7[2] = (byte) (-10);
      byteArray0[6] = byteArray7;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.relative(100);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte)22;
      byteArray0[0] = byteArray1;
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher((List<byte[][]>) null, (FBObjectListener.FetcherListener) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(404);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Object object1 = new Object();
      Predicate<Object> predicate2 = Predicate.isEqual(object1);
      predicate0.or(predicate1);
      predicate0.and(predicate2);
      Predicate<Object> predicate3 = predicate1.negate();
      predicate2.or(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate1);
      predicate1.test(object0);
      predicate1.test(predicate4);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate1);
      predicate2.or(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate6.or(predicate3);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(39);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Object object0 = new Object();
      Integer integer0 = new Integer(404);
      Predicate<Object> predicate0 = Predicate.isEqual((Object) integer0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Object object1 = new Object();
      Predicate<Object> predicate3 = Predicate.isEqual(object1);
      predicate0.or(predicate2);
      predicate2.and(predicate3);
      Predicate<Object> predicate4 = predicate1.negate();
      predicate3.or(predicate0);
      Predicate<Object> predicate5 = predicate2.and(predicate1);
      Object object2 = new Object();
      predicate1.test(object0);
      predicate1.test(predicate5);
      Predicate<Object> predicate6 = Predicate.isEqual((Object) predicate2);
      predicate3.or(predicate5);
      Predicate<Object> predicate7 = predicate6.negate();
      predicate7.or(predicate4);
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>(39);
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isFirst();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) spliterator0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate3.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate1.or(predicate0);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate0);
      predicate5.or(predicate4);
      predicate5.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.and(predicate5);
      predicate8.negate();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.add("IH");
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(fBCachedFetcher0.isBeforeFirst());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.559581156259877
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[3][3];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte)22;
      byteArray1[2] = (byte) (-44);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)22;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[1];
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.updateRow(byteArray0);
      FBManagedConnection fBManagedConnection0 = mock(FBManagedConnection.class, new ViolatedAssumptionAnswer());
      doReturn((FBConnectionRequestInfo) null).when(fBManagedConnection0).getConnectionRequestInfo();
      FBConnection fBConnection0 = null;
      try {
        fBConnection0 = new FBConnection(fBManagedConnection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.AbstractConnection", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=2.2243004996270583
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(70);
      Integer.compareUnsigned(70, 70);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getRowNum();
      assertTrue(fBCachedFetcher0.isFirst());
      
      FBCachedFetcher fBCachedFetcher1 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher1.isLast();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.4708084763221112
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      linkedBlockingDeque0.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) spliterator0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate3.and(predicate0);
      Predicate.isEqual((Object) linkedBlockingDeque0);
      Predicate<Object> predicate4 = predicate1.or(predicate0);
      Predicate<String> predicate5 = Predicate.isEqual((Object) predicate0);
      Predicate<String> predicate6 = predicate5.or(predicate2);
      predicate6.and(predicate4);
      Predicate<String> predicate7 = predicate6.negate();
      linkedBlockingDeque0.removeIf(predicate7);
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.add("IH");
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.insertRow(byteArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Integer integer0 = new Integer(404);
      Integer.compare(310, 1389);
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.or(predicate1);
      Object object1 = new Object();
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      Predicate<Object> predicate4 = predicate2.or(predicate1);
      predicate4.or(predicate0);
      Predicate<Object> predicate5 = predicate0.or(predicate4);
      predicate2.and(predicate5);
      Object object2 = new Object();
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      linkedList1.removeLastOccurrence(predicate3);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.next();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.2130075659799042
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[7];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharFieldArray0[4];
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray1[0] = fBLongVarCharField0;
      linkedList0.removeLastOccurrence(fBLongVarCharField0);
      linkedList0.spliterator();
      linkedList0.toArray(fBLongVarCharFieldArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.absolute((-2));
      assertEquals(0, fBCachedFetcher0.getRowNum());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=2.316755030306057
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(70);
      Integer integer1 = Integer.valueOf((-2320));
      Integer.getInteger("xbp#+r", integer1);
      Integer.compareUnsigned(70, 70);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      fBCachedFetcher0.deleteRow();
      fBCachedFetcher0.getRowNum();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.getFetchSize();
      fBCachedFetcher0.relative(0);
      fBCachedFetcher0.getRowNum();
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      int int1 = fBCachedFetcher0.getRowNum();
      assertTrue(fBCachedFetcher0.isLast());
      assertEquals(1, int1);
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) spliterator0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate3.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate1.or(predicate0);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate0);
      predicate5.or(predicate4);
      predicate5.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.and(predicate5);
      Predicate<String> predicate9 = predicate8.negate();
      linkedBlockingDeque0.removeIf(predicate9);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque2.add("IH");
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      int int0 = fBCachedFetcher0.getRowNum();
      assertEquals(0, int0);
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.8662160235859526
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)44;
      byteArray0[1] = (byte) (-72);
      byteArray0[2] = (byte)100;
      byteArray0[3] = (byte) (-44);
      Object object0 = new Object();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[9];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[7] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[8] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.afterLast();
      boolean boolean0 = fBCachedFetcher0.isLast();
      boolean boolean1 = fBCachedFetcher0.isAfterLast();
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=1.0549201679861442
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      byte[][] byteArray0 = new byte[1][9];
      byte[] byteArray1 = new byte[2];
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      predicate0.test((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      Subject subject0 = new Subject();
      Class<JMXPrincipal> class0 = JMXPrincipal.class;
      Set<JMXPrincipal> set0 = subject0.getPublicCredentials(class0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set1 = charset0.aliases();
      Subject subject1 = new Subject(false, set0, set0, set1);
      Class<Delayed> class1 = Delayed.class;
      Set<Delayed> set2 = subject1.getPublicCredentials(class1);
      delayQueue0.addAll(set2);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      predicate2.test(predicate0);
      predicate0.and(predicate1);
      Predicate.isEqual((Object) delayQueue0);
      predicate2.negate();
      linkedList0.clone();
      byteArray1[0] = (byte)79;
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0397207708399179
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.spliterator();
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque0.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      DelayQueue<Delayed> delayQueue0 = new DelayQueue<Delayed>();
      delayQueue0.poll();
      predicate0.test((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) predicate0);
      predicate1.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate.isEqual((Object) delayQueue0);
      predicate2.negate();
      linkedBlockingDeque0.add("");
      linkedList0.retainAll(delayQueue0);
      linkedList0.clone();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isBeforeFirst();
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(79, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      byte[][] byteArray0 = new byte[2][4];
      byte[] byteArray1 = new byte[0];
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[1];
      byteArray2[0] = (byte)22;
      byteArray0[1] = byteArray2;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1823690947357193
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      linkedList0.removeLastOccurrence(integer0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.isAfterLast();
      fBCachedFetcher0.close();
      fBCachedFetcher0.previous();
      fBCachedFetcher0.insertRow((byte[][]) null);
      fBCachedFetcher0.next();
      // Undeclared exception!
      try { 
        fBCachedFetcher0.deleteRow();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.8688627696075706
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      ScheduledThreadPoolExecutor scheduledThreadPoolExecutor0 = new ScheduledThreadPoolExecutor(79, threadPoolExecutor_DiscardPolicy0);
      ThreadGroup threadGroup0 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      ThreadGroup threadGroup1 = mock(ThreadGroup.class, new ViolatedAssumptionAnswer());
      MockThread mockThread0 = new MockThread();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      scheduledThreadPoolExecutor0.schedule((Runnable) mockThread0, (long) 79, timeUnit0);
      MockThread mockThread1 = new MockThread((ThreadGroup) null, "LITERAL_SUFFIX");
      TimeUnit timeUnit1 = TimeUnit.DAYS;
      LinkedBlockingDeque<Runnable> linkedBlockingDeque0 = new LinkedBlockingDeque<Runnable>();
      ThreadFactory threadFactory0 = mock(ThreadFactory.class, new ViolatedAssumptionAnswer());
      linkedBlockingDeque0.add(mockThread1);
      ThreadPoolExecutor threadPoolExecutor0 = new ThreadPoolExecutor(79, 79, 3049L, timeUnit1, linkedBlockingDeque0, threadFactory0);
      scheduledThreadPoolExecutor0.getThreadFactory();
      threadPoolExecutor_DiscardPolicy0.rejectedExecution(mockThread1, threadPoolExecutor0);
      MockThread mockThread2 = new MockThread(threadGroup0, mockThread1, "b/=!&Uo@IXMgx0,G");
      MockThread mockThread3 = new MockThread();
      mockThread3.run();
      MockThread.reset();
      mockThread2.run();
      TimeUnit timeUnit2 = TimeUnit.MINUTES;
      MockThread.setDefaultUncaughtExceptionHandler((Thread.UncaughtExceptionHandler) null);
      ScheduledFuture<?> scheduledFuture0 = scheduledThreadPoolExecutor0.scheduleAtFixedRate(mockThread3, 0L, 79, timeUnit2);
      linkedList0.removeLastOccurrence(scheduledFuture0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.beforeFirst();
      fBCachedFetcher0.last();
      fBCachedFetcher0.relative(60);
      fBCachedFetcher0.first();
      boolean boolean0 = fBCachedFetcher0.absolute(79);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ThreadPoolExecutor.DiscardPolicy threadPoolExecutor_DiscardPolicy0 = new ThreadPoolExecutor.DiscardPolicy();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      linkedList0.add((byte[][]) null);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.previous();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3592367006650066
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[7];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray1[0] = fBLongVarCharField0;
      linkedList0.removeLastOccurrence(fBLongVarCharField0);
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray2 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray2[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[7] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray2);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      fBCachedFetcher0.relative((-1114));
      boolean boolean0 = fBCachedFetcher0.absolute(1770);
      assertFalse(boolean0);
      assertTrue(fBCachedFetcher0.isLast());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Comparator<byte[][]> comparator0 = (Comparator<byte[][]>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      fBCachedFetcher0.setFetchSize((-126));
      Integer.max(1967, 1003);
      Object object0 = new Object();
      linkedList0.removeFirstOccurrence(object0);
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      InternalTransactionCoordinator internalTransactionCoordinator0 = new InternalTransactionCoordinator((InternalTransactionCoordinator.AbstractTransactionCoordinator) null);
      // Undeclared exception!
      try { 
        internalTransactionCoordinator0.getConnection();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.InternalTransactionCoordinator", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.3592367006650066
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[7];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray1[0] = fBLongVarCharField0;
      linkedList0.removeLastOccurrence(fBLongVarCharField0);
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray2 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray2[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[7] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray2);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      assertFalse(fBCachedFetcher0.isBeforeFirst());
      
      fBCachedFetcher0.relative((-1114));
      boolean boolean0 = fBCachedFetcher0.absolute(2004);
      assertFalse(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      linkedList0.add((byte[][]) null);
      Integer integer0 = new Integer(82);
      int int0 = FBFetcher.MAX_FETCH_ROWS;
      JavaGDSImpl javaGDSImpl0 = new JavaGDSImpl();
      DatabaseParameterBuffer databaseParameterBuffer0 = javaGDSImpl0.createDatabaseParameterBuffer();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl isc_stmt_handle_impl0 = new org.firebirdsql.gds.impl.jni.isc_stmt_handle_impl();
      FBCachedFetcher fBCachedFetcher0 = null;
      try {
        fBCachedFetcher0 = new FBCachedFetcher(gDSHelper0, 1181, 16384, isc_stmt_handle_impl0, fBResultSet0, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate.isEqual((Object) predicate2);
      Predicate<Object> predicate4 = Predicate.isEqual((Object) spliterator0);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      predicate5.or(predicate3);
      predicate5.or(predicate4);
      Predicate<Object> predicate6 = predicate5.and(predicate0);
      Predicate<Object> predicate7 = predicate3.or(predicate0);
      Predicate<String> predicate8 = Predicate.isEqual((Object) predicate0);
      predicate7.or(predicate6);
      predicate7.negate();
      Predicate<String> predicate9 = predicate8.negate();
      Predicate<String> predicate10 = predicate9.and(predicate7);
      Predicate<String> predicate11 = predicate10.negate();
      linkedBlockingDeque0.removeIf(predicate11);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      TimeUnit timeUnit0 = TimeUnit.HOURS;
      linkedBlockingDeque2.poll((-2059L), timeUnit0);
      linkedBlockingDeque2.add("IH");
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.4941751382893083
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[1][8];
      byte[] byteArray1 = new byte[3];
      byteArray1[0] = (byte)22;
      byteArray1[1] = (byte) (-44);
      byteArray1[2] = (byte)22;
      byteArray0[0] = byteArray1;
      linkedList0.add(byteArray0);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList1, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.updateRow(byteArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.3296613488547582
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      LinkedBlockingDeque<String> linkedBlockingDeque0 = new LinkedBlockingDeque<String>();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      Spliterator<byte[][]> spliterator0 = linkedList0.spliterator();
      LinkedBlockingDeque<String> linkedBlockingDeque1 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque1.toArray();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "r4Q\"J-)4[Z)F<h@Q");
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate.isEqual((Object) null);
      Predicate<Object> predicate2 = Predicate.isEqual((Object) spliterator0);
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      predicate3.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = predicate1.or(predicate0);
      Predicate<String> predicate6 = Predicate.isEqual((Object) predicate0);
      predicate5.or(predicate4);
      predicate5.negate();
      Predicate<String> predicate7 = predicate6.negate();
      Predicate<String> predicate8 = predicate7.and(predicate5);
      Predicate<String> predicate9 = predicate8.negate();
      linkedBlockingDeque0.removeIf(predicate9);
      LinkedBlockingDeque<String> linkedBlockingDeque2 = new LinkedBlockingDeque<String>();
      linkedBlockingDeque2.add("IH");
      byte[][] byteArray0 = new byte[0][4];
      linkedList0.add(byteArray0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.next();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      DatabaseParameterBufferImp databaseParameterBufferImp0 = new DatabaseParameterBufferImp();
      DatabaseParameterBuffer databaseParameterBuffer0 = databaseParameterBufferImp0.removeExtensionParams();
      isc_stmt_handle_impl isc_stmt_handle_impl0 = new isc_stmt_handle_impl();
      isc_stmt_handle_impl0.getRsr_rdb();
      GDSHelper.GDSHelperErrorListener gDSHelper_GDSHelperErrorListener0 = mock(GDSHelper.GDSHelperErrorListener.class, new ViolatedAssumptionAnswer());
      GDSHelper gDSHelper0 = new GDSHelper((GDS) null, databaseParameterBuffer0, (IscDbHandle) null, gDSHelper_GDSHelperErrorListener0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[7];
      XSQLVAR xSQLVAR0 = new XSQLVAR();
      XSQLVAR xSQLVAR1 = xSQLVAR0.deepCopy();
      xSQLVARArray0[0] = xSQLVAR1;
      XSQLVAR xSQLVAR2 = new XSQLVAR();
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      boolean boolean0 = fBCachedFetcher0.isEmpty();
      assertTrue(boolean0);
      assertFalse(fBCachedFetcher0.isAfterLast());
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      byte[][] byteArray0 = new byte[3][2];
      byte[] byteArray1 = new byte[9];
      byteArray1[0] = (byte) (-6);
      byteArray1[1] = (byte)0;
      byteArray1[2] = (byte) (-2);
      byteArray1[3] = (byte)0;
      byteArray1[4] = (byte) (-60);
      byteArray1[5] = (byte) (-124);
      byteArray1[6] = (byte) (-35);
      byteArray1[7] = (byte)29;
      byteArray1[8] = (byte) (-11);
      byteArray0[0] = byteArray1;
      byte[] byteArray2 = new byte[7];
      byteArray2[0] = (byte) (-6);
      byteArray2[1] = (byte) (-6);
      byteArray2[2] = (byte) (-11);
      byteArray2[3] = (byte) (-6);
      byteArray2[4] = (byte) (-2);
      byteArray2[5] = (byte)0;
      byteArray2[6] = (byte)29;
      byteArray0[1] = byteArray2;
      byte[] byteArray3 = new byte[8];
      byteArray3[0] = (byte) (-2);
      byteArray3[1] = (byte)29;
      byteArray3[2] = (byte) (-6);
      byteArray3[3] = (byte)0;
      byteArray3[4] = (byte) (-124);
      byteArray3[5] = (byte)29;
      byteArray3[6] = (byte)0;
      byteArray3[7] = (byte) (-6);
      byteArray0[2] = byteArray3;
      linkedList0.add(byteArray0);
      XSQLVAR[] xSQLVARArray0 = new XSQLVAR[0];
      FBResultSet fBResultSet0 = new FBResultSet(xSQLVARArray0, linkedList0);
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, fBResultSet0);
      boolean boolean0 = fBCachedFetcher0.first();
      assertEquals(0, fBResultSet0.getRow());
      assertEquals(1, fBCachedFetcher0.getRowNum());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.5247073930301436
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      LinkedList<byte[][]> linkedList0 = new LinkedList<byte[][]>();
      FBLongVarCharField[] fBLongVarCharFieldArray0 = new FBLongVarCharField[7];
      FBLongVarCharField fBLongVarCharField0 = mock(FBLongVarCharField.class, new ViolatedAssumptionAnswer());
      fBLongVarCharFieldArray0[0] = fBLongVarCharField0;
      linkedList0.add((byte[][]) null);
      fBLongVarCharFieldArray0[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray0[6] = fBLongVarCharField0;
      FBLongVarCharField[] fBLongVarCharFieldArray1 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray1[0] = fBLongVarCharField0;
      linkedList0.removeLastOccurrence(fBLongVarCharField0);
      linkedList0.spliterator();
      FBLongVarCharField[] fBLongVarCharFieldArray2 = new FBLongVarCharField[8];
      fBLongVarCharFieldArray2[0] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[1] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[2] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[3] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[4] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[5] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[6] = fBLongVarCharField0;
      fBLongVarCharFieldArray2[7] = fBLongVarCharField0;
      linkedList0.toArray(fBLongVarCharFieldArray2);
      LinkedList<byte[][]> linkedList1 = new LinkedList<byte[][]>();
      FBCachedFetcher fBCachedFetcher0 = new FBCachedFetcher(linkedList0, (FBObjectListener.FetcherListener) null);
      // Undeclared exception!
      try { 
        fBCachedFetcher0.first();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.firebirdsql.jdbc.FBCachedFetcher", e);
      }
  }
}
