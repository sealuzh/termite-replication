/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 02:00:29 GMT 2019
 */

package org.quickserver.net.server;

import org.junit.Test;
import static org.junit.Assert.*;
import java.net.Proxy;
import java.net.SocketAddress;
import java.nio.channels.SocketChannel;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.net.MockSocket;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.EvoSuiteLocalAddress;
import org.evosuite.runtime.testdata.EvoSuiteRemoteAddress;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.evosuite.runtime.testdata.NetworkHandling;
import org.junit.runner.RunWith;
import org.quickserver.net.qsadmin.CommandHandler;
import org.quickserver.net.qsadmin.Data;
import org.quickserver.net.server.Authenticator;
import org.quickserver.net.server.ClientAuthenticationHandler;
import org.quickserver.net.server.ClientBinaryHandler;
import org.quickserver.net.server.ClientCommandHandler;
import org.quickserver.net.server.ClientData;
import org.quickserver.net.server.ClientEvent;
import org.quickserver.net.server.ClientEventHandler;
import org.quickserver.net.server.ClientExtendedEventHandler;
import org.quickserver.net.server.ClientObjectHandler;
import org.quickserver.net.server.ClientWriteHandler;
import org.quickserver.net.server.QuickServer;
import org.quickserver.net.server.TheClient;
import org.quickserver.net.server.impl.BlockingClientHandler;
import org.quickserver.net.server.impl.DefaultClientEventHandler;
import org.quickserver.util.xmlreader.AccessConstraintConfig;
import org.quickserver.util.xmlreader.QuickServerConfig;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TheClient_ESTest extends TheClient_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.880653893488026
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("RAHL]#&6[l6Tj");
      QuickServerConfig quickServerConfig0 = quickServer0.getConfig();
      quickServerConfig0.getApplicationConfiguration();
      quickServerConfig0.setServerBanner("RAHL]#&6[l6Tj");
      quickServerConfig0.toXML("RAHL]#&6[l6Tj");
      quickServer0.initServer(quickServerConfig0);
      theClient0.setServer(quickServer0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getServer();
      theClient0.toString();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getAuthenticator();
      theClient0.getAuthenticator();
      theClient0.getClientBinaryHandler();
      QuickServer quickServer1 = new QuickServer("RAHL]#&6[l6Tj");
      assertEquals(100, quickServer1.getRawCommunicationMaxLength());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=3.434635057597813
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient0.getClientEventHandler();
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient1.getServer();
      ClientEvent clientEvent0 = ClientEvent.CLOSE_CON;
      theClient0.setMaxAuthTryMsg("");
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getMaxAuthTryMsg();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.getClientData();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      TheClient theClient2 = new TheClient();
      theClient2.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getTrusted();
      theClient2.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient2.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient1.getMaxAuthTry();
      theClient1.setMaxAuthTryMsg("");
      theClient0.getClientBinaryHandler();
      System.setCurrentTimeMillis(2611L);
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getLocalPort();
      mockSocket0.setPerformancePreferences((-300), (-300), 0);
      theClient0.setSocket(mockSocket0);
      theClient0.getSocket();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      assertTrue(theClient0.getCommunicationLogging());
      
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      Data data0 = new Data();
      theClient0.setCommunicationLogging(false);
      Data data1 = new Data();
      Data data2 = new Data();
      Data data3 = new Data();
      data3.setPassword((byte[]) null);
      NetworkHandling.openRemoteTcpServer((EvoSuiteRemoteAddress) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.8408398156653452
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket(proxy0);
      mockSocket0.getRemoteSocketAddress();
      mockSocket0.bind((SocketAddress) null);
      theClient0.setSocket(mockSocket0);
      MockSocket mockSocket1 = new MockSocket();
      theClient0.getSocket();
      theClient0.getSocket();
      String string0 = theClient0.toString();
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient Socket[unconnected], Event: (ClientEvent-Run Blocking)}", string0);
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      TheClient theClient0 = new TheClient();
      QuickServer quickServer0 = new QuickServer("");
      quickServer0.getAccessConstraintConfig();
      quickServer0.setAccessConstraintConfig((AccessConstraintConfig) null);
      theClient0.setServer(quickServer0);
      theClient0.getServer();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(100L);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Proxy proxy1 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket();
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg(")Q;An&d=4%X*");
      theClient0.setMaxAuthTryMsg(")Q;An&d=4%X*");
      theClient0.getMaxAuthTryMsg();
      theClient0.setTimeoutMsg("9v7R'");
      System.setCurrentTimeMillis((-3367L));
      theClient0.toString();
      System.setCurrentTimeMillis((-3367L));
  }

  /**
  //Test case number: 7
  /*Coverage entropy=3.0555153951973866
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      TheClient theClient1 = new TheClient();
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientBinaryHandler();
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeout((-12));
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "");
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.getClientCommandHandler();
      theClient0.getClientObjectHandler();
      theClient0.getClientBinaryHandler();
      theClient0.getServer();
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      assertEquals((-12), theClient0.getTimeout());
      
      theClient1.getClientExtendedEventHandler();
      theClient1.getClientBinaryHandler();
      theClient1.getClientWriteHandler();
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.5500297769739535
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler(commandHandler0);
      theClient0.setTimeout(0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientWriteHandler();
      theClient0.getClientObjectHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertEquals(0, theClient0.getTimeout());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 9
  /*Coverage entropy=3.26147761112867
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.toString();
      theClient0.setMaxConnectionMsg("{TheClient no socket, Event: (ClientEvent-Run Blocking)}");
      Data data0 = new Data();
      theClient0.setClientData(data0);
      theClient0.toString();
      QuickServer quickServer0 = new QuickServer();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientData();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      String string0 = theClient0.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      TheClient theClient1 = new TheClient();
      CommandHandler commandHandler0 = new CommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient1.setClientEventHandler((ClientEventHandler) null);
      theClient1.getClientBinaryHandler();
      FileSystemHandling.shouldAllThrowIOExceptions();
      boolean boolean0 = theClient0.getCommunicationLogging();
      assertTrue(boolean0);
      
      theClient1.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient1.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientExtendedEventHandler();
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.6709087878625355
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setMaxAuthTry((-429));
      theClient0.getMaxAuthTry();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientWriteHandler();
      assertEquals((-429), theClient0.getMaxAuthTry());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=3.3787438509194208
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      ClientEvent clientEvent0 = ClientEvent.READ;
      theClient0.setClientEvent((ClientEvent) null);
      TheClient theClient1 = new TheClient();
      theClient1.getServer();
      theClient0.getClientEvent();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient1.getClientData();
      theClient1.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      String string0 = theClient1.toString();
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
      
      TheClient theClient2 = new TheClient();
      theClient2.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientBinaryHandler();
      theClient2.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient2.getClientObjectHandler();
      theClient1.setClientObjectHandler((ClientObjectHandler) null);
      assertTrue(theClient1.getCommunicationLogging());
      assertFalse(theClient1.getTrusted());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Proxy proxy1 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy1);
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg("");
      theClient0.getMaxConnectionMsg();
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 13
  /*Coverage entropy=3.5354315286325124
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setTimeout(0);
      theClient0.getClientEventHandler();
      theClient0.setClientEventHandler((ClientEventHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getServer();
      theClient0.getClientWriteHandler();
      theClient0.toString();
      theClient0.getClientBinaryHandler();
      theClient0.getClientEventHandler();
      theClient0.setTrusted(true);
      theClient0.getTrusted();
      QuickServer quickServer0 = new QuickServer("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", 0);
      theClient0.setServer(quickServer0);
      TheClient theClient1 = new TheClient();
      theClient1.getClientWriteHandler();
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      BlockingClientHandler blockingClientHandler0 = new BlockingClientHandler();
      BlockingClientHandler blockingClientHandler1 = new BlockingClientHandler();
      blockingClientHandler1.getClientData();
      assertEquals("<ClientHandler-Pool#-1-ID:2>", blockingClientHandler1.getName());
      
      theClient0.setClientData((ClientData) null);
      theClient1.getClientEvent();
      theClient0.getClientEvent();
      theClient0.getClientExtendedEventHandler();
      theClient0.getClientObjectHandler();
      theClient1.getClientExtendedEventHandler();
      assertTrue(theClient1.getCommunicationLogging());
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      CommandHandler commandHandler0 = new CommandHandler();
      CommandHandler commandHandler1 = new CommandHandler();
      TheClient theClient0 = new TheClient();
      theClient0.setClientEventHandler(commandHandler0);
      ClientEventHandler clientEventHandler0 = theClient0.getClientEventHandler();
      CommandHandler commandHandler2 = new CommandHandler();
      assertFalse(commandHandler2.equals((Object)clientEventHandler0));
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.0506636431758234
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.getClientObjectHandler();
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientObjectHandler();
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientObjectHandler((ClientObjectHandler) null);
      theClient0.getClientEventHandler();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.setTimeoutMsg("");
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getTimeoutMsg();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeoutMsg("{TheClient ");
      theClient0.getTimeoutMsg();
      assertFalse(theClient0.getTrusted());
      assertTrue(theClient0.getCommunicationLogging());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.555632017870312
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.setClientAuthenticationHandler(authenticator0);
      theClient0.getClientExtendedEventHandler();
      DefaultClientEventHandler defaultClientEventHandler0 = new DefaultClientEventHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientEventHandler(defaultClientEventHandler0);
      theClient0.getClientBinaryHandler();
      theClient0.getClientWriteHandler();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      MockSocket mockSocket0 = new MockSocket();
      mockSocket0.getChannel();
      theClient0.setSocketChannel((SocketChannel) null);
      SocketChannel socketChannel0 = mockSocket0.getChannel();
      assertNull(socketChannel0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=3.260960815263037
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      theClient0.setTimeout(1);
      theClient0.getClientBinaryHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.getTimeout();
      theClient0.getClientExtendedEventHandler();
      theClient0.setClientBinaryHandler((ClientBinaryHandler) null);
      theClient0.getClientAuthenticationHandler();
      theClient0.setClientAuthenticationHandler((ClientAuthenticationHandler) null);
      theClient0.setClientExtendedEventHandler((ClientExtendedEventHandler) null);
      theClient0.getClientWriteHandler();
      theClient0.setClientCommandHandler((ClientCommandHandler) null);
      theClient0.setClientWriteHandler((ClientWriteHandler) null);
      theClient0.getClientCommandHandler();
      theClient0.getClientCommandHandler();
      theClient0.setCommunicationLogging(true);
      theClient0.getClientBinaryHandler();
      theClient0.getClientObjectHandler();
      theClient0.getAuthenticator();
      assertEquals(1, theClient0.getTimeout());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      TheClient theClient0 = new TheClient();
      NetworkHandling.sendMessageOnTcp((EvoSuiteLocalAddress) null, "-ENeY8:<N19v");
      theClient0.setMaxAuthTry(60000);
      int int0 = theClient0.getMaxAuthTry();
      assertEquals(60000, int0);
  }

  /**
  //Test case number: 21
  /*Coverage entropy=2.063983366979555
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Proxy proxy1 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy1);
      TheClient theClient0 = new TheClient();
      theClient0.setMaxConnectionMsg(")Q;An&d=4%X*");
      theClient0.setMaxAuthTryMsg(")Q;An&d=4%X*");
      theClient0.getMaxConnectionMsg();
      System.setCurrentTimeMillis((-3367L));
      String string0 = theClient0.toString();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals("{TheClient no socket, Event: (ClientEvent-Run Blocking)}", string0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Data data0 = new Data();
      Data data1 = new Data();
      Data data2 = new Data();
      Data data3 = new Data();
      Data data4 = new Data();
      Data data5 = new Data();
      Integer integer0 = new Integer(0);
      TheClient theClient0 = new TheClient();
      theClient0.getSocket();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Proxy proxy1 = Proxy.NO_PROXY;
      MockSocket mockSocket0 = new MockSocket(proxy1);
      TheClient theClient0 = new TheClient();
      theClient0.getMaxAuthTryMsg();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      Proxy proxy1 = Proxy.NO_PROXY;
      TheClient theClient0 = new TheClient();
      theClient0.getMaxConnectionMsg();
      System.setCurrentTimeMillis((-3367L));
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      TheClient theClient0 = new TheClient();
      int int0 = theClient0.getTimeout();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
      assertEquals(0, int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Proxy proxy0 = Proxy.NO_PROXY;
      TheClient theClient0 = new TheClient();
      theClient0.getClientData();
      theClient0.setClientData((ClientData) null);
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      org.quickserver.net.qsadmin.Authenticator authenticator0 = new org.quickserver.net.qsadmin.Authenticator();
      TheClient theClient0 = new TheClient();
      theClient0.getAuthenticator();
      theClient0.setAuthenticator((Authenticator) null);
      theClient0.getAuthenticator();
      assertTrue(theClient0.getCommunicationLogging());
      assertFalse(theClient0.getTrusted());
  }
}
