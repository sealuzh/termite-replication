/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:01:03 GMT 2019
 */

package org.quickserver.util.xmlreader;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import org.quickserver.util.xmlreader.AdvancedSettings;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class AdvancedSettings_ESTest extends AdvancedSettings_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=3.616692132626582
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-324));
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setMaxThreadsForNioWrite(0);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime(0);
      advancedSettings0.getCharset();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("");
      advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      
      advancedSettings0.setCharset("ISO-8859-1");
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("T");
      advancedSettings0.setClientIdentifier("\t<client-identifier>");
      advancedSettings0.setClientSocketTrafficClass("ek(e|l?zd|3h.9gW");
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals("\t<client-identifier>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("");
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("", string0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.495914456064185
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-593));
      advancedSettings0.setPerformancePreferencesLatency((-593));
      advancedSettings0.setClientSocketTcpNoDelay(false);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setByteBufferSize(2237);
      advancedSettings0.getPerformancePreferencesLatency();
      String string0 = "</client-socket-tcp-no-delay>\n";
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("</client-socket-tcp-no-delay>\n");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // </client-socket-tcp-no-delay>
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=2.922496759508184
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setPerformancePreferencesBandwidth((-2324));
      advancedSettings0.setClientSocketReceiveBufferSize(21);
      advancedSettings0.setPerformancePreferencesLatency(178);
      advancedSettings0.setPerformancePreferencesLatency(21);
      advancedSettings0.setPerformancePreferencesConnectionTime((-3026));
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setQSObjectPoolMaker("WJvxw)EHS&c\"");
      advancedSettings0.getSocketLinger();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.getPerformancePreferencesLatency();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("WJvxw)EHS&c\"");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // WJvxw)EHS&c\"
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=3.69992335714857
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-737));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(2);
      advancedSettings0.setByteBufferSize((-1688));
      advancedSettings0.setByteBufferSize((-737));
      advancedSettings0.setClientIdentifier("fMkRK'k");
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize(1705);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesBandwidth(1705);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize((-1688));
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals(0, advancedSettings0.getClientSocketReceiveBufferSize());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.5821447072671853
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-324));
      advancedSettings0.setPerformancePreferencesConnectionTime((-324));
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("D|ROX)*JKd_23^6");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.setPerformancePreferencesConnectionTime((-324));
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setClientIdentifier("L25_sU$4'n=Z");
      assertEquals((-324), advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.253297930766516
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.setPerformancePreferencesLatency(47);
      advancedSettings0.setPerformancePreferencesBandwidth(915);
      advancedSettings0.setPerformancePreferencesConnectionTime(915);
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(915, int0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset((String) null);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
  }

  /**
  //Test case number: 10
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog((-1222));
      advancedSettings0.getBacklog();
      int int0 = advancedSettings0.getBacklog();
      assertEquals(0, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.688656384655456
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setSocketLinger(2560);
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setClientSocketReceiveBufferSize(2560);
      advancedSettings0.setCharset("");
      advancedSettings0.setClientSocketSendBufferSize(2560);
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setCharset("");
      advancedSettings0.setByteBufferSize(2560);
      advancedSettings0.setSocketLinger(2560);
      advancedSettings0.setClientIdentifier("");
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("&%b mPhUu~kd'.Y]6");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // &%b mPhUu~kd'.Y]6
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      // Undeclared exception!
      try { 
        advancedSettings0.setCharset("org.quickserver.utl.pool.MakeQSObjectPool");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // org.quickserver.utl.pool.MakeQSObjectPool
         //
         verifyException("org.quickserver.util.xmlreader.AdvancedSettings", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.2584261358947213
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize((-622));
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getClientSocketReceiveBufferSize();
      int int0 = advancedSettings0.getByteBufferSize();
      assertEquals((-622), advancedSettings0.getClientSocketSendBufferSize());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 14
  /*Coverage entropy=3.3841954627973854
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setClientSocketSendBufferSize(665);
      advancedSettings0.setClientSocketSendBufferSize(824);
      advancedSettings0.toXML("\t<charset>");
      assertEquals(824, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=3.3278778220435874
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(654);
      advancedSettings0.setClientSocketSendBufferSize(824);
      advancedSettings0.toXML("\t<socket-linger>");
      assertEquals(824, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(870);
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog(2560);
      assertEquals(2560, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 17
  /*Coverage entropy=3.3834953786778534
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(22);
      advancedSettings0.setClientSocketReceiveBufferSize(22);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.toXML("U");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.toXML("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      assertEquals(22, advancedSettings0.getClientSocketReceiveBufferSize());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketTrafficClass();
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getMaxThreadsForNioWrite();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, int0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      int int0 = advancedSettings0.getPerformancePreferencesBandwidth();
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, int0);
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=3.486238310680613
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesBandwidth(26);
      advancedSettings0.setPerformancePreferencesLatency(1273);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setPerformancePreferencesBandwidth(1273);
      advancedSettings0.setPerformancePreferencesConnectionTime(26);
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getPerformancePreferencesBandwidth();
      advancedSettings0.setSocketLinger(65536);
      advancedSettings0.setPerformancePreferencesConnectionTime(10);
      advancedSettings0.getClientIdentifier();
      advancedSettings0.setPerformancePreferencesLatency(98);
      String string0 = advancedSettings0.toXML("r6aXD>I(iUFhPg");
      advancedSettings0.toXML(string0);
      assertEquals(98, advancedSettings0.getPerformancePreferencesLatency());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=3.69992335714857
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setPerformancePreferencesConnectionTime((-737));
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize(2);
      advancedSettings0.setByteBufferSize((-1688));
      advancedSettings0.setByteBufferSize((-737));
      advancedSettings0.setClientIdentifier("fMkRK'k");
      advancedSettings0.toXML("");
      advancedSettings0.setClientSocketReceiveBufferSize(1705);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setPerformancePreferencesBandwidth(1705);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getUseDirectByteBuffer();
      advancedSettings0.getCharset();
      advancedSettings0.getPerformancePreferencesLatency();
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setByteBufferSize(1);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.setClientSocketSendBufferSize((-1688));
      advancedSettings0.getCharset();
      int int0 = advancedSettings0.getByteBufferSize();
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(1, int0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=3.644728153819131
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTcpNoDelay(true);
      advancedSettings0.setClientSocketReceiveBufferSize(6);
      advancedSettings0.setMaxThreadsForNioWrite((-6));
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setQSObjectPoolMaker("");
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("I+pYy]#^u");
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setMaxThreadsForNioWrite((-6));
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.getClientSocketTcpNoDelay();
      advancedSettings0.getClientSocketTrafficClass();
      advancedSettings0.getMaxThreadsForNioWrite();
      advancedSettings0.toXML("");
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.toXML("");
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>I+pYy]#^u</client-identifier>\n\t<qsobject-pool-maker></qsobject-pool-maker>\n\t<max-threads-for-nio-write>-6</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n\t<client-socket-receive-buffer-size>6</client-socket-receive-buffer-size>\n</advanced-settings>\n");
      advancedSettings0.getClientIdentifier();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>I+pYy]#^u</client-identifier>\n\t<qsobject-pool-maker></qsobject-pool-maker>\n\t<max-threads-for-nio-write>-6</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n\t<client-socket-receive-buffer-size>6</client-socket-receive-buffer-size>\n</advanced-settings>\n");
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>true</debug-non-blocking-mode>\n\t<client-identifier>I+pYy]#^u</client-identifier>\n\t<qsobject-pool-maker></qsobject-pool-maker>\n\t<max-threads-for-nio-write>-6</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>true</client-socket-tcp-no-delay>\n\t<client-socket-traffic-class></client-socket-traffic-class>\n\t<client-socket-receive-buffer-size>6</client-socket-receive-buffer-size>\n</advanced-settings>\n", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getUseDirectByteBuffer();
      assertTrue(boolean0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1915));
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-1915), int0);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=3.5727839993038435
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketSendBufferSize(2560);
      advancedSettings0.getClientSocketReceiveBufferSize();
      advancedSettings0.setClientSocketReceiveBufferSize(10);
      advancedSettings0.setByteBufferSize(0);
      advancedSettings0.setClientSocketReceiveBufferSize(0);
      advancedSettings0.setByteBufferSize(2560);
      advancedSettings0.setClientSocketTrafficClass("*VY?:NO.ec@hpPT9");
      advancedSettings0.setBacklog(146);
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.getByteBufferSize();
      advancedSettings0.setClientIdentifier("3@C_;-rJVM;[}FmA1@");
      advancedSettings0.toXML("\t<client-socket-receive-buffer-size>");
      assertEquals("3@C_;-rJVM;[}FmA1@", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0067795890632527
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientIdentifier("org.quickserver.net.server.impl.OptimisticClientIdentifier");
      advancedSettings0.setClientIdentifier((String) null);
      advancedSettings0.setClientIdentifier("\t<client-identifier>");
      assertEquals("\t<client-identifier>", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setClientSocketReceiveBufferSize((-1912));
      int int0 = advancedSettings0.getClientSocketReceiveBufferSize();
      assertEquals((-1912), int0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.2623477045221723
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getClientSocketSendBufferSize();
      advancedSettings0.setUseDirectByteBuffer(true);
      advancedSettings0.setByteBufferSize((-599));
      advancedSettings0.setByteBufferSize((-599));
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.getSocketLinger();
      int int0 = advancedSettings0.getByteBufferSize();
      assertFalse(advancedSettings0.getUseDirectByteBuffer());
      assertEquals(65536, int0);
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      boolean boolean0 = advancedSettings0.getClientSocketTcpNoDelay();
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(boolean0);
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
  }

  /**
  //Test case number: 31
  /*Coverage entropy=3.129253408046631
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker("\t<qsobject-pool-maker>");
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientSocketSendBufferSize(0);
      advancedSettings0.setClientSocketTrafficClass("");
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setDebugNonBlockingMode(false);
      advancedSettings0.setUseDirectByteBuffer(false);
      advancedSettings0.setSocketLinger(0);
      advancedSettings0.setPerformancePreferencesLatency((-853));
      advancedSettings0.setPerformancePreferencesBandwidth(921);
      advancedSettings0.setPerformancePreferencesLatency(1);
      advancedSettings0.getSocketLinger();
      advancedSettings0.setSocketLinger(3);
      advancedSettings0.setClientSocketSendBufferSize(3711);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.getPerformancePreferencesConnectionTime();
      advancedSettings0.getDebugNonBlockingMode();
      advancedSettings0.setDebugNonBlockingMode(true);
      advancedSettings0.setClientSocketTrafficClass("\t<qsobject-pool-maker>");
      advancedSettings0.setSocketLinger((-565));
      advancedSettings0.getQSObjectPoolMaker();
      advancedSettings0.setClientSocketTrafficClass("\t<client-socket-send-buffer-size>");
      assertEquals(3711, advancedSettings0.getClientSocketSendBufferSize());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.getBacklog();
      advancedSettings0.setBacklog(0);
      advancedSettings0.setClientIdentifier("");
      advancedSettings0.setClientIdentifier("\t<client-identifier>");
      advancedSettings0.setClientIdentifier("=dwtHxDxN");
      assertEquals("=dwtHxDxN", advancedSettings0.getClientIdentifier());
  }

  /**
  //Test case number: 33
  /*Coverage entropy=1.4841652152843623
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setQSObjectPoolMaker((String) null);
      advancedSettings0.getQSObjectPoolMaker();
      String string0 = advancedSettings0.getQSObjectPoolMaker();
      assertEquals(0, advancedSettings0.getPerformancePreferencesBandwidth());
      assertEquals("org.quickserver.net.server.impl.OptimisticClientIdentifier", advancedSettings0.getClientIdentifier());
      assertEquals(10, advancedSettings0.getMaxThreadsForNioWrite());
      assertEquals((-1), advancedSettings0.getSocketLinger());
      assertEquals(65536, advancedSettings0.getByteBufferSize());
      assertEquals("ISO-8859-1", advancedSettings0.getCharset());
      assertEquals(0, advancedSettings0.getBacklog());
      assertFalse(advancedSettings0.getClientSocketTcpNoDelay());
      assertEquals("org.quickserver.util.pool.MakeQSObjectPool", string0);
      assertEquals(0, advancedSettings0.getPerformancePreferencesConnectionTime());
      assertEquals(0, advancedSettings0.getPerformancePreferencesLatency());
      assertNotNull(string0);
      assertTrue(advancedSettings0.getUseDirectByteBuffer());
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      advancedSettings0.setBacklog(8);
      assertEquals(8, advancedSettings0.getBacklog());
  }

  /**
  //Test case number: 35
  /*Coverage entropy=3.266952855425168
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      AdvancedSettings advancedSettings0 = new AdvancedSettings();
      String string0 = advancedSettings0.toXML((String) null);
      assertEquals("<advanced-settings>\n\t<charset>ISO-8859-1</charset>\n\t<use-direct-byte-buffer>true</use-direct-byte-buffer>\n\t<byte-buffer-size>65536</byte-buffer-size>\n\t<backlog>0</backlog>\n\t<socket-linger>-1</socket-linger>\n\t<debug-non-blocking-mode>false</debug-non-blocking-mode>\n\t<client-identifier>org.quickserver.net.server.impl.OptimisticClientIdentifier</client-identifier>\n\t<qsobject-pool-maker>org.quickserver.util.pool.MakeQSObjectPool</qsobject-pool-maker>\n\t<max-threads-for-nio-write>10</max-threads-for-nio-write>\n\t<performance-preferences-connection-time>0</performance-preferences-connection-time>\n\t<performance-preferences-latency>0</performance-preferences-latency>\n\t<performance-preferences-bandwidth>0</performance-preferences-bandwidth>\n\t<client-socket-tcp-no-delay>false</client-socket-tcp-no-delay>\n</advanced-settings>\n", string0);
  }
}
