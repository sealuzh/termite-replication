/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:34:24 GMT 2019
 */

package net.sourceforge.squirrel_sql.plugins.dbcopy.util;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.gargoylesoftware.base.resource.jdbc.ConnectionWrapper;
import java.awt.AWTEventMulticaster;
import java.awt.Graphics;
import java.awt.event.ComponentListener;
import java.awt.event.MouseListener;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.beans.PropertyChangeListenerProxy;
import java.io.File;
import java.io.PrintWriter;
import java.net.URI;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverPropertyInfo;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.PriorityQueue;
import java.util.Vector;
import java.util.concurrent.LinkedBlockingQueue;
import javax.swing.Action;
import javax.swing.Box;
import javax.swing.DefaultListCellRenderer;
import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JComponent;
import javax.swing.JInternalFrame;
import javax.swing.JMenu;
import javax.swing.JPopupMenu;
import javax.swing.JRadioButtonMenuItem;
import javax.swing.JSpinner;
import javax.swing.JToggleButton;
import javax.swing.JToolTip;
import javax.swing.SpinnerNumberModel;
import javax.swing.plaf.basic.BasicLabelUI;
import javax.swing.plaf.basic.BasicRootPaneUI;
import javax.swing.plaf.metal.MetalSplitPaneUI;
import javax.swing.table.DefaultTableModel;
import javax.swing.text.DefaultCaret;
import javax.swing.text.DefaultEditorKit;
import javax.swing.text.StyledEditorKit;
import javax.swing.text.TextAction;
import javax.swing.tree.DefaultTreeCellRenderer;
import net.sourceforge.squirrel_sql.client.IApplication;
import net.sourceforge.squirrel_sql.client.gui.db.SQLAlias;
import net.sourceforge.squirrel_sql.client.session.ISession;
import net.sourceforge.squirrel_sql.client.session.schemainfo.SchemaInfo;
import net.sourceforge.squirrel_sql.client.util.ApplicationFileWrappersImpl;
import net.sourceforge.squirrel_sql.client.util.ApplicationFiles;
import net.sourceforge.squirrel_sql.fw.id.IntegerIdentifier;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectType;
import net.sourceforge.squirrel_sql.fw.sql.ForeignKeyInfo;
import net.sourceforge.squirrel_sql.fw.sql.IDatabaseObjectInfo;
import net.sourceforge.squirrel_sql.fw.sql.ISQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.ISQLDatabaseMetaData;
import net.sourceforge.squirrel_sql.fw.sql.ITableInfo;
import net.sourceforge.squirrel_sql.fw.sql.SQLConnection;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriver;
import net.sourceforge.squirrel_sql.fw.sql.SQLDriverPropertyCollection;
import net.sourceforge.squirrel_sql.fw.sql.TableColumnInfo;
import net.sourceforge.squirrel_sql.fw.sql.TableInfo;
import net.sourceforge.squirrel_sql.fw.util.FileWrapper;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperFactoryImpl;
import net.sourceforge.squirrel_sql.fw.util.FileWrapperImpl;
import net.sourceforge.squirrel_sql.plugins.dbcopy.DBCopyPlugin;
import net.sourceforge.squirrel_sql.plugins.dbcopy.SessionInfoProvider;
import net.sourceforge.squirrel_sql.plugins.dbcopy.prefs.DBCopyPreferenceBean;
import net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jfree.data.time.Quarter;
import org.junit.runner.RunWith;
import sun.swing.ImageIconUIResource;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DBUtil_ESTest extends DBUtil_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.4682921994113465
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(" that matched ", "No resource found for key ", " that matched ", "Nq5*Uuc9w|6Y7}9d1", (-1), "m4NxluY :3C)3?Y", 493, (-163), 493, (-1), "Sny4)D!7jC])#V]", " that matched ", 493, (-163), (String) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      databaseObjectType0.getIcon();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType.createNewDatabaseObjectType("Nq5*Uuc9w|6Y7}9d1");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.UDT;
      DatabaseObjectType databaseObjectType5 = DatabaseObjectType.SEQUENCE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType.createNewDatabaseObjectType("m4NxluY :3C)3?Y");
      DatabaseObjectType.createNewDatabaseObjectType("Application.error.ladsqlhistory");
      DatabaseObjectType databaseObjectType6 = DatabaseObjectType.USER;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      dBCopyPlugin0.setDestDatabaseObject(tableColumnInfo0);
      DBUtil.validateColumnNames((ITableInfo) null, dBCopyPlugin0);
      // Undeclared exception!
      try { 
        DBUtil.getInsertSQL(dBCopyPlugin0, "Application.error.ladsqlhistory", (ITableInfo) null, 493);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getPluginsDirectory();
      applicationFiles0.getExecutionLogFile();
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setClientVersion("Yx!L&A@XJi");
      DBCopyPreferenceBean dBCopyPreferenceBean1 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setSelectFetchSize(408);
      dBCopyPreferenceBean1.setAutoCommitEnabled(false);
      DBCopyPreferenceBean dBCopyPreferenceBean2 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean1.setSelectFetchSize((-7));
      dBCopyPreferenceBean1.setCopyForeignKeys(false);
      DBCopyPreferenceBean dBCopyPreferenceBean3 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean3.setCopyForeignKeys(false);
      DBUtil.typesAreEquivalent(16, (-7));
      int int0 = (-1679);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      schemaInfo0.getSQLDatabaseMetaData();
      TableColumnInfo tableColumnInfo0 = null;
      try {
        tableColumnInfo0 = new TableColumnInfo("Yx!L&A@XJi", "DBUtil.error.nocolumns", "DBUtil.error.nocolumns", "Yx!L&A@XJi", 5, "DBUtil.error.nocolumns", 408, 16, (-320), 16, "Dialect does not support identity key generation", ">G7UX^/5;p#c<sJi", 2, 408, "DBUtil.error.nocolumns", (ISQLDatabaseMetaData) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      File file0 = applicationFiles0.getLicenceFile();
      MockFile.createTempFile("mHa", "Contours only support one series", file0);
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      MockFile mockFile0 = new MockFile("mHa", "mHa");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql/DTproperties.xml/mHa0mHa");
      FileSystemHandling.setPermissions(evoSuiteFile0, true, false, false);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)fileWrapperFactoryImpl0.create(file0);
      MockFile mockFile1 = new MockFile("mHa");
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      MockFile mockFile2 = (MockFile)applicationFiles3.getJDBCDebugLogFile();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      applicationFileWrappersImpl0.getWelcomeFile();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)applicationFileWrappersImpl0.getDTPropertiesFile();
      FileWrapperImpl.createTempFile("mHa", "mHa", (FileWrapper) fileWrapperImpl1);
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl("mHa");
      applicationFiles3.getDatabaseDriversFile();
      fileWrapperFactoryImpl0.create((File) mockFile2);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "mHa");
      fileWrapperFactoryImpl0.createTempFile("gjaX", "`A-yxRN?D3d}!:]7[", (FileWrapper) fileWrapperImpl2);
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(fileWrapperImpl0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      DBUtil.validateColumnNames((ITableInfo) null, (SessionInfoProvider) null);
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getDisabledIcon();
      DatabaseObjectType.createNewDatabaseObjectType("~ EXo,5", (Icon) null);
      dBCopyPlugin0.getSourceSession();
      Integer integer0 = new Integer(727);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("tU");
      Integer integer1 = new Integer(32);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-71));
      SQLDriver sQLDriver0 = new SQLDriver(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      MockFile mockFile0 = new MockFile("~ EXo,5");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, "tU", "q>a-#p?");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        DBUtil.getPKColumnString(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      SQLAlias sQLAlias0 = new SQLAlias();
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(254, 254, 254, 254);
      JSpinner jSpinner0 = new JSpinner(spinnerNumberModel0);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      jSpinner0.getBackground();
      jSpinner0.firePropertyChange("v?sVwO.Zq?9[nj#W'", (short)7, (short)7);
      JComponent.isLightweightComponent(jSpinner_NumberEditor0);
      jSpinner_NumberEditor0.grabFocus();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("R%'m,fMSirl2^M3C", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "replaceDistinctDataType: Unexpected exception - ");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SCHEMA;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      IDatabaseObjectInfo iDatabaseObjectInfo0 = DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
      assertSame(databaseObjectInfo0, iDatabaseObjectInfo0);
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setClientVersion((String) null);
      DBCopyPreferenceBean dBCopyPreferenceBean1 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setSelectFetchSize(2006);
      dBCopyPreferenceBean1.setAutoCommitEnabled(true);
      DBCopyPreferenceBean dBCopyPreferenceBean2 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean1.setSelectFetchSize(16);
      dBCopyPreferenceBean2.setCopyForeignKeys(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      boolean boolean0 = DBUtil.typesAreEquivalent(16, (-1862));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("q", basicLabelUI0);
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      JInternalFrame jInternalFrame0 = new JInternalFrame("q", false, true, false, true);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      JToggleButton jToggleButton0 = new JToggleButton(icon0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "q", "q");
      FileSystemHandling.shouldAllThrowIOExceptions();
      // Undeclared exception!
      try { 
        DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, (-2183));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      JMenu jMenu0 = new JMenu(styledEditorKit_BoldAction0);
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      dBCopyPreferenceBean0.setAppendRecordsToExisting(false);
      dBCopyPreferenceBean0.setClientVersion("6K}M?&iAHs]a2d");
      dBCopyPreferenceBean0.setSelectFetchSize(254);
      dBCopyPreferenceBean0.setAutoCommitEnabled(true);
      dBCopyPreferenceBean0.setSelectFetchSize((-1474));
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      boolean boolean0 = DBUtil.typesAreEquivalent(16, 254);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener0, (ComponentListener) null);
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (byte)18);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(16, 16, 16, 16);
      JSpinner jSpinner0 = new JSpinner();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      styledEditorKit_BoldAction0.getPropertyChangeListeners();
      jSpinner0.print((Graphics) null);
      Action[] actionArray0 = new Action[5];
      actionArray0[0] = (Action) styledEditorKit_BoldAction0;
      actionArray0[1] = (Action) styledEditorKit_BoldAction0;
      actionArray0[2] = (Action) styledEditorKit_BoldAction0;
      actionArray0[0] = (Action) styledEditorKit_BoldAction0;
      actionArray0[4] = (Action) styledEditorKit_BoldAction0;
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = DBUtil.typesAreEquivalent((-7), (-7));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCopyPrimaryKeys(true);
      dBCopyPreferenceBean0.setClientVersion("Wa`");
      DBCopyPreferenceBean dBCopyPreferenceBean1 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean1.setCopyForeignKeys(false);
      dBCopyPreferenceBean0.setCopyPrimaryKeys(true);
      dBCopyPreferenceBean0.setSelectFetchSize(2962);
      dBCopyPreferenceBean1.setUseTruncate(true);
      dBCopyPreferenceBean1.setCopyForeignKeys(true);
      dBCopyPreferenceBean1.setClientVersion("Wa`");
      dBCopyPreferenceBean0.setSelectFetchSize(592);
      dBCopyPreferenceBean1.setAutoCommitEnabled(true);
      dBCopyPreferenceBean1.setSelectFetchSize(592);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      dBCopyPreferenceBean1.setCopyForeignKeys(true);
      DBUtil.typesAreEquivalent(2, 2);
      System.setCurrentTimeMillis(2962);
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("`i8#ptZ+gG", basicLabelUI0);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedAction0.removePropertyChangeListener(propertyChangeListenerProxy0);
      JMenu jMenu0 = new JMenu(defaultEditorKit_DefaultKeyTypedAction0);
      defaultEditorKit_DefaultKeyTypedAction0.addPropertyChangeListener(basicLabelUI0);
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction1 = new StyledEditorKit.BoldAction();
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      defaultEditorKit_DefaultKeyTypedAction0.getKeys();
      defaultEditorKit_DefaultKeyTypedAction0.isEnabled();
      JMenu jMenu1 = new JMenu("Length functon is null for dialect=");
      jMenu0.getPopupMenu();
      jPopupMenu0.add((Action) styledEditorKit_BoldAction0);
      jMenu0.getPopupMenu();
      jPopupMenu0.resetKeyboardActions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBUtil.typesAreEquivalent(2, 377);
      System.setCurrentTimeMillis(2);
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JMenu jMenu0 = new JMenu("Length functUn is null for dialect=");
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction1 = new StyledEditorKit.BoldAction();
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      defaultEditorKit_DefaultKeyTypedAction0.getKeys();
      defaultEditorKit_DefaultKeyTypedAction0.isEnabled();
      defaultEditorKit_DefaultKeyTypedAction0.getPropertyChangeListeners();
      Action[] actionArray0 = new Action[4];
      actionArray0[0] = (Action) defaultEditorKit_DefaultKeyTypedAction0;
      actionArray0[1] = (Action) styledEditorKit_BoldAction1;
      actionArray0[2] = (Action) styledEditorKit_BoldAction1;
      actionArray0[3] = (Action) styledEditorKit_BoldAction0;
      TextAction.augmentList(actionArray0, actionArray0);
      JMenu jMenu1 = new JMenu("Length functUn is null for dialect=");
      jMenu0.getPopupMenu();
      jPopupMenu0.add((Action) styledEditorKit_BoldAction0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, ",h,:|A$O&_}Fa?+L,c", "Jh0alSC&}*!I:%z3");
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((Statement) null).when(connection0).createStatement();
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.USER;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getDisabledIcon();
      DatabaseObjectType.createNewDatabaseObjectType("~ EXo,5", (Icon) null);
      dBCopyPlugin0.getSourceSession();
      Integer integer0 = new Integer(727);
      dBCopyPlugin0.getPluginUserSettingsFolder();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("tU");
      Integer integer1 = new Integer(32);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-71));
      SQLDriver sQLDriver0 = new SQLDriver(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      sQLDriver0.clone();
      // Undeclared exception!
      try { 
        DBUtil.executeUpdate(sQLConnection0, "newObjcName", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles1.getUpdateDirectory();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      applicationFiles0.getExecutionLogFile();
      applicationFiles1.getLibraryDirectory();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ")KaYS2mxS,Dh:N");
      fileWrapperFactoryImpl0.create(")KaYS2mxS,Dh:N", "ISQLAlias == null");
      applicationFiles0.getUserSettingsDirectory();
      applicationFiles1.getFAQFile();
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      DBCopyPreferenceBean dBCopyPreferenceBean1 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean1.setUseFileCaching(true);
      dBCopyPreferenceBean1.setCopyForeignKeys(false);
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 2);
      assertTrue(boolean0);
      
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      assertFalse(boolean1 == boolean0);
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.getIcon();
      JCheckBox jCheckBox0 = new JCheckBox((Icon) null);
      JCheckBox jCheckBox1 = new JCheckBox((Icon) null);
      jCheckBox1.firePropertyChange("\"", (-53.8516F), (-53.8516F));
      metalSplitPaneUI0.getAccessibleChildrenCount(jCheckBox1);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.getComponentPopupMenu();
      MetalSplitPaneUI metalSplitPaneUI1 = new MetalSplitPaneUI();
      metalSplitPaneUI1.getDivider();
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.removePropertyChangeListener((PropertyChangeListener) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.unload();
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, " rows ? to ?", "\"");
      // Undeclared exception!
      try { 
        DBUtil.getColumnName(sQLConnection0, (ITableInfo) null, 1038);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("^xM", basicLabelUI0);
      Object[][] objectArray0 = new Object[9][1];
      Object[] objectArray1 = new Object[3];
      objectArray1[0] = (Object) propertyChangeListenerProxy0;
      objectArray1[1] = (Object) "Length functon is null for dialect=";
      objectArray1[2] = (Object) "^xM";
      objectArray0[0] = objectArray1;
      Object[] objectArray2 = new Object[6];
      objectArray2[0] = (Object) basicLabelUI0;
      objectArray2[1] = (Object) "?";
      Object object0 = new Object();
      objectArray2[2] = object0;
      objectArray2[3] = (Object) "Length functon is null for dialect=";
      objectArray2[4] = (Object) basicLabelUI0;
      Object object1 = new Object();
      objectArray2[5] = object1;
      objectArray0[1] = objectArray2;
      Object[] objectArray3 = new Object[4];
      objectArray3[0] = (Object) propertyChangeListenerProxy0;
      objectArray3[1] = (Object) propertyChangeListenerProxy0;
      Object object2 = new Object();
      objectArray3[2] = object2;
      objectArray3[3] = (Object) "Length functon is null for dialect=";
      objectArray0[2] = objectArray3;
      Object[] objectArray4 = new Object[0];
      objectArray0[3] = objectArray4;
      Object[] objectArray5 = new Object[3];
      objectArray5[0] = (Object) "^xM";
      Object object3 = new Object();
      objectArray5[1] = object3;
      objectArray5[2] = object2;
      objectArray0[4] = objectArray5;
      Object[] objectArray6 = new Object[1];
      objectArray6[0] = (Object) "Length functon is null for dialect=";
      objectArray0[5] = objectArray6;
      Object[] objectArray7 = new Object[3];
      objectArray7[0] = object0;
      objectArray7[1] = (Object) propertyChangeListenerProxy0;
      objectArray7[2] = object3;
      objectArray0[6] = objectArray7;
      Object[] objectArray8 = new Object[0];
      objectArray0[7] = objectArray8;
      Object[] objectArray9 = new Object[8];
      objectArray9[0] = (Object) propertyChangeListenerProxy0;
      objectArray9[1] = object0;
      objectArray9[2] = object2;
      objectArray9[3] = object3;
      objectArray9[4] = object2;
      objectArray9[5] = object0;
      objectArray9[6] = (Object) "?";
      objectArray9[7] = (Object) propertyChangeListenerProxy0;
      objectArray0[8] = objectArray9;
      DefaultTableModel defaultTableModel0 = new DefaultTableModel(objectArray0, objectArray1);
      PropertyChangeEvent propertyChangeEvent0 = new PropertyChangeEvent(basicLabelUI0, "?", defaultTableModel0, defaultTableModel0);
      propertyChangeListenerProxy0.propertyChange(propertyChangeEvent0);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedAction0.removePropertyChangeListener(propertyChangeListenerProxy0);
      JMenu jMenu0 = new JMenu(defaultEditorKit_DefaultKeyTypedAction0);
      defaultEditorKit_DefaultKeyTypedAction0.addPropertyChangeListener(basicLabelUI0);
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction1 = new StyledEditorKit.BoldAction();
      styledEditorKit_BoldAction1.setEnabled(false);
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      defaultEditorKit_DefaultKeyTypedAction0.isEnabled();
      JMenu jMenu1 = new JMenu("Length functon is null for dialect=");
      jMenu0.getPopupMenu();
      jPopupMenu0.add((Action) styledEditorKit_BoldAction0);
      jMenu0.getPopupMenu();
      jPopupMenu0.resetKeyboardActions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "_+39ku P8,", "F<");
      // Undeclared exception!
      try { 
        DBUtil.getColumnNames((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ISQLConnection iSQLConnection0 = null;
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu/.squirrel-sql");
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)19;
      byte byte0 = (byte) (-49);
      // Undeclared exception!
      try { 
        DBUtil.getColumnCount((ISQLConnection) null, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      doReturn((DatabaseMetaData) null).when(connection0).getMetaData();
      MetalSplitPaneUI metalSplitPaneUI0 = new MetalSplitPaneUI();
      DefaultListCellRenderer defaultListCellRenderer0 = new DefaultListCellRenderer();
      defaultListCellRenderer0.getIcon();
      JCheckBox jCheckBox0 = new JCheckBox((Icon) null);
      jCheckBox0.firePropertyChange("\"", (float) 1038, 0.0F);
      metalSplitPaneUI0.getAccessibleChildrenCount(jCheckBox0);
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      jInternalFrame0.getComponentPopupMenu();
      MetalSplitPaneUI metalSplitPaneUI1 = new MetalSplitPaneUI();
      metalSplitPaneUI1.getDivider();
      SQLAlias sQLAlias0 = new SQLAlias();
      sQLAlias0.removePropertyChangeListener((PropertyChangeListener) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.tableHasPrimaryKey(sQLConnection0, (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getPluginsDirectory();
      applicationFiles0.getExecutionLogFile();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles4.getUserSettingsDirectory();
      applicationFiles0.getUpdateDirectory();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles8.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      applicationFiles9.getUserSettingsDirectory();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "", ",\n\tPRIMARY KEY ");
      DBUtil.getColumnType((ISQLConnection) null, (ITableInfo) null, "mHa");
      int[] intArray0 = Quarter.LAST_MONTH_IN_QUARTER;
      assertArrayEquals(new int[] {0, 3, 6, 9, 12}, intArray0);
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.4841984686100282
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      String string0 = " from dual";
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setRecordDelayMillis(0);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      dBCopyPreferenceBean0.setCopyPrimaryKeys(true);
      DBCopyPreferenceBean dBCopyPreferenceBean1 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean1.setWriteScript(false);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      DBCopyPreferenceBean dBCopyPreferenceBean2 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean1.setWriteScript(true);
      dBCopyPreferenceBean2.setCopyForeignKeys(false);
      int int0 = 10;
      DBUtil.typesAreEquivalent(10, 2);
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, (String) null, (String) null, " from dual", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-822));
      SQLDriver sQLDriver0 = new SQLDriver(integerIdentifier0);
      SQLConnection sQLConnection0 = new SQLConnection(connection0, sQLDriverPropertyCollection0, sQLDriver0);
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, "`,@KEk{WM:c", "a`");
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = DBUtil.typesAreEquivalent(3, (-2781));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLicenceFile();
      applicationFiles0.getLicenceFile();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      applicationFiles0.getUpdateDirectory();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles0.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      applicationFiles5.getDatabaseDriversFile();
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setWriteScript(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      boolean boolean0 = DBUtil.typesAreEquivalent(3, 3);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      ConnectionWrapper connectionWrapper0 = new ConnectionWrapper(connection0);
      SQLAlias sQLAlias0 = new SQLAlias();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      SQLConnection sQLConnection0 = new SQLConnection(connectionWrapper0, sQLDriverPropertyCollection0, sQLDriver0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getPasteToTableInfo(sQLConnection0, "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions", "5Xm^;lr*[&");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "Session.title1";
      stringArray0[1] = "Encountered unexpected exception while attempting to determine if catalogs are used in table definitions";
      // Undeclared exception!
      try { 
        DBUtil.getColumnTypes((ISQLConnection) sQLConnection0, (ITableInfo) null, stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.SQLDatabaseMetaData", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setCommitCount((-2));
      dBCopyPreferenceBean0.setWriteScript(false);
      dBCopyPreferenceBean0.setDelayBetweenObjects(true);
      dBCopyPreferenceBean0.setCommitCount(2001);
      dBCopyPreferenceBean0.setTableDelayMillis(2001);
      dBCopyPreferenceBean0.setCommitAfterTableDefs(true);
      dBCopyPreferenceBean0.setPromptForDialect(true);
      dBCopyPreferenceBean0.setClientVersion("D^o(m;/YhX");
      dBCopyPreferenceBean0.setAppendRecordsToExisting(true);
      dBCopyPreferenceBean0.setRecordDelayMillis(2001);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.shouldAllThrowIOExceptions();
      dBCopyPlugin0.setPasteToTableName("~R7ka|5/y;=zgT");
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.replaceDistinctDataType(2001, (TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      BasicLabelUI basicLabelUI0 = new BasicLabelUI();
      PropertyChangeListenerProxy propertyChangeListenerProxy0 = new PropertyChangeListenerProxy("^xM", basicLabelUI0);
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedAction0.removePropertyChangeListener(propertyChangeListenerProxy0);
      JMenu jMenu0 = new JMenu(defaultEditorKit_DefaultKeyTypedAction0);
      BasicRootPaneUI basicRootPaneUI0 = new BasicRootPaneUI();
      defaultEditorKit_DefaultKeyTypedAction0.addPropertyChangeListener(basicRootPaneUI0);
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction1 = new StyledEditorKit.BoldAction();
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction1 = new DefaultEditorKit.DefaultKeyTypedAction();
      defaultEditorKit_DefaultKeyTypedAction1.getKeys();
      defaultEditorKit_DefaultKeyTypedAction0.isEnabled();
      JMenu jMenu1 = new JMenu("^xM");
      JPopupMenu jPopupMenu1 = jMenu1.getPopupMenu();
      DefaultEditorKit.InsertTabAction defaultEditorKit_InsertTabAction0 = new DefaultEditorKit.InsertTabAction();
      JInternalFrame jInternalFrame0 = new JInternalFrame();
      Icon icon0 = jInternalFrame0.getFrameIcon();
      JToggleButton jToggleButton0 = new JToggleButton(icon0);
      JComponent.isLightweightComponent(jPopupMenu1);
      PriorityQueue<TableInfo> priorityQueue0 = new PriorityQueue<TableInfo>();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>(priorityQueue0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getForeignKeySQL(dBCopyPlugin0, (ITableInfo) null, arrayList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[4];
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER_TYPE_DBO;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.OTHER;
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      List<IDatabaseObjectInfo> list1 = DBUtil.convertTableToObjectList(list0);
      assertEquals(4, list1.size());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7IR5khG\"SJfi_1W[7f?");
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      ApplicationFileWrappersImpl applicationFileWrappersImpl0 = new ApplicationFileWrappersImpl();
      FileWrapper fileWrapper0 = applicationFileWrappersImpl0.getWelcomeFile();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileWrapper0.listFiles();
      FileWrapperImpl fileWrapperImpl0 = fileWrapperFactoryImpl0.createTempFile("Application.error.ladsqlhistory", " (zero integer)", fileWrapper0);
      fileWrapperFactoryImpl0.create(fileWrapperImpl0);
      MockFile mockFile0 = new MockFile("Unknown");
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      applicationFileWrappersImpl0.getDatabaseAliasesFile_before_version_2_3();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("lg.j<", "li,68\"V", "", "Y@7T\"Bj{CQK%Ve", 483, "li,68\"V", (-967), 1111, (-967), 22, "lg.j<", "lg.j<", (-4876), 1702, "~D'");
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>();
      // Undeclared exception!
      try { 
        DBUtil.convertTableToObjectList((List<ITableInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[4];
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("2#;_RCjy1b!#K}NaOu ", "na`", "((4\"jGFU");
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) databaseObjectInfo0;
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("9/46\"i^:C2nEKnc%v%D");
      DatabaseObjectType.createNewDatabaseObjectType("#7W6f6Sk");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("((4\"jGFU", "#7W6f6Sk", "2#;_RCjy1b!#K}NaOu ", "((4\"jGFU", (-4), "#7W6f6Sk", 7, (-4), (-1000), 7, "((4\"jGFU", "((4\"jGFU", (-1887), 2780, "na`");
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.UDT_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      Integer integer0 = new Integer((-885));
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType("2#;_RCjy1b!#K}NaOu ");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.SEQUENCE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Icon icon0 = defaultTreeCellRenderer0.getDefaultLeafIcon();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.createNewDatabaseObjectType("DROP COLUMN", icon0);
      DatabaseObjectType.createNewDatabaseObjectType("DROP COLUMN");
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.createNewDatabaseObjectType("h:Ib0*_]>", icon0);
      Icon icon1 = defaultTreeCellRenderer0.getLeafIcon();
      DatabaseObjectType.createNewDatabaseObjectType("DROP COLUMN", icon1);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectType.createNewDatabaseObjectType("DROP COLUMN", icon1);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.TABLE;
      DatabaseObjectType.createNewDatabaseObjectType("DBUtil.error.nocolumns");
      DatabaseObjectType.createNewDatabaseObjectType("Target resource URL: ", icon1);
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("DRmZrrC{~", "m;ELNR#w9+bW", (String) null);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      dBCopyPlugin0.getApplication();
      SchemaInfo schemaInfo0 = new SchemaInfo((IApplication) null);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject(databaseObjectInfo0, schemaInfo0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // SQLDatabaseMetaData == null
         //
         verifyException("net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo(")", "v?sVwO.Zq?9[nj#W'", "v", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 2004, "IOException occurred reading a bnary value", 2004, 2004, (-3579), 2004, "^%(", "v", 2688, 1726, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      Integer integer0 = new Integer(2004);
      int int0 = DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      assertEquals(2004, int0);
      
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      dBCopyPlugin0.getDestSession();
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      ArrayList<ITableInfo> arrayList0 = new ArrayList<ITableInfo>();
      ForeignKeyInfo[] foreignKeyInfoArray0 = new ForeignKeyInfo[4];
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      foreignKeyInfoArray0[0] = foreignKeyInfo0;
      foreignKeyInfoArray0[1] = foreignKeyInfo0;
      DatabaseObjectType.createNewDatabaseObjectType(",`wOp%/1>_<o@");
      DatabaseObjectType.createNewDatabaseObjectType("?WmORuy-Arir_yPYy>");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.createNewDatabaseObjectType("?WmORuy-Arir_yPYy>");
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("?WmORuy-Arir_yPYy>", "DBUtil.info.bindbloblength", "?WmORuy-Arir_yPYy>", ",`wOp%/1>_<o@", (-2), "?WmORuy-Arir_yPYy>", 0, 0, 1720, 1654, "length", "?WmORuy-Arir_yPYy>", 0, (-2313), "fr_A^p-kc6h");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertTrue(boolean0);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.getSchemaFromDbObject((IDatabaseObjectInfo) null, (SchemaInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultOpenIcon();
      defaultTreeCellRenderer0.getToolkit();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.firePropertyChange("j4M+(tSc(8u'Hw`j_.x", (short) (-2211), (short) (-2211));
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      Locale locale0 = Locale.FRENCH;
      defaultTreeCellRenderer2.setLocale(locale0);
      boolean boolean0 = DBUtil.typesAreEquivalent((short) (-2211), (short) (-2211));
      assertTrue(boolean0);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      ComponentListener componentListener3 = AWTEventMulticaster.add((ComponentListener) null, componentListener1);
      ComponentListener componentListener4 = AWTEventMulticaster.remove(componentListener3, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener4);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      ComponentListener componentListener5 = AWTEventMulticaster.add((ComponentListener) null, componentListener4);
      ComponentListener componentListener6 = AWTEventMulticaster.add(componentListener5, componentListener2);
      AWTEventMulticaster.remove(componentListener4, componentListener6);
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      boolean boolean0 = DBUtil.typesAreEquivalent((-3371), 45);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 35
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      boolean boolean0 = DBUtil.typesAreEquivalent(36, (-1678));
      assertFalse(boolean0);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "ep* /JS)";
      dBCopyPlugin0.getPasteToTableInfo((ISQLConnection) null, "ep* /JS)", "8$yZL");
      // Undeclared exception!
      try { 
        DBUtil.getCreateTableSql(dBCopyPlugin0, (ITableInfo) null, "C*!1N;wb(>I2Xgm", "8$yZL", "ep* /JS)");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("~QBRk8I1GhAz@", "max", ";F5,", "Skny4)D!7C])#q]", 1398, "com.jidesoft.plaf.metal.MetalMenuItemUI$MenuKeyHandler", 9, 9, 1398, (-1789569704), "?F5 L++ni]B}", "tz?", 969, 2005, "t.,");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      Integer integer0 = new Integer(9);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      dBCopyPlugin0.getPluginUserSettingsFolder();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType.createNewDatabaseObjectType("pgWP]_boE&mO~E4fl");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      assertEquals(0, sQLDriverPropertyCollection0.size());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      defaultCaret2.width = 483;
      defaultCaret0.getDot();
      defaultCaret2.getMagicCaretPosition();
      Integer integer0 = new Integer(0);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("En3q", "En3q", "En3q", "En3q", 0, "'GZ^", (-1347), 0, 2001, 1237, "'GZ^", "'GZ^", 6, 483, "'GZ^");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.INDEX_TYPE_DBO;
      TableColumnInfo tableColumnInfo1 = new TableColumnInfo("'GZ^", (String) null, (String) null, "m;", 3109, "m;", 3119, 878, 0, (-247), "En3q", "tWJ5B,d'ZwlvU|AB", 0, (-839), "En3q");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SEQUENCE_TYPE_DBO;
      tableColumnInfo1.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      tableColumnInfo1.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(0);
      String string0 = "z_^P\"efo]zC{W`";
      // Undeclared exception!
      try { 
        integerIdentifier0.setString("z_^P\"efo]zC{W`");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"z_^P\"efo]zC{W`\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      JPopupMenu jPopupMenu0 = new JPopupMenu((String) null);
      jPopupMenu0.resetKeyboardActions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      String string0 = DBUtil.fixCase((ISession) null, (String) null);
      assertNull(string0);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      defaultCaret2.getBlinkRate();
      defaultCaret0.getDot();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.isValidateRoot();
      Locale.getISOLanguages();
      defaultTreeCellRenderer0.getComponents();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer3.isPaintingTile();
      DefaultTreeCellRenderer defaultTreeCellRenderer4 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer4.firePropertyChange("]N%[LzRO3o!FHe", (short)15, (short)890);
      DefaultTreeCellRenderer defaultTreeCellRenderer5 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer6 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer7 = new DefaultTreeCellRenderer();
      Locale locale0 = Locale.ITALIAN;
      defaultTreeCellRenderer1.setLocale(locale0);
      // Undeclared exception!
      try { 
        DBUtil.getSchemaNameFromDbObject((IDatabaseObjectInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getPluginsDirectory();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles4.getUserSettingsDirectory();
      applicationFiles0.getUpdateDirectory();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles0.getLibraryDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      JInternalFrame jInternalFrame0 = new JInternalFrame("QrYvSR.w6 ", true, true, true, true);
      Icon icon0 = jInternalFrame0.getFrameIcon();
      JToggleButton jToggleButton0 = new JToggleButton(icon0);
      JComponent.isLightweightComponent(jToggleButton0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[0];
      List<ITableInfo> list0 = DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestDatabaseObject();
      vector0.add((IDatabaseObjectInfo) null);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestDatabaseObject();
      vector0.add((IDatabaseObjectInfo) null);
      DBUtil.convertObjectToTableList(vector0);
      DBCopyPlugin dBCopyPlugin2 = new DBCopyPlugin();
      String string0 = "replaceOtherDataType: unexpected exception - ";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", 40000, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", (-661), (-1742), (-1571), 40000, "replaceOtherDataType: unexpected exception - ", "ActionCollection hasn't been created.", 40000, (-1742), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      // Undeclared exception!
      try { 
        DBUtil.getColumnSql(dBCopyPlugin2, tableColumnInfo0, "ActionCollection hasn't been created.", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Vector<IDatabaseObjectInfo> vector0 = new Vector<IDatabaseObjectInfo>();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy");
      vector0.add((IDatabaseObjectInfo) databaseObjectInfo0);
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestDatabaseObject();
      vector0.add((IDatabaseObjectInfo) null);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList(vector0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles6.getUpdateDirectory();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      Locale locale0 = Locale.US;
      locale0.getDisplayScript();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getToolkit();
      defaultTreeCellRenderer0.firePropertyChange("FzeQVYy BG4Fsm]zo)A", (short)1653, (short)1653);
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer3.setLocale(locale0);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.TRIGGER;
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("tVQG8", (String) null, (String) null);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertNull(string0);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.isBinaryType((TableColumnInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "G(niRVJfqgA4");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)fileWrapperFactoryImpl0.create("Unknown", "Unknown");
      fileWrapperImpl0.getAbsolutePath();
      fileWrapperImpl0.mkdirs();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)FileWrapperImpl.createTempFile(" rows ? to ?", "G(niRVJfqgA4", (FileWrapper) fileWrapperImpl0);
      fileWrapperImpl1.getCanonicalFile();
      fileWrapperImpl0.getParentFile();
      fileWrapperImpl0.renameTo(fileWrapperImpl1);
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl0);
      fileWrapperFactoryImpl0.create(fileWrapperImpl2);
      fileWrapperFactoryImpl1.create("<Y");
      fileWrapperFactoryImpl1.createTempFile("/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown", " rows ? to ?");
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(" rows ? to ?");
      fileWrapperFactoryImpl1.createTempFile("/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown", "G(niRVJfqgA4");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      ImageIconUIResource imageIconUIResource0 = (ImageIconUIResource)defaultTreeCellRenderer0.getDefaultClosedIcon();
      DatabaseObjectType.createNewDatabaseObjectType("<Y", (Icon) imageIconUIResource0);
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList((IDatabaseObjectInfo[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener2 = AWTEventMulticaster.remove(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener2);
      AWTEventMulticaster.add((ComponentListener) null, componentListener2);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      // Undeclared exception!
      try { 
        DBUtil.deleteDataInExistingTable((ISession) null, (String) null, (String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel();
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.getAlignmentX();
      Box box0 = Box.createVerticalBox();
      JToolTip jToolTip0 = box0.createToolTip();
      jSpinner0.setEditor(jToolTip0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSpinner jSpinner1 = new JSpinner();
      // Undeclared exception!
      try { 
        DBUtil.dropTable("d~YR )wl", ",\n\tPRIMARY KEY ", ">(C)67.@tv>lv7*)l", (ISession) null, false, 22);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(16, 16, 16, 16);
      JSpinner jSpinner0 = new JSpinner();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      styledEditorKit_BoldAction0.getPropertyChangeListeners();
      jSpinner0.print((Graphics) null);
      Action[] actionArray0 = new Action[5];
      actionArray0[0] = (Action) styledEditorKit_BoldAction0;
      actionArray0[1] = (Action) styledEditorKit_BoldAction0;
      actionArray0[2] = (Action) styledEditorKit_BoldAction0;
      actionArray0[3] = (Action) styledEditorKit_BoldAction0;
      actionArray0[4] = (Action) styledEditorKit_BoldAction0;
      TextAction.augmentList(actionArray0, actionArray0);
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      styledEditorKit_BoldAction0.removePropertyChangeListener(jSpinner_NumberEditor0);
      // Undeclared exception!
      try { 
        DBUtil.executeQuery((ISession) null, "562+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("'ucCEE&@ @*z-", "Nq5*Uuc9w|6Y7}9d1", "`94uZ=jf", "YMTCj", 2136, "YMTCj", (-232), 2136, 5, 2136, "Gl5rkAdI", "Nq5*Uuc9w|6Y7}9d1", (-232), 2, "YMTCj");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      Integer integer0 = new Integer(574);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      DatabaseObjectType.createNewDatabaseObjectType("Range", (Icon) null);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SCHEMA;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.createNewDatabaseObjectType("autoLogon");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.SEQUENCE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      DatabaseObjectType.createNewDatabaseObjectType("Qv kr[\"X7n%H_Pk");
      DatabaseObjectType.createNewDatabaseObjectType("Target resource URL: ");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 51
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      LinkedBlockingQueue<TableInfo> linkedBlockingQueue0 = new LinkedBlockingQueue<TableInfo>();
      LinkedList<ITableInfo> linkedList0 = new LinkedList<ITableInfo>(linkedBlockingQueue0);
      List<IDatabaseObjectInfo> list0 = DBUtil.convertTableToObjectList(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      String string0 = DBUtil.getLastStatementValues();
      assertNull(string0);
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getPluginsDirectory();
      applicationFiles0.getExecutionLogFile();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      applicationFiles0.getFAQFile();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      applicationFiles4.getUserSettingsDirectory();
      applicationFiles0.getUpdateDirectory();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles8.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles9.getWelcomeFile();
      ApplicationFiles applicationFiles10 = new ApplicationFiles();
      applicationFiles9.getUserSettingsDirectory();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      String string0 = "DBUtil.error.unknowntype";
      int int0 = (-2942);
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "DBUtil.error.unknowntype", "DBUtil.error.unknowntype", "DBUtil.error.unknowntype", (-2942), "DBUtil.error.unknowntype", (-247), (-2942), (-247), (-247), "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", "] using context classloader ", (-247), 32000, "] using context classloader ");
      dBCopyPlugin0.getDestSession();
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.SEQUENCE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier(44);
      // Undeclared exception!
      try { 
        integerIdentifier0.setString("datediff(");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"datediff(\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("DELETE FROM ", "DELETE FROM ", ",:Jud;A<");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.OTHER;
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.SEQUENCE;
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Locale locale0 = Locale.FRENCH;
      defaultTreeCellRenderer0.firePropertyChange((String) null, (short) (-1), (short)1111);
      defaultTreeCellRenderer0.setLocale(locale0);
      defaultTreeCellRenderer0.getDefaultLeafIcon();
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.TRIGGER;
      databaseObjectInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType2);
      IDatabaseObjectInfo[] iDatabaseObjectInfoArray0 = new IDatabaseObjectInfo[6];
      iDatabaseObjectInfoArray0[0] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[1] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[2] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[3] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[4] = (IDatabaseObjectInfo) databaseObjectInfo0;
      iDatabaseObjectInfoArray0[5] = (IDatabaseObjectInfo) databaseObjectInfo0;
      // Undeclared exception!
      try { 
        DBUtil.convertObjectArrayToTableList(iDatabaseObjectInfoArray0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // net.sourceforge.squirrel_sql.fw.sql.DatabaseObjectInfo cannot be cast to net.sourceforge.squirrel_sql.fw.sql.ITableInfo
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setPromptForDialect(false);
      dBCopyPreferenceBean0.setSelectFetchSize((-11));
      dBCopyPreferenceBean0.setAppendRecordsToExisting(false);
      dBCopyPreferenceBean0.setRecordDelayMillis(3L);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      dBCopyPreferenceBean0.setCopyPrimaryKeys(false);
      dBCopyPreferenceBean0.setWriteScript(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      DBCopyPreferenceBean dBCopyPreferenceBean1 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setWriteScript(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(false);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      dBCopyPlugin0.getSourceDatabaseObjects();
      // Undeclared exception!
      try { 
        DBUtil.convertObjectToTableList((List<IDatabaseObjectInfo>) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      defaultCaret0.getDot();
      defaultCaret2.getMagicCaretPosition();
      AWTEventMulticaster.add((MouseListener) defaultCaret2, (MouseListener) defaultCaret0);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteToTableName("~R7ka|5/y;=zgT");
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.replaceOtherDataType((TableColumnInfo) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Connection connection0 = mock(Connection.class, new ViolatedAssumptionAnswer());
      String string0 = "`i8#ptZ+gG";
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("`i8#ptZ+gG", "?cg9DKF4JXSBlQ", "a`", "a`", 1038, "a`", 1038, 1038, 1390, 1038, "?cg9DKF4JXSBlQ", "Z]P{ W[Aajir:&$>", 1038, 32, "a`");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.VIEW;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DefaultListCellRenderer.UIResource defaultListCellRenderer_UIResource0 = new DefaultListCellRenderer.UIResource();
      defaultListCellRenderer_UIResource0.getDisabledIcon();
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.USER;
      Integer integer0 = new Integer(727);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SEQUENCE;
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.INDEX_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DBUtil.replaceOtherDataType(tableColumnInfo0, (ISession) null);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType3);
      IntegerIdentifier integerIdentifier0 = new IntegerIdentifier((-71));
      // Undeclared exception!
      try { 
        integerIdentifier0.setString("~ EXo,5");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~ EXo,5\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      defaultCaret0.getDot();
      defaultCaret2.getMagicCaretPosition();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("\":xE{Pm.?$TY", "fOS3XIEo><DeK{DIf", "XA8FH(Kb&Sv*,", "#UPOu", 0, "XA8FH(Kb&Sv*,", 0, 254, 93, 0, "fOS3XIEo><DeK{DIf", "XA8FH(Kb&Sv*,", 0, 93, "XA8FH(Kb&Sv*,");
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[2];
      tableColumnInfoArray0[0] = tableColumnInfo0;
      tableColumnInfoArray0[1] = tableColumnInfo0;
      String string0 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertEquals("#UPOu, #UPOu", string0);
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getChangeListeners();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      defaultCaret0.getDot();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[8];
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      ApplicationFiles applicationFiles2 = new ApplicationFiles();
      ApplicationFiles applicationFiles3 = new ApplicationFiles();
      ApplicationFiles applicationFiles4 = new ApplicationFiles();
      ApplicationFiles applicationFiles5 = new ApplicationFiles();
      ApplicationFiles applicationFiles6 = new ApplicationFiles();
      applicationFiles6.getUpdateDirectory();
      ApplicationFiles applicationFiles7 = new ApplicationFiles();
      ApplicationFiles applicationFiles8 = new ApplicationFiles();
      applicationFiles8.getPluginsUserSettingsDirectory();
      ApplicationFiles applicationFiles9 = new ApplicationFiles();
      applicationFiles2.getLibraryDirectory();
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      // Undeclared exception!
      try { 
        DBUtil.getSelectQuery(dBCopyPlugin0, "|0AmBg#I['X][k_", (ITableInfo) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("t1)@yt(Jb_", "", "intextract");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Locale locale0 = Locale.KOREAN;
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer2.isValidateRoot();
      Locale.getISOLanguages();
      locale0.getDisplayScript();
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.firePropertyChange("Failed to call ResultSetMetaData.isCurrency()", (short) (-7), (short) (-2729));
      DefaultTreeCellRenderer defaultTreeCellRenderer4 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer5 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer6 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.setLocale(locale0);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("", string0);
  }

  /**
  //Test case number: 62
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7IR5khG\"SJfi_1W[7f?");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)fileWrapperFactoryImpl0.create("Unknown", "Unknown");
      String string0 = fileWrapperImpl0.getAbsolutePath();
      fileWrapperImpl0.mkdirs();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)FileWrapperImpl.createTempFile(" rows ? to ?", "7IR5khG\"SJfi_1W[7f?", (FileWrapper) fileWrapperImpl0);
      fileWrapperImpl1.toURI();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileWrapperImpl.createTempFile(" rows ? to ?", "/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown", fileWrapperImpl0);
      fileWrapperImpl0.renameTo(fileWrapperImpl1);
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      FileSystemHandling.createFolder(evoSuiteFile0);
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl0);
      fileWrapperFactoryImpl0.create(fileWrapperImpl2);
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[0];
      String string1 = DBUtil.getColumnList(tableColumnInfoArray0);
      assertFalse(string1.equals((Object)string0));
  }

  /**
  //Test case number: 63
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      DatabaseObjectInfo databaseObjectInfo0 = new DatabaseObjectInfo("mK", "t1)@yt(Jb_", "'8$ByRXpL");
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      Locale locale0 = Locale.KOREAN;
      DefaultTreeCellRenderer defaultTreeCellRenderer1 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer1.isValidateRoot();
      Locale.getISOLanguages();
      locale0.getDisplayScript();
      DefaultTreeCellRenderer defaultTreeCellRenderer2 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getToolkit();
      defaultTreeCellRenderer1.firePropertyChange(" schema = ", (short) (-2211), (short) (-2005));
      DefaultTreeCellRenderer defaultTreeCellRenderer3 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer4 = new DefaultTreeCellRenderer();
      DefaultTreeCellRenderer defaultTreeCellRenderer5 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer5.setLocale(locale0);
      String string0 = DBUtil.getSchemaNameFromDbObject(databaseObjectInfo0);
      assertEquals("t1)@yt(Jb_", string0);
  }

  /**
  //Test case number: 64
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      defaultCaret0.getDot();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      TableColumnInfo[] tableColumnInfoArray0 = new TableColumnInfo[8];
      // Undeclared exception!
      try { 
        DBUtil.getColumnList(tableColumnInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      DefaultEditorKit.DefaultKeyTypedAction defaultEditorKit_DefaultKeyTypedAction0 = new DefaultEditorKit.DefaultKeyTypedAction();
      JMenu jMenu0 = new JMenu(defaultEditorKit_DefaultKeyTypedAction0);
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      StyledEditorKit.BoldAction styledEditorKit_BoldAction1 = new StyledEditorKit.BoldAction();
      JPopupMenu jPopupMenu0 = new JPopupMenu();
      defaultEditorKit_DefaultKeyTypedAction0.getKeys();
      defaultEditorKit_DefaultKeyTypedAction0.isEnabled();
      JMenu jMenu1 = new JMenu("Length functon is null for dialect=");
      jMenu0.getPopupMenu();
      JMenu jMenu2 = new JMenu();
      jMenu0.getPopupMenu();
      jPopupMenu0.resetKeyboardActions();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getDestSession();
      String string0 = DBUtil.fixCase((ISession) null, "");
      assertEquals("", string0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=1.4659497192528064
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      defaultCaret0.getMagicCaretPosition();
      AWTEventMulticaster.add((MouseListener) defaultCaret0, (MouseListener) defaultCaret0);
      defaultCaret0.getDotBias();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, (String) null, (String) null, "G=c%vpiIOLJF`\"^H", 1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      applicationFiles0.getExecutionLogFile();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setPromptForDialect(true);
      dBCopyPreferenceBean0.setAppendRecordsToExisting(true);
      dBCopyPreferenceBean0.setRecordDelayMillis(60000L);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteToTableName("6|g}N1ZXP_up9E<}Yw");
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(4000, (TableColumnInfo) null, (ISession) null);
      assertEquals(4000, int0);
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("Ek}Y3@c)z>^S<N", "extact(day fom ?1)", "4/", "Ek}Y3@c)z>^S<N", (-1132), "Ek}Y3@c)z>^S<N", (-3), (-1132), 493, 493, "\n", (String) null, (-1132), (-678), ":(S`&=}`L+");
      DatabaseObjectType databaseObjectType0 = DatabaseObjectType.UDT_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      DatabaseObjectType databaseObjectType1 = DatabaseObjectType.UDF_TYPE_DBO;
      DatabaseObjectType databaseObjectType2 = DatabaseObjectType.SYNONYM_TYPE_DBO;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType0);
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType("extact(day fom ?1)");
      DatabaseObjectType.createNewDatabaseObjectType("Ek}Y3@c)z>^S<N");
      DatabaseObjectType databaseObjectType3 = DatabaseObjectType.SEQUENCE;
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType1);
      DatabaseObjectType.createNewDatabaseObjectType(":(S`&=}`L+");
      DatabaseObjectType.createNewDatabaseObjectType("Ek}Y3@c)z>^S<N");
      DatabaseObjectType.createNewDatabaseObjectType("Range");
      DatabaseObjectType databaseObjectType4 = DatabaseObjectType.createNewDatabaseObjectType("Range");
      DatabaseObjectType.createNewDatabaseObjectType("Range");
      tableColumnInfo0.replaceDatabaseObjectTypeConstantObjectsByConstantObjectsOfThisVM(databaseObjectType4);
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setWriteScript(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      dBCopyPlugin0.setPasteToTableName("6,,4lT;D.W");
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl0);
      DBUtil.replaceDistinctDataType((-737), (TableColumnInfo) null, (ISession) null);
      SQLDriverPropertyCollection sQLDriverPropertyCollection0 = new SQLDriverPropertyCollection();
      DriverPropertyInfo[] driverPropertyInfoArray0 = new DriverPropertyInfo[7];
      DriverPropertyInfo driverPropertyInfo0 = new DriverPropertyInfo("Application.error.loadsqlhistory", "PreferencesPanel.copyBufferSizeLabel");
      driverPropertyInfoArray0[0] = driverPropertyInfo0;
      DriverPropertyInfo driverPropertyInfo1 = new DriverPropertyInfo(".wX", "PreferencesPanel.copyBufferSizeLabel");
      driverPropertyInfoArray0[1] = driverPropertyInfo1;
      DriverPropertyInfo driverPropertyInfo2 = new DriverPropertyInfo((String) null, "U%d8Cc");
      driverPropertyInfoArray0[2] = driverPropertyInfo2;
      DriverPropertyInfo driverPropertyInfo3 = new DriverPropertyInfo(".wX", "select ");
      driverPropertyInfoArray0[3] = driverPropertyInfo3;
      DriverPropertyInfo driverPropertyInfo4 = new DriverPropertyInfo(")", "M+");
      driverPropertyInfoArray0[4] = driverPropertyInfo4;
      DriverPropertyInfo driverPropertyInfo5 = new DriverPropertyInfo("Null 'rowKey' argument.", (String) null);
      driverPropertyInfoArray0[5] = driverPropertyInfo5;
      DriverPropertyInfo driverPropertyInfo6 = new DriverPropertyInfo(" from ", "AgAT.syym478Ey8Z~K");
      driverPropertyInfoArray0[6] = driverPropertyInfo6;
      // Undeclared exception!
      try { 
        sQLDriverPropertyCollection0.applyDriverPropertynfo(driverPropertyInfoArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TreeMap", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      ComponentListener componentListener1 = AWTEventMulticaster.add(componentListener0, componentListener0);
      AWTEventMulticaster.remove(componentListener1, componentListener1);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener2 = AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener2, componentListener1);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener3 = AWTEventMulticaster.add(componentListener1, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener3);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener4 = AWTEventMulticaster.remove(componentListener3, (ComponentListener) null);
      ComponentListener componentListener5 = AWTEventMulticaster.add((ComponentListener) null, componentListener4);
      AWTEventMulticaster.remove((ComponentListener) null, componentListener3);
      AWTEventMulticaster.add((ComponentListener) null, componentListener5);
      MockFile mockFile0 = new MockFile("delete from RDB$GENERATORS where RDB$GENERATOR_NAME = '");
      MockFile mockFile1 = new MockFile("delete from RDB$GENERATORS where RDB$GENERATOR_NAME = '");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getMaxColumnLengthSQL((ISession) null, (TableColumnInfo) null, "net.sourceforge.squirrel_sql.plugins.dbcopy.dbcopy", false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 71
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7IR5khG\"SJfi_1W[7f?");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      fileWrapperFactoryImpl0.create("Unknown", "Unknown");
      ApplicationFiles applicationFiles0 = new ApplicationFiles();
      ApplicationFiles applicationFiles1 = new ApplicationFiles();
      applicationFiles0.getPluginsUserSettingsDirectory();
      File file0 = applicationFiles1.getUpdateDirectory();
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      applicationFiles0.getUserSettingsDirectory();
      fileWrapperFactoryImpl1.create(file0);
      fileWrapperFactoryImpl1.create("Unknown");
      FileWrapperFactoryImpl fileWrapperFactoryImpl2 = new FileWrapperFactoryImpl();
      dBCopyPlugin0.setFileWrapperFactory(fileWrapperFactoryImpl2);
      LinkedList<IDatabaseObjectInfo> linkedList0 = new LinkedList<IDatabaseObjectInfo>();
      List<ITableInfo> list0 = DBUtil.convertObjectToTableList(linkedList0);
      assertTrue(list0.isEmpty());
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      ComponentListener componentListener1 = AWTEventMulticaster.remove(componentListener0, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener0, (ComponentListener) null);
      AWTEventMulticaster.remove(componentListener1, (ComponentListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.setPasteToTableName("~R7ka|5/y;=zgT");
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(0, (TableColumnInfo) null, (ISession) null);
      assertEquals(0, int0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSpinner jSpinner0 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      JSpinner.NumberEditor jSpinner_NumberEditor1 = new JSpinner.NumberEditor(jSpinner0, "LBqYT$7!0)Z]%&)EG");
      jSpinner_NumberEditor1.getAlignmentX();
      jSpinner_NumberEditor1.transferFocus();
      jSpinner_NumberEditor1.getInputMethodListeners();
      jSpinner_NumberEditor0.grabFocus();
      DefaultTreeCellRenderer defaultTreeCellRenderer0 = new DefaultTreeCellRenderer();
      defaultTreeCellRenderer0.getDefaultLeafIcon();
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      dBCopyPlugin0.getDestSession();
      TableColumnInfo tableColumnInfo0 = new TableColumnInfo("O>ykUcgHjtx'%mHn", "O>ykUcgHjtx'%mHn", "NO", "O>ykUcgHjtx'%mHn", 60, (String) null, 10, 1073741823, 1073741823, 60, "hEV[No:+zh=#Oa#,2", "BTREE", (-4615), 1891, "BTREE");
      boolean boolean0 = DBUtil.isBinaryType(tableColumnInfo0);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 74
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7IR5khG\"SJfi_1W[7f?");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Unknown/Unknown");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)fileWrapperFactoryImpl0.create("Ukown", "Ukown");
      fileWrapperImpl0.getAbsolutePath();
      fileWrapperImpl0.mkdirs();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)FileWrapperImpl.createTempFile(" rows ? to ?", "7IR5khG\"SJfi_1W[7f?", (FileWrapper) fileWrapperImpl0);
      fileWrapperImpl1.toURI();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileWrapperImpl.createTempFile(" rows ? to ?", "/home/ubuntu/termite/projects/102_squirrel-sql/Ukown/Ukown", fileWrapperImpl0);
      fileWrapperImpl0.renameTo(fileWrapperImpl1);
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl0);
      fileWrapperFactoryImpl0.create(fileWrapperImpl2);
      fileWrapperFactoryImpl1.createTempFile("/home/ubuntu/termite/projects/102_squirrel-sql/Ukown/Ukown", " rows ? to ?");
      fileWrapperFactoryImpl1.createTempFile("Ukown", "<Y", (FileWrapper) fileWrapperImpl0);
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(fileWrapperImpl1);
      fileWrapperFactoryImpl1.createTempFile("7IR5khG\"SJfi_1W[7f?", "kh`'>l!d");
      FileWrapperFactoryImpl fileWrapperFactoryImpl2 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "Ukown", " rows ? to ?", "bX?O.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7IR5khG\"SJfi_1W[7f?");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Unknown/Unknown");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)fileWrapperFactoryImpl0.create("Unknown", "Unknown");
      fileWrapperImpl0.getAbsolutePath();
      fileWrapperImpl0.mkdirs();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileWrapperImpl0.listFiles();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)FileWrapperImpl.createTempFile(" rows ? to ?", "7IR5khG\"SJfi_1W[7f?", (FileWrapper) fileWrapperImpl0);
      URI uRI0 = fileWrapperImpl1.toURI();
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(uRI0);
      fileWrapperImpl0.renameTo(fileWrapperImpl1);
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileWrapperImpl fileWrapperImpl3 = new FileWrapperImpl(fileWrapperImpl0);
      fileWrapperFactoryImpl1.createTempFile("Unexpected exception while attempting to determine if a table (", "/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown");
      fileWrapperFactoryImpl0.create(fileWrapperImpl3);
      fileWrapperFactoryImpl1.createTempFile("/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown", " rows ? to ?");
      fileWrapperFactoryImpl1.createTempFile("Unknown", "<Y", (FileWrapper) fileWrapperImpl0);
      fileWrapperFactoryImpl1.createTempFile("/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown", "7IR5khG\"SJfi_1W[7f?");
      fileWrapperFactoryImpl1.createTempFile("7IR5khG\"SJfi_1W[7f?", "kh`'>l!d");
      FileWrapperFactoryImpl fileWrapperFactoryImpl2 = new FileWrapperFactoryImpl();
      DBCopyPlugin dBCopyPlugin1 = new DBCopyPlugin();
      dBCopyPlugin1.getSourceSession();
      // Undeclared exception!
      try { 
        DBUtil.getTables((ISession) null, "Unknown", " rows ? to ?", "bX?O.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "tWJ5B,d'ZwlvU|AB");
      String string0 = DBUtil.getLastStatement();
      assertNull(string0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      ForeignKeyInfo foreignKeyInfo0 = mock(ForeignKeyInfo.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        DBUtil.tableHasForeignKey("B#:X-==,ZL", "B#:X-==,ZL", "]xyu2|{MJ`2'p", foreignKeyInfo0, (SessionInfoProvider) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      ComponentListener componentListener0 = mock(ComponentListener.class, new ViolatedAssumptionAnswer());
      AWTEventMulticaster.remove(componentListener0, componentListener0);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.remove((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      AWTEventMulticaster.add((ComponentListener) null, (ComponentListener) null);
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      DefaultCaret defaultCaret2 = new DefaultCaret();
      MouseListener mouseListener0 = AWTEventMulticaster.remove((MouseListener) defaultCaret2, (MouseListener) defaultCaret0);
      DefaultCaret defaultCaret3 = new DefaultCaret();
      AWTEventMulticaster.add((MouseListener) defaultCaret1, mouseListener0);
      // Undeclared exception!
      try { 
        DBUtil.getCatSep((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.sanityCheckPreferences((ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      String string0 = "na`";
      String string1 = "p=VEv.C_mO;J/,/";
      // Undeclared exception!
      try { 
        DBUtil.getQualifiedObjectName((ISession) null, "p=VEv.C_mO;J/,/", (String) null, "((4\"jGFU", 5231);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      // Undeclared exception!
      try { 
        DBUtil.checkKeyword((ISession) null, "aW", "WindowManager.registerSessionSheet");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      DefaultCaret defaultCaret1 = new DefaultCaret();
      MouseListener mouseListener0 = AWTEventMulticaster.remove((MouseListener) defaultCaret0, (MouseListener) defaultCaret1);
      DefaultCaret defaultCaret2 = new DefaultCaret();
      AWTEventMulticaster.add(mouseListener0, (MouseListener) defaultCaret0);
      // Undeclared exception!
      try { 
        DBUtil.getTableCount((ISession) null, "extact(day fom ?1)", "extact(day fom ?1)", "extact(day fom ?1)", 0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 83
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      String string0 = "na`";
      String string1 = "((4jGFU";
      // Undeclared exception!
      try { 
        DBUtil.fixCase((ISession) null, "na`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/ubuntu");
      FileSystemHandling.appendLineToFile(evoSuiteFile0, "7IR5khG\"SJfi_1W[7f?");
      DBCopyPlugin dBCopyPlugin0 = new DBCopyPlugin();
      EvoSuiteFile evoSuiteFile1 = new EvoSuiteFile("Unknown/Unknown");
      FileSystemHandling.setPermissions(evoSuiteFile1, false, false, false);
      FileWrapperFactoryImpl fileWrapperFactoryImpl0 = new FileWrapperFactoryImpl();
      FileWrapperImpl fileWrapperImpl0 = (FileWrapperImpl)fileWrapperFactoryImpl0.create("Unknown", "Unknown");
      fileWrapperImpl0.getAbsolutePath();
      fileWrapperImpl0.mkdirs();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      fileWrapperImpl0.deleteOnExit();
      FileWrapperImpl fileWrapperImpl1 = (FileWrapperImpl)FileWrapperImpl.createTempFile(" rows ? to ?", "7IR5khG\"SJfi_1W[7f?", (FileWrapper) fileWrapperImpl0);
      fileWrapperImpl1.toURI();
      FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      FileWrapperImpl.createTempFile(" rows ? to ?", "/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown", fileWrapperImpl0);
      fileWrapperImpl0.renameTo(fileWrapperImpl1);
      FileWrapperFactoryImpl fileWrapperFactoryImpl1 = new FileWrapperFactoryImpl();
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      FileWrapperImpl fileWrapperImpl2 = new FileWrapperImpl(fileWrapperImpl0);
      fileWrapperFactoryImpl0.create(fileWrapperImpl2);
      fileWrapperFactoryImpl1.createTempFile("/home/ubuntu/termite/projects/102_squirrel-sql/Unknown/Unknown", " rows ? to ?");
      fileWrapperFactoryImpl1.createTempFile("Unknown", "<Y", (FileWrapper) fileWrapperImpl0);
      dBCopyPlugin0.getDestSession();
      int int0 = DBUtil.replaceDistinctDataType(478, (TableColumnInfo) null, (ISession) null);
      assertEquals(478, int0);
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      SQLAlias sQLAlias0 = new SQLAlias();
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel(254, 254, 254, 254);
      StyledEditorKit.BoldAction styledEditorKit_BoldAction0 = new StyledEditorKit.BoldAction();
      JMenu jMenu0 = new JMenu(styledEditorKit_BoldAction0);
      styledEditorKit_BoldAction0.setEnabled(true);
      JPopupMenu jPopupMenu0 = jMenu0.getPopupMenu();
      JRadioButtonMenuItem jRadioButtonMenuItem0 = new JRadioButtonMenuItem("*!1NTwbK(>I2Xk>m", true);
      jPopupMenu0.resetKeyboardActions();
      jPopupMenu0.paintImmediately(254, 4194304, 4194304, 4194304);
      sQLAlias0.setPassword((String) null);
      sQLAlias0.getDriverPropertiesClone();
      SQLDriver sQLDriver0 = new SQLDriver();
      // Undeclared exception!
      try { 
        DBUtil.getTableInfo((ISession) null, "<9gzh}*#Ez", "*!1NTwbK(>I2Xk>m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      DBCopyPreferenceBean dBCopyPreferenceBean0 = new DBCopyPreferenceBean();
      dBCopyPreferenceBean0.setAppendRecordsToExisting(true);
      dBCopyPreferenceBean0.setPromptForDialect(true);
      dBCopyPreferenceBean0.setAppendRecordsToExisting(true);
      dBCopyPreferenceBean0.setRecordDelayMillis(4L);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      dBCopyPreferenceBean0.setWriteScript(true);
      dBCopyPreferenceBean0.setCopyForeignKeys(true);
      DBUtil.setPreferences(dBCopyPreferenceBean0);
      assertTrue(dBCopyPreferenceBean0.isTestColumnNames());
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      DBUtil dBUtil0 = new DBUtil();
      assertNull(dBUtil0.getLastStatementValues());
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.5271837172395382
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      DBUtil.setLastStatement("@XFuz>2p1n");
      DBUtil.setLastStatementValues("@XFuz>2p1n");
      // Undeclared exception!
      try { 
        DBUtil.isKeyword((ISession) null, "org.jfree.data.general.SubSeriesDataset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }

  /**
  //Test case number: 89
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      DefaultCaret defaultCaret0 = new DefaultCaret();
      SpinnerNumberModel spinnerNumberModel0 = new SpinnerNumberModel();
      JSpinner jSpinner0 = new JSpinner();
      jSpinner0.getAlignmentX();
      Box box0 = Box.createVerticalBox();
      JToolTip jToolTip0 = box0.createToolTip();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("DBUtil.error.unknowntype");
      mockPrintWriter0.append((CharSequence) "DBUtil.error.unknowntype");
      mockPrintWriter0.print((double) 0);
      jToolTip0.list((PrintWriter) mockPrintWriter0, 3162);
      jSpinner0.setEditor(jToolTip0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      JSpinner jSpinner1 = new JSpinner();
      JSpinner.NumberEditor jSpinner_NumberEditor0 = new JSpinner.NumberEditor(jSpinner0);
      // Undeclared exception!
      try { 
        DBUtil.sameDatabaseType((ISession) null, (ISession) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("net.sourceforge.squirrel_sql.plugins.dbcopy.util.DBUtil", e);
      }
  }
}
