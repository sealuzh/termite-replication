/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 01:20:41 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=1.7991492127145396
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "R-2F$1k;,;h#n3");
      StringReader stringReader0 = new StringReader("R-2F$1k;,;h#n3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.ttype = (-4);
      jSTerm0.makeEval(false);
      streamTokenizer0.commentChar(1011);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.add((Object) "R-2F$1k;,;h#n3");
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars((-15), (-4));
      streamTokenizer0.ttype = (-1);
      jSSubstitution0.add((Object) null);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer2.whitespaceChars((-1), (-1));
      jSSubstitution0.retainAll(jSPredicateForm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
      assertTrue(jSSubstitution0.fail());
      
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      assertTrue(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.7991492127145396
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "R-2F$1k;,;h#n3");
      StringReader stringReader0 = new StringReader("R-2F$1k;,;h#n3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.nval = (double) (-4);
      jSTerm0.makeEval(false);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.add((Object) "R-2F$1k;,;h#n3");
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars(0, (-4));
      streamTokenizer0.ttype = (-1);
      jSSubstitution0.add((Object) null);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer2.whitespaceChars((-1), (-1));
      jSTerm0.matches(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm1.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "dg5");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      Function<String, String> function3 = Function.identity();
      Function<String, String> function4 = unaryOperator1.andThen((Function<? super String, ? extends String>) function3);
      Function<Object, String> function5 = function4.compose((Function<? super Object, ? extends String>) function1);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, Object> function7 = function5.andThen((Function<? super String, ?>) function6);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator.identity();
      Function<Object, String> function8 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function9 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator1.andThen((Function<? super String, ?>) unaryOperator0);
      function9.andThen((Function<? super String, ?>) function7);
      function5.andThen((Function<? super String, ?>) function6);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.apply("FTtdM)0X,8kI");
      Function<Object, Integer> function10 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function10);
      unaryOperator2.compose((Function<? super Object, ? extends String>) function2);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("8.0");
      jSTerm0.add((Object) null);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.lowerCaseMode(false);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("u");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "dg5");
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      jSTerm0.add((Object) "dg5");
      Integer integer0 = new Integer((-2073486875));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      unaryOperator0.apply("dg5");
      System.setCurrentTimeMillis(943L);
      System.setCurrentTimeMillis((-2559L));
      System.setCurrentTimeMillis((-1L));
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( |");
      stringReader0.reset();
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = 'z';
      charArray0[4] = 'c';
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      stringReader0.mark(896);
      stringReader0.ready();
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("( |");
      stringReader0.markSupported();
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("( |");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=0.8386877468598375
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      StringReader stringReader0 = new StringReader("S=:b'En  v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      jSTerm0.add((Object) jSTerm0);
      StringReader stringReader1 = new StringReader("F4}o");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar(33);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("Tz");
      stringReader0.read();
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      jSTerm0.listIterator();
      char[] charArray0 = new char[1];
      charArray0[0] = ')';
      // Undeclared exception!
      try { 
        stringReader0.read(charArray0, (-4), (-182));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.4500464848915064
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Dg5");
      StringReader stringReader0 = new StringReader("O'3h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nextToken();
      stringReader0.read();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.leftPar = (-3);
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      jSPredicateForm0.replaceAll(unaryOperator0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.toStr();
      JSPredicateForm jSPredicateForm2 = new JSPredicateForm();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      streamTokenizer2.resetSyntax();
      jSTerm1.equals(jSPredicateForm0);
      jSPredicateForm1.standarizerPredicateForm();
      jSPredicateForm2.toStr();
      JSPredicateForm jSPredicateForm3 = null;
      try {
        jSPredicateForm3 = new JSPredicateForm("Unexpected ) while reading Predicate");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( $");
      stringReader0.reset();
      stringReader0.mark(890);
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.reset();
      stringReader0.reset();
      stringReader0.mark(890);
      stringReader0.mark(46);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("( $");
      stringReader1.markSupported();
      stringReader1.reset();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.reset();
      CharBuffer charBuffer0 = CharBuffer.allocate(40);
      charBuffer0.rewind();
      CharBuffer charBuffer1 = CharBuffer.allocate(1958);
      CharBuffer.allocate(1958);
      charBuffer0.read(charBuffer1);
      stringReader1.reset();
      stringReader1.read(charBuffer0);
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("( $");
      stringReader2.skip(425L);
      stringReader1.reset();
      stringReader1.mark(0);
      stringReader1.reset();
      StringReader stringReader3 = new StringReader("0.0");
      stringReader0.markSupported();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.8779917020604717
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      StringReader stringReader0 = new StringReader("S=:b'En  v");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      StringReader stringReader1 = new StringReader("F4}o");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.ordinaryChar(33);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader2 = new StringReader("Tz");
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      jSTerm2.equals((JSPredicateForm) jSTerm0);
      jSTerm0.print();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      jSTerm2.trimToSize();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSPredicateForm0.toStr();
      StringReader stringReader3 = new StringReader("failed substitution");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader3);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer3);
      jSTerm1.print();
      assertTrue(jSTerm1.equals((Object)jSTerm2));
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.2651550604203954
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "/As");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Object object0 = new Object();
      Predicate<JSPredicateForm> predicate0 = Predicate.isEqual(object0);
      jSSubstitution0.removeIf(predicate0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      Object[] objectArray0 = new Object[2];
      objectArray0[0] = (Object) jSSubstitution1;
      jSPredicateForm0.lastElement();
      objectArray0[1] = (Object) "/As";
      jSPredicateForm0.toArray();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution1);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      jSTerm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm3.setSize(2851);
      jSPredicateForm3.add((Object) jSSubstitution1);
      jSTerm0.matches(jSPredicateForm2);
      jSPredicateForm3.matches(jSPredicateForm1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.trimToSize();
      jSSubstitution2.containsAll(jSPredicateForm1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeElements(jSSubstitution0);
      jSSubstitution2.iterator();
      JSPredicateForm jSPredicateForm4 = new JSPredicateForm();
      jSPredicateForm0.equals((JSPredicateForm) jSTerm0);
      JSJshopVars.leftPar = 47;
      // Undeclared exception!
      try { 
        jSPredicateForm3.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.3395011034083075
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "IJs");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      System.setCurrentTimeMillis(1242L);
      jSPredicateForm1.print();
      System.setCurrentTimeMillis((-1179L));
      System.setCurrentTimeMillis(1242L);
      jSPredicateForm1.ensureCapacity((-1953609307));
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm2.applySubstitutionPF(jSSubstitution0);
      jSTerm0.matches(jSPredicateForm3, jSSubstitution0);
      StringReader stringReader0 = new StringReader("r65");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSPredicateForm2.add((Object) jSTerm1);
      jSPredicateForm2.print();
      jSPredicateForm0.equals(jSPredicateForm2);
      System.setCurrentTimeMillis(1242L);
      // Undeclared exception!
      try { 
        jSPredicateForm3.subList((-1953609307), 1762);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // fromIndex = -1953609307
         //
         verifyException("java.util.SubList", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=1.455848709151796
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "hJs");
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      jSPredicateForm0.add((Object) "hJs");
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Iterator iterator0 = jSSubstitution0.iterator();
      jSSubstitution0.add((Object) iterator0);
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) null);
      jSSubstitution0.add((Object) "Predicateform.print(): 0 elements");
      jSSubstitution0.add((Object) jSSubstitution0);
      Object object0 = new Object();
      Iterator iterator1 = jSSubstitution0.iterator();
      jSSubstitution0.add((Object) iterator0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) iterator1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) iterator0);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.addAll((Collection) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.remove((Object) iterator1);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.retainAll(jSSubstitution0);
      jSSubstitution0.addElements(jSSubstitution0);
      jSSubstitution0.addElements(jSSubstitution0);
      jSSubstitution0.trimToSize();
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( |");
      stringReader0.reset();
      char[] charArray0 = new char[5];
      charArray0[0] = 'm';
      charArray0[1] = '<';
      charArray0[2] = 'c';
      charArray0[3] = 'z';
      charArray0[4] = 'c';
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      stringReader0.mark(896);
      stringReader0.ready();
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("( |");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("; ");
      stringReader1.reset();
      stringReader1.reset();
      char[] charArray1 = new char[1];
      stringReader2.read(charArray1);
      stringReader1.mark(127);
      stringReader2.mark(896);
      stringReader2.markSupported();
      stringReader2.mark(393);
      stringReader2.read();
      stringReader2.markSupported();
      StringReader stringReader3 = new StringReader("OL{\";L~uY");
      StringReader stringReader4 = new StringReader("OL{\";L~uY");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "( |", 1, 1);
      stringReader1.read(charBuffer0);
      stringReader2.reset();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "/As");
      jSTerm0.add((Object) "/As");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "/As");
      jSSubstitution0.add((Object) jSTerm0);
      jSSubstitution0.add((Object) "/As");
      jSSubstitution0.remove((Object) "/As");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.1919779039412317
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "R-2F$1k;,;h#n3");
      StringReader stringReader0 = new StringReader("R-2F$1k;,;h#n3");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.pushBack();
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer1.nval = (double) (-4);
      jSTerm0.makeEval(false);
      streamTokenizer0.commentChar(1011);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "R-2F$1k;,;h#n3");
      jSTerm0.add((Object) jSTerm1);
      JSSubstitution jSSubstitution0 = jSTerm1.matches((JSPredicateForm) jSTerm0);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.whitespaceChars(0, (-4));
      streamTokenizer0.ttype = (-4);
      jSSubstitution0.add((Object) null);
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      streamTokenizer2.whitespaceChars((-4), (-4));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm0.clonePF();
      jSTerm1.clonePF();
      JSPredicateForm jSPredicateForm2 = jSTerm0.standarizerPredicateForm();
      assertTrue(jSPredicateForm2.equals((Object)jSPredicateForm1));
      
      boolean boolean0 = jSTerm0.equals(jSPredicateForm0);
      assertEquals("[R-2F$1k;,;h#n3, [R-2F$1k;,;h#n3]]", jSPredicateForm0.toString());
      assertTrue(jSSubstitution0.fail());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.810116318288409
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "R-2F$1k;,;h#n3");
      StringReader stringReader0 = new StringReader("O'3h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ttype = (-1570);
      streamTokenizer1.slashStarComments(false);
      jSTerm0.add((Object) "O'3h");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer2.commentChar((-1570));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ttype = (-1570);
      streamTokenizer3.quoteChar((-4));
      streamTokenizer0.wordChars((-4), (-1570));
      streamTokenizer2.nval = (-17.248818395568396);
      streamTokenizer0.slashStarComments(false);
      jSTerm0.stream();
      System.setCurrentTimeMillis((-1570));
      streamTokenizer0.ordinaryChars((-28785970), (-1570));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "Dg5");
      jSTerm0.add((Object) null);
      StringReader stringReader0 = new StringReader(".");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort((Comparator) null);
      jSTerm0.add((Object) "dg5");
      jSTerm0.sort((Comparator) null);
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      jSTerm0.makeEval(true);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      assertFalse(jSSubstitution1.fail());
  }

  /**
  //Test case number: 22
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.dot = (-419);
      JSJshopVars.leftPar = (-419);
      JSJshopVars.equalT = (-1910);
      JSJshopVars.dot = (-1910);
      JSJshopVars.dot = (-1910);
      JSJshopVars.minus = (-1910);
      JSJshopVars.verticalL = (-1910);
      JSJshopVars.dot = (-419);
      JSJshopVars.dot = (-1910);
      JSJshopVars.leftBrac = (-1910);
      System.setCurrentTimeMillis((-1910));
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Object object0 = jSPredicateForm0.clone();
      jSPredicateForm0.add(object0);
      int int0 = 5573;
      System.setCurrentTimeMillis(5573);
      // Undeclared exception!
      try { 
        jSPredicateForm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "/65");
      StringReader stringReader0 = new StringReader("0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = "0";
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = 749.85137164034;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      streamTokenizer2.commentChar(61);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.lowerCaseMode(false);
      streamTokenizer3.whitespaceChars((-4), (-4));
      streamTokenizer4.sval = null;
      streamTokenizer4.whitespaceChars((-700), (-899));
      streamTokenizer2.wordChars((-1), (-1));
      streamTokenizer4.ordinaryChars((-1), 2161);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer5.resetSyntax();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      assertEquals(0.0, streamTokenizer6.nval, 0.01);
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.9909065731902369
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "/65");
      StringReader stringReader0 = new StringReader("0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.nval = (double) (-4);
      streamTokenizer0.sval = "0";
      streamTokenizer0.ordinaryChar((-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-24750922));
      streamTokenizer1.commentChar((-24750922));
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer1.nval = 749.85137164034;
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      streamTokenizer2.commentChar(61);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer3.lowerCaseMode(false);
      streamTokenizer3.whitespaceChars((-4), (-4));
      streamTokenizer4.sval = null;
      streamTokenizer4.whitespaceChars((-700), (-899));
      streamTokenizer2.wordChars((-1), (-1));
      streamTokenizer4.ordinaryChars((-1), 2175);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer1.whitespaceChars((-4), (-24750922));
      streamTokenizer5.resetSyntax();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      assertFalse(streamTokenizer6.equals((Object)streamTokenizer4));
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( $");
      stringReader0.reset();
      stringReader0.mark(896);
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.reset();
      stringReader0.reset();
      stringReader0.mark(896);
      stringReader0.mark(4369);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("( $");
      stringReader1.markSupported();
      stringReader1.reset();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.addElement("( $");
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals("(( $)", stringBuffer0.toString());
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.colon = (-2205);
      JSJshopVars.astherisk = (-2205);
      JSJshopVars.flagLevel = (-598);
      JSJshopVars.plus = 5583;
      JSJshopVars.leftPar = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.whiteSpace = 984;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.colon = 5583;
      JSJshopVars.rightPar = (-2205);
      JSJshopVars.interrogation = 5583;
      JSJshopVars.astherisk = 5583;
      JSJshopVars.leftBrac = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.rightBrac = 5583;
      JSJshopVars.lessT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      jSPredicateForm0.add((Object) null);
      JSJshopVars.apostrophe = 5583;
      JSJshopVars.whiteSpace = 3076;
      JSJshopVars.minus = 5583;
      JSJshopVars.percent = 5583;
      JSJshopVars.greaterT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.leftBrac = 5583;
      // Undeclared exception!
      try { 
        jSPredicateForm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.0730116670092564
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(/,qjw");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      assertEquals(0, jSPredicateForm0.size());
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.9623351446188083
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.plus = 5583;
      JSJshopVars.leftPar = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.colon = 5583;
      JSJshopVars.astherisk = 124;
      JSJshopVars.minus = 5583;
      JSJshopVars.rightBrac = 5583;
      jSPredicateForm0.addElement("umd.cs.shop.JSPredicateForm");
      JSJshopVars.lessT = 124;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.apostrophe = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.percent = 124;
      JSJshopVars.greaterT = 5583;
      JSJshopVars.dot = 5583;
      jSPredicateForm0.print();
      System.setCurrentTimeMillis(5583);
      System.setCurrentTimeMillis((-117L));
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("( $");
      stringReader0.reset();
      stringReader0.markSupported();
      stringReader0.mark(896);
      stringReader0.ready();
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("$E]|yuB}(ea");
      stringReader0.markSupported();
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("; ");
      stringReader2.mark(896);
      stringReader1.reset();
      stringReader1.reset();
      char[] charArray0 = new char[1];
      stringReader1.read();
      stringReader2.read(charArray0);
      stringReader1.mark(124);
      stringReader2.mark(896);
      stringReader2.read();
      stringReader2.markSupported();
      StringReader stringReader3 = new StringReader("OL{\";L~uY");
      StringReader stringReader4 = new StringReader("->");
      StringReader stringReader5 = new StringReader("call");
      stringReader5.reset();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSPredicateForm0.print();
      assertTrue(jSPredicateForm0.isEmpty());
  }

  /**
  //Test case number: 32
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "dg5");
      jSTerm0.removeElement(jSTerm0);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function4 = function2.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Integer integer0 = new Integer(0);
      unaryOperator0.apply(function4);
      function2.andThen((Function<? super String, ?>) function5);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      jSTerm0.firstElement();
      jSTerm0.add((Object) function2);
      unaryOperator1.apply("7b.90gOi)pLq>uQtS");
      function3.andThen((Function<? super String, ? extends String>) function5);
      Function<Object, Integer> function6 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super String, ? extends Integer>) function6);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function3);
      UnaryOperator.identity();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) null);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort((Comparator) null);
      jSTerm0.add((Object) "dg5");
      jSTerm0.sort((Comparator) null);
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      jSTerm0.makeEval(true);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      jSSubstitution0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.1901673943042492
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm0.add((Object) "dg5");
      jSTerm0.sort((Comparator) null);
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      JSTerm jSTerm1 = (JSTerm)jSTerm0.clone();
      jSTerm0.makeEval(false);
      jSTerm0.matches((JSPredicateForm) jSTerm0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertFalse(jSSubstitution0.fail());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=1.4942662253853725
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.plus = 5583;
      JSJshopVars.leftPar = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.colon = 5583;
      JSJshopVars.astherisk = 124;
      JSJshopVars.minus = 5583;
      JSJshopVars.rightBrac = 5583;
      JSJshopVars.semicolon = (-2);
      jSPredicateForm0.addElement("umd.cs.shop.JSPredicateForm");
      JSJshopVars.lessT = 124;
      JSJshopVars.exclamation = (-1042);
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.apostrophe = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.percent = 124;
      JSJshopVars.greaterT = 5583;
      JSJshopVars.colon = 3832;
      JSJshopVars.semicolon = 2303;
      StringReader stringReader0 = new StringReader("a`mzF2TZ`G");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches(jSPredicateForm0);
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.2248830687452417
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "dg5");
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      jSTerm0.add((Object) "dg5");
      jSTerm0.clone();
      jSTerm0.makeEval(false);
      jSTerm0.add((Object) "dg5");
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "/65";
      jSTerm0.add((Object) "/65");
      jSTerm0.add((Object) "6z{p  CedDjoO(Wt");
      StringReader stringReader0 = new StringReader("O'3h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=1.0650855968662414
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("O'&3h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      jSTerm0.add((Object) null);
      jSTerm0.add((Object) streamTokenizer2);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.180066384203239
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort((Comparator) null);
      jSTerm0.parallelStream();
      jSTerm0.add((Object) "dg5");
      jSTerm0.sort((Comparator) null);
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      jSTerm0.makeEval(true);
      Consumer<Integer> consumer0 = (Consumer<Integer>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm0);
      Integer integer0 = new Integer((-1));
      jSSubstitution0.add((Object) integer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort((Comparator) null);
      jSTerm0.add((Object) "dg5");
      jSTerm0.sort((Comparator) null);
      jSTerm0.removeElement(jSTerm0);
      jSTerm0.add((Object) jSTerm0);
      jSTerm0.listIterator();
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<String, String> function2 = Function.identity();
      Function<Object, String> function3 = function1.andThen((Function<? super String, ? extends String>) function2);
      Function.identity();
      Object object0 = jSTerm0.clone();
      unaryOperator0.apply(object0);
      UnaryOperator<String> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.apply("ab&d2idt$f");
      Function<Object, String> function4 = function3.andThen((Function<? super String, ? extends String>) function2);
      Function.identity();
      unaryOperator1.andThen((Function<? super String, ?>) function3);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super JSTerm, ? extends String>) function1);
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super String, ? extends Integer>) function5);
      unaryOperator1.compose((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm1.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("uy{HQ2x@eA");
      stringReader0.ready();
      stringReader0.reset();
      int int0 = 44;
      stringReader0.ready();
      stringReader0.mark(44);
      stringReader0.ready();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("uy{HQ2x@eA");
      stringReader0.ready();
      stringReader0.reset();
      int int0 = 44;
      stringReader0.mark(44);
      stringReader0.ready();
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.plus = 5583;
      JSJshopVars.leftPar = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.colon = 602;
      JSJshopVars.astherisk = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.rightBrac = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.percent = 5583;
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.colon = (-2205);
      JSJshopVars.astherisk = (-2205);
      JSJshopVars.flagLevel = (-598);
      JSJshopVars.plus = 5583;
      JSJshopVars.leftPar = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.whiteSpace = 984;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.colon = 5583;
      JSJshopVars.astherisk = 5583;
      JSJshopVars.leftBrac = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.rightBrac = 5583;
      JSJshopVars.lessT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.apostrophe = 5583;
      JSJshopVars.whiteSpace = 3076;
      JSJshopVars.minus = 5583;
      JSJshopVars.percent = 5583;
      JSJshopVars.greaterT = 5583;
      JSJshopVars.dot = 5583;
      StringReader stringReader0 = new StringReader("F[(.&M");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.plus = 5583;
      JSJshopVars.leftPar = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.colon = 5583;
      JSJshopVars.astherisk = 124;
      JSJshopVars.minus = 5583;
      JSJshopVars.rightBrac = 5583;
      jSPredicateForm0.addElement("umd.cs.shop.JSPredicateForm");
      JSJshopVars.lessT = 124;
      JSJshopVars.exclamation = (-1028);
      JSJshopVars.apostrophe = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.greaterT = 5583;
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.543056733112554
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.leftPar = 5576;
      JSJshopVars.equalT = 5576;
      JSJshopVars.dot = 5576;
      JSJshopVars.dot = 5576;
      JSJshopVars.equalT = 5576;
      JSJshopVars.verticalL = 5576;
      JSJshopVars.verticalL = 5576;
      JSJshopVars.astherisk = (-1);
      JSJshopVars.minus = 5576;
      JSJshopVars.verticalL = 5576;
      JSJshopVars.rightBrac = 5576;
      JSJshopVars.dot = 5576;
      JSJshopVars.equalT = JSJshopVars.equalT;
      JSJshopVars.dot = 5576;
      JSJshopVars.minus = 5576;
      System.setCurrentTimeMillis((-1910));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort((Comparator) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      Function<Object, Object> function6 = Function.identity();
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function5.apply((String) null);
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      function6.apply(function3);
      Function<Object, String> function9 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function5.compose((Function<? super Integer, ? extends String>) function2);
      Function<Object, String> function10 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function9);
      Function<Object, String> function11 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function9);
      Function<String, String> function12 = Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function13 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      function12.compose((Function<? super Object, ? extends String>) function13);
      function10.andThen((Function<? super String, ? extends String>) unaryOperator0);
      function5.compose((Function<? super Object, ? extends String>) function10);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      function13.andThen((Function<? super String, ? extends Integer>) function8);
      Function<Object, String> function14 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function2);
      function14.andThen((Function<? super String, ?>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function4);
      function11.andThen((Function<? super String, ?>) function6);
      unaryOperator5.andThen((Function<? super String, ?>) function13);
      unaryOperator5.andThen((Function<? super String, ?>) function9);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSJshopVars.whiteSpace = (-1547);
      JSJshopVars.colon = (-2205);
      JSJshopVars.astherisk = (-2205);
      JSJshopVars.flagLevel = (-598);
      JSJshopVars.plus = 5583;
      JSJshopVars.leftPar = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.whiteSpace = 984;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.colon = 5583;
      JSJshopVars.astherisk = 5583;
      JSJshopVars.leftBrac = 5583;
      JSJshopVars.minus = 5583;
      JSJshopVars.verticalL = 5583;
      JSJshopVars.rightBrac = 5583;
      JSJshopVars.lessT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.equalT = 5583;
      JSJshopVars.dot = 5583;
      JSJshopVars.apostrophe = 5583;
      JSJshopVars.whiteSpace = 3076;
      JSJshopVars.minus = 5583;
      JSJshopVars.percent = 5583;
      JSJshopVars.greaterT = 5583;
      System.setCurrentTimeMillis(5583);
      StringReader stringReader0 = new StringReader(" ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      Function<Object, Object> function6 = Function.identity();
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function5.compose((Function<? super Integer, ? extends String>) function2);
      Function<Object, String> function9 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function8);
      Function<Object, String> function10 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function8);
      Function<String, String> function11 = Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function12 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      function11.compose((Function<? super Object, ? extends String>) function12);
      Function<Object, String> function13 = function9.andThen((Function<? super String, ? extends String>) unaryOperator0);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function14 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function2);
      function14.andThen((Function<? super String, ?>) function5);
      UnaryOperator<String> unaryOperator5 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function4);
      function10.andThen((Function<? super String, ?>) function6);
      unaryOperator5.compose((Function<? super Object, ? extends String>) function13);
      UnaryOperator.identity();
      StringReader stringReader0 = new StringReader("( $");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.8063294488351005
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "IJs");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSSubstitution0.add((Object) "IJs");
      Object object0 = new Object();
      Iterator iterator0 = jSSubstitution0.iterator();
      jSSubstitution0.add((Object) jSPredicateForm0);
      jSSubstitution0.add((Object) jSPredicateForm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.removeElements(jSSubstitution1);
      jSSubstitution1.add((Object) iterator0);
      jSSubstitution0.add(object0);
      jSSubstitution1.add((Object) jSPredicateForm0);
      jSSubstitution0.removeAll(jSTerm0);
      jSSubstitution1.add((Object) jSTerm0);
      jSSubstitution1.removeAllElements();
      jSSubstitution0.addAll((Collection) jSPredicateForm0);
      jSSubstitution0.add((Object) "expecting variable name in term");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.remove((Object) "expecting variable name in term");
      jSSubstitution0.removeAllElements();
      jSSubstitution0.retainAll(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.addElements(jSSubstitution2);
      jSSubstitution2.trimToSize();
      jSSubstitution2.add((Object) jSSubstitution4);
      jSSubstitution3.remove((Object) "expecting variable name in term");
      jSSubstitution3.containsAll(jSTerm0);
      jSSubstitution2.removeElements(jSSubstitution0);
      JSPredicateForm jSPredicateForm1 = null;
      try {
        jSPredicateForm1 = new JSPredicateForm("expecting variable name in term");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = function1.andThen((Function<? super String, ? extends String>) unaryOperator0);
      Function<String, String> function3 = unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<Object, JSTerm> function4 = (Function<Object, JSTerm>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.compose((Function<? super Object, ?>) function4);
      Function.identity();
      Function<Object, Integer> function5 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function1.andThen((Function<? super String, ? extends Integer>) function5);
      function2.andThen((Function<? super String, ?>) function2);
      unaryOperator0.compose((Function<? super String, ? extends String>) function1);
      Function<String, String> function6 = unaryOperator0.compose((Function<? super String, ? extends String>) function2);
      function6.apply((String) null);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function7 = function6.compose((Function<? super Object, ? extends String>) function2);
      unaryOperator0.compose((Function<? super String, ? extends String>) function3);
      unaryOperator1.compose((Function<? super JSPredicateForm, ?>) function1);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      function6.compose((Function<? super Object, ? extends String>) function7);
      function6.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function8);
      unaryOperator2.apply(function6);
      unaryOperator0.apply("o$CMj-h0%x.i<");
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = null;
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.7488320958430319
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( $");
      stringReader0.reset();
      stringReader0.mark(896);
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.reset();
      stringReader0.reset();
      stringReader0.mark(896);
      stringReader0.mark(4369);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("( $");
      stringReader1.markSupported();
      stringReader1.reset();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      stringReader1.reset();
      CharBuffer charBuffer0 = CharBuffer.allocate(40);
      charBuffer0.limit(40);
      CharBuffer charBuffer1 = CharBuffer.allocate(1958);
      charBuffer0.read(charBuffer1);
      stringReader1.reset();
      stringReader1.read(charBuffer0);
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader("( $");
      stringReader2.skip(428L);
      stringReader1.reset();
      stringReader1.mark(0);
      stringReader1.reset();
      StringReader stringReader3 = new StringReader("0.0");
      stringReader0.markSupported();
      streamTokenizer0.resetSyntax();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Iterator iterator0 = jSSubstitution0.iterator();
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) "Predicateform.print(): 0 elements");
      jSSubstitution0.add((Object) jSSubstitution0);
      Object[] objectArray0 = new Object[22];
      objectArray0[1] = (Object) iterator0;
      objectArray0[1] = (Object) jSSubstitution0;
      objectArray0[4] = (Object) jSSubstitution0;
      Object object0 = new Object();
      objectArray0[5] = object0;
      objectArray0[7] = (Object) jSSubstitution0;
      objectArray0[8] = (Object) "Predicateform.print(): 0 elements";
      jSSubstitution0.toArray(objectArray0);
      Iterator iterator1 = jSSubstitution0.iterator();
      jSSubstitution0.add((Object) iterator0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeElements(jSSubstitution0);
      jSSubstitution0.add((Object) iterator1);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.removeAll(jSSubstitution0);
      jSSubstitution0.add((Object) iterator0);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.addAll((Collection) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.remove((Object) jSSubstitution0);
      jSSubstitution0.remove((Object) iterator1);
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.retainAll(jSSubstitution1);
      jSSubstitution1.addElements(jSSubstitution0);
      jSSubstitution1.addElements(jSSubstitution0);
      jSSubstitution0.trimToSize();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.remove((Object) iterator0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("( $");
      stringReader0.reset();
      stringReader0.mark(896);
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.reset();
      stringReader0.reset();
      stringReader0.mark(896);
      stringReader0.mark(4369);
      stringReader0.read();
      StringReader stringReader1 = new StringReader("( $");
      stringReader1.markSupported();
      CharBuffer charBuffer0 = CharBuffer.allocate(0);
      char[] charArray0 = new char[4];
      charArray0[0] = 'G';
      charArray0[1] = 'B';
      charArray0[2] = 'F';
      charArray0[3] = 'H';
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer0.read(charBuffer1);
      charBuffer0.order();
      stringReader1.read(charBuffer0);
      stringReader1.reset();
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader1.reset();
      CharBuffer charBuffer2 = CharBuffer.allocate(10);
      stringReader1.read(charBuffer2);
      stringReader0.markSupported();
      stringReader1.skip(0L);
      stringReader0.reset();
      stringReader0.close();
      stringReader1.mark(45);
      StringReader stringReader2 = new StringReader("0.0");
      stringReader1.markSupported();
      streamTokenizer0.resetSyntax();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = 1986;
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(qjw");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Iterator iterator0 = jSSubstitution0.iterator();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAll(jSSubstitution0);
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.add((Object) jSSubstitution0);
      Iterator iterator1 = jSSubstitution1.iterator();
      jSSubstitution0.add((Object) iterator0);
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution1.removeElements(jSSubstitution1);
      jSSubstitution0.clear();
      jSSubstitution1.add((Object) jSSubstitution0);
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.forEach(consumer1);
      jSSubstitution1.removeAll(jSSubstitution0);
      jSSubstitution1.add((Object) iterator0);
      jSSubstitution1.addAll((Collection) jSSubstitution0);
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution1.remove((Object) jSSubstitution0);
      jSSubstitution0.remove((Object) iterator1);
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.addElements(jSSubstitution1);
      jSSubstitution2.addElements(jSSubstitution0);
      jSSubstitution1.trimToSize();
      jSSubstitution2.add((Object) jSSubstitution1);
      jSSubstitution0.containsAll(jSSubstitution2);
      jSSubstitution0.removeElements(jSSubstitution2);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(qjx");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.8293230219306162
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      Consumer<String> consumer1 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(qjw");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator0.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = function2.andThen((Function<? super String, ? extends String>) function1);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<String, String> function5 = unaryOperator0.compose((Function<? super String, ? extends String>) function4);
      Function<Object, Object> function6 = Function.identity();
      Function<Object, Integer> function7 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function8 = unaryOperator2.andThen((Function<? super Object, ? extends Integer>) function7);
      function6.apply(function3);
      Function<Object, String> function9 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      function5.compose((Function<? super Integer, ? extends String>) function2);
      Function<Object, String> function10 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function9);
      Function<Object, String> function11 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function9);
      Function<String, String> function12 = Function.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function13 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      function12.compose((Function<? super Object, ? extends String>) function13);
      function10.andThen((Function<? super String, ? extends String>) unaryOperator0);
      function5.compose((Function<? super Object, ? extends String>) function10);
      function13.andThen((Function<? super String, ? extends Integer>) function8);
      Function<Object, String> function14 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      function14.andThen((Function<? super String, ?>) function5);
      unaryOperator0.compose((Function<? super Object, ? extends String>) function3);
      UnaryOperator<String> unaryOperator4 = UnaryOperator.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function4);
      function11.andThen((Function<? super String, ?>) function6);
      unaryOperator4.andThen((Function<? super String, ?>) function13);
      unaryOperator4.andThen((Function<? super String, ?>) function9);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSPredicateForm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
