/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 11:10:28 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.Iterator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.UnaryOperator;
import java.util.stream.Stream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSPredicateForm_ESTest extends JSPredicateForm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isGround();
      jSTerm0.add((Object) "not");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = (-14);
      jSTerm0.iterator();
      jSTerm0.addElement((Object) null);
      System.setCurrentTimeMillis((-14));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-14));
      System.setCurrentTimeMillis((-2643L));
      System.setCurrentTimeMillis(1125L);
      System.setCurrentTimeMillis((-14));
      long long0 = 4031L;
      System.setCurrentTimeMillis(4031L);
      System.setCurrentTimeMillis((-14));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("t");
      stringReader0.close();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.isGround();
      jSTerm0.isGround();
      jSTerm0.add((Object) "not");
      jSTerm0.iterator();
      System.setCurrentTimeMillis((-14));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=1.4701319204088412
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "F{N");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Integer integer0 = new Integer((-1065));
      unaryOperator0.apply(integer0);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function1 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function0);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSTerm0.lastElement();
      jSTerm0.standarizerPredicateForm();
      JSJshopVars.equalT = (-1065);
      jSTerm0.lastElement();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.add((Object) jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      jSPredicateForm0.equals(jSPredicateForm0);
      jSPredicateForm0.replaceAll(unaryOperator1);
      jSPredicateForm0.print();
      jSPredicateForm0.replaceAll(unaryOperator2);
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      jSPredicateForm1.print();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=1.559581156259877
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "G7(");
      StringReader stringReader0 = new StringReader("G7(");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      jSTerm0.clonePF();
      stringReader0.read();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "G7(";
      stringReader0.reset();
      jSTerm0.isEmpty();
      JSJshopVars.percent = 71;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.setSize(71);
      jSTerm0.removeAll(jSTerm0);
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) "AB");
      jSSubstitution0.removeElement("M[}\"QKw1mxw*`K@x|@");
      jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) streamTokenizer0);
      jSPredicateForm0.lastElement();
      jSTerm1.isEmpty();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=1.1187433359857524
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "v7=");
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      jSPredicateForm0.addElement("v7=");
      jSPredicateForm0.removeAllElements();
      jSTerm1.isEmpty();
      JSJshopVars.rightBrac = (-550);
      JSJshopVars.exclamation = (-550);
      jSTerm1.makeFunction();
      JSJshopVars.greaterT = (-550);
      JSJshopVars.dot = (-550);
      jSTerm1.add((Object) "v7=");
      jSTerm0.clonePF();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.equals((JSPredicateForm) jSTerm0);
      System.setCurrentTimeMillis((-550));
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSTerm1.applySubstitutionPF(jSSubstitution0);
      assertFalse(jSPredicateForm1.equals((Object)jSPredicateForm0));
  }

  /**
  //Test case number: 6
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.add((Object) null);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.addElement("not");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "v7=");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.setSize(2403);
      jSTerm0.addElement("v7=");
      JSJshopVars.exclamation = 93;
      JSJshopVars.greaterT = 93;
      JSJshopVars.dot = 93;
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.240684291953396
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "a{N");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "a{N");
      jSTerm0.clonePF();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isEmpty();
      jSTerm1.lastElement();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionPF(jSSubstitution0);
      StringReader stringReader0 = new StringReader("htRpm5mkxLXK1X-6e0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm4 = new JSTerm();
      jSTerm3.add((Object) jSTerm4);
      jSTerm0.clonePF();
      jSTerm1.add((Object) "a{N");
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.add((Object) jSTerm1);
      String string0 = "(";
      stringReader0.close();
      stringReader0.markSupported();
      String string1 = "=?az8$,GIDAMxf";
      StringReader stringReader1 = new StringReader("=?az8$,GIDAMxf");
      stringReader0.close();
      jSTerm0.clonePF();
      char[] charArray0 = null;
      try { 
        stringReader0.ready();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "not";
      jSTerm0.isGround();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "a{N");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "a{N");
      jSTerm0.clonePF();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Object object0 = jSTerm1.clone();
      jSTerm0.add(object0);
      Integer integer0 = new Integer((-1065));
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      function4.andThen((Function<? super String, ? extends String>) function3);
      UnaryOperator<String> unaryOperator2 = UnaryOperator.identity();
      function4.compose((Function<? super String, ?>) function3);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function<Object, String> function6 = unaryOperator3.andThen((Function<? super Object, ? extends String>) function5);
      function6.apply(unaryOperator2);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator4 = UnaryOperator.identity();
      unaryOperator4.andThen((Function<? super Integer, ? extends String>) function5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.replaceAll(unaryOperator4);
      jSPredicateForm0.print();
      assertEquals("[a{N, [a{N]]", jSPredicateForm0.toString());
  }

  /**
  //Test case number: 12
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      jSTerm0.isGround();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm0.add((Object) jSPredicateForm0);
      jSTerm0.contains(jSPredicateForm0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "a{N");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "a{N");
      jSTerm0.clonePF();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isEmpty();
      Object[] objectArray0 = new Object[10];
      jSTerm1.lastElement();
      objectArray0[0] = (Object) "a{N";
      objectArray0[2] = (Object) jSTerm2;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAll(jSTerm0);
      jSTerm3.trimToSize();
      jSPredicateForm0.firstElement();
      jSSubstitution0.add((Object) jSTerm3);
      jSPredicateForm0.toStr();
      JSTerm jSTerm4 = (JSTerm)jSTerm0.lastElement();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm5 = (JSTerm)jSTerm4.clone();
      jSTerm5.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm4.lastElement();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("0");
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isGround();
      jSTerm0.add((Object) "t");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      int int0 = (-14);
      jSTerm0.iterator();
      jSTerm0.addElement((Object) null);
      System.setCurrentTimeMillis((-14));
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "0.0");
      StringReader stringReader0 = new StringReader("0.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer1.whitespaceChars(48, (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.2730283365896258
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "G7(";
      jSTerm0.add((Object) "G7(");
      Stream stream0 = jSTerm0.stream();
      StringReader stringReader0 = new StringReader("G7(");
      JSPredicateForm jSPredicateForm0 = jSTerm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm1.forEach(consumer0);
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.standarizerPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm3 = jSTerm0.standarizerPredicateForm();
      jSPredicateForm3.add((Object) jSPredicateForm0);
      jSPredicateForm3.addElement(stream0);
      jSPredicateForm2.print();
      // Undeclared exception!
      try { 
        jSPredicateForm3.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSPredicateForm cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.2798542258336674
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "a{N");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "a{N");
      jSTerm0.clonePF();
      jSTerm0.addElement(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      jSTerm2.isEmpty();
      Object[] objectArray0 = new Object[10];
      jSTerm1.lastElement();
      objectArray0[0] = (Object) "a{N";
      objectArray0[2] = (Object) jSTerm2;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      JSJshopVars.astherisk = 509;
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAll(jSTerm0);
      jSTerm3.trimToSize();
      jSPredicateForm0.firstElement();
      jSSubstitution0.add((Object) jSTerm3);
      jSPredicateForm0.toStr();
      JSTerm jSTerm4 = (JSTerm)jSTerm0.lastElement();
      jSTerm0.add((Object) jSSubstitution0);
      JSTerm jSTerm5 = (JSTerm)jSTerm4.clone();
      jSTerm5.isEmpty();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm4.lastElement();
      System.setCurrentTimeMillis(0L);
      StringReader stringReader0 = new StringReader("0");
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(PWqvuKtl8VR'5ujZD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.ttype = (-693);
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-313860566));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "a{n";
      stringReader0.close();
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-1132434906));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "0.0");
      StringReader stringReader0 = new StringReader("F4}o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(96, 96);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer1.whitespaceChars(70, (-4));
      jSTerm0.makeConstant();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.add((Object) streamTokenizer1);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "G7(");
      jSTerm0.isGround();
      jSTerm0.add((Object) "G7(");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(2122);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Integer integer1 = new Integer(3258);
      jSSubstitution0.add((Object) integer1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) integer0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(41);
      jSTerm0.add((Object) integer0);
      jSTerm0.add((Object) "nt");
      StringReader stringReader0 = new StringReader("nt");
      String string0 = "(";
      String string1 = null;
      stringReader0.close();
      stringReader0.markSupported();
      String string2 = "=?az8$,GIDAMxf";
      StringReader stringReader1 = new StringReader("=?az8$,GIDAMxf");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "F{N");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.add((Object) jSTerm1);
      jSTerm0.add((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEmpty();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "v7=");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.call();
      jSTerm0.setSize(2403);
      jSTerm0.addElement("v7=");
      JSJshopVars.exclamation = 93;
      JSJshopVars.greaterT = 93;
      JSJshopVars.dot = 93;
      jSTerm1.add((Object) "v7=");
      JSPredicateForm jSPredicateForm0 = jSTerm1.clonePF();
      JSJshopVars.interrogation = 2403;
      JSJshopVars.leftBrac = 93;
      jSTerm0.add((Object) jSTerm1);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "v7=");
      int int0 = 2403;
      jSTerm0.setSize(2403);
      jSTerm0.addElement("v7=");
      JSJshopVars.exclamation = 93;
      JSJshopVars.greaterT = 93;
      JSJshopVars.dot = 93;
      jSTerm0.add((Object) "v7=");
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "a{N");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "a{N");
      jSTerm0.add((Object) jSTerm1);
      Object object0 = new Object();
      Consumer<JSTerm> consumer0 = (Consumer<JSTerm>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.forEach(consumer0);
      StringReader stringReader0 = new StringReader("a{N");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars((-4), (-1135));
      streamTokenizer0.ordinaryChars((-1135), (-4));
      streamTokenizer0.commentChar((-1050));
      jSTerm0.standarizerPredicateForm();
      System.setCurrentTimeMillis((-4));
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      streamTokenizer2.commentChar((-968));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.eolIsSignificant(true);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      Function<Object, Object> function9 = function7.andThen((Function<? super String, ?>) function8);
      function4.andThen((Function<? super String, ? extends String>) function6);
      function6.compose((Function<? super Object, ?>) function9);
      function2.compose((Function<? super String, ?>) function4);
      function2.andThen((Function<? super String, ?>) function7);
      Function.identity();
      function2.andThen((Function<? super String, ?>) function4);
      Function.identity();
      function3.apply(function3);
      function4.andThen((Function<? super String, ?>) function5);
      UnaryOperator.identity();
      function4.andThen((Function<? super String, ?>) function7);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nok");
      jSTerm0.isGround();
      jSTerm0.iterator();
      jSTerm0.addElement("nok");
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2643L));
      System.setCurrentTimeMillis((-2643L));
      System.setCurrentTimeMillis(1125L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-1491L));
  }

  /**
  //Test case number: 29
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = "0.0";
      jSTerm0.add((Object) "0.0");
      StringReader stringReader0 = new StringReader("F4}o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(96, 96);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.read();
      streamTokenizer1.whitespaceChars(70, (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals((JSPredicateForm) jSTerm1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader1 = null;
      try {
        stringReader1 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nok");
      jSTerm0.isGround();
      jSTerm0.iterator();
      jSTerm0.addElement("nok");
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSPredicateForm) jSTerm0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.7890221622909377
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nok");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Object> function2 = unaryOperator2.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function3 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function3).apply(any());
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      unaryOperator1.andThen((Function<? super Object, ?>) function2);
      Function<Object, String> function5 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function6 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      function6.apply(jSPredicateForm0);
      Function.identity();
      unaryOperator2.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      function5.apply(function4);
      Function<Object, Integer> function9 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      function8.andThen((Function<? super String, ? extends Integer>) function9);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      Function.identity();
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function6);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.clonePF();
      jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      JSSubstitution jSSubstitution4 = jSTerm0.matches(jSPredicateForm1);
      assertFalse(jSSubstitution4.fail());
      
      JSPredicateForm jSPredicateForm2 = jSPredicateForm1.standarizerPredicateForm();
      boolean boolean0 = jSTerm0.equals(jSPredicateForm1);
      assertNotSame(jSPredicateForm1, jSPredicateForm0);
      assertTrue(boolean0);
      assertNotSame(jSPredicateForm1, jSPredicateForm2);
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.5571130980576458
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "nok");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator2.compose((Function<? super Object, ?>) function1);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function2).apply(any());
      Function<Object, String> function3 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function6 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function4);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      function5.apply(jSPredicateForm0);
      Function.identity();
      Function<Object, String> function7 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function4);
      UnaryOperator.identity();
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      Function.identity();
      function4.apply(function3);
      UnaryOperator.identity();
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function8);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function5);
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator3.compose((Function<? super Object, ?>) function5);
      unaryOperator3.andThen((Function<? super Object, ? extends String>) function7);
      jSPredicateForm0.firstElement();
      jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.toStr();
      jSTerm0.standarizerPredicateForm();
      jSTerm0.toStr();
      System.setCurrentTimeMillis(3279L);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.6730116670092565
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null, (Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function5);
      Function<Object, String> function7 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, Object> function8 = function6.andThen((Function<? super String, ?>) function7);
      function4.andThen((Function<? super String, ? extends String>) function5);
      Function<Object, String> function9 = function5.compose((Function<? super Object, ?>) function8);
      function2.compose((Function<? super String, ?>) function4);
      Function<Object, Object> function10 = function2.andThen((Function<? super String, ?>) function6);
      Function.identity();
      function7.andThen((Function<? super String, ?>) function10);
      Function.identity();
      function9.apply(function6);
      function3.andThen((Function<? super String, ?>) function5);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      StringReader stringReader0 = new StringReader("not");
      String string0 = "(";
      String string1 = null;
      stringReader0.close();
      stringReader0.markSupported();
      String string2 = "=?az8$,GIDAMxf";
      StringReader stringReader1 = new StringReader("=?az8$,GIDAMxf");
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSTerm0.clonePF();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "a{N");
      JSTerm jSTerm1 = new JSTerm();
      jSTerm1.add((Object) "a{N");
      jSTerm0.clonePF();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1065));
      unaryOperator0.apply(integer0);
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function6 = function4.andThen((Function<? super String, ? extends String>) function3);
      UnaryOperator<String> unaryOperator3 = UnaryOperator.identity();
      function4.compose((Function<? super String, ?>) function3);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function6);
      UnaryOperator<Object> unaryOperator4 = UnaryOperator.identity();
      Function<Object, String> function7 = unaryOperator4.andThen((Function<? super Object, ? extends String>) function5);
      function7.apply(unaryOperator3);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator5 = UnaryOperator.identity();
      unaryOperator5.andThen((Function<? super Integer, ? extends String>) function5);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSPredicateForm jSPredicateForm0 = jSTerm0.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm0.replaceAll(unaryOperator5);
      jSPredicateForm0.print();
      assertEquals(1, jSPredicateForm0.size());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "0.0");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      jSTerm0.add((Object) "0.0");
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) unaryOperator0);
      Function.identity();
      UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function6 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function7 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function6);
      Function<Object, String> function8 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function7);
      Function<Object, Object> function9 = function7.andThen((Function<? super String, ?>) function8);
      function4.andThen((Function<? super String, ? extends String>) function6);
      function6.compose((Function<? super Object, ?>) function9);
      function2.compose((Function<? super String, ?>) function4);
      function2.andThen((Function<? super String, ?>) function7);
      Function.identity();
      function6.compose((Function<? super String, ?>) function0);
      function2.andThen((Function<? super String, ?>) function4);
      function7.compose((Function<? super Integer, ?>) function5);
      Function.identity();
      function3.apply(function3);
      function4.andThen((Function<? super String, ?>) function5);
      UnaryOperator.identity();
      function4.andThen((Function<? super String, ?>) function7);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      StringBuffer stringBuffer0 = jSPredicateForm0.toStr();
      assertEquals(0, stringBuffer0.length());
  }

  /**
  //Test case number: 38
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isGround();
      jSTerm0.add((Object) "not");
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSTerm0.iterator();
      jSTerm0.addElement((Object) null);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      Function<Object, String> function0 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null, (Object) null).when(function0).apply(any());
      Function<Object, String> function1 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function0);
      Function<Object, String> function2 = unaryOperator0.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, Object> function3 = function1.andThen((Function<? super String, ?>) unaryOperator0);
      Function<Object, String> function4 = function2.andThen((Function<? super String, ? extends String>) function1);
      Function<Object, String> function5 = function4.compose((Function<? super Object, ?>) function2);
      Function<String, Object> function6 = unaryOperator0.compose((Function<? super String, ?>) function4);
      function1.compose((Function<? super String, ?>) function6);
      function4.andThen((Function<? super String, ?>) function2);
      Function.identity();
      function1.andThen((Function<? super String, ?>) function2);
      Function.identity();
      JSTerm jSTerm1 = new JSTerm();
      function4.apply(jSTerm1);
      function5.andThen((Function<? super String, ?>) function3);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function3);
      function4.andThen((Function<? super String, ? extends String>) function2);
      function3.compose((Function<? super String, ?>) unaryOperator1);
      Function.identity();
      unaryOperator1.andThen((Function<? super Object, ?>) function4);
      Function.identity();
      Integer integer0 = new Integer(46);
      function3.apply(integer0);
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function4);
      jSPredicateForm0.replaceAll(unaryOperator2);
      StringReader stringReader0 = new StringReader("/F$;}@/}[VT8m9^~");
      StringReader stringReader1 = new StringReader(")?04?0fExvT");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.7890221622909377
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      streamTokenizer0.pushBack();
      jSTerm0.iterator();
      streamTokenizer0.commentChar(438);
      JSPredicateForm jSPredicateForm1 = jSPredicateForm0.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm2 = jSPredicateForm0.clonePF();
      JSPredicateForm jSPredicateForm3 = jSPredicateForm0.clonePF();
      JSJshopVars.plus = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
      JSPredicateForm jSPredicateForm4 = jSPredicateForm3.standarizerPredicateForm();
      JSPredicateForm jSPredicateForm5 = jSPredicateForm1.applySubstitutionPF(jSSubstitution0);
      jSPredicateForm5.addAll((Collection) jSPredicateForm2);
      JSPredicateForm jSPredicateForm6 = jSPredicateForm2.standarizerPredicateForm();
      jSPredicateForm6.matches(jSPredicateForm3);
      assertTrue(jSPredicateForm3.equals((Object)jSPredicateForm1));
      
      jSPredicateForm1.applySubstitutionPF(jSSubstitution1);
      assertFalse(jSSubstitution1.fail());
      
      jSPredicateForm3.equals(jSPredicateForm2);
      System.setCurrentTimeMillis((-2));
      System.setCurrentTimeMillis(1L);
      boolean boolean0 = jSPredicateForm0.equals(jSPredicateForm4);
      assertNotSame(jSPredicateForm4, jSPredicateForm3);
      assertTrue(boolean0);
      assertNotSame(jSPredicateForm3, jSPredicateForm2);
  }

  /**
  //Test case number: 41
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "(");
      StringReader stringReader0 = new StringReader("F4}o");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      StringReader stringReader1 = new StringReader("1.");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches((JSPredicateForm) jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 42
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isGround();
      jSTerm0.isGround();
      Iterator iterator0 = jSTerm0.iterator();
      jSTerm0.add((Object) iterator0);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.util.Vector$Itr cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=0.5623351446188083
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "a{N");
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Integer integer0 = new Integer((-1065));
      unaryOperator0.apply(integer0);
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      doReturn((Object) null).when(function1).apply(any());
      Function<Object, String> function2 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function3);
      function4.apply(function5);
      function4.andThen((Function<? super String, ? extends String>) function3);
      jSTerm0.add((Object) null);
      UnaryOperator.identity();
      function4.compose((Function<? super String, ?>) function3);
      Function.identity();
      Function.identity();
      function5.compose((Function<? super String, ?>) unaryOperator2);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function5);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.3208883431493221
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSPredicateForm jSPredicateForm0 = jSTerm0.clonePF();
      streamTokenizer0.pushBack();
      jSTerm0.iterator();
      streamTokenizer0.commentChar(438);
      jSPredicateForm0.standarizerPredicateForm();
      jSPredicateForm0.clonePF();
      jSPredicateForm0.clonePF();
      JSJshopVars.plus = (-2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches((JSPredicateForm) jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StringReader cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      boolean boolean0 = jSPredicateForm0.equals((JSPredicateForm) null);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 46
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      System.setCurrentTimeMillis(4031L);
      System.setCurrentTimeMillis(4031L);
      System.setCurrentTimeMillis(0L);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      JSPredicateForm jSPredicateForm1 = new JSPredicateForm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSPredicateForm0.matches(jSPredicateForm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 47
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("rlc/;_1}j79f~_");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = jSTerm0.matches((JSPredicateForm) jSTerm1);
      assertTrue(jSSubstitution0.fail());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator<Object> unaryOperator2 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, String> function2 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function1);
      unaryOperator2.apply(unaryOperator0);
      Function<Object, String> function3 = unaryOperator2.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function4 = unaryOperator1.andThen((Function<? super Object, ? extends String>) function2);
      Function<Object, String> function5 = function4.andThen((Function<? super String, ? extends String>) function3);
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator3 = UnaryOperator.identity();
      unaryOperator2.compose((Function<? super String, ?>) unaryOperator3);
      Function<Object, Object> function6 = Function.identity();
      function5.compose((Function<? super String, ?>) function6);
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function3);
      StringReader stringReader0 = new StringReader("reading");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSPredicateForm0, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis((-14));
      System.setCurrentTimeMillis((-2643L));
      System.setCurrentTimeMillis(1125L);
      System.setCurrentTimeMillis((-14));
      long long0 = 4031L;
      System.setCurrentTimeMillis(4031L);
      System.setCurrentTimeMillis((-14));
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      StringReader stringReader0 = new StringReader("v$G3I*0;wI3$Ql");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.JSPredicateFormInit(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.0986122886681096
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      String string0 = "(";
      String string1 = null;
      String string2 = "=?az8$,GIDAMxf";
      StringReader stringReader0 = new StringReader("=?az8$,GIDAMxf");
      char[] charArray0 = null;
      int int0 = 124;
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm((String) null);
      // Undeclared exception!
      try { 
        jSPredicateForm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 52
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSPredicateForm0.forEach(consumer0);
      // Undeclared exception!
      try { 
        jSPredicateForm0.equals(jSPredicateForm0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.add((Object) "not");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.ensureCapacity((-30749072));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution1.cloneS();
      jSSubstitution1.sort(comparator0);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.addElement("not");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionPF((JSSubstitution) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=0.2868359830561607
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      StringReader stringReader0 = new StringReader("(PW~vuKtl8VR_5ueZD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.wordChars((-669), (-669));
      streamTokenizer2.slashStarComments(false);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer2.commentChar((-4));
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer3);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(PWqvuKtl8VR'5ujZD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.commentChar((-1343));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.whitespaceChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.ordinaryChar((-4));
      streamTokenizer0.ordinaryChars((-4), (-313860566));
      streamTokenizer0.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.whitespaceChars((-1790544634), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "a{n";
      streamTokenizer0.ordinaryChars((-4), (-4));
      streamTokenizer0.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.commentChar((-1132434906));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      Function<Object, Integer> function0 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      UnaryOperator.identity();
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      UnaryOperator.identity();
      Function.identity();
      UnaryOperator.identity();
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Object, ? extends String>) function1);
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm((StreamTokenizer) null);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=0.2868359830561607
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(PWqvuKtl8VR'5ujZD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-313860566));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.slashStarComments(true);
      streamTokenizer1.whitespaceChars((-1790544634), (-4));
      streamTokenizer0.eolIsSignificant(false);
      streamTokenizer0.sval = "a{n";
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.commentChar((-1132434906));
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=0.34883209584303193
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(PWqvuKtl8VR'5ujZD");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.resetSyntax();
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer0.lowerCaseMode(true);
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer1.whitespaceChars((-4), (-4));
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.ordinaryChar((-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.ttype = (-4);
      streamTokenizer0.parseNumbers();
      streamTokenizer1.ttype = (-4);
      streamTokenizer1.ordinaryChars((-4), (-62435548));
      streamTokenizer1.ordinaryChars((-4), (-313860566));
      streamTokenizer1.resetSyntax();
      streamTokenizer0.quoteChar((-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.slashStarComments(false);
      streamTokenizer1.sval = "no{t";
      streamTokenizer1.whitespaceChars((-1790544634), (-4));
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.sval = null;
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer1.commentChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.pushBack();
      streamTokenizer1.parseNumbers();
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("W8,u7-");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=0.5004024235381879
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "(*.";
      JSPredicateForm jSPredicateForm0 = null;
      try {
        jSPredicateForm0 = new JSPredicateForm("(*.");
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSPredicateForm", e);
      }
  }
}
