/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 20 02:02:08 GMT 2019
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.nio.CharBuffer;
import java.util.Comparator;
import java.util.LinkedList;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSEvaluate;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=2.508040167535129
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.addElement("+6`8>Jw<31?");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm2 = jSTerm1.call();
      jSSubstitution0.instance(jSTerm2);
      JSEvaluate.numericValue(jSTerm0);
      jSTerm0.equals(jSTerm2);
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm4 = jSTerm1.standardizerTerm();
      jSTerm3.equals(jSTerm4);
      jSTerm2.cloneT();
      StringReader stringReader0 = new StringReader("8(v:I+)]M4JM|Y");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm3.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=2.560146531009425
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(" ) ");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.sort(comparator0);
      jSTerm2.isEmpty();
      jSTerm1.equals(jSTerm2);
      System.setCurrentTimeMillis((-113L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      predicate1.negate();
      Predicate.isEqual((Object) jSTerm0);
      predicate1.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      int int0 = 37;
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.addElement(predicate1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.isConstant();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm3.removeElement("oSz");
      jSTerm0.standardizerTerm();
      jSTerm3.listIterator();
      JSTerm jSTerm4 = jSSubstitution2.instance(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm4.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 2
  /*Coverage entropy=2.9039165934490137
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.dot = 2018;
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.addElement("+6`8>Jw<31?");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.isConstant();
      JSTerm jSTerm2 = jSTerm0.call();
      assertTrue(jSTerm2.isFunction());
      
      JSTerm jSTerm3 = jSSubstitution4.instance(jSTerm0);
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean0 = jSTerm4.equals(jSTerm3);
      jSTerm3.applySubstitutionT(jSSubstitution6);
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(2018);
      JSTerm jSTerm6 = jSTerm1.cloneT();
      assertFalse(jSTerm6.isConstant());
      assertFalse(jSTerm6.isVariable());
      
      boolean boolean1 = jSTerm4.isGround();
      assertFalse(boolean1 == boolean0);
      
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSTerm jSTerm7 = jSTerm3.applySubstitutionT(jSSubstitution7);
      jSTerm5.matches(jSTerm7, jSSubstitution4);
      assertTrue(jSTerm5.isFunction());
      assertFalse(jSTerm3.isFunction());
  }

  /**
  //Test case number: 3
  /*Coverage entropy=2.949514928936543
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.semicolon = 1408;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm1.addElement("+6`8>Jw<31?");
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSJshopVars.equalT = (-1186);
      JSTerm jSTerm2 = jSTerm1.call();
      JSTerm jSTerm3 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm2);
      assertFalse(boolean0);
      
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm5.isFunction());
      
      System.setCurrentTimeMillis(37);
      JSTerm jSTerm6 = jSTerm2.cloneT();
      assertFalse(jSTerm6.isVariable());
      
      StringReader stringReader0 = new StringReader("8(v:I+)]M4JM|Y");
      System.setCurrentTimeMillis(37);
      jSTerm0.matches(jSTerm2);
      assertTrue(jSTerm2.isFunction());
      
      StringBuffer stringBuffer0 = jSTerm4.toStr();
      assertFalse(jSTerm1.isFunction());
      assertEquals("(+6`8>Jw<31? )", stringBuffer0.toString());
  }

  /**
  //Test case number: 4
  /*Coverage entropy=2.1063151376806677
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), 120);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.nextToken();
      streamTokenizer2.ordinaryChar(92);
      streamTokenizer3.ttype = (-4);
      streamTokenizer3.lowerCaseMode(false);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm1.retainAll(jSSubstitution1);
      streamTokenizer1.ordinaryChars((-4), (-4));
      streamTokenizer3.slashSlashComments(false);
      jSSubstitution0.retainAll(jSTerm1);
      JSJshopVars.exclamation = (-4);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer0.parseNumbers();
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A}j^v'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.9354046201849306
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("(");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isGround();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(61);
      unaryOperator0.apply(integer0);
      jSSubstitution1.parallelStream();
      jSSubstitution0.add((Object) unaryOperator0);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) unaryOperator0);
      Integer integer1 = new Integer(61);
      jSSubstitution0.add((Object) integer1);
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=1.3423901693012241
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate2.and(predicate0);
      predicate1.negate();
      Predicate<Object> predicate4 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate5 = predicate3.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate1.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate4.or(predicate1);
      Predicate<Object> predicate9 = predicate7.or(predicate8);
      predicate0.and(predicate3);
      Predicate<Object> predicate10 = predicate5.or(predicate6);
      predicate1.and(predicate8);
      Predicate<Object> predicate11 = predicate9.and(predicate10);
      predicate11.negate();
      Predicate<Object> predicate12 = predicate4.negate();
      predicate12.or(predicate11);
      Predicate<Object> predicate13 = predicate2.and(predicate12);
      Predicate<Object> predicate14 = predicate13.negate();
      predicate14.negate();
      StringReader stringReader0 = new StringReader(".exeted '('");
      stringReader0.markSupported();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader(".exeted '('");
      stringReader0.markSupported();
      StringReader stringReader2 = new StringReader(".exettd '('");
      stringReader2.reset();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 8
  /*Coverage entropy=2.4439923457092316
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), 120);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.nextToken();
      streamTokenizer2.ordinaryChar(92);
      streamTokenizer3.ttype = (-4);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.ordinaryChars((-4), (-4));
      streamTokenizer3.slashSlashComments(false);
      JSJshopVars.exclamation = (-4);
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.parseNumbers();
      streamTokenizer0.ttype = (-4);
      stringReader0.close();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.561950059734696
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      Object object1 = new Object();
      jSTerm0.addElement(object1);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      jSTerm1.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.796762559731243
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(42);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.makeFunction();
      stringReader0.read();
      jSTerm2.cloneT();
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      jSTerm0.cloneT();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 11
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(A}j^v'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=2.9041899994565523
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hDz5|5c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(42);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.makeFunction();
      stringReader0.read();
      JSJshopVars.rightBrac = 63;
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm4.call();
      jSTerm2.equals(jSTerm1);
      jSTerm2.cloneT();
      jSTerm3.toStr();
      assertEquals(2, jSTerm2.capacity());
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 13
  /*Coverage entropy=0.8646617728338635
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.backquote = 127;
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Integer integer0 = new Integer(1023);
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement(jSTerm1);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution6);
      jSTerm0.print();
      jSTerm1.print();
      assertFalse(jSTerm1.equals((Object)jSTerm0));
  }

  /**
  //Test case number: 14
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[9];
      Object object0 = new Object();
      objectArray0[2] = object0;
      objectArray0[2] = (Object) jSTerm0;
      Object object1 = new Object();
      jSTerm0.spliterator();
      jSTerm0.addElement(object1);
      jSTerm0.addElement(objectArray0[4]);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 15
  /*Coverage entropy=1.6574520104243486
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-41), 42);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      Object object0 = new Object();
      streamTokenizer2.ttype = (-4);
      Object object1 = new Object();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer2);
      jSTerm0.addElement(streamTokenizer1);
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT((JSSubstitution) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.6868977693384444
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(objectArray0[1]);
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement(objectArray0[0]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=2.6454381334737325
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.print();
      jSTerm1.call();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm4.cloneT();
      jSTerm2.cloneT();
      assertEquals("[.expeted '(', [.expeted '(']]", jSTerm2.toString());
  }

  /**
  //Test case number: 18
  /*Coverage entropy=2.986905355782666
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Expecting constant symbol as term");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.semicolon = 3646;
      streamTokenizer0.nval = (double) 3646;
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm2);
      jSTerm0.equals(jSTerm1);
      jSTerm2.clear();
      JSJshopVars.colon = 32;
      jSTerm0.matches(jSTerm3);
      jSTerm0.matches(jSTerm3);
      streamTokenizer0.eolIsSignificant(true);
      JSJshopVars.colon = 32;
      JSJshopVars.leftBrac = 32;
      JSTerm jSTerm4 = jSTerm1.cloneT();
      jSTerm4.clone();
      jSTerm4.matches(jSTerm3);
      jSTerm4.isGround();
      jSTerm4.call();
      jSTerm0.toStr();
      jSTerm0.print();
      jSTerm2.isGround();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("I$DY,DgAr/~+,G*HH");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.containsAll(jSSubstitution0);
      jSTerm0.addElement((Object) null);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=2.2353349444271635
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("TTp>");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "");
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      UnaryOperator.identity();
      Function.identity();
      JSJshopVars.verticalL = 480;
      Object object0 = new Object();
      jSTerm1.addElement(jSTerm0);
      jSTerm1.standardizerTerm();
      assertEquals("[TTp>, [TTp>]]", jSTerm1.toString());
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.6969987794394545
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.add((Object) "hDz5|5c");
      jSTerm0.addElement(jSSubstitution1);
      jSSubstitution1.iterator();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution5.setSize(815);
      jSTerm0.addElement(jSSubstitution5);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.8505612088663046
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      Predicate<Object> predicate10 = predicate5.and(predicate3);
      predicate7.and(predicate10);
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate9.and(predicate3);
      Predicate<Object> predicate13 = predicate3.negate();
      Predicate<Object> predicate14 = predicate0.negate();
      predicate0.negate();
      predicate14.or(predicate0);
      Predicate<Object> predicate15 = predicate9.or(predicate2);
      predicate15.or(predicate2);
      predicate12.and(predicate15);
      predicate4.or(predicate13);
      Predicate<Object> predicate16 = predicate6.negate();
      predicate2.or(predicate16);
      predicate2.or(predicate11);
      Object object0 = new Object();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=1.3788419678046633
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution1.trimToSize();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=2.2856730839240162
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("call");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.mark(0);
      StringReader stringReader1 = new StringReader("call");
      streamTokenizer0.nextToken();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      UnaryOperator.identity();
      jSTerm1.isGround();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      Integer integer0 = new Integer((-1));
      jSTerm0.addElement(integer0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.makeEval(true);
      jSTerm2.call();
      JSJshopVars.flagLevel = 0;
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9366147725931562
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      Object object0 = new Object();
      Object object1 = new Object();
      Integer integer0 = new Integer(2267);
      jSTerm0.addElement(integer0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.968454372071113
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement(objectArray0[0]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4471627089619605
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("K:pa");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=2.6075266800818797
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 294;
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(1174);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      jSTerm1.cloneT();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = null;
      try {
        streamTokenizer7 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.4578180242305514
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(".xpe:ted ('");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      UnaryOperator.identity();
      JSJshopVars.verticalL = 480;
      StringReader stringReader0 = new StringReader(".xpe:ted ('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(480, 480);
      streamTokenizer0.eolIsSignificant(false);
      jSTerm1.matches(jSTerm2, jSSubstitution1);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      String string0 = "}ihwz";
      StringReader stringReader2 = new StringReader("}ihwz");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      jSTerm0.cloneT();
      StreamTokenizer streamTokenizer4 = null;
      try {
        streamTokenizer4 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=2.6075266800818797
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement(jSTerm2);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(1174);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      jSTerm1.cloneT();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = null;
      try {
        streamTokenizer7 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=0.9501702784519184
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("?%%%");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.backquote = 127;
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.addElement(jSTerm0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=2.1985574616803634
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%i0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.nval = (double) (-4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer2.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer0.nextToken();
      streamTokenizer3.ordinaryChar((-1492));
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.lowerCaseMode(false);
      streamTokenizer0.ordinaryChars((-4), 1230);
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer1.quoteChar((-1));
      streamTokenizer4.ordinaryChar((-4));
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      streamTokenizer5.parseNumbers();
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(1230);
  }

  /**
  //Test case number: 33
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution0.removeAllElements();
      jSTerm0.addElement(jSSubstitution1);
      JSJshopVars.backquote = 2201;
      StringReader stringReader0 = new StringReader("MnO\"@-k!!,n~,me&E}W");
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.iterator();
      jSTerm0.addElement(jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      stringReader0.markSupported();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 34
  /*Coverage entropy=2.4768239308063107
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("->");
      JSJshopVars.plus = (-3721);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      JSJshopVars.verticalL = 480;
      JSJshopVars.semicolon = 480;
      Integer integer0 = new Integer(480);
      Integer integer1 = new Integer(480);
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.andThen((Function<? super Integer, ? extends Integer>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function1);
      Integer integer2 = new Integer(480);
      jSSubstitution0.add((Object) integer1);
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.add((Object) "");
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      JSJshopVars.equalT = 480;
      JSJshopVars.coma = 480;
      JSJshopVars.percent = 2;
      JSJshopVars.minus = 480;
      JSJshopVars.rightBrac = 480;
      jSTerm2.makeEval(true);
      JSJshopVars.minus = 480;
      JSTerm jSTerm4 = jSTerm2.standardizerTerm();
      jSTerm4.cloneT();
      jSTerm3.call();
      // Undeclared exception!
      try { 
        jSTerm2.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=2.5511190249281626
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.sort(comparator0);
      jSTerm2.isEmpty();
      boolean boolean0 = jSTerm1.equals(jSTerm2);
      assertTrue(boolean0);
      
      System.setCurrentTimeMillis((-113L));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm2);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate4.or(predicate0);
      Predicate<Object> predicate6 = predicate3.negate();
      Predicate<Object> predicate7 = predicate5.and(predicate3);
      Predicate<Object> predicate8 = predicate3.or(predicate7);
      Predicate<Object> predicate9 = predicate7.negate();
      predicate5.test(predicate1);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate0);
      predicate10.or(predicate4);
      Predicate<Object> predicate11 = predicate2.and(predicate7);
      predicate10.test(".expeted '('");
      Predicate<Object> predicate12 = predicate11.or(predicate7);
      Predicate<Object> predicate13 = predicate0.negate();
      Predicate<Object> predicate14 = predicate13.and(predicate6);
      Predicate.isEqual((Object) predicate12);
      predicate14.and(predicate6);
      Predicate<Object> predicate15 = predicate9.negate();
      Predicate<Object> predicate16 = predicate15.or(predicate5);
      predicate16.negate();
      predicate6.and(predicate8);
      LinkedList<JSTerm> linkedList0 = new LinkedList<JSTerm>();
      jSTerm1.isFunction();
      System.setCurrentTimeMillis((-113L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm1.isConstant());
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm3.isFunction());
  }

  /**
  //Test case number: 36
  /*Coverage entropy=0.9004024235381879
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[0] = object0;
      objectArray0[1] = (Object) "(";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      int int0 = (-2);
      Integer integer0 = new Integer((-2));
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm0 = new JSTerm();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer2.parseNumbers();
      streamTokenizer2.nextToken();
      streamTokenizer1.ordinaryChar(92);
      streamTokenizer2.ttype = (-4);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer3.ordinaryChars((-4), (-4));
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer3.parseNumbers();
      stringReader0.close();
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=2.550475939949486
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("->");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) "");
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Integer, Integer> function0 = Function.identity();
      JSJshopVars.verticalL = 480;
      JSJshopVars.semicolon = 480;
      Integer integer0 = new Integer(480);
      Integer integer1 = new Integer(480);
      UnaryOperator<Object> unaryOperator1 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator2 = UnaryOperator.identity();
      jSSubstitution1.add((Object) unaryOperator1);
      unaryOperator2.andThen((Function<? super Integer, ? extends Integer>) function0);
      Function<Object, String> function1 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function1);
      Integer integer2 = new Integer(480);
      jSSubstitution0.add((Object) integer1);
      jSSubstitution0.add((Object) unaryOperator2);
      jSSubstitution0.replaceAll(unaryOperator0);
      jSSubstitution0.add((Object) "");
      jSTerm0.addElement(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      JSJshopVars.equalT = 480;
      JSJshopVars.coma = 480;
      JSJshopVars.minus = 480;
      jSTerm1.applySubstitutionT(jSSubstitution1);
      jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis(480);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.534543410743332
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      jSTerm2.equals(jSTerm1);
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-1));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) streamTokenizer0);
      Predicate<Object> predicate1 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate2 = predicate1.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.or(predicate3);
      Predicate<Object> predicate5 = predicate4.and(predicate2);
      Predicate<Object> predicate6 = predicate1.or(predicate3);
      Predicate<Object> predicate7 = predicate3.negate();
      Predicate<Object> predicate8 = predicate7.and(predicate5);
      Predicate<Object> predicate9 = predicate0.negate();
      predicate5.test(predicate8);
      Predicate<Object> predicate10 = Predicate.isEqual((Object) "0.0");
      predicate5.or(predicate3);
      Predicate<Object> predicate11 = predicate3.and(predicate2);
      Predicate<Object> predicate12 = predicate0.or(predicate11);
      Predicate<Object> predicate13 = predicate12.and(predicate6);
      predicate10.or(predicate1);
      predicate4.negate();
      predicate13.and(predicate9);
      LinkedList<JSTerm> linkedList0 = new LinkedList<JSTerm>();
      linkedList0.removeIf(predicate9);
      System.setCurrentTimeMillis(2064L);
  }

  /**
  //Test case number: 40
  /*Coverage entropy=2.1341286000959614
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Integer integer0 = new Integer(39);
      jSTerm0.addElement(integer0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      UnaryOperator<String> unaryOperator0 = UnaryOperator.identity();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSSubstitution6.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      jSSubstitution0.add((Object) "(t<|N2");
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution6);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 41
  /*Coverage entropy=2.1935240974680283
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.nextToken();
      streamTokenizer0.ordinaryChar((-1));
      jSTerm0.addElement("-ZRZF?sH]eH:o|Ol");
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.ttype = streamTokenizer0.ttype;
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-1991), (-1991));
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.ordinaryChar((-3));
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      StreamTokenizer streamTokenizer4 = null;
      try {
        streamTokenizer4 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8946741381361325
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.wordChars(42, 42);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-861), 1405);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = "+,`8>jw<31?";
      streamTokenizer2.quoteChar(1);
      JSTerm jSTerm0 = new JSTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm0.sort(comparator0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      jSTerm1.equals(jSTerm0);
      jSTerm1.equals(jSTerm0);
      System.setCurrentTimeMillis(42);
      System.setCurrentTimeMillis((-4));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(336L);
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.74400640535186
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(".xpeted ('");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      UnaryOperator.identity();
      JSJshopVars.verticalL = 480;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm3.isEval());
      
      jSSubstitution2.add((Object) ".xpeted ('");
      JSTerm jSTerm4 = jSTerm3.call();
      assertEquals(10, jSTerm4.capacity());
      assertNotSame(jSTerm4, jSTerm3);
      assertTrue(jSTerm4.isFunction());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertTrue(jSTerm1.equals((Object)jSTerm2));
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      assertNotSame(jSTerm1, jSTerm5);
      assertTrue(jSTerm5.isFunction());
      assertFalse(jSTerm0.isFunction());
  }

  /**
  //Test case number: 44
  /*Coverage entropy=1.7766234846545668
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.spliterator();
      Integer integer0 = new Integer(124);
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      jSSubstitution0.clear();
      jSSubstitution1.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Integer integer1 = new Integer(37);
      System.setCurrentTimeMillis(2822L);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 45
  /*Coverage entropy=2.2054480732221378
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%i0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer2.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), (-4));
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer2);
      assertFalse(jSTerm1.isConstant());
      
      streamTokenizer2.quoteChar((-4));
      streamTokenizer0.parseNumbers();
      streamTokenizer1.nextToken();
      streamTokenizer2.ordinaryChar((-1));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer3.lowerCaseMode(false);
      streamTokenizer3.ordinaryChars((-1), (-1));
      streamTokenizer0.slashSlashComments(false);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.quoteChar((-1));
      streamTokenizer3.ordinaryChar((-1));
      streamTokenizer3.parseNumbers();
      streamTokenizer0.ttype = (-1);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1);
      assertFalse(jSTerm1.isFunction());
      assertEquals(1, jSSubstitution1.size());
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 46
  /*Coverage entropy=2.4599086165650466
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm0.removeAll(jSTerm2);
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.sort(comparator0);
      jSTerm0.equals(jSTerm0);
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-113L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.657888217938354
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(42, 42);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-861), 1405);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(true);
      StringReader stringReader1 = new StringReader("?%%%0");
      stringReader1.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm2.applySubstitutionT(jSSubstitution1);
      StringBuffer stringBuffer0 = jSTerm2.toStr();
      assertEquals("?%%% ", stringBuffer0.toString());
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Integer integer0 = new Integer((-1795262738));
      jSSubstitution0.add((Object) streamTokenizer0);
      JSTerm jSTerm4 = jSTerm3.standardizerTerm();
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%0]", jSTerm4.toString());
      assertFalse(jSTerm4.isFunction());
      assertFalse(jSTerm4.isEval());
      assertNotSame(jSTerm1, jSTerm2);
      assertTrue(jSTerm4.isVariable());
  }

  /**
  //Test case number: 48
  /*Coverage entropy=2.470458456530342
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.mark(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(".expeted '('");
      StringReader stringReader2 = new StringReader("; ");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(false);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(1);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer1.slashStarComments(false);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      streamTokenizer0.ordinaryChar(1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm2.matches(jSTerm1, jSSubstitution1);
      assertTrue(jSSubstitution2.fail());
      assertTrue(jSTerm2.isConstant());
      
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader2);
      jSTerm0.cloneT();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader2);
      StringReader stringReader3 = new StringReader("; ");
      stringReader0.skip(32);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader3);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm3.isFunction());
      assertFalse(jSTerm3.isVariable());
      assertFalse(jSTerm3.isEval());
      assertEquals("[0.0]", jSTerm0.toString());
      assertNotSame(jSTerm3, jSTerm0);
      assertTrue(jSTerm3.isConstant());
      assertNotSame(jSTerm0, jSTerm2);
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.622827904722017
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      Predicate.isEqual((Object) null);
      StringReader stringReader0 = new StringReader("%%%");
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("not");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.markSupported();
      CharBuffer charBuffer0 = CharBuffer.allocate(46);
      char[] charArray0 = new char[6];
      charArray0[0] = '_';
      charArray0[1] = 'f';
      charArray0[2] = '!';
      charArray0[3] = 'o';
      charArray0[4] = 'X';
      charArray0[5] = 'm';
      stringReader0.read(charArray0);
      stringReader0.read(charBuffer0);
      streamTokenizer0.resetSyntax();
      stringReader1.markSupported();
      stringReader0.markSupported();
      stringReader0.reset();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 50
  /*Coverage entropy=0.42857142857142855
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Integer integer0 = new Integer((-1183));
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate3.and(predicate11);
      Predicate<Object> predicate13 = predicate2.negate();
      predicate10.negate();
      Predicate<Object> predicate14 = predicate9.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      predicate15.or(predicate2);
      predicate12.or(predicate7);
      predicate2.and(predicate4);
      predicate13.or(predicate1);
      predicate11.or(predicate14);
      predicate1.or(predicate6);
      Predicate.isEqual((Object) integer0);
      predicate5.and(predicate14);
      Predicate.isEqual((Object) predicate10);
      predicate8.negate();
      predicate0.and(predicate15);
      predicate11.or(predicate12);
      predicate13.or(predicate12);
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.782019572767355
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.plus = 255;
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertFalse(jSTerm1.isVariable());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=1.533344419789668
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.parseList(streamTokenizer0);
      assertFalse(jSTerm1.isVariable());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isConstant());
      assertFalse(jSTerm0.isEval());
      assertEquals("[nil]", jSTerm1.toString());
  }

  /**
  //Test case number: 53
  /*Coverage entropy=1.6694351084945749
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer(0);
      StringReader stringReader0 = new StringReader("(");
      long long0 = 1L;
      System.setCurrentTimeMillis(0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 54
  /*Coverage entropy=1.2772569862978458
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("bh`G6'~F>4");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      streamTokenizer0.parseNumbers();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(true);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.resetSyntax();
      streamTokenizer2.commentChar(1340);
      streamTokenizer0.commentChar(1340);
      streamTokenizer1.wordChars(5371, 71);
      StringReader stringReader1 = new StringReader(".exeted '('");
      stringReader1.reset();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.containsAll(jSSubstitution1);
      StringReader stringReader2 = new StringReader(".exeted '('");
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis(2804L);
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isEval());
      assertEquals("%%% ", stringBuffer0.toString());
  }

  /**
  //Test case number: 55
  /*Coverage entropy=1.183397312950649
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.mark(0);
      StringReader stringReader1 = new StringReader(".expeted '('");
      streamTokenizer0.nextToken();
      streamTokenizer0.pushBack();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      StringReader stringReader2 = new StringReader("expeted");
      Integer integer0 = new Integer(3646);
      StringReader stringReader3 = new StringReader("ZW4wuOP0()!a");
      long long0 = 0L;
      System.setCurrentTimeMillis(2172L);
      StringReader stringReader4 = new StringReader(": unexpected EOF");
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.3789267893363286
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vhci3nrjD&nkE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.retainAll(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.sort(comparator0);
      streamTokenizer0.eolIsSignificant(true);
      // Undeclared exception!
      try { 
        jSTerm1.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 57
  /*Coverage entropy=2.5407986662671305
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "U)KtWpY|";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = 41;
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm0.print();
      jSTerm3.equals(jSTerm2);
      jSTerm0.makeFunction();
      jSTerm1.isVariable();
      jSTerm1.isConstant();
      jSTerm3.makeFunction();
      assertFalse(jSTerm0.isConstant());
      assertEquals(1, jSTerm3.capacity());
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.918787309406896
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSSubstitution0.add((Object) null);
      jSTerm0.makeEval(true);
      JSTerm jSTerm2 = jSTerm0.call();
      jSTerm2.equals(jSTerm1);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSTerm1.standardizerTerm();
      assertFalse(jSTerm1.isEval());
      
      jSTerm0.applySubstitutionT(jSSubstitution1);
      assertTrue(jSTerm0.isEval());
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5296847785508279
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.mark(0);
      StringReader stringReader1 = new StringReader(".expeted '('");
      streamTokenizer0.nextToken();
      streamTokenizer0.pushBack();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      StringReader stringReader2 = new StringReader("expeted");
      Integer integer0 = new Integer(3646);
      StringReader stringReader3 = new StringReader("ZW4wuOP0()!a");
      long long0 = 0L;
      System.setCurrentTimeMillis(2172L);
      StringReader stringReader4 = new StringReader(": unexpected EOF");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader4);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.5754958472190381
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(,A}j2^v'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.nextToken();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=2.778634909797327
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(".xpe:ted ('");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      UnaryOperator.identity();
      JSJshopVars.verticalL = 480;
      jSSubstitution1.addElements(jSSubstitution0);
      jSTerm1.isGround();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution3.add((Object) jSSubstitution1);
      jSTerm0.addElement(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSJshopVars.equalT = 480;
      jSTerm3.makeEval(true);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      jSTerm3.standardizerTerm();
      JSJshopVars.minus = (-3);
      jSTerm3.print();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=2.858513641532119
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(42, 42);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-1737));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSJshopVars.plus = (-4);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer10 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm3 = jSTerm0.standardizerTerm();
      assertFalse(jSTerm3.isEval());
      assertTrue(jSTerm3.isVariable());
      assertEquals("[?%%%0]", jSTerm3.toString());
      
      boolean boolean0 = jSTerm1.isGround();
      assertFalse(jSSubstitution0.equals((Object)jSSubstitution2));
      assertNotSame(jSTerm1, jSTerm2);
      assertFalse(jSTerm1.isFunction());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm0.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.8978141278730893
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.quoteChar(1);
      streamTokenizer1.wordChars(58, 44);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer2);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(93);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm2.matches(jSTerm0, jSSubstitution1);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("");
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader0);
      streamTokenizer8.slashSlashComments(true);
      System.setCurrentTimeMillis(93);
      System.setCurrentTimeMillis((-1L));
  }

  /**
  //Test case number: 64
  /*Coverage entropy=1.8816064979261793
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%i0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.slashStarComments(false);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.nextToken();
      streamTokenizer2.ordinaryChar(92);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.ordinaryChars((-1), (-4));
      streamTokenizer3.slashSlashComments(false);
      jSSubstitution0.add((Object) null);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.quoteChar((-1));
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.parseNumbers();
      streamTokenizer0.ttype = (-4);
      // Undeclared exception!
      try { 
        jSTerm1.matches(jSTerm0, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.9024533308450557
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      StringReader stringReader0 = new StringReader("T?%%%i0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      streamTokenizer1.nval = (double) (-4);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer1.quoteChar((-4));
      streamTokenizer2.nval = 0.0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.nextToken();
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.ordinaryChars((-1), (-4));
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.quoteChar((-1));
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.parseNumbers();
      streamTokenizer0.ttype = (-4);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = null;
      try {
        streamTokenizer7 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 66
  /*Coverage entropy=2.214534764133424
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "(A}j^v'");
      Predicate<Object> predicate1 = predicate0.or(predicate0);
      Predicate<Object> predicate2 = predicate0.and(predicate1);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.negate();
      Predicate<Object> predicate5 = predicate3.and(predicate4);
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate8 = predicate3.or(predicate4);
      Predicate<Object> predicate9 = predicate5.negate();
      Predicate<Object> predicate10 = predicate7.and(predicate9);
      predicate6.or(predicate9);
      Predicate<Object> predicate11 = predicate1.negate();
      predicate10.test(predicate11);
      predicate5.and(predicate4);
      Predicate<Object> predicate12 = predicate6.or(predicate10);
      predicate3.negate();
      predicate8.or(predicate10);
      Predicate<Object> predicate13 = predicate6.and(predicate1);
      Predicate<Object> predicate14 = Predicate.isEqual((Object) "(A}j^v'");
      Predicate<Object> predicate15 = predicate13.and(predicate14);
      Predicate<Object> predicate16 = predicate12.or(predicate5);
      Predicate<Object> predicate17 = predicate16.and(predicate15);
      predicate15.and(predicate9);
      Predicate<Object> predicate18 = predicate17.negate();
      predicate0.or(predicate12);
      predicate9.negate();
      predicate1.and(predicate18);
      LinkedList<JSTerm> linkedList0 = new LinkedList<JSTerm>();
      linkedList0.removeIf(predicate11);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=1.1005703211886384
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      jSTerm0.isConstant();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=1.7560836273833575
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader("EWPc_sm$,4~1E");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader0.skip(0L);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=0.4
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate3.negate();
      Integer integer0 = new Integer((-1183));
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate2.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate3.and(predicate11);
      Predicate<Object> predicate13 = predicate2.negate();
      predicate10.negate();
      Predicate<Object> predicate14 = predicate10.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      predicate12.or(predicate7);
      predicate2.and(predicate4);
      predicate13.or(predicate1);
      predicate11.or(predicate14);
      predicate1.or(predicate6);
      Predicate.isEqual((Object) integer0);
      predicate5.and(predicate14);
      Predicate.isEqual((Object) predicate10);
      predicate8.negate();
      predicate0.and(predicate15);
      predicate11.or(predicate12);
      predicate13.or(predicate12);
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.928551319792604
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      StringReader stringReader0 = new StringReader("%i0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer3.ordinaryChar((-4));
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.nextToken();
      streamTokenizer2.ordinaryChar(92);
      streamTokenizer3.ttype = (-4);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.ordinaryChars((-4), (-4));
      streamTokenizer3.slashSlashComments(false);
      streamTokenizer1.nval = (-4239.646725499);
      JSJshopVars.exclamation = (-4);
      streamTokenizer1.quoteChar((-4));
      streamTokenizer4.ordinaryChar((-4));
      streamTokenizer4.parseNumbers();
      streamTokenizer0.ttype = (-4);
      jSTerm1.matches(jSTerm0, jSSubstitution0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.1217186091313738
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(,A}j2^v'");
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      jSTerm0.replaceAll(unaryOperator0);
      StringReader stringReader1 = new StringReader("(,A}j2^v'");
      stringReader1.markSupported();
      StringReader stringReader2 = new StringReader("(,A}j2^v'");
      StringReader stringReader3 = new StringReader("");
      stringReader3.skip(1007L);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader3.markSupported();
      CharBuffer charBuffer0 = CharBuffer.allocate(42);
      charBuffer0.mark();
      char[] charArray0 = new char[5];
      charArray0[0] = 'p';
      charArray0[1] = 'e';
      charArray0[2] = 'V';
      charArray0[3] = 't';
      charArray0[4] = '>';
      stringReader0.read(charArray0);
      stringReader0.read(charBuffer0);
      stringReader3.markSupported();
      stringReader1.markSupported();
      stringReader1.reset();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=2.022248870579868
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = 'z';
      charArray0[2] = '[';
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis((-2182L));
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 73
  /*Coverage entropy=1.0931471805599453
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.isVariable();
      StringReader stringReader0 = new StringReader("");
      LinkedList<JSTerm> linkedList0 = new LinkedList<JSTerm>();
      Integer integer0 = new Integer((-515));
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = Predicate.isEqual((Object) ".2*G");
      Predicate<Object> predicate3 = predicate1.or(predicate2);
      Predicate<Object> predicate4 = predicate3.and(predicate2);
      linkedList0.removeIf(predicate4);
      // Undeclared exception!
      try { 
        jSTerm0.standarizerPredicateForm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=2.45589572574037
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.makeVariable();
      jSTerm0.addElement("-ZRZF?sH]eH:o|Ol");
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer0.nval = (double) (-4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-1991), (-1991));
      streamTokenizer1.eolIsSignificant(true);
      streamTokenizer1.ordinaryChar((-4));
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      StreamTokenizer streamTokenizer4 = null;
      try {
        streamTokenizer4 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=2.536687705950125
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.sort(comparator0);
      jSTerm2.isEmpty();
      assertTrue(jSTerm2.isFunction());
      
      jSTerm0.isEval();
      System.setCurrentTimeMillis((-113L));
      JSTerm jSTerm3 = new JSTerm();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm3);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      Predicate<Object> predicate3 = predicate0.negate();
      predicate3.negate();
      Predicate<Object> predicate4 = predicate2.negate();
      Predicate<Object> predicate5 = predicate3.negate();
      Predicate<Object> predicate6 = predicate4.and(predicate3);
      Predicate<Object> predicate7 = predicate3.or(predicate6);
      Predicate<Object> predicate8 = predicate6.negate();
      predicate4.test(predicate1);
      Predicate<Object> predicate9 = Predicate.isEqual((Object) predicate0);
      Predicate<Object> predicate10 = predicate2.and(predicate6);
      predicate9.test(".expeted '('");
      Predicate<Object> predicate11 = predicate10.or(predicate6);
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate12.and(predicate5);
      Predicate.isEqual((Object) predicate11);
      predicate13.and(predicate5);
      Predicate<Object> predicate14 = predicate8.negate();
      Predicate<Object> predicate15 = predicate14.or(predicate4);
      predicate15.negate();
      predicate5.and(predicate7);
      LinkedList<JSTerm> linkedList0 = new LinkedList<JSTerm>();
      linkedList0.removeIf(predicate2);
      System.setCurrentTimeMillis((-113L));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm4 = jSTerm1.applySubstitutionT(jSSubstitution0);
      assertFalse(jSTerm4.isEval());
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm1, jSTerm2);
      assertNotSame(jSTerm4, jSTerm1);
      assertTrue(jSTerm1.isFunction());
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.7039917864324614
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.makeEval(true);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 77
  /*Coverage entropy=0.7695274178358926
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "U)KtWpY|";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = 41;
      stringReader0.ready();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar(41);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 78
  /*Coverage entropy=1.2248830687452414
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      char[] charArray0 = new char[3];
      charArray0[0] = '=';
      charArray0[1] = 'N';
      charArray0[2] = 'm';
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      stringReader0.markSupported();
      stringReader0.markSupported();
      stringReader0.read();
      stringReader0.markSupported();
      streamTokenizer0.wordChars('m', 619);
      stringReader0.read();
      StringReader stringReader1 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      stringReader0.reset();
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.skip((-497L));
      streamTokenizer1.resetSyntax();
      System.setCurrentTimeMillis((-1L));
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      boolean boolean0 = jSTerm0.isGround();
      assertFalse(jSTerm0.isEval());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 79
  /*Coverage entropy=2.648529603186607
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm1.makeFunction();
      jSTerm1.sort(comparator0);
      boolean boolean0 = jSTerm0.equals(jSTerm0);
      boolean boolean1 = jSTerm2.isGround();
      assertFalse(boolean1 == boolean0);
      
      System.setCurrentTimeMillis((-113L));
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(0L);
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm3 = jSTerm2.standardizerTerm();
      assertTrue(jSTerm2.isFunction());
      assertFalse(jSTerm2.isEval());
      assertNotSame(jSTerm3, jSTerm2);
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.2563640070887918
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.mark(0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(".expeted '('");
      streamTokenizer0.nextToken();
      streamTokenizer0.pushBack();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      StringReader stringReader2 = new StringReader("expeted");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      stringReader0.skip(0L);
      System.setCurrentTimeMillis(1913L);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(jSTerm1.isEval());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=0.974150643502099
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.mark(0);
      StringReader stringReader1 = new StringReader(".expeted '('");
      streamTokenizer0.nextToken();
      char[] charArray0 = new char[3];
      charArray0[0] = 'z';
      charArray0[1] = '(';
      charArray0[2] = '[';
      stringReader1.read(charArray0);
      streamTokenizer0.pushBack();
      assertEquals((-3), streamTokenizer0.ttype);
      
      stringReader1.markSupported();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      StringReader stringReader2 = new StringReader("expeted");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      stringReader2.reset();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer1);
      jSTerm1.print();
      streamTokenizer1.sval = null;
      stringReader0.skip(0L);
      streamTokenizer0.resetSyntax();
      System.setCurrentTimeMillis(1L);
      jSTerm0.print();
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 82
  /*Coverage entropy=1.63887068547068
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      stringReader0.mark(0);
      StringReader stringReader1 = new StringReader(".expeted '('");
      streamTokenizer0.nextToken();
      streamTokenizer0.pushBack();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      StringReader stringReader2 = new StringReader("expeted");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader2);
      JSJshopVars.plus = 124;
      stringReader0.skip(0L);
      System.setCurrentTimeMillis(1913L);
      jSTerm0.equals(jSTerm0);
      JSTerm jSTerm1 = new JSTerm();
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals((-3), streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.2961346570528898
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%i0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.wordChars((-4), (-4));
      streamTokenizer1.resetSyntax();
      streamTokenizer1.pushBack();
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer1.quoteChar(2);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer2.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer3);
      streamTokenizer2.quoteChar((-4));
      streamTokenizer3.parseNumbers();
      streamTokenizer3.nextToken();
      streamTokenizer2.ordinaryChar(92);
      streamTokenizer1.ttype = streamTokenizer1.ttype;
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer1.sval = null;
      streamTokenizer4.lowerCaseMode(false);
      streamTokenizer4.ordinaryChars((-1), (-4));
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.nval = (double) (-4);
      streamTokenizer1.quoteChar((-1));
      streamTokenizer4.parseNumbers();
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      System.setCurrentTimeMillis((-1));
      jSTerm1.print();
      assertFalse(jSTerm1.isEval());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
      assertTrue(jSTerm1.isVariable());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5132485928320172
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exeted '('");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = predicate0.negate();
      Predicate<Object> predicate2 = predicate0.negate();
      Predicate<Object> predicate3 = predicate0.and(predicate2);
      Predicate<Object> predicate4 = predicate0.negate();
      Integer integer0 = new Integer((-1192));
      Predicate<Object> predicate5 = predicate1.or(predicate4);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      Predicate<Object> predicate9 = predicate4.or(predicate8);
      Predicate<Object> predicate10 = predicate3.negate();
      Predicate<Object> predicate11 = predicate9.negate();
      Predicate<Object> predicate12 = predicate3.and(predicate11);
      Predicate<Object> predicate13 = predicate2.negate();
      predicate10.negate();
      Predicate<Object> predicate14 = predicate9.negate();
      Predicate<Object> predicate15 = predicate13.or(predicate6);
      predicate12.or(predicate7);
      predicate14.test(predicate2);
      predicate2.and(predicate4);
      predicate13.or(predicate1);
      predicate11.or(predicate14);
      predicate1.or(predicate6);
      Predicate.isEqual((Object) integer0);
      predicate5.and(predicate14);
      Predicate.isEqual((Object) predicate10);
      predicate8.negate();
      predicate0.and(predicate15);
      predicate11.or(predicate12);
      predicate13.or(predicate12);
      StringReader stringReader0 = new StringReader(".exeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=0.3333333333333333
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      char[] charArray0 = new char[3];
      charArray0[0] = '5';
      charArray0[1] = 'N';
      stringReader0.read(charArray0);
      stringReader0.markSupported();
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      stringReader0.read(charBuffer0);
      stringReader0.markSupported();
      stringReader0.read();
      stringReader0.markSupported();
      stringReader0.read();
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer1.put('5');
      charBuffer1.chars();
      stringReader0.read(charBuffer1);
      StringReader stringReader1 = new StringReader(".expeted '('");
      stringReader0.markSupported();
      stringReader0.ready();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      stringReader1.ready();
      stringReader1.reset();
      stringReader1.reset();
      stringReader0.skip((-540L));
      streamTokenizer0.resetSyntax();
      System.setCurrentTimeMillis((-1L));
      System.setCurrentTimeMillis((-540L));
      System.setCurrentTimeMillis(0L);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=1.786724494755577
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      Function<Integer, Integer> function0 = Function.identity();
      Integer integer0 = new Integer((-1610874239));
      Integer integer1 = new Integer(535);
      UnaryOperator<Object> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      Function<Object, Integer> function1 = (Function<Object, Integer>) mock(Function.class, new ViolatedAssumptionAnswer());
      Function<Object, Integer> function2 = unaryOperator0.andThen((Function<? super Object, ? extends Integer>) function1);
      function0.compose((Function<? super String, ? extends Integer>) function2);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution4);
      unaryOperator1.andThen((Function<? super Integer, ? extends Integer>) function0);
      Function<Integer, String> function3 = (Function<Integer, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator1.andThen((Function<? super Integer, ? extends String>) function3);
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=1.3093517394969356
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(,A}j2^v'");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 88
  /*Coverage entropy=1.847832822658352
  */
  @Test(timeout = 4000)
  public void test88()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      char[] charArray0 = new char[6];
      charArray0[0] = '5';
      charArray0[1] = '5';
      charArray0[2] = 'N';
      charArray0[3] = '5';
      charArray0[4] = '5';
      charArray0[5] = '|';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      charBuffer0.rewind();
      CharBuffer charBuffer1 = CharBuffer.wrap(charArray0);
      charBuffer0.put('N');
      charBuffer1.chars();
      System.setCurrentTimeMillis((-1L));
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 89
  /*Coverage entropy=2.04776041683849
  */
  @Test(timeout = 4000)
  public void test89()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(A}j^v'");
      Function<Integer, Integer> function0 = Function.identity();
      Integer integer0 = new Integer(480);
      Integer integer1 = new Integer(480);
      UnaryOperator.identity();
      JSJshopVars.apostrophe = 480;
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Function<Object, JSSubstitution> function1 = (Function<Object, JSSubstitution>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends JSSubstitution>) function1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "(A}j^v'");
      unaryOperator0.andThen((Function<? super Integer, ? extends Integer>) function0);
      Function<Object, String> function2 = (Function<Object, String>) mock(Function.class, new ViolatedAssumptionAnswer());
      unaryOperator0.andThen((Function<? super Integer, ? extends String>) function2);
      Integer integer2 = new Integer(480);
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 90
  /*Coverage entropy=1.0365141682948127
  */
  @Test(timeout = 4000)
  public void test90()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("(,A}j2^v'");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Predicate<Object> predicate1 = predicate0.and(predicate0);
      Predicate<Object> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate2.negate();
      Predicate<Object> predicate4 = predicate3.and(predicate0);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate4);
      Predicate<Object> predicate6 = predicate0.negate();
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate0.and(predicate7);
      Predicate<Object> predicate9 = predicate3.negate();
      Predicate<Object> predicate10 = Predicate.isEqual((Object) predicate9);
      Predicate<Object> predicate11 = predicate7.or(predicate10);
      Predicate<Object> predicate12 = predicate0.negate();
      Predicate<Object> predicate13 = predicate4.and(predicate1);
      Predicate<Object> predicate14 = predicate4.or(predicate2);
      predicate8.negate();
      predicate3.test(predicate7);
      Predicate<Object> predicate15 = predicate14.and(predicate5);
      Predicate.isEqual((Object) stringReader0);
      predicate5.negate();
      predicate6.or(predicate3);
      Predicate<Object> predicate16 = predicate3.negate();
      predicate6.or(predicate9);
      predicate13.and(predicate15);
      Predicate<Object> predicate17 = Predicate.isEqual((Object) predicate7);
      Predicate<Object> predicate18 = predicate17.and(predicate16);
      Predicate<Object> predicate19 = predicate2.or(predicate1);
      predicate18.and(predicate19);
      predicate4.and(predicate12);
      predicate5.negate();
      Predicate<Object> predicate20 = predicate11.or(predicate17);
      predicate11.negate();
      predicate3.and(predicate20);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
