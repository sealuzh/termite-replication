/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 12 11:27:37 GMT 2020
 */

package umd.cs.shop;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.Reader;
import java.io.StreamTokenizer;
import java.io.StringReader;
import java.util.Collection;
import java.util.Comparator;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Predicate;
import java.util.function.UnaryOperator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import umd.cs.shop.JSJshopVars;
import umd.cs.shop.JSPredicateForm;
import umd.cs.shop.JSSubstitution;
import umd.cs.shop.JSTerm;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JSTerm_ESTest extends JSTerm_ESTest_scaffolding {

  /**
  //Test case number: 0
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(*2# &pTo#r?#et");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 1
  /*Coverage entropy=1.717047028808827
  */
  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      assertFalse(jSTerm1.isConstant());
      
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.slashSlashComments(false);
      streamTokenizer4.ordinaryChar((-1));
      JSSubstitution jSSubstitution2 = jSTerm0.matches(jSTerm1, jSSubstitution0);
      streamTokenizer4.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars((-4), (-1));
      streamTokenizer5.ordinaryChars((-4), (-4));
      streamTokenizer5.whitespaceChars((-4), 2029);
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("?%%%0");
      streamTokenizer5.slashSlashComments(true);
      streamTokenizer7.resetSyntax();
      System.setCurrentTimeMillis((-4));
      streamTokenizer7.slashStarComments(false);
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution3 = jSTerm0.matches(jSTerm1);
      JSTerm jSTerm2 = new JSTerm();
      JSSubstitution jSSubstitution4 = jSTerm1.matches(jSTerm2, jSSubstitution3);
      assertTrue(jSSubstitution4.fail());
      assertEquals("[?%%%]", jSTerm1.toString());
      assertFalse(jSTerm1.isFunction());
  }

  /**
  //Test case number: 2
  /*Coverage entropy=1.4142790651247086
  */
  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1W()j^w\"+<4f@p.`4 ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.call();
      Object[] objectArray0 = new Object[5];
      objectArray0[0] = (Object) jSTerm1;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) stringReader0;
      objectArray0[3] = (Object) jSTerm0;
      Predicate<String> predicate0 = Predicate.isEqual((Object) null);
      Predicate<Object> predicate1 = (Predicate<Object>) mock(Predicate.class, new ViolatedAssumptionAnswer());
      Predicate<String> predicate2 = predicate0.and(predicate1);
      Integer integer0 = new Integer((-2));
      Predicate.isEqual((Object) integer0);
      Predicate<String> predicate3 = predicate2.negate();
      Predicate<String> predicate4 = predicate3.or(predicate2);
      jSTerm1.removeIf(predicate4);
      objectArray0[4] = (Object) jSTerm1;
      jSTerm0.toArray(objectArray0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 3
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution2.removeAllElements();
      jSSubstitution2.add((Object) jSSubstitution1);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(DArj2^vP'");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.resetSyntax();
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 4
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(r2 D-L&pTfr#et");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 5
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "(;2# &pTf#r?#et");
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution2.removeAllElements();
      jSSubstitution2.add((Object) "(;2# &pTf#r?#et");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("(DArj2^vP'");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 6
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      String string0 = ".xpeted ('";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(".xpeted ('");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      UnaryOperator.identity();
      JSJshopVars.verticalL = 480;
      jSTerm1.isGround();
      jSTerm2.setSize(480);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution3);
      // Undeclared exception!
      try { 
        jSTerm2.cloneT();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 7
  /*Coverage entropy=2.0620695413001644
  */
  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(42, 42);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashSlashComments(false);
      streamTokenizer1.slashStarComments(true);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ordinaryChar((-1737));
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = jSTerm1.matches(jSTerm0, jSSubstitution1);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      JSJshopVars.backquote = (-4);
      StringReader stringReader2 = new StringReader("Cnz/SPpUk6\u0005&V\"wB9");
      StreamTokenizer streamTokenizer8 = new StreamTokenizer(stringReader2);
      StreamTokenizer streamTokenizer9 = new StreamTokenizer(stringReader0);
      streamTokenizer9.slashSlashComments(true);
      jSTerm1.cloneT();
      jSTerm1.applySubstitutionT(jSSubstitution2);
      assertFalse(jSTerm1.isConstant());
      assertFalse(jSTerm1.isFunction());
      assertFalse(jSTerm0.isFunction());
      assertEquals(1, jSSubstitution2.size());
      assertNotSame(jSTerm1, jSTerm2);
      assertEquals("[?%%%]", jSTerm1.toString());
  }

  /**
  //Test case number: 8
  /*Coverage entropy=1.8460525146995628
  */
  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = (JSSubstitution)jSSubstitution0.clone();
      jSSubstitution0.clear();
      Integer integer0 = new Integer(125);
      jSSubstitution1.add((Object) integer0);
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution1);
      jSSubstitution2.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.call();
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 9
  /*Coverage entropy=2.302786656116785
  */
  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(42);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.makeFunction();
      stringReader0.read();
      jSTerm2.cloneT();
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      jSTerm0.cloneT();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm3 = null;
      try {
        jSTerm3 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 10
  /*Coverage entropy=2.4091404945060573
  */
  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hDz5|5c");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.quoteChar(42);
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm1.call();
      jSTerm2.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm2.addElement(jSTerm0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm2.makeFunction();
      stringReader0.read();
      JSJshopVars.rightBrac = 63;
      JSTerm jSTerm3 = jSTerm2.cloneT();
      jSTerm1.standardizerTerm();
      jSTerm2.isGround();
      JSTerm jSTerm4 = jSTerm0.cloneT();
      jSTerm4.call();
      jSTerm2.equals(jSTerm1);
      jSTerm2.cloneT();
      StringBuffer stringBuffer0 = jSTerm3.toStr();
      assertEquals("[%%%, [%%%]]", jSTerm2.toString());
      assertEquals("(%%% %%% )", stringBuffer0.toString());
  }

  /**
  //Test case number: 11
  /*Coverage entropy=2.01615371726138
  */
  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("Reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.equals(jSTerm1);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.applySubstitutionT(jSSubstitution0);
      stringReader0.read();
      JSJshopVars.backquote = (-3);
      jSTerm0.clear();
      jSTerm0.setSize(874);
      jSTerm0.equals(jSTerm1);
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 12
  /*Coverage entropy=1.7917594692280554
  */
  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) null);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      jSTerm0.cloneT();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 13
  /*Coverage entropy=2.0966552400266623
  */
  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader("I$DY,DgAr/~+,G*HH");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Object object0 = jSTerm0.clone();
      jSTerm0.addElement(object0);
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution1);
      jSTerm2.print();
      jSTerm0.call();
      jSTerm2.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm1.cloneT();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 14
  /*Coverage entropy=2.150111030669994
  */
  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSTerm2.addElement(jSTerm0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSTerm3.print();
      jSTerm1.call();
      JSTerm jSTerm4 = jSTerm3.applySubstitutionT(jSSubstitution0);
      jSTerm4.cloneT();
      jSTerm2.cloneT();
      assertEquals("[.expeted '(', [.expeted '(']]", jSTerm2.toString());
  }

  /**
  //Test case number: 15
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.cloneT();
      JSTerm jSTerm1 = jSTerm0.standardizerTerm();
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 16
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      Comparator<JSSubstitution> comparator0 = (Comparator<JSSubstitution>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSSubstitution0.sort(comparator0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      Object object0 = new Object();
      Predicate<Object> predicate0 = Predicate.isEqual(object0);
      Predicate<Object> predicate1 = predicate0.negate();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      Predicate.isEqual((Object) jSSubstitution5);
      Predicate<Object> predicate2 = predicate1.and(predicate0);
      predicate0.or(predicate1);
      Predicate<Object> predicate3 = predicate2.or(predicate1);
      jSTerm1.removeIf(predicate3);
      jSTerm0.applySubstitutionT(jSSubstitution1);
      System.setCurrentTimeMillis((-1L));
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      // Undeclared exception!
      try { 
        jSTerm1.applySubstitutionT(jSSubstitution3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 17
  /*Coverage entropy=1.9984928282265373
  */
  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exZeted '(o");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSJshopVars.backquote = (-1);
      jSTerm0.equals(jSTerm0);
      jSTerm0.standardizerTerm();
      jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-113L));
      System.setCurrentTimeMillis((-1915L));
      jSTerm1.addElement(jSTerm2);
      System.setCurrentTimeMillis(3670L);
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(2762L);
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm3.isGround();
      assertEquals("[.exZeted '(o, [.exZeted '(o]]", jSTerm1.toString());
      assertTrue(boolean0);
  }

  /**
  //Test case number: 18
  /*Coverage entropy=1.9867316488081914
  */
  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("1.0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.stream();
      jSTerm1.removeAllElements();
      jSTerm0.call();
      streamTokenizer0.slashSlashComments(false);
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 19
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".exZeted '(o");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.setSize(39);
      jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 20
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      int int0 = 127;
      JSJshopVars.backquote = 127;
      jSTerm0.addElement(".expeted '('");
      // Undeclared exception!
      try { 
        jSTerm0.cloneT();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 21
  /*Coverage entropy=1.9328065726143313
  */
  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.backquote = 127;
      jSSubstitution2.add((Object) "iarj2");
      jSSubstitution2.add((Object) "iarj2");
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm0.cloneT();
      JSJshopVars.rightBrac = (-90);
      jSSubstitution1.add((Object) jSSubstitution3);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSSubstitution2.add((Object) jSSubstitution3);
      JSJshopVars.dot = 127;
      jSSubstitution1.add((Object) jSSubstitution0);
      jSTerm0.makeEval(true);
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 22
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      jSTerm0.lastElement();
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer2 = new Integer(2);
      jSTerm0.addElement(integer2);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 23
  /*Coverage entropy=0.45056120886630463
  */
  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".expeted '('");
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSSubstitution1);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) jSSubstitution4);
      Predicate<Integer> predicate2 = predicate1.and(predicate0);
      Predicate<Integer> predicate3 = predicate2.or(predicate0);
      Predicate<Integer> predicate4 = predicate3.negate();
      Predicate<Integer> predicate5 = predicate4.and(predicate3);
      Predicate<Integer> predicate6 = predicate1.negate();
      jSTerm0.lastElement();
      Predicate<Object> predicate7 = Predicate.isEqual((Object) ".expeted '('");
      Predicate<Object> predicate8 = predicate0.or(predicate7);
      Predicate<Integer> predicate9 = predicate5.and(predicate3);
      predicate5.or(predicate3);
      predicate6.or(predicate4);
      predicate4.and(predicate8);
      predicate3.negate();
      predicate9.and(predicate4);
      jSSubstitution1.removeIf(predicate9);
      jSSubstitution1.clear();
      JSTerm jSTerm1 = new JSTerm();
      jSTerm0.addElement((Object) null);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 24
  /*Coverage entropy=0.9502705392332347
  */
  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) jSTerm0);
      jSTerm0.addElement(jSSubstitution0);
      StringReader stringReader0 = new StringReader(".m(");
      jSSubstitution0.add((Object) jSSubstitution0);
      jSSubstitution0.trimToSize();
      jSTerm0.isFunction();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 25
  /*Coverage entropy=1.9459347757561138
  */
  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[1] = (Object) "(";
      objectArray0[5] = (Object) "(";
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add(object0);
      StringReader stringReader0 = new StringReader("9TQ>@?Ex|P0B");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      JSTerm jSTerm2 = jSTerm1.applySubstitutionT(jSSubstitution0);
      jSSubstitution0.add((Object) jSTerm1);
      Integer integer0 = new Integer((-166));
      jSSubstitution0.add((Object) integer0);
      jSTerm2.makeEval(true);
      jSTerm2.call();
      System.setCurrentTimeMillis((-112));
      jSTerm0.standardizerTerm();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 26
  /*Coverage entropy=1.4750763110546947
  */
  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      jSTerm0.add((Object) "(");
      Object object0 = new Object();
      objectArray0[0] = (Object) "(";
      JSJshopVars.percent = (-1);
      objectArray0[1] = (Object) "(";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[6] = (Object) "(";
      Integer integer0 = new Integer((-2));
      Integer integer1 = new Integer((-2));
      jSTerm0.addElement(objectArray0[0]);
      System.setCurrentTimeMillis((-2));
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 27
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution0);
      jSTerm0.addElement(objectArray0[0]);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 28
  /*Coverage entropy=1.5607104090414063
  */
  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSJshopVars.semicolon = (-3);
      jSTerm0.stream();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 29
  /*Coverage entropy=2.120161325783467
  */
  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.backquote = 127;
      jSSubstitution2.add((Object) "iarj2");
      jSSubstitution2.add((Object) "iarj2");
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.addAll((Collection) jSSubstitution0);
      jSSubstitution2.add((Object) jSSubstitution3);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSJshopVars.lessT = (-191);
      JSJshopVars.rightBrac = (-112);
      jSSubstitution1.add((Object) jSSubstitution3);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSJshopVars.colon = 94;
      jSSubstitution2.add((Object) jSSubstitution0);
      JSJshopVars.dot = (-112);
      jSTerm2.equals(jSTerm1);
      jSTerm0.makeEval(true);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 >= 1
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 30
  /*Coverage entropy=1.9721037385162659
  */
  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      StringReader stringReader0 = new StringReader("z");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.eolIsSignificant(false);
      jSTerm0.addElement("-ZRZF?sH]eH:o|Ol");
      streamTokenizer0.slashStarComments(false);
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution0);
      JSJshopVars.colon = (-4);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.matches(jSTerm2, jSSubstitution0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      jSTerm0.cloneT();
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer7 = null;
      try {
        streamTokenizer7 = new StreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  /**
  //Test case number: 31
  /*Coverage entropy=1.913303656753166
  */
  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) jSTerm0;
      objectArray0[1] = (Object) jSTerm0;
      objectArray0[2] = (Object) jSTerm0;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.removeAllElements();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm1 = jSTerm0.call();
      jSSubstitution1.add((Object) jSTerm0);
      // Undeclared exception!
      try { 
        jSTerm1.print();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 32
  /*Coverage entropy=1.8989267893363289
  */
  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSJshopVars.backquote = 127;
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm1.addElement(jSSubstitution4);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      jSTerm0.applySubstitutionT(jSSubstitution2);
      // Undeclared exception!
      try { 
        jSTerm1.toStr();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 33
  /*Coverage entropy=2.39652864243043
  */
  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm1.call();
      UnaryOperator.identity();
      JSJshopVars.verticalL = 477;
      jSTerm1.isGround();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution4);
      JSTerm jSTerm4 = jSTerm2.cloneT();
      jSSubstitution3.add((Object) ".expeted '('");
      jSTerm4.makeEval(true);
      JSTerm jSTerm5 = new JSTerm();
      jSTerm1.equals(jSTerm3);
      jSTerm1.print();
      jSTerm4.cloneT();
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(726L);
  }

  /**
  //Test case number: 34
  /*Coverage entropy=1.4978661367769952
  */
  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution1.removeAll(jSSubstitution2);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.isEmpty();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      JSSubstitution jSSubstitution7 = new JSSubstitution();
      JSSubstitution jSSubstitution8 = new JSSubstitution();
      jSSubstitution8.clone();
      jSSubstitution8.assignFailure();
      UnaryOperator.identity();
      UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator.identity();
      JSSubstitution jSSubstitution9 = new JSSubstitution();
      jSSubstitution0.replaceAll(unaryOperator0);
      JSSubstitution jSSubstitution10 = new JSSubstitution();
      Integer integer0 = new Integer(2373);
      JSSubstitution jSSubstitution11 = new JSSubstitution();
      JSSubstitution jSSubstitution12 = new JSSubstitution();
      JSSubstitution jSSubstitution13 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution1);
      JSSubstitution jSSubstitution14 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 35
  /*Coverage entropy=1.9269145052641095
  */
  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      jSTerm2.isFunction();
      jSTerm0.standardizerTerm();
      jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-113L));
      System.setCurrentTimeMillis((-1915L));
      jSTerm2.standardizerTerm();
      System.setCurrentTimeMillis(0L);
  }

  /**
  //Test case number: 36
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 37
  /*Coverage entropy=1.8288411561741995
  */
  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      String string0 = "?%%%0";
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(42, 42);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.eolIsSignificant(false);
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(streamTokenizer1);
      streamTokenizer1.slashStarComments(false);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar((-3));
      // Undeclared exception!
      try { 
        jSTerm0.matches(jSTerm1, jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.io.StreamTokenizer cannot be cast to java.lang.String
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 38
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Integer integer0 = new Integer(35);
      jSSubstitution0.add((Object) integer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) "");
      jSSubstitution2.removeAllElements();
      jSTerm0.addElement("");
      jSSubstitution1.add((Object) jSSubstitution0);
      jSSubstitution2.iterator();
      StringReader stringReader0 = new StringReader("AH;BpBbWBwA]|");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution1.removeAllElements();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      jSTerm0.firstElement();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.setSize(3);
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution6);
      jSSubstitution6.add((Object) jSSubstitution0);
      JSTerm jSTerm1 = new JSTerm();
      System.setCurrentTimeMillis(35);
      // Undeclared exception!
      try { 
        jSTerm0.isGround();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 39
  /*Coverage entropy=2.037734194785151
  */
  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      int int0 = 42;
      streamTokenizer0.wordChars(42, 42);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm2.equals(jSTerm1);
      JSTerm jSTerm3 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm3.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 40
  /*Coverage entropy=1.631345420808597
  */
  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      streamTokenizer0.wordChars((-4), (-4));
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashStarComments(false);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      streamTokenizer4.slashSlashComments(false);
      streamTokenizer4.ordinaryChar((-1));
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      streamTokenizer4.pushBack();
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      streamTokenizer5.ordinaryChars((-4), (-1));
      streamTokenizer5.ordinaryChars((-4), (-4));
      streamTokenizer5.whitespaceChars((-4), 2029);
      streamTokenizer0.ttype = (-4);
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("?%%%0");
      streamTokenizer5.slashSlashComments(true);
      System.setCurrentTimeMillis((-4));
      streamTokenizer7.slashStarComments(false);
      jSTerm1.matches(jSTerm0, jSSubstitution2);
      System.setCurrentTimeMillis((-4));
  }

  /**
  //Test case number: 41
  /*Coverage entropy=1.6674619334292948
  */
  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Integer integer0 = new Integer((-2880));
      jSTerm0.addElement(integer0);
      Object[] objectArray0 = new Object[8];
      Object object0 = new Object();
      objectArray0[0] = (Object) "(";
      objectArray0[1] = (Object) "(";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[6] = (Object) "(";
      Integer integer1 = new Integer((-2));
      Integer integer2 = new Integer((-2));
      jSTerm0.addElement(objectArray0[0]);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String cannot be cast to umd.cs.shop.JSTerm
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 42
  /*Coverage entropy=1.8805945173035012
  */
  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.ttype = 2031;
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      streamTokenizer0.eolIsSignificant(false);
      jSTerm0.addElement(".expeted '('");
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.eolIsSignificant(false);
      streamTokenizer1.slashStarComments(true);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(2031);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      stringReader0.read();
      jSTerm0.matches(jSTerm1, jSSubstitution1);
      streamTokenizer0.whitespaceChars(46, (-1057));
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = null;
      streamTokenizer2.commentChar(2031);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      jSTerm1.cloneT();
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 43
  /*Coverage entropy=2.0028830410906506
  */
  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.addElement("?%%%0");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      jSTerm0.standardizerTerm();
      jSTerm2.standardizerTerm();
      JSTerm jSTerm3 = new JSTerm();
      JSTerm jSTerm4 = null;
      try {
        jSTerm4 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 44
  /*Coverage entropy=2.2685350920163803
  */
  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(42, 1677);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar(1677);
      streamTokenizer3.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer3.slashStarComments(true);
      streamTokenizer2.ordinaryChar(0);
      boolean boolean0 = jSTerm1.isGround();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      assertFalse(jSTerm1.isFunction());
      
      JSTerm jSTerm3 = jSTerm0.call();
      JSTerm jSTerm4 = new JSTerm();
      boolean boolean1 = jSTerm3.equals(jSTerm4);
      assertTrue(boolean1 == boolean0);
      assertFalse(jSTerm0.isFunction());
      assertEquals("[?%%%]", jSTerm3.toString());
      assertNotSame(jSTerm0, jSTerm2);
      assertFalse(boolean1);
  }

  /**
  //Test case number: 45
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      // Undeclared exception!
      try { 
        jSTerm0.equals((JSTerm) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 46
  /*Coverage entropy=1.7481554572476763
  */
  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      UnaryOperator.identity();
      JSTerm jSTerm3 = jSTerm0.cloneT();
      jSTerm1.addAll((Collection) jSTerm2);
      jSTerm3.iterator();
      boolean boolean0 = jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm1.isFunction());
      assertFalse(boolean0);
  }

  /**
  //Test case number: 47
  /*Coverage entropy=2.2510486588729868
  */
  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSTerm0.addElement(".xpeted ('");
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm0.applySubstitutionT(jSSubstitution2);
      JSJshopVars.verticalL = 480;
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm0.addElement(jSSubstitution3);
      JSTerm jSTerm3 = jSTerm2.cloneT();
      assertFalse(jSTerm3.isEval());
      
      Consumer<String> consumer0 = (Consumer<String>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      jSSubstitution2.forEach(consumer0);
      jSSubstitution2.add((Object) ".xpeted ('");
      JSJshopVars.coma = 480;
      JSTerm jSTerm4 = jSTerm3.call();
      assertTrue(jSTerm2.isFunction());
      assertTrue(jSTerm4.isFunction());
      assertNotSame(jSTerm4, jSTerm3);
      assertEquals(10, jSTerm4.capacity());
      
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertFalse(boolean0);
      
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      jSSubstitution4.add((Object) jSSubstitution5);
      JSTerm jSTerm5 = jSTerm1.standardizerTerm();
      assertTrue(jSTerm1.isFunction());
      assertTrue(jSTerm5.isFunction());
      assertNotSame(jSTerm1, jSTerm5);
  }

  /**
  //Test case number: 48
  /*Coverage entropy=0.8675632284814612
  */
  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution1.add((Object) jSSubstitution3);
      jSSubstitution1.clear();
      jSSubstitution1.addElements(jSSubstitution0);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      Predicate<Object> predicate0 = Predicate.isEqual((Object) jSTerm0);
      Integer integer0 = new Integer(31);
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = predicate3.and(predicate0);
      predicate4.test(integer0);
      Predicate<Object> predicate5 = predicate0.and(predicate0);
      predicate0.or(predicate5);
      predicate4.and(predicate5);
      predicate2.and(predicate1);
      predicate3.negate();
      predicate4.negate();
      Predicate.isEqual((Object) integer0);
      jSSubstitution3.removeIf(predicate5);
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis((-1));
      jSTerm1.toStr();
      StringBuffer stringBuffer0 = jSTerm1.toStr();
      assertFalse(jSTerm1.isFunction());
      assertEquals("?%%% ", stringBuffer0.toString());
      assertFalse(jSTerm1.isConstant());
  }

  /**
  //Test case number: 49
  /*Coverage entropy=1.0888999753452235
  */
  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      Object object0 = new Object();
      JSTerm jSTerm2 = new JSTerm();
      Object[] objectArray0 = new Object[3];
      objectArray0[0] = (Object) "(";
      objectArray0[1] = (Object) jSTerm2;
      objectArray0[2] = (Object) jSTerm0;
      jSTerm2.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("zI*j)!lBZ^|9");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(121, (-3176));
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm3 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(121);
      JSTerm jSTerm4 = jSTerm2.parseList(streamTokenizer0);
      assertFalse(jSTerm4.isFunction());
      assertEquals("[nil]", jSTerm4.toString());
      assertFalse(jSTerm4.isVariable());
      assertTrue(jSTerm4.isConstant());
  }

  /**
  //Test case number: 50
  /*Coverage entropy=1.5977295736436044
  */
  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Predicate<Integer> predicate0 = Predicate.isEqual((Object) ".expeted '('");
      Predicate<Object> predicate1 = Predicate.isEqual((Object) "LcTw;_xWxWr;G_ogc");
      Predicate<Integer> predicate2 = predicate0.and(predicate1);
      Predicate<Integer> predicate3 = predicate2.negate();
      Predicate<Integer> predicate4 = predicate3.or(predicate2);
      Predicate<Object> predicate5 = Predicate.isEqual((Object) predicate2);
      predicate5.test(predicate1);
      Predicate<Object> predicate6 = predicate5.negate();
      predicate3.or(predicate6);
      predicate3.and(predicate2);
      Predicate<Integer> predicate7 = predicate4.negate();
      predicate7.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      System.setCurrentTimeMillis(0L);
      jSTerm1.matches(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      
      JSSubstitution jSSubstitution1 = jSTerm1.matches(jSTerm0, (JSSubstitution) null);
      assertTrue(jSSubstitution1.fail());
  }

  /**
  //Test case number: 51
  /*Coverage entropy=1.3114313374732374
  */
  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[1] = (Object) "(";
      objectArray0[5] = (Object) "(";
      Integer integer0 = new Integer((-530));
      StringReader stringReader0 = new StringReader("Unexpected ) while reading Predicate");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(false);
      Integer integer1 = new Integer((-4));
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer2 = new Integer((-3));
      unaryOperator0.apply(integer2);
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(60);
      Integer integer5 = new Integer(1026);
      unaryOperator0.apply(integer5);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer6 = new Integer(1);
      jSTerm0.removeElement(objectArray0[5]);
      Function.identity();
      jSTerm0.parseList(streamTokenizer0);
      assertEquals(41, streamTokenizer0.ttype);
      assertTrue(jSTerm0.isEmpty());
  }

  /**
  //Test case number: 52
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.markSupported();
      stringReader0.read();
      stringReader0.markSupported();
      StringReader stringReader1 = new StringReader("(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.pushBack();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader1);
      streamTokenizer1.slashStarComments(true);
      streamTokenizer0.whitespaceChars((-4), (-4));
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 53
  /*Coverage entropy=0.5982695885852573
  */
  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "6<(");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Integer> predicate5 = predicate1.and(predicate2);
      Predicate<Integer> predicate6 = predicate2.or(predicate3);
      Predicate<Integer> predicate7 = predicate6.negate();
      Predicate<Object> predicate8 = predicate4.negate();
      Predicate<Object> predicate9 = predicate8.negate();
      Predicate<Object> predicate10 = predicate4.and(predicate3);
      predicate9.or(predicate10);
      Predicate<Integer> predicate11 = predicate2.negate();
      predicate11.negate();
      Predicate<Integer> predicate12 = predicate1.and(predicate11);
      Predicate<Integer> predicate13 = predicate2.and(predicate3);
      Predicate<Integer> predicate14 = predicate2.and(predicate5);
      predicate14.or(predicate13);
      predicate11.or(predicate7);
      predicate5.negate();
      predicate14.or(predicate12);
      Predicate<Object> predicate15 = Predicate.isEqual((Object) predicate6);
      predicate15.and(predicate8);
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate12);
      StringReader stringReader0 = new StringReader("6<(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.toStr();
      System.setCurrentTimeMillis((-463L));
      jSTerm0.toStr();
      StringBuffer stringBuffer0 = jSTerm0.toStr();
      assertEquals((-2), streamTokenizer0.ttype);
      assertEquals("6.0 ", stringBuffer0.toString());
  }

  /**
  //Test case number: 54
  /*Coverage entropy=2.0140355237092673
  */
  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      StringReader stringReader0 = new StringReader("vhci3nrjD&nkE");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.print();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      jSTerm1.retainAll(jSSubstitution0);
      JSTerm jSTerm2 = jSTerm1.call();
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      jSTerm2.sort(comparator0);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm3.removeAllElements();
      // Undeclared exception!
      try { 
        jSTerm2.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 55
  /*Coverage entropy=2.1030692794542913
  */
  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "U)KtWpY|";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = 41;
      streamTokenizer0.slashStarComments(true);
      streamTokenizer0.pushBack();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSTerm jSTerm2 = jSTerm1.standardizerTerm();
      JSTerm jSTerm3 = jSTerm0.call();
      jSTerm0.print();
      jSTerm3.equals(jSTerm2);
      jSTerm0.makeFunction();
      jSTerm1.isVariable();
      jSTerm1.isConstant();
      jSTerm3.makeFunction();
      JSTerm jSTerm4 = jSTerm3.call();
      assertTrue(jSTerm0.isFunction());
      assertNotSame(jSTerm4, jSTerm3);
  }

  /**
  //Test case number: 56
  /*Coverage entropy=2.4269840307183714
  */
  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      StringReader stringReader0 = new StringReader("?%%%0");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.wordChars(42, 42);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer1.slashStarComments(true);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("?%%%");
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader1);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer2.ordinaryChar((-4));
      streamTokenizer3.ordinaryChar((-4));
      JSTerm jSTerm0 = new JSTerm(streamTokenizer3);
      JSTerm jSTerm1 = jSTerm0.applySubstitutionT(jSSubstitution0);
      streamTokenizer3.slashStarComments(true);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm2 = jSTerm1.cloneT();
      jSSubstitution0.add((Object) null);
      jSTerm1.makeEval(true);
      JSTerm jSTerm3 = jSTerm1.call();
      jSTerm3.equals(jSTerm2);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution2);
      jSTerm2.standardizerTerm();
      assertFalse(jSTerm0.isEval());
      assertTrue(jSTerm1.isEval());
      assertFalse(jSTerm2.equals((Object)jSTerm3));
  }

  /**
  //Test case number: 57
  /*Coverage entropy=1.1209503926735835
  */
  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.add((Object) jSSubstitution1);
      jSSubstitution0.clear();
      StringReader stringReader0 = new StringReader("= ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(596);
      Integer integer1 = new Integer((-722));
      Integer integer2 = new Integer((-316));
      unaryOperator0.apply(integer1);
      Integer integer3 = new Integer((-722));
      Integer integer4 = new Integer(38);
      Integer integer5 = new Integer((-1245));
      Integer integer6 = new Integer(33);
      JSTerm jSTerm0 = new JSTerm();
      stringReader0.reset();
      Integer integer7 = new Integer(1);
      jSTerm0.addElement(integer1);
      System.setCurrentTimeMillis(46);
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 58
  /*Coverage entropy=2.4912294606555334
  */
  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.isGround();
      jSTerm1.makeVariable();
      jSTerm0.addAll((Collection) jSTerm1);
      jSTerm1.isEval();
      streamTokenizer0.eolIsSignificant(false);
      jSTerm0.makeEval(true);
      jSTerm1.makeFunction();
      jSTerm0.isEval();
      jSTerm1.toStr();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1);
      jSTerm0.print();
      JSTerm jSTerm3 = jSTerm2.cloneT();
      JSTerm jSTerm4 = new JSTerm();
      jSTerm0.equals(jSTerm1);
      JSPredicateForm jSPredicateForm0 = new JSPredicateForm();
      jSTerm2.removeAll(jSPredicateForm0);
      jSTerm3.standardizerTerm();
      jSTerm2.isGround();
      JSTerm jSTerm5 = null;
      try {
        jSTerm5 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 59
  /*Coverage entropy=1.5723854919701732
  */
  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      streamTokenizer0.wordChars(4362, 5202);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer1.slashStarComments(true);
      stringReader0.reset();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSTerm jSTerm1 = new JSTerm();
      JSTerm jSTerm2 = new JSTerm(streamTokenizer1);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader0);
      streamTokenizer1.ordinaryChar(64);
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSTerm1.matches(jSTerm2, jSSubstitution0);
      StreamTokenizer streamTokenizer4 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer5 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer6 = new StreamTokenizer(stringReader0);
      StringReader stringReader1 = new StringReader("gt1,");
      StreamTokenizer streamTokenizer7 = new StreamTokenizer(stringReader1);
      streamTokenizer1.slashSlashComments(true);
      System.setCurrentTimeMillis(1L);
      System.setCurrentTimeMillis(1L);
      streamTokenizer1.pushBack();
      jSTerm2.matches(jSTerm1, jSSubstitution0);
      JSTerm jSTerm3 = new JSTerm();
      jSTerm0.matches(jSTerm2, jSSubstitution3);
      assertEquals((-2), streamTokenizer1.ttype);
      assertFalse(jSTerm0.isEval());
  }

  /**
  //Test case number: 60
  /*Coverage entropy=1.3321790402101223
  */
  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.matches((JSTerm) null, jSSubstitution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 61
  /*Coverage entropy=1.1569876443452742
  */
  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(".expeted '('");
      stringReader1.skip((-1L));
      streamTokenizer0.nextToken();
      streamTokenizer0.pushBack();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      char[] charArray0 = new char[3];
      charArray0[0] = 'd';
      charArray0[1] = 'T';
      System.setCurrentTimeMillis(46);
      charArray0[2] = 's';
      stringReader1.read(charArray0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 62
  /*Coverage entropy=1.9269145052641095
  */
  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("4ly =NQ+Anl{*");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm0.isFunction();
      jSTerm0.standardizerTerm();
      jSTerm1.standardizerTerm();
      jSTerm0.equals(jSTerm1);
      System.setCurrentTimeMillis((-113L));
      System.setCurrentTimeMillis((-1928L));
      System.setCurrentTimeMillis(3670L);
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(3670L);
      System.setCurrentTimeMillis((-1928L));
      System.setCurrentTimeMillis(1883L);
  }

  /**
  //Test case number: 63
  /*Coverage entropy=1.294545165844896
  */
  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.makeConstant();
      StringReader stringReader0 = new StringReader("q");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      JSJshopVars.flagLevel = 36;
      // Undeclared exception!
      try { 
        jSTerm0.equals(jSTerm1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 64
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "*(");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Integer> predicate4 = predicate2.or(predicate3);
      Predicate<Integer> predicate5 = predicate4.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate7 = predicate0.negate();
      Predicate<Object> predicate8 = predicate3.negate();
      predicate8.or(predicate7);
      Predicate<Integer> predicate9 = predicate4.or(predicate8);
      Predicate<Integer> predicate10 = predicate9.negate();
      Predicate<Integer> predicate11 = predicate4.and(predicate5);
      Predicate<Integer> predicate12 = predicate2.or(predicate11);
      Predicate<Integer> predicate13 = predicate9.or(predicate5);
      Predicate<Integer> predicate14 = predicate4.or(predicate13);
      Predicate<Object> predicate15 = predicate6.or(predicate3);
      predicate15.and(predicate8);
      Predicate<Integer> predicate16 = predicate1.negate();
      Predicate<Integer> predicate17 = predicate16.or(predicate12);
      Predicate<Integer> predicate18 = predicate17.and(predicate12);
      predicate18.negate();
      Predicate<Integer> predicate19 = predicate17.and(predicate2);
      Predicate<Object> predicate20 = predicate8.and(predicate15);
      predicate19.or(predicate14);
      Predicate<Integer> predicate21 = predicate14.and(predicate20);
      Predicate.isEqual((Object) predicate19);
      predicate21.and(predicate10);
      predicate2.negate();
      jSSubstitution0.clear();
      int int0 = (-1104);
      Integer integer0 = new Integer((-1104));
      StreamTokenizer streamTokenizer0 = null;
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 65
  /*Coverage entropy=1.5396544474400977
  */
  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      StringReader stringReader0 = new StringReader("%kTN;qLXwQU_LU]sQ");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      boolean boolean0 = jSTerm0.equals(jSTerm1);
      assertEquals((-3), streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 66
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      jSSubstitution0.add((Object) "6<(");
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.trimToSize();
      jSSubstitution0.removeAllElements();
      jSSubstitution0.add((Object) "6<(");
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      StringReader stringReader0 = new StringReader("yh?S]Om^Tu");
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("%%%");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader1);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 67
  /*Coverage entropy=0.7356219397587946
  */
  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "*(");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Integer> predicate4 = predicate2.or(predicate3);
      Predicate<Integer> predicate5 = predicate4.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSSubstitution0);
      predicate6.negate();
      predicate0.or(predicate6);
      Predicate<Integer> predicate7 = predicate2.negate();
      Predicate<Integer> predicate8 = predicate7.and(predicate4);
      predicate5.or(predicate7);
      predicate7.or(predicate2);
      predicate5.or(predicate0);
      predicate2.and(predicate0);
      Predicate<Integer> predicate9 = predicate4.negate();
      predicate9.and(predicate0);
      predicate9.and(predicate8);
      jSSubstitution0.removeIf(predicate0);
      jSSubstitution0.clear();
      StringReader stringReader0 = new StringReader("u");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSTerm0.removeElement(jSSubstitution1);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 68
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "6<(");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      predicate1.and(predicate2);
      Predicate<Integer> predicate5 = predicate2.or(predicate3);
      Predicate<Integer> predicate6 = predicate5.negate();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      predicate4.and(predicate3);
      predicate0.or(predicate7);
      Predicate<Integer> predicate9 = predicate2.negate();
      predicate9.and(predicate6);
      Predicate<Integer> predicate10 = predicate9.and(predicate5);
      Predicate<Integer> predicate11 = predicate6.or(predicate9);
      predicate9.or(predicate2);
      predicate6.negate();
      predicate10.or(predicate11);
      predicate3.and(predicate8);
      Object object0 = new Object();
      Predicate.isEqual((Object) predicate5);
      JSTerm jSTerm0 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.parseList((StreamTokenizer) null);
        fail("Expecting exception: System.SystemExitException");
      
      } catch(System.SystemExitException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  /**
  //Test case number: 69
  /*Coverage entropy=1.0905994737794786
  */
  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Object[] objectArray0 = new Object[6];
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[1] = (Object) "c'=>";
      objectArray0[5] = (Object) "c'=>";
      StringReader stringReader0 = new StringReader("0-h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer1);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      UnaryOperator<Integer> unaryOperator1 = UnaryOperator.identity();
      unaryOperator1.compose((Function<? super Integer, ? extends Integer>) unaryOperator0);
      UnaryOperator.identity();
      Function.identity();
      Integer integer0 = new Integer((-2));
      unaryOperator1.apply(integer0);
      Object object1 = new Object();
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 70
  /*Coverage entropy=1.798652206252129
  */
  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("4ly =NQ+Anl{*");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      jSTerm1.isEmpty();
      jSTerm0.standardizerTerm();
      JSTerm jSTerm2 = new JSTerm();
      jSTerm1.isVariable();
      System.setCurrentTimeMillis((-113L));
      System.setCurrentTimeMillis((-1928L));
      System.setCurrentTimeMillis(3670L);
      jSTerm1.standardizerTerm();
      System.setCurrentTimeMillis(3670L);
      System.setCurrentTimeMillis((-1928L));
      System.setCurrentTimeMillis(1883L);
  }

  /**
  //Test case number: 71
  /*Coverage entropy=1.7328679513998633
  */
  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement("list");
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSTerm0.makeVariable();
      JSJshopVars.backquote = 127;
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      jSTerm0.cloneT();
      jSSubstitution2.spliterator();
      // Undeclared exception!
      try { 
        jSTerm0.applySubstitutionT(jSSubstitution2);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // umd.cs.shop.JSSubstitution cannot be cast to umd.cs.shop.JSPairVarTerm
         //
         verifyException("umd.cs.shop.JSSubstitution", e);
      }
  }

  /**
  //Test case number: 72
  /*Coverage entropy=0.6931471805599453
  */
  @Test(timeout = 4000)
  public void test72()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      JSTerm jSTerm1 = new JSTerm();
      JSJshopVars.interrogation = (-3);
      boolean boolean0 = jSTerm0.isConstant();
      assertFalse(boolean0);
  }

  /**
  //Test case number: 73
  /*Coverage entropy=0.3250829733914482
  */
  @Test(timeout = 4000)
  public void test73()  throws Throwable  {
      StringReader stringReader0 = new StringReader("U)KtWpY|");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.sval = "U)KtWpY|";
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      JSJshopVars.interrogation = 41;
      stringReader0.ready();
      jSTerm0.isConstant();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      streamTokenizer0.commentChar(41);
      JSTerm jSTerm2 = null;
      try {
        jSTerm2 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 74
  /*Coverage entropy=1.7478680974667573
  */
  @Test(timeout = 4000)
  public void test74()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.isEval();
      // Undeclared exception!
      try { 
        jSTerm0.standardizerTerm();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 75
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test75()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.spliterator();
      jSTerm0.makeEval(true);
      jSTerm0.isEval();
      JSTerm jSTerm1 = new JSTerm();
      // Undeclared exception!
      try { 
        jSTerm0.toStr();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 76
  /*Coverage entropy=1.242453324894
  */
  @Test(timeout = 4000)
  public void test76()  throws Throwable  {
      StringReader stringReader0 = new StringReader("hDz5|5c");
      stringReader0.reset();
      StringReader stringReader1 = new StringReader("IOk<Jf[vt ,^S");
      JSTerm jSTerm0 = new JSTerm();
      boolean boolean0 = jSTerm0.isGround();
      assertTrue(boolean0);
  }

  /**
  //Test case number: 77
  /*Coverage entropy=1.8805945173035012
  */
  @Test(timeout = 4000)
  public void test77()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(".expeted '('");
      JSTerm jSTerm1 = jSTerm0.cloneT();
      JSTerm jSTerm2 = jSTerm1.cloneT();
      JSTerm jSTerm3 = jSTerm1.standardizerTerm();
      boolean boolean0 = jSTerm2.equals(jSTerm0);
      jSTerm1.makeFunction();
      jSTerm1.remove((Object) jSTerm2);
      UnaryOperator.identity();
      jSTerm0.cloneT();
      jSTerm2.equals(jSTerm1);
      assertTrue(jSTerm2.isFunction());
      
      jSTerm1.cloneT();
      boolean boolean1 = jSTerm1.equals(jSTerm3);
      assertFalse(boolean1 == boolean0);
      assertFalse(jSTerm3.isEval());
      assertTrue(boolean1);
      assertNotSame(jSTerm3, jSTerm1);
  }

  /**
  //Test case number: 78
  /*Coverage entropy=0.8018185525433373
  */
  @Test(timeout = 4000)
  public void test78()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      jSSubstitution0.clear();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.trimToSize();
      jSSubstitution1.removeAllElements();
      StringReader stringReader0 = new StringReader("r2");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      jSTerm0.lastElement();
      jSTerm0.equals(jSTerm0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      StringReader stringReader1 = new StringReader("");
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = null;
      try {
        jSTerm1 = new JSTerm(streamTokenizer1);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 79
  /*Coverage entropy=1.1569876443452742
  */
  @Test(timeout = 4000)
  public void test79()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(".expeted '('");
      stringReader1.skip((-1L));
      streamTokenizer0.nextToken();
      streamTokenizer0.pushBack();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 80
  /*Coverage entropy=1.1490596969706202
  */
  @Test(timeout = 4000)
  public void test80()  throws Throwable  {
      JSTerm jSTerm0 = new JSTerm();
      Object[] objectArray0 = new Object[7];
      Object object0 = new Object();
      objectArray0[3] = object0;
      objectArray0[1] = (Object) "(";
      objectArray0[2] = (Object) jSTerm0;
      objectArray0[3] = (Object) jSTerm0;
      objectArray0[4] = (Object) jSTerm0;
      objectArray0[5] = (Object) "(";
      objectArray0[6] = (Object) "(";
      jSTerm0.toArray(objectArray0);
      StringReader stringReader0 = new StringReader("0-h");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.whitespaceChars(121, 59);
      streamTokenizer0.slashSlashComments(true);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      UnaryOperator.identity();
      streamTokenizer0.slashSlashComments(false);
      System.setCurrentTimeMillis(0L);
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      boolean boolean0 = jSTerm1.equals(jSTerm0);
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(boolean0);
  }

  /**
  //Test case number: 81
  /*Coverage entropy=1.1569876443452742
  */
  @Test(timeout = 4000)
  public void test81()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".expeted '('");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm0 = new JSTerm(streamTokenizer0);
      stringReader0.ready();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      StringReader stringReader1 = new StringReader(".expeted '('");
      stringReader1.skip((-2));
      streamTokenizer0.nextToken();
      streamTokenizer0.pushBack();
      streamTokenizer0.resetSyntax();
      stringReader1.markSupported();
      stringReader1.read();
      stringReader0.markSupported();
      stringReader0.read();
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm0.matches(jSTerm1, jSSubstitution0);
      StreamTokenizer streamTokenizer1 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer2 = new StreamTokenizer(stringReader0);
      StreamTokenizer streamTokenizer3 = new StreamTokenizer(stringReader1);
      StringReader stringReader2 = null;
      try {
        stringReader2 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  /**
  //Test case number: 82
  /*Coverage entropy=0.9002560512685369
  */
  @Test(timeout = 4000)
  public void test82()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "6<(");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Object> predicate4 = predicate0.and(predicate3);
      Predicate<Integer> predicate5 = predicate2.or(predicate3);
      Predicate<Integer> predicate6 = predicate5.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate7 = predicate4.negate();
      Predicate<Object> predicate8 = predicate7.negate();
      predicate4.and(predicate3);
      predicate0.or(predicate7);
      Predicate<Integer> predicate9 = predicate2.negate();
      predicate6.or(predicate0);
      predicate9.and(predicate6);
      Predicate<Integer> predicate10 = predicate9.and(predicate5);
      Predicate<Integer> predicate11 = predicate6.or(predicate9);
      Predicate<Integer> predicate12 = predicate9.or(predicate2);
      predicate6.negate();
      Predicate<Integer> predicate13 = predicate10.or(predicate11);
      Predicate<Object> predicate14 = predicate3.and(predicate8);
      Object object0 = new Object();
      Predicate<String> predicate15 = Predicate.isEqual((Object) predicate5);
      predicate6.and(predicate4);
      Integer integer0 = new Integer(125);
      predicate13.test(integer0);
      Predicate.isEqual((Object) predicate11);
      Predicate<Integer> predicate16 = predicate10.and(predicate14);
      Predicate<Integer> predicate17 = predicate13.negate();
      predicate16.and(predicate2);
      predicate12.and(predicate17);
      jSSubstitution0.removeIf(predicate4);
      jSSubstitution0.clear();
      JSTerm jSTerm0 = new JSTerm();
      jSTerm0.addElement(predicate15);
      StringReader stringReader0 = new StringReader("6<(");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      JSTerm jSTerm1 = new JSTerm(streamTokenizer0);
      jSTerm1.print();
      assertEquals((-2), streamTokenizer0.ttype);
      assertFalse(jSTerm1.isEval());
  }

  /**
  //Test case number: 83
  /*Coverage entropy=1.0751393240053733
  */
  @Test(timeout = 4000)
  public void test83()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(r2 -L&pTfr#et");
      char[] charArray0 = new char[1];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator.identity();
      Integer integer0 = new Integer(890);
      Integer integer1 = new Integer(874);
      Integer integer2 = new Integer((-334));
      Integer integer3 = new Integer(1);
      Integer integer4 = new Integer(38);
      Integer integer5 = new Integer((-1245));
      Integer integer6 = new Integer(43);
      Integer integer7 = new Integer(874);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer8 = new Integer(46);
      jSTerm0.addElement(integer2);
      System.setCurrentTimeMillis((-334));
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 84
  /*Coverage entropy=1.5810937501718239
  */
  @Test(timeout = 4000)
  public void test84()  throws Throwable  {
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      JSSubstitution jSSubstitution1 = new JSSubstitution();
      JSSubstitution jSSubstitution2 = new JSSubstitution();
      jSSubstitution2.add((Object) "darj2");
      jSSubstitution2.add((Object) "darj2");
      jSSubstitution2.addElement(jSSubstitution0);
      JSSubstitution jSSubstitution3 = new JSSubstitution();
      jSSubstitution2.add((Object) jSSubstitution3);
      JSSubstitution jSSubstitution4 = new JSSubstitution();
      JSTerm jSTerm0 = new JSTerm();
      JSSubstitution jSSubstitution5 = new JSSubstitution();
      JSSubstitution jSSubstitution6 = new JSSubstitution();
      // Undeclared exception!
      try { 
        jSTerm0.call();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  /**
  //Test case number: 85
  /*Coverage entropy=-0.0
  */
  @Test(timeout = 4000)
  public void test85()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(;2# &pTf#r?#et");
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      streamTokenizer0.slashSlashComments(true);
      streamTokenizer0.eolIsSignificant(true);
      streamTokenizer0.eolIsSignificant(true);
      JSTerm jSTerm0 = null;
      try {
        jSTerm0 = new JSTerm(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 86
  /*Coverage entropy=0.6551416497122078
  */
  @Test(timeout = 4000)
  public void test86()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(r2 -L&pTfr#et");
      char[] charArray0 = new char[0];
      stringReader0.read(charArray0);
      StreamTokenizer streamTokenizer0 = new StreamTokenizer(stringReader0);
      UnaryOperator<Integer> unaryOperator0 = UnaryOperator.identity();
      Integer integer0 = new Integer(890);
      streamTokenizer0.eolIsSignificant(false);
      Integer integer1 = new Integer(1);
      unaryOperator0.apply(integer1);
      Integer integer2 = new Integer((-2627));
      Integer integer3 = new Integer(1);
      unaryOperator0.apply(integer3);
      JSTerm jSTerm0 = new JSTerm();
      Integer integer4 = new Integer(44);
      jSTerm0.removeElement(integer4);
      Function.identity();
      // Undeclared exception!
      try { 
        jSTerm0.parseList(streamTokenizer0);
        fail("Expecting exception: Error");
      
      } catch(Error e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("umd.cs.shop.JSTerm", e);
      }
  }

  /**
  //Test case number: 87
  /*Coverage entropy=0.6365141682948128
  */
  @Test(timeout = 4000)
  public void test87()  throws Throwable  {
      Predicate<Object> predicate0 = Predicate.isEqual((Object) "*(");
      Predicate<Integer> predicate1 = Predicate.isEqual((Object) predicate0);
      Predicate<Integer> predicate2 = predicate1.or(predicate0);
      Predicate<Object> predicate3 = predicate0.and(predicate0);
      Predicate<Integer> predicate4 = predicate2.or(predicate3);
      Predicate<Integer> predicate5 = predicate2.negate();
      JSSubstitution jSSubstitution0 = new JSSubstitution();
      Predicate<Object> predicate6 = Predicate.isEqual((Object) jSSubstitution0);
      Predicate<Object> predicate7 = predicate0.negate();
      predicate6.or(predicate7);
      Predicate<Integer> predicate8 = predicate4.or(predicate6);
      Predicate<Integer> predicate9 = predicate8.negate();
      Predicate<Integer> predicate10 = predicate4.and(predicate5);
      Predicate<Integer> predicate11 = predicate2.or(predicate10);
      Predicate<Integer> predicate12 = predicate8.or(predicate5);
      predicate10.negate();
      Predicate<Integer> predicate13 = predicate4.or(predicate12);
      Predicate<Object> predicate14 = predicate6.or(predicate3);
      predicate14.and(predicate0);
      Predicate<Integer> predicate15 = predicate1.negate();
      Predicate.isEqual((Object) predicate1);
      Predicate<Integer> predicate16 = predicate15.or(predicate11);
      Predicate<Integer> predicate17 = predicate16.and(predicate11);
      predicate17.negate();
      Predicate<Integer> predicate18 = predicate16.and(predicate2);
      Predicate<Object> predicate19 = predicate7.and(predicate14);
      predicate18.or(predicate13);
      Predicate<Integer> predicate20 = predicate13.and(predicate19);
      Predicate.isEqual((Object) predicate18);
      predicate20.and(predicate9);
      predicate2.negate();
      predicate9.and(predicate7);
      predicate4.and(predicate19);
      jSSubstitution0.removeIf(predicate10);
      jSSubstitution0.clear();
      JSTerm jSTerm0 = new JSTerm();
      System.setCurrentTimeMillis(0L);
      // Undeclared exception!
      try { 
        jSTerm0.print();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0 >= 0
         //
         verifyException("java.util.Vector", e);
      }
  }
}
